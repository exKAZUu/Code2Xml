//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 Php.g 2014-10-29 10:26:09

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

using Antlr.Runtime;
using Code2Xml.Core.Generators.ANTLRv3;
using Antlr.Runtime.Tree;

namespace  Code2Xml.Core.Tests.Generators.ANTLRv3.Parsers 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PhpParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Abstract", "Ampersand", "And", "ArrayAssign", "ArrayType", "As", "AsignmentOperator", "Asterisk", "Bang", "BodyString", "BodyStringRest", "BodyStringRestShortTag", "BoolType", "BooleanType", "Break", "Case", "Catch", "Class", "ClassMember", "Clone", "CloseCurlyBracket", "CloseRoundBracket", "CloseSquareBracket", "Colon", "Comma", "ComparisionOperator", "Const", "Continue", "DNum", "Decimal", "Default", "Die", "Digits", "Do", "Dot", "DoubleQuotedString", "DoubleType", "Echo", "Else", "ElseIf", "Empty", "Eol", "EqualityOperator", "Equals", "EscapeCharector", "Eval", "Exit", "Exponent_DNum", "Extends", "False", "Final", "Finally", "FloatType", "For", "Foreach", "Forwardslash", "Function", "Global", "Goto", "HaltCompiler", "Hat", "HereDoc", "HereDocContents", "Hexadecimal", "If", "Implements", "Include", "IncludeOnce", "IncrementOperator", "InstanceMember", "Instanceof", "IntType", "Integer", "IntegerType", "Interface", "Isset", "List", "LogicalAnd", "LogicalOr", "Minus", "MultilineComment", "Namespace", "New", "Null", "OP", "ObjectType", "Octal", "OpenCurlyBracket", "OpenRoundBracket", "OpenSquareBracket", "Or", "Percent", "Pipe", "Plus", "Print", "Private", "Protected", "Public", "QuestionMark", "Real", "RealType", "Require", "RequireOnce", "Return", "SemiColon", "ShiftOperator", "SingleQuotedString", "SinglelineComment", "Static", "StringType", "SuppressWarnings", "Switch", "Throw", "Tilde", "True", "Try", "UnixComment", "UnquotedString", "UnquotedStringBody", "UnsetType", "Use", "Var", "VariableName", "While", "WhiteSpace", "Xor", "'$'", "'\\\\'"
	};
	public const int EOF=-1;
	public const int Abstract=4;
	public const int Ampersand=5;
	public const int And=6;
	public const int ArrayAssign=7;
	public const int ArrayType=8;
	public const int As=9;
	public const int AsignmentOperator=10;
	public const int Asterisk=11;
	public const int Bang=12;
	public const int BodyString=13;
	public const int BodyStringRest=14;
	public const int BodyStringRestShortTag=15;
	public const int BoolType=16;
	public const int BooleanType=17;
	public const int Break=18;
	public const int Case=19;
	public const int Catch=20;
	public const int Class=21;
	public const int ClassMember=22;
	public const int Clone=23;
	public const int CloseCurlyBracket=24;
	public const int CloseRoundBracket=25;
	public const int CloseSquareBracket=26;
	public const int Colon=27;
	public const int Comma=28;
	public const int ComparisionOperator=29;
	public const int Const=30;
	public const int Continue=31;
	public const int DNum=32;
	public const int Decimal=33;
	public const int Default=34;
	public const int Die=35;
	public const int Digits=36;
	public const int Do=37;
	public const int Dot=38;
	public const int DoubleQuotedString=39;
	public const int DoubleType=40;
	public const int Echo=41;
	public const int Else=42;
	public const int ElseIf=43;
	public const int Empty=44;
	public const int Eol=45;
	public const int EqualityOperator=46;
	public const int Equals=47;
	public const int EscapeCharector=48;
	public const int Eval=49;
	public const int Exit=50;
	public const int Exponent_DNum=51;
	public const int Extends=52;
	public const int False=53;
	public const int Final=54;
	public const int Finally=55;
	public const int FloatType=56;
	public const int For=57;
	public const int Foreach=58;
	public const int Forwardslash=59;
	public const int Function=60;
	public const int Global=61;
	public const int Goto=62;
	public const int HaltCompiler=63;
	public const int Hat=64;
	public const int HereDoc=65;
	public const int HereDocContents=66;
	public const int Hexadecimal=67;
	public const int If=68;
	public const int Implements=69;
	public const int Include=70;
	public const int IncludeOnce=71;
	public const int IncrementOperator=72;
	public const int InstanceMember=73;
	public const int Instanceof=74;
	public const int IntType=75;
	public const int Integer=76;
	public const int IntegerType=77;
	public const int Interface=78;
	public const int Isset=79;
	public const int List=80;
	public const int LogicalAnd=81;
	public const int LogicalOr=82;
	public const int Minus=83;
	public const int MultilineComment=84;
	public const int Namespace=85;
	public const int New=86;
	public const int Null=87;
	public const int OP=88;
	public const int ObjectType=89;
	public const int Octal=90;
	public const int OpenCurlyBracket=91;
	public const int OpenRoundBracket=92;
	public const int OpenSquareBracket=93;
	public const int Or=94;
	public const int Percent=95;
	public const int Pipe=96;
	public const int Plus=97;
	public const int Print=98;
	public const int Private=99;
	public const int Protected=100;
	public const int Public=101;
	public const int QuestionMark=102;
	public const int Real=103;
	public const int RealType=104;
	public const int Require=105;
	public const int RequireOnce=106;
	public const int Return=107;
	public const int SemiColon=108;
	public const int ShiftOperator=109;
	public const int SingleQuotedString=110;
	public const int SinglelineComment=111;
	public const int Static=112;
	public const int StringType=113;
	public const int SuppressWarnings=114;
	public const int Switch=115;
	public const int Throw=116;
	public const int Tilde=117;
	public const int True=118;
	public const int Try=119;
	public const int UnixComment=120;
	public const int UnquotedString=121;
	public const int UnquotedStringBody=122;
	public const int UnsetType=123;
	public const int Use=124;
	public const int Var=125;
	public const int VariableName=126;
	public const int While=127;
	public const int WhiteSpace=128;
	public const int Xor=129;
	public const int T__130=130;
	public const int T__131=131;

	public PhpParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public PhpParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[583+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return PhpParser.tokenNames; } }
	public override string GrammarFileName { get { return "Php.g"; } }


		private bool expressionFollowsBodyString = false;


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// Php.g:88:1: public prog : ( BodyString namespaceDefinition )? ( useStatement | statement )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prog_StartIndex = input.Index;

		object root_0 = default(object);

		IToken BodyString1 = default(IToken);
		AstParserRuleReturnScope<object, IToken> namespaceDefinition2 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> useStatement3 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement4 = default(AstParserRuleReturnScope<object, IToken>);

		object BodyString1_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(88, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// Php.g:88:6: ( ( BodyString namespaceDefinition )? ( useStatement | statement )* )
			DebugEnterAlt(1);
			// Php.g:89:2: ( BodyString namespaceDefinition )? ( useStatement | statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(89, 2);
			// Php.g:89:2: ( BodyString namespaceDefinition )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			try
			{
				alt1 = dfa1.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:89:3: BodyString namespaceDefinition
				{
				DebugLocation(89, 3);
				BodyString1=(IToken)Match(input,BodyString,Follow._BodyString_in_prog327); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BodyString1_tree = (object)adaptor.Create(BodyString1);
				adaptor.AddChild(root_0, BodyString1_tree);
				}
				DebugLocation(89, 14);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString = (BodyString1!=null?BodyString1.Text:default(string)).endsWith("<?=");
				}
				DebugLocation(89, 80);
				PushFollow(Follow._namespaceDefinition_in_prog331);
				namespaceDefinition2=namespaceDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespaceDefinition2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(90, 2);
			// Php.g:90:2: ( useStatement | statement )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=3;
				try { DebugEnterDecision(2, false);
				try
				{
					alt2 = dfa2.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:90:3: useStatement
					{
					DebugLocation(90, 3);
					PushFollow(Follow._useStatement_in_prog337);
					useStatement3=useStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, useStatement3.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:90:18: statement
					{
					DebugLocation(90, 18);
					PushFollow(Follow._statement_in_prog341);
					statement4=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement4.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
			if (state.backtracking > 0) { Memoize(input, 1, prog_StartIndex); }

		}
		DebugLocation(90, 28);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_qualifiedNameWithAs();
	partial void LeaveRule_qualifiedNameWithAs();
	// $ANTLR start "qualifiedNameWithAs"
	// Php.g:92:1: qualifiedNameWithAs : qualifiedName ( As UnquotedString )? ;
	[GrammarRule("qualifiedNameWithAs")]
	private AstParserRuleReturnScope<object, IToken> qualifiedNameWithAs()
	{
		EnterRule_qualifiedNameWithAs();
		EnterRule("qualifiedNameWithAs", 2);
		TraceIn("qualifiedNameWithAs", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedNameWithAs_StartIndex = input.Index;

		object root_0 = default(object);

		IToken As6 = default(IToken);
		IToken UnquotedString7 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName5 = default(AstParserRuleReturnScope<object, IToken>);

		object As6_tree = default(object);
		object UnquotedString7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedNameWithAs");
		DebugLocation(92, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// Php.g:93:2: ( qualifiedName ( As UnquotedString )? )
			DebugEnterAlt(1);
			// Php.g:93:4: qualifiedName ( As UnquotedString )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(93, 4);
			PushFollow(Follow._qualifiedName_in_qualifiedNameWithAs352);
			qualifiedName5=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName5.Tree);
			DebugLocation(93, 18);
			// Php.g:93:18: ( As UnquotedString )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==As))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:93:19: As UnquotedString
				{
				DebugLocation(93, 19);
				As6=(IToken)Match(input,As,Follow._As_in_qualifiedNameWithAs355); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As6_tree = (object)adaptor.Create(As6);
				adaptor.AddChild(root_0, As6_tree);
				}
				DebugLocation(93, 22);
				UnquotedString7=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_qualifiedNameWithAs357); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString7_tree = (object)adaptor.Create(UnquotedString7);
				adaptor.AddChild(root_0, UnquotedString7_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedNameWithAs", 2);
			LeaveRule("qualifiedNameWithAs", 2);
			LeaveRule_qualifiedNameWithAs();
			if (state.backtracking > 0) { Memoize(input, 2, qualifiedNameWithAs_StartIndex); }

		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "qualifiedNameWithAs"); }
		return retval;

	}
	// $ANTLR end "qualifiedNameWithAs"

	partial void EnterRule_useStatement();
	partial void LeaveRule_useStatement();
	// $ANTLR start "useStatement"
	// Php.g:96:1: useStatement : Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';' ;
	[GrammarRule("useStatement")]
	private AstParserRuleReturnScope<object, IToken> useStatement()
	{
		EnterRule_useStatement();
		EnterRule("useStatement", 3);
		TraceIn("useStatement", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int useStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Use8 = default(IToken);
		IToken char_literal10 = default(IToken);
		IToken char_literal12 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedNameWithAs9 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedNameWithAs11 = default(AstParserRuleReturnScope<object, IToken>);

		object Use8_tree = default(object);
		object char_literal10_tree = default(object);
		object char_literal12_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "useStatement");
		DebugLocation(96, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// Php.g:97:2: ( Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';' )
			DebugEnterAlt(1);
			// Php.g:97:4: Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(97, 4);
			Use8=(IToken)Match(input,Use,Follow._Use_in_useStatement370); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Use8_tree = (object)adaptor.Create(Use8);
			adaptor.AddChild(root_0, Use8_tree);
			}
			DebugLocation(97, 8);
			PushFollow(Follow._qualifiedNameWithAs_in_useStatement372);
			qualifiedNameWithAs9=qualifiedNameWithAs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameWithAs9.Tree);
			DebugLocation(97, 28);
			// Php.g:97:28: ( ',' qualifiedNameWithAs )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==Comma))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:97:29: ',' qualifiedNameWithAs
					{
					DebugLocation(97, 29);
					char_literal10=(IToken)Match(input,Comma,Follow._Comma_in_useStatement375); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal10_tree = (object)adaptor.Create(char_literal10);
					adaptor.AddChild(root_0, char_literal10_tree);
					}
					DebugLocation(97, 33);
					PushFollow(Follow._qualifiedNameWithAs_in_useStatement377);
					qualifiedNameWithAs11=qualifiedNameWithAs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameWithAs11.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(97, 55);
			char_literal12=(IToken)Match(input,SemiColon,Follow._SemiColon_in_useStatement381); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal12_tree = (object)adaptor.Create(char_literal12);
			adaptor.AddChild(root_0, char_literal12_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("useStatement", 3);
			LeaveRule("useStatement", 3);
			LeaveRule_useStatement();
			if (state.backtracking > 0) { Memoize(input, 3, useStatement_StartIndex); }

		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "useStatement"); }
		return retval;

	}
	// $ANTLR end "useStatement"

	partial void EnterRule_namespaceDefinition();
	partial void LeaveRule_namespaceDefinition();
	// $ANTLR start "namespaceDefinition"
	// Php.g:100:1: namespaceDefinition : Namespace qualifiedName ';' ;
	[GrammarRule("namespaceDefinition")]
	private AstParserRuleReturnScope<object, IToken> namespaceDefinition()
	{
		EnterRule_namespaceDefinition();
		EnterRule("namespaceDefinition", 4);
		TraceIn("namespaceDefinition", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int namespaceDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Namespace13 = default(IToken);
		IToken char_literal15 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName14 = default(AstParserRuleReturnScope<object, IToken>);

		object Namespace13_tree = default(object);
		object char_literal15_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespaceDefinition");
		DebugLocation(100, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// Php.g:101:2: ( Namespace qualifiedName ';' )
			DebugEnterAlt(1);
			// Php.g:101:4: Namespace qualifiedName ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(101, 4);
			Namespace13=(IToken)Match(input,Namespace,Follow._Namespace_in_namespaceDefinition392); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Namespace13_tree = (object)adaptor.Create(Namespace13);
			adaptor.AddChild(root_0, Namespace13_tree);
			}
			DebugLocation(101, 14);
			PushFollow(Follow._qualifiedName_in_namespaceDefinition394);
			qualifiedName14=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName14.Tree);
			DebugLocation(101, 28);
			char_literal15=(IToken)Match(input,SemiColon,Follow._SemiColon_in_namespaceDefinition396); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal15_tree = (object)adaptor.Create(char_literal15);
			adaptor.AddChild(root_0, char_literal15_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespaceDefinition", 4);
			LeaveRule("namespaceDefinition", 4);
			LeaveRule_namespaceDefinition();
			if (state.backtracking > 0) { Memoize(input, 4, namespaceDefinition_StartIndex); }

		}
		DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceDefinition"); }
		return retval;

	}
	// $ANTLR end "namespaceDefinition"

	partial void EnterRule_namespaceBlock();
	partial void LeaveRule_namespaceBlock();
	// $ANTLR start "namespaceBlock"
	// Php.g:104:1: namespaceBlock : Namespace qualifiedName bracketedBlock ;
	[GrammarRule("namespaceBlock")]
	private AstParserRuleReturnScope<object, IToken> namespaceBlock()
	{
		EnterRule_namespaceBlock();
		EnterRule("namespaceBlock", 5);
		TraceIn("namespaceBlock", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int namespaceBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Namespace16 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName17 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bracketedBlock18 = default(AstParserRuleReturnScope<object, IToken>);

		object Namespace16_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespaceBlock");
		DebugLocation(104, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// Php.g:105:2: ( Namespace qualifiedName bracketedBlock )
			DebugEnterAlt(1);
			// Php.g:105:4: Namespace qualifiedName bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(105, 4);
			Namespace16=(IToken)Match(input,Namespace,Follow._Namespace_in_namespaceBlock407); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Namespace16_tree = (object)adaptor.Create(Namespace16);
			adaptor.AddChild(root_0, Namespace16_tree);
			}
			DebugLocation(105, 14);
			PushFollow(Follow._qualifiedName_in_namespaceBlock409);
			qualifiedName17=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName17.Tree);
			DebugLocation(105, 28);
			PushFollow(Follow._bracketedBlock_in_namespaceBlock411);
			bracketedBlock18=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock18.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespaceBlock", 5);
			LeaveRule("namespaceBlock", 5);
			LeaveRule_namespaceBlock();
			if (state.backtracking > 0) { Memoize(input, 5, namespaceBlock_StartIndex); }

		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceBlock"); }
		return retval;

	}
	// $ANTLR end "namespaceBlock"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Php.g:108:1: statement : ({...}? => printExpr ';' | ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | namespaceBlock | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' | ';' );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<object, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 6);
		TraceIn("statement", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal20 = default(IToken);
		IToken BodyString23 = default(IToken);
		IToken UnquotedString26 = default(IToken);
		IToken Colon27 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken char_literal34 = default(IToken);
		AstParserRuleReturnScope<object, IToken> printExpr19 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> printExpr21 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> simpleStatement22 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> namespaceBlock24 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bracketedBlock25 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement28 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classDefinition29 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceDefinition30 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> complexStatement31 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> simpleStatement32 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal20_tree = default(object);
		object BodyString23_tree = default(object);
		object UnquotedString26_tree = default(object);
		object Colon27_tree = default(object);
		object char_literal33_tree = default(object);
		object char_literal34_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(108, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// Php.g:109:2: ({...}? => printExpr ';' | ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | namespaceBlock | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' | ';' )
			int alt8=10;
			try { DebugEnterDecision(8, false);
			try
			{
				alt8 = dfa8.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:109:4: {...}? => printExpr ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(109, 4);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
				}
				DebugLocation(109, 37);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString=false;
				}
				DebugLocation(109, 74);
				PushFollow(Follow._printExpr_in_statement427);
				printExpr19=printExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr19.Tree);
				DebugLocation(109, 84);
				char_literal20=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement429); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal20_tree = (object)adaptor.Create(char_literal20);
				adaptor.AddChild(root_0, char_literal20_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(110, 4);
				// Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? )
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				switch (input.LA(1))
				{
				case List:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case VariableName:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 130:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 131:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case New:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 5, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Bang:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 6, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Minus:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 7, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenRoundBracket:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 8, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IncrementOperator:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 9, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Clone:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 10, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Function:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 11, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Ampersand:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 12, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Die:
				case Empty:
				case Eval:
				case Exit:
				case HaltCompiler:
				case Isset:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 13, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case False:
				case True:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 14, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case UnsetType:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 15, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case SingleQuotedString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 16, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case DoubleQuotedString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 17, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case HereDoc:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 18, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case SuppressWarnings:
				case Tilde:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 19, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Plus:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 20, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Integer:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 21, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Real:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 22, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Null:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 23, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Include:
				case IncludeOnce:
				case Require:
				case RequireOnce:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 24, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case ArrayType:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 25, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenSquareBracket:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 26, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Echo:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 27, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BodyString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 28, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Print:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 29, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Global:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 30, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Static:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 31, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Const:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 32, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Break:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 33, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Continue:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 34, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Goto:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 35, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Return:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 36, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Throw:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 37, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Abstract:
				case And:
				case As:
				case BoolType:
				case BooleanType:
				case Case:
				case Catch:
				case Class:
				case Default:
				case Do:
				case DoubleType:
				case Else:
				case ElseIf:
				case Extends:
				case Final:
				case Finally:
				case FloatType:
				case For:
				case Foreach:
				case If:
				case Implements:
				case Instanceof:
				case IntType:
				case IntegerType:
				case Interface:
				case Namespace:
				case ObjectType:
				case Or:
				case Private:
				case Protected:
				case Public:
				case RealType:
				case StringType:
				case Switch:
				case Try:
				case UnquotedString:
				case Use:
				case Var:
				case While:
				case Xor:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 38, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:110:6: {...}? => ( printExpr )?
					{
					DebugLocation(110, 6);
					if (!((expressionFollowsBodyString)))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
					}
					DebugLocation(110, 40);
					if (state.backtracking == 0)
					{
						expressionFollowsBodyString=false;
					}
					DebugLocation(110, 77);
					// Php.g:110:77: ( printExpr )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if (((LA5_1>=Abstract && LA5_1<=And)||(LA5_1>=ArrayType && LA5_1<=As)||LA5_1==Bang||(LA5_1>=BoolType && LA5_1<=Class)||LA5_1==Clone||(LA5_1>=Const && LA5_1<=Continue)||(LA5_1>=Default && LA5_1<=Die)||LA5_1==Do||(LA5_1>=DoubleQuotedString && LA5_1<=Empty)||(LA5_1>=Eval && LA5_1<=Exit)||(LA5_1>=Extends && LA5_1<=Foreach)||(LA5_1>=Function && LA5_1<=HaltCompiler)||LA5_1==HereDoc||(LA5_1>=If && LA5_1<=IncrementOperator)||(LA5_1>=Instanceof && LA5_1<=List)||LA5_1==Minus||(LA5_1>=Namespace && LA5_1<=Null)||LA5_1==ObjectType||(LA5_1>=OpenRoundBracket && LA5_1<=Or)||(LA5_1>=Plus && LA5_1<=Public)||(LA5_1>=Real && LA5_1<=Return)||LA5_1==SingleQuotedString||(LA5_1>=Static && LA5_1<=Try)||LA5_1==UnquotedString||(LA5_1>=UnsetType && LA5_1<=While)||(LA5_1>=Xor && LA5_1<=131)))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:110:77: printExpr
						{
						DebugLocation(110, 77);
						PushFollow(Follow._printExpr_in_statement442);
						printExpr21=printExpr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr21.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(5); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:110:90: ( simpleStatement )?
					{
					DebugLocation(110, 90);
					// Php.g:110:90: ( simpleStatement )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if (((LA6_1>=Abstract && LA6_1<=And)||(LA6_1>=ArrayType && LA6_1<=As)||LA6_1==Bang||(LA6_1>=BoolType && LA6_1<=Class)||LA6_1==Clone||(LA6_1>=Const && LA6_1<=Continue)||(LA6_1>=Default && LA6_1<=Die)||LA6_1==Do||(LA6_1>=DoubleQuotedString && LA6_1<=Empty)||(LA6_1>=Eval && LA6_1<=Exit)||(LA6_1>=Extends && LA6_1<=Foreach)||(LA6_1>=Function && LA6_1<=HaltCompiler)||LA6_1==HereDoc||(LA6_1>=If && LA6_1<=IncrementOperator)||(LA6_1>=Instanceof && LA6_1<=List)||LA6_1==Minus||(LA6_1>=Namespace && LA6_1<=Null)||LA6_1==ObjectType||(LA6_1>=OpenRoundBracket && LA6_1<=Or)||(LA6_1>=Plus && LA6_1<=Public)||(LA6_1>=Real && LA6_1<=Return)||LA6_1==SingleQuotedString||(LA6_1>=Static && LA6_1<=Try)||LA6_1==UnquotedString||(LA6_1>=UnsetType && LA6_1<=While)||(LA6_1>=Xor && LA6_1<=131)))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:110:90: simpleStatement
						{
						DebugLocation(110, 90);
						PushFollow(Follow._simpleStatement_in_statement447);
						simpleStatement22=simpleStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement22.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(6); }


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(111, 3);
				BodyString23=(IToken)Match(input,BodyString,Follow._BodyString_in_statement453); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BodyString23_tree = (object)adaptor.Create(BodyString23);
				adaptor.AddChild(root_0, BodyString23_tree);
				}
				DebugLocation(111, 14);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString = (BodyString23!=null?BodyString23.Text:default(string)).endsWith("<?=");
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:112:4: namespaceBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._namespaceBlock_in_statement460);
				namespaceBlock24=namespaceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespaceBlock24.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:113:4: bracketedBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 4);
				PushFollow(Follow._bracketedBlock_in_statement465);
				bracketedBlock25=bracketedBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock25.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:114:4: UnquotedString Colon statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 4);
				UnquotedString26=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_statement470); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString26_tree = (object)adaptor.Create(UnquotedString26);
				adaptor.AddChild(root_0, UnquotedString26_tree);
				}
				DebugLocation(114, 19);
				Colon27=(IToken)Match(input,Colon,Follow._Colon_in_statement472); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Colon27_tree = (object)adaptor.Create(Colon27);
				adaptor.AddChild(root_0, Colon27_tree);
				}
				DebugLocation(114, 25);
				PushFollow(Follow._statement_in_statement474);
				statement28=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement28.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Php.g:115:4: classDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._classDefinition_in_statement479);
				classDefinition29=classDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDefinition29.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Php.g:116:4: interfaceDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(116, 4);
				PushFollow(Follow._interfaceDefinition_in_statement484);
				interfaceDefinition30=interfaceDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDefinition30.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Php.g:117:4: complexStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(117, 4);
				PushFollow(Follow._complexStatement_in_statement489);
				complexStatement31=complexStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, complexStatement31.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Php.g:118:4: simpleStatement ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(118, 4);
				PushFollow(Follow._simpleStatement_in_statement494);
				simpleStatement32=simpleStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement32.Tree);
				DebugLocation(118, 20);
				char_literal33=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement496); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal33_tree = (object)adaptor.Create(char_literal33);
				adaptor.AddChild(root_0, char_literal33_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Php.g:119:4: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(119, 4);
				char_literal34=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement501); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal34_tree = (object)adaptor.Create(char_literal34);
				adaptor.AddChild(root_0, char_literal34_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 6);
			LeaveRule("statement", 6);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 6, statement_StartIndex); }

		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_printExpr();
	partial void LeaveRule_printExpr();
	// $ANTLR start "printExpr"
	// Php.g:122:1: printExpr : expression ;
	[GrammarRule("printExpr")]
	private AstParserRuleReturnScope<object, IToken> printExpr()
	{
		EnterRule_printExpr();
		EnterRule("printExpr", 7);
		TraceIn("printExpr", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int printExpr_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> expression35 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "printExpr");
		DebugLocation(122, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// Php.g:123:2: ( expression )
			DebugEnterAlt(1);
			// Php.g:123:4: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(123, 4);
			PushFollow(Follow._expression_in_printExpr512);
			expression35=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression35.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("printExpr", 7);
			LeaveRule("printExpr", 7);
			LeaveRule_printExpr();
			if (state.backtracking > 0) { Memoize(input, 7, printExpr_StartIndex); }

		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "printExpr"); }
		return retval;

	}
	// $ANTLR end "printExpr"

	partial void EnterRule_bracketedBlock();
	partial void LeaveRule_bracketedBlock();
	// $ANTLR start "bracketedBlock"
	// Php.g:126:1: bracketedBlock : '{' ( statement )* '}' ;
	[GrammarRule("bracketedBlock")]
	private AstParserRuleReturnScope<object, IToken> bracketedBlock()
	{
		EnterRule_bracketedBlock();
		EnterRule("bracketedBlock", 8);
		TraceIn("bracketedBlock", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bracketedBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		AstParserRuleReturnScope<object, IToken> statement37 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal36_tree = default(object);
		object char_literal38_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bracketedBlock");
		DebugLocation(126, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// Php.g:127:2: ( '{' ( statement )* '}' )
			DebugEnterAlt(1);
			// Php.g:127:4: '{' ( statement )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(127, 4);
			char_literal36=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_bracketedBlock523); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal36_tree = (object)adaptor.Create(char_literal36);
			adaptor.AddChild(root_0, char_literal36_tree);
			}
			DebugLocation(127, 8);
			// Php.g:127:8: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if (((LA9_1>=Abstract && LA9_1<=And)||(LA9_1>=ArrayType && LA9_1<=As)||(LA9_1>=Bang && LA9_1<=BodyString)||(LA9_1>=BoolType && LA9_1<=Class)||LA9_1==Clone||(LA9_1>=Const && LA9_1<=Continue)||(LA9_1>=Default && LA9_1<=Die)||LA9_1==Do||(LA9_1>=DoubleQuotedString && LA9_1<=Empty)||(LA9_1>=Eval && LA9_1<=Exit)||(LA9_1>=Extends && LA9_1<=Foreach)||(LA9_1>=Function && LA9_1<=HaltCompiler)||LA9_1==HereDoc||(LA9_1>=If && LA9_1<=IncrementOperator)||(LA9_1>=Instanceof && LA9_1<=List)||LA9_1==Minus||(LA9_1>=Namespace && LA9_1<=Null)||LA9_1==ObjectType||(LA9_1>=OpenCurlyBracket && LA9_1<=Or)||(LA9_1>=Plus && LA9_1<=Public)||(LA9_1>=Real && LA9_1<=SemiColon)||LA9_1==SingleQuotedString||(LA9_1>=Static && LA9_1<=Try)||LA9_1==UnquotedString||(LA9_1>=UnsetType && LA9_1<=While)||(LA9_1>=Xor && LA9_1<=131)))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:127:8: statement
					{
					DebugLocation(127, 8);
					PushFollow(Follow._statement_in_bracketedBlock525);
					statement37=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement37.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(127, 19);
			char_literal38=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_bracketedBlock528); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal38_tree = (object)adaptor.Create(char_literal38);
			adaptor.AddChild(root_0, char_literal38_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracketedBlock", 8);
			LeaveRule("bracketedBlock", 8);
			LeaveRule_bracketedBlock();
			if (state.backtracking > 0) { Memoize(input, 8, bracketedBlock_StartIndex); }

		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "bracketedBlock"); }
		return retval;

	}
	// $ANTLR end "bracketedBlock"

	partial void EnterRule_interfaceDefinition();
	partial void LeaveRule_interfaceDefinition();
	// $ANTLR start "interfaceDefinition"
	// Php.g:130:1: interfaceDefinition : Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket ;
	[GrammarRule("interfaceDefinition")]
	private AstParserRuleReturnScope<object, IToken> interfaceDefinition()
	{
		EnterRule_interfaceDefinition();
		EnterRule("interfaceDefinition", 9);
		TraceIn("interfaceDefinition", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Interface39 = default(IToken);
		IToken OpenCurlyBracket42 = default(IToken);
		IToken CloseCurlyBracket44 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName40 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceExtends41 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceMember43 = default(AstParserRuleReturnScope<object, IToken>);

		object Interface39_tree = default(object);
		object OpenCurlyBracket42_tree = default(object);
		object CloseCurlyBracket44_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceDefinition");
		DebugLocation(130, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// Php.g:131:2: ( Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket )
			DebugEnterAlt(1);
			// Php.g:131:4: Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(131, 4);
			Interface39=(IToken)Match(input,Interface,Follow._Interface_in_interfaceDefinition539); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Interface39_tree = (object)adaptor.Create(Interface39);
			adaptor.AddChild(root_0, Interface39_tree);
			}
			DebugLocation(131, 14);
			PushFollow(Follow._qualifiedName_in_interfaceDefinition541);
			qualifiedName40=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName40.Tree);
			DebugLocation(131, 28);
			// Php.g:131:28: ( interfaceExtends )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==Extends))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:131:28: interfaceExtends
				{
				DebugLocation(131, 28);
				PushFollow(Follow._interfaceExtends_in_interfaceDefinition543);
				interfaceExtends41=interfaceExtends();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceExtends41.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(132, 4);
			OpenCurlyBracket42=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_interfaceDefinition549); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenCurlyBracket42_tree = (object)adaptor.Create(OpenCurlyBracket42);
			adaptor.AddChild(root_0, OpenCurlyBracket42_tree);
			}
			DebugLocation(132, 21);
			// Php.g:132:21: ( interfaceMember )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==Abstract||LA11_1==Const||LA11_1==Final||LA11_1==Function||(LA11_1>=Private && LA11_1<=Public)||LA11_1==Static))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:132:21: interfaceMember
					{
					DebugLocation(132, 21);
					PushFollow(Follow._interfaceMember_in_interfaceDefinition551);
					interfaceMember43=interfaceMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceMember43.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(132, 38);
			CloseCurlyBracket44=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_interfaceDefinition554); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseCurlyBracket44_tree = (object)adaptor.Create(CloseCurlyBracket44);
			adaptor.AddChild(root_0, CloseCurlyBracket44_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceDefinition", 9);
			LeaveRule("interfaceDefinition", 9);
			LeaveRule_interfaceDefinition();
			if (state.backtracking > 0) { Memoize(input, 9, interfaceDefinition_StartIndex); }

		}
		DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceDefinition"); }
		return retval;

	}
	// $ANTLR end "interfaceDefinition"

	partial void EnterRule_interfaceExtends();
	partial void LeaveRule_interfaceExtends();
	// $ANTLR start "interfaceExtends"
	// Php.g:135:1: interfaceExtends : Extends qualifiedName ( Comma qualifiedName )* ;
	[GrammarRule("interfaceExtends")]
	private AstParserRuleReturnScope<object, IToken> interfaceExtends()
	{
		EnterRule_interfaceExtends();
		EnterRule("interfaceExtends", 10);
		TraceIn("interfaceExtends", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceExtends_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Extends45 = default(IToken);
		IToken Comma47 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName46 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName48 = default(AstParserRuleReturnScope<object, IToken>);

		object Extends45_tree = default(object);
		object Comma47_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceExtends");
		DebugLocation(135, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// Php.g:136:2: ( Extends qualifiedName ( Comma qualifiedName )* )
			DebugEnterAlt(1);
			// Php.g:136:4: Extends qualifiedName ( Comma qualifiedName )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(136, 4);
			Extends45=(IToken)Match(input,Extends,Follow._Extends_in_interfaceExtends565); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Extends45_tree = (object)adaptor.Create(Extends45);
			adaptor.AddChild(root_0, Extends45_tree);
			}
			DebugLocation(136, 12);
			PushFollow(Follow._qualifiedName_in_interfaceExtends567);
			qualifiedName46=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName46.Tree);
			DebugLocation(136, 26);
			// Php.g:136:26: ( Comma qualifiedName )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==Comma))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:136:27: Comma qualifiedName
					{
					DebugLocation(136, 27);
					Comma47=(IToken)Match(input,Comma,Follow._Comma_in_interfaceExtends570); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Comma47_tree = (object)adaptor.Create(Comma47);
					adaptor.AddChild(root_0, Comma47_tree);
					}
					DebugLocation(136, 33);
					PushFollow(Follow._qualifiedName_in_interfaceExtends572);
					qualifiedName48=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName48.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceExtends", 10);
			LeaveRule("interfaceExtends", 10);
			LeaveRule_interfaceExtends();
			if (state.backtracking > 0) { Memoize(input, 10, interfaceExtends_StartIndex); }

		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtends"); }
		return retval;

	}
	// $ANTLR end "interfaceExtends"

	partial void EnterRule_interfaceMember();
	partial void LeaveRule_interfaceMember();
	// $ANTLR start "interfaceMember"
	// Php.g:139:1: interfaceMember : ( constDefinition ';' | ( functionModifier )* Function ( '&' )? qualifiedName parametersDefinition ';' );
	[GrammarRule("interfaceMember")]
	private AstParserRuleReturnScope<object, IToken> interfaceMember()
	{
		EnterRule_interfaceMember();
		EnterRule("interfaceMember", 11);
		TraceIn("interfaceMember", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal50 = default(IToken);
		IToken Function52 = default(IToken);
		IToken char_literal53 = default(IToken);
		IToken char_literal56 = default(IToken);
		AstParserRuleReturnScope<object, IToken> constDefinition49 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionModifier51 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName54 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parametersDefinition55 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal50_tree = default(object);
		object Function52_tree = default(object);
		object char_literal53_tree = default(object);
		object char_literal56_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceMember");
		DebugLocation(139, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// Php.g:140:2: ( constDefinition ';' | ( functionModifier )* Function ( '&' )? qualifiedName parametersDefinition ';' )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==Const))
			{
				alt15 = 1;
			}
			else if ((LA15_1==Abstract||LA15_1==Final||LA15_1==Function||(LA15_1>=Private && LA15_1<=Public)||LA15_1==Static))
			{
				alt15 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:140:4: constDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 4);
				PushFollow(Follow._constDefinition_in_interfaceMember585);
				constDefinition49=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition49.Tree);
				DebugLocation(140, 20);
				char_literal50=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember587); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal50_tree = (object)adaptor.Create(char_literal50);
				adaptor.AddChild(root_0, char_literal50_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:141:4: ( functionModifier )* Function ( '&' )? qualifiedName parametersDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				// Php.g:141:4: ( functionModifier )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1==Abstract||LA13_1==Final||(LA13_1>=Private && LA13_1<=Public)||LA13_1==Static))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:141:4: functionModifier
						{
						DebugLocation(141, 4);
						PushFollow(Follow._functionModifier_in_interfaceMember592);
						functionModifier51=functionModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, functionModifier51.Tree);

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }

				DebugLocation(141, 22);
				Function52=(IToken)Match(input,Function,Follow._Function_in_interfaceMember595); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function52_tree = (object)adaptor.Create(Function52);
				adaptor.AddChild(root_0, Function52_tree);
				}
				DebugLocation(141, 31);
				// Php.g:141:31: ( '&' )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==Ampersand))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:141:31: '&'
					{
					DebugLocation(141, 31);
					char_literal53=(IToken)Match(input,Ampersand,Follow._Ampersand_in_interfaceMember597); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal53_tree = (object)adaptor.Create(char_literal53);
					adaptor.AddChild(root_0, char_literal53_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(141, 36);
				PushFollow(Follow._qualifiedName_in_interfaceMember600);
				qualifiedName54=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName54.Tree);
				DebugLocation(141, 50);
				PushFollow(Follow._parametersDefinition_in_interfaceMember602);
				parametersDefinition55=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition55.Tree);
				DebugLocation(141, 71);
				char_literal56=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember604); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal56_tree = (object)adaptor.Create(char_literal56);
				adaptor.AddChild(root_0, char_literal56_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceMember", 11);
			LeaveRule("interfaceMember", 11);
			LeaveRule_interfaceMember();
			if (state.backtracking > 0) { Memoize(input, 11, interfaceMember_StartIndex); }

		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceMember"); }
		return retval;

	}
	// $ANTLR end "interfaceMember"

	partial void EnterRule_classDefinition();
	partial void LeaveRule_classDefinition();
	// $ANTLR start "classDefinition"
	// Php.g:144:1: classDefinition : ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket ;
	[GrammarRule("classDefinition")]
	private AstParserRuleReturnScope<object, IToken> classDefinition()
	{
		EnterRule_classDefinition();
		EnterRule("classDefinition", 12);
		TraceIn("classDefinition", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Class58 = default(IToken);
		IToken Extends60 = default(IToken);
		IToken OpenCurlyBracket63 = default(IToken);
		IToken CloseCurlyBracket65 = default(IToken);
		AstParserRuleReturnScope<object, IToken> classModifier57 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName59 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName61 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classImplements62 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classMember64 = default(AstParserRuleReturnScope<object, IToken>);

		object Class58_tree = default(object);
		object Extends60_tree = default(object);
		object OpenCurlyBracket63_tree = default(object);
		object CloseCurlyBracket65_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classDefinition");
		DebugLocation(144, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// Php.g:145:2: ( ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket )
			DebugEnterAlt(1);
			// Php.g:145:6: ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(145, 6);
			// Php.g:145:6: ( classModifier )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==Abstract||LA16_1==Final))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:145:6: classModifier
				{
				DebugLocation(145, 6);
				PushFollow(Follow._classModifier_in_classDefinition617);
				classModifier57=classModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classModifier57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(146, 3);
			Class58=(IToken)Match(input,Class,Follow._Class_in_classDefinition623); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Class58_tree = (object)adaptor.Create(Class58);
			adaptor.AddChild(root_0, Class58_tree);
			}
			DebugLocation(146, 9);
			PushFollow(Follow._qualifiedName_in_classDefinition625);
			qualifiedName59=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName59.Tree);
			DebugLocation(147, 3);
			// Php.g:147:3: ( Extends qualifiedName )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==Extends))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:147:4: Extends qualifiedName
				{
				DebugLocation(147, 4);
				Extends60=(IToken)Match(input,Extends,Follow._Extends_in_classDefinition631); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Extends60_tree = (object)adaptor.Create(Extends60);
				adaptor.AddChild(root_0, Extends60_tree);
				}
				DebugLocation(147, 12);
				PushFollow(Follow._qualifiedName_in_classDefinition633);
				qualifiedName61=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName61.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(148, 3);
			// Php.g:148:3: ( classImplements )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==Implements))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:148:3: classImplements
				{
				DebugLocation(148, 3);
				PushFollow(Follow._classImplements_in_classDefinition640);
				classImplements62=classImplements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classImplements62.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(149, 3);
			OpenCurlyBracket63=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_classDefinition645); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenCurlyBracket63_tree = (object)adaptor.Create(OpenCurlyBracket63);
			adaptor.AddChild(root_0, OpenCurlyBracket63_tree);
			}
			DebugLocation(150, 3);
			// Php.g:150:3: ( classMember )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==Abstract||LA19_1==Const||LA19_1==Final||LA19_1==Function||(LA19_1>=Private && LA19_1<=Public)||LA19_1==Static||(LA19_1>=Var && LA19_1<=VariableName)))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:150:3: classMember
					{
					DebugLocation(150, 3);
					PushFollow(Follow._classMember_in_classDefinition649);
					classMember64=classMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classMember64.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(151, 3);
			CloseCurlyBracket65=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_classDefinition654); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseCurlyBracket65_tree = (object)adaptor.Create(CloseCurlyBracket65);
			adaptor.AddChild(root_0, CloseCurlyBracket65_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classDefinition", 12);
			LeaveRule("classDefinition", 12);
			LeaveRule_classDefinition();
			if (state.backtracking > 0) { Memoize(input, 12, classDefinition_StartIndex); }

		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "classDefinition"); }
		return retval;

	}
	// $ANTLR end "classDefinition"

	partial void EnterRule_classImplements();
	partial void LeaveRule_classImplements();
	// $ANTLR start "classImplements"
	// Php.g:154:1: classImplements : Implements ( qualifiedName ( Comma qualifiedName )* ) ;
	[GrammarRule("classImplements")]
	private AstParserRuleReturnScope<object, IToken> classImplements()
	{
		EnterRule_classImplements();
		EnterRule("classImplements", 13);
		TraceIn("classImplements", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classImplements_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Implements66 = default(IToken);
		IToken Comma68 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName67 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName69 = default(AstParserRuleReturnScope<object, IToken>);

		object Implements66_tree = default(object);
		object Comma68_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classImplements");
		DebugLocation(154, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// Php.g:155:2: ( Implements ( qualifiedName ( Comma qualifiedName )* ) )
			DebugEnterAlt(1);
			// Php.g:155:5: Implements ( qualifiedName ( Comma qualifiedName )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(155, 5);
			Implements66=(IToken)Match(input,Implements,Follow._Implements_in_classImplements668); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Implements66_tree = (object)adaptor.Create(Implements66);
			adaptor.AddChild(root_0, Implements66_tree);
			}
			DebugLocation(155, 16);
			// Php.g:155:16: ( qualifiedName ( Comma qualifiedName )* )
			DebugEnterAlt(1);
			// Php.g:155:17: qualifiedName ( Comma qualifiedName )*
			{
			DebugLocation(155, 17);
			PushFollow(Follow._qualifiedName_in_classImplements671);
			qualifiedName67=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName67.Tree);
			DebugLocation(155, 31);
			// Php.g:155:31: ( Comma qualifiedName )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==Comma))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:155:32: Comma qualifiedName
					{
					DebugLocation(155, 32);
					Comma68=(IToken)Match(input,Comma,Follow._Comma_in_classImplements674); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Comma68_tree = (object)adaptor.Create(Comma68);
					adaptor.AddChild(root_0, Comma68_tree);
					}
					DebugLocation(155, 38);
					PushFollow(Follow._qualifiedName_in_classImplements676);
					qualifiedName69=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName69.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classImplements", 13);
			LeaveRule("classImplements", 13);
			LeaveRule_classImplements();
			if (state.backtracking > 0) { Memoize(input, 13, classImplements_StartIndex); }

		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "classImplements"); }
		return retval;

	}
	// $ANTLR end "classImplements"

	partial void EnterRule_classMember();
	partial void LeaveRule_classMember();
	// $ANTLR start "classMember"
	// Php.g:158:1: classMember : ( ( functionModifier )* Function ( '&' )? qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' );
	[GrammarRule("classMember")]
	private AstParserRuleReturnScope<object, IToken> classMember()
	{
		EnterRule_classMember();
		EnterRule("classMember", 14);
		TraceIn("classMember", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function71 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken char_literal76 = default(IToken);
		IToken char_literal78 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		AstParserRuleReturnScope<object, IToken> functionModifier70 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName73 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parametersDefinition74 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bracketedBlock75 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constDefinition77 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> varDefinition79 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> fieldDefinition81 = default(AstParserRuleReturnScope<object, IToken>);

		object Function71_tree = default(object);
		object char_literal72_tree = default(object);
		object char_literal76_tree = default(object);
		object char_literal78_tree = default(object);
		object char_literal80_tree = default(object);
		object char_literal82_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classMember");
		DebugLocation(158, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// Php.g:159:2: ( ( functionModifier )* Function ( '&' )? qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' )
			int alt24=4;
			try { DebugEnterDecision(24, false);
			try
			{
				alt24 = dfa24.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:159:4: ( functionModifier )* Function ( '&' )? qualifiedName parametersDefinition ( bracketedBlock | ';' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(159, 4);
				// Php.g:159:4: ( functionModifier )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_1 = input.LA(1);

					if ((LA21_1==Abstract||LA21_1==Final||(LA21_1>=Private && LA21_1<=Public)||LA21_1==Static))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:159:4: functionModifier
						{
						DebugLocation(159, 4);
						PushFollow(Follow._functionModifier_in_classMember690);
						functionModifier70=functionModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, functionModifier70.Tree);

						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(159, 22);
				Function71=(IToken)Match(input,Function,Follow._Function_in_classMember693); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function71_tree = (object)adaptor.Create(Function71);
				adaptor.AddChild(root_0, Function71_tree);
				}
				DebugLocation(159, 31);
				// Php.g:159:31: ( '&' )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==Ampersand))
				{
					alt22 = 1;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:159:31: '&'
					{
					DebugLocation(159, 31);
					char_literal72=(IToken)Match(input,Ampersand,Follow._Ampersand_in_classMember695); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal72_tree = (object)adaptor.Create(char_literal72);
					adaptor.AddChild(root_0, char_literal72_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(22); }

				DebugLocation(159, 36);
				PushFollow(Follow._qualifiedName_in_classMember698);
				qualifiedName73=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName73.Tree);
				DebugLocation(159, 50);
				PushFollow(Follow._parametersDefinition_in_classMember700);
				parametersDefinition74=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition74.Tree);
				DebugLocation(159, 71);
				// Php.g:159:71: ( bracketedBlock | ';' )
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==OpenCurlyBracket))
				{
					alt23 = 1;
				}
				else if ((LA23_1==SemiColon))
				{
					alt23 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:159:72: bracketedBlock
					{
					DebugLocation(159, 72);
					PushFollow(Follow._bracketedBlock_in_classMember703);
					bracketedBlock75=bracketedBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock75.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:159:89: ';'
					{
					DebugLocation(159, 89);
					char_literal76=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember707); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal76_tree = (object)adaptor.Create(char_literal76);
					adaptor.AddChild(root_0, char_literal76_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(23); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:160:4: constDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._constDefinition_in_classMember713);
				constDefinition77=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition77.Tree);
				DebugLocation(160, 20);
				char_literal78=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember715); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal78_tree = (object)adaptor.Create(char_literal78);
				adaptor.AddChild(root_0, char_literal78_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:161:4: varDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._varDefinition_in_classMember720);
				varDefinition79=varDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, varDefinition79.Tree);
				DebugLocation(161, 18);
				char_literal80=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember722); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal80_tree = (object)adaptor.Create(char_literal80);
				adaptor.AddChild(root_0, char_literal80_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:162:4: fieldDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._fieldDefinition_in_classMember727);
				fieldDefinition81=fieldDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fieldDefinition81.Tree);
				DebugLocation(162, 20);
				char_literal82=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember729); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal82_tree = (object)adaptor.Create(char_literal82);
				adaptor.AddChild(root_0, char_literal82_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classMember", 14);
			LeaveRule("classMember", 14);
			LeaveRule_classMember();
			if (state.backtracking > 0) { Memoize(input, 14, classMember_StartIndex); }

		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "classMember"); }
		return retval;

	}
	// $ANTLR end "classMember"

	partial void EnterRule_constDefinition();
	partial void LeaveRule_constDefinition();
	// $ANTLR start "constDefinition"
	// Php.g:165:1: constDefinition : Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )* ;
	[GrammarRule("constDefinition")]
	private AstParserRuleReturnScope<object, IToken> constDefinition()
	{
		EnterRule_constDefinition();
		EnterRule("constDefinition", 15);
		TraceIn("constDefinition", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int constDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Const83 = default(IToken);
		IToken Equals85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken Equals89 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName84 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom86 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName88 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom90 = default(AstParserRuleReturnScope<object, IToken>);

		object Const83_tree = default(object);
		object Equals85_tree = default(object);
		object char_literal87_tree = default(object);
		object Equals89_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constDefinition");
		DebugLocation(165, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// Php.g:166:2: ( Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// Php.g:166:4: Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(166, 4);
			Const83=(IToken)Match(input,Const,Follow._Const_in_constDefinition740); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Const83_tree = (object)adaptor.Create(Const83);
			adaptor.AddChild(root_0, Const83_tree);
			}
			DebugLocation(166, 10);
			PushFollow(Follow._qualifiedName_in_constDefinition742);
			qualifiedName84=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName84.Tree);
			DebugLocation(166, 24);
			// Php.g:166:24: ( Equals atom )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==Equals))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:166:25: Equals atom
				{
				DebugLocation(166, 25);
				Equals85=(IToken)Match(input,Equals,Follow._Equals_in_constDefinition745); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals85_tree = (object)adaptor.Create(Equals85);
				adaptor.AddChild(root_0, Equals85_tree);
				}
				DebugLocation(166, 32);
				PushFollow(Follow._atom_in_constDefinition747);
				atom86=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom86.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(166, 39);
			// Php.g:166:39: ( ',' qualifiedName ( Equals atom )? )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==Comma))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:166:40: ',' qualifiedName ( Equals atom )?
					{
					DebugLocation(166, 40);
					char_literal87=(IToken)Match(input,Comma,Follow._Comma_in_constDefinition752); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal87_tree = (object)adaptor.Create(char_literal87);
					adaptor.AddChild(root_0, char_literal87_tree);
					}
					DebugLocation(166, 44);
					PushFollow(Follow._qualifiedName_in_constDefinition754);
					qualifiedName88=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName88.Tree);
					DebugLocation(166, 58);
					// Php.g:166:58: ( Equals atom )?
					int alt26=2;
					try { DebugEnterSubRule(26);
					try { DebugEnterDecision(26, false);
					int LA26_1 = input.LA(1);

					if ((LA26_1==Equals))
					{
						alt26 = 1;
					}
					} finally { DebugExitDecision(26); }
					switch (alt26)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:166:59: Equals atom
						{
						DebugLocation(166, 59);
						Equals89=(IToken)Match(input,Equals,Follow._Equals_in_constDefinition757); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals89_tree = (object)adaptor.Create(Equals89);
						adaptor.AddChild(root_0, Equals89_tree);
						}
						DebugLocation(166, 66);
						PushFollow(Follow._atom_in_constDefinition759);
						atom90=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom90.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(26); }


					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constDefinition", 15);
			LeaveRule("constDefinition", 15);
			LeaveRule_constDefinition();
			if (state.backtracking > 0) { Memoize(input, 15, constDefinition_StartIndex); }

		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "constDefinition"); }
		return retval;

	}
	// $ANTLR end "constDefinition"

	partial void EnterRule_varDefinition();
	partial void LeaveRule_varDefinition();
	// $ANTLR start "varDefinition"
	// Php.g:169:1: varDefinition : Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* ;
	[GrammarRule("varDefinition")]
	private AstParserRuleReturnScope<object, IToken> varDefinition()
	{
		EnterRule_varDefinition();
		EnterRule("varDefinition", 16);
		TraceIn("varDefinition", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int varDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Var91 = default(IToken);
		IToken VariableName92 = default(IToken);
		IToken Equals93 = default(IToken);
		IToken char_literal95 = default(IToken);
		IToken VariableName96 = default(IToken);
		IToken Equals97 = default(IToken);
		AstParserRuleReturnScope<object, IToken> atom94 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom98 = default(AstParserRuleReturnScope<object, IToken>);

		object Var91_tree = default(object);
		object VariableName92_tree = default(object);
		object Equals93_tree = default(object);
		object char_literal95_tree = default(object);
		object VariableName96_tree = default(object);
		object Equals97_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "varDefinition");
		DebugLocation(169, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// Php.g:170:2: ( Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// Php.g:170:4: Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(170, 4);
			Var91=(IToken)Match(input,Var,Follow._Var_in_varDefinition774); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Var91_tree = (object)adaptor.Create(Var91);
			adaptor.AddChild(root_0, Var91_tree);
			}
			DebugLocation(170, 8);
			VariableName92=(IToken)Match(input,VariableName,Follow._VariableName_in_varDefinition776); if (state.failed) return retval;
			if (state.backtracking == 0) {
			VariableName92_tree = (object)adaptor.Create(VariableName92);
			adaptor.AddChild(root_0, VariableName92_tree);
			}
			DebugLocation(170, 21);
			// Php.g:170:21: ( Equals atom )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1==Equals))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:170:22: Equals atom
				{
				DebugLocation(170, 22);
				Equals93=(IToken)Match(input,Equals,Follow._Equals_in_varDefinition779); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals93_tree = (object)adaptor.Create(Equals93);
				adaptor.AddChild(root_0, Equals93_tree);
				}
				DebugLocation(170, 29);
				PushFollow(Follow._atom_in_varDefinition781);
				atom94=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom94.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(170, 36);
			// Php.g:170:36: ( ',' VariableName ( Equals atom )? )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==Comma))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:170:37: ',' VariableName ( Equals atom )?
					{
					DebugLocation(170, 37);
					char_literal95=(IToken)Match(input,Comma,Follow._Comma_in_varDefinition786); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal95_tree = (object)adaptor.Create(char_literal95);
					adaptor.AddChild(root_0, char_literal95_tree);
					}
					DebugLocation(170, 41);
					VariableName96=(IToken)Match(input,VariableName,Follow._VariableName_in_varDefinition788); if (state.failed) return retval;
					if (state.backtracking == 0) {
					VariableName96_tree = (object)adaptor.Create(VariableName96);
					adaptor.AddChild(root_0, VariableName96_tree);
					}
					DebugLocation(170, 54);
					// Php.g:170:54: ( Equals atom )?
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, false);
					int LA29_1 = input.LA(1);

					if ((LA29_1==Equals))
					{
						alt29 = 1;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:170:55: Equals atom
						{
						DebugLocation(170, 55);
						Equals97=(IToken)Match(input,Equals,Follow._Equals_in_varDefinition791); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals97_tree = (object)adaptor.Create(Equals97);
						adaptor.AddChild(root_0, Equals97_tree);
						}
						DebugLocation(170, 62);
						PushFollow(Follow._atom_in_varDefinition793);
						atom98=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom98.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(29); }


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("varDefinition", 16);
			LeaveRule("varDefinition", 16);
			LeaveRule_varDefinition();
			if (state.backtracking > 0) { Memoize(input, 16, varDefinition_StartIndex); }

		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "varDefinition"); }
		return retval;

	}
	// $ANTLR end "varDefinition"

	partial void EnterRule_fieldDefinition();
	partial void LeaveRule_fieldDefinition();
	// $ANTLR start "fieldDefinition"
	// Php.g:173:1: fieldDefinition : ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* ;
	[GrammarRule("fieldDefinition")]
	private AstParserRuleReturnScope<object, IToken> fieldDefinition()
	{
		EnterRule_fieldDefinition();
		EnterRule("fieldDefinition", 17);
		TraceIn("fieldDefinition", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int fieldDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName100 = default(IToken);
		IToken Equals101 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken VariableName104 = default(IToken);
		IToken Equals105 = default(IToken);
		AstParserRuleReturnScope<object, IToken> fieldModifier99 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom102 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom106 = default(AstParserRuleReturnScope<object, IToken>);

		object VariableName100_tree = default(object);
		object Equals101_tree = default(object);
		object char_literal103_tree = default(object);
		object VariableName104_tree = default(object);
		object Equals105_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldDefinition");
		DebugLocation(173, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// Php.g:174:2: ( ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// Php.g:174:4: ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(174, 4);
			// Php.g:174:4: ( fieldModifier )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==Abstract||(LA31_1>=Private && LA31_1<=Public)||LA31_1==Static))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:174:4: fieldModifier
					{
					DebugLocation(174, 4);
					PushFollow(Follow._fieldModifier_in_fieldDefinition808);
					fieldModifier99=fieldModifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier99.Tree);

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }

			DebugLocation(174, 19);
			VariableName100=(IToken)Match(input,VariableName,Follow._VariableName_in_fieldDefinition811); if (state.failed) return retval;
			if (state.backtracking == 0) {
			VariableName100_tree = (object)adaptor.Create(VariableName100);
			adaptor.AddChild(root_0, VariableName100_tree);
			}
			DebugLocation(174, 32);
			// Php.g:174:32: ( Equals atom )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==Equals))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:174:33: Equals atom
				{
				DebugLocation(174, 33);
				Equals101=(IToken)Match(input,Equals,Follow._Equals_in_fieldDefinition814); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals101_tree = (object)adaptor.Create(Equals101);
				adaptor.AddChild(root_0, Equals101_tree);
				}
				DebugLocation(174, 40);
				PushFollow(Follow._atom_in_fieldDefinition816);
				atom102=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom102.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(174, 47);
			// Php.g:174:47: ( ',' VariableName ( Equals atom )? )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==Comma))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:174:48: ',' VariableName ( Equals atom )?
					{
					DebugLocation(174, 48);
					char_literal103=(IToken)Match(input,Comma,Follow._Comma_in_fieldDefinition821); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal103_tree = (object)adaptor.Create(char_literal103);
					adaptor.AddChild(root_0, char_literal103_tree);
					}
					DebugLocation(174, 52);
					VariableName104=(IToken)Match(input,VariableName,Follow._VariableName_in_fieldDefinition823); if (state.failed) return retval;
					if (state.backtracking == 0) {
					VariableName104_tree = (object)adaptor.Create(VariableName104);
					adaptor.AddChild(root_0, VariableName104_tree);
					}
					DebugLocation(174, 65);
					// Php.g:174:65: ( Equals atom )?
					int alt33=2;
					try { DebugEnterSubRule(33);
					try { DebugEnterDecision(33, false);
					int LA33_1 = input.LA(1);

					if ((LA33_1==Equals))
					{
						alt33 = 1;
					}
					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:174:66: Equals atom
						{
						DebugLocation(174, 66);
						Equals105=(IToken)Match(input,Equals,Follow._Equals_in_fieldDefinition826); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals105_tree = (object)adaptor.Create(Equals105);
						adaptor.AddChild(root_0, Equals105_tree);
						}
						DebugLocation(174, 73);
						PushFollow(Follow._atom_in_fieldDefinition828);
						atom106=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom106.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(33); }


					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldDefinition", 17);
			LeaveRule("fieldDefinition", 17);
			LeaveRule_fieldDefinition();
			if (state.backtracking > 0) { Memoize(input, 17, fieldDefinition_StartIndex); }

		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "fieldDefinition"); }
		return retval;

	}
	// $ANTLR end "fieldDefinition"

	partial void EnterRule_classModifier();
	partial void LeaveRule_classModifier();
	// $ANTLR start "classModifier"
	// Php.g:177:1: classModifier : ( Final | Abstract );
	[GrammarRule("classModifier")]
	private AstParserRuleReturnScope<object, IToken> classModifier()
	{
		EnterRule_classModifier();
		EnterRule("classModifier", 18);
		TraceIn("classModifier", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set107 = default(IToken);

		object set107_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classModifier");
		DebugLocation(177, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// Php.g:178:2: ( Final | Abstract )
			DebugEnterAlt(1);
			// Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(178, 2);

			set107=(IToken)input.LT(1);
			if (input.LA(1)==Abstract||input.LA(1)==Final)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set107));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classModifier", 18);
			LeaveRule("classModifier", 18);
			LeaveRule_classModifier();
			if (state.backtracking > 0) { Memoize(input, 18, classModifier_StartIndex); }

		}
		DebugLocation(178, 19);
		} finally { DebugExitRule(GrammarFileName, "classModifier"); }
		return retval;

	}
	// $ANTLR end "classModifier"

	partial void EnterRule_functionModifier();
	partial void LeaveRule_functionModifier();
	// $ANTLR start "functionModifier"
	// Php.g:180:1: functionModifier : ( accessModifier | Final | Abstract | Static );
	[GrammarRule("functionModifier")]
	private AstParserRuleReturnScope<object, IToken> functionModifier()
	{
		EnterRule_functionModifier();
		EnterRule("functionModifier", 19);
		TraceIn("functionModifier", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int functionModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Final109 = default(IToken);
		IToken Abstract110 = default(IToken);
		IToken Static111 = default(IToken);
		AstParserRuleReturnScope<object, IToken> accessModifier108 = default(AstParserRuleReturnScope<object, IToken>);

		object Final109_tree = default(object);
		object Abstract110_tree = default(object);
		object Static111_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionModifier");
		DebugLocation(180, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// Php.g:181:2: ( accessModifier | Final | Abstract | Static )
			int alt35=4;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case Private:
			case Protected:
			case Public:
				{
				alt35 = 1;
				}
				break;
			case Final:
				{
				alt35 = 2;
				}
				break;
			case Abstract:
				{
				alt35 = 3;
				}
				break;
			case Static:
				{
				alt35 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:181:4: accessModifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._accessModifier_in_functionModifier858);
				accessModifier108=accessModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessModifier108.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:181:21: Final
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 21);
				Final109=(IToken)Match(input,Final,Follow._Final_in_functionModifier862); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Final109_tree = (object)adaptor.Create(Final109);
				adaptor.AddChild(root_0, Final109_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:181:29: Abstract
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 29);
				Abstract110=(IToken)Match(input,Abstract,Follow._Abstract_in_functionModifier866); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Abstract110_tree = (object)adaptor.Create(Abstract110);
				adaptor.AddChild(root_0, Abstract110_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:181:40: Static
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 40);
				Static111=(IToken)Match(input,Static,Follow._Static_in_functionModifier870); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static111_tree = (object)adaptor.Create(Static111);
				adaptor.AddChild(root_0, Static111_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionModifier", 19);
			LeaveRule("functionModifier", 19);
			LeaveRule_functionModifier();
			if (state.backtracking > 0) { Memoize(input, 19, functionModifier_StartIndex); }

		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "functionModifier"); }
		return retval;

	}
	// $ANTLR end "functionModifier"

	partial void EnterRule_fieldModifier();
	partial void LeaveRule_fieldModifier();
	// $ANTLR start "fieldModifier"
	// Php.g:184:1: fieldModifier : ( accessModifier | Abstract | Static );
	[GrammarRule("fieldModifier")]
	private AstParserRuleReturnScope<object, IToken> fieldModifier()
	{
		EnterRule_fieldModifier();
		EnterRule("fieldModifier", 20);
		TraceIn("fieldModifier", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int fieldModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Abstract113 = default(IToken);
		IToken Static114 = default(IToken);
		AstParserRuleReturnScope<object, IToken> accessModifier112 = default(AstParserRuleReturnScope<object, IToken>);

		object Abstract113_tree = default(object);
		object Static114_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldModifier");
		DebugLocation(184, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// Php.g:185:2: ( accessModifier | Abstract | Static )
			int alt36=3;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case Private:
			case Protected:
			case Public:
				{
				alt36 = 1;
				}
				break;
			case Abstract:
				{
				alt36 = 2;
				}
				break;
			case Static:
				{
				alt36 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:185:4: accessModifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(185, 4);
				PushFollow(Follow._accessModifier_in_fieldModifier882);
				accessModifier112=accessModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessModifier112.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:185:21: Abstract
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(185, 21);
				Abstract113=(IToken)Match(input,Abstract,Follow._Abstract_in_fieldModifier886); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Abstract113_tree = (object)adaptor.Create(Abstract113);
				adaptor.AddChild(root_0, Abstract113_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:185:32: Static
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(185, 32);
				Static114=(IToken)Match(input,Static,Follow._Static_in_fieldModifier890); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static114_tree = (object)adaptor.Create(Static114);
				adaptor.AddChild(root_0, Static114_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldModifier", 20);
			LeaveRule("fieldModifier", 20);
			LeaveRule_fieldModifier();
			if (state.backtracking > 0) { Memoize(input, 20, fieldModifier_StartIndex); }

		}
		DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "fieldModifier"); }
		return retval;

	}
	// $ANTLR end "fieldModifier"

	partial void EnterRule_complexStatement();
	partial void LeaveRule_complexStatement();
	// $ANTLR start "complexStatement"
	// Php.g:188:1: complexStatement : ( If '(' expression ')' statement ( conditional )? | For '(' forInit forCondition forUpdate ')' statement | Foreach '(' expression As arrayEntry ')' statement | While '(' ( expression )? ')' statement | If '(' expression ')' ':' ( statement )* ( conditionalWithColon )? | For '(' forInit forCondition forUpdate ')' ':' ( statement )* | Foreach '(' expression As arrayEntry ')' ':' ( statement )* | While '(' ( expression )? ')' ':' ( statement )* | Do statement While '(' expression ')' ';' | Switch '(' expression ')' '{' cases '}' | tryStatement | functionDefinition );
	[GrammarRule("complexStatement")]
	private AstParserRuleReturnScope<object, IToken> complexStatement()
	{
		EnterRule_complexStatement();
		EnterRule("complexStatement", 21);
		TraceIn("complexStatement", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int complexStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken If115 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal118 = default(IToken);
		IToken For121 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken char_literal126 = default(IToken);
		IToken Foreach128 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken As131 = default(IToken);
		IToken char_literal133 = default(IToken);
		IToken While135 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken char_literal138 = default(IToken);
		IToken If140 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		IToken char_literal144 = default(IToken);
		IToken For147 = default(IToken);
		IToken char_literal148 = default(IToken);
		IToken char_literal152 = default(IToken);
		IToken char_literal153 = default(IToken);
		IToken Foreach155 = default(IToken);
		IToken char_literal156 = default(IToken);
		IToken As158 = default(IToken);
		IToken char_literal160 = default(IToken);
		IToken char_literal161 = default(IToken);
		IToken While163 = default(IToken);
		IToken char_literal164 = default(IToken);
		IToken char_literal166 = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken Do169 = default(IToken);
		IToken While171 = default(IToken);
		IToken char_literal172 = default(IToken);
		IToken char_literal174 = default(IToken);
		IToken char_literal175 = default(IToken);
		IToken Switch176 = default(IToken);
		IToken char_literal177 = default(IToken);
		IToken char_literal179 = default(IToken);
		IToken char_literal180 = default(IToken);
		IToken char_literal182 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression117 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement119 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditional120 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forInit123 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forCondition124 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forUpdate125 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement127 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression130 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayEntry132 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement134 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression137 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement139 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression142 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement145 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditionalWithColon146 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forInit149 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forCondition150 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forUpdate151 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement154 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression157 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayEntry159 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement162 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression165 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement168 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement170 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression173 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression178 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> cases181 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> tryStatement183 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionDefinition184 = default(AstParserRuleReturnScope<object, IToken>);

		object If115_tree = default(object);
		object char_literal116_tree = default(object);
		object char_literal118_tree = default(object);
		object For121_tree = default(object);
		object char_literal122_tree = default(object);
		object char_literal126_tree = default(object);
		object Foreach128_tree = default(object);
		object char_literal129_tree = default(object);
		object As131_tree = default(object);
		object char_literal133_tree = default(object);
		object While135_tree = default(object);
		object char_literal136_tree = default(object);
		object char_literal138_tree = default(object);
		object If140_tree = default(object);
		object char_literal141_tree = default(object);
		object char_literal143_tree = default(object);
		object char_literal144_tree = default(object);
		object For147_tree = default(object);
		object char_literal148_tree = default(object);
		object char_literal152_tree = default(object);
		object char_literal153_tree = default(object);
		object Foreach155_tree = default(object);
		object char_literal156_tree = default(object);
		object As158_tree = default(object);
		object char_literal160_tree = default(object);
		object char_literal161_tree = default(object);
		object While163_tree = default(object);
		object char_literal164_tree = default(object);
		object char_literal166_tree = default(object);
		object char_literal167_tree = default(object);
		object Do169_tree = default(object);
		object While171_tree = default(object);
		object char_literal172_tree = default(object);
		object char_literal174_tree = default(object);
		object char_literal175_tree = default(object);
		object Switch176_tree = default(object);
		object char_literal177_tree = default(object);
		object char_literal179_tree = default(object);
		object char_literal180_tree = default(object);
		object char_literal182_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "complexStatement");
		DebugLocation(188, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// Php.g:189:2: ( If '(' expression ')' statement ( conditional )? | For '(' forInit forCondition forUpdate ')' statement | Foreach '(' expression As arrayEntry ')' statement | While '(' ( expression )? ')' statement | If '(' expression ')' ':' ( statement )* ( conditionalWithColon )? | For '(' forInit forCondition forUpdate ')' ':' ( statement )* | Foreach '(' expression As arrayEntry ')' ':' ( statement )* | While '(' ( expression )? ')' ':' ( statement )* | Do statement While '(' expression ')' ';' | Switch '(' expression ')' '{' cases '}' | tryStatement | functionDefinition )
			int alt45=12;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case If:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred53_Php_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred60_Php_fragment)))
				{
					alt45 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case For:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred54_Php_fragment)))
				{
					alt45 = 2;
				}
				else if ((EvaluatePredicate(synpred62_Php_fragment)))
				{
					alt45 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Foreach:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred55_Php_fragment)))
				{
					alt45 = 3;
				}
				else if ((EvaluatePredicate(synpred64_Php_fragment)))
				{
					alt45 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case While:
				{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Php_fragment)))
				{
					alt45 = 4;
				}
				else if ((EvaluatePredicate(synpred67_Php_fragment)))
				{
					alt45 = 8;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Do:
				{
				alt45 = 9;
				}
				break;
			case Switch:
				{
				alt45 = 10;
				}
				break;
			case Try:
				{
				alt45 = 11;
				}
				break;
			case Function:
				{
				alt45 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:189:4: If '(' expression ')' statement ( conditional )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(189, 4);
				If115=(IToken)Match(input,If,Follow._If_in_complexStatement901); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If115_tree = (object)adaptor.Create(If115);
				adaptor.AddChild(root_0, If115_tree);
				}
				DebugLocation(189, 7);
				char_literal116=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement903); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal116_tree = (object)adaptor.Create(char_literal116);
				adaptor.AddChild(root_0, char_literal116_tree);
				}
				DebugLocation(189, 11);
				PushFollow(Follow._expression_in_complexStatement905);
				expression117=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression117.Tree);
				DebugLocation(189, 22);
				char_literal118=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement907); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal118_tree = (object)adaptor.Create(char_literal118);
				adaptor.AddChild(root_0, char_literal118_tree);
				}
				DebugLocation(189, 26);
				PushFollow(Follow._statement_in_complexStatement909);
				statement119=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement119.Tree);
				DebugLocation(189, 36);
				// Php.g:189:36: ( conditional )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==ElseIf))
				{
					int LA37_2 = input.LA(2);

					if ((EvaluatePredicate(synpred52_Php_fragment)))
					{
						alt37 = 1;
					}
				}
				else if ((LA37_1==Else))
				{
					int LA37_2 = input.LA(2);

					if ((EvaluatePredicate(synpred52_Php_fragment)))
					{
						alt37 = 1;
					}
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:189:36: conditional
					{
					DebugLocation(189, 36);
					PushFollow(Follow._conditional_in_complexStatement911);
					conditional120=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional120.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:190:4: For '(' forInit forCondition forUpdate ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 4);
				For121=(IToken)Match(input,For,Follow._For_in_complexStatement917); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For121_tree = (object)adaptor.Create(For121);
				adaptor.AddChild(root_0, For121_tree);
				}
				DebugLocation(190, 8);
				char_literal122=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement919); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal122_tree = (object)adaptor.Create(char_literal122);
				adaptor.AddChild(root_0, char_literal122_tree);
				}
				DebugLocation(190, 12);
				PushFollow(Follow._forInit_in_complexStatement921);
				forInit123=forInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forInit123.Tree);
				DebugLocation(190, 20);
				PushFollow(Follow._forCondition_in_complexStatement923);
				forCondition124=forCondition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forCondition124.Tree);
				DebugLocation(190, 33);
				PushFollow(Follow._forUpdate_in_complexStatement925);
				forUpdate125=forUpdate();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forUpdate125.Tree);
				DebugLocation(190, 43);
				char_literal126=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement927); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal126_tree = (object)adaptor.Create(char_literal126);
				adaptor.AddChild(root_0, char_literal126_tree);
				}
				DebugLocation(190, 47);
				PushFollow(Follow._statement_in_complexStatement929);
				statement127=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement127.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:191:4: Foreach '(' expression As arrayEntry ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(191, 4);
				Foreach128=(IToken)Match(input,Foreach,Follow._Foreach_in_complexStatement934); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach128_tree = (object)adaptor.Create(Foreach128);
				adaptor.AddChild(root_0, Foreach128_tree);
				}
				DebugLocation(191, 12);
				char_literal129=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement936); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal129_tree = (object)adaptor.Create(char_literal129);
				adaptor.AddChild(root_0, char_literal129_tree);
				}
				DebugLocation(191, 16);
				PushFollow(Follow._expression_in_complexStatement938);
				expression130=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression130.Tree);
				DebugLocation(191, 27);
				As131=(IToken)Match(input,As,Follow._As_in_complexStatement940); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As131_tree = (object)adaptor.Create(As131);
				adaptor.AddChild(root_0, As131_tree);
				}
				DebugLocation(191, 30);
				PushFollow(Follow._arrayEntry_in_complexStatement942);
				arrayEntry132=arrayEntry();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry132.Tree);
				DebugLocation(191, 41);
				char_literal133=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement944); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal133_tree = (object)adaptor.Create(char_literal133);
				adaptor.AddChild(root_0, char_literal133_tree);
				}
				DebugLocation(191, 45);
				PushFollow(Follow._statement_in_complexStatement946);
				statement134=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement134.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:192:4: While '(' ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(192, 4);
				While135=(IToken)Match(input,While,Follow._While_in_complexStatement951); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While135_tree = (object)adaptor.Create(While135);
				adaptor.AddChild(root_0, While135_tree);
				}
				DebugLocation(192, 10);
				char_literal136=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement953); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal136_tree = (object)adaptor.Create(char_literal136);
				adaptor.AddChild(root_0, char_literal136_tree);
				}
				DebugLocation(192, 14);
				// Php.g:192:14: ( expression )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if (((LA38_1>=Abstract && LA38_1<=And)||(LA38_1>=ArrayType && LA38_1<=As)||LA38_1==Bang||(LA38_1>=BoolType && LA38_1<=Class)||LA38_1==Clone||(LA38_1>=Const && LA38_1<=Continue)||(LA38_1>=Default && LA38_1<=Die)||LA38_1==Do||(LA38_1>=DoubleQuotedString && LA38_1<=Empty)||(LA38_1>=Eval && LA38_1<=Exit)||(LA38_1>=Extends && LA38_1<=Foreach)||(LA38_1>=Function && LA38_1<=HaltCompiler)||LA38_1==HereDoc||(LA38_1>=If && LA38_1<=IncrementOperator)||(LA38_1>=Instanceof && LA38_1<=List)||LA38_1==Minus||(LA38_1>=Namespace && LA38_1<=Null)||LA38_1==ObjectType||(LA38_1>=OpenRoundBracket && LA38_1<=Or)||(LA38_1>=Plus && LA38_1<=Public)||(LA38_1>=Real && LA38_1<=Return)||LA38_1==SingleQuotedString||(LA38_1>=Static && LA38_1<=Try)||LA38_1==UnquotedString||(LA38_1>=UnsetType && LA38_1<=While)||(LA38_1>=Xor && LA38_1<=131)))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:192:14: expression
					{
					DebugLocation(192, 14);
					PushFollow(Follow._expression_in_complexStatement955);
					expression137=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression137.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(192, 26);
				char_literal138=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement958); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal138_tree = (object)adaptor.Create(char_literal138);
				adaptor.AddChild(root_0, char_literal138_tree);
				}
				DebugLocation(192, 30);
				PushFollow(Follow._statement_in_complexStatement960);
				statement139=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement139.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:193:4: If '(' expression ')' ':' ( statement )* ( conditionalWithColon )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(193, 4);
				If140=(IToken)Match(input,If,Follow._If_in_complexStatement965); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If140_tree = (object)adaptor.Create(If140);
				adaptor.AddChild(root_0, If140_tree);
				}
				DebugLocation(193, 7);
				char_literal141=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement967); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal141_tree = (object)adaptor.Create(char_literal141);
				adaptor.AddChild(root_0, char_literal141_tree);
				}
				DebugLocation(193, 11);
				PushFollow(Follow._expression_in_complexStatement969);
				expression142=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression142.Tree);
				DebugLocation(193, 22);
				char_literal143=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement971); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal143_tree = (object)adaptor.Create(char_literal143);
				adaptor.AddChild(root_0, char_literal143_tree);
				}
				DebugLocation(193, 26);
				char_literal144=(IToken)Match(input,Colon,Follow._Colon_in_complexStatement973); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal144_tree = (object)adaptor.Create(char_literal144);
				adaptor.AddChild(root_0, char_literal144_tree);
				}
				DebugLocation(193, 30);
				// Php.g:193:30: ( statement )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					try
					{
						alt39 = dfa39.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:193:30: statement
						{
						DebugLocation(193, 30);
						PushFollow(Follow._statement_in_complexStatement975);
						statement145=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement145.Tree);

						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(193, 41);
				// Php.g:193:41: ( conditionalWithColon )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==ElseIf))
				{
					int LA40_2 = input.LA(2);

					if ((EvaluatePredicate(synpred59_Php_fragment)))
					{
						alt40 = 1;
					}
				}
				else if ((LA40_1==Else))
				{
					int LA40_2 = input.LA(2);

					if ((EvaluatePredicate(synpred59_Php_fragment)))
					{
						alt40 = 1;
					}
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:193:41: conditionalWithColon
					{
					DebugLocation(193, 41);
					PushFollow(Follow._conditionalWithColon_in_complexStatement978);
					conditionalWithColon146=conditionalWithColon();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalWithColon146.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(40); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Php.g:194:4: For '(' forInit forCondition forUpdate ')' ':' ( statement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(194, 4);
				For147=(IToken)Match(input,For,Follow._For_in_complexStatement984); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For147_tree = (object)adaptor.Create(For147);
				adaptor.AddChild(root_0, For147_tree);
				}
				DebugLocation(194, 8);
				char_literal148=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement986); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal148_tree = (object)adaptor.Create(char_literal148);
				adaptor.AddChild(root_0, char_literal148_tree);
				}
				DebugLocation(194, 12);
				PushFollow(Follow._forInit_in_complexStatement988);
				forInit149=forInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forInit149.Tree);
				DebugLocation(194, 20);
				PushFollow(Follow._forCondition_in_complexStatement990);
				forCondition150=forCondition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forCondition150.Tree);
				DebugLocation(194, 33);
				PushFollow(Follow._forUpdate_in_complexStatement992);
				forUpdate151=forUpdate();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forUpdate151.Tree);
				DebugLocation(194, 43);
				char_literal152=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement994); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal152_tree = (object)adaptor.Create(char_literal152);
				adaptor.AddChild(root_0, char_literal152_tree);
				}
				DebugLocation(194, 47);
				char_literal153=(IToken)Match(input,Colon,Follow._Colon_in_complexStatement996); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal153_tree = (object)adaptor.Create(char_literal153);
				adaptor.AddChild(root_0, char_literal153_tree);
				}
				DebugLocation(194, 51);
				// Php.g:194:51: ( statement )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					try
					{
						alt41 = dfa41.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:194:51: statement
						{
						DebugLocation(194, 51);
						PushFollow(Follow._statement_in_complexStatement998);
						statement154=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement154.Tree);

						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Php.g:195:4: Foreach '(' expression As arrayEntry ')' ':' ( statement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 4);
				Foreach155=(IToken)Match(input,Foreach,Follow._Foreach_in_complexStatement1004); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach155_tree = (object)adaptor.Create(Foreach155);
				adaptor.AddChild(root_0, Foreach155_tree);
				}
				DebugLocation(195, 12);
				char_literal156=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1006); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal156_tree = (object)adaptor.Create(char_literal156);
				adaptor.AddChild(root_0, char_literal156_tree);
				}
				DebugLocation(195, 16);
				PushFollow(Follow._expression_in_complexStatement1008);
				expression157=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression157.Tree);
				DebugLocation(195, 27);
				As158=(IToken)Match(input,As,Follow._As_in_complexStatement1010); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As158_tree = (object)adaptor.Create(As158);
				adaptor.AddChild(root_0, As158_tree);
				}
				DebugLocation(195, 30);
				PushFollow(Follow._arrayEntry_in_complexStatement1012);
				arrayEntry159=arrayEntry();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry159.Tree);
				DebugLocation(195, 41);
				char_literal160=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1014); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal160_tree = (object)adaptor.Create(char_literal160);
				adaptor.AddChild(root_0, char_literal160_tree);
				}
				DebugLocation(195, 45);
				char_literal161=(IToken)Match(input,Colon,Follow._Colon_in_complexStatement1016); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal161_tree = (object)adaptor.Create(char_literal161);
				adaptor.AddChild(root_0, char_literal161_tree);
				}
				DebugLocation(195, 49);
				// Php.g:195:49: ( statement )*
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					try
					{
						alt42 = dfa42.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(42); }
					switch ( alt42 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:195:49: statement
						{
						DebugLocation(195, 49);
						PushFollow(Follow._statement_in_complexStatement1018);
						statement162=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement162.Tree);

						}
						break;

					default:
						goto loop42;
					}
				}

				loop42:
					;

				} finally { DebugExitSubRule(42); }


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Php.g:196:4: While '(' ( expression )? ')' ':' ( statement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(196, 4);
				While163=(IToken)Match(input,While,Follow._While_in_complexStatement1024); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While163_tree = (object)adaptor.Create(While163);
				adaptor.AddChild(root_0, While163_tree);
				}
				DebugLocation(196, 10);
				char_literal164=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1026); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal164_tree = (object)adaptor.Create(char_literal164);
				adaptor.AddChild(root_0, char_literal164_tree);
				}
				DebugLocation(196, 14);
				// Php.g:196:14: ( expression )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if (((LA43_1>=Abstract && LA43_1<=And)||(LA43_1>=ArrayType && LA43_1<=As)||LA43_1==Bang||(LA43_1>=BoolType && LA43_1<=Class)||LA43_1==Clone||(LA43_1>=Const && LA43_1<=Continue)||(LA43_1>=Default && LA43_1<=Die)||LA43_1==Do||(LA43_1>=DoubleQuotedString && LA43_1<=Empty)||(LA43_1>=Eval && LA43_1<=Exit)||(LA43_1>=Extends && LA43_1<=Foreach)||(LA43_1>=Function && LA43_1<=HaltCompiler)||LA43_1==HereDoc||(LA43_1>=If && LA43_1<=IncrementOperator)||(LA43_1>=Instanceof && LA43_1<=List)||LA43_1==Minus||(LA43_1>=Namespace && LA43_1<=Null)||LA43_1==ObjectType||(LA43_1>=OpenRoundBracket && LA43_1<=Or)||(LA43_1>=Plus && LA43_1<=Public)||(LA43_1>=Real && LA43_1<=Return)||LA43_1==SingleQuotedString||(LA43_1>=Static && LA43_1<=Try)||LA43_1==UnquotedString||(LA43_1>=UnsetType && LA43_1<=While)||(LA43_1>=Xor && LA43_1<=131)))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:196:14: expression
					{
					DebugLocation(196, 14);
					PushFollow(Follow._expression_in_complexStatement1028);
					expression165=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression165.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(196, 26);
				char_literal166=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1031); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal166_tree = (object)adaptor.Create(char_literal166);
				adaptor.AddChild(root_0, char_literal166_tree);
				}
				DebugLocation(196, 30);
				char_literal167=(IToken)Match(input,Colon,Follow._Colon_in_complexStatement1033); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal167_tree = (object)adaptor.Create(char_literal167);
				adaptor.AddChild(root_0, char_literal167_tree);
				}
				DebugLocation(196, 34);
				// Php.g:196:34: ( statement )*
				try { DebugEnterSubRule(44);
				while (true)
				{
					int alt44=2;
					try { DebugEnterDecision(44, false);
					try
					{
						alt44 = dfa44.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(44); }
					switch ( alt44 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:196:34: statement
						{
						DebugLocation(196, 34);
						PushFollow(Follow._statement_in_complexStatement1035);
						statement168=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement168.Tree);

						}
						break;

					default:
						goto loop44;
					}
				}

				loop44:
					;

				} finally { DebugExitSubRule(44); }


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Php.g:197:4: Do statement While '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(197, 4);
				Do169=(IToken)Match(input,Do,Follow._Do_in_complexStatement1041); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Do169_tree = (object)adaptor.Create(Do169);
				adaptor.AddChild(root_0, Do169_tree);
				}
				DebugLocation(197, 7);
				PushFollow(Follow._statement_in_complexStatement1043);
				statement170=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement170.Tree);
				DebugLocation(197, 17);
				While171=(IToken)Match(input,While,Follow._While_in_complexStatement1045); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While171_tree = (object)adaptor.Create(While171);
				adaptor.AddChild(root_0, While171_tree);
				}
				DebugLocation(197, 23);
				char_literal172=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1047); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal172_tree = (object)adaptor.Create(char_literal172);
				adaptor.AddChild(root_0, char_literal172_tree);
				}
				DebugLocation(197, 27);
				PushFollow(Follow._expression_in_complexStatement1049);
				expression173=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression173.Tree);
				DebugLocation(197, 38);
				char_literal174=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1051); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal174_tree = (object)adaptor.Create(char_literal174);
				adaptor.AddChild(root_0, char_literal174_tree);
				}
				DebugLocation(197, 42);
				char_literal175=(IToken)Match(input,SemiColon,Follow._SemiColon_in_complexStatement1053); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal175_tree = (object)adaptor.Create(char_literal175);
				adaptor.AddChild(root_0, char_literal175_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Php.g:198:4: Switch '(' expression ')' '{' cases '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(198, 4);
				Switch176=(IToken)Match(input,Switch,Follow._Switch_in_complexStatement1058); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Switch176_tree = (object)adaptor.Create(Switch176);
				adaptor.AddChild(root_0, Switch176_tree);
				}
				DebugLocation(198, 11);
				char_literal177=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1060); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal177_tree = (object)adaptor.Create(char_literal177);
				adaptor.AddChild(root_0, char_literal177_tree);
				}
				DebugLocation(198, 15);
				PushFollow(Follow._expression_in_complexStatement1062);
				expression178=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression178.Tree);
				DebugLocation(198, 26);
				char_literal179=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1064); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal179_tree = (object)adaptor.Create(char_literal179);
				adaptor.AddChild(root_0, char_literal179_tree);
				}
				DebugLocation(198, 30);
				char_literal180=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_complexStatement1066); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal180_tree = (object)adaptor.Create(char_literal180);
				adaptor.AddChild(root_0, char_literal180_tree);
				}
				DebugLocation(198, 34);
				PushFollow(Follow._cases_in_complexStatement1068);
				cases181=cases();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cases181.Tree);
				DebugLocation(198, 40);
				char_literal182=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_complexStatement1070); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal182_tree = (object)adaptor.Create(char_literal182);
				adaptor.AddChild(root_0, char_literal182_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Php.g:199:4: tryStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(199, 4);
				PushFollow(Follow._tryStatement_in_complexStatement1075);
				tryStatement183=tryStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tryStatement183.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Php.g:200:4: functionDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(200, 4);
				PushFollow(Follow._functionDefinition_in_complexStatement1080);
				functionDefinition184=functionDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionDefinition184.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("complexStatement", 21);
			LeaveRule("complexStatement", 21);
			LeaveRule_complexStatement();
			if (state.backtracking > 0) { Memoize(input, 21, complexStatement_StartIndex); }

		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "complexStatement"); }
		return retval;

	}
	// $ANTLR end "complexStatement"

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();
	// $ANTLR start "tryStatement"
	// Php.g:203:1: tryStatement : Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )? ;
	[GrammarRule("tryStatement")]
	private AstParserRuleReturnScope<object, IToken> tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 22);
		TraceIn("tryStatement", 22);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int tryStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Try185 = default(IToken);
		IToken Catch187 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken char_literal191 = default(IToken);
		IToken Finally193 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bracketedBlock186 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName189 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variable190 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bracketedBlock192 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bracketedBlock194 = default(AstParserRuleReturnScope<object, IToken>);

		object Try185_tree = default(object);
		object Catch187_tree = default(object);
		object char_literal188_tree = default(object);
		object char_literal191_tree = default(object);
		object Finally193_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(203, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// Php.g:204:2: ( Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )? )
			DebugEnterAlt(1);
			// Php.g:204:4: Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(204, 4);
			Try185=(IToken)Match(input,Try,Follow._Try_in_tryStatement1092); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Try185_tree = (object)adaptor.Create(Try185);
			adaptor.AddChild(root_0, Try185_tree);
			}
			DebugLocation(204, 8);
			PushFollow(Follow._bracketedBlock_in_tryStatement1094);
			bracketedBlock186=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock186.Tree);
			DebugLocation(205, 4);
			// Php.g:205:4: ( Catch '(' qualifiedName variable ')' bracketedBlock )+
			int cnt46=0;
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				try
				{
					alt46 = dfa46.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:205:5: Catch '(' qualifiedName variable ')' bracketedBlock
					{
					DebugLocation(205, 5);
					Catch187=(IToken)Match(input,Catch,Follow._Catch_in_tryStatement1100); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Catch187_tree = (object)adaptor.Create(Catch187);
					adaptor.AddChild(root_0, Catch187_tree);
					}
					DebugLocation(205, 11);
					char_literal188=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_tryStatement1102); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal188_tree = (object)adaptor.Create(char_literal188);
					adaptor.AddChild(root_0, char_literal188_tree);
					}
					DebugLocation(205, 15);
					PushFollow(Follow._qualifiedName_in_tryStatement1104);
					qualifiedName189=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName189.Tree);
					DebugLocation(205, 29);
					PushFollow(Follow._variable_in_tryStatement1106);
					variable190=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable190.Tree);
					DebugLocation(205, 38);
					char_literal191=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_tryStatement1108); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal191_tree = (object)adaptor.Create(char_literal191);
					adaptor.AddChild(root_0, char_literal191_tree);
					}
					DebugLocation(205, 42);
					PushFollow(Follow._bracketedBlock_in_tryStatement1110);
					bracketedBlock192=bracketedBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock192.Tree);

					}
					break;

				default:
					if (cnt46 >= 1)
						goto loop46;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee46 = new EarlyExitException( 46, input );
					DebugRecognitionException(eee46);
					throw eee46;
				}
				cnt46++;
			}
			loop46:
				;

			} finally { DebugExitSubRule(46); }

			DebugLocation(206, 4);
			// Php.g:206:4: ( Finally bracketedBlock )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			try
			{
				alt47 = dfa47.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:206:5: Finally bracketedBlock
				{
				DebugLocation(206, 5);
				Finally193=(IToken)Match(input,Finally,Follow._Finally_in_tryStatement1118); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Finally193_tree = (object)adaptor.Create(Finally193);
				adaptor.AddChild(root_0, Finally193_tree);
				}
				DebugLocation(206, 13);
				PushFollow(Follow._bracketedBlock_in_tryStatement1120);
				bracketedBlock194=bracketedBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock194.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryStatement", 22);
			LeaveRule("tryStatement", 22);
			LeaveRule_tryStatement();
			if (state.backtracking > 0) { Memoize(input, 22, tryStatement_StartIndex); }

		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return retval;

	}
	// $ANTLR end "tryStatement"

	partial void EnterRule_simpleStatement();
	partial void LeaveRule_simpleStatement();
	// $ANTLR start "simpleStatement"
	// Php.g:209:1: simpleStatement : ( Echo commaList | Print expression | Global variable ( ',' variable )* | Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* | constDefinition | Break ( Integer )? | Continue ( Integer )? | Goto UnquotedString | Return ( expression )? | Goto UnquotedString | Throw expression | expression );
	[GrammarRule("simpleStatement")]
	private AstParserRuleReturnScope<object, IToken> simpleStatement()
	{
		EnterRule_simpleStatement();
		EnterRule("simpleStatement", 23);
		TraceIn("simpleStatement", 23);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int simpleStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Echo195 = default(IToken);
		IToken Print197 = default(IToken);
		IToken Global199 = default(IToken);
		IToken char_literal201 = default(IToken);
		IToken Static203 = default(IToken);
		IToken VariableName204 = default(IToken);
		IToken Equals205 = default(IToken);
		IToken char_literal207 = default(IToken);
		IToken VariableName208 = default(IToken);
		IToken Equals209 = default(IToken);
		IToken Break212 = default(IToken);
		IToken Integer213 = default(IToken);
		IToken Continue214 = default(IToken);
		IToken Integer215 = default(IToken);
		IToken Goto216 = default(IToken);
		IToken UnquotedString217 = default(IToken);
		IToken Return218 = default(IToken);
		IToken Goto220 = default(IToken);
		IToken UnquotedString221 = default(IToken);
		IToken Throw222 = default(IToken);
		AstParserRuleReturnScope<object, IToken> commaList196 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression198 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variable200 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variable202 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom206 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom210 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constDefinition211 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression219 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression223 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression224 = default(AstParserRuleReturnScope<object, IToken>);

		object Echo195_tree = default(object);
		object Print197_tree = default(object);
		object Global199_tree = default(object);
		object char_literal201_tree = default(object);
		object Static203_tree = default(object);
		object VariableName204_tree = default(object);
		object Equals205_tree = default(object);
		object char_literal207_tree = default(object);
		object VariableName208_tree = default(object);
		object Equals209_tree = default(object);
		object Break212_tree = default(object);
		object Integer213_tree = default(object);
		object Continue214_tree = default(object);
		object Integer215_tree = default(object);
		object Goto216_tree = default(object);
		object UnquotedString217_tree = default(object);
		object Return218_tree = default(object);
		object Goto220_tree = default(object);
		object UnquotedString221_tree = default(object);
		object Throw222_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "simpleStatement");
		DebugLocation(209, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// Php.g:210:2: ( Echo commaList | Print expression | Global variable ( ',' variable )* | Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* | constDefinition | Break ( Integer )? | Continue ( Integer )? | Goto UnquotedString | Return ( expression )? | Goto UnquotedString | Throw expression | expression )
			int alt55=12;
			try { DebugEnterDecision(55, false);
			switch (input.LA(1))
			{
			case Echo:
				{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred73_Php_fragment)))
				{
					alt55 = 1;
				}
				else if ((true))
				{
					alt55 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Print:
				{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred74_Php_fragment)))
				{
					alt55 = 2;
				}
				else if ((true))
				{
					alt55 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Global:
				{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred76_Php_fragment)))
				{
					alt55 = 3;
				}
				else if ((true))
				{
					alt55 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Static:
				{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred80_Php_fragment)))
				{
					alt55 = 4;
				}
				else if ((true))
				{
					alt55 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Const:
				{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred81_Php_fragment)))
				{
					alt55 = 5;
				}
				else if ((true))
				{
					alt55 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Break:
				{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred83_Php_fragment)))
				{
					alt55 = 6;
				}
				else if ((true))
				{
					alt55 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Continue:
				{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred85_Php_fragment)))
				{
					alt55 = 7;
				}
				else if ((true))
				{
					alt55 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Goto:
				{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred86_Php_fragment)))
				{
					alt55 = 8;
				}
				else if ((EvaluatePredicate(synpred89_Php_fragment)))
				{
					alt55 = 10;
				}
				else if ((true))
				{
					alt55 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Return:
				{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred88_Php_fragment)))
				{
					alt55 = 9;
				}
				else if ((true))
				{
					alt55 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Throw:
				{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred90_Php_fragment)))
				{
					alt55 = 11;
				}
				else if ((true))
				{
					alt55 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case Ampersand:
			case And:
			case ArrayType:
			case As:
			case Bang:
			case BoolType:
			case BooleanType:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Default:
			case Die:
			case Do:
			case DoubleQuotedString:
			case DoubleType:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case IncrementOperator:
			case Instanceof:
			case IntType:
			case Integer:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Minus:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case Or:
			case Plus:
			case Private:
			case Protected:
			case Public:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case StringType:
			case SuppressWarnings:
			case Switch:
			case Tilde:
			case True:
			case Try:
			case UnquotedString:
			case UnsetType:
			case Use:
			case Var:
			case VariableName:
			case While:
			case Xor:
			case 130:
			case 131:
				{
				alt55 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:210:4: Echo commaList
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(210, 4);
				Echo195=(IToken)Match(input,Echo,Follow._Echo_in_simpleStatement1133); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Echo195_tree = (object)adaptor.Create(Echo195);
				adaptor.AddChild(root_0, Echo195_tree);
				}
				DebugLocation(210, 9);
				PushFollow(Follow._commaList_in_simpleStatement1135);
				commaList196=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList196.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:211:4: Print expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(211, 4);
				Print197=(IToken)Match(input,Print,Follow._Print_in_simpleStatement1140); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Print197_tree = (object)adaptor.Create(Print197);
				adaptor.AddChild(root_0, Print197_tree);
				}
				DebugLocation(211, 10);
				PushFollow(Follow._expression_in_simpleStatement1142);
				expression198=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression198.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:212:4: Global variable ( ',' variable )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(212, 4);
				Global199=(IToken)Match(input,Global,Follow._Global_in_simpleStatement1147); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Global199_tree = (object)adaptor.Create(Global199);
				adaptor.AddChild(root_0, Global199_tree);
				}
				DebugLocation(212, 11);
				PushFollow(Follow._variable_in_simpleStatement1149);
				variable200=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable200.Tree);
				DebugLocation(212, 20);
				// Php.g:212:20: ( ',' variable )*
				try { DebugEnterSubRule(48);
				while (true)
				{
					int alt48=2;
					try { DebugEnterDecision(48, false);
					int LA48_1 = input.LA(1);

					if ((LA48_1==Comma))
					{
						alt48 = 1;
					}


					} finally { DebugExitDecision(48); }
					switch ( alt48 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:212:21: ',' variable
						{
						DebugLocation(212, 21);
						char_literal201=(IToken)Match(input,Comma,Follow._Comma_in_simpleStatement1152); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal201_tree = (object)adaptor.Create(char_literal201);
						adaptor.AddChild(root_0, char_literal201_tree);
						}
						DebugLocation(212, 25);
						PushFollow(Follow._variable_in_simpleStatement1154);
						variable202=variable();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, variable202.Tree);

						}
						break;

					default:
						goto loop48;
					}
				}

				loop48:
					;

				} finally { DebugExitSubRule(48); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:213:4: Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(213, 4);
				Static203=(IToken)Match(input,Static,Follow._Static_in_simpleStatement1162); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static203_tree = (object)adaptor.Create(Static203);
				adaptor.AddChild(root_0, Static203_tree);
				}
				DebugLocation(213, 11);
				VariableName204=(IToken)Match(input,VariableName,Follow._VariableName_in_simpleStatement1164); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName204_tree = (object)adaptor.Create(VariableName204);
				adaptor.AddChild(root_0, VariableName204_tree);
				}
				DebugLocation(213, 24);
				// Php.g:213:24: ( Equals atom )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==Equals))
				{
					alt49 = 1;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:213:25: Equals atom
					{
					DebugLocation(213, 25);
					Equals205=(IToken)Match(input,Equals,Follow._Equals_in_simpleStatement1167); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Equals205_tree = (object)adaptor.Create(Equals205);
					adaptor.AddChild(root_0, Equals205_tree);
					}
					DebugLocation(213, 32);
					PushFollow(Follow._atom_in_simpleStatement1169);
					atom206=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom206.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(49); }

				DebugLocation(213, 39);
				// Php.g:213:39: ( ',' VariableName ( Equals atom )? )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_1 = input.LA(1);

					if ((LA51_1==Comma))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:213:40: ',' VariableName ( Equals atom )?
						{
						DebugLocation(213, 40);
						char_literal207=(IToken)Match(input,Comma,Follow._Comma_in_simpleStatement1174); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal207_tree = (object)adaptor.Create(char_literal207);
						adaptor.AddChild(root_0, char_literal207_tree);
						}
						DebugLocation(213, 44);
						VariableName208=(IToken)Match(input,VariableName,Follow._VariableName_in_simpleStatement1176); if (state.failed) return retval;
						if (state.backtracking == 0) {
						VariableName208_tree = (object)adaptor.Create(VariableName208);
						adaptor.AddChild(root_0, VariableName208_tree);
						}
						DebugLocation(213, 57);
						// Php.g:213:57: ( Equals atom )?
						int alt50=2;
						try { DebugEnterSubRule(50);
						try { DebugEnterDecision(50, false);
						int LA50_1 = input.LA(1);

						if ((LA50_1==Equals))
						{
							alt50 = 1;
						}
						} finally { DebugExitDecision(50); }
						switch (alt50)
						{
						case 1:
							DebugEnterAlt(1);
							// Php.g:213:58: Equals atom
							{
							DebugLocation(213, 58);
							Equals209=(IToken)Match(input,Equals,Follow._Equals_in_simpleStatement1179); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Equals209_tree = (object)adaptor.Create(Equals209);
							adaptor.AddChild(root_0, Equals209_tree);
							}
							DebugLocation(213, 65);
							PushFollow(Follow._atom_in_simpleStatement1181);
							atom210=atom();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, atom210.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(50); }


						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:214:4: constDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(214, 4);
				PushFollow(Follow._constDefinition_in_simpleStatement1190);
				constDefinition211=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition211.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Php.g:215:4: Break ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(215, 4);
				Break212=(IToken)Match(input,Break,Follow._Break_in_simpleStatement1195); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Break212_tree = (object)adaptor.Create(Break212);
				adaptor.AddChild(root_0, Break212_tree);
				}
				DebugLocation(215, 10);
				// Php.g:215:10: ( Integer )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_1 = input.LA(1);

				if ((LA52_1==Integer))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:215:10: Integer
					{
					DebugLocation(215, 10);
					Integer213=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement1197); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer213_tree = (object)adaptor.Create(Integer213);
					adaptor.AddChild(root_0, Integer213_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(52); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Php.g:216:4: Continue ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(216, 4);
				Continue214=(IToken)Match(input,Continue,Follow._Continue_in_simpleStatement1203); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Continue214_tree = (object)adaptor.Create(Continue214);
				adaptor.AddChild(root_0, Continue214_tree);
				}
				DebugLocation(216, 13);
				// Php.g:216:13: ( Integer )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==Integer))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:216:13: Integer
					{
					DebugLocation(216, 13);
					Integer215=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement1205); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer215_tree = (object)adaptor.Create(Integer215);
					adaptor.AddChild(root_0, Integer215_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Php.g:217:4: Goto UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(217, 4);
				Goto216=(IToken)Match(input,Goto,Follow._Goto_in_simpleStatement1211); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto216_tree = (object)adaptor.Create(Goto216);
				adaptor.AddChild(root_0, Goto216_tree);
				}
				DebugLocation(217, 9);
				UnquotedString217=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_simpleStatement1213); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString217_tree = (object)adaptor.Create(UnquotedString217);
				adaptor.AddChild(root_0, UnquotedString217_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Php.g:218:4: Return ( expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(218, 4);
				Return218=(IToken)Match(input,Return,Follow._Return_in_simpleStatement1218); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Return218_tree = (object)adaptor.Create(Return218);
				adaptor.AddChild(root_0, Return218_tree);
				}
				DebugLocation(218, 11);
				// Php.g:218:11: ( expression )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_1 = input.LA(1);

				if (((LA54_1>=Abstract && LA54_1<=And)||(LA54_1>=ArrayType && LA54_1<=As)||LA54_1==Bang||(LA54_1>=BoolType && LA54_1<=Class)||LA54_1==Clone||(LA54_1>=Const && LA54_1<=Continue)||(LA54_1>=Default && LA54_1<=Die)||LA54_1==Do||(LA54_1>=DoubleQuotedString && LA54_1<=Empty)||(LA54_1>=Eval && LA54_1<=Exit)||(LA54_1>=Extends && LA54_1<=Foreach)||(LA54_1>=Function && LA54_1<=HaltCompiler)||LA54_1==HereDoc||(LA54_1>=If && LA54_1<=IncrementOperator)||(LA54_1>=Instanceof && LA54_1<=List)||LA54_1==Minus||(LA54_1>=Namespace && LA54_1<=Null)||LA54_1==ObjectType||(LA54_1>=OpenRoundBracket && LA54_1<=Or)||(LA54_1>=Plus && LA54_1<=Public)||(LA54_1>=Real && LA54_1<=Return)||LA54_1==SingleQuotedString||(LA54_1>=Static && LA54_1<=Try)||LA54_1==UnquotedString||(LA54_1>=UnsetType && LA54_1<=While)||(LA54_1>=Xor && LA54_1<=131)))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:218:11: expression
					{
					DebugLocation(218, 11);
					PushFollow(Follow._expression_in_simpleStatement1220);
					expression219=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression219.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(54); }


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Php.g:219:4: Goto UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(219, 4);
				Goto220=(IToken)Match(input,Goto,Follow._Goto_in_simpleStatement1226); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto220_tree = (object)adaptor.Create(Goto220);
				adaptor.AddChild(root_0, Goto220_tree);
				}
				DebugLocation(219, 9);
				UnquotedString221=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_simpleStatement1228); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString221_tree = (object)adaptor.Create(UnquotedString221);
				adaptor.AddChild(root_0, UnquotedString221_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Php.g:220:4: Throw expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(220, 4);
				Throw222=(IToken)Match(input,Throw,Follow._Throw_in_simpleStatement1233); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Throw222_tree = (object)adaptor.Create(Throw222);
				adaptor.AddChild(root_0, Throw222_tree);
				}
				DebugLocation(220, 10);
				PushFollow(Follow._expression_in_simpleStatement1235);
				expression223=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression223.Tree);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Php.g:221:4: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._expression_in_simpleStatement1240);
				expression224=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression224.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleStatement", 23);
			LeaveRule("simpleStatement", 23);
			LeaveRule_simpleStatement();
			if (state.backtracking > 0) { Memoize(input, 23, simpleStatement_StartIndex); }

		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "simpleStatement"); }
		return retval;

	}
	// $ANTLR end "simpleStatement"

	partial void EnterRule_conditional();
	partial void LeaveRule_conditional();
	// $ANTLR start "conditional"
	// Php.g:224:1: conditional : ( ElseIf '(' expression ')' statement ( conditional )? | Else statement );
	[GrammarRule("conditional")]
	private AstParserRuleReturnScope<object, IToken> conditional()
	{
		EnterRule_conditional();
		EnterRule("conditional", 24);
		TraceIn("conditional", 24);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditional_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ElseIf225 = default(IToken);
		IToken char_literal226 = default(IToken);
		IToken char_literal228 = default(IToken);
		IToken Else231 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression227 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement229 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditional230 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement232 = default(AstParserRuleReturnScope<object, IToken>);

		object ElseIf225_tree = default(object);
		object char_literal226_tree = default(object);
		object char_literal228_tree = default(object);
		object Else231_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional");
		DebugLocation(224, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// Php.g:225:2: ( ElseIf '(' expression ')' statement ( conditional )? | Else statement )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_1 = input.LA(1);

			if ((LA57_1==ElseIf))
			{
				alt57 = 1;
			}
			else if ((LA57_1==Else))
			{
				alt57 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:225:4: ElseIf '(' expression ')' statement ( conditional )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(225, 4);
				ElseIf225=(IToken)Match(input,ElseIf,Follow._ElseIf_in_conditional1251); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf225_tree = (object)adaptor.Create(ElseIf225);
				adaptor.AddChild(root_0, ElseIf225_tree);
				}
				DebugLocation(225, 11);
				char_literal226=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_conditional1253); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal226_tree = (object)adaptor.Create(char_literal226);
				adaptor.AddChild(root_0, char_literal226_tree);
				}
				DebugLocation(225, 15);
				PushFollow(Follow._expression_in_conditional1255);
				expression227=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression227.Tree);
				DebugLocation(225, 26);
				char_literal228=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_conditional1257); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal228_tree = (object)adaptor.Create(char_literal228);
				adaptor.AddChild(root_0, char_literal228_tree);
				}
				DebugLocation(225, 30);
				PushFollow(Follow._statement_in_conditional1259);
				statement229=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement229.Tree);
				DebugLocation(225, 40);
				// Php.g:225:40: ( conditional )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==ElseIf))
				{
					int LA56_2 = input.LA(2);

					if ((EvaluatePredicate(synpred91_Php_fragment)))
					{
						alt56 = 1;
					}
				}
				else if ((LA56_1==Else))
				{
					int LA56_2 = input.LA(2);

					if ((EvaluatePredicate(synpred91_Php_fragment)))
					{
						alt56 = 1;
					}
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:225:40: conditional
					{
					DebugLocation(225, 40);
					PushFollow(Follow._conditional_in_conditional1261);
					conditional230=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional230.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:226:4: Else statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(226, 4);
				Else231=(IToken)Match(input,Else,Follow._Else_in_conditional1267); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else231_tree = (object)adaptor.Create(Else231);
				adaptor.AddChild(root_0, Else231_tree);
				}
				DebugLocation(226, 9);
				PushFollow(Follow._statement_in_conditional1269);
				statement232=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement232.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional", 24);
			LeaveRule("conditional", 24);
			LeaveRule_conditional();
			if (state.backtracking > 0) { Memoize(input, 24, conditional_StartIndex); }

		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional"); }
		return retval;

	}
	// $ANTLR end "conditional"

	partial void EnterRule_conditionalWithColon();
	partial void LeaveRule_conditionalWithColon();
	// $ANTLR start "conditionalWithColon"
	// Php.g:229:1: conditionalWithColon : ( ElseIf '(' expression ')' ':' ( statement )* ( conditionalWithColon )? | Else ':' ( statement )* );
	[GrammarRule("conditionalWithColon")]
	private AstParserRuleReturnScope<object, IToken> conditionalWithColon()
	{
		EnterRule_conditionalWithColon();
		EnterRule("conditionalWithColon", 25);
		TraceIn("conditionalWithColon", 25);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalWithColon_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ElseIf233 = default(IToken);
		IToken char_literal234 = default(IToken);
		IToken char_literal236 = default(IToken);
		IToken char_literal237 = default(IToken);
		IToken Else240 = default(IToken);
		IToken char_literal241 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression235 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement238 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditionalWithColon239 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement242 = default(AstParserRuleReturnScope<object, IToken>);

		object ElseIf233_tree = default(object);
		object char_literal234_tree = default(object);
		object char_literal236_tree = default(object);
		object char_literal237_tree = default(object);
		object Else240_tree = default(object);
		object char_literal241_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditionalWithColon");
		DebugLocation(229, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// Php.g:230:2: ( ElseIf '(' expression ')' ':' ( statement )* ( conditionalWithColon )? | Else ':' ( statement )* )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==ElseIf))
			{
				alt61 = 1;
			}
			else if ((LA61_1==Else))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:230:4: ElseIf '(' expression ')' ':' ( statement )* ( conditionalWithColon )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(230, 4);
				ElseIf233=(IToken)Match(input,ElseIf,Follow._ElseIf_in_conditionalWithColon1280); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf233_tree = (object)adaptor.Create(ElseIf233);
				adaptor.AddChild(root_0, ElseIf233_tree);
				}
				DebugLocation(230, 11);
				char_literal234=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_conditionalWithColon1282); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal234_tree = (object)adaptor.Create(char_literal234);
				adaptor.AddChild(root_0, char_literal234_tree);
				}
				DebugLocation(230, 15);
				PushFollow(Follow._expression_in_conditionalWithColon1284);
				expression235=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression235.Tree);
				DebugLocation(230, 26);
				char_literal236=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_conditionalWithColon1286); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal236_tree = (object)adaptor.Create(char_literal236);
				adaptor.AddChild(root_0, char_literal236_tree);
				}
				DebugLocation(230, 30);
				char_literal237=(IToken)Match(input,Colon,Follow._Colon_in_conditionalWithColon1288); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal237_tree = (object)adaptor.Create(char_literal237);
				adaptor.AddChild(root_0, char_literal237_tree);
				}
				DebugLocation(230, 34);
				// Php.g:230:34: ( statement )*
				try { DebugEnterSubRule(58);
				while (true)
				{
					int alt58=2;
					try { DebugEnterDecision(58, false);
					try
					{
						alt58 = dfa58.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(58); }
					switch ( alt58 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:230:34: statement
						{
						DebugLocation(230, 34);
						PushFollow(Follow._statement_in_conditionalWithColon1290);
						statement238=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement238.Tree);

						}
						break;

					default:
						goto loop58;
					}
				}

				loop58:
					;

				} finally { DebugExitSubRule(58); }

				DebugLocation(230, 45);
				// Php.g:230:45: ( conditionalWithColon )?
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				int LA59_1 = input.LA(1);

				if ((LA59_1==ElseIf))
				{
					int LA59_2 = input.LA(2);

					if ((EvaluatePredicate(synpred94_Php_fragment)))
					{
						alt59 = 1;
					}
				}
				else if ((LA59_1==Else))
				{
					int LA59_2 = input.LA(2);

					if ((EvaluatePredicate(synpred94_Php_fragment)))
					{
						alt59 = 1;
					}
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:230:45: conditionalWithColon
					{
					DebugLocation(230, 45);
					PushFollow(Follow._conditionalWithColon_in_conditionalWithColon1293);
					conditionalWithColon239=conditionalWithColon();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalWithColon239.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:231:4: Else ':' ( statement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(231, 4);
				Else240=(IToken)Match(input,Else,Follow._Else_in_conditionalWithColon1299); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else240_tree = (object)adaptor.Create(Else240);
				adaptor.AddChild(root_0, Else240_tree);
				}
				DebugLocation(231, 9);
				char_literal241=(IToken)Match(input,Colon,Follow._Colon_in_conditionalWithColon1301); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal241_tree = (object)adaptor.Create(char_literal241);
				adaptor.AddChild(root_0, char_literal241_tree);
				}
				DebugLocation(231, 13);
				// Php.g:231:13: ( statement )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					try
					{
						alt60 = dfa60.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:231:13: statement
						{
						DebugLocation(231, 13);
						PushFollow(Follow._statement_in_conditionalWithColon1303);
						statement242=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement242.Tree);

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalWithColon", 25);
			LeaveRule("conditionalWithColon", 25);
			LeaveRule_conditionalWithColon();
			if (state.backtracking > 0) { Memoize(input, 25, conditionalWithColon_StartIndex); }

		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalWithColon"); }
		return retval;

	}
	// $ANTLR end "conditionalWithColon"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// Php.g:234:1: forInit : ( commaList )? ';' ;
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<object, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 26);
		TraceIn("forInit", 26);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal244 = default(IToken);
		AstParserRuleReturnScope<object, IToken> commaList243 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal244_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(234, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// Php.g:235:2: ( ( commaList )? ';' )
			DebugEnterAlt(1);
			// Php.g:235:4: ( commaList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(235, 4);
			// Php.g:235:4: ( commaList )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if (((LA62_1>=Abstract && LA62_1<=And)||(LA62_1>=ArrayType && LA62_1<=As)||LA62_1==Bang||(LA62_1>=BoolType && LA62_1<=Class)||LA62_1==Clone||(LA62_1>=Const && LA62_1<=Continue)||(LA62_1>=Default && LA62_1<=Die)||LA62_1==Do||(LA62_1>=DoubleQuotedString && LA62_1<=Empty)||(LA62_1>=Eval && LA62_1<=Exit)||(LA62_1>=Extends && LA62_1<=Foreach)||(LA62_1>=Function && LA62_1<=HaltCompiler)||LA62_1==HereDoc||(LA62_1>=If && LA62_1<=IncrementOperator)||(LA62_1>=Instanceof && LA62_1<=List)||LA62_1==Minus||(LA62_1>=Namespace && LA62_1<=Null)||LA62_1==ObjectType||(LA62_1>=OpenRoundBracket && LA62_1<=Or)||(LA62_1>=Plus && LA62_1<=Public)||(LA62_1>=Real && LA62_1<=Return)||LA62_1==SingleQuotedString||(LA62_1>=Static && LA62_1<=Try)||LA62_1==UnquotedString||(LA62_1>=UnsetType && LA62_1<=While)||(LA62_1>=Xor && LA62_1<=131)))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:235:4: commaList
				{
				DebugLocation(235, 4);
				PushFollow(Follow._commaList_in_forInit1315);
				commaList243=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList243.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(235, 15);
			char_literal244=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forInit1318); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal244_tree = (object)adaptor.Create(char_literal244);
			adaptor.AddChild(root_0, char_literal244_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 26);
			LeaveRule("forInit", 26);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 26, forInit_StartIndex); }

		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// Php.g:238:1: forCondition : ( commaList )? ';' ;
	[GrammarRule("forCondition")]
	private AstParserRuleReturnScope<object, IToken> forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 27);
		TraceIn("forCondition", 27);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forCondition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal246 = default(IToken);
		AstParserRuleReturnScope<object, IToken> commaList245 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal246_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(238, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// Php.g:239:2: ( ( commaList )? ';' )
			DebugEnterAlt(1);
			// Php.g:239:4: ( commaList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(239, 4);
			// Php.g:239:4: ( commaList )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if (((LA63_1>=Abstract && LA63_1<=And)||(LA63_1>=ArrayType && LA63_1<=As)||LA63_1==Bang||(LA63_1>=BoolType && LA63_1<=Class)||LA63_1==Clone||(LA63_1>=Const && LA63_1<=Continue)||(LA63_1>=Default && LA63_1<=Die)||LA63_1==Do||(LA63_1>=DoubleQuotedString && LA63_1<=Empty)||(LA63_1>=Eval && LA63_1<=Exit)||(LA63_1>=Extends && LA63_1<=Foreach)||(LA63_1>=Function && LA63_1<=HaltCompiler)||LA63_1==HereDoc||(LA63_1>=If && LA63_1<=IncrementOperator)||(LA63_1>=Instanceof && LA63_1<=List)||LA63_1==Minus||(LA63_1>=Namespace && LA63_1<=Null)||LA63_1==ObjectType||(LA63_1>=OpenRoundBracket && LA63_1<=Or)||(LA63_1>=Plus && LA63_1<=Public)||(LA63_1>=Real && LA63_1<=Return)||LA63_1==SingleQuotedString||(LA63_1>=Static && LA63_1<=Try)||LA63_1==UnquotedString||(LA63_1>=UnsetType && LA63_1<=While)||(LA63_1>=Xor && LA63_1<=131)))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:239:4: commaList
				{
				DebugLocation(239, 4);
				PushFollow(Follow._commaList_in_forCondition1329);
				commaList245=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList245.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(239, 15);
			char_literal246=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forCondition1332); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal246_tree = (object)adaptor.Create(char_literal246);
			adaptor.AddChild(root_0, char_literal246_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forCondition", 27);
			LeaveRule("forCondition", 27);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 27, forCondition_StartIndex); }

		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return retval;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdate();
	partial void LeaveRule_forUpdate();
	// $ANTLR start "forUpdate"
	// Php.g:242:1: forUpdate : ( commaList )? ;
	[GrammarRule("forUpdate")]
	private AstParserRuleReturnScope<object, IToken> forUpdate()
	{
		EnterRule_forUpdate();
		EnterRule("forUpdate", 28);
		TraceIn("forUpdate", 28);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forUpdate_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> commaList247 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "forUpdate");
		DebugLocation(242, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// Php.g:243:2: ( ( commaList )? )
			DebugEnterAlt(1);
			// Php.g:243:4: ( commaList )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(243, 4);
			// Php.g:243:4: ( commaList )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if (((LA64_1>=Abstract && LA64_1<=And)||(LA64_1>=ArrayType && LA64_1<=As)||LA64_1==Bang||(LA64_1>=BoolType && LA64_1<=Class)||LA64_1==Clone||(LA64_1>=Const && LA64_1<=Continue)||(LA64_1>=Default && LA64_1<=Die)||LA64_1==Do||(LA64_1>=DoubleQuotedString && LA64_1<=Empty)||(LA64_1>=Eval && LA64_1<=Exit)||(LA64_1>=Extends && LA64_1<=Foreach)||(LA64_1>=Function && LA64_1<=HaltCompiler)||LA64_1==HereDoc||(LA64_1>=If && LA64_1<=IncrementOperator)||(LA64_1>=Instanceof && LA64_1<=List)||LA64_1==Minus||(LA64_1>=Namespace && LA64_1<=Null)||LA64_1==ObjectType||(LA64_1>=OpenRoundBracket && LA64_1<=Or)||(LA64_1>=Plus && LA64_1<=Public)||(LA64_1>=Real && LA64_1<=Return)||LA64_1==SingleQuotedString||(LA64_1>=Static && LA64_1<=Try)||LA64_1==UnquotedString||(LA64_1>=UnsetType && LA64_1<=While)||(LA64_1>=Xor && LA64_1<=131)))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:243:4: commaList
				{
				DebugLocation(243, 4);
				PushFollow(Follow._commaList_in_forUpdate1344);
				commaList247=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList247.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forUpdate", 28);
			LeaveRule("forUpdate", 28);
			LeaveRule_forUpdate();
			if (state.backtracking > 0) { Memoize(input, 28, forUpdate_StartIndex); }

		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "forUpdate"); }
		return retval;

	}
	// $ANTLR end "forUpdate"

	partial void EnterRule_cases();
	partial void LeaveRule_cases();
	// $ANTLR start "cases"
	// Php.g:246:1: cases : ( ( casestatement )* defaultcase ( casestatement )* | ( casestatement )+ );
	[GrammarRule("cases")]
	private AstParserRuleReturnScope<object, IToken> cases()
	{
		EnterRule_cases();
		EnterRule("cases", 29);
		TraceIn("cases", 29);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cases_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> casestatement248 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> defaultcase249 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> casestatement250 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> casestatement251 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "cases");
		DebugLocation(246, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// Php.g:247:2: ( ( casestatement )* defaultcase ( casestatement )* | ( casestatement )+ )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_1 = input.LA(1);

			if ((LA68_1==Case))
			{
				int LA68_2 = input.LA(2);

				if ((EvaluatePredicate(synpred102_Php_fragment)))
				{
					alt68 = 1;
				}
				else if ((true))
				{
					alt68 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA68_1==Default))
			{
				alt68 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:247:4: ( casestatement )* defaultcase ( casestatement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(247, 4);
				// Php.g:247:4: ( casestatement )*
				try { DebugEnterSubRule(65);
				while (true)
				{
					int alt65=2;
					try { DebugEnterDecision(65, false);
					int LA65_1 = input.LA(1);

					if ((LA65_1==Case))
					{
						alt65 = 1;
					}


					} finally { DebugExitDecision(65); }
					switch ( alt65 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:247:4: casestatement
						{
						DebugLocation(247, 4);
						PushFollow(Follow._casestatement_in_cases1356);
						casestatement248=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement248.Tree);

						}
						break;

					default:
						goto loop65;
					}
				}

				loop65:
					;

				} finally { DebugExitSubRule(65); }

				DebugLocation(247, 19);
				PushFollow(Follow._defaultcase_in_cases1359);
				defaultcase249=defaultcase();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defaultcase249.Tree);
				DebugLocation(247, 31);
				// Php.g:247:31: ( casestatement )*
				try { DebugEnterSubRule(66);
				while (true)
				{
					int alt66=2;
					try { DebugEnterDecision(66, false);
					int LA66_1 = input.LA(1);

					if ((LA66_1==Case))
					{
						alt66 = 1;
					}


					} finally { DebugExitDecision(66); }
					switch ( alt66 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:247:31: casestatement
						{
						DebugLocation(247, 31);
						PushFollow(Follow._casestatement_in_cases1361);
						casestatement250=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement250.Tree);

						}
						break;

					default:
						goto loop66;
					}
				}

				loop66:
					;

				} finally { DebugExitSubRule(66); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:248:4: ( casestatement )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(248, 4);
				// Php.g:248:4: ( casestatement )+
				int cnt67=0;
				try { DebugEnterSubRule(67);
				while (true)
				{
					int alt67=2;
					try { DebugEnterDecision(67, false);
					int LA67_1 = input.LA(1);

					if ((LA67_1==Case))
					{
						alt67 = 1;
					}


					} finally { DebugExitDecision(67); }
					switch (alt67)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:248:4: casestatement
						{
						DebugLocation(248, 4);
						PushFollow(Follow._casestatement_in_cases1367);
						casestatement251=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement251.Tree);

						}
						break;

					default:
						if (cnt67 >= 1)
							goto loop67;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee67 = new EarlyExitException( 67, input );
						DebugRecognitionException(eee67);
						throw eee67;
					}
					cnt67++;
				}
				loop67:
					;

				} finally { DebugExitSubRule(67); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cases", 29);
			LeaveRule("cases", 29);
			LeaveRule_cases();
			if (state.backtracking > 0) { Memoize(input, 29, cases_StartIndex); }

		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "cases"); }
		return retval;

	}
	// $ANTLR end "cases"

	partial void EnterRule_casestatement();
	partial void LeaveRule_casestatement();
	// $ANTLR start "casestatement"
	// Php.g:251:1: casestatement : Case expression ( ':' | ';' ) ( statement )* ;
	[GrammarRule("casestatement")]
	private AstParserRuleReturnScope<object, IToken> casestatement()
	{
		EnterRule_casestatement();
		EnterRule("casestatement", 30);
		TraceIn("casestatement", 30);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int casestatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Case252 = default(IToken);
		IToken set254 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression253 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement255 = default(AstParserRuleReturnScope<object, IToken>);

		object Case252_tree = default(object);
		object set254_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "casestatement");
		DebugLocation(251, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// Php.g:252:2: ( Case expression ( ':' | ';' ) ( statement )* )
			DebugEnterAlt(1);
			// Php.g:252:4: Case expression ( ':' | ';' ) ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(252, 4);
			Case252=(IToken)Match(input,Case,Follow._Case_in_casestatement1379); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Case252_tree = (object)adaptor.Create(Case252);
			adaptor.AddChild(root_0, Case252_tree);
			}
			DebugLocation(252, 9);
			PushFollow(Follow._expression_in_casestatement1381);
			expression253=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression253.Tree);
			DebugLocation(252, 20);

			set254=(IToken)input.LT(1);
			if (input.LA(1)==Colon||input.LA(1)==SemiColon)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set254));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(252, 30);
			// Php.g:252:30: ( statement )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, false);
				switch (input.LA(1))
				{
				case Default:
					{
					int LA69_2 = input.LA(2);

					if ((EvaluatePredicate(synpred105_Php_fragment)))
					{
						alt69 = 1;
					}


					}
					break;
				case Case:
					{
					int LA69_2 = input.LA(2);

					if ((EvaluatePredicate(synpred105_Php_fragment)))
					{
						alt69 = 1;
					}


					}
					break;
				case Abstract:
				case Ampersand:
				case And:
				case ArrayType:
				case As:
				case Bang:
				case BodyString:
				case BoolType:
				case BooleanType:
				case Break:
				case Catch:
				case Class:
				case Clone:
				case Const:
				case Continue:
				case Die:
				case Do:
				case DoubleQuotedString:
				case DoubleType:
				case Echo:
				case Else:
				case ElseIf:
				case Empty:
				case Eval:
				case Exit:
				case Extends:
				case False:
				case Final:
				case Finally:
				case FloatType:
				case For:
				case Foreach:
				case Function:
				case Global:
				case Goto:
				case HaltCompiler:
				case HereDoc:
				case If:
				case Implements:
				case Include:
				case IncludeOnce:
				case IncrementOperator:
				case Instanceof:
				case IntType:
				case Integer:
				case IntegerType:
				case Interface:
				case Isset:
				case List:
				case Minus:
				case Namespace:
				case New:
				case Null:
				case ObjectType:
				case OpenCurlyBracket:
				case OpenRoundBracket:
				case OpenSquareBracket:
				case Or:
				case Plus:
				case Print:
				case Private:
				case Protected:
				case Public:
				case Real:
				case RealType:
				case Require:
				case RequireOnce:
				case Return:
				case SemiColon:
				case SingleQuotedString:
				case Static:
				case StringType:
				case SuppressWarnings:
				case Switch:
				case Throw:
				case Tilde:
				case True:
				case Try:
				case UnquotedString:
				case UnsetType:
				case Use:
				case Var:
				case VariableName:
				case While:
				case Xor:
				case 130:
				case 131:
					{
					alt69 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:252:30: statement
					{
					DebugLocation(252, 30);
					PushFollow(Follow._statement_in_casestatement1389);
					statement255=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement255.Tree);

					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("casestatement", 30);
			LeaveRule("casestatement", 30);
			LeaveRule_casestatement();
			if (state.backtracking > 0) { Memoize(input, 30, casestatement_StartIndex); }

		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "casestatement"); }
		return retval;

	}
	// $ANTLR end "casestatement"

	partial void EnterRule_defaultcase();
	partial void LeaveRule_defaultcase();
	// $ANTLR start "defaultcase"
	// Php.g:255:1: defaultcase : ( Default ( ':' | ';' ) ( statement )* ) ;
	[GrammarRule("defaultcase")]
	private AstParserRuleReturnScope<object, IToken> defaultcase()
	{
		EnterRule_defaultcase();
		EnterRule("defaultcase", 31);
		TraceIn("defaultcase", 31);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int defaultcase_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Default256 = default(IToken);
		IToken set257 = default(IToken);
		AstParserRuleReturnScope<object, IToken> statement258 = default(AstParserRuleReturnScope<object, IToken>);

		object Default256_tree = default(object);
		object set257_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "defaultcase");
		DebugLocation(255, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// Php.g:256:2: ( ( Default ( ':' | ';' ) ( statement )* ) )
			DebugEnterAlt(1);
			// Php.g:256:4: ( Default ( ':' | ';' ) ( statement )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(256, 4);
			// Php.g:256:4: ( Default ( ':' | ';' ) ( statement )* )
			DebugEnterAlt(1);
			// Php.g:256:5: Default ( ':' | ';' ) ( statement )*
			{
			DebugLocation(256, 5);
			Default256=(IToken)Match(input,Default,Follow._Default_in_defaultcase1403); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Default256_tree = (object)adaptor.Create(Default256);
			adaptor.AddChild(root_0, Default256_tree);
			}
			DebugLocation(256, 13);

			set257=(IToken)input.LT(1);
			if (input.LA(1)==Colon||input.LA(1)==SemiColon)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set257));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(256, 23);
			// Php.g:256:23: ( statement )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==Case))
				{
					int LA70_2 = input.LA(2);

					if ((EvaluatePredicate(synpred107_Php_fragment)))
					{
						alt70 = 1;
					}


				}
				else if (((LA70_1>=Abstract && LA70_1<=And)||(LA70_1>=ArrayType && LA70_1<=As)||(LA70_1>=Bang && LA70_1<=BodyString)||(LA70_1>=BoolType && LA70_1<=Break)||(LA70_1>=Catch && LA70_1<=Class)||LA70_1==Clone||(LA70_1>=Const && LA70_1<=Continue)||(LA70_1>=Default && LA70_1<=Die)||LA70_1==Do||(LA70_1>=DoubleQuotedString && LA70_1<=Empty)||(LA70_1>=Eval && LA70_1<=Exit)||(LA70_1>=Extends && LA70_1<=Foreach)||(LA70_1>=Function && LA70_1<=HaltCompiler)||LA70_1==HereDoc||(LA70_1>=If && LA70_1<=IncrementOperator)||(LA70_1>=Instanceof && LA70_1<=List)||LA70_1==Minus||(LA70_1>=Namespace && LA70_1<=Null)||LA70_1==ObjectType||(LA70_1>=OpenCurlyBracket && LA70_1<=Or)||(LA70_1>=Plus && LA70_1<=Public)||(LA70_1>=Real && LA70_1<=SemiColon)||LA70_1==SingleQuotedString||(LA70_1>=Static && LA70_1<=Try)||LA70_1==UnquotedString||(LA70_1>=UnsetType && LA70_1<=While)||(LA70_1>=Xor && LA70_1<=131)))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:256:23: statement
					{
					DebugLocation(256, 23);
					PushFollow(Follow._statement_in_defaultcase1411);
					statement258=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement258.Tree);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defaultcase", 31);
			LeaveRule("defaultcase", 31);
			LeaveRule_defaultcase();
			if (state.backtracking > 0) { Memoize(input, 31, defaultcase_StartIndex); }

		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultcase"); }
		return retval;

	}
	// $ANTLR end "defaultcase"

	partial void EnterRule_anonymousFunctionDefinition();
	partial void LeaveRule_anonymousFunctionDefinition();
	// $ANTLR start "anonymousFunctionDefinition"
	// Php.g:259:1: anonymousFunctionDefinition : Function parametersDefinition ( Use parametersDefinition )? bracketedBlock ;
	[GrammarRule("anonymousFunctionDefinition")]
	private AstParserRuleReturnScope<object, IToken> anonymousFunctionDefinition()
	{
		EnterRule_anonymousFunctionDefinition();
		EnterRule("anonymousFunctionDefinition", 32);
		TraceIn("anonymousFunctionDefinition", 32);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int anonymousFunctionDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function259 = default(IToken);
		IToken Use261 = default(IToken);
		AstParserRuleReturnScope<object, IToken> parametersDefinition260 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parametersDefinition262 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bracketedBlock263 = default(AstParserRuleReturnScope<object, IToken>);

		object Function259_tree = default(object);
		object Use261_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymousFunctionDefinition");
		DebugLocation(259, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// Php.g:260:2: ( Function parametersDefinition ( Use parametersDefinition )? bracketedBlock )
			DebugEnterAlt(1);
			// Php.g:260:4: Function parametersDefinition ( Use parametersDefinition )? bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(260, 4);
			Function259=(IToken)Match(input,Function,Follow._Function_in_anonymousFunctionDefinition1424); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Function259_tree = (object)adaptor.Create(Function259);
			adaptor.AddChild(root_0, Function259_tree);
			}
			DebugLocation(260, 13);
			PushFollow(Follow._parametersDefinition_in_anonymousFunctionDefinition1426);
			parametersDefinition260=parametersDefinition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition260.Tree);
			DebugLocation(260, 34);
			// Php.g:260:34: ( Use parametersDefinition )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_1 = input.LA(1);

			if ((LA71_1==Use))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:260:35: Use parametersDefinition
				{
				DebugLocation(260, 35);
				Use261=(IToken)Match(input,Use,Follow._Use_in_anonymousFunctionDefinition1429); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Use261_tree = (object)adaptor.Create(Use261);
				adaptor.AddChild(root_0, Use261_tree);
				}
				DebugLocation(260, 39);
				PushFollow(Follow._parametersDefinition_in_anonymousFunctionDefinition1431);
				parametersDefinition262=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition262.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(260, 62);
			PushFollow(Follow._bracketedBlock_in_anonymousFunctionDefinition1435);
			bracketedBlock263=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock263.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymousFunctionDefinition", 32);
			LeaveRule("anonymousFunctionDefinition", 32);
			LeaveRule_anonymousFunctionDefinition();
			if (state.backtracking > 0) { Memoize(input, 32, anonymousFunctionDefinition_StartIndex); }

		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymousFunctionDefinition"); }
		return retval;

	}
	// $ANTLR end "anonymousFunctionDefinition"

	partial void EnterRule_functionDefinition();
	partial void LeaveRule_functionDefinition();
	// $ANTLR start "functionDefinition"
	// Php.g:263:1: functionDefinition : Function ( '&' )? qualifiedName parametersDefinition bracketedBlock ;
	[GrammarRule("functionDefinition")]
	private AstParserRuleReturnScope<object, IToken> functionDefinition()
	{
		EnterRule_functionDefinition();
		EnterRule("functionDefinition", 33);
		TraceIn("functionDefinition", 33);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int functionDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function264 = default(IToken);
		IToken char_literal265 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName266 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parametersDefinition267 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bracketedBlock268 = default(AstParserRuleReturnScope<object, IToken>);

		object Function264_tree = default(object);
		object char_literal265_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionDefinition");
		DebugLocation(263, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// Php.g:264:2: ( Function ( '&' )? qualifiedName parametersDefinition bracketedBlock )
			DebugEnterAlt(1);
			// Php.g:264:4: Function ( '&' )? qualifiedName parametersDefinition bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(264, 4);
			Function264=(IToken)Match(input,Function,Follow._Function_in_functionDefinition1446); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Function264_tree = (object)adaptor.Create(Function264);
			adaptor.AddChild(root_0, Function264_tree);
			}
			DebugLocation(264, 13);
			// Php.g:264:13: ( '&' )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==Ampersand))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:264:13: '&'
				{
				DebugLocation(264, 13);
				char_literal265=(IToken)Match(input,Ampersand,Follow._Ampersand_in_functionDefinition1448); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal265_tree = (object)adaptor.Create(char_literal265);
				adaptor.AddChild(root_0, char_literal265_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(264, 18);
			PushFollow(Follow._qualifiedName_in_functionDefinition1451);
			qualifiedName266=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName266.Tree);
			DebugLocation(264, 32);
			PushFollow(Follow._parametersDefinition_in_functionDefinition1453);
			parametersDefinition267=parametersDefinition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition267.Tree);
			DebugLocation(264, 53);
			PushFollow(Follow._bracketedBlock_in_functionDefinition1455);
			bracketedBlock268=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock268.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDefinition", 33);
			LeaveRule("functionDefinition", 33);
			LeaveRule_functionDefinition();
			if (state.backtracking > 0) { Memoize(input, 33, functionDefinition_StartIndex); }

		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDefinition"); }
		return retval;

	}
	// $ANTLR end "functionDefinition"

	partial void EnterRule_parametersDefinition();
	partial void LeaveRule_parametersDefinition();
	// $ANTLR start "parametersDefinition"
	// Php.g:267:1: parametersDefinition : OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket ;
	[GrammarRule("parametersDefinition")]
	private AstParserRuleReturnScope<object, IToken> parametersDefinition()
	{
		EnterRule_parametersDefinition();
		EnterRule("parametersDefinition", 34);
		TraceIn("parametersDefinition", 34);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int parametersDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket269 = default(IToken);
		IToken Comma271 = default(IToken);
		IToken CloseRoundBracket273 = default(IToken);
		AstParserRuleReturnScope<object, IToken> paramDef270 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> paramDef272 = default(AstParserRuleReturnScope<object, IToken>);

		object OpenRoundBracket269_tree = default(object);
		object Comma271_tree = default(object);
		object CloseRoundBracket273_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parametersDefinition");
		DebugLocation(267, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// Php.g:268:2: ( OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// Php.g:268:4: OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(268, 4);
			OpenRoundBracket269=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_parametersDefinition1466); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenRoundBracket269_tree = (object)adaptor.Create(OpenRoundBracket269);
			adaptor.AddChild(root_0, OpenRoundBracket269_tree);
			}
			DebugLocation(268, 21);
			// Php.g:268:21: ( paramDef ( Comma paramDef )* )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_1 = input.LA(1);

			if (((LA74_1>=Abstract && LA74_1<=And)||(LA74_1>=ArrayType && LA74_1<=As)||(LA74_1>=BoolType && LA74_1<=Class)||LA74_1==Clone||(LA74_1>=Const && LA74_1<=Continue)||(LA74_1>=Default && LA74_1<=Die)||LA74_1==Do||(LA74_1>=DoubleType && LA74_1<=Empty)||(LA74_1>=Eval && LA74_1<=Exit)||(LA74_1>=Extends && LA74_1<=Foreach)||(LA74_1>=Function && LA74_1<=HaltCompiler)||(LA74_1>=If && LA74_1<=IncludeOnce)||(LA74_1>=Instanceof && LA74_1<=IntType)||(LA74_1>=IntegerType && LA74_1<=List)||(LA74_1>=Namespace && LA74_1<=Null)||LA74_1==ObjectType||LA74_1==Or||(LA74_1>=Print && LA74_1<=Public)||(LA74_1>=RealType && LA74_1<=Return)||(LA74_1>=Static && LA74_1<=StringType)||(LA74_1>=Switch && LA74_1<=Throw)||(LA74_1>=True && LA74_1<=Try)||LA74_1==UnquotedString||(LA74_1>=UnsetType && LA74_1<=While)||LA74_1==Xor||LA74_1==131))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:268:22: paramDef ( Comma paramDef )*
				{
				DebugLocation(268, 22);
				PushFollow(Follow._paramDef_in_parametersDefinition1469);
				paramDef270=paramDef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, paramDef270.Tree);
				DebugLocation(268, 31);
				// Php.g:268:31: ( Comma paramDef )*
				try { DebugEnterSubRule(73);
				while (true)
				{
					int alt73=2;
					try { DebugEnterDecision(73, false);
					int LA73_1 = input.LA(1);

					if ((LA73_1==Comma))
					{
						alt73 = 1;
					}


					} finally { DebugExitDecision(73); }
					switch ( alt73 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:268:32: Comma paramDef
						{
						DebugLocation(268, 32);
						Comma271=(IToken)Match(input,Comma,Follow._Comma_in_parametersDefinition1472); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma271_tree = (object)adaptor.Create(Comma271);
						adaptor.AddChild(root_0, Comma271_tree);
						}
						DebugLocation(268, 38);
						PushFollow(Follow._paramDef_in_parametersDefinition1474);
						paramDef272=paramDef();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, paramDef272.Tree);

						}
						break;

					default:
						goto loop73;
					}
				}

				loop73:
					;

				} finally { DebugExitSubRule(73); }


				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(268, 51);
			CloseRoundBracket273=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_parametersDefinition1480); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseRoundBracket273_tree = (object)adaptor.Create(CloseRoundBracket273);
			adaptor.AddChild(root_0, CloseRoundBracket273_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parametersDefinition", 34);
			LeaveRule("parametersDefinition", 34);
			LeaveRule_parametersDefinition();
			if (state.backtracking > 0) { Memoize(input, 34, parametersDefinition_StartIndex); }

		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "parametersDefinition"); }
		return retval;

	}
	// $ANTLR end "parametersDefinition"

	partial void EnterRule_paramDef();
	partial void LeaveRule_paramDef();
	// $ANTLR start "paramDef"
	// Php.g:271:1: paramDef : ( qualifiedName | primitiveType )? paramName ( Equals atom )? ;
	[GrammarRule("paramDef")]
	private AstParserRuleReturnScope<object, IToken> paramDef()
	{
		EnterRule_paramDef();
		EnterRule("paramDef", 35);
		TraceIn("paramDef", 35);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int paramDef_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Equals277 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName274 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primitiveType275 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> paramName276 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom278 = default(AstParserRuleReturnScope<object, IToken>);

		object Equals277_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramDef");
		DebugLocation(271, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// Php.g:272:2: ( ( qualifiedName | primitiveType )? paramName ( Equals atom )? )
			DebugEnterAlt(1);
			// Php.g:272:4: ( qualifiedName | primitiveType )? paramName ( Equals atom )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(272, 4);
			// Php.g:272:4: ( qualifiedName | primitiveType )?
			int alt75=3;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			switch (input.LA(1))
			{
			case Abstract:
			case And:
			case As:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Final:
			case Finally:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case Null:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
			case 131:
				{
				alt75 = 1;
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case StringType:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred112_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred113_Php_fragment)))
				{
					alt75 = 2;
				}
				}
				break;
			case ArrayType:
			case UnsetType:
				{
				alt75 = 2;
				}
				break;
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:272:5: qualifiedName
				{
				DebugLocation(272, 5);
				PushFollow(Follow._qualifiedName_in_paramDef1492);
				qualifiedName274=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName274.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:272:21: primitiveType
				{
				DebugLocation(272, 21);
				PushFollow(Follow._primitiveType_in_paramDef1496);
				primitiveType275=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType275.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(272, 37);
			PushFollow(Follow._paramName_in_paramDef1500);
			paramName276=paramName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, paramName276.Tree);
			DebugLocation(272, 47);
			// Php.g:272:47: ( Equals atom )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_1 = input.LA(1);

			if ((LA76_1==Equals))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:272:48: Equals atom
				{
				DebugLocation(272, 48);
				Equals277=(IToken)Match(input,Equals,Follow._Equals_in_paramDef1503); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals277_tree = (object)adaptor.Create(Equals277);
				adaptor.AddChild(root_0, Equals277_tree);
				}
				DebugLocation(272, 55);
				PushFollow(Follow._atom_in_paramDef1505);
				atom278=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom278.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramDef", 35);
			LeaveRule("paramDef", 35);
			LeaveRule_paramDef();
			if (state.backtracking > 0) { Memoize(input, 35, paramDef_StartIndex); }

		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "paramDef"); }
		return retval;

	}
	// $ANTLR end "paramDef"

	partial void EnterRule_paramName();
	partial void LeaveRule_paramName();
	// $ANTLR start "paramName"
	// Php.g:275:1: paramName : ( VariableName | Ampersand VariableName );
	[GrammarRule("paramName")]
	private AstParserRuleReturnScope<object, IToken> paramName()
	{
		EnterRule_paramName();
		EnterRule("paramName", 36);
		TraceIn("paramName", 36);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int paramName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName279 = default(IToken);
		IToken Ampersand280 = default(IToken);
		IToken VariableName281 = default(IToken);

		object VariableName279_tree = default(object);
		object Ampersand280_tree = default(object);
		object VariableName281_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramName");
		DebugLocation(275, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// Php.g:276:2: ( VariableName | Ampersand VariableName )
			int alt77=2;
			try { DebugEnterDecision(77, false);
			int LA77_1 = input.LA(1);

			if ((LA77_1==VariableName))
			{
				alt77 = 1;
			}
			else if ((LA77_1==Ampersand))
			{
				alt77 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:276:4: VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(276, 4);
				VariableName279=(IToken)Match(input,VariableName,Follow._VariableName_in_paramName1518); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName279_tree = (object)adaptor.Create(VariableName279);
				adaptor.AddChild(root_0, VariableName279_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:277:4: Ampersand VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(277, 4);
				Ampersand280=(IToken)Match(input,Ampersand,Follow._Ampersand_in_paramName1523); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand280_tree = (object)adaptor.Create(Ampersand280);
				adaptor.AddChild(root_0, Ampersand280_tree);
				}
				DebugLocation(277, 14);
				VariableName281=(IToken)Match(input,VariableName,Follow._VariableName_in_paramName1525); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName281_tree = (object)adaptor.Create(VariableName281);
				adaptor.AddChild(root_0, VariableName281_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramName", 36);
			LeaveRule("paramName", 36);
			LeaveRule_paramName();
			if (state.backtracking > 0) { Memoize(input, 36, paramName_StartIndex); }

		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "paramName"); }
		return retval;

	}
	// $ANTLR end "paramName"

	partial void EnterRule_commaList();
	partial void LeaveRule_commaList();
	// $ANTLR start "commaList"
	// Php.g:280:1: commaList : expression ( ',' expression )* ;
	[GrammarRule("commaList")]
	private AstParserRuleReturnScope<object, IToken> commaList()
	{
		EnterRule_commaList();
		EnterRule("commaList", 37);
		TraceIn("commaList", 37);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int commaList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal283 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression282 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression284 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal283_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "commaList");
		DebugLocation(280, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// Php.g:281:2: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// Php.g:281:4: expression ( ',' expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(281, 4);
			PushFollow(Follow._expression_in_commaList1536);
			expression282=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression282.Tree);
			DebugLocation(281, 15);
			// Php.g:281:15: ( ',' expression )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==Comma))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:281:16: ',' expression
					{
					DebugLocation(281, 16);
					char_literal283=(IToken)Match(input,Comma,Follow._Comma_in_commaList1539); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal283_tree = (object)adaptor.Create(char_literal283);
					adaptor.AddChild(root_0, char_literal283_tree);
					}
					DebugLocation(281, 20);
					PushFollow(Follow._expression_in_commaList1541);
					expression284=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression284.Tree);

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commaList", 37);
			LeaveRule("commaList", 37);
			LeaveRule_commaList();
			if (state.backtracking > 0) { Memoize(input, 37, commaList_StartIndex); }

		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "commaList"); }
		return retval;

	}
	// $ANTLR end "commaList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// Php.g:284:1: expression : weakLogicalOr ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 38);
		TraceIn("expression", 38);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> weakLogicalOr285 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(284, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// Php.g:285:2: ( weakLogicalOr )
			DebugEnterAlt(1);
			// Php.g:285:4: weakLogicalOr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(285, 4);
			PushFollow(Follow._weakLogicalOr_in_expression1556);
			weakLogicalOr285=weakLogicalOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalOr285.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 38);
			LeaveRule("expression", 38);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 38, expression_StartIndex); }

		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_weakLogicalOr();
	partial void LeaveRule_weakLogicalOr();
	// $ANTLR start "weakLogicalOr"
	// Php.g:288:1: weakLogicalOr : weakLogicalXor ( Or weakLogicalXor )* ;
	[GrammarRule("weakLogicalOr")]
	private AstParserRuleReturnScope<object, IToken> weakLogicalOr()
	{
		EnterRule_weakLogicalOr();
		EnterRule("weakLogicalOr", 39);
		TraceIn("weakLogicalOr", 39);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int weakLogicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Or287 = default(IToken);
		AstParserRuleReturnScope<object, IToken> weakLogicalXor286 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> weakLogicalXor288 = default(AstParserRuleReturnScope<object, IToken>);

		object Or287_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalOr");
		DebugLocation(288, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// Php.g:289:2: ( weakLogicalXor ( Or weakLogicalXor )* )
			DebugEnterAlt(1);
			// Php.g:289:4: weakLogicalXor ( Or weakLogicalXor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(289, 4);
			PushFollow(Follow._weakLogicalXor_in_weakLogicalOr1567);
			weakLogicalXor286=weakLogicalXor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor286.Tree);
			DebugLocation(289, 19);
			// Php.g:289:19: ( Or weakLogicalXor )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_1 = input.LA(1);

				if ((LA79_1==Or))
				{
					int LA79_2 = input.LA(2);

					if ((EvaluatePredicate(synpred117_Php_fragment)))
					{
						alt79 = 1;
					}


				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:289:20: Or weakLogicalXor
					{
					DebugLocation(289, 20);
					Or287=(IToken)Match(input,Or,Follow._Or_in_weakLogicalOr1570); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Or287_tree = (object)adaptor.Create(Or287);
					adaptor.AddChild(root_0, Or287_tree);
					}
					DebugLocation(289, 23);
					PushFollow(Follow._weakLogicalXor_in_weakLogicalOr1572);
					weakLogicalXor288=weakLogicalXor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor288.Tree);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalOr", 39);
			LeaveRule("weakLogicalOr", 39);
			LeaveRule_weakLogicalOr();
			if (state.backtracking > 0) { Memoize(input, 39, weakLogicalOr_StartIndex); }

		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalOr"); }
		return retval;

	}
	// $ANTLR end "weakLogicalOr"

	partial void EnterRule_weakLogicalXor();
	partial void LeaveRule_weakLogicalXor();
	// $ANTLR start "weakLogicalXor"
	// Php.g:292:1: weakLogicalXor : weakLogicalAnd ( Xor weakLogicalAnd )* ;
	[GrammarRule("weakLogicalXor")]
	private AstParserRuleReturnScope<object, IToken> weakLogicalXor()
	{
		EnterRule_weakLogicalXor();
		EnterRule("weakLogicalXor", 40);
		TraceIn("weakLogicalXor", 40);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int weakLogicalXor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Xor290 = default(IToken);
		AstParserRuleReturnScope<object, IToken> weakLogicalAnd289 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> weakLogicalAnd291 = default(AstParserRuleReturnScope<object, IToken>);

		object Xor290_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalXor");
		DebugLocation(292, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// Php.g:293:2: ( weakLogicalAnd ( Xor weakLogicalAnd )* )
			DebugEnterAlt(1);
			// Php.g:293:4: weakLogicalAnd ( Xor weakLogicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(293, 4);
			PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor1585);
			weakLogicalAnd289=weakLogicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd289.Tree);
			DebugLocation(293, 19);
			// Php.g:293:19: ( Xor weakLogicalAnd )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_1 = input.LA(1);

				if ((LA80_1==Xor))
				{
					int LA80_2 = input.LA(2);

					if ((EvaluatePredicate(synpred118_Php_fragment)))
					{
						alt80 = 1;
					}


				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:293:20: Xor weakLogicalAnd
					{
					DebugLocation(293, 20);
					Xor290=(IToken)Match(input,Xor,Follow._Xor_in_weakLogicalXor1588); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Xor290_tree = (object)adaptor.Create(Xor290);
					adaptor.AddChild(root_0, Xor290_tree);
					}
					DebugLocation(293, 24);
					PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor1590);
					weakLogicalAnd291=weakLogicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd291.Tree);

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalXor", 40);
			LeaveRule("weakLogicalXor", 40);
			LeaveRule_weakLogicalXor();
			if (state.backtracking > 0) { Memoize(input, 40, weakLogicalXor_StartIndex); }

		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalXor"); }
		return retval;

	}
	// $ANTLR end "weakLogicalXor"

	partial void EnterRule_weakLogicalAnd();
	partial void LeaveRule_weakLogicalAnd();
	// $ANTLR start "weakLogicalAnd"
	// Php.g:296:1: weakLogicalAnd : assignment ( And assignment )* ;
	[GrammarRule("weakLogicalAnd")]
	private AstParserRuleReturnScope<object, IToken> weakLogicalAnd()
	{
		EnterRule_weakLogicalAnd();
		EnterRule("weakLogicalAnd", 41);
		TraceIn("weakLogicalAnd", 41);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int weakLogicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken And293 = default(IToken);
		AstParserRuleReturnScope<object, IToken> assignment292 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignment294 = default(AstParserRuleReturnScope<object, IToken>);

		object And293_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalAnd");
		DebugLocation(296, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// Php.g:297:2: ( assignment ( And assignment )* )
			DebugEnterAlt(1);
			// Php.g:297:4: assignment ( And assignment )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(297, 4);
			PushFollow(Follow._assignment_in_weakLogicalAnd1604);
			assignment292=assignment();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment292.Tree);
			DebugLocation(297, 15);
			// Php.g:297:15: ( And assignment )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_1 = input.LA(1);

				if ((LA81_1==And))
				{
					int LA81_2 = input.LA(2);

					if ((EvaluatePredicate(synpred119_Php_fragment)))
					{
						alt81 = 1;
					}


				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:297:16: And assignment
					{
					DebugLocation(297, 16);
					And293=(IToken)Match(input,And,Follow._And_in_weakLogicalAnd1607); if (state.failed) return retval;
					if (state.backtracking == 0) {
					And293_tree = (object)adaptor.Create(And293);
					adaptor.AddChild(root_0, And293_tree);
					}
					DebugLocation(297, 20);
					PushFollow(Follow._assignment_in_weakLogicalAnd1609);
					assignment294=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment294.Tree);

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalAnd", 41);
			LeaveRule("weakLogicalAnd", 41);
			LeaveRule_weakLogicalAnd();
			if (state.backtracking > 0) { Memoize(input, 41, weakLogicalAnd_StartIndex); }

		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalAnd"); }
		return retval;

	}
	// $ANTLR end "weakLogicalAnd"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// Php.g:300:1: assignment : ( listVariables ( Equals | AsignmentOperator ) assignment | ternary );
	[GrammarRule("assignment")]
	private AstParserRuleReturnScope<object, IToken> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 42);
		TraceIn("assignment", 42);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set296 = default(IToken);
		AstParserRuleReturnScope<object, IToken> listVariables295 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignment297 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> ternary298 = default(AstParserRuleReturnScope<object, IToken>);

		object set296_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(300, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// Php.g:301:2: ( listVariables ( Equals | AsignmentOperator ) assignment | ternary )
			int alt82=2;
			try { DebugEnterDecision(82, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case ArrayType:
			case Bang:
			case DoubleQuotedString:
			case HereDoc:
			case IncrementOperator:
			case Integer:
			case Minus:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case SingleQuotedString:
			case SuppressWarnings:
			case Tilde:
			case UnsetType:
				{
				alt82 = 2;
				}
				break;
			case Clone:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Namespace:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt82 = 1;
				}
				else if ((true))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:301:4: listVariables ( Equals | AsignmentOperator ) assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(301, 4);
				PushFollow(Follow._listVariables_in_assignment1622);
				listVariables295=listVariables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, listVariables295.Tree);
				DebugLocation(301, 18);

				set296=(IToken)input.LT(1);
				if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set296));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(301, 47);
				PushFollow(Follow._assignment_in_assignment1632);
				assignment297=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment297.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:302:4: ternary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(302, 4);
				PushFollow(Follow._ternary_in_assignment1637);
				ternary298=ternary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ternary298.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 42);
			LeaveRule("assignment", 42);
			LeaveRule_assignment();
			if (state.backtracking > 0) { Memoize(input, 42, assignment_StartIndex); }

		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_listVariables();
	partial void LeaveRule_listVariables();
	// $ANTLR start "listVariables"
	// Php.g:305:1: listVariables : ( List OpenRoundBracket ( name )? ( ',' ( name )? )* CloseRoundBracket | name );
	[GrammarRule("listVariables")]
	private AstParserRuleReturnScope<object, IToken> listVariables()
	{
		EnterRule_listVariables();
		EnterRule("listVariables", 43);
		TraceIn("listVariables", 43);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int listVariables_StartIndex = input.Index;

		object root_0 = default(object);

		IToken List299 = default(IToken);
		IToken OpenRoundBracket300 = default(IToken);
		IToken char_literal302 = default(IToken);
		IToken CloseRoundBracket304 = default(IToken);
		AstParserRuleReturnScope<object, IToken> name301 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name303 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name305 = default(AstParserRuleReturnScope<object, IToken>);

		object List299_tree = default(object);
		object OpenRoundBracket300_tree = default(object);
		object char_literal302_tree = default(object);
		object CloseRoundBracket304_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "listVariables");
		DebugLocation(305, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// Php.g:306:2: ( List OpenRoundBracket ( name )? ( ',' ( name )? )* CloseRoundBracket | name )
			int alt86=2;
			try { DebugEnterDecision(86, false);
			int LA86_1 = input.LA(1);

			if ((LA86_1==List))
			{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Php_fragment)))
				{
					alt86 = 1;
				}
				else if ((true))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA86_1==Abstract||LA86_1==And||LA86_1==As||(LA86_1>=BoolType && LA86_1<=Class)||LA86_1==Clone||(LA86_1>=Const && LA86_1<=Continue)||(LA86_1>=Default && LA86_1<=Die)||LA86_1==Do||(LA86_1>=DoubleType && LA86_1<=Empty)||(LA86_1>=Eval && LA86_1<=Exit)||(LA86_1>=Extends && LA86_1<=Foreach)||(LA86_1>=Function && LA86_1<=HaltCompiler)||(LA86_1>=If && LA86_1<=IncludeOnce)||(LA86_1>=Instanceof && LA86_1<=IntType)||(LA86_1>=IntegerType && LA86_1<=Isset)||(LA86_1>=Namespace && LA86_1<=Null)||LA86_1==ObjectType||LA86_1==Or||(LA86_1>=Print && LA86_1<=Public)||(LA86_1>=RealType && LA86_1<=Return)||(LA86_1>=Static && LA86_1<=StringType)||(LA86_1>=Switch && LA86_1<=Throw)||(LA86_1>=True && LA86_1<=Try)||LA86_1==UnquotedString||(LA86_1>=Use && LA86_1<=While)||(LA86_1>=Xor && LA86_1<=131)))
			{
				alt86 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 86, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:306:4: List OpenRoundBracket ( name )? ( ',' ( name )? )* CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(306, 4);
				List299=(IToken)Match(input,List,Follow._List_in_listVariables1648); if (state.failed) return retval;
				if (state.backtracking == 0) {
				List299_tree = (object)adaptor.Create(List299);
				adaptor.AddChild(root_0, List299_tree);
				}
				DebugLocation(306, 9);
				OpenRoundBracket300=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_listVariables1650); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket300_tree = (object)adaptor.Create(OpenRoundBracket300);
				adaptor.AddChild(root_0, OpenRoundBracket300_tree);
				}
				DebugLocation(306, 26);
				// Php.g:306:26: ( name )?
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				int LA83_1 = input.LA(1);

				if ((LA83_1==Abstract||LA83_1==And||LA83_1==As||(LA83_1>=BoolType && LA83_1<=Class)||LA83_1==Clone||(LA83_1>=Const && LA83_1<=Continue)||(LA83_1>=Default && LA83_1<=Die)||LA83_1==Do||(LA83_1>=DoubleType && LA83_1<=Empty)||(LA83_1>=Eval && LA83_1<=Exit)||(LA83_1>=Extends && LA83_1<=Foreach)||(LA83_1>=Function && LA83_1<=HaltCompiler)||(LA83_1>=If && LA83_1<=IncludeOnce)||(LA83_1>=Instanceof && LA83_1<=IntType)||(LA83_1>=IntegerType && LA83_1<=List)||(LA83_1>=Namespace && LA83_1<=Null)||LA83_1==ObjectType||LA83_1==Or||(LA83_1>=Print && LA83_1<=Public)||(LA83_1>=RealType && LA83_1<=Return)||(LA83_1>=Static && LA83_1<=StringType)||(LA83_1>=Switch && LA83_1<=Throw)||(LA83_1>=True && LA83_1<=Try)||LA83_1==UnquotedString||(LA83_1>=Use && LA83_1<=While)||(LA83_1>=Xor && LA83_1<=131)))
				{
					alt83 = 1;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:306:26: name
					{
					DebugLocation(306, 26);
					PushFollow(Follow._name_in_listVariables1652);
					name301=name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, name301.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(83); }

				DebugLocation(306, 32);
				// Php.g:306:32: ( ',' ( name )? )*
				try { DebugEnterSubRule(85);
				while (true)
				{
					int alt85=2;
					try { DebugEnterDecision(85, false);
					int LA85_1 = input.LA(1);

					if ((LA85_1==Comma))
					{
						alt85 = 1;
					}


					} finally { DebugExitDecision(85); }
					switch ( alt85 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:306:33: ',' ( name )?
						{
						DebugLocation(306, 33);
						char_literal302=(IToken)Match(input,Comma,Follow._Comma_in_listVariables1656); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal302_tree = (object)adaptor.Create(char_literal302);
						adaptor.AddChild(root_0, char_literal302_tree);
						}
						DebugLocation(306, 37);
						// Php.g:306:37: ( name )?
						int alt84=2;
						try { DebugEnterSubRule(84);
						try { DebugEnterDecision(84, false);
						int LA84_1 = input.LA(1);

						if ((LA84_1==Abstract||LA84_1==And||LA84_1==As||(LA84_1>=BoolType && LA84_1<=Class)||LA84_1==Clone||(LA84_1>=Const && LA84_1<=Continue)||(LA84_1>=Default && LA84_1<=Die)||LA84_1==Do||(LA84_1>=DoubleType && LA84_1<=Empty)||(LA84_1>=Eval && LA84_1<=Exit)||(LA84_1>=Extends && LA84_1<=Foreach)||(LA84_1>=Function && LA84_1<=HaltCompiler)||(LA84_1>=If && LA84_1<=IncludeOnce)||(LA84_1>=Instanceof && LA84_1<=IntType)||(LA84_1>=IntegerType && LA84_1<=List)||(LA84_1>=Namespace && LA84_1<=Null)||LA84_1==ObjectType||LA84_1==Or||(LA84_1>=Print && LA84_1<=Public)||(LA84_1>=RealType && LA84_1<=Return)||(LA84_1>=Static && LA84_1<=StringType)||(LA84_1>=Switch && LA84_1<=Throw)||(LA84_1>=True && LA84_1<=Try)||LA84_1==UnquotedString||(LA84_1>=Use && LA84_1<=While)||(LA84_1>=Xor && LA84_1<=131)))
						{
							alt84 = 1;
						}
						} finally { DebugExitDecision(84); }
						switch (alt84)
						{
						case 1:
							DebugEnterAlt(1);
							// Php.g:306:37: name
							{
							DebugLocation(306, 37);
							PushFollow(Follow._name_in_listVariables1658);
							name303=name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, name303.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(84); }


						}
						break;

					default:
						goto loop85;
					}
				}

				loop85:
					;

				} finally { DebugExitSubRule(85); }

				DebugLocation(306, 45);
				CloseRoundBracket304=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_listVariables1663); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket304_tree = (object)adaptor.Create(CloseRoundBracket304);
				adaptor.AddChild(root_0, CloseRoundBracket304_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:307:4: name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(307, 4);
				PushFollow(Follow._name_in_listVariables1669);
				name305=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name305.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("listVariables", 43);
			LeaveRule("listVariables", 43);
			LeaveRule_listVariables();
			if (state.backtracking > 0) { Memoize(input, 43, listVariables_StartIndex); }

		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "listVariables"); }
		return retval;

	}
	// $ANTLR end "listVariables"

	partial void EnterRule_ternary();
	partial void LeaveRule_ternary();
	// $ANTLR start "ternary"
	// Php.g:310:1: ternary : ( logicalOr QuestionMark ( expression )? Colon expression | logicalOr );
	[GrammarRule("ternary")]
	private AstParserRuleReturnScope<object, IToken> ternary()
	{
		EnterRule_ternary();
		EnterRule("ternary", 44);
		TraceIn("ternary", 44);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ternary_StartIndex = input.Index;

		object root_0 = default(object);

		IToken QuestionMark307 = default(IToken);
		IToken Colon309 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalOr306 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression308 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression310 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalOr311 = default(AstParserRuleReturnScope<object, IToken>);

		object QuestionMark307_tree = default(object);
		object Colon309_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ternary");
		DebugLocation(310, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// Php.g:311:2: ( logicalOr QuestionMark ( expression )? Colon expression | logicalOr )
			int alt88=2;
			try { DebugEnterDecision(88, false);
			switch (input.LA(1))
			{
			case Bang:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case List:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Namespace:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:311:4: logicalOr QuestionMark ( expression )? Colon expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(311, 4);
				PushFollow(Follow._logicalOr_in_ternary1680);
				logicalOr306=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr306.Tree);
				DebugLocation(311, 14);
				QuestionMark307=(IToken)Match(input,QuestionMark,Follow._QuestionMark_in_ternary1682); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QuestionMark307_tree = (object)adaptor.Create(QuestionMark307);
				adaptor.AddChild(root_0, QuestionMark307_tree);
				}
				DebugLocation(311, 27);
				// Php.g:311:27: ( expression )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if (((LA87_1>=Abstract && LA87_1<=And)||(LA87_1>=ArrayType && LA87_1<=As)||LA87_1==Bang||(LA87_1>=BoolType && LA87_1<=Class)||LA87_1==Clone||(LA87_1>=Const && LA87_1<=Continue)||(LA87_1>=Default && LA87_1<=Die)||LA87_1==Do||(LA87_1>=DoubleQuotedString && LA87_1<=Empty)||(LA87_1>=Eval && LA87_1<=Exit)||(LA87_1>=Extends && LA87_1<=Foreach)||(LA87_1>=Function && LA87_1<=HaltCompiler)||LA87_1==HereDoc||(LA87_1>=If && LA87_1<=IncrementOperator)||(LA87_1>=Instanceof && LA87_1<=List)||LA87_1==Minus||(LA87_1>=Namespace && LA87_1<=Null)||LA87_1==ObjectType||(LA87_1>=OpenRoundBracket && LA87_1<=Or)||(LA87_1>=Plus && LA87_1<=Public)||(LA87_1>=Real && LA87_1<=Return)||LA87_1==SingleQuotedString||(LA87_1>=Static && LA87_1<=Try)||LA87_1==UnquotedString||(LA87_1>=UnsetType && LA87_1<=While)||(LA87_1>=Xor && LA87_1<=131)))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:311:27: expression
					{
					DebugLocation(311, 27);
					PushFollow(Follow._expression_in_ternary1684);
					expression308=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression308.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(87); }

				DebugLocation(311, 39);
				Colon309=(IToken)Match(input,Colon,Follow._Colon_in_ternary1687); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Colon309_tree = (object)adaptor.Create(Colon309);
				adaptor.AddChild(root_0, Colon309_tree);
				}
				DebugLocation(311, 45);
				PushFollow(Follow._expression_in_ternary1689);
				expression310=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression310.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:312:4: logicalOr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(312, 4);
				PushFollow(Follow._logicalOr_in_ternary1694);
				logicalOr311=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr311.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ternary", 44);
			LeaveRule("ternary", 44);
			LeaveRule_ternary();
			if (state.backtracking > 0) { Memoize(input, 44, ternary_StartIndex); }

		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "ternary"); }
		return retval;

	}
	// $ANTLR end "ternary"

	partial void EnterRule_logicalOr();
	partial void LeaveRule_logicalOr();
	// $ANTLR start "logicalOr"
	// Php.g:315:1: logicalOr : logicalAnd ( LogicalOr logicalAnd )* ;
	[GrammarRule("logicalOr")]
	private AstParserRuleReturnScope<object, IToken> logicalOr()
	{
		EnterRule_logicalOr();
		EnterRule("logicalOr", 45);
		TraceIn("logicalOr", 45);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalOr313 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalAnd312 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalAnd314 = default(AstParserRuleReturnScope<object, IToken>);

		object LogicalOr313_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalOr");
		DebugLocation(315, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// Php.g:316:2: ( logicalAnd ( LogicalOr logicalAnd )* )
			DebugEnterAlt(1);
			// Php.g:316:4: logicalAnd ( LogicalOr logicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(316, 4);
			PushFollow(Follow._logicalAnd_in_logicalOr1706);
			logicalAnd312=logicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd312.Tree);
			DebugLocation(316, 15);
			// Php.g:316:15: ( LogicalOr logicalAnd )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_1 = input.LA(1);

				if ((LA89_1==LogicalOr))
				{
					int LA89_2 = input.LA(2);

					if ((EvaluatePredicate(synpred128_Php_fragment)))
					{
						alt89 = 1;
					}


				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:316:16: LogicalOr logicalAnd
					{
					DebugLocation(316, 16);
					LogicalOr313=(IToken)Match(input,LogicalOr,Follow._LogicalOr_in_logicalOr1709); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalOr313_tree = (object)adaptor.Create(LogicalOr313);
					adaptor.AddChild(root_0, LogicalOr313_tree);
					}
					DebugLocation(316, 26);
					PushFollow(Follow._logicalAnd_in_logicalOr1711);
					logicalAnd314=logicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd314.Tree);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOr", 45);
			LeaveRule("logicalOr", 45);
			LeaveRule_logicalOr();
			if (state.backtracking > 0) { Memoize(input, 45, logicalOr_StartIndex); }

		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOr"); }
		return retval;

	}
	// $ANTLR end "logicalOr"

	partial void EnterRule_logicalAnd();
	partial void LeaveRule_logicalAnd();
	// $ANTLR start "logicalAnd"
	// Php.g:319:1: logicalAnd : bitwiseOr ( LogicalAnd bitwiseOr )* ;
	[GrammarRule("logicalAnd")]
	private AstParserRuleReturnScope<object, IToken> logicalAnd()
	{
		EnterRule_logicalAnd();
		EnterRule("logicalAnd", 46);
		TraceIn("logicalAnd", 46);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalAnd316 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitwiseOr315 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseOr317 = default(AstParserRuleReturnScope<object, IToken>);

		object LogicalAnd316_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalAnd");
		DebugLocation(319, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// Php.g:320:2: ( bitwiseOr ( LogicalAnd bitwiseOr )* )
			DebugEnterAlt(1);
			// Php.g:320:4: bitwiseOr ( LogicalAnd bitwiseOr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(320, 4);
			PushFollow(Follow._bitwiseOr_in_logicalAnd1724);
			bitwiseOr315=bitwiseOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr315.Tree);
			DebugLocation(320, 14);
			// Php.g:320:14: ( LogicalAnd bitwiseOr )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==LogicalAnd))
				{
					int LA90_2 = input.LA(2);

					if ((EvaluatePredicate(synpred129_Php_fragment)))
					{
						alt90 = 1;
					}


				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:320:15: LogicalAnd bitwiseOr
					{
					DebugLocation(320, 15);
					LogicalAnd316=(IToken)Match(input,LogicalAnd,Follow._LogicalAnd_in_logicalAnd1727); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalAnd316_tree = (object)adaptor.Create(LogicalAnd316);
					adaptor.AddChild(root_0, LogicalAnd316_tree);
					}
					DebugLocation(320, 26);
					PushFollow(Follow._bitwiseOr_in_logicalAnd1729);
					bitwiseOr317=bitwiseOr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr317.Tree);

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAnd", 46);
			LeaveRule("logicalAnd", 46);
			LeaveRule_logicalAnd();
			if (state.backtracking > 0) { Memoize(input, 46, logicalAnd_StartIndex); }

		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAnd"); }
		return retval;

	}
	// $ANTLR end "logicalAnd"

	partial void EnterRule_bitwiseOr();
	partial void LeaveRule_bitwiseOr();
	// $ANTLR start "bitwiseOr"
	// Php.g:323:1: bitwiseOr : bitwiseXor ( Pipe bitwiseXor )* ;
	[GrammarRule("bitwiseOr")]
	private AstParserRuleReturnScope<object, IToken> bitwiseOr()
	{
		EnterRule_bitwiseOr();
		EnterRule("bitwiseOr", 47);
		TraceIn("bitwiseOr", 47);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Pipe319 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitwiseXor318 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseXor320 = default(AstParserRuleReturnScope<object, IToken>);

		object Pipe319_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseOr");
		DebugLocation(323, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// Php.g:324:2: ( bitwiseXor ( Pipe bitwiseXor )* )
			DebugEnterAlt(1);
			// Php.g:324:4: bitwiseXor ( Pipe bitwiseXor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(324, 4);
			PushFollow(Follow._bitwiseXor_in_bitwiseOr1743);
			bitwiseXor318=bitwiseXor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXor318.Tree);
			DebugLocation(324, 15);
			// Php.g:324:15: ( Pipe bitwiseXor )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_1 = input.LA(1);

				if ((LA91_1==Pipe))
				{
					int LA91_2 = input.LA(2);

					if ((EvaluatePredicate(synpred130_Php_fragment)))
					{
						alt91 = 1;
					}


				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:324:16: Pipe bitwiseXor
					{
					DebugLocation(324, 16);
					Pipe319=(IToken)Match(input,Pipe,Follow._Pipe_in_bitwiseOr1746); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Pipe319_tree = (object)adaptor.Create(Pipe319);
					adaptor.AddChild(root_0, Pipe319_tree);
					}
					DebugLocation(324, 21);
					PushFollow(Follow._bitwiseXor_in_bitwiseOr1748);
					bitwiseXor320=bitwiseXor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXor320.Tree);

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseOr", 47);
			LeaveRule("bitwiseOr", 47);
			LeaveRule_bitwiseOr();
			if (state.backtracking > 0) { Memoize(input, 47, bitwiseOr_StartIndex); }

		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOr"); }
		return retval;

	}
	// $ANTLR end "bitwiseOr"

	partial void EnterRule_bitwiseXor();
	partial void LeaveRule_bitwiseXor();
	// $ANTLR start "bitwiseXor"
	// Php.g:327:1: bitwiseXor : bitWiseAnd ( Hat bitWiseAnd )* ;
	[GrammarRule("bitwiseXor")]
	private AstParserRuleReturnScope<object, IToken> bitwiseXor()
	{
		EnterRule_bitwiseXor();
		EnterRule("bitwiseXor", 48);
		TraceIn("bitwiseXor", 48);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseXor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Hat322 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitWiseAnd321 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitWiseAnd323 = default(AstParserRuleReturnScope<object, IToken>);

		object Hat322_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseXor");
		DebugLocation(327, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// Php.g:328:2: ( bitWiseAnd ( Hat bitWiseAnd )* )
			DebugEnterAlt(1);
			// Php.g:328:4: bitWiseAnd ( Hat bitWiseAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(328, 4);
			PushFollow(Follow._bitWiseAnd_in_bitwiseXor1762);
			bitWiseAnd321=bitWiseAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd321.Tree);
			DebugLocation(328, 15);
			// Php.g:328:15: ( Hat bitWiseAnd )*
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=2;
				try { DebugEnterDecision(92, false);
				int LA92_1 = input.LA(1);

				if ((LA92_1==Hat))
				{
					int LA92_2 = input.LA(2);

					if ((EvaluatePredicate(synpred131_Php_fragment)))
					{
						alt92 = 1;
					}


				}


				} finally { DebugExitDecision(92); }
				switch ( alt92 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:328:16: Hat bitWiseAnd
					{
					DebugLocation(328, 16);
					Hat322=(IToken)Match(input,Hat,Follow._Hat_in_bitwiseXor1765); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Hat322_tree = (object)adaptor.Create(Hat322);
					adaptor.AddChild(root_0, Hat322_tree);
					}
					DebugLocation(328, 20);
					PushFollow(Follow._bitWiseAnd_in_bitwiseXor1767);
					bitWiseAnd323=bitWiseAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd323.Tree);

					}
					break;

				default:
					goto loop92;
				}
			}

			loop92:
				;

			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXor", 48);
			LeaveRule("bitwiseXor", 48);
			LeaveRule_bitwiseXor();
			if (state.backtracking > 0) { Memoize(input, 48, bitwiseXor_StartIndex); }

		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXor"); }
		return retval;

	}
	// $ANTLR end "bitwiseXor"

	partial void EnterRule_bitWiseAnd();
	partial void LeaveRule_bitWiseAnd();
	// $ANTLR start "bitWiseAnd"
	// Php.g:331:1: bitWiseAnd : equalityCheck ( Ampersand equalityCheck )* ;
	[GrammarRule("bitWiseAnd")]
	private AstParserRuleReturnScope<object, IToken> bitWiseAnd()
	{
		EnterRule_bitWiseAnd();
		EnterRule("bitWiseAnd", 49);
		TraceIn("bitWiseAnd", 49);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitWiseAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand325 = default(IToken);
		AstParserRuleReturnScope<object, IToken> equalityCheck324 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> equalityCheck326 = default(AstParserRuleReturnScope<object, IToken>);

		object Ampersand325_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseAnd");
		DebugLocation(331, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// Php.g:332:2: ( equalityCheck ( Ampersand equalityCheck )* )
			DebugEnterAlt(1);
			// Php.g:332:4: equalityCheck ( Ampersand equalityCheck )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(332, 4);
			PushFollow(Follow._equalityCheck_in_bitWiseAnd1780);
			equalityCheck324=equalityCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck324.Tree);
			DebugLocation(332, 18);
			// Php.g:332:18: ( Ampersand equalityCheck )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				int LA93_1 = input.LA(1);

				if ((LA93_1==Ampersand))
				{
					int LA93_2 = input.LA(2);

					if ((EvaluatePredicate(synpred132_Php_fragment)))
					{
						alt93 = 1;
					}


				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:332:19: Ampersand equalityCheck
					{
					DebugLocation(332, 19);
					Ampersand325=(IToken)Match(input,Ampersand,Follow._Ampersand_in_bitWiseAnd1783); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Ampersand325_tree = (object)adaptor.Create(Ampersand325);
					adaptor.AddChild(root_0, Ampersand325_tree);
					}
					DebugLocation(332, 29);
					PushFollow(Follow._equalityCheck_in_bitWiseAnd1785);
					equalityCheck326=equalityCheck();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck326.Tree);

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseAnd", 49);
			LeaveRule("bitWiseAnd", 49);
			LeaveRule_bitWiseAnd();
			if (state.backtracking > 0) { Memoize(input, 49, bitWiseAnd_StartIndex); }

		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "bitWiseAnd"); }
		return retval;

	}
	// $ANTLR end "bitWiseAnd"

	partial void EnterRule_equalityCheck();
	partial void LeaveRule_equalityCheck();
	// $ANTLR start "equalityCheck"
	// Php.g:335:1: equalityCheck : comparisionCheck ( EqualityOperator comparisionCheck )? ;
	[GrammarRule("equalityCheck")]
	private AstParserRuleReturnScope<object, IToken> equalityCheck()
	{
		EnterRule_equalityCheck();
		EnterRule("equalityCheck", 50);
		TraceIn("equalityCheck", 50);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken EqualityOperator328 = default(IToken);
		AstParserRuleReturnScope<object, IToken> comparisionCheck327 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> comparisionCheck329 = default(AstParserRuleReturnScope<object, IToken>);

		object EqualityOperator328_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityCheck");
		DebugLocation(335, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// Php.g:336:2: ( comparisionCheck ( EqualityOperator comparisionCheck )? )
			DebugEnterAlt(1);
			// Php.g:336:4: comparisionCheck ( EqualityOperator comparisionCheck )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(336, 4);
			PushFollow(Follow._comparisionCheck_in_equalityCheck1798);
			comparisionCheck327=comparisionCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck327.Tree);
			DebugLocation(336, 21);
			// Php.g:336:21: ( EqualityOperator comparisionCheck )?
			int alt94=2;
			try { DebugEnterSubRule(94);
			try { DebugEnterDecision(94, false);
			int LA94_1 = input.LA(1);

			if ((LA94_1==EqualityOperator))
			{
				int LA94_2 = input.LA(2);

				if ((EvaluatePredicate(synpred133_Php_fragment)))
				{
					alt94 = 1;
				}
			}
			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:336:22: EqualityOperator comparisionCheck
				{
				DebugLocation(336, 22);
				EqualityOperator328=(IToken)Match(input,EqualityOperator,Follow._EqualityOperator_in_equalityCheck1801); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EqualityOperator328_tree = (object)adaptor.Create(EqualityOperator328);
				adaptor.AddChild(root_0, EqualityOperator328_tree);
				}
				DebugLocation(336, 39);
				PushFollow(Follow._comparisionCheck_in_equalityCheck1803);
				comparisionCheck329=comparisionCheck();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck329.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityCheck", 50);
			LeaveRule("equalityCheck", 50);
			LeaveRule_equalityCheck();
			if (state.backtracking > 0) { Memoize(input, 50, equalityCheck_StartIndex); }

		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityCheck"); }
		return retval;

	}
	// $ANTLR end "equalityCheck"

	partial void EnterRule_comparisionCheck();
	partial void LeaveRule_comparisionCheck();
	// $ANTLR start "comparisionCheck"
	// Php.g:339:1: comparisionCheck : bitWiseShift ( ComparisionOperator bitWiseShift )? ;
	[GrammarRule("comparisionCheck")]
	private AstParserRuleReturnScope<object, IToken> comparisionCheck()
	{
		EnterRule_comparisionCheck();
		EnterRule("comparisionCheck", 51);
		TraceIn("comparisionCheck", 51);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int comparisionCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ComparisionOperator331 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitWiseShift330 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitWiseShift332 = default(AstParserRuleReturnScope<object, IToken>);

		object ComparisionOperator331_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "comparisionCheck");
		DebugLocation(339, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// Php.g:340:2: ( bitWiseShift ( ComparisionOperator bitWiseShift )? )
			DebugEnterAlt(1);
			// Php.g:340:4: bitWiseShift ( ComparisionOperator bitWiseShift )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(340, 4);
			PushFollow(Follow._bitWiseShift_in_comparisionCheck1817);
			bitWiseShift330=bitWiseShift();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift330.Tree);
			DebugLocation(340, 17);
			// Php.g:340:17: ( ComparisionOperator bitWiseShift )?
			int alt95=2;
			try { DebugEnterSubRule(95);
			try { DebugEnterDecision(95, false);
			int LA95_1 = input.LA(1);

			if ((LA95_1==ComparisionOperator))
			{
				int LA95_2 = input.LA(2);

				if ((EvaluatePredicate(synpred134_Php_fragment)))
				{
					alt95 = 1;
				}
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:340:18: ComparisionOperator bitWiseShift
				{
				DebugLocation(340, 18);
				ComparisionOperator331=(IToken)Match(input,ComparisionOperator,Follow._ComparisionOperator_in_comparisionCheck1820); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ComparisionOperator331_tree = (object)adaptor.Create(ComparisionOperator331);
				adaptor.AddChild(root_0, ComparisionOperator331_tree);
				}
				DebugLocation(340, 38);
				PushFollow(Follow._bitWiseShift_in_comparisionCheck1822);
				bitWiseShift332=bitWiseShift();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift332.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(95); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comparisionCheck", 51);
			LeaveRule("comparisionCheck", 51);
			LeaveRule_comparisionCheck();
			if (state.backtracking > 0) { Memoize(input, 51, comparisionCheck_StartIndex); }

		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "comparisionCheck"); }
		return retval;

	}
	// $ANTLR end "comparisionCheck"

	partial void EnterRule_bitWiseShift();
	partial void LeaveRule_bitWiseShift();
	// $ANTLR start "bitWiseShift"
	// Php.g:343:1: bitWiseShift : addition ( ShiftOperator addition )* ;
	[GrammarRule("bitWiseShift")]
	private AstParserRuleReturnScope<object, IToken> bitWiseShift()
	{
		EnterRule_bitWiseShift();
		EnterRule("bitWiseShift", 52);
		TraceIn("bitWiseShift", 52);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitWiseShift_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ShiftOperator334 = default(IToken);
		AstParserRuleReturnScope<object, IToken> addition333 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> addition335 = default(AstParserRuleReturnScope<object, IToken>);

		object ShiftOperator334_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseShift");
		DebugLocation(343, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// Php.g:344:2: ( addition ( ShiftOperator addition )* )
			DebugEnterAlt(1);
			// Php.g:344:4: addition ( ShiftOperator addition )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(344, 4);
			PushFollow(Follow._addition_in_bitWiseShift1835);
			addition333=addition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, addition333.Tree);
			DebugLocation(344, 13);
			// Php.g:344:13: ( ShiftOperator addition )*
			try { DebugEnterSubRule(96);
			while (true)
			{
				int alt96=2;
				try { DebugEnterDecision(96, false);
				int LA96_1 = input.LA(1);

				if ((LA96_1==ShiftOperator))
				{
					int LA96_2 = input.LA(2);

					if ((EvaluatePredicate(synpred135_Php_fragment)))
					{
						alt96 = 1;
					}


				}


				} finally { DebugExitDecision(96); }
				switch ( alt96 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:344:14: ShiftOperator addition
					{
					DebugLocation(344, 14);
					ShiftOperator334=(IToken)Match(input,ShiftOperator,Follow._ShiftOperator_in_bitWiseShift1838); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ShiftOperator334_tree = (object)adaptor.Create(ShiftOperator334);
					adaptor.AddChild(root_0, ShiftOperator334_tree);
					}
					DebugLocation(344, 28);
					PushFollow(Follow._addition_in_bitWiseShift1840);
					addition335=addition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, addition335.Tree);

					}
					break;

				default:
					goto loop96;
				}
			}

			loop96:
				;

			} finally { DebugExitSubRule(96); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseShift", 52);
			LeaveRule("bitWiseShift", 52);
			LeaveRule_bitWiseShift();
			if (state.backtracking > 0) { Memoize(input, 52, bitWiseShift_StartIndex); }

		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "bitWiseShift"); }
		return retval;

	}
	// $ANTLR end "bitWiseShift"

	partial void EnterRule_addition();
	partial void LeaveRule_addition();
	// $ANTLR start "addition"
	// Php.g:347:1: addition : multiplication ( ( Plus | Minus | Dot ) multiplication )* ;
	[GrammarRule("addition")]
	private AstParserRuleReturnScope<object, IToken> addition()
	{
		EnterRule_addition();
		EnterRule("addition", 53);
		TraceIn("addition", 53);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int addition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set337 = default(IToken);
		AstParserRuleReturnScope<object, IToken> multiplication336 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> multiplication338 = default(AstParserRuleReturnScope<object, IToken>);

		object set337_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "addition");
		DebugLocation(347, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// Php.g:348:2: ( multiplication ( ( Plus | Minus | Dot ) multiplication )* )
			DebugEnterAlt(1);
			// Php.g:348:4: multiplication ( ( Plus | Minus | Dot ) multiplication )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(348, 4);
			PushFollow(Follow._multiplication_in_addition1854);
			multiplication336=multiplication();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication336.Tree);
			DebugLocation(348, 19);
			// Php.g:348:19: ( ( Plus | Minus | Dot ) multiplication )*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_1 = input.LA(1);

				if ((LA97_1==Dot||LA97_1==Minus||LA97_1==Plus))
				{
					int LA97_2 = input.LA(2);

					if ((EvaluatePredicate(synpred138_Php_fragment)))
					{
						alt97 = 1;
					}


				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:348:20: ( Plus | Minus | Dot ) multiplication
					{
					DebugLocation(348, 20);

					set337=(IToken)input.LT(1);
					if (input.LA(1)==Dot||input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set337));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(348, 41);
					PushFollow(Follow._multiplication_in_addition1869);
					multiplication338=multiplication();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication338.Tree);

					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addition", 53);
			LeaveRule("addition", 53);
			LeaveRule_addition();
			if (state.backtracking > 0) { Memoize(input, 53, addition_StartIndex); }

		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "addition"); }
		return retval;

	}
	// $ANTLR end "addition"

	partial void EnterRule_multiplication();
	partial void LeaveRule_multiplication();
	// $ANTLR start "multiplication"
	// Php.g:351:1: multiplication : logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )* ;
	[GrammarRule("multiplication")]
	private AstParserRuleReturnScope<object, IToken> multiplication()
	{
		EnterRule_multiplication();
		EnterRule("multiplication", 54);
		TraceIn("multiplication", 54);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int multiplication_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set340 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalNot339 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalNot341 = default(AstParserRuleReturnScope<object, IToken>);

		object set340_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplication");
		DebugLocation(351, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// Php.g:352:2: ( logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )* )
			DebugEnterAlt(1);
			// Php.g:352:4: logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(352, 4);
			PushFollow(Follow._logicalNot_in_multiplication1882);
			logicalNot339=logicalNot();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot339.Tree);
			DebugLocation(352, 15);
			// Php.g:352:15: ( ( Asterisk | Forwardslash | Percent ) logicalNot )*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_1 = input.LA(1);

				if ((LA98_1==Asterisk||LA98_1==Forwardslash||LA98_1==Percent))
				{
					int LA98_2 = input.LA(2);

					if ((EvaluatePredicate(synpred141_Php_fragment)))
					{
						alt98 = 1;
					}


				}


				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:352:16: ( Asterisk | Forwardslash | Percent ) logicalNot
					{
					DebugLocation(352, 16);

					set340=(IToken)input.LT(1);
					if (input.LA(1)==Asterisk||input.LA(1)==Forwardslash||input.LA(1)==Percent)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set340));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(352, 52);
					PushFollow(Follow._logicalNot_in_multiplication1897);
					logicalNot341=logicalNot();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot341.Tree);

					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplication", 54);
			LeaveRule("multiplication", 54);
			LeaveRule_multiplication();
			if (state.backtracking > 0) { Memoize(input, 54, multiplication_StartIndex); }

		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplication"); }
		return retval;

	}
	// $ANTLR end "multiplication"

	partial void EnterRule_logicalNot();
	partial void LeaveRule_logicalNot();
	// $ANTLR start "logicalNot"
	// Php.g:355:1: logicalNot : ( Bang logicalNot | instanceOf );
	[GrammarRule("logicalNot")]
	private AstParserRuleReturnScope<object, IToken> logicalNot()
	{
		EnterRule_logicalNot();
		EnterRule("logicalNot", 55);
		TraceIn("logicalNot", 55);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalNot_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Bang342 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalNot343 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> instanceOf344 = default(AstParserRuleReturnScope<object, IToken>);

		object Bang342_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalNot");
		DebugLocation(355, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// Php.g:356:2: ( Bang logicalNot | instanceOf )
			int alt99=2;
			try { DebugEnterDecision(99, false);
			int LA99_1 = input.LA(1);

			if ((LA99_1==Bang))
			{
				alt99 = 1;
			}
			else if (((LA99_1>=Abstract && LA99_1<=And)||(LA99_1>=ArrayType && LA99_1<=As)||(LA99_1>=BoolType && LA99_1<=Class)||LA99_1==Clone||(LA99_1>=Const && LA99_1<=Continue)||(LA99_1>=Default && LA99_1<=Die)||LA99_1==Do||(LA99_1>=DoubleQuotedString && LA99_1<=Empty)||(LA99_1>=Eval && LA99_1<=Exit)||(LA99_1>=Extends && LA99_1<=Foreach)||(LA99_1>=Function && LA99_1<=HaltCompiler)||LA99_1==HereDoc||(LA99_1>=If && LA99_1<=IncrementOperator)||(LA99_1>=Instanceof && LA99_1<=List)||LA99_1==Minus||(LA99_1>=Namespace && LA99_1<=Null)||LA99_1==ObjectType||(LA99_1>=OpenRoundBracket && LA99_1<=Or)||(LA99_1>=Plus && LA99_1<=Public)||(LA99_1>=Real && LA99_1<=Return)||LA99_1==SingleQuotedString||(LA99_1>=Static && LA99_1<=Try)||LA99_1==UnquotedString||(LA99_1>=UnsetType && LA99_1<=While)||(LA99_1>=Xor && LA99_1<=131)))
			{
				alt99 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 99, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:356:4: Bang logicalNot
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(356, 4);
				Bang342=(IToken)Match(input,Bang,Follow._Bang_in_logicalNot1910); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Bang342_tree = (object)adaptor.Create(Bang342);
				adaptor.AddChild(root_0, Bang342_tree);
				}
				DebugLocation(356, 9);
				PushFollow(Follow._logicalNot_in_logicalNot1912);
				logicalNot343=logicalNot();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot343.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:357:4: instanceOf
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(357, 4);
				PushFollow(Follow._instanceOf_in_logicalNot1917);
				instanceOf344=instanceOf();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOf344.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalNot", 55);
			LeaveRule("logicalNot", 55);
			LeaveRule_logicalNot();
			if (state.backtracking > 0) { Memoize(input, 55, logicalNot_StartIndex); }

		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalNot"); }
		return retval;

	}
	// $ANTLR end "logicalNot"

	partial void EnterRule_instanceOf();
	partial void LeaveRule_instanceOf();
	// $ANTLR start "instanceOf"
	// Php.g:360:1: instanceOf : negateOrCast ( Instanceof negateOrCast )? ;
	[GrammarRule("instanceOf")]
	private AstParserRuleReturnScope<object, IToken> instanceOf()
	{
		EnterRule_instanceOf();
		EnterRule("instanceOf", 56);
		TraceIn("instanceOf", 56);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int instanceOf_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Instanceof346 = default(IToken);
		AstParserRuleReturnScope<object, IToken> negateOrCast345 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> negateOrCast347 = default(AstParserRuleReturnScope<object, IToken>);

		object Instanceof346_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "instanceOf");
		DebugLocation(360, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// Php.g:361:2: ( negateOrCast ( Instanceof negateOrCast )? )
			DebugEnterAlt(1);
			// Php.g:361:4: negateOrCast ( Instanceof negateOrCast )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(361, 4);
			PushFollow(Follow._negateOrCast_in_instanceOf1928);
			negateOrCast345=negateOrCast();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast345.Tree);
			DebugLocation(361, 17);
			// Php.g:361:17: ( Instanceof negateOrCast )?
			int alt100=2;
			try { DebugEnterSubRule(100);
			try { DebugEnterDecision(100, false);
			int LA100_1 = input.LA(1);

			if ((LA100_1==Instanceof))
			{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred143_Php_fragment)))
				{
					alt100 = 1;
				}
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:361:18: Instanceof negateOrCast
				{
				DebugLocation(361, 18);
				Instanceof346=(IToken)Match(input,Instanceof,Follow._Instanceof_in_instanceOf1931); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Instanceof346_tree = (object)adaptor.Create(Instanceof346);
				adaptor.AddChild(root_0, Instanceof346_tree);
				}
				DebugLocation(361, 29);
				PushFollow(Follow._negateOrCast_in_instanceOf1933);
				negateOrCast347=negateOrCast();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast347.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOf", 56);
			LeaveRule("instanceOf", 56);
			LeaveRule_instanceOf();
			if (state.backtracking > 0) { Memoize(input, 56, instanceOf_StartIndex); }

		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "instanceOf"); }
		return retval;

	}
	// $ANTLR end "instanceOf"

	partial void EnterRule_negateOrCast();
	partial void LeaveRule_negateOrCast();
	// $ANTLR start "negateOrCast"
	// Php.g:364:1: negateOrCast : ( ( Tilde | Minus | SuppressWarnings ) increment | OpenRoundBracket primitiveType CloseRoundBracket negateOrCast | increment );
	[GrammarRule("negateOrCast")]
	private AstParserRuleReturnScope<object, IToken> negateOrCast()
	{
		EnterRule_negateOrCast();
		EnterRule("negateOrCast", 57);
		TraceIn("negateOrCast", 57);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int negateOrCast_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set348 = default(IToken);
		IToken OpenRoundBracket350 = default(IToken);
		IToken CloseRoundBracket352 = default(IToken);
		AstParserRuleReturnScope<object, IToken> increment349 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primitiveType351 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> negateOrCast353 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> increment354 = default(AstParserRuleReturnScope<object, IToken>);

		object set348_tree = default(object);
		object OpenRoundBracket350_tree = default(object);
		object CloseRoundBracket352_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "negateOrCast");
		DebugLocation(364, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// Php.g:365:2: ( ( Tilde | Minus | SuppressWarnings ) increment | OpenRoundBracket primitiveType CloseRoundBracket negateOrCast | increment )
			int alt101=3;
			try { DebugEnterDecision(101, false);
			switch (input.LA(1))
			{
			case Minus:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred147_Php_fragment)))
				{
					alt101 = 2;
				}
				else if ((true))
				{
					alt101 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case Ampersand:
			case And:
			case ArrayType:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleQuotedString:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case HereDoc:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case IncrementOperator:
			case Instanceof:
			case IntType:
			case Integer:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case OpenSquareBracket:
			case Or:
			case Plus:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case SingleQuotedString:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case UnsetType:
			case Use:
			case Var:
			case VariableName:
			case While:
			case Xor:
			case 130:
			case 131:
				{
				alt101 = 3;
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				alt101 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:365:4: ( Tilde | Minus | SuppressWarnings ) increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(365, 4);

				set348=(IToken)input.LT(1);
				if (input.LA(1)==Minus||input.LA(1)==SuppressWarnings||input.LA(1)==Tilde)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set348));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(365, 39);
				PushFollow(Follow._increment_in_negateOrCast1958);
				increment349=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment349.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:366:4: OpenRoundBracket primitiveType CloseRoundBracket negateOrCast
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(366, 4);
				OpenRoundBracket350=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_negateOrCast1963); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket350_tree = (object)adaptor.Create(OpenRoundBracket350);
				adaptor.AddChild(root_0, OpenRoundBracket350_tree);
				}
				DebugLocation(366, 21);
				PushFollow(Follow._primitiveType_in_negateOrCast1965);
				primitiveType351=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType351.Tree);
				DebugLocation(366, 35);
				CloseRoundBracket352=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_negateOrCast1967); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket352_tree = (object)adaptor.Create(CloseRoundBracket352);
				adaptor.AddChild(root_0, CloseRoundBracket352_tree);
				}
				DebugLocation(366, 53);
				PushFollow(Follow._negateOrCast_in_negateOrCast1969);
				negateOrCast353=negateOrCast();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast353.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:367:4: increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(367, 4);
				PushFollow(Follow._increment_in_negateOrCast1974);
				increment354=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment354.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("negateOrCast", 57);
			LeaveRule("negateOrCast", 57);
			LeaveRule_negateOrCast();
			if (state.backtracking > 0) { Memoize(input, 57, negateOrCast_StartIndex); }

		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "negateOrCast"); }
		return retval;

	}
	// $ANTLR end "negateOrCast"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// Php.g:370:1: primitiveType : ( IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ArrayType | ObjectType | UnsetType );
	[GrammarRule("primitiveType")]
	private AstParserRuleReturnScope<object, IToken> primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 58);
		TraceIn("primitiveType", 58);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set355 = default(IToken);

		object set355_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(370, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// Php.g:371:2: ( IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ArrayType | ObjectType | UnsetType )
			DebugEnterAlt(1);
			// Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(371, 2);

			set355=(IToken)input.LT(1);
			if (input.LA(1)==ArrayType||(input.LA(1)>=BoolType && input.LA(1)<=BooleanType)||input.LA(1)==DoubleType||input.LA(1)==FloatType||input.LA(1)==IntType||input.LA(1)==IntegerType||input.LA(1)==ObjectType||input.LA(1)==RealType||input.LA(1)==StringType||input.LA(1)==UnsetType)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set355));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 58);
			LeaveRule("primitiveType", 58);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 58, primitiveType_StartIndex); }

		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_increment();
	partial void LeaveRule_increment();
	// $ANTLR start "increment"
	// Php.g:375:1: increment : ( IncrementOperator name | name IncrementOperator | listVariables ( Equals | AsignmentOperator ) assignment | newOrClone | OpenRoundBracket expression CloseRoundBracket );
	[GrammarRule("increment")]
	private AstParserRuleReturnScope<object, IToken> increment()
	{
		EnterRule_increment();
		EnterRule("increment", 59);
		TraceIn("increment", 59);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int increment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IncrementOperator356 = default(IToken);
		IToken IncrementOperator359 = default(IToken);
		IToken set361 = default(IToken);
		IToken OpenRoundBracket364 = default(IToken);
		IToken CloseRoundBracket366 = default(IToken);
		AstParserRuleReturnScope<object, IToken> name357 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name358 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> listVariables360 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignment362 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> newOrClone363 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression365 = default(AstParserRuleReturnScope<object, IToken>);

		object IncrementOperator356_tree = default(object);
		object IncrementOperator359_tree = default(object);
		object set361_tree = default(object);
		object OpenRoundBracket364_tree = default(object);
		object CloseRoundBracket366_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "increment");
		DebugLocation(375, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// Php.g:376:2: ( IncrementOperator name | name IncrementOperator | listVariables ( Equals | AsignmentOperator ) assignment | newOrClone | OpenRoundBracket expression CloseRoundBracket )
			int alt102=5;
			try { DebugEnterDecision(102, false);
			switch (input.LA(1))
			{
			case IncrementOperator:
				{
				alt102 = 1;
				}
				break;
			case VariableName:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case List:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case ArrayType:
			case DoubleQuotedString:
			case HereDoc:
			case Integer:
			case Minus:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case SingleQuotedString:
			case UnsetType:
				{
				alt102 = 4;
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Namespace:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((EvaluatePredicate(synpred162_Php_fragment)))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				alt102 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:376:4: IncrementOperator name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(376, 4);
				IncrementOperator356=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment2037); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncrementOperator356_tree = (object)adaptor.Create(IncrementOperator356);
				adaptor.AddChild(root_0, IncrementOperator356_tree);
				}
				DebugLocation(376, 22);
				PushFollow(Follow._name_in_increment2039);
				name357=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name357.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:377:4: name IncrementOperator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(377, 4);
				PushFollow(Follow._name_in_increment2044);
				name358=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name358.Tree);
				DebugLocation(377, 9);
				IncrementOperator359=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment2046); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncrementOperator359_tree = (object)adaptor.Create(IncrementOperator359);
				adaptor.AddChild(root_0, IncrementOperator359_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:378:4: listVariables ( Equals | AsignmentOperator ) assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(378, 4);
				PushFollow(Follow._listVariables_in_increment2051);
				listVariables360=listVariables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, listVariables360.Tree);
				DebugLocation(378, 18);

				set361=(IToken)input.LT(1);
				if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set361));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(378, 47);
				PushFollow(Follow._assignment_in_increment2061);
				assignment362=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment362.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:379:4: newOrClone
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(379, 4);
				PushFollow(Follow._newOrClone_in_increment2066);
				newOrClone363=newOrClone();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newOrClone363.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:380:4: OpenRoundBracket expression CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(380, 4);
				OpenRoundBracket364=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_increment2071); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket364_tree = (object)adaptor.Create(OpenRoundBracket364);
				adaptor.AddChild(root_0, OpenRoundBracket364_tree);
				}
				DebugLocation(380, 21);
				PushFollow(Follow._expression_in_increment2073);
				expression365=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression365.Tree);
				DebugLocation(380, 32);
				CloseRoundBracket366=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_increment2075); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket366_tree = (object)adaptor.Create(CloseRoundBracket366);
				adaptor.AddChild(root_0, CloseRoundBracket366_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("increment", 59);
			LeaveRule("increment", 59);
			LeaveRule_increment();
			if (state.backtracking > 0) { Memoize(input, 59, increment_StartIndex); }

		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "increment"); }
		return retval;

	}
	// $ANTLR end "increment"

	partial void EnterRule_newOrClone();
	partial void LeaveRule_newOrClone();
	// $ANTLR start "newOrClone"
	// Php.g:385:1: newOrClone : ( New ( nameOrFunctionCall | constantOrStaticAccessor ) | New Static ( functionArguments )? | Clone name | atomOrReference );
	[GrammarRule("newOrClone")]
	private AstParserRuleReturnScope<object, IToken> newOrClone()
	{
		EnterRule_newOrClone();
		EnterRule("newOrClone", 60);
		TraceIn("newOrClone", 60);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newOrClone_StartIndex = input.Index;

		object root_0 = default(object);

		IToken New367 = default(IToken);
		IToken New370 = default(IToken);
		IToken Static371 = default(IToken);
		IToken Clone373 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nameOrFunctionCall368 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constantOrStaticAccessor369 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionArguments372 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name374 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atomOrReference375 = default(AstParserRuleReturnScope<object, IToken>);

		object New367_tree = default(object);
		object New370_tree = default(object);
		object Static371_tree = default(object);
		object Clone373_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "newOrClone");
		DebugLocation(385, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// Php.g:387:2: ( New ( nameOrFunctionCall | constantOrStaticAccessor ) | New Static ( functionArguments )? | Clone name | atomOrReference )
			int alt105=4;
			try { DebugEnterDecision(105, false);
			switch (input.LA(1))
			{
			case New:
				{
				int LA105_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Php_fragment)))
				{
					alt105 = 1;
				}
				else if ((EvaluatePredicate(synpred166_Php_fragment)))
				{
					alt105 = 2;
				}
				else if ((true))
				{
					alt105 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA105_2 = input.LA(2);

				if ((EvaluatePredicate(synpred167_Php_fragment)))
				{
					alt105 = 3;
				}
				else if ((true))
				{
					alt105 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case Ampersand:
			case And:
			case ArrayType:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleQuotedString:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case HereDoc:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case Integer:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Minus:
			case Namespace:
			case Null:
			case ObjectType:
			case OpenSquareBracket:
			case Or:
			case Plus:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case SingleQuotedString:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case UnsetType:
			case Use:
			case Var:
			case VariableName:
			case While:
			case Xor:
			case 130:
			case 131:
				{
				alt105 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:387:4: New ( nameOrFunctionCall | constantOrStaticAccessor )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(387, 4);
				New367=(IToken)Match(input,New,Follow._New_in_newOrClone2097); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New367_tree = (object)adaptor.Create(New367);
				adaptor.AddChild(root_0, New367_tree);
				}
				DebugLocation(387, 8);
				// Php.g:387:8: ( nameOrFunctionCall | constantOrStaticAccessor )
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, false);
				switch (input.LA(1))
				{
				case VariableName:
					{
					int LA103_2 = input.LA(2);

					if ((EvaluatePredicate(synpred163_Php_fragment)))
					{
						alt103 = 1;
					}
					else if ((true))
					{
						alt103 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 103, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 130:
					{
					int LA103_2 = input.LA(2);

					if ((EvaluatePredicate(synpred163_Php_fragment)))
					{
						alt103 = 1;
					}
					else if ((true))
					{
						alt103 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 103, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 131:
					{
					int LA103_2 = input.LA(2);

					if ((EvaluatePredicate(synpred163_Php_fragment)))
					{
						alt103 = 1;
					}
					else if ((true))
					{
						alt103 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 103, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Die:
				case Empty:
				case Eval:
				case Exit:
				case HaltCompiler:
				case Isset:
					{
					int LA103_2 = input.LA(2);

					if ((EvaluatePredicate(synpred163_Php_fragment)))
					{
						alt103 = 1;
					}
					else if ((true))
					{
						alt103 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 103, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Abstract:
				case And:
				case As:
				case BoolType:
				case BooleanType:
				case Break:
				case Case:
				case Catch:
				case Class:
				case Clone:
				case Const:
				case Continue:
				case Default:
				case Do:
				case DoubleType:
				case Echo:
				case Else:
				case ElseIf:
				case Extends:
				case False:
				case Final:
				case Finally:
				case FloatType:
				case For:
				case Foreach:
				case Function:
				case Global:
				case Goto:
				case If:
				case Implements:
				case Include:
				case IncludeOnce:
				case Instanceof:
				case IntType:
				case IntegerType:
				case Interface:
				case List:
				case Namespace:
				case New:
				case Null:
				case ObjectType:
				case Or:
				case Print:
				case Private:
				case Protected:
				case Public:
				case RealType:
				case Require:
				case RequireOnce:
				case Return:
				case Static:
				case StringType:
				case Switch:
				case Throw:
				case True:
				case Try:
				case UnquotedString:
				case Use:
				case Var:
				case While:
				case Xor:
					{
					int LA103_2 = input.LA(2);

					if ((EvaluatePredicate(synpred163_Php_fragment)))
					{
						alt103 = 1;
					}
					else if ((true))
					{
						alt103 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 103, 5, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case UnsetType:
					{
					alt103 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:387:9: nameOrFunctionCall
					{
					DebugLocation(387, 9);
					PushFollow(Follow._nameOrFunctionCall_in_newOrClone2100);
					nameOrFunctionCall368=nameOrFunctionCall();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall368.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:387:30: constantOrStaticAccessor
					{
					DebugLocation(387, 30);
					PushFollow(Follow._constantOrStaticAccessor_in_newOrClone2104);
					constantOrStaticAccessor369=constantOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor369.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(103); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:388:4: New Static ( functionArguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(388, 4);
				New370=(IToken)Match(input,New,Follow._New_in_newOrClone2110); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New370_tree = (object)adaptor.Create(New370);
				adaptor.AddChild(root_0, New370_tree);
				}
				DebugLocation(388, 8);
				Static371=(IToken)Match(input,Static,Follow._Static_in_newOrClone2112); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static371_tree = (object)adaptor.Create(Static371);
				adaptor.AddChild(root_0, Static371_tree);
				}
				DebugLocation(388, 15);
				// Php.g:388:15: ( functionArguments )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_1 = input.LA(1);

				if ((LA104_1==OpenRoundBracket))
				{
					int LA104_2 = input.LA(2);

					if ((EvaluatePredicate(synpred165_Php_fragment)))
					{
						alt104 = 1;
					}
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:388:15: functionArguments
					{
					DebugLocation(388, 15);
					PushFollow(Follow._functionArguments_in_newOrClone2114);
					functionArguments372=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments372.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(104); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:389:4: Clone name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(389, 4);
				Clone373=(IToken)Match(input,Clone,Follow._Clone_in_newOrClone2120); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Clone373_tree = (object)adaptor.Create(Clone373);
				adaptor.AddChild(root_0, Clone373_tree);
				}
				DebugLocation(389, 10);
				PushFollow(Follow._name_in_newOrClone2122);
				name374=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name374.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:390:4: atomOrReference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(390, 4);
				PushFollow(Follow._atomOrReference_in_newOrClone2127);
				atomOrReference375=atomOrReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atomOrReference375.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newOrClone", 60);
			LeaveRule("newOrClone", 60);
			LeaveRule_newOrClone();
			if (state.backtracking > 0) { Memoize(input, 60, newOrClone_StartIndex); }

		}
		DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "newOrClone"); }
		return retval;

	}
	// $ANTLR end "newOrClone"

	partial void EnterRule_atomOrReference();
	partial void LeaveRule_atomOrReference();
	// $ANTLR start "atomOrReference"
	// Php.g:393:1: atomOrReference : ( Ampersand nameOrFunctionCall | anonymousFunctionDefinition | constantOrFunctionCall | atom | variableOrFunctionCall );
	[GrammarRule("atomOrReference")]
	private AstParserRuleReturnScope<object, IToken> atomOrReference()
	{
		EnterRule_atomOrReference();
		EnterRule("atomOrReference", 61);
		TraceIn("atomOrReference", 61);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atomOrReference_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand376 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nameOrFunctionCall377 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> anonymousFunctionDefinition378 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constantOrFunctionCall379 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom380 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableOrFunctionCall381 = default(AstParserRuleReturnScope<object, IToken>);

		object Ampersand376_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "atomOrReference");
		DebugLocation(393, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// Php.g:395:2: ( Ampersand nameOrFunctionCall | anonymousFunctionDefinition | constantOrFunctionCall | atom | variableOrFunctionCall )
			int alt106=5;
			try { DebugEnterDecision(106, false);
			switch (input.LA(1))
			{
			case Ampersand:
				{
				alt106 = 1;
				}
				break;
			case Function:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred169_Php_fragment)))
				{
					alt106 = 2;
				}
				else if ((EvaluatePredicate(synpred170_Php_fragment)))
				{
					alt106 = 3;
				}
				else if ((EvaluatePredicate(synpred171_Php_fragment)))
				{
					alt106 = 4;
				}
				else if ((true))
				{
					alt106 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred170_Php_fragment)))
				{
					alt106 = 3;
				}
				else if ((EvaluatePredicate(synpred171_Php_fragment)))
				{
					alt106 = 4;
				}
				else if ((true))
				{
					alt106 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred170_Php_fragment)))
				{
					alt106 = 3;
				}
				else if ((EvaluatePredicate(synpred171_Php_fragment)))
				{
					alt106 = 4;
				}
				else if ((true))
				{
					alt106 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred170_Php_fragment)))
				{
					alt106 = 3;
				}
				else if ((EvaluatePredicate(synpred171_Php_fragment)))
				{
					alt106 = 4;
				}
				else if ((true))
				{
					alt106 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred170_Php_fragment)))
				{
					alt106 = 3;
				}
				else if ((EvaluatePredicate(synpred171_Php_fragment)))
				{
					alt106 = 4;
				}
				else if ((true))
				{
					alt106 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred170_Php_fragment)))
				{
					alt106 = 3;
				}
				else if ((EvaluatePredicate(synpred171_Php_fragment)))
				{
					alt106 = 4;
				}
				else if ((true))
				{
					alt106 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				alt106 = 3;
				}
				break;
			case ArrayType:
			case DoubleQuotedString:
			case HereDoc:
			case Integer:
			case Minus:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case SingleQuotedString:
				{
				alt106 = 4;
				}
				break;
			case Null:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred170_Php_fragment)))
				{
					alt106 = 3;
				}
				else if ((EvaluatePredicate(synpred171_Php_fragment)))
				{
					alt106 = 4;
				}
				else if ((true))
				{
					alt106 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred170_Php_fragment)))
				{
					alt106 = 3;
				}
				else if ((EvaluatePredicate(synpred171_Php_fragment)))
				{
					alt106 = 4;
				}
				else if ((true))
				{
					alt106 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case List:
			case Namespace:
			case New:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA106_2 = input.LA(2);

				if ((EvaluatePredicate(synpred170_Php_fragment)))
				{
					alt106 = 3;
				}
				else if ((EvaluatePredicate(synpred171_Php_fragment)))
				{
					alt106 = 4;
				}
				else if ((true))
				{
					alt106 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:395:4: Ampersand nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 4);
				Ampersand376=(IToken)Match(input,Ampersand,Follow._Ampersand_in_atomOrReference2139); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand376_tree = (object)adaptor.Create(Ampersand376);
				adaptor.AddChild(root_0, Ampersand376_tree);
				}
				DebugLocation(395, 14);
				PushFollow(Follow._nameOrFunctionCall_in_atomOrReference2141);
				nameOrFunctionCall377=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall377.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:396:4: anonymousFunctionDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(396, 4);
				PushFollow(Follow._anonymousFunctionDefinition_in_atomOrReference2146);
				anonymousFunctionDefinition378=anonymousFunctionDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, anonymousFunctionDefinition378.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:397:4: constantOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(397, 4);
				PushFollow(Follow._constantOrFunctionCall_in_atomOrReference2151);
				constantOrFunctionCall379=constantOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrFunctionCall379.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:398:4: atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(398, 4);
				PushFollow(Follow._atom_in_atomOrReference2156);
				atom380=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom380.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:399:4: variableOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(399, 4);
				PushFollow(Follow._variableOrFunctionCall_in_atomOrReference2161);
				variableOrFunctionCall381=variableOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrFunctionCall381.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atomOrReference", 61);
			LeaveRule("atomOrReference", 61);
			LeaveRule_atomOrReference();
			if (state.backtracking > 0) { Memoize(input, 61, atomOrReference_StartIndex); }

		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "atomOrReference"); }
		return retval;

	}
	// $ANTLR end "atomOrReference"

	partial void EnterRule_arrayDeclaration();
	partial void LeaveRule_arrayDeclaration();
	// $ANTLR start "arrayDeclaration"
	// Php.g:402:1: arrayDeclaration : ( ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket | OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket );
	[GrammarRule("arrayDeclaration")]
	private AstParserRuleReturnScope<object, IToken> arrayDeclaration()
	{
		EnterRule_arrayDeclaration();
		EnterRule("arrayDeclaration", 62);
		TraceIn("arrayDeclaration", 62);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ArrayType382 = default(IToken);
		IToken OpenRoundBracket383 = default(IToken);
		IToken Comma385 = default(IToken);
		IToken Comma387 = default(IToken);
		IToken CloseRoundBracket388 = default(IToken);
		IToken OpenSquareBracket389 = default(IToken);
		IToken Comma391 = default(IToken);
		IToken Comma393 = default(IToken);
		IToken CloseSquareBracket394 = default(IToken);
		AstParserRuleReturnScope<object, IToken> arrayEntry384 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayEntry386 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayEntry390 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayEntry392 = default(AstParserRuleReturnScope<object, IToken>);

		object ArrayType382_tree = default(object);
		object OpenRoundBracket383_tree = default(object);
		object Comma385_tree = default(object);
		object Comma387_tree = default(object);
		object CloseRoundBracket388_tree = default(object);
		object OpenSquareBracket389_tree = default(object);
		object Comma391_tree = default(object);
		object Comma393_tree = default(object);
		object CloseSquareBracket394_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayDeclaration");
		DebugLocation(402, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// Php.g:403:2: ( ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket | OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket )
			int alt113=2;
			try { DebugEnterDecision(113, false);
			int LA113_1 = input.LA(1);

			if ((LA113_1==ArrayType))
			{
				alt113 = 1;
			}
			else if ((LA113_1==OpenSquareBracket))
			{
				alt113 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 113, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:403:4: ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(403, 4);
				ArrayType382=(IToken)Match(input,ArrayType,Follow._ArrayType_in_arrayDeclaration2172); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ArrayType382_tree = (object)adaptor.Create(ArrayType382);
				adaptor.AddChild(root_0, ArrayType382_tree);
				}
				DebugLocation(403, 14);
				OpenRoundBracket383=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_arrayDeclaration2174); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket383_tree = (object)adaptor.Create(OpenRoundBracket383);
				adaptor.AddChild(root_0, OpenRoundBracket383_tree);
				}
				DebugLocation(403, 31);
				// Php.g:403:31: ( arrayEntry ( Comma arrayEntry )* ( Comma )? )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, false);
				int LA109_1 = input.LA(1);

				if (((LA109_1>=Abstract && LA109_1<=And)||(LA109_1>=ArrayType && LA109_1<=As)||LA109_1==Bang||(LA109_1>=BoolType && LA109_1<=Class)||LA109_1==Clone||(LA109_1>=Const && LA109_1<=Continue)||(LA109_1>=Default && LA109_1<=Die)||LA109_1==Do||(LA109_1>=DoubleQuotedString && LA109_1<=Empty)||(LA109_1>=Eval && LA109_1<=Exit)||(LA109_1>=Extends && LA109_1<=Foreach)||(LA109_1>=Function && LA109_1<=HaltCompiler)||LA109_1==HereDoc||(LA109_1>=If && LA109_1<=IncrementOperator)||(LA109_1>=Instanceof && LA109_1<=List)||LA109_1==Minus||(LA109_1>=Namespace && LA109_1<=Null)||LA109_1==ObjectType||(LA109_1>=OpenRoundBracket && LA109_1<=Or)||(LA109_1>=Plus && LA109_1<=Public)||(LA109_1>=Real && LA109_1<=Return)||LA109_1==SingleQuotedString||(LA109_1>=Static && LA109_1<=Try)||LA109_1==UnquotedString||(LA109_1>=UnsetType && LA109_1<=While)||(LA109_1>=Xor && LA109_1<=131)))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:403:32: arrayEntry ( Comma arrayEntry )* ( Comma )?
					{
					DebugLocation(403, 32);
					PushFollow(Follow._arrayEntry_in_arrayDeclaration2177);
					arrayEntry384=arrayEntry();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry384.Tree);
					DebugLocation(403, 43);
					// Php.g:403:43: ( Comma arrayEntry )*
					try { DebugEnterSubRule(107);
					while (true)
					{
						int alt107=2;
						try { DebugEnterDecision(107, false);
						int LA107_1 = input.LA(1);

						if ((LA107_1==Comma))
						{
							int LA107_2 = input.LA(2);

							if (((LA107_2>=Abstract && LA107_2<=And)||(LA107_2>=ArrayType && LA107_2<=As)||LA107_2==Bang||(LA107_2>=BoolType && LA107_2<=Class)||LA107_2==Clone||(LA107_2>=Const && LA107_2<=Continue)||(LA107_2>=Default && LA107_2<=Die)||LA107_2==Do||(LA107_2>=DoubleQuotedString && LA107_2<=Empty)||(LA107_2>=Eval && LA107_2<=Exit)||(LA107_2>=Extends && LA107_2<=Foreach)||(LA107_2>=Function && LA107_2<=HaltCompiler)||LA107_2==HereDoc||(LA107_2>=If && LA107_2<=IncrementOperator)||(LA107_2>=Instanceof && LA107_2<=List)||LA107_2==Minus||(LA107_2>=Namespace && LA107_2<=Null)||LA107_2==ObjectType||(LA107_2>=OpenRoundBracket && LA107_2<=Or)||(LA107_2>=Plus && LA107_2<=Public)||(LA107_2>=Real && LA107_2<=Return)||LA107_2==SingleQuotedString||(LA107_2>=Static && LA107_2<=Try)||LA107_2==UnquotedString||(LA107_2>=UnsetType && LA107_2<=While)||(LA107_2>=Xor && LA107_2<=131)))
							{
								alt107 = 1;
							}


						}


						} finally { DebugExitDecision(107); }
						switch ( alt107 )
						{
						case 1:
							DebugEnterAlt(1);
							// Php.g:403:44: Comma arrayEntry
							{
							DebugLocation(403, 44);
							Comma385=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2180); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Comma385_tree = (object)adaptor.Create(Comma385);
							adaptor.AddChild(root_0, Comma385_tree);
							}
							DebugLocation(403, 50);
							PushFollow(Follow._arrayEntry_in_arrayDeclaration2182);
							arrayEntry386=arrayEntry();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry386.Tree);

							}
							break;

						default:
							goto loop107;
						}
					}

					loop107:
						;

					} finally { DebugExitSubRule(107); }

					DebugLocation(403, 63);
					// Php.g:403:63: ( Comma )?
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, false);
					int LA108_1 = input.LA(1);

					if ((LA108_1==Comma))
					{
						alt108 = 1;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:403:63: Comma
						{
						DebugLocation(403, 63);
						Comma387=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2186); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma387_tree = (object)adaptor.Create(Comma387);
						adaptor.AddChild(root_0, Comma387_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(108); }


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(403, 72);
				CloseRoundBracket388=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_arrayDeclaration2191); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket388_tree = (object)adaptor.Create(CloseRoundBracket388);
				adaptor.AddChild(root_0, CloseRoundBracket388_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:404:4: OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(404, 4);
				OpenSquareBracket389=(IToken)Match(input,OpenSquareBracket,Follow._OpenSquareBracket_in_arrayDeclaration2196); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenSquareBracket389_tree = (object)adaptor.Create(OpenSquareBracket389);
				adaptor.AddChild(root_0, OpenSquareBracket389_tree);
				}
				DebugLocation(404, 22);
				// Php.g:404:22: ( arrayEntry ( Comma arrayEntry )* ( Comma )? )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				int LA112_1 = input.LA(1);

				if (((LA112_1>=Abstract && LA112_1<=And)||(LA112_1>=ArrayType && LA112_1<=As)||LA112_1==Bang||(LA112_1>=BoolType && LA112_1<=Class)||LA112_1==Clone||(LA112_1>=Const && LA112_1<=Continue)||(LA112_1>=Default && LA112_1<=Die)||LA112_1==Do||(LA112_1>=DoubleQuotedString && LA112_1<=Empty)||(LA112_1>=Eval && LA112_1<=Exit)||(LA112_1>=Extends && LA112_1<=Foreach)||(LA112_1>=Function && LA112_1<=HaltCompiler)||LA112_1==HereDoc||(LA112_1>=If && LA112_1<=IncrementOperator)||(LA112_1>=Instanceof && LA112_1<=List)||LA112_1==Minus||(LA112_1>=Namespace && LA112_1<=Null)||LA112_1==ObjectType||(LA112_1>=OpenRoundBracket && LA112_1<=Or)||(LA112_1>=Plus && LA112_1<=Public)||(LA112_1>=Real && LA112_1<=Return)||LA112_1==SingleQuotedString||(LA112_1>=Static && LA112_1<=Try)||LA112_1==UnquotedString||(LA112_1>=UnsetType && LA112_1<=While)||(LA112_1>=Xor && LA112_1<=131)))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:404:23: arrayEntry ( Comma arrayEntry )* ( Comma )?
					{
					DebugLocation(404, 23);
					PushFollow(Follow._arrayEntry_in_arrayDeclaration2199);
					arrayEntry390=arrayEntry();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry390.Tree);
					DebugLocation(404, 34);
					// Php.g:404:34: ( Comma arrayEntry )*
					try { DebugEnterSubRule(110);
					while (true)
					{
						int alt110=2;
						try { DebugEnterDecision(110, false);
						int LA110_1 = input.LA(1);

						if ((LA110_1==Comma))
						{
							int LA110_2 = input.LA(2);

							if (((LA110_2>=Abstract && LA110_2<=And)||(LA110_2>=ArrayType && LA110_2<=As)||LA110_2==Bang||(LA110_2>=BoolType && LA110_2<=Class)||LA110_2==Clone||(LA110_2>=Const && LA110_2<=Continue)||(LA110_2>=Default && LA110_2<=Die)||LA110_2==Do||(LA110_2>=DoubleQuotedString && LA110_2<=Empty)||(LA110_2>=Eval && LA110_2<=Exit)||(LA110_2>=Extends && LA110_2<=Foreach)||(LA110_2>=Function && LA110_2<=HaltCompiler)||LA110_2==HereDoc||(LA110_2>=If && LA110_2<=IncrementOperator)||(LA110_2>=Instanceof && LA110_2<=List)||LA110_2==Minus||(LA110_2>=Namespace && LA110_2<=Null)||LA110_2==ObjectType||(LA110_2>=OpenRoundBracket && LA110_2<=Or)||(LA110_2>=Plus && LA110_2<=Public)||(LA110_2>=Real && LA110_2<=Return)||LA110_2==SingleQuotedString||(LA110_2>=Static && LA110_2<=Try)||LA110_2==UnquotedString||(LA110_2>=UnsetType && LA110_2<=While)||(LA110_2>=Xor && LA110_2<=131)))
							{
								alt110 = 1;
							}


						}


						} finally { DebugExitDecision(110); }
						switch ( alt110 )
						{
						case 1:
							DebugEnterAlt(1);
							// Php.g:404:35: Comma arrayEntry
							{
							DebugLocation(404, 35);
							Comma391=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2202); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Comma391_tree = (object)adaptor.Create(Comma391);
							adaptor.AddChild(root_0, Comma391_tree);
							}
							DebugLocation(404, 41);
							PushFollow(Follow._arrayEntry_in_arrayDeclaration2204);
							arrayEntry392=arrayEntry();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry392.Tree);

							}
							break;

						default:
							goto loop110;
						}
					}

					loop110:
						;

					} finally { DebugExitSubRule(110); }

					DebugLocation(404, 54);
					// Php.g:404:54: ( Comma )?
					int alt111=2;
					try { DebugEnterSubRule(111);
					try { DebugEnterDecision(111, false);
					int LA111_1 = input.LA(1);

					if ((LA111_1==Comma))
					{
						alt111 = 1;
					}
					} finally { DebugExitDecision(111); }
					switch (alt111)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:404:54: Comma
						{
						DebugLocation(404, 54);
						Comma393=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2208); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma393_tree = (object)adaptor.Create(Comma393);
						adaptor.AddChild(root_0, Comma393_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(111); }


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(404, 63);
				CloseSquareBracket394=(IToken)Match(input,CloseSquareBracket,Follow._CloseSquareBracket_in_arrayDeclaration2213); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseSquareBracket394_tree = (object)adaptor.Create(CloseSquareBracket394);
				adaptor.AddChild(root_0, CloseSquareBracket394_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclaration", 62);
			LeaveRule("arrayDeclaration", 62);
			LeaveRule_arrayDeclaration();
			if (state.backtracking > 0) { Memoize(input, 62, arrayDeclaration_StartIndex); }

		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaration"); }
		return retval;

	}
	// $ANTLR end "arrayDeclaration"

	partial void EnterRule_arrayEntry();
	partial void LeaveRule_arrayEntry();
	// $ANTLR start "arrayEntry"
	// Php.g:407:1: arrayEntry : ( keyValuePair | expression ) ;
	[GrammarRule("arrayEntry")]
	private AstParserRuleReturnScope<object, IToken> arrayEntry()
	{
		EnterRule_arrayEntry();
		EnterRule("arrayEntry", 63);
		TraceIn("arrayEntry", 63);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayEntry_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> keyValuePair395 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression396 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "arrayEntry");
		DebugLocation(407, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// Php.g:408:2: ( ( keyValuePair | expression ) )
			DebugEnterAlt(1);
			// Php.g:408:4: ( keyValuePair | expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(408, 4);
			// Php.g:408:4: ( keyValuePair | expression )
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Bang:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Namespace:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 1;
				}
				else if ((true))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:408:5: keyValuePair
				{
				DebugLocation(408, 5);
				PushFollow(Follow._keyValuePair_in_arrayEntry2225);
				keyValuePair395=keyValuePair();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, keyValuePair395.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:408:20: expression
				{
				DebugLocation(408, 20);
				PushFollow(Follow._expression_in_arrayEntry2229);
				expression396=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression396.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayEntry", 63);
			LeaveRule("arrayEntry", 63);
			LeaveRule_arrayEntry();
			if (state.backtracking > 0) { Memoize(input, 63, arrayEntry_StartIndex); }

		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayEntry"); }
		return retval;

	}
	// $ANTLR end "arrayEntry"

	partial void EnterRule_keyValuePair();
	partial void LeaveRule_keyValuePair();
	// $ANTLR start "keyValuePair"
	// Php.g:411:1: keyValuePair : ( expression ArrayAssign expression ) ;
	[GrammarRule("keyValuePair")]
	private AstParserRuleReturnScope<object, IToken> keyValuePair()
	{
		EnterRule_keyValuePair();
		EnterRule("keyValuePair", 64);
		TraceIn("keyValuePair", 64);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int keyValuePair_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ArrayAssign398 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression397 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression399 = default(AstParserRuleReturnScope<object, IToken>);

		object ArrayAssign398_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "keyValuePair");
		DebugLocation(411, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// Php.g:412:2: ( ( expression ArrayAssign expression ) )
			DebugEnterAlt(1);
			// Php.g:412:4: ( expression ArrayAssign expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(412, 4);
			// Php.g:412:4: ( expression ArrayAssign expression )
			DebugEnterAlt(1);
			// Php.g:412:5: expression ArrayAssign expression
			{
			DebugLocation(412, 5);
			PushFollow(Follow._expression_in_keyValuePair2242);
			expression397=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression397.Tree);
			DebugLocation(412, 16);
			ArrayAssign398=(IToken)Match(input,ArrayAssign,Follow._ArrayAssign_in_keyValuePair2244); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ArrayAssign398_tree = (object)adaptor.Create(ArrayAssign398);
			adaptor.AddChild(root_0, ArrayAssign398_tree);
			}
			DebugLocation(412, 28);
			PushFollow(Follow._expression_in_keyValuePair2246);
			expression399=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression399.Tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyValuePair", 64);
			LeaveRule("keyValuePair", 64);
			LeaveRule_keyValuePair();
			if (state.backtracking > 0) { Memoize(input, 64, keyValuePair_StartIndex); }

		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "keyValuePair"); }
		return retval;

	}
	// $ANTLR end "keyValuePair"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Php.g:415:1: atom : ( SingleQuotedString | DoubleQuotedString | HereDoc | ( Plus | Minus )? Integer | ( Plus | Minus )? Real | boolean | Null | arrayDeclaration | requireOperator expression | constantOrStaticAccessor );
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<object, IToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 65);
		TraceIn("atom", 65);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atom_StartIndex = input.Index;

		object root_0 = default(object);

		IToken SingleQuotedString400 = default(IToken);
		IToken DoubleQuotedString401 = default(IToken);
		IToken HereDoc402 = default(IToken);
		IToken set403 = default(IToken);
		IToken Integer404 = default(IToken);
		IToken set405 = default(IToken);
		IToken Real406 = default(IToken);
		IToken Null408 = default(IToken);
		AstParserRuleReturnScope<object, IToken> boolean407 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayDeclaration409 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> requireOperator410 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression411 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constantOrStaticAccessor412 = default(AstParserRuleReturnScope<object, IToken>);

		object SingleQuotedString400_tree = default(object);
		object DoubleQuotedString401_tree = default(object);
		object HereDoc402_tree = default(object);
		object set403_tree = default(object);
		object Integer404_tree = default(object);
		object set405_tree = default(object);
		object Real406_tree = default(object);
		object Null408_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(415, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// Php.g:415:5: ( SingleQuotedString | DoubleQuotedString | HereDoc | ( Plus | Minus )? Integer | ( Plus | Minus )? Real | boolean | Null | arrayDeclaration | requireOperator expression | constantOrStaticAccessor )
			int alt117=10;
			try { DebugEnterDecision(117, false);
			switch (input.LA(1))
			{
			case SingleQuotedString:
				{
				alt117 = 1;
				}
				break;
			case DoubleQuotedString:
				{
				alt117 = 2;
				}
				break;
			case HereDoc:
				{
				alt117 = 3;
				}
				break;
			case Minus:
			case Plus:
				{
				int LA117_2 = input.LA(2);

				if ((EvaluatePredicate(synpred185_Php_fragment)))
				{
					alt117 = 4;
				}
				else if ((EvaluatePredicate(synpred188_Php_fragment)))
				{
					alt117 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				alt117 = 4;
				}
				break;
			case Real:
				{
				alt117 = 5;
				}
				break;
			case False:
			case True:
				{
				int LA117_2 = input.LA(2);

				if ((EvaluatePredicate(synpred189_Php_fragment)))
				{
					alt117 = 6;
				}
				else if ((true))
				{
					alt117 = 10;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA117_2 = input.LA(2);

				if ((EvaluatePredicate(synpred190_Php_fragment)))
				{
					alt117 = 7;
				}
				else if ((true))
				{
					alt117 = 10;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
			case OpenSquareBracket:
				{
				alt117 = 8;
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA117_2 = input.LA(2);

				if ((EvaluatePredicate(synpred192_Php_fragment)))
				{
					alt117 = 9;
				}
				else if ((true))
				{
					alt117 = 10;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case VariableName:
			case While:
			case Xor:
			case 130:
			case 131:
				{
				alt117 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:415:7: SingleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(415, 7);
				SingleQuotedString400=(IToken)Match(input,SingleQuotedString,Follow._SingleQuotedString_in_atom2256); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SingleQuotedString400_tree = (object)adaptor.Create(SingleQuotedString400);
				adaptor.AddChild(root_0, SingleQuotedString400_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:416:4: DoubleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(416, 4);
				DoubleQuotedString401=(IToken)Match(input,DoubleQuotedString,Follow._DoubleQuotedString_in_atom2261); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DoubleQuotedString401_tree = (object)adaptor.Create(DoubleQuotedString401);
				adaptor.AddChild(root_0, DoubleQuotedString401_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:417:4: HereDoc
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(417, 4);
				HereDoc402=(IToken)Match(input,HereDoc,Follow._HereDoc_in_atom2266); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HereDoc402_tree = (object)adaptor.Create(HereDoc402);
				adaptor.AddChild(root_0, HereDoc402_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:418:4: ( Plus | Minus )? Integer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 4);
				// Php.g:418:4: ( Plus | Minus )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, false);
				int LA115_1 = input.LA(1);

				if ((LA115_1==Minus||LA115_1==Plus))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:
					{
					DebugLocation(418, 4);

					set403=(IToken)input.LT(1);
					if (input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set403));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(418, 18);
				Integer404=(IToken)Match(input,Integer,Follow._Integer_in_atom2278); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Integer404_tree = (object)adaptor.Create(Integer404);
				adaptor.AddChild(root_0, Integer404_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:419:4: ( Plus | Minus )? Real
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(419, 4);
				// Php.g:419:4: ( Plus | Minus )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==Minus||LA116_1==Plus))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:
					{
					DebugLocation(419, 4);

					set405=(IToken)input.LT(1);
					if (input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set405));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(419, 18);
				Real406=(IToken)Match(input,Real,Follow._Real_in_atom2290); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Real406_tree = (object)adaptor.Create(Real406);
				adaptor.AddChild(root_0, Real406_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Php.g:420:4: boolean
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(420, 4);
				PushFollow(Follow._boolean_in_atom2295);
				boolean407=boolean();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolean407.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Php.g:421:4: Null
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(421, 4);
				Null408=(IToken)Match(input,Null,Follow._Null_in_atom2300); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Null408_tree = (object)adaptor.Create(Null408);
				adaptor.AddChild(root_0, Null408_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Php.g:422:4: arrayDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(422, 4);
				PushFollow(Follow._arrayDeclaration_in_atom2305);
				arrayDeclaration409=arrayDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaration409.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Php.g:423:4: requireOperator expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(423, 4);
				PushFollow(Follow._requireOperator_in_atom2310);
				requireOperator410=requireOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, requireOperator410.Tree);
				DebugLocation(423, 20);
				PushFollow(Follow._expression_in_atom2312);
				expression411=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression411.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Php.g:424:4: constantOrStaticAccessor
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(424, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_atom2317);
				constantOrStaticAccessor412=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor412.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 65);
			LeaveRule("atom", 65);
			LeaveRule_atom();
			if (state.backtracking > 0) { Memoize(input, 65, atom_StartIndex); }

		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_functionArguments();
	partial void LeaveRule_functionArguments();
	// $ANTLR start "functionArguments"
	// Php.g:427:1: functionArguments : OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket ;
	[GrammarRule("functionArguments")]
	private AstParserRuleReturnScope<object, IToken> functionArguments()
	{
		EnterRule_functionArguments();
		EnterRule("functionArguments", 66);
		TraceIn("functionArguments", 66);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int functionArguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket413 = default(IToken);
		IToken Comma415 = default(IToken);
		IToken CloseRoundBracket417 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression414 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression416 = default(AstParserRuleReturnScope<object, IToken>);

		object OpenRoundBracket413_tree = default(object);
		object Comma415_tree = default(object);
		object CloseRoundBracket417_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionArguments");
		DebugLocation(427, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// Php.g:428:2: ( OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// Php.g:428:4: OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(428, 4);
			OpenRoundBracket413=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_functionArguments2328); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenRoundBracket413_tree = (object)adaptor.Create(OpenRoundBracket413);
			adaptor.AddChild(root_0, OpenRoundBracket413_tree);
			}
			DebugLocation(428, 21);
			// Php.g:428:21: ( expression ( Comma expression )* )?
			int alt119=2;
			try { DebugEnterSubRule(119);
			try { DebugEnterDecision(119, false);
			int LA119_1 = input.LA(1);

			if (((LA119_1>=Abstract && LA119_1<=And)||(LA119_1>=ArrayType && LA119_1<=As)||LA119_1==Bang||(LA119_1>=BoolType && LA119_1<=Class)||LA119_1==Clone||(LA119_1>=Const && LA119_1<=Continue)||(LA119_1>=Default && LA119_1<=Die)||LA119_1==Do||(LA119_1>=DoubleQuotedString && LA119_1<=Empty)||(LA119_1>=Eval && LA119_1<=Exit)||(LA119_1>=Extends && LA119_1<=Foreach)||(LA119_1>=Function && LA119_1<=HaltCompiler)||LA119_1==HereDoc||(LA119_1>=If && LA119_1<=IncrementOperator)||(LA119_1>=Instanceof && LA119_1<=List)||LA119_1==Minus||(LA119_1>=Namespace && LA119_1<=Null)||LA119_1==ObjectType||(LA119_1>=OpenRoundBracket && LA119_1<=Or)||(LA119_1>=Plus && LA119_1<=Public)||(LA119_1>=Real && LA119_1<=Return)||LA119_1==SingleQuotedString||(LA119_1>=Static && LA119_1<=Try)||LA119_1==UnquotedString||(LA119_1>=UnsetType && LA119_1<=While)||(LA119_1>=Xor && LA119_1<=131)))
			{
				alt119 = 1;
			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:428:22: expression ( Comma expression )*
				{
				DebugLocation(428, 22);
				PushFollow(Follow._expression_in_functionArguments2331);
				expression414=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression414.Tree);
				DebugLocation(428, 33);
				// Php.g:428:33: ( Comma expression )*
				try { DebugEnterSubRule(118);
				while (true)
				{
					int alt118=2;
					try { DebugEnterDecision(118, false);
					int LA118_1 = input.LA(1);

					if ((LA118_1==Comma))
					{
						alt118 = 1;
					}


					} finally { DebugExitDecision(118); }
					switch ( alt118 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:428:34: Comma expression
						{
						DebugLocation(428, 34);
						Comma415=(IToken)Match(input,Comma,Follow._Comma_in_functionArguments2334); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma415_tree = (object)adaptor.Create(Comma415);
						adaptor.AddChild(root_0, Comma415_tree);
						}
						DebugLocation(428, 40);
						PushFollow(Follow._expression_in_functionArguments2336);
						expression416=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression416.Tree);

						}
						break;

					default:
						goto loop118;
					}
				}

				loop118:
					;

				} finally { DebugExitSubRule(118); }


				}
				break;

			}
			} finally { DebugExitSubRule(119); }

			DebugLocation(428, 55);
			CloseRoundBracket417=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_functionArguments2342); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseRoundBracket417_tree = (object)adaptor.Create(CloseRoundBracket417);
			adaptor.AddChild(root_0, CloseRoundBracket417_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionArguments", 66);
			LeaveRule("functionArguments", 66);
			LeaveRule_functionArguments();
			if (state.backtracking > 0) { Memoize(input, 66, functionArguments_StartIndex); }

		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "functionArguments"); }
		return retval;

	}
	// $ANTLR end "functionArguments"

	partial void EnterRule_indexer();
	partial void LeaveRule_indexer();
	// $ANTLR start "indexer"
	// Php.g:431:1: indexer : ( OpenSquareBracket ( expression )? CloseSquareBracket | OpenCurlyBracket ( expression )? CloseCurlyBracket );
	[GrammarRule("indexer")]
	private AstParserRuleReturnScope<object, IToken> indexer()
	{
		EnterRule_indexer();
		EnterRule("indexer", 67);
		TraceIn("indexer", 67);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int indexer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenSquareBracket418 = default(IToken);
		IToken CloseSquareBracket420 = default(IToken);
		IToken OpenCurlyBracket421 = default(IToken);
		IToken CloseCurlyBracket423 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression419 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression422 = default(AstParserRuleReturnScope<object, IToken>);

		object OpenSquareBracket418_tree = default(object);
		object CloseSquareBracket420_tree = default(object);
		object OpenCurlyBracket421_tree = default(object);
		object CloseCurlyBracket423_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "indexer");
		DebugLocation(431, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// Php.g:432:2: ( OpenSquareBracket ( expression )? CloseSquareBracket | OpenCurlyBracket ( expression )? CloseCurlyBracket )
			int alt122=2;
			try { DebugEnterDecision(122, false);
			int LA122_1 = input.LA(1);

			if ((LA122_1==OpenSquareBracket))
			{
				alt122 = 1;
			}
			else if ((LA122_1==OpenCurlyBracket))
			{
				alt122 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:432:4: OpenSquareBracket ( expression )? CloseSquareBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(432, 4);
				OpenSquareBracket418=(IToken)Match(input,OpenSquareBracket,Follow._OpenSquareBracket_in_indexer2353); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenSquareBracket418_tree = (object)adaptor.Create(OpenSquareBracket418);
				adaptor.AddChild(root_0, OpenSquareBracket418_tree);
				}
				DebugLocation(432, 22);
				// Php.g:432:22: ( expression )?
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				int LA120_1 = input.LA(1);

				if (((LA120_1>=Abstract && LA120_1<=And)||(LA120_1>=ArrayType && LA120_1<=As)||LA120_1==Bang||(LA120_1>=BoolType && LA120_1<=Class)||LA120_1==Clone||(LA120_1>=Const && LA120_1<=Continue)||(LA120_1>=Default && LA120_1<=Die)||LA120_1==Do||(LA120_1>=DoubleQuotedString && LA120_1<=Empty)||(LA120_1>=Eval && LA120_1<=Exit)||(LA120_1>=Extends && LA120_1<=Foreach)||(LA120_1>=Function && LA120_1<=HaltCompiler)||LA120_1==HereDoc||(LA120_1>=If && LA120_1<=IncrementOperator)||(LA120_1>=Instanceof && LA120_1<=List)||LA120_1==Minus||(LA120_1>=Namespace && LA120_1<=Null)||LA120_1==ObjectType||(LA120_1>=OpenRoundBracket && LA120_1<=Or)||(LA120_1>=Plus && LA120_1<=Public)||(LA120_1>=Real && LA120_1<=Return)||LA120_1==SingleQuotedString||(LA120_1>=Static && LA120_1<=Try)||LA120_1==UnquotedString||(LA120_1>=UnsetType && LA120_1<=While)||(LA120_1>=Xor && LA120_1<=131)))
				{
					alt120 = 1;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:432:22: expression
					{
					DebugLocation(432, 22);
					PushFollow(Follow._expression_in_indexer2355);
					expression419=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression419.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(120); }

				DebugLocation(432, 34);
				CloseSquareBracket420=(IToken)Match(input,CloseSquareBracket,Follow._CloseSquareBracket_in_indexer2358); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseSquareBracket420_tree = (object)adaptor.Create(CloseSquareBracket420);
				adaptor.AddChild(root_0, CloseSquareBracket420_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:433:4: OpenCurlyBracket ( expression )? CloseCurlyBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(433, 4);
				OpenCurlyBracket421=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_indexer2363); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenCurlyBracket421_tree = (object)adaptor.Create(OpenCurlyBracket421);
				adaptor.AddChild(root_0, OpenCurlyBracket421_tree);
				}
				DebugLocation(433, 21);
				// Php.g:433:21: ( expression )?
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if (((LA121_1>=Abstract && LA121_1<=And)||(LA121_1>=ArrayType && LA121_1<=As)||LA121_1==Bang||(LA121_1>=BoolType && LA121_1<=Class)||LA121_1==Clone||(LA121_1>=Const && LA121_1<=Continue)||(LA121_1>=Default && LA121_1<=Die)||LA121_1==Do||(LA121_1>=DoubleQuotedString && LA121_1<=Empty)||(LA121_1>=Eval && LA121_1<=Exit)||(LA121_1>=Extends && LA121_1<=Foreach)||(LA121_1>=Function && LA121_1<=HaltCompiler)||LA121_1==HereDoc||(LA121_1>=If && LA121_1<=IncrementOperator)||(LA121_1>=Instanceof && LA121_1<=List)||LA121_1==Minus||(LA121_1>=Namespace && LA121_1<=Null)||LA121_1==ObjectType||(LA121_1>=OpenRoundBracket && LA121_1<=Or)||(LA121_1>=Plus && LA121_1<=Public)||(LA121_1>=Real && LA121_1<=Return)||LA121_1==SingleQuotedString||(LA121_1>=Static && LA121_1<=Try)||LA121_1==UnquotedString||(LA121_1>=UnsetType && LA121_1<=While)||(LA121_1>=Xor && LA121_1<=131)))
				{
					alt121 = 1;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:433:21: expression
					{
					DebugLocation(433, 21);
					PushFollow(Follow._expression_in_indexer2365);
					expression422=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression422.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(121); }

				DebugLocation(433, 33);
				CloseCurlyBracket423=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_indexer2368); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseCurlyBracket423_tree = (object)adaptor.Create(CloseCurlyBracket423);
				adaptor.AddChild(root_0, CloseCurlyBracket423_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexer", 67);
			LeaveRule("indexer", 67);
			LeaveRule_indexer();
			if (state.backtracking > 0) { Memoize(input, 67, indexer_StartIndex); }

		}
		DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "indexer"); }
		return retval;

	}
	// $ANTLR end "indexer"

	partial void EnterRule_memberAccess();
	partial void LeaveRule_memberAccess();
	// $ANTLR start "memberAccess"
	// Php.g:437:1: memberAccess : '->' ( expression | '{' expression '}' | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Use ) ;
	[GrammarRule("memberAccess")]
	private AstParserRuleReturnScope<object, IToken> memberAccess()
	{
		EnterRule_memberAccess();
		EnterRule("memberAccess", 68);
		TraceIn("memberAccess", 68);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int memberAccess_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal424 = default(IToken);
		IToken char_literal426 = default(IToken);
		IToken char_literal428 = default(IToken);
		IToken New429 = default(IToken);
		IToken Clone430 = default(IToken);
		IToken Echo431 = default(IToken);
		IToken Print432 = default(IToken);
		IToken If433 = default(IToken);
		IToken Else434 = default(IToken);
		IToken ElseIf435 = default(IToken);
		IToken For436 = default(IToken);
		IToken Foreach437 = default(IToken);
		IToken While438 = default(IToken);
		IToken Do439 = default(IToken);
		IToken Try440 = default(IToken);
		IToken Catch441 = default(IToken);
		IToken Finally442 = default(IToken);
		IToken Switch443 = default(IToken);
		IToken Case444 = default(IToken);
		IToken Default445 = default(IToken);
		IToken Namespace446 = default(IToken);
		IToken Function447 = default(IToken);
		IToken Break448 = default(IToken);
		IToken Continue449 = default(IToken);
		IToken Goto450 = default(IToken);
		IToken Return451 = default(IToken);
		IToken Throw452 = default(IToken);
		IToken Global453 = default(IToken);
		IToken Static454 = default(IToken);
		IToken And455 = default(IToken);
		IToken Or456 = default(IToken);
		IToken Xor457 = default(IToken);
		IToken Instanceof458 = default(IToken);
		IToken Null459 = default(IToken);
		IToken List460 = default(IToken);
		IToken Class461 = default(IToken);
		IToken Interface462 = default(IToken);
		IToken Extends463 = default(IToken);
		IToken Implements464 = default(IToken);
		IToken Abstract465 = default(IToken);
		IToken Var466 = default(IToken);
		IToken Const467 = default(IToken);
		IToken As468 = default(IToken);
		IToken Require469 = default(IToken);
		IToken RequireOnce470 = default(IToken);
		IToken Include471 = default(IToken);
		IToken IncludeOnce472 = default(IToken);
		IToken Public473 = default(IToken);
		IToken Private474 = default(IToken);
		IToken Protected475 = default(IToken);
		IToken True476 = default(IToken);
		IToken False477 = default(IToken);
		IToken HaltCompiler478 = default(IToken);
		IToken Die479 = default(IToken);
		IToken Empty480 = default(IToken);
		IToken Exit481 = default(IToken);
		IToken Eval482 = default(IToken);
		IToken Isset483 = default(IToken);
		IToken IntType484 = default(IToken);
		IToken IntegerType485 = default(IToken);
		IToken BoolType486 = default(IToken);
		IToken BooleanType487 = default(IToken);
		IToken FloatType488 = default(IToken);
		IToken DoubleType489 = default(IToken);
		IToken RealType490 = default(IToken);
		IToken StringType491 = default(IToken);
		IToken ObjectType492 = default(IToken);
		IToken Use493 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression425 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression427 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal424_tree = default(object);
		object char_literal426_tree = default(object);
		object char_literal428_tree = default(object);
		object New429_tree = default(object);
		object Clone430_tree = default(object);
		object Echo431_tree = default(object);
		object Print432_tree = default(object);
		object If433_tree = default(object);
		object Else434_tree = default(object);
		object ElseIf435_tree = default(object);
		object For436_tree = default(object);
		object Foreach437_tree = default(object);
		object While438_tree = default(object);
		object Do439_tree = default(object);
		object Try440_tree = default(object);
		object Catch441_tree = default(object);
		object Finally442_tree = default(object);
		object Switch443_tree = default(object);
		object Case444_tree = default(object);
		object Default445_tree = default(object);
		object Namespace446_tree = default(object);
		object Function447_tree = default(object);
		object Break448_tree = default(object);
		object Continue449_tree = default(object);
		object Goto450_tree = default(object);
		object Return451_tree = default(object);
		object Throw452_tree = default(object);
		object Global453_tree = default(object);
		object Static454_tree = default(object);
		object And455_tree = default(object);
		object Or456_tree = default(object);
		object Xor457_tree = default(object);
		object Instanceof458_tree = default(object);
		object Null459_tree = default(object);
		object List460_tree = default(object);
		object Class461_tree = default(object);
		object Interface462_tree = default(object);
		object Extends463_tree = default(object);
		object Implements464_tree = default(object);
		object Abstract465_tree = default(object);
		object Var466_tree = default(object);
		object Const467_tree = default(object);
		object As468_tree = default(object);
		object Require469_tree = default(object);
		object RequireOnce470_tree = default(object);
		object Include471_tree = default(object);
		object IncludeOnce472_tree = default(object);
		object Public473_tree = default(object);
		object Private474_tree = default(object);
		object Protected475_tree = default(object);
		object True476_tree = default(object);
		object False477_tree = default(object);
		object HaltCompiler478_tree = default(object);
		object Die479_tree = default(object);
		object Empty480_tree = default(object);
		object Exit481_tree = default(object);
		object Eval482_tree = default(object);
		object Isset483_tree = default(object);
		object IntType484_tree = default(object);
		object IntegerType485_tree = default(object);
		object BoolType486_tree = default(object);
		object BooleanType487_tree = default(object);
		object FloatType488_tree = default(object);
		object DoubleType489_tree = default(object);
		object RealType490_tree = default(object);
		object StringType491_tree = default(object);
		object ObjectType492_tree = default(object);
		object Use493_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "memberAccess");
		DebugLocation(437, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// Php.g:438:2: ( '->' ( expression | '{' expression '}' | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Use ) )
			DebugEnterAlt(1);
			// Php.g:438:4: '->' ( expression | '{' expression '}' | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Use )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(438, 4);
			string_literal424=(IToken)Match(input,InstanceMember,Follow._InstanceMember_in_memberAccess2380); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal424_tree = (object)adaptor.Create(string_literal424);
			adaptor.AddChild(root_0, string_literal424_tree);
			}
			DebugLocation(438, 9);
			// Php.g:438:9: ( expression | '{' expression '}' | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Use )
			int alt123=67;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, false);
			try
			{
				alt123 = dfa123.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:438:10: expression
				{
				DebugLocation(438, 10);
				PushFollow(Follow._expression_in_memberAccess2383);
				expression425=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression425.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:438:23: '{' expression '}'
				{
				DebugLocation(438, 23);
				char_literal426=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_memberAccess2387); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal426_tree = (object)adaptor.Create(char_literal426);
				adaptor.AddChild(root_0, char_literal426_tree);
				}
				DebugLocation(438, 27);
				PushFollow(Follow._expression_in_memberAccess2389);
				expression427=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression427.Tree);
				DebugLocation(438, 38);
				char_literal428=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_memberAccess2391); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal428_tree = (object)adaptor.Create(char_literal428);
				adaptor.AddChild(root_0, char_literal428_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:439:6: New
				{
				DebugLocation(439, 6);
				New429=(IToken)Match(input,New,Follow._New_in_memberAccess2398); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New429_tree = (object)adaptor.Create(New429);
				adaptor.AddChild(root_0, New429_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:439:10: Clone
				{
				DebugLocation(439, 10);
				Clone430=(IToken)Match(input,Clone,Follow._Clone_in_memberAccess2400); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Clone430_tree = (object)adaptor.Create(Clone430);
				adaptor.AddChild(root_0, Clone430_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:439:16: Echo
				{
				DebugLocation(439, 16);
				Echo431=(IToken)Match(input,Echo,Follow._Echo_in_memberAccess2402); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Echo431_tree = (object)adaptor.Create(Echo431);
				adaptor.AddChild(root_0, Echo431_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Php.g:439:21: Print
				{
				DebugLocation(439, 21);
				Print432=(IToken)Match(input,Print,Follow._Print_in_memberAccess2404); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Print432_tree = (object)adaptor.Create(Print432);
				adaptor.AddChild(root_0, Print432_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Php.g:439:27: If
				{
				DebugLocation(439, 27);
				If433=(IToken)Match(input,If,Follow._If_in_memberAccess2406); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If433_tree = (object)adaptor.Create(If433);
				adaptor.AddChild(root_0, If433_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Php.g:439:30: Else
				{
				DebugLocation(439, 30);
				Else434=(IToken)Match(input,Else,Follow._Else_in_memberAccess2408); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else434_tree = (object)adaptor.Create(Else434);
				adaptor.AddChild(root_0, Else434_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Php.g:439:35: ElseIf
				{
				DebugLocation(439, 35);
				ElseIf435=(IToken)Match(input,ElseIf,Follow._ElseIf_in_memberAccess2410); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf435_tree = (object)adaptor.Create(ElseIf435);
				adaptor.AddChild(root_0, ElseIf435_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Php.g:439:42: For
				{
				DebugLocation(439, 42);
				For436=(IToken)Match(input,For,Follow._For_in_memberAccess2412); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For436_tree = (object)adaptor.Create(For436);
				adaptor.AddChild(root_0, For436_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Php.g:439:46: Foreach
				{
				DebugLocation(439, 46);
				Foreach437=(IToken)Match(input,Foreach,Follow._Foreach_in_memberAccess2414); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach437_tree = (object)adaptor.Create(Foreach437);
				adaptor.AddChild(root_0, Foreach437_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Php.g:439:54: While
				{
				DebugLocation(439, 54);
				While438=(IToken)Match(input,While,Follow._While_in_memberAccess2416); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While438_tree = (object)adaptor.Create(While438);
				adaptor.AddChild(root_0, While438_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Php.g:439:60: Do
				{
				DebugLocation(439, 60);
				Do439=(IToken)Match(input,Do,Follow._Do_in_memberAccess2418); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Do439_tree = (object)adaptor.Create(Do439);
				adaptor.AddChild(root_0, Do439_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Php.g:439:63: Try
				{
				DebugLocation(439, 63);
				Try440=(IToken)Match(input,Try,Follow._Try_in_memberAccess2420); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Try440_tree = (object)adaptor.Create(Try440);
				adaptor.AddChild(root_0, Try440_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Php.g:439:67: Catch
				{
				DebugLocation(439, 67);
				Catch441=(IToken)Match(input,Catch,Follow._Catch_in_memberAccess2422); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Catch441_tree = (object)adaptor.Create(Catch441);
				adaptor.AddChild(root_0, Catch441_tree);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Php.g:439:73: Finally
				{
				DebugLocation(439, 73);
				Finally442=(IToken)Match(input,Finally,Follow._Finally_in_memberAccess2424); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Finally442_tree = (object)adaptor.Create(Finally442);
				adaptor.AddChild(root_0, Finally442_tree);
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Php.g:439:81: Switch
				{
				DebugLocation(439, 81);
				Switch443=(IToken)Match(input,Switch,Follow._Switch_in_memberAccess2426); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Switch443_tree = (object)adaptor.Create(Switch443);
				adaptor.AddChild(root_0, Switch443_tree);
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// Php.g:439:88: Case
				{
				DebugLocation(439, 88);
				Case444=(IToken)Match(input,Case,Follow._Case_in_memberAccess2428); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Case444_tree = (object)adaptor.Create(Case444);
				adaptor.AddChild(root_0, Case444_tree);
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// Php.g:439:93: Default
				{
				DebugLocation(439, 93);
				Default445=(IToken)Match(input,Default,Follow._Default_in_memberAccess2430); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Default445_tree = (object)adaptor.Create(Default445);
				adaptor.AddChild(root_0, Default445_tree);
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// Php.g:439:101: Namespace
				{
				DebugLocation(439, 101);
				Namespace446=(IToken)Match(input,Namespace,Follow._Namespace_in_memberAccess2432); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Namespace446_tree = (object)adaptor.Create(Namespace446);
				adaptor.AddChild(root_0, Namespace446_tree);
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// Php.g:439:111: Function
				{
				DebugLocation(439, 111);
				Function447=(IToken)Match(input,Function,Follow._Function_in_memberAccess2434); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function447_tree = (object)adaptor.Create(Function447);
				adaptor.AddChild(root_0, Function447_tree);
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// Php.g:439:120: Break
				{
				DebugLocation(439, 120);
				Break448=(IToken)Match(input,Break,Follow._Break_in_memberAccess2436); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Break448_tree = (object)adaptor.Create(Break448);
				adaptor.AddChild(root_0, Break448_tree);
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// Php.g:439:126: Continue
				{
				DebugLocation(439, 126);
				Continue449=(IToken)Match(input,Continue,Follow._Continue_in_memberAccess2438); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Continue449_tree = (object)adaptor.Create(Continue449);
				adaptor.AddChild(root_0, Continue449_tree);
				}

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// Php.g:439:135: Goto
				{
				DebugLocation(439, 135);
				Goto450=(IToken)Match(input,Goto,Follow._Goto_in_memberAccess2440); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto450_tree = (object)adaptor.Create(Goto450);
				adaptor.AddChild(root_0, Goto450_tree);
				}

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// Php.g:439:140: Return
				{
				DebugLocation(439, 140);
				Return451=(IToken)Match(input,Return,Follow._Return_in_memberAccess2442); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Return451_tree = (object)adaptor.Create(Return451);
				adaptor.AddChild(root_0, Return451_tree);
				}

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// Php.g:439:147: Throw
				{
				DebugLocation(439, 147);
				Throw452=(IToken)Match(input,Throw,Follow._Throw_in_memberAccess2444); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Throw452_tree = (object)adaptor.Create(Throw452);
				adaptor.AddChild(root_0, Throw452_tree);
				}

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// Php.g:439:153: Global
				{
				DebugLocation(439, 153);
				Global453=(IToken)Match(input,Global,Follow._Global_in_memberAccess2446); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Global453_tree = (object)adaptor.Create(Global453);
				adaptor.AddChild(root_0, Global453_tree);
				}

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// Php.g:439:160: Static
				{
				DebugLocation(439, 160);
				Static454=(IToken)Match(input,Static,Follow._Static_in_memberAccess2448); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static454_tree = (object)adaptor.Create(Static454);
				adaptor.AddChild(root_0, Static454_tree);
				}

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// Php.g:439:167: And
				{
				DebugLocation(439, 167);
				And455=(IToken)Match(input,And,Follow._And_in_memberAccess2450); if (state.failed) return retval;
				if (state.backtracking == 0) {
				And455_tree = (object)adaptor.Create(And455);
				adaptor.AddChild(root_0, And455_tree);
				}

				}
				break;
			case 30:
				DebugEnterAlt(30);
				// Php.g:439:171: Or
				{
				DebugLocation(439, 171);
				Or456=(IToken)Match(input,Or,Follow._Or_in_memberAccess2452); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Or456_tree = (object)adaptor.Create(Or456);
				adaptor.AddChild(root_0, Or456_tree);
				}

				}
				break;
			case 31:
				DebugEnterAlt(31);
				// Php.g:439:174: Xor
				{
				DebugLocation(439, 174);
				Xor457=(IToken)Match(input,Xor,Follow._Xor_in_memberAccess2454); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Xor457_tree = (object)adaptor.Create(Xor457);
				adaptor.AddChild(root_0, Xor457_tree);
				}

				}
				break;
			case 32:
				DebugEnterAlt(32);
				// Php.g:439:178: Instanceof
				{
				DebugLocation(439, 178);
				Instanceof458=(IToken)Match(input,Instanceof,Follow._Instanceof_in_memberAccess2456); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Instanceof458_tree = (object)adaptor.Create(Instanceof458);
				adaptor.AddChild(root_0, Instanceof458_tree);
				}

				}
				break;
			case 33:
				DebugEnterAlt(33);
				// Php.g:439:189: Null
				{
				DebugLocation(439, 189);
				Null459=(IToken)Match(input,Null,Follow._Null_in_memberAccess2458); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Null459_tree = (object)adaptor.Create(Null459);
				adaptor.AddChild(root_0, Null459_tree);
				}

				}
				break;
			case 34:
				DebugEnterAlt(34);
				// Php.g:439:194: List
				{
				DebugLocation(439, 194);
				List460=(IToken)Match(input,List,Follow._List_in_memberAccess2460); if (state.failed) return retval;
				if (state.backtracking == 0) {
				List460_tree = (object)adaptor.Create(List460);
				adaptor.AddChild(root_0, List460_tree);
				}

				}
				break;
			case 35:
				DebugEnterAlt(35);
				// Php.g:439:199: Class
				{
				DebugLocation(439, 199);
				Class461=(IToken)Match(input,Class,Follow._Class_in_memberAccess2462); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Class461_tree = (object)adaptor.Create(Class461);
				adaptor.AddChild(root_0, Class461_tree);
				}

				}
				break;
			case 36:
				DebugEnterAlt(36);
				// Php.g:439:205: Interface
				{
				DebugLocation(439, 205);
				Interface462=(IToken)Match(input,Interface,Follow._Interface_in_memberAccess2464); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Interface462_tree = (object)adaptor.Create(Interface462);
				adaptor.AddChild(root_0, Interface462_tree);
				}

				}
				break;
			case 37:
				DebugEnterAlt(37);
				// Php.g:439:215: Extends
				{
				DebugLocation(439, 215);
				Extends463=(IToken)Match(input,Extends,Follow._Extends_in_memberAccess2466); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Extends463_tree = (object)adaptor.Create(Extends463);
				adaptor.AddChild(root_0, Extends463_tree);
				}

				}
				break;
			case 38:
				DebugEnterAlt(38);
				// Php.g:439:223: Implements
				{
				DebugLocation(439, 223);
				Implements464=(IToken)Match(input,Implements,Follow._Implements_in_memberAccess2468); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Implements464_tree = (object)adaptor.Create(Implements464);
				adaptor.AddChild(root_0, Implements464_tree);
				}

				}
				break;
			case 39:
				DebugEnterAlt(39);
				// Php.g:439:234: Abstract
				{
				DebugLocation(439, 234);
				Abstract465=(IToken)Match(input,Abstract,Follow._Abstract_in_memberAccess2470); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Abstract465_tree = (object)adaptor.Create(Abstract465);
				adaptor.AddChild(root_0, Abstract465_tree);
				}

				}
				break;
			case 40:
				DebugEnterAlt(40);
				// Php.g:439:243: Var
				{
				DebugLocation(439, 243);
				Var466=(IToken)Match(input,Var,Follow._Var_in_memberAccess2472); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Var466_tree = (object)adaptor.Create(Var466);
				adaptor.AddChild(root_0, Var466_tree);
				}

				}
				break;
			case 41:
				DebugEnterAlt(41);
				// Php.g:439:247: Const
				{
				DebugLocation(439, 247);
				Const467=(IToken)Match(input,Const,Follow._Const_in_memberAccess2474); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Const467_tree = (object)adaptor.Create(Const467);
				adaptor.AddChild(root_0, Const467_tree);
				}

				}
				break;
			case 42:
				DebugEnterAlt(42);
				// Php.g:439:253: As
				{
				DebugLocation(439, 253);
				As468=(IToken)Match(input,As,Follow._As_in_memberAccess2476); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As468_tree = (object)adaptor.Create(As468);
				adaptor.AddChild(root_0, As468_tree);
				}

				}
				break;
			case 43:
				DebugEnterAlt(43);
				// Php.g:439:256: Require
				{
				DebugLocation(439, 256);
				Require469=(IToken)Match(input,Require,Follow._Require_in_memberAccess2478); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Require469_tree = (object)adaptor.Create(Require469);
				adaptor.AddChild(root_0, Require469_tree);
				}

				}
				break;
			case 44:
				DebugEnterAlt(44);
				// Php.g:439:264: RequireOnce
				{
				DebugLocation(439, 264);
				RequireOnce470=(IToken)Match(input,RequireOnce,Follow._RequireOnce_in_memberAccess2480); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RequireOnce470_tree = (object)adaptor.Create(RequireOnce470);
				adaptor.AddChild(root_0, RequireOnce470_tree);
				}

				}
				break;
			case 45:
				DebugEnterAlt(45);
				// Php.g:439:276: Include
				{
				DebugLocation(439, 276);
				Include471=(IToken)Match(input,Include,Follow._Include_in_memberAccess2482); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Include471_tree = (object)adaptor.Create(Include471);
				adaptor.AddChild(root_0, Include471_tree);
				}

				}
				break;
			case 46:
				DebugEnterAlt(46);
				// Php.g:439:284: IncludeOnce
				{
				DebugLocation(439, 284);
				IncludeOnce472=(IToken)Match(input,IncludeOnce,Follow._IncludeOnce_in_memberAccess2484); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncludeOnce472_tree = (object)adaptor.Create(IncludeOnce472);
				adaptor.AddChild(root_0, IncludeOnce472_tree);
				}

				}
				break;
			case 47:
				DebugEnterAlt(47);
				// Php.g:439:296: Public
				{
				DebugLocation(439, 296);
				Public473=(IToken)Match(input,Public,Follow._Public_in_memberAccess2486); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Public473_tree = (object)adaptor.Create(Public473);
				adaptor.AddChild(root_0, Public473_tree);
				}

				}
				break;
			case 48:
				DebugEnterAlt(48);
				// Php.g:439:303: Private
				{
				DebugLocation(439, 303);
				Private474=(IToken)Match(input,Private,Follow._Private_in_memberAccess2488); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Private474_tree = (object)adaptor.Create(Private474);
				adaptor.AddChild(root_0, Private474_tree);
				}

				}
				break;
			case 49:
				DebugEnterAlt(49);
				// Php.g:439:311: Protected
				{
				DebugLocation(439, 311);
				Protected475=(IToken)Match(input,Protected,Follow._Protected_in_memberAccess2490); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Protected475_tree = (object)adaptor.Create(Protected475);
				adaptor.AddChild(root_0, Protected475_tree);
				}

				}
				break;
			case 50:
				DebugEnterAlt(50);
				// Php.g:439:321: True
				{
				DebugLocation(439, 321);
				True476=(IToken)Match(input,True,Follow._True_in_memberAccess2492); if (state.failed) return retval;
				if (state.backtracking == 0) {
				True476_tree = (object)adaptor.Create(True476);
				adaptor.AddChild(root_0, True476_tree);
				}

				}
				break;
			case 51:
				DebugEnterAlt(51);
				// Php.g:439:326: False
				{
				DebugLocation(439, 326);
				False477=(IToken)Match(input,False,Follow._False_in_memberAccess2494); if (state.failed) return retval;
				if (state.backtracking == 0) {
				False477_tree = (object)adaptor.Create(False477);
				adaptor.AddChild(root_0, False477_tree);
				}

				}
				break;
			case 52:
				DebugEnterAlt(52);
				// Php.g:439:332: HaltCompiler
				{
				DebugLocation(439, 332);
				HaltCompiler478=(IToken)Match(input,HaltCompiler,Follow._HaltCompiler_in_memberAccess2496); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HaltCompiler478_tree = (object)adaptor.Create(HaltCompiler478);
				adaptor.AddChild(root_0, HaltCompiler478_tree);
				}

				}
				break;
			case 53:
				DebugEnterAlt(53);
				// Php.g:439:345: Die
				{
				DebugLocation(439, 345);
				Die479=(IToken)Match(input,Die,Follow._Die_in_memberAccess2498); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Die479_tree = (object)adaptor.Create(Die479);
				adaptor.AddChild(root_0, Die479_tree);
				}

				}
				break;
			case 54:
				DebugEnterAlt(54);
				// Php.g:439:349: Empty
				{
				DebugLocation(439, 349);
				Empty480=(IToken)Match(input,Empty,Follow._Empty_in_memberAccess2500); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Empty480_tree = (object)adaptor.Create(Empty480);
				adaptor.AddChild(root_0, Empty480_tree);
				}

				}
				break;
			case 55:
				DebugEnterAlt(55);
				// Php.g:439:355: Exit
				{
				DebugLocation(439, 355);
				Exit481=(IToken)Match(input,Exit,Follow._Exit_in_memberAccess2502); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Exit481_tree = (object)adaptor.Create(Exit481);
				adaptor.AddChild(root_0, Exit481_tree);
				}

				}
				break;
			case 56:
				DebugEnterAlt(56);
				// Php.g:439:360: Eval
				{
				DebugLocation(439, 360);
				Eval482=(IToken)Match(input,Eval,Follow._Eval_in_memberAccess2504); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Eval482_tree = (object)adaptor.Create(Eval482);
				adaptor.AddChild(root_0, Eval482_tree);
				}

				}
				break;
			case 57:
				DebugEnterAlt(57);
				// Php.g:439:365: Isset
				{
				DebugLocation(439, 365);
				Isset483=(IToken)Match(input,Isset,Follow._Isset_in_memberAccess2506); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Isset483_tree = (object)adaptor.Create(Isset483);
				adaptor.AddChild(root_0, Isset483_tree);
				}

				}
				break;
			case 58:
				DebugEnterAlt(58);
				// Php.g:440:6: IntType
				{
				DebugLocation(440, 6);
				IntType484=(IToken)Match(input,IntType,Follow._IntType_in_memberAccess2513); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IntType484_tree = (object)adaptor.Create(IntType484);
				adaptor.AddChild(root_0, IntType484_tree);
				}

				}
				break;
			case 59:
				DebugEnterAlt(59);
				// Php.g:440:16: IntegerType
				{
				DebugLocation(440, 16);
				IntegerType485=(IToken)Match(input,IntegerType,Follow._IntegerType_in_memberAccess2517); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IntegerType485_tree = (object)adaptor.Create(IntegerType485);
				adaptor.AddChild(root_0, IntegerType485_tree);
				}

				}
				break;
			case 60:
				DebugEnterAlt(60);
				// Php.g:440:30: BoolType
				{
				DebugLocation(440, 30);
				BoolType486=(IToken)Match(input,BoolType,Follow._BoolType_in_memberAccess2521); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BoolType486_tree = (object)adaptor.Create(BoolType486);
				adaptor.AddChild(root_0, BoolType486_tree);
				}

				}
				break;
			case 61:
				DebugEnterAlt(61);
				// Php.g:440:41: BooleanType
				{
				DebugLocation(440, 41);
				BooleanType487=(IToken)Match(input,BooleanType,Follow._BooleanType_in_memberAccess2525); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BooleanType487_tree = (object)adaptor.Create(BooleanType487);
				adaptor.AddChild(root_0, BooleanType487_tree);
				}

				}
				break;
			case 62:
				DebugEnterAlt(62);
				// Php.g:440:55: FloatType
				{
				DebugLocation(440, 55);
				FloatType488=(IToken)Match(input,FloatType,Follow._FloatType_in_memberAccess2529); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FloatType488_tree = (object)adaptor.Create(FloatType488);
				adaptor.AddChild(root_0, FloatType488_tree);
				}

				}
				break;
			case 63:
				DebugEnterAlt(63);
				// Php.g:440:67: DoubleType
				{
				DebugLocation(440, 67);
				DoubleType489=(IToken)Match(input,DoubleType,Follow._DoubleType_in_memberAccess2533); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DoubleType489_tree = (object)adaptor.Create(DoubleType489);
				adaptor.AddChild(root_0, DoubleType489_tree);
				}

				}
				break;
			case 64:
				DebugEnterAlt(64);
				// Php.g:441:6: RealType
				{
				DebugLocation(441, 6);
				RealType490=(IToken)Match(input,RealType,Follow._RealType_in_memberAccess2540); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RealType490_tree = (object)adaptor.Create(RealType490);
				adaptor.AddChild(root_0, RealType490_tree);
				}

				}
				break;
			case 65:
				DebugEnterAlt(65);
				// Php.g:441:17: StringType
				{
				DebugLocation(441, 17);
				StringType491=(IToken)Match(input,StringType,Follow._StringType_in_memberAccess2544); if (state.failed) return retval;
				if (state.backtracking == 0) {
				StringType491_tree = (object)adaptor.Create(StringType491);
				adaptor.AddChild(root_0, StringType491_tree);
				}

				}
				break;
			case 66:
				DebugEnterAlt(66);
				// Php.g:441:30: ObjectType
				{
				DebugLocation(441, 30);
				ObjectType492=(IToken)Match(input,ObjectType,Follow._ObjectType_in_memberAccess2548); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ObjectType492_tree = (object)adaptor.Create(ObjectType492);
				adaptor.AddChild(root_0, ObjectType492_tree);
				}

				}
				break;
			case 67:
				DebugEnterAlt(67);
				// Php.g:442:5: Use
				{
				DebugLocation(442, 5);
				Use493=(IToken)Match(input,Use,Follow._Use_in_memberAccess2554); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Use493_tree = (object)adaptor.Create(Use493);
				adaptor.AddChild(root_0, Use493_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberAccess", 68);
			LeaveRule("memberAccess", 68);
			LeaveRule_memberAccess();
			if (state.backtracking > 0) { Memoize(input, 68, memberAccess_StartIndex); }

		}
		DebugLocation(444, 1);
		} finally { DebugExitRule(GrammarFileName, "memberAccess"); }
		return retval;

	}
	// $ANTLR end "memberAccess"

	partial void EnterRule_nameOrFunctionCall();
	partial void LeaveRule_nameOrFunctionCall();
	// $ANTLR start "nameOrFunctionCall"
	// Php.g:446:1: nameOrFunctionCall : ( constantOrFunctionCall | variableOrFunctionCall );
	[GrammarRule("nameOrFunctionCall")]
	private AstParserRuleReturnScope<object, IToken> nameOrFunctionCall()
	{
		EnterRule_nameOrFunctionCall();
		EnterRule("nameOrFunctionCall", 69);
		TraceIn("nameOrFunctionCall", 69);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int nameOrFunctionCall_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> constantOrFunctionCall494 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableOrFunctionCall495 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "nameOrFunctionCall");
		DebugLocation(446, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// Php.g:447:2: ( constantOrFunctionCall | variableOrFunctionCall )
			int alt124=2;
			try { DebugEnterDecision(124, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA124_2 = input.LA(2);

				if ((EvaluatePredicate(synpred264_Php_fragment)))
				{
					alt124 = 1;
				}
				else if ((true))
				{
					alt124 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA124_2 = input.LA(2);

				if ((EvaluatePredicate(synpred264_Php_fragment)))
				{
					alt124 = 1;
				}
				else if ((true))
				{
					alt124 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA124_2 = input.LA(2);

				if ((EvaluatePredicate(synpred264_Php_fragment)))
				{
					alt124 = 1;
				}
				else if ((true))
				{
					alt124 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA124_2 = input.LA(2);

				if ((EvaluatePredicate(synpred264_Php_fragment)))
				{
					alt124 = 1;
				}
				else if ((true))
				{
					alt124 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case False:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA124_2 = input.LA(2);

				if ((EvaluatePredicate(synpred264_Php_fragment)))
				{
					alt124 = 1;
				}
				else if ((true))
				{
					alt124 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				alt124 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:447:4: constantOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(447, 4);
				PushFollow(Follow._constantOrFunctionCall_in_nameOrFunctionCall2570);
				constantOrFunctionCall494=constantOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrFunctionCall494.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:448:4: variableOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(448, 4);
				PushFollow(Follow._variableOrFunctionCall_in_nameOrFunctionCall2575);
				variableOrFunctionCall495=variableOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrFunctionCall495.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nameOrFunctionCall", 69);
			LeaveRule("nameOrFunctionCall", 69);
			LeaveRule_nameOrFunctionCall();
			if (state.backtracking > 0) { Memoize(input, 69, nameOrFunctionCall_StartIndex); }

		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "nameOrFunctionCall"); }
		return retval;

	}
	// $ANTLR end "nameOrFunctionCall"

	partial void EnterRule_variableOrFunctionCall();
	partial void LeaveRule_variableOrFunctionCall();
	// $ANTLR start "variableOrFunctionCall"
	// Php.g:451:1: variableOrFunctionCall : variableOrStaticAccessor ( functionArguments )? ( ( indexer | memberAccess ) ( functionArguments )? )* ;
	[GrammarRule("variableOrFunctionCall")]
	private AstParserRuleReturnScope<object, IToken> variableOrFunctionCall()
	{
		EnterRule_variableOrFunctionCall();
		EnterRule("variableOrFunctionCall", 70);
		TraceIn("variableOrFunctionCall", 70);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableOrFunctionCall_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> variableOrStaticAccessor496 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionArguments497 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> indexer498 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> memberAccess499 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionArguments500 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "variableOrFunctionCall");
		DebugLocation(451, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// Php.g:452:2: ( variableOrStaticAccessor ( functionArguments )? ( ( indexer | memberAccess ) ( functionArguments )? )* )
			DebugEnterAlt(1);
			// Php.g:452:4: variableOrStaticAccessor ( functionArguments )? ( ( indexer | memberAccess ) ( functionArguments )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(452, 4);
			PushFollow(Follow._variableOrStaticAccessor_in_variableOrFunctionCall2586);
			variableOrStaticAccessor496=variableOrStaticAccessor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor496.Tree);
			DebugLocation(452, 29);
			// Php.g:452:29: ( functionArguments )?
			int alt125=2;
			try { DebugEnterSubRule(125);
			try { DebugEnterDecision(125, false);
			int LA125_1 = input.LA(1);

			if ((LA125_1==OpenRoundBracket))
			{
				int LA125_2 = input.LA(2);

				if ((EvaluatePredicate(synpred265_Php_fragment)))
				{
					alt125 = 1;
				}
			}
			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:452:29: functionArguments
				{
				DebugLocation(452, 29);
				PushFollow(Follow._functionArguments_in_variableOrFunctionCall2588);
				functionArguments497=functionArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments497.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(125); }

			DebugLocation(452, 48);
			// Php.g:452:48: ( ( indexer | memberAccess ) ( functionArguments )? )*
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				switch (input.LA(1))
				{
				case OpenSquareBracket:
					{
					int LA128_2 = input.LA(2);

					if ((EvaluatePredicate(synpred268_Php_fragment)))
					{
						alt128 = 1;
					}


					}
					break;
				case OpenCurlyBracket:
					{
					int LA128_2 = input.LA(2);

					if ((EvaluatePredicate(synpred268_Php_fragment)))
					{
						alt128 = 1;
					}


					}
					break;
				case InstanceMember:
					{
					int LA128_2 = input.LA(2);

					if ((EvaluatePredicate(synpred268_Php_fragment)))
					{
						alt128 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(128); }
				switch ( alt128 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:452:49: ( indexer | memberAccess ) ( functionArguments )?
					{
					DebugLocation(452, 49);
					// Php.g:452:49: ( indexer | memberAccess )
					int alt126=2;
					try { DebugEnterSubRule(126);
					try { DebugEnterDecision(126, false);
					int LA126_1 = input.LA(1);

					if ((LA126_1==OpenCurlyBracket||LA126_1==OpenSquareBracket))
					{
						alt126 = 1;
					}
					else if ((LA126_1==InstanceMember))
					{
						alt126 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 126, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(126); }
					switch (alt126)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:452:50: indexer
						{
						DebugLocation(452, 50);
						PushFollow(Follow._indexer_in_variableOrFunctionCall2593);
						indexer498=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer498.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Php.g:452:60: memberAccess
						{
						DebugLocation(452, 60);
						PushFollow(Follow._memberAccess_in_variableOrFunctionCall2597);
						memberAccess499=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess499.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(126); }

					DebugLocation(452, 74);
					// Php.g:452:74: ( functionArguments )?
					int alt127=2;
					try { DebugEnterSubRule(127);
					try { DebugEnterDecision(127, false);
					int LA127_1 = input.LA(1);

					if ((LA127_1==OpenRoundBracket))
					{
						int LA127_2 = input.LA(2);

						if ((EvaluatePredicate(synpred267_Php_fragment)))
						{
							alt127 = 1;
						}
					}
					} finally { DebugExitDecision(127); }
					switch (alt127)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:452:74: functionArguments
						{
						DebugLocation(452, 74);
						PushFollow(Follow._functionArguments_in_variableOrFunctionCall2600);
						functionArguments500=functionArguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments500.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(127); }


					}
					break;

				default:
					goto loop128;
				}
			}

			loop128:
				;

			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableOrFunctionCall", 70);
			LeaveRule("variableOrFunctionCall", 70);
			LeaveRule_variableOrFunctionCall();
			if (state.backtracking > 0) { Memoize(input, 70, variableOrFunctionCall_StartIndex); }

		}
		DebugLocation(453, 1);
		} finally { DebugExitRule(GrammarFileName, "variableOrFunctionCall"); }
		return retval;

	}
	// $ANTLR end "variableOrFunctionCall"

	partial void EnterRule_constantOrFunctionCall();
	partial void LeaveRule_constantOrFunctionCall();
	// $ANTLR start "constantOrFunctionCall"
	// Php.g:455:1: constantOrFunctionCall : ( constantOrStaticAccessor functionArguments ( ( indexer | memberAccess ) ( functionArguments )? )* | constantOrStaticAccessor ( ( indexer | memberAccess ) ( functionArguments )? )+ | predefinedFunctionName ( functionArguments )? );
	[GrammarRule("constantOrFunctionCall")]
	private AstParserRuleReturnScope<object, IToken> constantOrFunctionCall()
	{
		EnterRule_constantOrFunctionCall();
		EnterRule("constantOrFunctionCall", 71);
		TraceIn("constantOrFunctionCall", 71);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int constantOrFunctionCall_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> constantOrStaticAccessor501 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionArguments502 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> indexer503 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> memberAccess504 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionArguments505 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constantOrStaticAccessor506 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> indexer507 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> memberAccess508 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionArguments509 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> predefinedFunctionName510 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionArguments511 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "constantOrFunctionCall");
		DebugLocation(455, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// Php.g:456:2: ( constantOrStaticAccessor functionArguments ( ( indexer | memberAccess ) ( functionArguments )? )* | constantOrStaticAccessor ( ( indexer | memberAccess ) ( functionArguments )? )+ | predefinedFunctionName ( functionArguments )? )
			int alt136=3;
			try { DebugEnterDecision(136, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_Php_fragment)))
				{
					alt136 = 1;
				}
				else if ((EvaluatePredicate(synpred276_Php_fragment)))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_Php_fragment)))
				{
					alt136 = 1;
				}
				else if ((EvaluatePredicate(synpred276_Php_fragment)))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_Php_fragment)))
				{
					alt136 = 1;
				}
				else if ((EvaluatePredicate(synpred276_Php_fragment)))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_Php_fragment)))
				{
					alt136 = 1;
				}
				else if ((EvaluatePredicate(synpred276_Php_fragment)))
				{
					alt136 = 2;
				}
				else if ((true))
				{
					alt136 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case False:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_Php_fragment)))
				{
					alt136 = 1;
				}
				else if ((EvaluatePredicate(synpred276_Php_fragment)))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				alt136 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:456:4: constantOrStaticAccessor functionArguments ( ( indexer | memberAccess ) ( functionArguments )? )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(456, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_constantOrFunctionCall2614);
				constantOrStaticAccessor501=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor501.Tree);
				DebugLocation(456, 29);
				PushFollow(Follow._functionArguments_in_constantOrFunctionCall2616);
				functionArguments502=functionArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments502.Tree);
				DebugLocation(456, 47);
				// Php.g:456:47: ( ( indexer | memberAccess ) ( functionArguments )? )*
				try { DebugEnterSubRule(131);
				while (true)
				{
					int alt131=2;
					try { DebugEnterDecision(131, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA131_2 = input.LA(2);

						if ((EvaluatePredicate(synpred271_Php_fragment)))
						{
							alt131 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA131_2 = input.LA(2);

						if ((EvaluatePredicate(synpred271_Php_fragment)))
						{
							alt131 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA131_2 = input.LA(2);

						if ((EvaluatePredicate(synpred271_Php_fragment)))
						{
							alt131 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(131); }
					switch ( alt131 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:456:48: ( indexer | memberAccess ) ( functionArguments )?
						{
						DebugLocation(456, 48);
						// Php.g:456:48: ( indexer | memberAccess )
						int alt129=2;
						try { DebugEnterSubRule(129);
						try { DebugEnterDecision(129, false);
						int LA129_1 = input.LA(1);

						if ((LA129_1==OpenCurlyBracket||LA129_1==OpenSquareBracket))
						{
							alt129 = 1;
						}
						else if ((LA129_1==InstanceMember))
						{
							alt129 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 129, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(129); }
						switch (alt129)
						{
						case 1:
							DebugEnterAlt(1);
							// Php.g:456:49: indexer
							{
							DebugLocation(456, 49);
							PushFollow(Follow._indexer_in_constantOrFunctionCall2620);
							indexer503=indexer();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, indexer503.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// Php.g:456:59: memberAccess
							{
							DebugLocation(456, 59);
							PushFollow(Follow._memberAccess_in_constantOrFunctionCall2624);
							memberAccess504=memberAccess();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess504.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(129); }

						DebugLocation(456, 73);
						// Php.g:456:73: ( functionArguments )?
						int alt130=2;
						try { DebugEnterSubRule(130);
						try { DebugEnterDecision(130, false);
						int LA130_1 = input.LA(1);

						if ((LA130_1==OpenRoundBracket))
						{
							int LA130_2 = input.LA(2);

							if ((EvaluatePredicate(synpred270_Php_fragment)))
							{
								alt130 = 1;
							}
						}
						} finally { DebugExitDecision(130); }
						switch (alt130)
						{
						case 1:
							DebugEnterAlt(1);
							// Php.g:456:73: functionArguments
							{
							DebugLocation(456, 73);
							PushFollow(Follow._functionArguments_in_constantOrFunctionCall2627);
							functionArguments505=functionArguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments505.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(130); }


						}
						break;

					default:
						goto loop131;
					}
				}

				loop131:
					;

				} finally { DebugExitSubRule(131); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:457:4: constantOrStaticAccessor ( ( indexer | memberAccess ) ( functionArguments )? )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(457, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_constantOrFunctionCall2635);
				constantOrStaticAccessor506=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor506.Tree);
				DebugLocation(457, 29);
				// Php.g:457:29: ( ( indexer | memberAccess ) ( functionArguments )? )+
				int cnt134=0;
				try { DebugEnterSubRule(134);
				while (true)
				{
					int alt134=2;
					try { DebugEnterDecision(134, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA134_2 = input.LA(2);

						if ((EvaluatePredicate(synpred275_Php_fragment)))
						{
							alt134 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA134_2 = input.LA(2);

						if ((EvaluatePredicate(synpred275_Php_fragment)))
						{
							alt134 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA134_2 = input.LA(2);

						if ((EvaluatePredicate(synpred275_Php_fragment)))
						{
							alt134 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(134); }
					switch (alt134)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:457:30: ( indexer | memberAccess ) ( functionArguments )?
						{
						DebugLocation(457, 30);
						// Php.g:457:30: ( indexer | memberAccess )
						int alt132=2;
						try { DebugEnterSubRule(132);
						try { DebugEnterDecision(132, false);
						int LA132_1 = input.LA(1);

						if ((LA132_1==OpenCurlyBracket||LA132_1==OpenSquareBracket))
						{
							alt132 = 1;
						}
						else if ((LA132_1==InstanceMember))
						{
							alt132 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 132, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(132); }
						switch (alt132)
						{
						case 1:
							DebugEnterAlt(1);
							// Php.g:457:31: indexer
							{
							DebugLocation(457, 31);
							PushFollow(Follow._indexer_in_constantOrFunctionCall2639);
							indexer507=indexer();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, indexer507.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// Php.g:457:41: memberAccess
							{
							DebugLocation(457, 41);
							PushFollow(Follow._memberAccess_in_constantOrFunctionCall2643);
							memberAccess508=memberAccess();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess508.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(132); }

						DebugLocation(457, 55);
						// Php.g:457:55: ( functionArguments )?
						int alt133=2;
						try { DebugEnterSubRule(133);
						try { DebugEnterDecision(133, false);
						int LA133_1 = input.LA(1);

						if ((LA133_1==OpenRoundBracket))
						{
							int LA133_2 = input.LA(2);

							if ((EvaluatePredicate(synpred274_Php_fragment)))
							{
								alt133 = 1;
							}
						}
						} finally { DebugExitDecision(133); }
						switch (alt133)
						{
						case 1:
							DebugEnterAlt(1);
							// Php.g:457:55: functionArguments
							{
							DebugLocation(457, 55);
							PushFollow(Follow._functionArguments_in_constantOrFunctionCall2646);
							functionArguments509=functionArguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments509.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(133); }


						}
						break;

					default:
						if (cnt134 >= 1)
							goto loop134;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee134 = new EarlyExitException( 134, input );
						DebugRecognitionException(eee134);
						throw eee134;
					}
					cnt134++;
				}
				loop134:
					;

				} finally { DebugExitSubRule(134); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:458:4: predefinedFunctionName ( functionArguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(458, 4);
				PushFollow(Follow._predefinedFunctionName_in_constantOrFunctionCall2654);
				predefinedFunctionName510=predefinedFunctionName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefinedFunctionName510.Tree);
				DebugLocation(458, 27);
				// Php.g:458:27: ( functionArguments )?
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, false);
				int LA135_1 = input.LA(1);

				if ((LA135_1==OpenRoundBracket))
				{
					int LA135_2 = input.LA(2);

					if ((EvaluatePredicate(synpred277_Php_fragment)))
					{
						alt135 = 1;
					}
				}
				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:458:27: functionArguments
					{
					DebugLocation(458, 27);
					PushFollow(Follow._functionArguments_in_constantOrFunctionCall2656);
					functionArguments511=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments511.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(135); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constantOrFunctionCall", 71);
			LeaveRule("constantOrFunctionCall", 71);
			LeaveRule_constantOrFunctionCall();
			if (state.backtracking > 0) { Memoize(input, 71, constantOrFunctionCall_StartIndex); }

		}
		DebugLocation(459, 1);
		} finally { DebugExitRule(GrammarFileName, "constantOrFunctionCall"); }
		return retval;

	}
	// $ANTLR end "constantOrFunctionCall"

	partial void EnterRule_name();
	partial void LeaveRule_name();
	// $ANTLR start "name"
	// Php.g:461:1: name : ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ | variableOrStaticAccessor );
	[GrammarRule("name")]
	private AstParserRuleReturnScope<object, IToken> name()
	{
		EnterRule_name();
		EnterRule("name", 72);
		TraceIn("name", 72);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int name_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> variableOrStaticAccessor512 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constantOrStaticAccessor513 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionArguments514 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> indexer515 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> memberAccess516 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> memberAccess517 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionArguments518 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> indexer519 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> memberAccess520 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableOrStaticAccessor521 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(461, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// Php.g:466:2: ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ | variableOrStaticAccessor )
			int alt142=2;
			try { DebugEnterDecision(142, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA142_2 = input.LA(2);

				if ((EvaluatePredicate(synpred285_Php_fragment)))
				{
					alt142 = 1;
				}
				else if ((true))
				{
					alt142 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 142, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA142_2 = input.LA(2);

				if ((EvaluatePredicate(synpred285_Php_fragment)))
				{
					alt142 = 1;
				}
				else if ((true))
				{
					alt142 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 142, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA142_2 = input.LA(2);

				if ((EvaluatePredicate(synpred285_Php_fragment)))
				{
					alt142 = 1;
				}
				else if ((true))
				{
					alt142 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 142, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA142_2 = input.LA(2);

				if ((EvaluatePredicate(synpred285_Php_fragment)))
				{
					alt142 = 1;
				}
				else if ((true))
				{
					alt142 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 142, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 142, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:466:4: ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(466, 4);
				// Php.g:466:4: ( variableOrStaticAccessor | constantOrStaticAccessor )
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, false);
				switch (input.LA(1))
				{
				case VariableName:
					{
					int LA137_2 = input.LA(2);

					if ((EvaluatePredicate(synpred278_Php_fragment)))
					{
						alt137 = 1;
					}
					else if ((true))
					{
						alt137 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 137, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 130:
					{
					int LA137_2 = input.LA(2);

					if ((EvaluatePredicate(synpred278_Php_fragment)))
					{
						alt137 = 1;
					}
					else if ((true))
					{
						alt137 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 137, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 131:
					{
					int LA137_2 = input.LA(2);

					if ((EvaluatePredicate(synpred278_Php_fragment)))
					{
						alt137 = 1;
					}
					else if ((true))
					{
						alt137 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 137, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Abstract:
				case And:
				case As:
				case BoolType:
				case BooleanType:
				case Break:
				case Case:
				case Catch:
				case Class:
				case Clone:
				case Const:
				case Continue:
				case Default:
				case Die:
				case Do:
				case DoubleType:
				case Echo:
				case Else:
				case ElseIf:
				case Empty:
				case Eval:
				case Exit:
				case Extends:
				case False:
				case Final:
				case Finally:
				case FloatType:
				case For:
				case Foreach:
				case Function:
				case Global:
				case Goto:
				case HaltCompiler:
				case If:
				case Implements:
				case Include:
				case IncludeOnce:
				case Instanceof:
				case IntType:
				case IntegerType:
				case Interface:
				case Isset:
				case List:
				case Namespace:
				case New:
				case Null:
				case ObjectType:
				case Or:
				case Print:
				case Private:
				case Protected:
				case Public:
				case RealType:
				case Require:
				case RequireOnce:
				case Return:
				case Static:
				case StringType:
				case Switch:
				case Throw:
				case True:
				case Try:
				case UnquotedString:
				case Use:
				case Var:
				case While:
				case Xor:
					{
					int LA137_2 = input.LA(2);

					if ((EvaluatePredicate(synpred278_Php_fragment)))
					{
						alt137 = 1;
					}
					else if ((true))
					{
						alt137 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 137, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 137, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:466:5: variableOrStaticAccessor
					{
					DebugLocation(466, 5);
					PushFollow(Follow._variableOrStaticAccessor_in_name2677);
					variableOrStaticAccessor512=variableOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor512.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:466:32: constantOrStaticAccessor
					{
					DebugLocation(466, 32);
					PushFollow(Follow._constantOrStaticAccessor_in_name2681);
					constantOrStaticAccessor513=constantOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor513.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(137); }

				DebugLocation(467, 4);
				// Php.g:467:4: ( functionArguments )?
				int alt138=2;
				try { DebugEnterSubRule(138);
				try { DebugEnterDecision(138, false);
				int LA138_1 = input.LA(1);

				if ((LA138_1==OpenRoundBracket))
				{
					alt138 = 1;
				}
				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:467:4: functionArguments
					{
					DebugLocation(467, 4);
					PushFollow(Follow._functionArguments_in_name2687);
					functionArguments514=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments514.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(138); }

				DebugLocation(468, 4);
				// Php.g:468:4: ( ( indexer | memberAccess )* memberAccess functionArguments )*
				try { DebugEnterSubRule(140);
				while (true)
				{
					int alt140=2;
					try { DebugEnterDecision(140, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA140_2 = input.LA(2);

						if ((EvaluatePredicate(synpred282_Php_fragment)))
						{
							alt140 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA140_2 = input.LA(2);

						if ((EvaluatePredicate(synpred282_Php_fragment)))
						{
							alt140 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA140_2 = input.LA(2);

						if ((EvaluatePredicate(synpred282_Php_fragment)))
						{
							alt140 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(140); }
					switch ( alt140 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:468:5: ( indexer | memberAccess )* memberAccess functionArguments
						{
						DebugLocation(468, 5);
						// Php.g:468:5: ( indexer | memberAccess )*
						try { DebugEnterSubRule(139);
						while (true)
						{
							int alt139=3;
							try { DebugEnterDecision(139, false);
							int LA139_1 = input.LA(1);

							if ((LA139_1==InstanceMember))
							{
								int LA139_2 = input.LA(2);

								if ((EvaluatePredicate(synpred281_Php_fragment)))
								{
									alt139 = 2;
								}


							}
							else if ((LA139_1==OpenCurlyBracket||LA139_1==OpenSquareBracket))
							{
								alt139 = 1;
							}


							} finally { DebugExitDecision(139); }
							switch ( alt139 )
							{
							case 1:
								DebugEnterAlt(1);
								// Php.g:468:6: indexer
								{
								DebugLocation(468, 6);
								PushFollow(Follow._indexer_in_name2695);
								indexer515=indexer();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, indexer515.Tree);

								}
								break;
							case 2:
								DebugEnterAlt(2);
								// Php.g:468:16: memberAccess
								{
								DebugLocation(468, 16);
								PushFollow(Follow._memberAccess_in_name2699);
								memberAccess516=memberAccess();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess516.Tree);

								}
								break;

							default:
								goto loop139;
							}
						}

						loop139:
							;

						} finally { DebugExitSubRule(139); }

						DebugLocation(468, 31);
						PushFollow(Follow._memberAccess_in_name2703);
						memberAccess517=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess517.Tree);
						DebugLocation(468, 44);
						PushFollow(Follow._functionArguments_in_name2705);
						functionArguments518=functionArguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments518.Tree);

						}
						break;

					default:
						goto loop140;
					}
				}

				loop140:
					;

				} finally { DebugExitSubRule(140); }

				DebugLocation(469, 4);
				// Php.g:469:4: ( indexer | memberAccess )+
				int cnt141=0;
				try { DebugEnterSubRule(141);
				while (true)
				{
					int alt141=3;
					try { DebugEnterDecision(141, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA141_2 = input.LA(2);

						if ((EvaluatePredicate(synpred283_Php_fragment)))
						{
							alt141 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA141_2 = input.LA(2);

						if ((EvaluatePredicate(synpred283_Php_fragment)))
						{
							alt141 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA141_2 = input.LA(2);

						if ((EvaluatePredicate(synpred284_Php_fragment)))
						{
							alt141 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(141); }
					switch (alt141)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:469:5: indexer
						{
						DebugLocation(469, 5);
						PushFollow(Follow._indexer_in_name2713);
						indexer519=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer519.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Php.g:469:15: memberAccess
						{
						DebugLocation(469, 15);
						PushFollow(Follow._memberAccess_in_name2717);
						memberAccess520=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess520.Tree);

						}
						break;

					default:
						if (cnt141 >= 1)
							goto loop141;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee141 = new EarlyExitException( 141, input );
						DebugRecognitionException(eee141);
						throw eee141;
					}
					cnt141++;
				}
				loop141:
					;

				} finally { DebugExitSubRule(141); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:470:4: variableOrStaticAccessor
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(470, 4);
				PushFollow(Follow._variableOrStaticAccessor_in_name2724);
				variableOrStaticAccessor521=variableOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor521.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("name", 72);
			LeaveRule("name", 72);
			LeaveRule_name();
			if (state.backtracking > 0) { Memoize(input, 72, name_StartIndex); }

		}
		DebugLocation(471, 1);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return retval;

	}
	// $ANTLR end "name"

	partial void EnterRule_variableOrStaticAccessor();
	partial void LeaveRule_variableOrStaticAccessor();
	// $ANTLR start "variableOrStaticAccessor"
	// Php.g:473:1: variableOrStaticAccessor : ( ( variable | qualifiedName ) '::' variable | variable );
	[GrammarRule("variableOrStaticAccessor")]
	private AstParserRuleReturnScope<object, IToken> variableOrStaticAccessor()
	{
		EnterRule_variableOrStaticAccessor();
		EnterRule("variableOrStaticAccessor", 73);
		TraceIn("variableOrStaticAccessor", 73);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableOrStaticAccessor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal524 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variable522 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName523 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variable525 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variable526 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal524_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableOrStaticAccessor");
		DebugLocation(473, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// Php.g:474:2: ( ( variable | qualifiedName ) '::' variable | variable )
			int alt144=2;
			try { DebugEnterDecision(144, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA144_2 = input.LA(2);

				if ((EvaluatePredicate(synpred287_Php_fragment)))
				{
					alt144 = 1;
				}
				else if ((true))
				{
					alt144 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 144, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA144_2 = input.LA(2);

				if ((EvaluatePredicate(synpred287_Php_fragment)))
				{
					alt144 = 1;
				}
				else if ((true))
				{
					alt144 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 144, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
			case 131:
				{
				alt144 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 144, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:474:4: ( variable | qualifiedName ) '::' variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(474, 4);
				// Php.g:474:4: ( variable | qualifiedName )
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, false);
				int LA143_1 = input.LA(1);

				if ((LA143_1==VariableName||LA143_1==130))
				{
					alt143 = 1;
				}
				else if ((LA143_1==Abstract||LA143_1==And||LA143_1==As||(LA143_1>=BoolType && LA143_1<=Class)||LA143_1==Clone||(LA143_1>=Const && LA143_1<=Continue)||(LA143_1>=Default && LA143_1<=Die)||LA143_1==Do||(LA143_1>=DoubleType && LA143_1<=Empty)||(LA143_1>=Eval && LA143_1<=Exit)||(LA143_1>=Extends && LA143_1<=Foreach)||(LA143_1>=Function && LA143_1<=HaltCompiler)||(LA143_1>=If && LA143_1<=IncludeOnce)||(LA143_1>=Instanceof && LA143_1<=IntType)||(LA143_1>=IntegerType && LA143_1<=List)||(LA143_1>=Namespace && LA143_1<=Null)||LA143_1==ObjectType||LA143_1==Or||(LA143_1>=Print && LA143_1<=Public)||(LA143_1>=RealType && LA143_1<=Return)||(LA143_1>=Static && LA143_1<=StringType)||(LA143_1>=Switch && LA143_1<=Throw)||(LA143_1>=True && LA143_1<=Try)||LA143_1==UnquotedString||(LA143_1>=Use && LA143_1<=Var)||LA143_1==While||LA143_1==Xor||LA143_1==131))
				{
					alt143 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 143, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:474:5: variable
					{
					DebugLocation(474, 5);
					PushFollow(Follow._variable_in_variableOrStaticAccessor2736);
					variable522=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable522.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:474:16: qualifiedName
					{
					DebugLocation(474, 16);
					PushFollow(Follow._qualifiedName_in_variableOrStaticAccessor2740);
					qualifiedName523=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName523.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(474, 31);
				string_literal524=(IToken)Match(input,ClassMember,Follow._ClassMember_in_variableOrStaticAccessor2743); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal524_tree = (object)adaptor.Create(string_literal524);
				adaptor.AddChild(root_0, string_literal524_tree);
				}
				DebugLocation(474, 36);
				PushFollow(Follow._variable_in_variableOrStaticAccessor2745);
				variable525=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable525.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:475:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(475, 4);
				PushFollow(Follow._variable_in_variableOrStaticAccessor2750);
				variable526=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable526.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableOrStaticAccessor", 73);
			LeaveRule("variableOrStaticAccessor", 73);
			LeaveRule_variableOrStaticAccessor();
			if (state.backtracking > 0) { Memoize(input, 73, variableOrStaticAccessor_StartIndex); }

		}
		DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "variableOrStaticAccessor"); }
		return retval;

	}
	// $ANTLR end "variableOrStaticAccessor"

	partial void EnterRule_constantOrStaticAccessor();
	partial void LeaveRule_constantOrStaticAccessor();
	// $ANTLR start "constantOrStaticAccessor"
	// Php.g:478:1: constantOrStaticAccessor : ( ( variable | qualifiedName ) '::' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName );
	[GrammarRule("constantOrStaticAccessor")]
	private AstParserRuleReturnScope<object, IToken> constantOrStaticAccessor()
	{
		EnterRule_constantOrStaticAccessor();
		EnterRule("constantOrStaticAccessor", 74);
		TraceIn("constantOrStaticAccessor", 74);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int constantOrStaticAccessor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal529 = default(IToken);
		IToken set530 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variable527 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName528 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName531 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal529_tree = default(object);
		object set530_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constantOrStaticAccessor");
		DebugLocation(478, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// Php.g:479:2: ( ( variable | qualifiedName ) '::' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName )
			int alt146=2;
			try { DebugEnterDecision(146, false);
			try
			{
				alt146 = dfa146.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:479:4: ( variable | qualifiedName ) '::' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(479, 4);
				// Php.g:479:4: ( variable | qualifiedName )
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, false);
				int LA145_1 = input.LA(1);

				if ((LA145_1==VariableName||LA145_1==130))
				{
					alt145 = 1;
				}
				else if ((LA145_1==Abstract||LA145_1==And||LA145_1==As||(LA145_1>=BoolType && LA145_1<=Class)||LA145_1==Clone||(LA145_1>=Const && LA145_1<=Continue)||(LA145_1>=Default && LA145_1<=Die)||LA145_1==Do||(LA145_1>=DoubleType && LA145_1<=Empty)||(LA145_1>=Eval && LA145_1<=Exit)||(LA145_1>=Extends && LA145_1<=Foreach)||(LA145_1>=Function && LA145_1<=HaltCompiler)||(LA145_1>=If && LA145_1<=IncludeOnce)||(LA145_1>=Instanceof && LA145_1<=IntType)||(LA145_1>=IntegerType && LA145_1<=List)||(LA145_1>=Namespace && LA145_1<=Null)||LA145_1==ObjectType||LA145_1==Or||(LA145_1>=Print && LA145_1<=Public)||(LA145_1>=RealType && LA145_1<=Return)||(LA145_1>=Static && LA145_1<=StringType)||(LA145_1>=Switch && LA145_1<=Throw)||(LA145_1>=True && LA145_1<=Try)||LA145_1==UnquotedString||(LA145_1>=Use && LA145_1<=Var)||LA145_1==While||LA145_1==Xor||LA145_1==131))
				{
					alt145 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 145, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:479:5: variable
					{
					DebugLocation(479, 5);
					PushFollow(Follow._variable_in_constantOrStaticAccessor2762);
					variable527=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable527.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:479:16: qualifiedName
					{
					DebugLocation(479, 16);
					PushFollow(Follow._qualifiedName_in_constantOrStaticAccessor2766);
					qualifiedName528=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName528.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(145); }

				DebugLocation(479, 31);
				string_literal529=(IToken)Match(input,ClassMember,Follow._ClassMember_in_constantOrStaticAccessor2769); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal529_tree = (object)adaptor.Create(string_literal529);
				adaptor.AddChild(root_0, string_literal529_tree);
				}
				DebugLocation(479, 36);

				set530=(IToken)input.LT(1);
				if (input.LA(1)==Abstract||input.LA(1)==And||input.LA(1)==As||(input.LA(1)>=BoolType && input.LA(1)<=Class)||input.LA(1)==Clone||(input.LA(1)>=Const && input.LA(1)<=Continue)||(input.LA(1)>=Default && input.LA(1)<=Die)||input.LA(1)==Do||(input.LA(1)>=DoubleType && input.LA(1)<=Empty)||(input.LA(1)>=Eval && input.LA(1)<=Exit)||(input.LA(1)>=Extends && input.LA(1)<=False)||(input.LA(1)>=Finally && input.LA(1)<=Foreach)||(input.LA(1)>=Function && input.LA(1)<=HaltCompiler)||(input.LA(1)>=If && input.LA(1)<=IncludeOnce)||(input.LA(1)>=Instanceof && input.LA(1)<=IntType)||(input.LA(1)>=IntegerType && input.LA(1)<=List)||(input.LA(1)>=Namespace && input.LA(1)<=Null)||input.LA(1)==ObjectType||input.LA(1)==Or||(input.LA(1)>=Print && input.LA(1)<=Public)||(input.LA(1)>=RealType && input.LA(1)<=Return)||(input.LA(1)>=Static && input.LA(1)<=StringType)||(input.LA(1)>=Switch && input.LA(1)<=Throw)||(input.LA(1)>=True && input.LA(1)<=Try)||input.LA(1)==UnquotedString||(input.LA(1)>=Use && input.LA(1)<=Var)||input.LA(1)==While||input.LA(1)==Xor)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set530));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:484:4: qualifiedName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(484, 4);
				PushFollow(Follow._qualifiedName_in_constantOrStaticAccessor2945);
				qualifiedName531=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName531.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constantOrStaticAccessor", 74);
			LeaveRule("constantOrStaticAccessor", 74);
			LeaveRule_constantOrStaticAccessor();
			if (state.backtracking > 0) { Memoize(input, 74, constantOrStaticAccessor_StartIndex); }

		}
		DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "constantOrStaticAccessor"); }
		return retval;

	}
	// $ANTLR end "constantOrStaticAccessor"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();
	// $ANTLR start "variable"
	// Php.g:487:1: variable : variableVariable ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 75);
		TraceIn("variable", 75);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variable_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> variableVariable532 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(487, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// Php.g:488:2: ( variableVariable )
			DebugEnterAlt(1);
			// Php.g:488:4: variableVariable
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(488, 4);
			PushFollow(Follow._variableVariable_in_variable2957);
			variableVariable532=variableVariable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableVariable532.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 75);
			LeaveRule("variable", 75);
			LeaveRule_variable();
			if (state.backtracking > 0) { Memoize(input, 75, variable_StartIndex); }

		}
		DebugLocation(489, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_variableVariable();
	partial void LeaveRule_variableVariable();
	// $ANTLR start "variableVariable"
	// Php.g:491:1: variableVariable : ( VariableName | '$' ( variableVariable | '{' expression '}' ) );
	[GrammarRule("variableVariable")]
	private AstParserRuleReturnScope<object, IToken> variableVariable()
	{
		EnterRule_variableVariable();
		EnterRule("variableVariable", 76);
		TraceIn("variableVariable", 76);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableVariable_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName533 = default(IToken);
		IToken char_literal534 = default(IToken);
		IToken char_literal536 = default(IToken);
		IToken char_literal538 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableVariable535 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression537 = default(AstParserRuleReturnScope<object, IToken>);

		object VariableName533_tree = default(object);
		object char_literal534_tree = default(object);
		object char_literal536_tree = default(object);
		object char_literal538_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableVariable");
		DebugLocation(491, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// Php.g:492:2: ( VariableName | '$' ( variableVariable | '{' expression '}' ) )
			int alt148=2;
			try { DebugEnterDecision(148, false);
			int LA148_1 = input.LA(1);

			if ((LA148_1==VariableName))
			{
				alt148 = 1;
			}
			else if ((LA148_1==130))
			{
				alt148 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 148, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:492:4: VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(492, 4);
				VariableName533=(IToken)Match(input,VariableName,Follow._VariableName_in_variableVariable2968); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName533_tree = (object)adaptor.Create(VariableName533);
				adaptor.AddChild(root_0, VariableName533_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:493:4: '$' ( variableVariable | '{' expression '}' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(493, 4);
				char_literal534=(IToken)Match(input,130,Follow._130_in_variableVariable2973); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal534_tree = (object)adaptor.Create(char_literal534);
				adaptor.AddChild(root_0, char_literal534_tree);
				}
				DebugLocation(493, 8);
				// Php.g:493:8: ( variableVariable | '{' expression '}' )
				int alt147=2;
				try { DebugEnterSubRule(147);
				try { DebugEnterDecision(147, false);
				int LA147_1 = input.LA(1);

				if ((LA147_1==VariableName||LA147_1==130))
				{
					alt147 = 1;
				}
				else if ((LA147_1==OpenCurlyBracket))
				{
					alt147 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 147, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:493:9: variableVariable
					{
					DebugLocation(493, 9);
					PushFollow(Follow._variableVariable_in_variableVariable2976);
					variableVariable535=variableVariable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableVariable535.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:493:28: '{' expression '}'
					{
					DebugLocation(493, 28);
					char_literal536=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_variableVariable2980); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal536_tree = (object)adaptor.Create(char_literal536);
					adaptor.AddChild(root_0, char_literal536_tree);
					}
					DebugLocation(493, 32);
					PushFollow(Follow._expression_in_variableVariable2982);
					expression537=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression537.Tree);
					DebugLocation(493, 43);
					char_literal538=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_variableVariable2984); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal538_tree = (object)adaptor.Create(char_literal538);
					adaptor.AddChild(root_0, char_literal538_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(147); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableVariable", 76);
			LeaveRule("variableVariable", 76);
			LeaveRule_variableVariable();
			if (state.backtracking > 0) { Memoize(input, 76, variableVariable_StartIndex); }

		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "variableVariable"); }
		return retval;

	}
	// $ANTLR end "variableVariable"

	partial void EnterRule_qualifiedName();
	partial void LeaveRule_qualifiedName();
	// $ANTLR start "qualifiedName"
	// Php.g:497:1: qualifiedName : ( '\\\\' )? ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Final | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) ( '\\\\' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Final | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )* ;
	[GrammarRule("qualifiedName")]
	private AstParserRuleReturnScope<object, IToken> qualifiedName()
	{
		EnterRule_qualifiedName();
		EnterRule("qualifiedName", 77);
		TraceIn("qualifiedName", 77);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal539 = default(IToken);
		IToken set540 = default(IToken);
		IToken char_literal541 = default(IToken);
		IToken set542 = default(IToken);

		object char_literal539_tree = default(object);
		object set540_tree = default(object);
		object char_literal541_tree = default(object);
		object set542_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedName");
		DebugLocation(497, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// Php.g:498:2: ( ( '\\\\' )? ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Final | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) ( '\\\\' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Final | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )* )
			DebugEnterAlt(1);
			// Php.g:498:4: ( '\\\\' )? ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Final | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) ( '\\\\' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Final | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(498, 4);
			// Php.g:498:4: ( '\\\\' )?
			int alt149=2;
			try { DebugEnterSubRule(149);
			try { DebugEnterDecision(149, false);
			int LA149_1 = input.LA(1);

			if ((LA149_1==131))
			{
				alt149 = 1;
			}
			} finally { DebugExitDecision(149); }
			switch (alt149)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:498:4: '\\\\'
				{
				DebugLocation(498, 4);
				char_literal539=(IToken)Match(input,131,Follow._131_in_qualifiedName2997); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal539_tree = (object)adaptor.Create(char_literal539);
				adaptor.AddChild(root_0, char_literal539_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(149); }

			DebugLocation(498, 10);

			set540=(IToken)input.LT(1);
			if (input.LA(1)==Abstract||input.LA(1)==And||input.LA(1)==As||(input.LA(1)>=BoolType && input.LA(1)<=Class)||input.LA(1)==Clone||(input.LA(1)>=Const && input.LA(1)<=Continue)||(input.LA(1)>=Default && input.LA(1)<=Die)||input.LA(1)==Do||(input.LA(1)>=DoubleType && input.LA(1)<=Empty)||(input.LA(1)>=Eval && input.LA(1)<=Exit)||(input.LA(1)>=Extends && input.LA(1)<=Foreach)||(input.LA(1)>=Function && input.LA(1)<=HaltCompiler)||(input.LA(1)>=If && input.LA(1)<=IncludeOnce)||(input.LA(1)>=Instanceof && input.LA(1)<=IntType)||(input.LA(1)>=IntegerType && input.LA(1)<=List)||(input.LA(1)>=Namespace && input.LA(1)<=Null)||input.LA(1)==ObjectType||input.LA(1)==Or||(input.LA(1)>=Print && input.LA(1)<=Public)||(input.LA(1)>=RealType && input.LA(1)<=Return)||(input.LA(1)>=Static && input.LA(1)<=StringType)||(input.LA(1)>=Switch && input.LA(1)<=Throw)||(input.LA(1)>=True && input.LA(1)<=Try)||input.LA(1)==UnquotedString||(input.LA(1)>=Use && input.LA(1)<=Var)||input.LA(1)==While||input.LA(1)==Xor)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set540));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(503, 2);
			// Php.g:503:2: ( '\\\\' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Final | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )*
			try { DebugEnterSubRule(150);
			while (true)
			{
				int alt150=2;
				try { DebugEnterDecision(150, false);
				int LA150_1 = input.LA(1);

				if ((LA150_1==131))
				{
					alt150 = 1;
				}


				} finally { DebugExitDecision(150); }
				switch ( alt150 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:503:4: '\\\\' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Final | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
					{
					DebugLocation(503, 4);
					char_literal541=(IToken)Match(input,131,Follow._131_in_qualifiedName3176); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal541_tree = (object)adaptor.Create(char_literal541);
					adaptor.AddChild(root_0, char_literal541_tree);
					}
					DebugLocation(503, 9);

					set542=(IToken)input.LT(1);
					if (input.LA(1)==Abstract||input.LA(1)==And||input.LA(1)==As||(input.LA(1)>=BoolType && input.LA(1)<=Class)||input.LA(1)==Clone||(input.LA(1)>=Const && input.LA(1)<=Continue)||(input.LA(1)>=Default && input.LA(1)<=Die)||input.LA(1)==Do||(input.LA(1)>=DoubleType && input.LA(1)<=Empty)||(input.LA(1)>=Eval && input.LA(1)<=Exit)||(input.LA(1)>=Extends && input.LA(1)<=Foreach)||(input.LA(1)>=Function && input.LA(1)<=HaltCompiler)||(input.LA(1)>=If && input.LA(1)<=IncludeOnce)||(input.LA(1)>=Instanceof && input.LA(1)<=IntType)||(input.LA(1)>=IntegerType && input.LA(1)<=List)||(input.LA(1)>=Namespace && input.LA(1)<=Null)||input.LA(1)==ObjectType||input.LA(1)==Or||(input.LA(1)>=Print && input.LA(1)<=Public)||(input.LA(1)>=RealType && input.LA(1)<=Return)||(input.LA(1)>=Static && input.LA(1)<=StringType)||(input.LA(1)>=Switch && input.LA(1)<=Throw)||(input.LA(1)>=True && input.LA(1)<=Try)||input.LA(1)==UnquotedString||(input.LA(1)>=Use && input.LA(1)<=Var)||input.LA(1)==While||input.LA(1)==Xor)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set542));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop150;
				}
			}

			loop150:
				;

			} finally { DebugExitSubRule(150); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedName", 77);
			LeaveRule("qualifiedName", 77);
			LeaveRule_qualifiedName();
			if (state.backtracking > 0) { Memoize(input, 77, qualifiedName_StartIndex); }

		}
		DebugLocation(508, 1);
		} finally { DebugExitRule(GrammarFileName, "qualifiedName"); }
		return retval;

	}
	// $ANTLR end "qualifiedName"

	partial void EnterRule_requireOperator();
	partial void LeaveRule_requireOperator();
	// $ANTLR start "requireOperator"
	// Php.g:510:1: requireOperator : ( Require | RequireOnce | Include | IncludeOnce );
	[GrammarRule("requireOperator")]
	private AstParserRuleReturnScope<object, IToken> requireOperator()
	{
		EnterRule_requireOperator();
		EnterRule("requireOperator", 78);
		TraceIn("requireOperator", 78);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int requireOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set543 = default(IToken);

		object set543_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "requireOperator");
		DebugLocation(510, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// Php.g:511:2: ( Require | RequireOnce | Include | IncludeOnce )
			DebugEnterAlt(1);
			// Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(511, 2);

			set543=(IToken)input.LT(1);
			if ((input.LA(1)>=Include && input.LA(1)<=IncludeOnce)||(input.LA(1)>=Require && input.LA(1)<=RequireOnce))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set543));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("requireOperator", 78);
			LeaveRule("requireOperator", 78);
			LeaveRule_requireOperator();
			if (state.backtracking > 0) { Memoize(input, 78, requireOperator_StartIndex); }

		}
		DebugLocation(512, 1);
		} finally { DebugExitRule(GrammarFileName, "requireOperator"); }
		return retval;

	}
	// $ANTLR end "requireOperator"

	partial void EnterRule_accessModifier();
	partial void LeaveRule_accessModifier();
	// $ANTLR start "accessModifier"
	// Php.g:514:1: accessModifier : ( Public | Private | Protected );
	[GrammarRule("accessModifier")]
	private AstParserRuleReturnScope<object, IToken> accessModifier()
	{
		EnterRule_accessModifier();
		EnterRule("accessModifier", 79);
		TraceIn("accessModifier", 79);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int accessModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set544 = default(IToken);

		object set544_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "accessModifier");
		DebugLocation(514, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// Php.g:515:2: ( Public | Private | Protected )
			DebugEnterAlt(1);
			// Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(515, 2);

			set544=(IToken)input.LT(1);
			if ((input.LA(1)>=Private && input.LA(1)<=Public))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set544));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessModifier", 79);
			LeaveRule("accessModifier", 79);
			LeaveRule_accessModifier();
			if (state.backtracking > 0) { Memoize(input, 79, accessModifier_StartIndex); }

		}
		DebugLocation(516, 1);
		} finally { DebugExitRule(GrammarFileName, "accessModifier"); }
		return retval;

	}
	// $ANTLR end "accessModifier"

	partial void EnterRule_boolean();
	partial void LeaveRule_boolean();
	// $ANTLR start "boolean"
	// Php.g:518:1: boolean : ( True | False );
	[GrammarRule("boolean")]
	private AstParserRuleReturnScope<object, IToken> boolean()
	{
		EnterRule_boolean();
		EnterRule("boolean", 80);
		TraceIn("boolean", 80);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int boolean_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set545 = default(IToken);

		object set545_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "boolean");
		DebugLocation(518, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// Php.g:519:2: ( True | False )
			DebugEnterAlt(1);
			// Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(519, 2);

			set545=(IToken)input.LT(1);
			if (input.LA(1)==False||input.LA(1)==True)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set545));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolean", 80);
			LeaveRule("boolean", 80);
			LeaveRule_boolean();
			if (state.backtracking > 0) { Memoize(input, 80, boolean_StartIndex); }

		}
		DebugLocation(520, 1);
		} finally { DebugExitRule(GrammarFileName, "boolean"); }
		return retval;

	}
	// $ANTLR end "boolean"

	partial void EnterRule_predefinedFunctionName();
	partial void LeaveRule_predefinedFunctionName();
	// $ANTLR start "predefinedFunctionName"
	// Php.g:522:1: predefinedFunctionName : ( HaltCompiler | Die | Empty | UnsetType | Eval | Exit | Isset );
	[GrammarRule("predefinedFunctionName")]
	private AstParserRuleReturnScope<object, IToken> predefinedFunctionName()
	{
		EnterRule_predefinedFunctionName();
		EnterRule("predefinedFunctionName", 81);
		TraceIn("predefinedFunctionName", 81);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int predefinedFunctionName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set546 = default(IToken);

		object set546_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "predefinedFunctionName");
		DebugLocation(522, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// Php.g:523:2: ( HaltCompiler | Die | Empty | UnsetType | Eval | Exit | Isset )
			DebugEnterAlt(1);
			// Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(523, 2);

			set546=(IToken)input.LT(1);
			if (input.LA(1)==Die||input.LA(1)==Empty||(input.LA(1)>=Eval && input.LA(1)<=Exit)||input.LA(1)==HaltCompiler||input.LA(1)==Isset||input.LA(1)==UnsetType)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set546));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("predefinedFunctionName", 81);
			LeaveRule("predefinedFunctionName", 81);
			LeaveRule_predefinedFunctionName();
			if (state.backtracking > 0) { Memoize(input, 81, predefinedFunctionName_StartIndex); }

		}
		DebugLocation(524, 1);
		} finally { DebugExitRule(GrammarFileName, "predefinedFunctionName"); }
		return retval;

	}
	// $ANTLR end "predefinedFunctionName"

	partial void EnterRule_synpred1_Php_fragment();
	partial void LeaveRule_synpred1_Php_fragment();

	// $ANTLR start synpred1_Php
	private void synpred1_Php_fragment()
	{
		EnterRule_synpred1_Php_fragment();
		EnterRule("synpred1_Php_fragment", 82);
		TraceIn("synpred1_Php_fragment", 82);
		try
		{
			// Php.g:89:3: ( BodyString namespaceDefinition )
			DebugEnterAlt(1);
			// Php.g:89:3: BodyString namespaceDefinition
			{
			DebugLocation(89, 3);
			Match(input,BodyString,Follow._BodyString_in_synpred1_Php327); if (state.failed) return;
			DebugLocation(89, 80);
			PushFollow(Follow._namespaceDefinition_in_synpred1_Php331);
			namespaceDefinition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_Php_fragment", 82);
			LeaveRule("synpred1_Php_fragment", 82);
			LeaveRule_synpred1_Php_fragment();
		}
	}
	// $ANTLR end synpred1_Php

	partial void EnterRule_synpred2_Php_fragment();
	partial void LeaveRule_synpred2_Php_fragment();

	// $ANTLR start synpred2_Php
	private void synpred2_Php_fragment()
	{
		EnterRule_synpred2_Php_fragment();
		EnterRule("synpred2_Php_fragment", 83);
		TraceIn("synpred2_Php_fragment", 83);
		try
		{
			// Php.g:90:3: ( useStatement )
			DebugEnterAlt(1);
			// Php.g:90:3: useStatement
			{
			DebugLocation(90, 3);
			PushFollow(Follow._useStatement_in_synpred2_Php337);
			useStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Php_fragment", 83);
			LeaveRule("synpred2_Php_fragment", 83);
			LeaveRule_synpred2_Php_fragment();
		}
	}
	// $ANTLR end synpred2_Php

	partial void EnterRule_synpred3_Php_fragment();
	partial void LeaveRule_synpred3_Php_fragment();

	// $ANTLR start synpred3_Php
	private void synpred3_Php_fragment()
	{
		EnterRule_synpred3_Php_fragment();
		EnterRule("synpred3_Php_fragment", 84);
		TraceIn("synpred3_Php_fragment", 84);
		try
		{
			// Php.g:90:18: ( statement )
			DebugEnterAlt(1);
			// Php.g:90:18: statement
			{
			DebugLocation(90, 18);
			PushFollow(Follow._statement_in_synpred3_Php341);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_Php_fragment", 84);
			LeaveRule("synpred3_Php_fragment", 84);
			LeaveRule_synpred3_Php_fragment();
		}
	}
	// $ANTLR end synpred3_Php

	partial void EnterRule_synpred6_Php_fragment();
	partial void LeaveRule_synpred6_Php_fragment();

	// $ANTLR start synpred6_Php
	private void synpred6_Php_fragment()
	{
		EnterRule_synpred6_Php_fragment();
		EnterRule("synpred6_Php_fragment", 87);
		TraceIn("synpred6_Php_fragment", 87);
		try
		{
			// Php.g:109:4: ({...}? => printExpr ';' )
			DebugEnterAlt(1);
			// Php.g:109:4: {...}? => printExpr ';'
			{
			DebugLocation(109, 4);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred6_Php", "expressionFollowsBodyString");
			}
			DebugLocation(109, 74);
			PushFollow(Follow._printExpr_in_synpred6_Php427);
			printExpr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(109, 84);
			Match(input,SemiColon,Follow._SemiColon_in_synpred6_Php429); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_Php_fragment", 87);
			LeaveRule("synpred6_Php_fragment", 87);
			LeaveRule_synpred6_Php_fragment();
		}
	}
	// $ANTLR end synpred6_Php

	partial void EnterRule_synpred8_Php_fragment();
	partial void LeaveRule_synpred8_Php_fragment();

	// $ANTLR start synpred8_Php
	private void synpred8_Php_fragment()
	{
		EnterRule_synpred8_Php_fragment();
		EnterRule("synpred8_Php_fragment", 89);
		TraceIn("synpred8_Php_fragment", 89);
		try
		{
			// Php.g:110:6: ({...}? => ( printExpr )? )
			DebugEnterAlt(1);
			// Php.g:110:6: {...}? => ( printExpr )?
			{
			DebugLocation(110, 6);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred8_Php", "expressionFollowsBodyString");
			}
			DebugLocation(110, 77);
			// Php.g:110:77: ( printExpr )?
			int alt151=2;
			try { DebugEnterSubRule(151);
			try { DebugEnterDecision(151, false);
			int LA151_1 = input.LA(1);

			if (((LA151_1>=Abstract && LA151_1<=And)||(LA151_1>=ArrayType && LA151_1<=As)||LA151_1==Bang||(LA151_1>=BoolType && LA151_1<=Class)||LA151_1==Clone||(LA151_1>=Const && LA151_1<=Continue)||(LA151_1>=Default && LA151_1<=Die)||LA151_1==Do||(LA151_1>=DoubleQuotedString && LA151_1<=Empty)||(LA151_1>=Eval && LA151_1<=Exit)||(LA151_1>=Extends && LA151_1<=Foreach)||(LA151_1>=Function && LA151_1<=HaltCompiler)||LA151_1==HereDoc||(LA151_1>=If && LA151_1<=IncrementOperator)||(LA151_1>=Instanceof && LA151_1<=List)||LA151_1==Minus||(LA151_1>=Namespace && LA151_1<=Null)||LA151_1==ObjectType||(LA151_1>=OpenRoundBracket && LA151_1<=Or)||(LA151_1>=Plus && LA151_1<=Public)||(LA151_1>=Real && LA151_1<=Return)||LA151_1==SingleQuotedString||(LA151_1>=Static && LA151_1<=Try)||LA151_1==UnquotedString||(LA151_1>=UnsetType && LA151_1<=While)||(LA151_1>=Xor && LA151_1<=131)))
			{
				alt151 = 1;
			}
			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:110:77: printExpr
				{
				DebugLocation(110, 77);
				PushFollow(Follow._printExpr_in_synpred8_Php442);
				printExpr();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(151); }


			}

		}
		finally
		{
			TraceOut("synpred8_Php_fragment", 89);
			LeaveRule("synpred8_Php_fragment", 89);
			LeaveRule_synpred8_Php_fragment();
		}
	}
	// $ANTLR end synpred8_Php

	partial void EnterRule_synpred10_Php_fragment();
	partial void LeaveRule_synpred10_Php_fragment();

	// $ANTLR start synpred10_Php
	private void synpred10_Php_fragment()
	{
		EnterRule_synpred10_Php_fragment();
		EnterRule("synpred10_Php_fragment", 91);
		TraceIn("synpred10_Php_fragment", 91);
		try
		{
			// Php.g:110:4: ( ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString )
			DebugEnterAlt(1);
			// Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
			{
			DebugLocation(110, 4);
			// Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? )
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Bang:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Echo:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BodyString:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 28, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Print:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 29, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Global:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 30, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Static:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 31, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Const:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 32, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Break:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 33, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Continue:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 34, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Goto:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 35, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Return:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 36, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Throw:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 37, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Case:
			case Catch:
			case Class:
			case Default:
			case Do:
			case DoubleType:
			case Else:
			case ElseIf:
			case Extends:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Namespace:
			case ObjectType:
			case Or:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case StringType:
			case Switch:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA154_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt154 = 1;
				}
				else if ((true))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 38, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 154, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:110:6: {...}? => ( printExpr )?
				{
				DebugLocation(110, 6);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return;}
					throw new FailedPredicateException(input, "synpred10_Php", "expressionFollowsBodyString");
				}
				DebugLocation(110, 77);
				// Php.g:110:77: ( printExpr )?
				int alt152=2;
				try { DebugEnterSubRule(152);
				try { DebugEnterDecision(152, false);
				int LA152_1 = input.LA(1);

				if (((LA152_1>=Abstract && LA152_1<=And)||(LA152_1>=ArrayType && LA152_1<=As)||LA152_1==Bang||(LA152_1>=BoolType && LA152_1<=Class)||LA152_1==Clone||(LA152_1>=Const && LA152_1<=Continue)||(LA152_1>=Default && LA152_1<=Die)||LA152_1==Do||(LA152_1>=DoubleQuotedString && LA152_1<=Empty)||(LA152_1>=Eval && LA152_1<=Exit)||(LA152_1>=Extends && LA152_1<=Foreach)||(LA152_1>=Function && LA152_1<=HaltCompiler)||LA152_1==HereDoc||(LA152_1>=If && LA152_1<=IncrementOperator)||(LA152_1>=Instanceof && LA152_1<=List)||LA152_1==Minus||(LA152_1>=Namespace && LA152_1<=Null)||LA152_1==ObjectType||(LA152_1>=OpenRoundBracket && LA152_1<=Or)||(LA152_1>=Plus && LA152_1<=Public)||(LA152_1>=Real && LA152_1<=Return)||LA152_1==SingleQuotedString||(LA152_1>=Static && LA152_1<=Try)||LA152_1==UnquotedString||(LA152_1>=UnsetType && LA152_1<=While)||(LA152_1>=Xor && LA152_1<=131)))
				{
					alt152 = 1;
				}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:110:77: printExpr
					{
					DebugLocation(110, 77);
					PushFollow(Follow._printExpr_in_synpred10_Php442);
					printExpr();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(152); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:110:90: ( simpleStatement )?
				{
				DebugLocation(110, 90);
				// Php.g:110:90: ( simpleStatement )?
				int alt153=2;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, false);
				int LA153_1 = input.LA(1);

				if (((LA153_1>=Abstract && LA153_1<=And)||(LA153_1>=ArrayType && LA153_1<=As)||LA153_1==Bang||(LA153_1>=BoolType && LA153_1<=Class)||LA153_1==Clone||(LA153_1>=Const && LA153_1<=Continue)||(LA153_1>=Default && LA153_1<=Die)||LA153_1==Do||(LA153_1>=DoubleQuotedString && LA153_1<=Empty)||(LA153_1>=Eval && LA153_1<=Exit)||(LA153_1>=Extends && LA153_1<=Foreach)||(LA153_1>=Function && LA153_1<=HaltCompiler)||LA153_1==HereDoc||(LA153_1>=If && LA153_1<=IncrementOperator)||(LA153_1>=Instanceof && LA153_1<=List)||LA153_1==Minus||(LA153_1>=Namespace && LA153_1<=Null)||LA153_1==ObjectType||(LA153_1>=OpenRoundBracket && LA153_1<=Or)||(LA153_1>=Plus && LA153_1<=Public)||(LA153_1>=Real && LA153_1<=Return)||LA153_1==SingleQuotedString||(LA153_1>=Static && LA153_1<=Try)||LA153_1==UnquotedString||(LA153_1>=UnsetType && LA153_1<=While)||(LA153_1>=Xor && LA153_1<=131)))
				{
					alt153 = 1;
				}
				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:110:90: simpleStatement
					{
					DebugLocation(110, 90);
					PushFollow(Follow._simpleStatement_in_synpred10_Php447);
					simpleStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(153); }


				}
				break;

			}
			} finally { DebugExitSubRule(154); }

			DebugLocation(111, 3);
			Match(input,BodyString,Follow._BodyString_in_synpred10_Php453); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_Php_fragment", 91);
			LeaveRule("synpred10_Php_fragment", 91);
			LeaveRule_synpred10_Php_fragment();
		}
	}
	// $ANTLR end synpred10_Php

	partial void EnterRule_synpred11_Php_fragment();
	partial void LeaveRule_synpred11_Php_fragment();

	// $ANTLR start synpred11_Php
	private void synpred11_Php_fragment()
	{
		EnterRule_synpred11_Php_fragment();
		EnterRule("synpred11_Php_fragment", 92);
		TraceIn("synpred11_Php_fragment", 92);
		try
		{
			// Php.g:112:4: ( namespaceBlock )
			DebugEnterAlt(1);
			// Php.g:112:4: namespaceBlock
			{
			DebugLocation(112, 4);
			PushFollow(Follow._namespaceBlock_in_synpred11_Php460);
			namespaceBlock();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred11_Php_fragment", 92);
			LeaveRule("synpred11_Php_fragment", 92);
			LeaveRule_synpred11_Php_fragment();
		}
	}
	// $ANTLR end synpred11_Php

	partial void EnterRule_synpred13_Php_fragment();
	partial void LeaveRule_synpred13_Php_fragment();

	// $ANTLR start synpred13_Php
	private void synpred13_Php_fragment()
	{
		EnterRule_synpred13_Php_fragment();
		EnterRule("synpred13_Php_fragment", 94);
		TraceIn("synpred13_Php_fragment", 94);
		try
		{
			// Php.g:114:4: ( UnquotedString Colon statement )
			DebugEnterAlt(1);
			// Php.g:114:4: UnquotedString Colon statement
			{
			DebugLocation(114, 4);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred13_Php470); if (state.failed) return;
			DebugLocation(114, 19);
			Match(input,Colon,Follow._Colon_in_synpred13_Php472); if (state.failed) return;
			DebugLocation(114, 25);
			PushFollow(Follow._statement_in_synpred13_Php474);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_Php_fragment", 94);
			LeaveRule("synpred13_Php_fragment", 94);
			LeaveRule_synpred13_Php_fragment();
		}
	}
	// $ANTLR end synpred13_Php

	partial void EnterRule_synpred14_Php_fragment();
	partial void LeaveRule_synpred14_Php_fragment();

	// $ANTLR start synpred14_Php
	private void synpred14_Php_fragment()
	{
		EnterRule_synpred14_Php_fragment();
		EnterRule("synpred14_Php_fragment", 95);
		TraceIn("synpred14_Php_fragment", 95);
		try
		{
			// Php.g:115:4: ( classDefinition )
			DebugEnterAlt(1);
			// Php.g:115:4: classDefinition
			{
			DebugLocation(115, 4);
			PushFollow(Follow._classDefinition_in_synpred14_Php479);
			classDefinition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_Php_fragment", 95);
			LeaveRule("synpred14_Php_fragment", 95);
			LeaveRule_synpred14_Php_fragment();
		}
	}
	// $ANTLR end synpred14_Php

	partial void EnterRule_synpred15_Php_fragment();
	partial void LeaveRule_synpred15_Php_fragment();

	// $ANTLR start synpred15_Php
	private void synpred15_Php_fragment()
	{
		EnterRule_synpred15_Php_fragment();
		EnterRule("synpred15_Php_fragment", 96);
		TraceIn("synpred15_Php_fragment", 96);
		try
		{
			// Php.g:116:4: ( interfaceDefinition )
			DebugEnterAlt(1);
			// Php.g:116:4: interfaceDefinition
			{
			DebugLocation(116, 4);
			PushFollow(Follow._interfaceDefinition_in_synpred15_Php484);
			interfaceDefinition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_Php_fragment", 96);
			LeaveRule("synpred15_Php_fragment", 96);
			LeaveRule_synpred15_Php_fragment();
		}
	}
	// $ANTLR end synpred15_Php

	partial void EnterRule_synpred16_Php_fragment();
	partial void LeaveRule_synpred16_Php_fragment();

	// $ANTLR start synpred16_Php
	private void synpred16_Php_fragment()
	{
		EnterRule_synpred16_Php_fragment();
		EnterRule("synpred16_Php_fragment", 97);
		TraceIn("synpred16_Php_fragment", 97);
		try
		{
			// Php.g:117:4: ( complexStatement )
			DebugEnterAlt(1);
			// Php.g:117:4: complexStatement
			{
			DebugLocation(117, 4);
			PushFollow(Follow._complexStatement_in_synpred16_Php489);
			complexStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_Php_fragment", 97);
			LeaveRule("synpred16_Php_fragment", 97);
			LeaveRule_synpred16_Php_fragment();
		}
	}
	// $ANTLR end synpred16_Php

	partial void EnterRule_synpred17_Php_fragment();
	partial void LeaveRule_synpred17_Php_fragment();

	// $ANTLR start synpred17_Php
	private void synpred17_Php_fragment()
	{
		EnterRule_synpred17_Php_fragment();
		EnterRule("synpred17_Php_fragment", 98);
		TraceIn("synpred17_Php_fragment", 98);
		try
		{
			// Php.g:118:4: ( simpleStatement ';' )
			DebugEnterAlt(1);
			// Php.g:118:4: simpleStatement ';'
			{
			DebugLocation(118, 4);
			PushFollow(Follow._simpleStatement_in_synpred17_Php494);
			simpleStatement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(118, 20);
			Match(input,SemiColon,Follow._SemiColon_in_synpred17_Php496); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_Php_fragment", 98);
			LeaveRule("synpred17_Php_fragment", 98);
			LeaveRule_synpred17_Php_fragment();
		}
	}
	// $ANTLR end synpred17_Php

	partial void EnterRule_synpred18_Php_fragment();
	partial void LeaveRule_synpred18_Php_fragment();

	// $ANTLR start synpred18_Php
	private void synpred18_Php_fragment()
	{
		EnterRule_synpred18_Php_fragment();
		EnterRule("synpred18_Php_fragment", 99);
		TraceIn("synpred18_Php_fragment", 99);
		try
		{
			// Php.g:127:8: ( statement )
			DebugEnterAlt(1);
			// Php.g:127:8: statement
			{
			DebugLocation(127, 8);
			PushFollow(Follow._statement_in_synpred18_Php525);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred18_Php_fragment", 99);
			LeaveRule("synpred18_Php_fragment", 99);
			LeaveRule_synpred18_Php_fragment();
		}
	}
	// $ANTLR end synpred18_Php

	partial void EnterRule_synpred52_Php_fragment();
	partial void LeaveRule_synpred52_Php_fragment();

	// $ANTLR start synpred52_Php
	private void synpred52_Php_fragment()
	{
		EnterRule_synpred52_Php_fragment();
		EnterRule("synpred52_Php_fragment", 133);
		TraceIn("synpred52_Php_fragment", 133);
		try
		{
			// Php.g:189:36: ( conditional )
			DebugEnterAlt(1);
			// Php.g:189:36: conditional
			{
			DebugLocation(189, 36);
			PushFollow(Follow._conditional_in_synpred52_Php911);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred52_Php_fragment", 133);
			LeaveRule("synpred52_Php_fragment", 133);
			LeaveRule_synpred52_Php_fragment();
		}
	}
	// $ANTLR end synpred52_Php

	partial void EnterRule_synpred53_Php_fragment();
	partial void LeaveRule_synpred53_Php_fragment();

	// $ANTLR start synpred53_Php
	private void synpred53_Php_fragment()
	{
		EnterRule_synpred53_Php_fragment();
		EnterRule("synpred53_Php_fragment", 134);
		TraceIn("synpred53_Php_fragment", 134);
		try
		{
			// Php.g:189:4: ( If '(' expression ')' statement ( conditional )? )
			DebugEnterAlt(1);
			// Php.g:189:4: If '(' expression ')' statement ( conditional )?
			{
			DebugLocation(189, 4);
			Match(input,If,Follow._If_in_synpred53_Php901); if (state.failed) return;
			DebugLocation(189, 7);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred53_Php903); if (state.failed) return;
			DebugLocation(189, 11);
			PushFollow(Follow._expression_in_synpred53_Php905);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(189, 22);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred53_Php907); if (state.failed) return;
			DebugLocation(189, 26);
			PushFollow(Follow._statement_in_synpred53_Php909);
			statement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(189, 36);
			// Php.g:189:36: ( conditional )?
			int alt161=2;
			try { DebugEnterSubRule(161);
			try { DebugEnterDecision(161, false);
			int LA161_1 = input.LA(1);

			if (((LA161_1>=Else && LA161_1<=ElseIf)))
			{
				alt161 = 1;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:189:36: conditional
				{
				DebugLocation(189, 36);
				PushFollow(Follow._conditional_in_synpred53_Php911);
				conditional();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(161); }


			}

		}
		finally
		{
			TraceOut("synpred53_Php_fragment", 134);
			LeaveRule("synpred53_Php_fragment", 134);
			LeaveRule_synpred53_Php_fragment();
		}
	}
	// $ANTLR end synpred53_Php

	partial void EnterRule_synpred54_Php_fragment();
	partial void LeaveRule_synpred54_Php_fragment();

	// $ANTLR start synpred54_Php
	private void synpred54_Php_fragment()
	{
		EnterRule_synpred54_Php_fragment();
		EnterRule("synpred54_Php_fragment", 135);
		TraceIn("synpred54_Php_fragment", 135);
		try
		{
			// Php.g:190:4: ( For '(' forInit forCondition forUpdate ')' statement )
			DebugEnterAlt(1);
			// Php.g:190:4: For '(' forInit forCondition forUpdate ')' statement
			{
			DebugLocation(190, 4);
			Match(input,For,Follow._For_in_synpred54_Php917); if (state.failed) return;
			DebugLocation(190, 8);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred54_Php919); if (state.failed) return;
			DebugLocation(190, 12);
			PushFollow(Follow._forInit_in_synpred54_Php921);
			forInit();
			PopFollow();
			if (state.failed) return;
			DebugLocation(190, 20);
			PushFollow(Follow._forCondition_in_synpred54_Php923);
			forCondition();
			PopFollow();
			if (state.failed) return;
			DebugLocation(190, 33);
			PushFollow(Follow._forUpdate_in_synpred54_Php925);
			forUpdate();
			PopFollow();
			if (state.failed) return;
			DebugLocation(190, 43);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred54_Php927); if (state.failed) return;
			DebugLocation(190, 47);
			PushFollow(Follow._statement_in_synpred54_Php929);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_Php_fragment", 135);
			LeaveRule("synpred54_Php_fragment", 135);
			LeaveRule_synpred54_Php_fragment();
		}
	}
	// $ANTLR end synpred54_Php

	partial void EnterRule_synpred55_Php_fragment();
	partial void LeaveRule_synpred55_Php_fragment();

	// $ANTLR start synpred55_Php
	private void synpred55_Php_fragment()
	{
		EnterRule_synpred55_Php_fragment();
		EnterRule("synpred55_Php_fragment", 136);
		TraceIn("synpred55_Php_fragment", 136);
		try
		{
			// Php.g:191:4: ( Foreach '(' expression As arrayEntry ')' statement )
			DebugEnterAlt(1);
			// Php.g:191:4: Foreach '(' expression As arrayEntry ')' statement
			{
			DebugLocation(191, 4);
			Match(input,Foreach,Follow._Foreach_in_synpred55_Php934); if (state.failed) return;
			DebugLocation(191, 12);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred55_Php936); if (state.failed) return;
			DebugLocation(191, 16);
			PushFollow(Follow._expression_in_synpred55_Php938);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(191, 27);
			Match(input,As,Follow._As_in_synpred55_Php940); if (state.failed) return;
			DebugLocation(191, 30);
			PushFollow(Follow._arrayEntry_in_synpred55_Php942);
			arrayEntry();
			PopFollow();
			if (state.failed) return;
			DebugLocation(191, 41);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred55_Php944); if (state.failed) return;
			DebugLocation(191, 45);
			PushFollow(Follow._statement_in_synpred55_Php946);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred55_Php_fragment", 136);
			LeaveRule("synpred55_Php_fragment", 136);
			LeaveRule_synpred55_Php_fragment();
		}
	}
	// $ANTLR end synpred55_Php

	partial void EnterRule_synpred57_Php_fragment();
	partial void LeaveRule_synpred57_Php_fragment();

	// $ANTLR start synpred57_Php
	private void synpred57_Php_fragment()
	{
		EnterRule_synpred57_Php_fragment();
		EnterRule("synpred57_Php_fragment", 138);
		TraceIn("synpred57_Php_fragment", 138);
		try
		{
			// Php.g:192:4: ( While '(' ( expression )? ')' statement )
			DebugEnterAlt(1);
			// Php.g:192:4: While '(' ( expression )? ')' statement
			{
			DebugLocation(192, 4);
			Match(input,While,Follow._While_in_synpred57_Php951); if (state.failed) return;
			DebugLocation(192, 10);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred57_Php953); if (state.failed) return;
			DebugLocation(192, 14);
			// Php.g:192:14: ( expression )?
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			int LA162_1 = input.LA(1);

			if (((LA162_1>=Abstract && LA162_1<=And)||(LA162_1>=ArrayType && LA162_1<=As)||LA162_1==Bang||(LA162_1>=BoolType && LA162_1<=Class)||LA162_1==Clone||(LA162_1>=Const && LA162_1<=Continue)||(LA162_1>=Default && LA162_1<=Die)||LA162_1==Do||(LA162_1>=DoubleQuotedString && LA162_1<=Empty)||(LA162_1>=Eval && LA162_1<=Exit)||(LA162_1>=Extends && LA162_1<=Foreach)||(LA162_1>=Function && LA162_1<=HaltCompiler)||LA162_1==HereDoc||(LA162_1>=If && LA162_1<=IncrementOperator)||(LA162_1>=Instanceof && LA162_1<=List)||LA162_1==Minus||(LA162_1>=Namespace && LA162_1<=Null)||LA162_1==ObjectType||(LA162_1>=OpenRoundBracket && LA162_1<=Or)||(LA162_1>=Plus && LA162_1<=Public)||(LA162_1>=Real && LA162_1<=Return)||LA162_1==SingleQuotedString||(LA162_1>=Static && LA162_1<=Try)||LA162_1==UnquotedString||(LA162_1>=UnsetType && LA162_1<=While)||(LA162_1>=Xor && LA162_1<=131)))
			{
				alt162 = 1;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:192:14: expression
				{
				DebugLocation(192, 14);
				PushFollow(Follow._expression_in_synpred57_Php955);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(192, 26);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred57_Php958); if (state.failed) return;
			DebugLocation(192, 30);
			PushFollow(Follow._statement_in_synpred57_Php960);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred57_Php_fragment", 138);
			LeaveRule("synpred57_Php_fragment", 138);
			LeaveRule_synpred57_Php_fragment();
		}
	}
	// $ANTLR end synpred57_Php

	partial void EnterRule_synpred58_Php_fragment();
	partial void LeaveRule_synpred58_Php_fragment();

	// $ANTLR start synpred58_Php
	private void synpred58_Php_fragment()
	{
		EnterRule_synpred58_Php_fragment();
		EnterRule("synpred58_Php_fragment", 139);
		TraceIn("synpred58_Php_fragment", 139);
		try
		{
			// Php.g:193:30: ( statement )
			DebugEnterAlt(1);
			// Php.g:193:30: statement
			{
			DebugLocation(193, 30);
			PushFollow(Follow._statement_in_synpred58_Php975);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred58_Php_fragment", 139);
			LeaveRule("synpred58_Php_fragment", 139);
			LeaveRule_synpred58_Php_fragment();
		}
	}
	// $ANTLR end synpred58_Php

	partial void EnterRule_synpred59_Php_fragment();
	partial void LeaveRule_synpred59_Php_fragment();

	// $ANTLR start synpred59_Php
	private void synpred59_Php_fragment()
	{
		EnterRule_synpred59_Php_fragment();
		EnterRule("synpred59_Php_fragment", 140);
		TraceIn("synpred59_Php_fragment", 140);
		try
		{
			// Php.g:193:41: ( conditionalWithColon )
			DebugEnterAlt(1);
			// Php.g:193:41: conditionalWithColon
			{
			DebugLocation(193, 41);
			PushFollow(Follow._conditionalWithColon_in_synpred59_Php978);
			conditionalWithColon();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_Php_fragment", 140);
			LeaveRule("synpred59_Php_fragment", 140);
			LeaveRule_synpred59_Php_fragment();
		}
	}
	// $ANTLR end synpred59_Php

	partial void EnterRule_synpred60_Php_fragment();
	partial void LeaveRule_synpred60_Php_fragment();

	// $ANTLR start synpred60_Php
	private void synpred60_Php_fragment()
	{
		EnterRule_synpred60_Php_fragment();
		EnterRule("synpred60_Php_fragment", 141);
		TraceIn("synpred60_Php_fragment", 141);
		try
		{
			// Php.g:193:4: ( If '(' expression ')' ':' ( statement )* ( conditionalWithColon )? )
			DebugEnterAlt(1);
			// Php.g:193:4: If '(' expression ')' ':' ( statement )* ( conditionalWithColon )?
			{
			DebugLocation(193, 4);
			Match(input,If,Follow._If_in_synpred60_Php965); if (state.failed) return;
			DebugLocation(193, 7);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred60_Php967); if (state.failed) return;
			DebugLocation(193, 11);
			PushFollow(Follow._expression_in_synpred60_Php969);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(193, 22);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred60_Php971); if (state.failed) return;
			DebugLocation(193, 26);
			Match(input,Colon,Follow._Colon_in_synpred60_Php973); if (state.failed) return;
			DebugLocation(193, 30);
			// Php.g:193:30: ( statement )*
			try { DebugEnterSubRule(163);
			while (true)
			{
				int alt163=2;
				try { DebugEnterDecision(163, false);
				switch (input.LA(1))
				{
				case ElseIf:
					{
					int LA163_2 = input.LA(2);

					if ((EvaluatePredicate(synpred58_Php_fragment)))
					{
						alt163 = 1;
					}


					}
					break;
				case Else:
					{
					int LA163_2 = input.LA(2);

					if ((EvaluatePredicate(synpred58_Php_fragment)))
					{
						alt163 = 1;
					}


					}
					break;
				case Abstract:
				case Ampersand:
				case And:
				case ArrayType:
				case As:
				case Bang:
				case BodyString:
				case BoolType:
				case BooleanType:
				case Break:
				case Case:
				case Catch:
				case Class:
				case Clone:
				case Const:
				case Continue:
				case Default:
				case Die:
				case Do:
				case DoubleQuotedString:
				case DoubleType:
				case Echo:
				case Empty:
				case Eval:
				case Exit:
				case Extends:
				case False:
				case Final:
				case Finally:
				case FloatType:
				case For:
				case Foreach:
				case Function:
				case Global:
				case Goto:
				case HaltCompiler:
				case HereDoc:
				case If:
				case Implements:
				case Include:
				case IncludeOnce:
				case IncrementOperator:
				case Instanceof:
				case IntType:
				case Integer:
				case IntegerType:
				case Interface:
				case Isset:
				case List:
				case Minus:
				case Namespace:
				case New:
				case Null:
				case ObjectType:
				case OpenCurlyBracket:
				case OpenRoundBracket:
				case OpenSquareBracket:
				case Or:
				case Plus:
				case Print:
				case Private:
				case Protected:
				case Public:
				case Real:
				case RealType:
				case Require:
				case RequireOnce:
				case Return:
				case SemiColon:
				case SingleQuotedString:
				case Static:
				case StringType:
				case SuppressWarnings:
				case Switch:
				case Throw:
				case Tilde:
				case True:
				case Try:
				case UnquotedString:
				case UnsetType:
				case Use:
				case Var:
				case VariableName:
				case While:
				case Xor:
				case 130:
				case 131:
					{
					alt163 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(163); }
				switch ( alt163 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:193:30: statement
					{
					DebugLocation(193, 30);
					PushFollow(Follow._statement_in_synpred60_Php975);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop163;
				}
			}

			loop163:
				;

			} finally { DebugExitSubRule(163); }

			DebugLocation(193, 41);
			// Php.g:193:41: ( conditionalWithColon )?
			int alt164=2;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, false);
			int LA164_1 = input.LA(1);

			if (((LA164_1>=Else && LA164_1<=ElseIf)))
			{
				alt164 = 1;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:193:41: conditionalWithColon
				{
				DebugLocation(193, 41);
				PushFollow(Follow._conditionalWithColon_in_synpred60_Php978);
				conditionalWithColon();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(164); }


			}

		}
		finally
		{
			TraceOut("synpred60_Php_fragment", 141);
			LeaveRule("synpred60_Php_fragment", 141);
			LeaveRule_synpred60_Php_fragment();
		}
	}
	// $ANTLR end synpred60_Php

	partial void EnterRule_synpred61_Php_fragment();
	partial void LeaveRule_synpred61_Php_fragment();

	// $ANTLR start synpred61_Php
	private void synpred61_Php_fragment()
	{
		EnterRule_synpred61_Php_fragment();
		EnterRule("synpred61_Php_fragment", 142);
		TraceIn("synpred61_Php_fragment", 142);
		try
		{
			// Php.g:194:51: ( statement )
			DebugEnterAlt(1);
			// Php.g:194:51: statement
			{
			DebugLocation(194, 51);
			PushFollow(Follow._statement_in_synpred61_Php998);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred61_Php_fragment", 142);
			LeaveRule("synpred61_Php_fragment", 142);
			LeaveRule_synpred61_Php_fragment();
		}
	}
	// $ANTLR end synpred61_Php

	partial void EnterRule_synpred62_Php_fragment();
	partial void LeaveRule_synpred62_Php_fragment();

	// $ANTLR start synpred62_Php
	private void synpred62_Php_fragment()
	{
		EnterRule_synpred62_Php_fragment();
		EnterRule("synpred62_Php_fragment", 143);
		TraceIn("synpred62_Php_fragment", 143);
		try
		{
			// Php.g:194:4: ( For '(' forInit forCondition forUpdate ')' ':' ( statement )* )
			DebugEnterAlt(1);
			// Php.g:194:4: For '(' forInit forCondition forUpdate ')' ':' ( statement )*
			{
			DebugLocation(194, 4);
			Match(input,For,Follow._For_in_synpred62_Php984); if (state.failed) return;
			DebugLocation(194, 8);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred62_Php986); if (state.failed) return;
			DebugLocation(194, 12);
			PushFollow(Follow._forInit_in_synpred62_Php988);
			forInit();
			PopFollow();
			if (state.failed) return;
			DebugLocation(194, 20);
			PushFollow(Follow._forCondition_in_synpred62_Php990);
			forCondition();
			PopFollow();
			if (state.failed) return;
			DebugLocation(194, 33);
			PushFollow(Follow._forUpdate_in_synpred62_Php992);
			forUpdate();
			PopFollow();
			if (state.failed) return;
			DebugLocation(194, 43);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred62_Php994); if (state.failed) return;
			DebugLocation(194, 47);
			Match(input,Colon,Follow._Colon_in_synpred62_Php996); if (state.failed) return;
			DebugLocation(194, 51);
			// Php.g:194:51: ( statement )*
			try { DebugEnterSubRule(165);
			while (true)
			{
				int alt165=2;
				try { DebugEnterDecision(165, false);
				int LA165_1 = input.LA(1);

				if (((LA165_1>=Abstract && LA165_1<=And)||(LA165_1>=ArrayType && LA165_1<=As)||(LA165_1>=Bang && LA165_1<=BodyString)||(LA165_1>=BoolType && LA165_1<=Class)||LA165_1==Clone||(LA165_1>=Const && LA165_1<=Continue)||(LA165_1>=Default && LA165_1<=Die)||LA165_1==Do||(LA165_1>=DoubleQuotedString && LA165_1<=Empty)||(LA165_1>=Eval && LA165_1<=Exit)||(LA165_1>=Extends && LA165_1<=Foreach)||(LA165_1>=Function && LA165_1<=HaltCompiler)||LA165_1==HereDoc||(LA165_1>=If && LA165_1<=IncrementOperator)||(LA165_1>=Instanceof && LA165_1<=List)||LA165_1==Minus||(LA165_1>=Namespace && LA165_1<=Null)||LA165_1==ObjectType||(LA165_1>=OpenCurlyBracket && LA165_1<=Or)||(LA165_1>=Plus && LA165_1<=Public)||(LA165_1>=Real && LA165_1<=SemiColon)||LA165_1==SingleQuotedString||(LA165_1>=Static && LA165_1<=Try)||LA165_1==UnquotedString||(LA165_1>=UnsetType && LA165_1<=While)||(LA165_1>=Xor && LA165_1<=131)))
				{
					alt165 = 1;
				}


				} finally { DebugExitDecision(165); }
				switch ( alt165 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:194:51: statement
					{
					DebugLocation(194, 51);
					PushFollow(Follow._statement_in_synpred62_Php998);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop165;
				}
			}

			loop165:
				;

			} finally { DebugExitSubRule(165); }


			}

		}
		finally
		{
			TraceOut("synpred62_Php_fragment", 143);
			LeaveRule("synpred62_Php_fragment", 143);
			LeaveRule_synpred62_Php_fragment();
		}
	}
	// $ANTLR end synpred62_Php

	partial void EnterRule_synpred63_Php_fragment();
	partial void LeaveRule_synpred63_Php_fragment();

	// $ANTLR start synpred63_Php
	private void synpred63_Php_fragment()
	{
		EnterRule_synpred63_Php_fragment();
		EnterRule("synpred63_Php_fragment", 144);
		TraceIn("synpred63_Php_fragment", 144);
		try
		{
			// Php.g:195:49: ( statement )
			DebugEnterAlt(1);
			// Php.g:195:49: statement
			{
			DebugLocation(195, 49);
			PushFollow(Follow._statement_in_synpred63_Php1018);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred63_Php_fragment", 144);
			LeaveRule("synpred63_Php_fragment", 144);
			LeaveRule_synpred63_Php_fragment();
		}
	}
	// $ANTLR end synpred63_Php

	partial void EnterRule_synpred64_Php_fragment();
	partial void LeaveRule_synpred64_Php_fragment();

	// $ANTLR start synpred64_Php
	private void synpred64_Php_fragment()
	{
		EnterRule_synpred64_Php_fragment();
		EnterRule("synpred64_Php_fragment", 145);
		TraceIn("synpred64_Php_fragment", 145);
		try
		{
			// Php.g:195:4: ( Foreach '(' expression As arrayEntry ')' ':' ( statement )* )
			DebugEnterAlt(1);
			// Php.g:195:4: Foreach '(' expression As arrayEntry ')' ':' ( statement )*
			{
			DebugLocation(195, 4);
			Match(input,Foreach,Follow._Foreach_in_synpred64_Php1004); if (state.failed) return;
			DebugLocation(195, 12);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred64_Php1006); if (state.failed) return;
			DebugLocation(195, 16);
			PushFollow(Follow._expression_in_synpred64_Php1008);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(195, 27);
			Match(input,As,Follow._As_in_synpred64_Php1010); if (state.failed) return;
			DebugLocation(195, 30);
			PushFollow(Follow._arrayEntry_in_synpred64_Php1012);
			arrayEntry();
			PopFollow();
			if (state.failed) return;
			DebugLocation(195, 41);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred64_Php1014); if (state.failed) return;
			DebugLocation(195, 45);
			Match(input,Colon,Follow._Colon_in_synpred64_Php1016); if (state.failed) return;
			DebugLocation(195, 49);
			// Php.g:195:49: ( statement )*
			try { DebugEnterSubRule(166);
			while (true)
			{
				int alt166=2;
				try { DebugEnterDecision(166, false);
				int LA166_1 = input.LA(1);

				if (((LA166_1>=Abstract && LA166_1<=And)||(LA166_1>=ArrayType && LA166_1<=As)||(LA166_1>=Bang && LA166_1<=BodyString)||(LA166_1>=BoolType && LA166_1<=Class)||LA166_1==Clone||(LA166_1>=Const && LA166_1<=Continue)||(LA166_1>=Default && LA166_1<=Die)||LA166_1==Do||(LA166_1>=DoubleQuotedString && LA166_1<=Empty)||(LA166_1>=Eval && LA166_1<=Exit)||(LA166_1>=Extends && LA166_1<=Foreach)||(LA166_1>=Function && LA166_1<=HaltCompiler)||LA166_1==HereDoc||(LA166_1>=If && LA166_1<=IncrementOperator)||(LA166_1>=Instanceof && LA166_1<=List)||LA166_1==Minus||(LA166_1>=Namespace && LA166_1<=Null)||LA166_1==ObjectType||(LA166_1>=OpenCurlyBracket && LA166_1<=Or)||(LA166_1>=Plus && LA166_1<=Public)||(LA166_1>=Real && LA166_1<=SemiColon)||LA166_1==SingleQuotedString||(LA166_1>=Static && LA166_1<=Try)||LA166_1==UnquotedString||(LA166_1>=UnsetType && LA166_1<=While)||(LA166_1>=Xor && LA166_1<=131)))
				{
					alt166 = 1;
				}


				} finally { DebugExitDecision(166); }
				switch ( alt166 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:195:49: statement
					{
					DebugLocation(195, 49);
					PushFollow(Follow._statement_in_synpred64_Php1018);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop166;
				}
			}

			loop166:
				;

			} finally { DebugExitSubRule(166); }


			}

		}
		finally
		{
			TraceOut("synpred64_Php_fragment", 145);
			LeaveRule("synpred64_Php_fragment", 145);
			LeaveRule_synpred64_Php_fragment();
		}
	}
	// $ANTLR end synpred64_Php

	partial void EnterRule_synpred66_Php_fragment();
	partial void LeaveRule_synpred66_Php_fragment();

	// $ANTLR start synpred66_Php
	private void synpred66_Php_fragment()
	{
		EnterRule_synpred66_Php_fragment();
		EnterRule("synpred66_Php_fragment", 147);
		TraceIn("synpred66_Php_fragment", 147);
		try
		{
			// Php.g:196:34: ( statement )
			DebugEnterAlt(1);
			// Php.g:196:34: statement
			{
			DebugLocation(196, 34);
			PushFollow(Follow._statement_in_synpred66_Php1035);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred66_Php_fragment", 147);
			LeaveRule("synpred66_Php_fragment", 147);
			LeaveRule_synpred66_Php_fragment();
		}
	}
	// $ANTLR end synpred66_Php

	partial void EnterRule_synpred67_Php_fragment();
	partial void LeaveRule_synpred67_Php_fragment();

	// $ANTLR start synpred67_Php
	private void synpred67_Php_fragment()
	{
		EnterRule_synpred67_Php_fragment();
		EnterRule("synpred67_Php_fragment", 148);
		TraceIn("synpred67_Php_fragment", 148);
		try
		{
			// Php.g:196:4: ( While '(' ( expression )? ')' ':' ( statement )* )
			DebugEnterAlt(1);
			// Php.g:196:4: While '(' ( expression )? ')' ':' ( statement )*
			{
			DebugLocation(196, 4);
			Match(input,While,Follow._While_in_synpred67_Php1024); if (state.failed) return;
			DebugLocation(196, 10);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred67_Php1026); if (state.failed) return;
			DebugLocation(196, 14);
			// Php.g:196:14: ( expression )?
			int alt167=2;
			try { DebugEnterSubRule(167);
			try { DebugEnterDecision(167, false);
			int LA167_1 = input.LA(1);

			if (((LA167_1>=Abstract && LA167_1<=And)||(LA167_1>=ArrayType && LA167_1<=As)||LA167_1==Bang||(LA167_1>=BoolType && LA167_1<=Class)||LA167_1==Clone||(LA167_1>=Const && LA167_1<=Continue)||(LA167_1>=Default && LA167_1<=Die)||LA167_1==Do||(LA167_1>=DoubleQuotedString && LA167_1<=Empty)||(LA167_1>=Eval && LA167_1<=Exit)||(LA167_1>=Extends && LA167_1<=Foreach)||(LA167_1>=Function && LA167_1<=HaltCompiler)||LA167_1==HereDoc||(LA167_1>=If && LA167_1<=IncrementOperator)||(LA167_1>=Instanceof && LA167_1<=List)||LA167_1==Minus||(LA167_1>=Namespace && LA167_1<=Null)||LA167_1==ObjectType||(LA167_1>=OpenRoundBracket && LA167_1<=Or)||(LA167_1>=Plus && LA167_1<=Public)||(LA167_1>=Real && LA167_1<=Return)||LA167_1==SingleQuotedString||(LA167_1>=Static && LA167_1<=Try)||LA167_1==UnquotedString||(LA167_1>=UnsetType && LA167_1<=While)||(LA167_1>=Xor && LA167_1<=131)))
			{
				alt167 = 1;
			}
			} finally { DebugExitDecision(167); }
			switch (alt167)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:196:14: expression
				{
				DebugLocation(196, 14);
				PushFollow(Follow._expression_in_synpred67_Php1028);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(167); }

			DebugLocation(196, 26);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred67_Php1031); if (state.failed) return;
			DebugLocation(196, 30);
			Match(input,Colon,Follow._Colon_in_synpred67_Php1033); if (state.failed) return;
			DebugLocation(196, 34);
			// Php.g:196:34: ( statement )*
			try { DebugEnterSubRule(168);
			while (true)
			{
				int alt168=2;
				try { DebugEnterDecision(168, false);
				int LA168_1 = input.LA(1);

				if (((LA168_1>=Abstract && LA168_1<=And)||(LA168_1>=ArrayType && LA168_1<=As)||(LA168_1>=Bang && LA168_1<=BodyString)||(LA168_1>=BoolType && LA168_1<=Class)||LA168_1==Clone||(LA168_1>=Const && LA168_1<=Continue)||(LA168_1>=Default && LA168_1<=Die)||LA168_1==Do||(LA168_1>=DoubleQuotedString && LA168_1<=Empty)||(LA168_1>=Eval && LA168_1<=Exit)||(LA168_1>=Extends && LA168_1<=Foreach)||(LA168_1>=Function && LA168_1<=HaltCompiler)||LA168_1==HereDoc||(LA168_1>=If && LA168_1<=IncrementOperator)||(LA168_1>=Instanceof && LA168_1<=List)||LA168_1==Minus||(LA168_1>=Namespace && LA168_1<=Null)||LA168_1==ObjectType||(LA168_1>=OpenCurlyBracket && LA168_1<=Or)||(LA168_1>=Plus && LA168_1<=Public)||(LA168_1>=Real && LA168_1<=SemiColon)||LA168_1==SingleQuotedString||(LA168_1>=Static && LA168_1<=Try)||LA168_1==UnquotedString||(LA168_1>=UnsetType && LA168_1<=While)||(LA168_1>=Xor && LA168_1<=131)))
				{
					alt168 = 1;
				}


				} finally { DebugExitDecision(168); }
				switch ( alt168 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:196:34: statement
					{
					DebugLocation(196, 34);
					PushFollow(Follow._statement_in_synpred67_Php1035);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop168;
				}
			}

			loop168:
				;

			} finally { DebugExitSubRule(168); }


			}

		}
		finally
		{
			TraceOut("synpred67_Php_fragment", 148);
			LeaveRule("synpred67_Php_fragment", 148);
			LeaveRule_synpred67_Php_fragment();
		}
	}
	// $ANTLR end synpred67_Php

	partial void EnterRule_synpred71_Php_fragment();
	partial void LeaveRule_synpred71_Php_fragment();

	// $ANTLR start synpred71_Php
	private void synpred71_Php_fragment()
	{
		EnterRule_synpred71_Php_fragment();
		EnterRule("synpred71_Php_fragment", 152);
		TraceIn("synpred71_Php_fragment", 152);
		try
		{
			// Php.g:205:5: ( Catch '(' qualifiedName variable ')' bracketedBlock )
			DebugEnterAlt(1);
			// Php.g:205:5: Catch '(' qualifiedName variable ')' bracketedBlock
			{
			DebugLocation(205, 5);
			Match(input,Catch,Follow._Catch_in_synpred71_Php1100); if (state.failed) return;
			DebugLocation(205, 11);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred71_Php1102); if (state.failed) return;
			DebugLocation(205, 15);
			PushFollow(Follow._qualifiedName_in_synpred71_Php1104);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(205, 29);
			PushFollow(Follow._variable_in_synpred71_Php1106);
			variable();
			PopFollow();
			if (state.failed) return;
			DebugLocation(205, 38);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred71_Php1108); if (state.failed) return;
			DebugLocation(205, 42);
			PushFollow(Follow._bracketedBlock_in_synpred71_Php1110);
			bracketedBlock();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred71_Php_fragment", 152);
			LeaveRule("synpred71_Php_fragment", 152);
			LeaveRule_synpred71_Php_fragment();
		}
	}
	// $ANTLR end synpred71_Php

	partial void EnterRule_synpred72_Php_fragment();
	partial void LeaveRule_synpred72_Php_fragment();

	// $ANTLR start synpred72_Php
	private void synpred72_Php_fragment()
	{
		EnterRule_synpred72_Php_fragment();
		EnterRule("synpred72_Php_fragment", 153);
		TraceIn("synpred72_Php_fragment", 153);
		try
		{
			// Php.g:206:5: ( Finally bracketedBlock )
			DebugEnterAlt(1);
			// Php.g:206:5: Finally bracketedBlock
			{
			DebugLocation(206, 5);
			Match(input,Finally,Follow._Finally_in_synpred72_Php1118); if (state.failed) return;
			DebugLocation(206, 13);
			PushFollow(Follow._bracketedBlock_in_synpred72_Php1120);
			bracketedBlock();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred72_Php_fragment", 153);
			LeaveRule("synpred72_Php_fragment", 153);
			LeaveRule_synpred72_Php_fragment();
		}
	}
	// $ANTLR end synpred72_Php

	partial void EnterRule_synpred73_Php_fragment();
	partial void LeaveRule_synpred73_Php_fragment();

	// $ANTLR start synpred73_Php
	private void synpred73_Php_fragment()
	{
		EnterRule_synpred73_Php_fragment();
		EnterRule("synpred73_Php_fragment", 154);
		TraceIn("synpred73_Php_fragment", 154);
		try
		{
			// Php.g:210:4: ( Echo commaList )
			DebugEnterAlt(1);
			// Php.g:210:4: Echo commaList
			{
			DebugLocation(210, 4);
			Match(input,Echo,Follow._Echo_in_synpred73_Php1133); if (state.failed) return;
			DebugLocation(210, 9);
			PushFollow(Follow._commaList_in_synpred73_Php1135);
			commaList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred73_Php_fragment", 154);
			LeaveRule("synpred73_Php_fragment", 154);
			LeaveRule_synpred73_Php_fragment();
		}
	}
	// $ANTLR end synpred73_Php

	partial void EnterRule_synpred74_Php_fragment();
	partial void LeaveRule_synpred74_Php_fragment();

	// $ANTLR start synpred74_Php
	private void synpred74_Php_fragment()
	{
		EnterRule_synpred74_Php_fragment();
		EnterRule("synpred74_Php_fragment", 155);
		TraceIn("synpred74_Php_fragment", 155);
		try
		{
			// Php.g:211:4: ( Print expression )
			DebugEnterAlt(1);
			// Php.g:211:4: Print expression
			{
			DebugLocation(211, 4);
			Match(input,Print,Follow._Print_in_synpred74_Php1140); if (state.failed) return;
			DebugLocation(211, 10);
			PushFollow(Follow._expression_in_synpred74_Php1142);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred74_Php_fragment", 155);
			LeaveRule("synpred74_Php_fragment", 155);
			LeaveRule_synpred74_Php_fragment();
		}
	}
	// $ANTLR end synpred74_Php

	partial void EnterRule_synpred76_Php_fragment();
	partial void LeaveRule_synpred76_Php_fragment();

	// $ANTLR start synpred76_Php
	private void synpred76_Php_fragment()
	{
		EnterRule_synpred76_Php_fragment();
		EnterRule("synpred76_Php_fragment", 157);
		TraceIn("synpred76_Php_fragment", 157);
		try
		{
			// Php.g:212:4: ( Global variable ( ',' variable )* )
			DebugEnterAlt(1);
			// Php.g:212:4: Global variable ( ',' variable )*
			{
			DebugLocation(212, 4);
			Match(input,Global,Follow._Global_in_synpred76_Php1147); if (state.failed) return;
			DebugLocation(212, 11);
			PushFollow(Follow._variable_in_synpred76_Php1149);
			variable();
			PopFollow();
			if (state.failed) return;
			DebugLocation(212, 20);
			// Php.g:212:20: ( ',' variable )*
			try { DebugEnterSubRule(169);
			while (true)
			{
				int alt169=2;
				try { DebugEnterDecision(169, false);
				int LA169_1 = input.LA(1);

				if ((LA169_1==Comma))
				{
					alt169 = 1;
				}


				} finally { DebugExitDecision(169); }
				switch ( alt169 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:212:21: ',' variable
					{
					DebugLocation(212, 21);
					Match(input,Comma,Follow._Comma_in_synpred76_Php1152); if (state.failed) return;
					DebugLocation(212, 25);
					PushFollow(Follow._variable_in_synpred76_Php1154);
					variable();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop169;
				}
			}

			loop169:
				;

			} finally { DebugExitSubRule(169); }


			}

		}
		finally
		{
			TraceOut("synpred76_Php_fragment", 157);
			LeaveRule("synpred76_Php_fragment", 157);
			LeaveRule_synpred76_Php_fragment();
		}
	}
	// $ANTLR end synpred76_Php

	partial void EnterRule_synpred80_Php_fragment();
	partial void LeaveRule_synpred80_Php_fragment();

	// $ANTLR start synpred80_Php
	private void synpred80_Php_fragment()
	{
		EnterRule_synpred80_Php_fragment();
		EnterRule("synpred80_Php_fragment", 161);
		TraceIn("synpred80_Php_fragment", 161);
		try
		{
			// Php.g:213:4: ( Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// Php.g:213:4: Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
			{
			DebugLocation(213, 4);
			Match(input,Static,Follow._Static_in_synpred80_Php1162); if (state.failed) return;
			DebugLocation(213, 11);
			Match(input,VariableName,Follow._VariableName_in_synpred80_Php1164); if (state.failed) return;
			DebugLocation(213, 24);
			// Php.g:213:24: ( Equals atom )?
			int alt171=2;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, false);
			int LA171_1 = input.LA(1);

			if ((LA171_1==Equals))
			{
				alt171 = 1;
			}
			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:213:25: Equals atom
				{
				DebugLocation(213, 25);
				Match(input,Equals,Follow._Equals_in_synpred80_Php1167); if (state.failed) return;
				DebugLocation(213, 32);
				PushFollow(Follow._atom_in_synpred80_Php1169);
				atom();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(171); }

			DebugLocation(213, 39);
			// Php.g:213:39: ( ',' VariableName ( Equals atom )? )*
			try { DebugEnterSubRule(173);
			while (true)
			{
				int alt173=2;
				try { DebugEnterDecision(173, false);
				int LA173_1 = input.LA(1);

				if ((LA173_1==Comma))
				{
					alt173 = 1;
				}


				} finally { DebugExitDecision(173); }
				switch ( alt173 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:213:40: ',' VariableName ( Equals atom )?
					{
					DebugLocation(213, 40);
					Match(input,Comma,Follow._Comma_in_synpred80_Php1174); if (state.failed) return;
					DebugLocation(213, 44);
					Match(input,VariableName,Follow._VariableName_in_synpred80_Php1176); if (state.failed) return;
					DebugLocation(213, 57);
					// Php.g:213:57: ( Equals atom )?
					int alt172=2;
					try { DebugEnterSubRule(172);
					try { DebugEnterDecision(172, false);
					int LA172_1 = input.LA(1);

					if ((LA172_1==Equals))
					{
						alt172 = 1;
					}
					} finally { DebugExitDecision(172); }
					switch (alt172)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:213:58: Equals atom
						{
						DebugLocation(213, 58);
						Match(input,Equals,Follow._Equals_in_synpred80_Php1179); if (state.failed) return;
						DebugLocation(213, 65);
						PushFollow(Follow._atom_in_synpred80_Php1181);
						atom();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(172); }


					}
					break;

				default:
					goto loop173;
				}
			}

			loop173:
				;

			} finally { DebugExitSubRule(173); }


			}

		}
		finally
		{
			TraceOut("synpred80_Php_fragment", 161);
			LeaveRule("synpred80_Php_fragment", 161);
			LeaveRule_synpred80_Php_fragment();
		}
	}
	// $ANTLR end synpred80_Php

	partial void EnterRule_synpred81_Php_fragment();
	partial void LeaveRule_synpred81_Php_fragment();

	// $ANTLR start synpred81_Php
	private void synpred81_Php_fragment()
	{
		EnterRule_synpred81_Php_fragment();
		EnterRule("synpred81_Php_fragment", 162);
		TraceIn("synpred81_Php_fragment", 162);
		try
		{
			// Php.g:214:4: ( constDefinition )
			DebugEnterAlt(1);
			// Php.g:214:4: constDefinition
			{
			DebugLocation(214, 4);
			PushFollow(Follow._constDefinition_in_synpred81_Php1190);
			constDefinition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred81_Php_fragment", 162);
			LeaveRule("synpred81_Php_fragment", 162);
			LeaveRule_synpred81_Php_fragment();
		}
	}
	// $ANTLR end synpred81_Php

	partial void EnterRule_synpred83_Php_fragment();
	partial void LeaveRule_synpred83_Php_fragment();

	// $ANTLR start synpred83_Php
	private void synpred83_Php_fragment()
	{
		EnterRule_synpred83_Php_fragment();
		EnterRule("synpred83_Php_fragment", 164);
		TraceIn("synpred83_Php_fragment", 164);
		try
		{
			// Php.g:215:4: ( Break ( Integer )? )
			DebugEnterAlt(1);
			// Php.g:215:4: Break ( Integer )?
			{
			DebugLocation(215, 4);
			Match(input,Break,Follow._Break_in_synpred83_Php1195); if (state.failed) return;
			DebugLocation(215, 10);
			// Php.g:215:10: ( Integer )?
			int alt174=2;
			try { DebugEnterSubRule(174);
			try { DebugEnterDecision(174, false);
			int LA174_1 = input.LA(1);

			if ((LA174_1==Integer))
			{
				alt174 = 1;
			}
			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:215:10: Integer
				{
				DebugLocation(215, 10);
				Match(input,Integer,Follow._Integer_in_synpred83_Php1197); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(174); }


			}

		}
		finally
		{
			TraceOut("synpred83_Php_fragment", 164);
			LeaveRule("synpred83_Php_fragment", 164);
			LeaveRule_synpred83_Php_fragment();
		}
	}
	// $ANTLR end synpred83_Php

	partial void EnterRule_synpred85_Php_fragment();
	partial void LeaveRule_synpred85_Php_fragment();

	// $ANTLR start synpred85_Php
	private void synpred85_Php_fragment()
	{
		EnterRule_synpred85_Php_fragment();
		EnterRule("synpred85_Php_fragment", 166);
		TraceIn("synpred85_Php_fragment", 166);
		try
		{
			// Php.g:216:4: ( Continue ( Integer )? )
			DebugEnterAlt(1);
			// Php.g:216:4: Continue ( Integer )?
			{
			DebugLocation(216, 4);
			Match(input,Continue,Follow._Continue_in_synpred85_Php1203); if (state.failed) return;
			DebugLocation(216, 13);
			// Php.g:216:13: ( Integer )?
			int alt175=2;
			try { DebugEnterSubRule(175);
			try { DebugEnterDecision(175, false);
			int LA175_1 = input.LA(1);

			if ((LA175_1==Integer))
			{
				alt175 = 1;
			}
			} finally { DebugExitDecision(175); }
			switch (alt175)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:216:13: Integer
				{
				DebugLocation(216, 13);
				Match(input,Integer,Follow._Integer_in_synpred85_Php1205); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(175); }


			}

		}
		finally
		{
			TraceOut("synpred85_Php_fragment", 166);
			LeaveRule("synpred85_Php_fragment", 166);
			LeaveRule_synpred85_Php_fragment();
		}
	}
	// $ANTLR end synpred85_Php

	partial void EnterRule_synpred86_Php_fragment();
	partial void LeaveRule_synpred86_Php_fragment();

	// $ANTLR start synpred86_Php
	private void synpred86_Php_fragment()
	{
		EnterRule_synpred86_Php_fragment();
		EnterRule("synpred86_Php_fragment", 167);
		TraceIn("synpred86_Php_fragment", 167);
		try
		{
			// Php.g:217:4: ( Goto UnquotedString )
			DebugEnterAlt(1);
			// Php.g:217:4: Goto UnquotedString
			{
			DebugLocation(217, 4);
			Match(input,Goto,Follow._Goto_in_synpred86_Php1211); if (state.failed) return;
			DebugLocation(217, 9);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred86_Php1213); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred86_Php_fragment", 167);
			LeaveRule("synpred86_Php_fragment", 167);
			LeaveRule_synpred86_Php_fragment();
		}
	}
	// $ANTLR end synpred86_Php

	partial void EnterRule_synpred88_Php_fragment();
	partial void LeaveRule_synpred88_Php_fragment();

	// $ANTLR start synpred88_Php
	private void synpred88_Php_fragment()
	{
		EnterRule_synpred88_Php_fragment();
		EnterRule("synpred88_Php_fragment", 169);
		TraceIn("synpred88_Php_fragment", 169);
		try
		{
			// Php.g:218:4: ( Return ( expression )? )
			DebugEnterAlt(1);
			// Php.g:218:4: Return ( expression )?
			{
			DebugLocation(218, 4);
			Match(input,Return,Follow._Return_in_synpred88_Php1218); if (state.failed) return;
			DebugLocation(218, 11);
			// Php.g:218:11: ( expression )?
			int alt176=2;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			int LA176_1 = input.LA(1);

			if (((LA176_1>=Abstract && LA176_1<=And)||(LA176_1>=ArrayType && LA176_1<=As)||LA176_1==Bang||(LA176_1>=BoolType && LA176_1<=Class)||LA176_1==Clone||(LA176_1>=Const && LA176_1<=Continue)||(LA176_1>=Default && LA176_1<=Die)||LA176_1==Do||(LA176_1>=DoubleQuotedString && LA176_1<=Empty)||(LA176_1>=Eval && LA176_1<=Exit)||(LA176_1>=Extends && LA176_1<=Foreach)||(LA176_1>=Function && LA176_1<=HaltCompiler)||LA176_1==HereDoc||(LA176_1>=If && LA176_1<=IncrementOperator)||(LA176_1>=Instanceof && LA176_1<=List)||LA176_1==Minus||(LA176_1>=Namespace && LA176_1<=Null)||LA176_1==ObjectType||(LA176_1>=OpenRoundBracket && LA176_1<=Or)||(LA176_1>=Plus && LA176_1<=Public)||(LA176_1>=Real && LA176_1<=Return)||LA176_1==SingleQuotedString||(LA176_1>=Static && LA176_1<=Try)||LA176_1==UnquotedString||(LA176_1>=UnsetType && LA176_1<=While)||(LA176_1>=Xor && LA176_1<=131)))
			{
				alt176 = 1;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:218:11: expression
				{
				DebugLocation(218, 11);
				PushFollow(Follow._expression_in_synpred88_Php1220);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(176); }


			}

		}
		finally
		{
			TraceOut("synpred88_Php_fragment", 169);
			LeaveRule("synpred88_Php_fragment", 169);
			LeaveRule_synpred88_Php_fragment();
		}
	}
	// $ANTLR end synpred88_Php

	partial void EnterRule_synpred89_Php_fragment();
	partial void LeaveRule_synpred89_Php_fragment();

	// $ANTLR start synpred89_Php
	private void synpred89_Php_fragment()
	{
		EnterRule_synpred89_Php_fragment();
		EnterRule("synpred89_Php_fragment", 170);
		TraceIn("synpred89_Php_fragment", 170);
		try
		{
			// Php.g:219:4: ( Goto UnquotedString )
			DebugEnterAlt(1);
			// Php.g:219:4: Goto UnquotedString
			{
			DebugLocation(219, 4);
			Match(input,Goto,Follow._Goto_in_synpred89_Php1226); if (state.failed) return;
			DebugLocation(219, 9);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred89_Php1228); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred89_Php_fragment", 170);
			LeaveRule("synpred89_Php_fragment", 170);
			LeaveRule_synpred89_Php_fragment();
		}
	}
	// $ANTLR end synpred89_Php

	partial void EnterRule_synpred90_Php_fragment();
	partial void LeaveRule_synpred90_Php_fragment();

	// $ANTLR start synpred90_Php
	private void synpred90_Php_fragment()
	{
		EnterRule_synpred90_Php_fragment();
		EnterRule("synpred90_Php_fragment", 171);
		TraceIn("synpred90_Php_fragment", 171);
		try
		{
			// Php.g:220:4: ( Throw expression )
			DebugEnterAlt(1);
			// Php.g:220:4: Throw expression
			{
			DebugLocation(220, 4);
			Match(input,Throw,Follow._Throw_in_synpred90_Php1233); if (state.failed) return;
			DebugLocation(220, 10);
			PushFollow(Follow._expression_in_synpred90_Php1235);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred90_Php_fragment", 171);
			LeaveRule("synpred90_Php_fragment", 171);
			LeaveRule_synpred90_Php_fragment();
		}
	}
	// $ANTLR end synpred90_Php

	partial void EnterRule_synpred91_Php_fragment();
	partial void LeaveRule_synpred91_Php_fragment();

	// $ANTLR start synpred91_Php
	private void synpred91_Php_fragment()
	{
		EnterRule_synpred91_Php_fragment();
		EnterRule("synpred91_Php_fragment", 172);
		TraceIn("synpred91_Php_fragment", 172);
		try
		{
			// Php.g:225:40: ( conditional )
			DebugEnterAlt(1);
			// Php.g:225:40: conditional
			{
			DebugLocation(225, 40);
			PushFollow(Follow._conditional_in_synpred91_Php1261);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred91_Php_fragment", 172);
			LeaveRule("synpred91_Php_fragment", 172);
			LeaveRule_synpred91_Php_fragment();
		}
	}
	// $ANTLR end synpred91_Php

	partial void EnterRule_synpred93_Php_fragment();
	partial void LeaveRule_synpred93_Php_fragment();

	// $ANTLR start synpred93_Php
	private void synpred93_Php_fragment()
	{
		EnterRule_synpred93_Php_fragment();
		EnterRule("synpred93_Php_fragment", 174);
		TraceIn("synpred93_Php_fragment", 174);
		try
		{
			// Php.g:230:34: ( statement )
			DebugEnterAlt(1);
			// Php.g:230:34: statement
			{
			DebugLocation(230, 34);
			PushFollow(Follow._statement_in_synpred93_Php1290);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred93_Php_fragment", 174);
			LeaveRule("synpred93_Php_fragment", 174);
			LeaveRule_synpred93_Php_fragment();
		}
	}
	// $ANTLR end synpred93_Php

	partial void EnterRule_synpred94_Php_fragment();
	partial void LeaveRule_synpred94_Php_fragment();

	// $ANTLR start synpred94_Php
	private void synpred94_Php_fragment()
	{
		EnterRule_synpred94_Php_fragment();
		EnterRule("synpred94_Php_fragment", 175);
		TraceIn("synpred94_Php_fragment", 175);
		try
		{
			// Php.g:230:45: ( conditionalWithColon )
			DebugEnterAlt(1);
			// Php.g:230:45: conditionalWithColon
			{
			DebugLocation(230, 45);
			PushFollow(Follow._conditionalWithColon_in_synpred94_Php1293);
			conditionalWithColon();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred94_Php_fragment", 175);
			LeaveRule("synpred94_Php_fragment", 175);
			LeaveRule_synpred94_Php_fragment();
		}
	}
	// $ANTLR end synpred94_Php

	partial void EnterRule_synpred96_Php_fragment();
	partial void LeaveRule_synpred96_Php_fragment();

	// $ANTLR start synpred96_Php
	private void synpred96_Php_fragment()
	{
		EnterRule_synpred96_Php_fragment();
		EnterRule("synpred96_Php_fragment", 177);
		TraceIn("synpred96_Php_fragment", 177);
		try
		{
			// Php.g:231:13: ( statement )
			DebugEnterAlt(1);
			// Php.g:231:13: statement
			{
			DebugLocation(231, 13);
			PushFollow(Follow._statement_in_synpred96_Php1303);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred96_Php_fragment", 177);
			LeaveRule("synpred96_Php_fragment", 177);
			LeaveRule_synpred96_Php_fragment();
		}
	}
	// $ANTLR end synpred96_Php

	partial void EnterRule_synpred102_Php_fragment();
	partial void LeaveRule_synpred102_Php_fragment();

	// $ANTLR start synpred102_Php
	private void synpred102_Php_fragment()
	{
		EnterRule_synpred102_Php_fragment();
		EnterRule("synpred102_Php_fragment", 183);
		TraceIn("synpred102_Php_fragment", 183);
		try
		{
			// Php.g:247:4: ( ( casestatement )* defaultcase ( casestatement )* )
			DebugEnterAlt(1);
			// Php.g:247:4: ( casestatement )* defaultcase ( casestatement )*
			{
			DebugLocation(247, 4);
			// Php.g:247:4: ( casestatement )*
			try { DebugEnterSubRule(180);
			while (true)
			{
				int alt180=2;
				try { DebugEnterDecision(180, false);
				int LA180_1 = input.LA(1);

				if ((LA180_1==Case))
				{
					alt180 = 1;
				}


				} finally { DebugExitDecision(180); }
				switch ( alt180 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:247:4: casestatement
					{
					DebugLocation(247, 4);
					PushFollow(Follow._casestatement_in_synpred102_Php1356);
					casestatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop180;
				}
			}

			loop180:
				;

			} finally { DebugExitSubRule(180); }

			DebugLocation(247, 19);
			PushFollow(Follow._defaultcase_in_synpred102_Php1359);
			defaultcase();
			PopFollow();
			if (state.failed) return;
			DebugLocation(247, 31);
			// Php.g:247:31: ( casestatement )*
			try { DebugEnterSubRule(181);
			while (true)
			{
				int alt181=2;
				try { DebugEnterDecision(181, false);
				int LA181_1 = input.LA(1);

				if ((LA181_1==Case))
				{
					alt181 = 1;
				}


				} finally { DebugExitDecision(181); }
				switch ( alt181 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:247:31: casestatement
					{
					DebugLocation(247, 31);
					PushFollow(Follow._casestatement_in_synpred102_Php1361);
					casestatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop181;
				}
			}

			loop181:
				;

			} finally { DebugExitSubRule(181); }


			}

		}
		finally
		{
			TraceOut("synpred102_Php_fragment", 183);
			LeaveRule("synpred102_Php_fragment", 183);
			LeaveRule_synpred102_Php_fragment();
		}
	}
	// $ANTLR end synpred102_Php

	partial void EnterRule_synpred105_Php_fragment();
	partial void LeaveRule_synpred105_Php_fragment();

	// $ANTLR start synpred105_Php
	private void synpred105_Php_fragment()
	{
		EnterRule_synpred105_Php_fragment();
		EnterRule("synpred105_Php_fragment", 186);
		TraceIn("synpred105_Php_fragment", 186);
		try
		{
			// Php.g:252:30: ( statement )
			DebugEnterAlt(1);
			// Php.g:252:30: statement
			{
			DebugLocation(252, 30);
			PushFollow(Follow._statement_in_synpred105_Php1389);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred105_Php_fragment", 186);
			LeaveRule("synpred105_Php_fragment", 186);
			LeaveRule_synpred105_Php_fragment();
		}
	}
	// $ANTLR end synpred105_Php

	partial void EnterRule_synpred107_Php_fragment();
	partial void LeaveRule_synpred107_Php_fragment();

	// $ANTLR start synpred107_Php
	private void synpred107_Php_fragment()
	{
		EnterRule_synpred107_Php_fragment();
		EnterRule("synpred107_Php_fragment", 188);
		TraceIn("synpred107_Php_fragment", 188);
		try
		{
			// Php.g:256:23: ( statement )
			DebugEnterAlt(1);
			// Php.g:256:23: statement
			{
			DebugLocation(256, 23);
			PushFollow(Follow._statement_in_synpred107_Php1411);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred107_Php_fragment", 188);
			LeaveRule("synpred107_Php_fragment", 188);
			LeaveRule_synpred107_Php_fragment();
		}
	}
	// $ANTLR end synpred107_Php

	partial void EnterRule_synpred112_Php_fragment();
	partial void LeaveRule_synpred112_Php_fragment();

	// $ANTLR start synpred112_Php
	private void synpred112_Php_fragment()
	{
		EnterRule_synpred112_Php_fragment();
		EnterRule("synpred112_Php_fragment", 193);
		TraceIn("synpred112_Php_fragment", 193);
		try
		{
			// Php.g:272:5: ( qualifiedName )
			DebugEnterAlt(1);
			// Php.g:272:5: qualifiedName
			{
			DebugLocation(272, 5);
			PushFollow(Follow._qualifiedName_in_synpred112_Php1492);
			qualifiedName();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred112_Php_fragment", 193);
			LeaveRule("synpred112_Php_fragment", 193);
			LeaveRule_synpred112_Php_fragment();
		}
	}
	// $ANTLR end synpred112_Php

	partial void EnterRule_synpred113_Php_fragment();
	partial void LeaveRule_synpred113_Php_fragment();

	// $ANTLR start synpred113_Php
	private void synpred113_Php_fragment()
	{
		EnterRule_synpred113_Php_fragment();
		EnterRule("synpred113_Php_fragment", 194);
		TraceIn("synpred113_Php_fragment", 194);
		try
		{
			// Php.g:272:21: ( primitiveType )
			DebugEnterAlt(1);
			// Php.g:272:21: primitiveType
			{
			DebugLocation(272, 21);
			PushFollow(Follow._primitiveType_in_synpred113_Php1496);
			primitiveType();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred113_Php_fragment", 194);
			LeaveRule("synpred113_Php_fragment", 194);
			LeaveRule_synpred113_Php_fragment();
		}
	}
	// $ANTLR end synpred113_Php

	partial void EnterRule_synpred117_Php_fragment();
	partial void LeaveRule_synpred117_Php_fragment();

	// $ANTLR start synpred117_Php
	private void synpred117_Php_fragment()
	{
		EnterRule_synpred117_Php_fragment();
		EnterRule("synpred117_Php_fragment", 198);
		TraceIn("synpred117_Php_fragment", 198);
		try
		{
			// Php.g:289:20: ( Or weakLogicalXor )
			DebugEnterAlt(1);
			// Php.g:289:20: Or weakLogicalXor
			{
			DebugLocation(289, 20);
			Match(input,Or,Follow._Or_in_synpred117_Php1570); if (state.failed) return;
			DebugLocation(289, 23);
			PushFollow(Follow._weakLogicalXor_in_synpred117_Php1572);
			weakLogicalXor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred117_Php_fragment", 198);
			LeaveRule("synpred117_Php_fragment", 198);
			LeaveRule_synpred117_Php_fragment();
		}
	}
	// $ANTLR end synpred117_Php

	partial void EnterRule_synpred118_Php_fragment();
	partial void LeaveRule_synpred118_Php_fragment();

	// $ANTLR start synpred118_Php
	private void synpred118_Php_fragment()
	{
		EnterRule_synpred118_Php_fragment();
		EnterRule("synpred118_Php_fragment", 199);
		TraceIn("synpred118_Php_fragment", 199);
		try
		{
			// Php.g:293:20: ( Xor weakLogicalAnd )
			DebugEnterAlt(1);
			// Php.g:293:20: Xor weakLogicalAnd
			{
			DebugLocation(293, 20);
			Match(input,Xor,Follow._Xor_in_synpred118_Php1588); if (state.failed) return;
			DebugLocation(293, 24);
			PushFollow(Follow._weakLogicalAnd_in_synpred118_Php1590);
			weakLogicalAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred118_Php_fragment", 199);
			LeaveRule("synpred118_Php_fragment", 199);
			LeaveRule_synpred118_Php_fragment();
		}
	}
	// $ANTLR end synpred118_Php

	partial void EnterRule_synpred119_Php_fragment();
	partial void LeaveRule_synpred119_Php_fragment();

	// $ANTLR start synpred119_Php
	private void synpred119_Php_fragment()
	{
		EnterRule_synpred119_Php_fragment();
		EnterRule("synpred119_Php_fragment", 200);
		TraceIn("synpred119_Php_fragment", 200);
		try
		{
			// Php.g:297:16: ( And assignment )
			DebugEnterAlt(1);
			// Php.g:297:16: And assignment
			{
			DebugLocation(297, 16);
			Match(input,And,Follow._And_in_synpred119_Php1607); if (state.failed) return;
			DebugLocation(297, 20);
			PushFollow(Follow._assignment_in_synpred119_Php1609);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred119_Php_fragment", 200);
			LeaveRule("synpred119_Php_fragment", 200);
			LeaveRule_synpred119_Php_fragment();
		}
	}
	// $ANTLR end synpred119_Php

	partial void EnterRule_synpred121_Php_fragment();
	partial void LeaveRule_synpred121_Php_fragment();

	// $ANTLR start synpred121_Php
	private void synpred121_Php_fragment()
	{
		EnterRule_synpred121_Php_fragment();
		EnterRule("synpred121_Php_fragment", 202);
		TraceIn("synpred121_Php_fragment", 202);
		try
		{
			// Php.g:301:4: ( listVariables ( Equals | AsignmentOperator ) assignment )
			DebugEnterAlt(1);
			// Php.g:301:4: listVariables ( Equals | AsignmentOperator ) assignment
			{
			DebugLocation(301, 4);
			PushFollow(Follow._listVariables_in_synpred121_Php1622);
			listVariables();
			PopFollow();
			if (state.failed) return;
			DebugLocation(301, 18);
			if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(301, 47);
			PushFollow(Follow._assignment_in_synpred121_Php1632);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_Php_fragment", 202);
			LeaveRule("synpred121_Php_fragment", 202);
			LeaveRule_synpred121_Php_fragment();
		}
	}
	// $ANTLR end synpred121_Php

	partial void EnterRule_synpred125_Php_fragment();
	partial void LeaveRule_synpred125_Php_fragment();

	// $ANTLR start synpred125_Php
	private void synpred125_Php_fragment()
	{
		EnterRule_synpred125_Php_fragment();
		EnterRule("synpred125_Php_fragment", 206);
		TraceIn("synpred125_Php_fragment", 206);
		try
		{
			// Php.g:306:4: ( List OpenRoundBracket ( name )? ( ',' ( name )? )* CloseRoundBracket )
			DebugEnterAlt(1);
			// Php.g:306:4: List OpenRoundBracket ( name )? ( ',' ( name )? )* CloseRoundBracket
			{
			DebugLocation(306, 4);
			Match(input,List,Follow._List_in_synpred125_Php1648); if (state.failed) return;
			DebugLocation(306, 9);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred125_Php1650); if (state.failed) return;
			DebugLocation(306, 26);
			// Php.g:306:26: ( name )?
			int alt184=2;
			try { DebugEnterSubRule(184);
			try { DebugEnterDecision(184, false);
			int LA184_1 = input.LA(1);

			if ((LA184_1==Abstract||LA184_1==And||LA184_1==As||(LA184_1>=BoolType && LA184_1<=Class)||LA184_1==Clone||(LA184_1>=Const && LA184_1<=Continue)||(LA184_1>=Default && LA184_1<=Die)||LA184_1==Do||(LA184_1>=DoubleType && LA184_1<=Empty)||(LA184_1>=Eval && LA184_1<=Exit)||(LA184_1>=Extends && LA184_1<=Foreach)||(LA184_1>=Function && LA184_1<=HaltCompiler)||(LA184_1>=If && LA184_1<=IncludeOnce)||(LA184_1>=Instanceof && LA184_1<=IntType)||(LA184_1>=IntegerType && LA184_1<=List)||(LA184_1>=Namespace && LA184_1<=Null)||LA184_1==ObjectType||LA184_1==Or||(LA184_1>=Print && LA184_1<=Public)||(LA184_1>=RealType && LA184_1<=Return)||(LA184_1>=Static && LA184_1<=StringType)||(LA184_1>=Switch && LA184_1<=Throw)||(LA184_1>=True && LA184_1<=Try)||LA184_1==UnquotedString||(LA184_1>=Use && LA184_1<=While)||(LA184_1>=Xor && LA184_1<=131)))
			{
				alt184 = 1;
			}
			} finally { DebugExitDecision(184); }
			switch (alt184)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:306:26: name
				{
				DebugLocation(306, 26);
				PushFollow(Follow._name_in_synpred125_Php1652);
				name();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(184); }

			DebugLocation(306, 32);
			// Php.g:306:32: ( ',' ( name )? )*
			try { DebugEnterSubRule(186);
			while (true)
			{
				int alt186=2;
				try { DebugEnterDecision(186, false);
				int LA186_1 = input.LA(1);

				if ((LA186_1==Comma))
				{
					alt186 = 1;
				}


				} finally { DebugExitDecision(186); }
				switch ( alt186 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:306:33: ',' ( name )?
					{
					DebugLocation(306, 33);
					Match(input,Comma,Follow._Comma_in_synpred125_Php1656); if (state.failed) return;
					DebugLocation(306, 37);
					// Php.g:306:37: ( name )?
					int alt185=2;
					try { DebugEnterSubRule(185);
					try { DebugEnterDecision(185, false);
					int LA185_1 = input.LA(1);

					if ((LA185_1==Abstract||LA185_1==And||LA185_1==As||(LA185_1>=BoolType && LA185_1<=Class)||LA185_1==Clone||(LA185_1>=Const && LA185_1<=Continue)||(LA185_1>=Default && LA185_1<=Die)||LA185_1==Do||(LA185_1>=DoubleType && LA185_1<=Empty)||(LA185_1>=Eval && LA185_1<=Exit)||(LA185_1>=Extends && LA185_1<=Foreach)||(LA185_1>=Function && LA185_1<=HaltCompiler)||(LA185_1>=If && LA185_1<=IncludeOnce)||(LA185_1>=Instanceof && LA185_1<=IntType)||(LA185_1>=IntegerType && LA185_1<=List)||(LA185_1>=Namespace && LA185_1<=Null)||LA185_1==ObjectType||LA185_1==Or||(LA185_1>=Print && LA185_1<=Public)||(LA185_1>=RealType && LA185_1<=Return)||(LA185_1>=Static && LA185_1<=StringType)||(LA185_1>=Switch && LA185_1<=Throw)||(LA185_1>=True && LA185_1<=Try)||LA185_1==UnquotedString||(LA185_1>=Use && LA185_1<=While)||(LA185_1>=Xor && LA185_1<=131)))
					{
						alt185 = 1;
					}
					} finally { DebugExitDecision(185); }
					switch (alt185)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:306:37: name
						{
						DebugLocation(306, 37);
						PushFollow(Follow._name_in_synpred125_Php1658);
						name();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(185); }


					}
					break;

				default:
					goto loop186;
				}
			}

			loop186:
				;

			} finally { DebugExitSubRule(186); }

			DebugLocation(306, 45);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred125_Php1663); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred125_Php_fragment", 206);
			LeaveRule("synpred125_Php_fragment", 206);
			LeaveRule_synpred125_Php_fragment();
		}
	}
	// $ANTLR end synpred125_Php

	partial void EnterRule_synpred127_Php_fragment();
	partial void LeaveRule_synpred127_Php_fragment();

	// $ANTLR start synpred127_Php
	private void synpred127_Php_fragment()
	{
		EnterRule_synpred127_Php_fragment();
		EnterRule("synpred127_Php_fragment", 208);
		TraceIn("synpred127_Php_fragment", 208);
		try
		{
			// Php.g:311:4: ( logicalOr QuestionMark ( expression )? Colon expression )
			DebugEnterAlt(1);
			// Php.g:311:4: logicalOr QuestionMark ( expression )? Colon expression
			{
			DebugLocation(311, 4);
			PushFollow(Follow._logicalOr_in_synpred127_Php1680);
			logicalOr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(311, 14);
			Match(input,QuestionMark,Follow._QuestionMark_in_synpred127_Php1682); if (state.failed) return;
			DebugLocation(311, 27);
			// Php.g:311:27: ( expression )?
			int alt187=2;
			try { DebugEnterSubRule(187);
			try { DebugEnterDecision(187, false);
			int LA187_1 = input.LA(1);

			if (((LA187_1>=Abstract && LA187_1<=And)||(LA187_1>=ArrayType && LA187_1<=As)||LA187_1==Bang||(LA187_1>=BoolType && LA187_1<=Class)||LA187_1==Clone||(LA187_1>=Const && LA187_1<=Continue)||(LA187_1>=Default && LA187_1<=Die)||LA187_1==Do||(LA187_1>=DoubleQuotedString && LA187_1<=Empty)||(LA187_1>=Eval && LA187_1<=Exit)||(LA187_1>=Extends && LA187_1<=Foreach)||(LA187_1>=Function && LA187_1<=HaltCompiler)||LA187_1==HereDoc||(LA187_1>=If && LA187_1<=IncrementOperator)||(LA187_1>=Instanceof && LA187_1<=List)||LA187_1==Minus||(LA187_1>=Namespace && LA187_1<=Null)||LA187_1==ObjectType||(LA187_1>=OpenRoundBracket && LA187_1<=Or)||(LA187_1>=Plus && LA187_1<=Public)||(LA187_1>=Real && LA187_1<=Return)||LA187_1==SingleQuotedString||(LA187_1>=Static && LA187_1<=Try)||LA187_1==UnquotedString||(LA187_1>=UnsetType && LA187_1<=While)||(LA187_1>=Xor && LA187_1<=131)))
			{
				alt187 = 1;
			}
			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:311:27: expression
				{
				DebugLocation(311, 27);
				PushFollow(Follow._expression_in_synpred127_Php1684);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(187); }

			DebugLocation(311, 39);
			Match(input,Colon,Follow._Colon_in_synpred127_Php1687); if (state.failed) return;
			DebugLocation(311, 45);
			PushFollow(Follow._expression_in_synpred127_Php1689);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred127_Php_fragment", 208);
			LeaveRule("synpred127_Php_fragment", 208);
			LeaveRule_synpred127_Php_fragment();
		}
	}
	// $ANTLR end synpred127_Php

	partial void EnterRule_synpred128_Php_fragment();
	partial void LeaveRule_synpred128_Php_fragment();

	// $ANTLR start synpred128_Php
	private void synpred128_Php_fragment()
	{
		EnterRule_synpred128_Php_fragment();
		EnterRule("synpred128_Php_fragment", 209);
		TraceIn("synpred128_Php_fragment", 209);
		try
		{
			// Php.g:316:16: ( LogicalOr logicalAnd )
			DebugEnterAlt(1);
			// Php.g:316:16: LogicalOr logicalAnd
			{
			DebugLocation(316, 16);
			Match(input,LogicalOr,Follow._LogicalOr_in_synpred128_Php1709); if (state.failed) return;
			DebugLocation(316, 26);
			PushFollow(Follow._logicalAnd_in_synpred128_Php1711);
			logicalAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred128_Php_fragment", 209);
			LeaveRule("synpred128_Php_fragment", 209);
			LeaveRule_synpred128_Php_fragment();
		}
	}
	// $ANTLR end synpred128_Php

	partial void EnterRule_synpred129_Php_fragment();
	partial void LeaveRule_synpred129_Php_fragment();

	// $ANTLR start synpred129_Php
	private void synpred129_Php_fragment()
	{
		EnterRule_synpred129_Php_fragment();
		EnterRule("synpred129_Php_fragment", 210);
		TraceIn("synpred129_Php_fragment", 210);
		try
		{
			// Php.g:320:15: ( LogicalAnd bitwiseOr )
			DebugEnterAlt(1);
			// Php.g:320:15: LogicalAnd bitwiseOr
			{
			DebugLocation(320, 15);
			Match(input,LogicalAnd,Follow._LogicalAnd_in_synpred129_Php1727); if (state.failed) return;
			DebugLocation(320, 26);
			PushFollow(Follow._bitwiseOr_in_synpred129_Php1729);
			bitwiseOr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred129_Php_fragment", 210);
			LeaveRule("synpred129_Php_fragment", 210);
			LeaveRule_synpred129_Php_fragment();
		}
	}
	// $ANTLR end synpred129_Php

	partial void EnterRule_synpred130_Php_fragment();
	partial void LeaveRule_synpred130_Php_fragment();

	// $ANTLR start synpred130_Php
	private void synpred130_Php_fragment()
	{
		EnterRule_synpred130_Php_fragment();
		EnterRule("synpred130_Php_fragment", 211);
		TraceIn("synpred130_Php_fragment", 211);
		try
		{
			// Php.g:324:16: ( Pipe bitwiseXor )
			DebugEnterAlt(1);
			// Php.g:324:16: Pipe bitwiseXor
			{
			DebugLocation(324, 16);
			Match(input,Pipe,Follow._Pipe_in_synpred130_Php1746); if (state.failed) return;
			DebugLocation(324, 21);
			PushFollow(Follow._bitwiseXor_in_synpred130_Php1748);
			bitwiseXor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred130_Php_fragment", 211);
			LeaveRule("synpred130_Php_fragment", 211);
			LeaveRule_synpred130_Php_fragment();
		}
	}
	// $ANTLR end synpred130_Php

	partial void EnterRule_synpred131_Php_fragment();
	partial void LeaveRule_synpred131_Php_fragment();

	// $ANTLR start synpred131_Php
	private void synpred131_Php_fragment()
	{
		EnterRule_synpred131_Php_fragment();
		EnterRule("synpred131_Php_fragment", 212);
		TraceIn("synpred131_Php_fragment", 212);
		try
		{
			// Php.g:328:16: ( Hat bitWiseAnd )
			DebugEnterAlt(1);
			// Php.g:328:16: Hat bitWiseAnd
			{
			DebugLocation(328, 16);
			Match(input,Hat,Follow._Hat_in_synpred131_Php1765); if (state.failed) return;
			DebugLocation(328, 20);
			PushFollow(Follow._bitWiseAnd_in_synpred131_Php1767);
			bitWiseAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred131_Php_fragment", 212);
			LeaveRule("synpred131_Php_fragment", 212);
			LeaveRule_synpred131_Php_fragment();
		}
	}
	// $ANTLR end synpred131_Php

	partial void EnterRule_synpred132_Php_fragment();
	partial void LeaveRule_synpred132_Php_fragment();

	// $ANTLR start synpred132_Php
	private void synpred132_Php_fragment()
	{
		EnterRule_synpred132_Php_fragment();
		EnterRule("synpred132_Php_fragment", 213);
		TraceIn("synpred132_Php_fragment", 213);
		try
		{
			// Php.g:332:19: ( Ampersand equalityCheck )
			DebugEnterAlt(1);
			// Php.g:332:19: Ampersand equalityCheck
			{
			DebugLocation(332, 19);
			Match(input,Ampersand,Follow._Ampersand_in_synpred132_Php1783); if (state.failed) return;
			DebugLocation(332, 29);
			PushFollow(Follow._equalityCheck_in_synpred132_Php1785);
			equalityCheck();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred132_Php_fragment", 213);
			LeaveRule("synpred132_Php_fragment", 213);
			LeaveRule_synpred132_Php_fragment();
		}
	}
	// $ANTLR end synpred132_Php

	partial void EnterRule_synpred133_Php_fragment();
	partial void LeaveRule_synpred133_Php_fragment();

	// $ANTLR start synpred133_Php
	private void synpred133_Php_fragment()
	{
		EnterRule_synpred133_Php_fragment();
		EnterRule("synpred133_Php_fragment", 214);
		TraceIn("synpred133_Php_fragment", 214);
		try
		{
			// Php.g:336:22: ( EqualityOperator comparisionCheck )
			DebugEnterAlt(1);
			// Php.g:336:22: EqualityOperator comparisionCheck
			{
			DebugLocation(336, 22);
			Match(input,EqualityOperator,Follow._EqualityOperator_in_synpred133_Php1801); if (state.failed) return;
			DebugLocation(336, 39);
			PushFollow(Follow._comparisionCheck_in_synpred133_Php1803);
			comparisionCheck();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred133_Php_fragment", 214);
			LeaveRule("synpred133_Php_fragment", 214);
			LeaveRule_synpred133_Php_fragment();
		}
	}
	// $ANTLR end synpred133_Php

	partial void EnterRule_synpred134_Php_fragment();
	partial void LeaveRule_synpred134_Php_fragment();

	// $ANTLR start synpred134_Php
	private void synpred134_Php_fragment()
	{
		EnterRule_synpred134_Php_fragment();
		EnterRule("synpred134_Php_fragment", 215);
		TraceIn("synpred134_Php_fragment", 215);
		try
		{
			// Php.g:340:18: ( ComparisionOperator bitWiseShift )
			DebugEnterAlt(1);
			// Php.g:340:18: ComparisionOperator bitWiseShift
			{
			DebugLocation(340, 18);
			Match(input,ComparisionOperator,Follow._ComparisionOperator_in_synpred134_Php1820); if (state.failed) return;
			DebugLocation(340, 38);
			PushFollow(Follow._bitWiseShift_in_synpred134_Php1822);
			bitWiseShift();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred134_Php_fragment", 215);
			LeaveRule("synpred134_Php_fragment", 215);
			LeaveRule_synpred134_Php_fragment();
		}
	}
	// $ANTLR end synpred134_Php

	partial void EnterRule_synpred135_Php_fragment();
	partial void LeaveRule_synpred135_Php_fragment();

	// $ANTLR start synpred135_Php
	private void synpred135_Php_fragment()
	{
		EnterRule_synpred135_Php_fragment();
		EnterRule("synpred135_Php_fragment", 216);
		TraceIn("synpred135_Php_fragment", 216);
		try
		{
			// Php.g:344:14: ( ShiftOperator addition )
			DebugEnterAlt(1);
			// Php.g:344:14: ShiftOperator addition
			{
			DebugLocation(344, 14);
			Match(input,ShiftOperator,Follow._ShiftOperator_in_synpred135_Php1838); if (state.failed) return;
			DebugLocation(344, 28);
			PushFollow(Follow._addition_in_synpred135_Php1840);
			addition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred135_Php_fragment", 216);
			LeaveRule("synpred135_Php_fragment", 216);
			LeaveRule_synpred135_Php_fragment();
		}
	}
	// $ANTLR end synpred135_Php

	partial void EnterRule_synpred138_Php_fragment();
	partial void LeaveRule_synpred138_Php_fragment();

	// $ANTLR start synpred138_Php
	private void synpred138_Php_fragment()
	{
		EnterRule_synpred138_Php_fragment();
		EnterRule("synpred138_Php_fragment", 219);
		TraceIn("synpred138_Php_fragment", 219);
		try
		{
			// Php.g:348:20: ( ( Plus | Minus | Dot ) multiplication )
			DebugEnterAlt(1);
			// Php.g:348:20: ( Plus | Minus | Dot ) multiplication
			{
			DebugLocation(348, 20);
			if (input.LA(1)==Dot||input.LA(1)==Minus||input.LA(1)==Plus)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(348, 41);
			PushFollow(Follow._multiplication_in_synpred138_Php1869);
			multiplication();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred138_Php_fragment", 219);
			LeaveRule("synpred138_Php_fragment", 219);
			LeaveRule_synpred138_Php_fragment();
		}
	}
	// $ANTLR end synpred138_Php

	partial void EnterRule_synpred141_Php_fragment();
	partial void LeaveRule_synpred141_Php_fragment();

	// $ANTLR start synpred141_Php
	private void synpred141_Php_fragment()
	{
		EnterRule_synpred141_Php_fragment();
		EnterRule("synpred141_Php_fragment", 222);
		TraceIn("synpred141_Php_fragment", 222);
		try
		{
			// Php.g:352:16: ( ( Asterisk | Forwardslash | Percent ) logicalNot )
			DebugEnterAlt(1);
			// Php.g:352:16: ( Asterisk | Forwardslash | Percent ) logicalNot
			{
			DebugLocation(352, 16);
			if (input.LA(1)==Asterisk||input.LA(1)==Forwardslash||input.LA(1)==Percent)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(352, 52);
			PushFollow(Follow._logicalNot_in_synpred141_Php1897);
			logicalNot();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred141_Php_fragment", 222);
			LeaveRule("synpred141_Php_fragment", 222);
			LeaveRule_synpred141_Php_fragment();
		}
	}
	// $ANTLR end synpred141_Php

	partial void EnterRule_synpred143_Php_fragment();
	partial void LeaveRule_synpred143_Php_fragment();

	// $ANTLR start synpred143_Php
	private void synpred143_Php_fragment()
	{
		EnterRule_synpred143_Php_fragment();
		EnterRule("synpred143_Php_fragment", 224);
		TraceIn("synpred143_Php_fragment", 224);
		try
		{
			// Php.g:361:18: ( Instanceof negateOrCast )
			DebugEnterAlt(1);
			// Php.g:361:18: Instanceof negateOrCast
			{
			DebugLocation(361, 18);
			Match(input,Instanceof,Follow._Instanceof_in_synpred143_Php1931); if (state.failed) return;
			DebugLocation(361, 29);
			PushFollow(Follow._negateOrCast_in_synpred143_Php1933);
			negateOrCast();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred143_Php_fragment", 224);
			LeaveRule("synpred143_Php_fragment", 224);
			LeaveRule_synpred143_Php_fragment();
		}
	}
	// $ANTLR end synpred143_Php

	partial void EnterRule_synpred146_Php_fragment();
	partial void LeaveRule_synpred146_Php_fragment();

	// $ANTLR start synpred146_Php
	private void synpred146_Php_fragment()
	{
		EnterRule_synpred146_Php_fragment();
		EnterRule("synpred146_Php_fragment", 227);
		TraceIn("synpred146_Php_fragment", 227);
		try
		{
			// Php.g:365:4: ( ( Tilde | Minus | SuppressWarnings ) increment )
			DebugEnterAlt(1);
			// Php.g:365:4: ( Tilde | Minus | SuppressWarnings ) increment
			{
			DebugLocation(365, 4);
			if (input.LA(1)==Minus||input.LA(1)==SuppressWarnings||input.LA(1)==Tilde)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(365, 39);
			PushFollow(Follow._increment_in_synpred146_Php1958);
			increment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred146_Php_fragment", 227);
			LeaveRule("synpred146_Php_fragment", 227);
			LeaveRule_synpred146_Php_fragment();
		}
	}
	// $ANTLR end synpred146_Php

	partial void EnterRule_synpred147_Php_fragment();
	partial void LeaveRule_synpred147_Php_fragment();

	// $ANTLR start synpred147_Php
	private void synpred147_Php_fragment()
	{
		EnterRule_synpred147_Php_fragment();
		EnterRule("synpred147_Php_fragment", 228);
		TraceIn("synpred147_Php_fragment", 228);
		try
		{
			// Php.g:366:4: ( OpenRoundBracket primitiveType CloseRoundBracket negateOrCast )
			DebugEnterAlt(1);
			// Php.g:366:4: OpenRoundBracket primitiveType CloseRoundBracket negateOrCast
			{
			DebugLocation(366, 4);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred147_Php1963); if (state.failed) return;
			DebugLocation(366, 21);
			PushFollow(Follow._primitiveType_in_synpred147_Php1965);
			primitiveType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(366, 35);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred147_Php1967); if (state.failed) return;
			DebugLocation(366, 53);
			PushFollow(Follow._negateOrCast_in_synpred147_Php1969);
			negateOrCast();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred147_Php_fragment", 228);
			LeaveRule("synpred147_Php_fragment", 228);
			LeaveRule_synpred147_Php_fragment();
		}
	}
	// $ANTLR end synpred147_Php

	partial void EnterRule_synpred159_Php_fragment();
	partial void LeaveRule_synpred159_Php_fragment();

	// $ANTLR start synpred159_Php
	private void synpred159_Php_fragment()
	{
		EnterRule_synpred159_Php_fragment();
		EnterRule("synpred159_Php_fragment", 240);
		TraceIn("synpred159_Php_fragment", 240);
		try
		{
			// Php.g:377:4: ( name IncrementOperator )
			DebugEnterAlt(1);
			// Php.g:377:4: name IncrementOperator
			{
			DebugLocation(377, 4);
			PushFollow(Follow._name_in_synpred159_Php2044);
			name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(377, 9);
			Match(input,IncrementOperator,Follow._IncrementOperator_in_synpred159_Php2046); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred159_Php_fragment", 240);
			LeaveRule("synpred159_Php_fragment", 240);
			LeaveRule_synpred159_Php_fragment();
		}
	}
	// $ANTLR end synpred159_Php

	partial void EnterRule_synpred161_Php_fragment();
	partial void LeaveRule_synpred161_Php_fragment();

	// $ANTLR start synpred161_Php
	private void synpred161_Php_fragment()
	{
		EnterRule_synpred161_Php_fragment();
		EnterRule("synpred161_Php_fragment", 242);
		TraceIn("synpred161_Php_fragment", 242);
		try
		{
			// Php.g:378:4: ( listVariables ( Equals | AsignmentOperator ) assignment )
			DebugEnterAlt(1);
			// Php.g:378:4: listVariables ( Equals | AsignmentOperator ) assignment
			{
			DebugLocation(378, 4);
			PushFollow(Follow._listVariables_in_synpred161_Php2051);
			listVariables();
			PopFollow();
			if (state.failed) return;
			DebugLocation(378, 18);
			if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(378, 47);
			PushFollow(Follow._assignment_in_synpred161_Php2061);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred161_Php_fragment", 242);
			LeaveRule("synpred161_Php_fragment", 242);
			LeaveRule_synpred161_Php_fragment();
		}
	}
	// $ANTLR end synpred161_Php

	partial void EnterRule_synpred162_Php_fragment();
	partial void LeaveRule_synpred162_Php_fragment();

	// $ANTLR start synpred162_Php
	private void synpred162_Php_fragment()
	{
		EnterRule_synpred162_Php_fragment();
		EnterRule("synpred162_Php_fragment", 243);
		TraceIn("synpred162_Php_fragment", 243);
		try
		{
			// Php.g:379:4: ( newOrClone )
			DebugEnterAlt(1);
			// Php.g:379:4: newOrClone
			{
			DebugLocation(379, 4);
			PushFollow(Follow._newOrClone_in_synpred162_Php2066);
			newOrClone();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred162_Php_fragment", 243);
			LeaveRule("synpred162_Php_fragment", 243);
			LeaveRule_synpred162_Php_fragment();
		}
	}
	// $ANTLR end synpred162_Php

	partial void EnterRule_synpred163_Php_fragment();
	partial void LeaveRule_synpred163_Php_fragment();

	// $ANTLR start synpred163_Php
	private void synpred163_Php_fragment()
	{
		EnterRule_synpred163_Php_fragment();
		EnterRule("synpred163_Php_fragment", 244);
		TraceIn("synpred163_Php_fragment", 244);
		try
		{
			// Php.g:387:9: ( nameOrFunctionCall )
			DebugEnterAlt(1);
			// Php.g:387:9: nameOrFunctionCall
			{
			DebugLocation(387, 9);
			PushFollow(Follow._nameOrFunctionCall_in_synpred163_Php2100);
			nameOrFunctionCall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred163_Php_fragment", 244);
			LeaveRule("synpred163_Php_fragment", 244);
			LeaveRule_synpred163_Php_fragment();
		}
	}
	// $ANTLR end synpred163_Php

	partial void EnterRule_synpred164_Php_fragment();
	partial void LeaveRule_synpred164_Php_fragment();

	// $ANTLR start synpred164_Php
	private void synpred164_Php_fragment()
	{
		EnterRule_synpred164_Php_fragment();
		EnterRule("synpred164_Php_fragment", 245);
		TraceIn("synpred164_Php_fragment", 245);
		try
		{
			// Php.g:387:4: ( New ( nameOrFunctionCall | constantOrStaticAccessor ) )
			DebugEnterAlt(1);
			// Php.g:387:4: New ( nameOrFunctionCall | constantOrStaticAccessor )
			{
			DebugLocation(387, 4);
			Match(input,New,Follow._New_in_synpred164_Php2097); if (state.failed) return;
			DebugLocation(387, 8);
			// Php.g:387:8: ( nameOrFunctionCall | constantOrStaticAccessor )
			int alt188=2;
			try { DebugEnterSubRule(188);
			try { DebugEnterDecision(188, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA188_2 = input.LA(2);

				if ((EvaluatePredicate(synpred163_Php_fragment)))
				{
					alt188 = 1;
				}
				else if ((true))
				{
					alt188 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 188, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA188_2 = input.LA(2);

				if ((EvaluatePredicate(synpred163_Php_fragment)))
				{
					alt188 = 1;
				}
				else if ((true))
				{
					alt188 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 188, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA188_2 = input.LA(2);

				if ((EvaluatePredicate(synpred163_Php_fragment)))
				{
					alt188 = 1;
				}
				else if ((true))
				{
					alt188 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 188, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA188_2 = input.LA(2);

				if ((EvaluatePredicate(synpred163_Php_fragment)))
				{
					alt188 = 1;
				}
				else if ((true))
				{
					alt188 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 188, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case False:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA188_2 = input.LA(2);

				if ((EvaluatePredicate(synpred163_Php_fragment)))
				{
					alt188 = 1;
				}
				else if ((true))
				{
					alt188 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 188, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				alt188 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 188, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:387:9: nameOrFunctionCall
				{
				DebugLocation(387, 9);
				PushFollow(Follow._nameOrFunctionCall_in_synpred164_Php2100);
				nameOrFunctionCall();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:387:30: constantOrStaticAccessor
				{
				DebugLocation(387, 30);
				PushFollow(Follow._constantOrStaticAccessor_in_synpred164_Php2104);
				constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(188); }


			}

		}
		finally
		{
			TraceOut("synpred164_Php_fragment", 245);
			LeaveRule("synpred164_Php_fragment", 245);
			LeaveRule_synpred164_Php_fragment();
		}
	}
	// $ANTLR end synpred164_Php

	partial void EnterRule_synpred165_Php_fragment();
	partial void LeaveRule_synpred165_Php_fragment();

	// $ANTLR start synpred165_Php
	private void synpred165_Php_fragment()
	{
		EnterRule_synpred165_Php_fragment();
		EnterRule("synpred165_Php_fragment", 246);
		TraceIn("synpred165_Php_fragment", 246);
		try
		{
			// Php.g:388:15: ( functionArguments )
			DebugEnterAlt(1);
			// Php.g:388:15: functionArguments
			{
			DebugLocation(388, 15);
			PushFollow(Follow._functionArguments_in_synpred165_Php2114);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred165_Php_fragment", 246);
			LeaveRule("synpred165_Php_fragment", 246);
			LeaveRule_synpred165_Php_fragment();
		}
	}
	// $ANTLR end synpred165_Php

	partial void EnterRule_synpred166_Php_fragment();
	partial void LeaveRule_synpred166_Php_fragment();

	// $ANTLR start synpred166_Php
	private void synpred166_Php_fragment()
	{
		EnterRule_synpred166_Php_fragment();
		EnterRule("synpred166_Php_fragment", 247);
		TraceIn("synpred166_Php_fragment", 247);
		try
		{
			// Php.g:388:4: ( New Static ( functionArguments )? )
			DebugEnterAlt(1);
			// Php.g:388:4: New Static ( functionArguments )?
			{
			DebugLocation(388, 4);
			Match(input,New,Follow._New_in_synpred166_Php2110); if (state.failed) return;
			DebugLocation(388, 8);
			Match(input,Static,Follow._Static_in_synpred166_Php2112); if (state.failed) return;
			DebugLocation(388, 15);
			// Php.g:388:15: ( functionArguments )?
			int alt189=2;
			try { DebugEnterSubRule(189);
			try { DebugEnterDecision(189, false);
			int LA189_1 = input.LA(1);

			if ((LA189_1==OpenRoundBracket))
			{
				alt189 = 1;
			}
			} finally { DebugExitDecision(189); }
			switch (alt189)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:388:15: functionArguments
				{
				DebugLocation(388, 15);
				PushFollow(Follow._functionArguments_in_synpred166_Php2114);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(189); }


			}

		}
		finally
		{
			TraceOut("synpred166_Php_fragment", 247);
			LeaveRule("synpred166_Php_fragment", 247);
			LeaveRule_synpred166_Php_fragment();
		}
	}
	// $ANTLR end synpred166_Php

	partial void EnterRule_synpred167_Php_fragment();
	partial void LeaveRule_synpred167_Php_fragment();

	// $ANTLR start synpred167_Php
	private void synpred167_Php_fragment()
	{
		EnterRule_synpred167_Php_fragment();
		EnterRule("synpred167_Php_fragment", 248);
		TraceIn("synpred167_Php_fragment", 248);
		try
		{
			// Php.g:389:4: ( Clone name )
			DebugEnterAlt(1);
			// Php.g:389:4: Clone name
			{
			DebugLocation(389, 4);
			Match(input,Clone,Follow._Clone_in_synpred167_Php2120); if (state.failed) return;
			DebugLocation(389, 10);
			PushFollow(Follow._name_in_synpred167_Php2122);
			name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred167_Php_fragment", 248);
			LeaveRule("synpred167_Php_fragment", 248);
			LeaveRule_synpred167_Php_fragment();
		}
	}
	// $ANTLR end synpred167_Php

	partial void EnterRule_synpred169_Php_fragment();
	partial void LeaveRule_synpred169_Php_fragment();

	// $ANTLR start synpred169_Php
	private void synpred169_Php_fragment()
	{
		EnterRule_synpred169_Php_fragment();
		EnterRule("synpred169_Php_fragment", 250);
		TraceIn("synpred169_Php_fragment", 250);
		try
		{
			// Php.g:396:4: ( anonymousFunctionDefinition )
			DebugEnterAlt(1);
			// Php.g:396:4: anonymousFunctionDefinition
			{
			DebugLocation(396, 4);
			PushFollow(Follow._anonymousFunctionDefinition_in_synpred169_Php2146);
			anonymousFunctionDefinition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred169_Php_fragment", 250);
			LeaveRule("synpred169_Php_fragment", 250);
			LeaveRule_synpred169_Php_fragment();
		}
	}
	// $ANTLR end synpred169_Php

	partial void EnterRule_synpred170_Php_fragment();
	partial void LeaveRule_synpred170_Php_fragment();

	// $ANTLR start synpred170_Php
	private void synpred170_Php_fragment()
	{
		EnterRule_synpred170_Php_fragment();
		EnterRule("synpred170_Php_fragment", 251);
		TraceIn("synpred170_Php_fragment", 251);
		try
		{
			// Php.g:397:4: ( constantOrFunctionCall )
			DebugEnterAlt(1);
			// Php.g:397:4: constantOrFunctionCall
			{
			DebugLocation(397, 4);
			PushFollow(Follow._constantOrFunctionCall_in_synpred170_Php2151);
			constantOrFunctionCall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred170_Php_fragment", 251);
			LeaveRule("synpred170_Php_fragment", 251);
			LeaveRule_synpred170_Php_fragment();
		}
	}
	// $ANTLR end synpred170_Php

	partial void EnterRule_synpred171_Php_fragment();
	partial void LeaveRule_synpred171_Php_fragment();

	// $ANTLR start synpred171_Php
	private void synpred171_Php_fragment()
	{
		EnterRule_synpred171_Php_fragment();
		EnterRule("synpred171_Php_fragment", 252);
		TraceIn("synpred171_Php_fragment", 252);
		try
		{
			// Php.g:398:4: ( atom )
			DebugEnterAlt(1);
			// Php.g:398:4: atom
			{
			DebugLocation(398, 4);
			PushFollow(Follow._atom_in_synpred171_Php2156);
			atom();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred171_Php_fragment", 252);
			LeaveRule("synpred171_Php_fragment", 252);
			LeaveRule_synpred171_Php_fragment();
		}
	}
	// $ANTLR end synpred171_Php

	partial void EnterRule_synpred179_Php_fragment();
	partial void LeaveRule_synpred179_Php_fragment();

	// $ANTLR start synpred179_Php
	private void synpred179_Php_fragment()
	{
		EnterRule_synpred179_Php_fragment();
		EnterRule("synpred179_Php_fragment", 260);
		TraceIn("synpred179_Php_fragment", 260);
		try
		{
			// Php.g:408:5: ( keyValuePair )
			DebugEnterAlt(1);
			// Php.g:408:5: keyValuePair
			{
			DebugLocation(408, 5);
			PushFollow(Follow._keyValuePair_in_synpred179_Php2225);
			keyValuePair();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred179_Php_fragment", 260);
			LeaveRule("synpred179_Php_fragment", 260);
			LeaveRule_synpred179_Php_fragment();
		}
	}
	// $ANTLR end synpred179_Php

	partial void EnterRule_synpred185_Php_fragment();
	partial void LeaveRule_synpred185_Php_fragment();

	// $ANTLR start synpred185_Php
	private void synpred185_Php_fragment()
	{
		EnterRule_synpred185_Php_fragment();
		EnterRule("synpred185_Php_fragment", 266);
		TraceIn("synpred185_Php_fragment", 266);
		try
		{
			// Php.g:418:4: ( ( Plus | Minus )? Integer )
			DebugEnterAlt(1);
			// Php.g:418:4: ( Plus | Minus )? Integer
			{
			DebugLocation(418, 4);
			// Php.g:418:4: ( Plus | Minus )?
			int alt197=2;
			try { DebugEnterSubRule(197);
			try { DebugEnterDecision(197, false);
			int LA197_1 = input.LA(1);

			if ((LA197_1==Minus||LA197_1==Plus))
			{
				alt197 = 1;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:
				{
				DebugLocation(418, 4);
				if (input.LA(1)==Minus||input.LA(1)==Plus)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(197); }

			DebugLocation(418, 18);
			Match(input,Integer,Follow._Integer_in_synpred185_Php2278); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred185_Php_fragment", 266);
			LeaveRule("synpred185_Php_fragment", 266);
			LeaveRule_synpred185_Php_fragment();
		}
	}
	// $ANTLR end synpred185_Php

	partial void EnterRule_synpred188_Php_fragment();
	partial void LeaveRule_synpred188_Php_fragment();

	// $ANTLR start synpred188_Php
	private void synpred188_Php_fragment()
	{
		EnterRule_synpred188_Php_fragment();
		EnterRule("synpred188_Php_fragment", 269);
		TraceIn("synpred188_Php_fragment", 269);
		try
		{
			// Php.g:419:4: ( ( Plus | Minus )? Real )
			DebugEnterAlt(1);
			// Php.g:419:4: ( Plus | Minus )? Real
			{
			DebugLocation(419, 4);
			// Php.g:419:4: ( Plus | Minus )?
			int alt198=2;
			try { DebugEnterSubRule(198);
			try { DebugEnterDecision(198, false);
			int LA198_1 = input.LA(1);

			if ((LA198_1==Minus||LA198_1==Plus))
			{
				alt198 = 1;
			}
			} finally { DebugExitDecision(198); }
			switch (alt198)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:
				{
				DebugLocation(419, 4);
				if (input.LA(1)==Minus||input.LA(1)==Plus)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(198); }

			DebugLocation(419, 18);
			Match(input,Real,Follow._Real_in_synpred188_Php2290); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred188_Php_fragment", 269);
			LeaveRule("synpred188_Php_fragment", 269);
			LeaveRule_synpred188_Php_fragment();
		}
	}
	// $ANTLR end synpred188_Php

	partial void EnterRule_synpred189_Php_fragment();
	partial void LeaveRule_synpred189_Php_fragment();

	// $ANTLR start synpred189_Php
	private void synpred189_Php_fragment()
	{
		EnterRule_synpred189_Php_fragment();
		EnterRule("synpred189_Php_fragment", 270);
		TraceIn("synpred189_Php_fragment", 270);
		try
		{
			// Php.g:420:4: ( boolean )
			DebugEnterAlt(1);
			// Php.g:420:4: boolean
			{
			DebugLocation(420, 4);
			PushFollow(Follow._boolean_in_synpred189_Php2295);
			boolean();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred189_Php_fragment", 270);
			LeaveRule("synpred189_Php_fragment", 270);
			LeaveRule_synpred189_Php_fragment();
		}
	}
	// $ANTLR end synpred189_Php

	partial void EnterRule_synpred190_Php_fragment();
	partial void LeaveRule_synpred190_Php_fragment();

	// $ANTLR start synpred190_Php
	private void synpred190_Php_fragment()
	{
		EnterRule_synpred190_Php_fragment();
		EnterRule("synpred190_Php_fragment", 271);
		TraceIn("synpred190_Php_fragment", 271);
		try
		{
			// Php.g:421:4: ( Null )
			DebugEnterAlt(1);
			// Php.g:421:4: Null
			{
			DebugLocation(421, 4);
			Match(input,Null,Follow._Null_in_synpred190_Php2300); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred190_Php_fragment", 271);
			LeaveRule("synpred190_Php_fragment", 271);
			LeaveRule_synpred190_Php_fragment();
		}
	}
	// $ANTLR end synpred190_Php

	partial void EnterRule_synpred192_Php_fragment();
	partial void LeaveRule_synpred192_Php_fragment();

	// $ANTLR start synpred192_Php
	private void synpred192_Php_fragment()
	{
		EnterRule_synpred192_Php_fragment();
		EnterRule("synpred192_Php_fragment", 273);
		TraceIn("synpred192_Php_fragment", 273);
		try
		{
			// Php.g:423:4: ( requireOperator expression )
			DebugEnterAlt(1);
			// Php.g:423:4: requireOperator expression
			{
			DebugLocation(423, 4);
			PushFollow(Follow._requireOperator_in_synpred192_Php2310);
			requireOperator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(423, 20);
			PushFollow(Follow._expression_in_synpred192_Php2312);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred192_Php_fragment", 273);
			LeaveRule("synpred192_Php_fragment", 273);
			LeaveRule_synpred192_Php_fragment();
		}
	}
	// $ANTLR end synpred192_Php

	partial void EnterRule_synpred198_Php_fragment();
	partial void LeaveRule_synpred198_Php_fragment();

	// $ANTLR start synpred198_Php
	private void synpred198_Php_fragment()
	{
		EnterRule_synpred198_Php_fragment();
		EnterRule("synpred198_Php_fragment", 279);
		TraceIn("synpred198_Php_fragment", 279);
		try
		{
			// Php.g:438:10: ( expression )
			DebugEnterAlt(1);
			// Php.g:438:10: expression
			{
			DebugLocation(438, 10);
			PushFollow(Follow._expression_in_synpred198_Php2383);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred198_Php_fragment", 279);
			LeaveRule("synpred198_Php_fragment", 279);
			LeaveRule_synpred198_Php_fragment();
		}
	}
	// $ANTLR end synpred198_Php

	partial void EnterRule_synpred200_Php_fragment();
	partial void LeaveRule_synpred200_Php_fragment();

	// $ANTLR start synpred200_Php
	private void synpred200_Php_fragment()
	{
		EnterRule_synpred200_Php_fragment();
		EnterRule("synpred200_Php_fragment", 281);
		TraceIn("synpred200_Php_fragment", 281);
		try
		{
			// Php.g:439:6: ( New )
			DebugEnterAlt(1);
			// Php.g:439:6: New
			{
			DebugLocation(439, 6);
			Match(input,New,Follow._New_in_synpred200_Php2398); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred200_Php_fragment", 281);
			LeaveRule("synpred200_Php_fragment", 281);
			LeaveRule_synpred200_Php_fragment();
		}
	}
	// $ANTLR end synpred200_Php

	partial void EnterRule_synpred201_Php_fragment();
	partial void LeaveRule_synpred201_Php_fragment();

	// $ANTLR start synpred201_Php
	private void synpred201_Php_fragment()
	{
		EnterRule_synpred201_Php_fragment();
		EnterRule("synpred201_Php_fragment", 282);
		TraceIn("synpred201_Php_fragment", 282);
		try
		{
			// Php.g:439:10: ( Clone )
			DebugEnterAlt(1);
			// Php.g:439:10: Clone
			{
			DebugLocation(439, 10);
			Match(input,Clone,Follow._Clone_in_synpred201_Php2400); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred201_Php_fragment", 282);
			LeaveRule("synpred201_Php_fragment", 282);
			LeaveRule_synpred201_Php_fragment();
		}
	}
	// $ANTLR end synpred201_Php

	partial void EnterRule_synpred202_Php_fragment();
	partial void LeaveRule_synpred202_Php_fragment();

	// $ANTLR start synpred202_Php
	private void synpred202_Php_fragment()
	{
		EnterRule_synpred202_Php_fragment();
		EnterRule("synpred202_Php_fragment", 283);
		TraceIn("synpred202_Php_fragment", 283);
		try
		{
			// Php.g:439:16: ( Echo )
			DebugEnterAlt(1);
			// Php.g:439:16: Echo
			{
			DebugLocation(439, 16);
			Match(input,Echo,Follow._Echo_in_synpred202_Php2402); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred202_Php_fragment", 283);
			LeaveRule("synpred202_Php_fragment", 283);
			LeaveRule_synpred202_Php_fragment();
		}
	}
	// $ANTLR end synpred202_Php

	partial void EnterRule_synpred203_Php_fragment();
	partial void LeaveRule_synpred203_Php_fragment();

	// $ANTLR start synpred203_Php
	private void synpred203_Php_fragment()
	{
		EnterRule_synpred203_Php_fragment();
		EnterRule("synpred203_Php_fragment", 284);
		TraceIn("synpred203_Php_fragment", 284);
		try
		{
			// Php.g:439:21: ( Print )
			DebugEnterAlt(1);
			// Php.g:439:21: Print
			{
			DebugLocation(439, 21);
			Match(input,Print,Follow._Print_in_synpred203_Php2404); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred203_Php_fragment", 284);
			LeaveRule("synpred203_Php_fragment", 284);
			LeaveRule_synpred203_Php_fragment();
		}
	}
	// $ANTLR end synpred203_Php

	partial void EnterRule_synpred204_Php_fragment();
	partial void LeaveRule_synpred204_Php_fragment();

	// $ANTLR start synpred204_Php
	private void synpred204_Php_fragment()
	{
		EnterRule_synpred204_Php_fragment();
		EnterRule("synpred204_Php_fragment", 285);
		TraceIn("synpred204_Php_fragment", 285);
		try
		{
			// Php.g:439:27: ( If )
			DebugEnterAlt(1);
			// Php.g:439:27: If
			{
			DebugLocation(439, 27);
			Match(input,If,Follow._If_in_synpred204_Php2406); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred204_Php_fragment", 285);
			LeaveRule("synpred204_Php_fragment", 285);
			LeaveRule_synpred204_Php_fragment();
		}
	}
	// $ANTLR end synpred204_Php

	partial void EnterRule_synpred205_Php_fragment();
	partial void LeaveRule_synpred205_Php_fragment();

	// $ANTLR start synpred205_Php
	private void synpred205_Php_fragment()
	{
		EnterRule_synpred205_Php_fragment();
		EnterRule("synpred205_Php_fragment", 286);
		TraceIn("synpred205_Php_fragment", 286);
		try
		{
			// Php.g:439:30: ( Else )
			DebugEnterAlt(1);
			// Php.g:439:30: Else
			{
			DebugLocation(439, 30);
			Match(input,Else,Follow._Else_in_synpred205_Php2408); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred205_Php_fragment", 286);
			LeaveRule("synpred205_Php_fragment", 286);
			LeaveRule_synpred205_Php_fragment();
		}
	}
	// $ANTLR end synpred205_Php

	partial void EnterRule_synpred206_Php_fragment();
	partial void LeaveRule_synpred206_Php_fragment();

	// $ANTLR start synpred206_Php
	private void synpred206_Php_fragment()
	{
		EnterRule_synpred206_Php_fragment();
		EnterRule("synpred206_Php_fragment", 287);
		TraceIn("synpred206_Php_fragment", 287);
		try
		{
			// Php.g:439:35: ( ElseIf )
			DebugEnterAlt(1);
			// Php.g:439:35: ElseIf
			{
			DebugLocation(439, 35);
			Match(input,ElseIf,Follow._ElseIf_in_synpred206_Php2410); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred206_Php_fragment", 287);
			LeaveRule("synpred206_Php_fragment", 287);
			LeaveRule_synpred206_Php_fragment();
		}
	}
	// $ANTLR end synpred206_Php

	partial void EnterRule_synpred207_Php_fragment();
	partial void LeaveRule_synpred207_Php_fragment();

	// $ANTLR start synpred207_Php
	private void synpred207_Php_fragment()
	{
		EnterRule_synpred207_Php_fragment();
		EnterRule("synpred207_Php_fragment", 288);
		TraceIn("synpred207_Php_fragment", 288);
		try
		{
			// Php.g:439:42: ( For )
			DebugEnterAlt(1);
			// Php.g:439:42: For
			{
			DebugLocation(439, 42);
			Match(input,For,Follow._For_in_synpred207_Php2412); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred207_Php_fragment", 288);
			LeaveRule("synpred207_Php_fragment", 288);
			LeaveRule_synpred207_Php_fragment();
		}
	}
	// $ANTLR end synpred207_Php

	partial void EnterRule_synpred208_Php_fragment();
	partial void LeaveRule_synpred208_Php_fragment();

	// $ANTLR start synpred208_Php
	private void synpred208_Php_fragment()
	{
		EnterRule_synpred208_Php_fragment();
		EnterRule("synpred208_Php_fragment", 289);
		TraceIn("synpred208_Php_fragment", 289);
		try
		{
			// Php.g:439:46: ( Foreach )
			DebugEnterAlt(1);
			// Php.g:439:46: Foreach
			{
			DebugLocation(439, 46);
			Match(input,Foreach,Follow._Foreach_in_synpred208_Php2414); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred208_Php_fragment", 289);
			LeaveRule("synpred208_Php_fragment", 289);
			LeaveRule_synpred208_Php_fragment();
		}
	}
	// $ANTLR end synpred208_Php

	partial void EnterRule_synpred209_Php_fragment();
	partial void LeaveRule_synpred209_Php_fragment();

	// $ANTLR start synpred209_Php
	private void synpred209_Php_fragment()
	{
		EnterRule_synpred209_Php_fragment();
		EnterRule("synpred209_Php_fragment", 290);
		TraceIn("synpred209_Php_fragment", 290);
		try
		{
			// Php.g:439:54: ( While )
			DebugEnterAlt(1);
			// Php.g:439:54: While
			{
			DebugLocation(439, 54);
			Match(input,While,Follow._While_in_synpred209_Php2416); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred209_Php_fragment", 290);
			LeaveRule("synpred209_Php_fragment", 290);
			LeaveRule_synpred209_Php_fragment();
		}
	}
	// $ANTLR end synpred209_Php

	partial void EnterRule_synpred210_Php_fragment();
	partial void LeaveRule_synpred210_Php_fragment();

	// $ANTLR start synpred210_Php
	private void synpred210_Php_fragment()
	{
		EnterRule_synpred210_Php_fragment();
		EnterRule("synpred210_Php_fragment", 291);
		TraceIn("synpred210_Php_fragment", 291);
		try
		{
			// Php.g:439:60: ( Do )
			DebugEnterAlt(1);
			// Php.g:439:60: Do
			{
			DebugLocation(439, 60);
			Match(input,Do,Follow._Do_in_synpred210_Php2418); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred210_Php_fragment", 291);
			LeaveRule("synpred210_Php_fragment", 291);
			LeaveRule_synpred210_Php_fragment();
		}
	}
	// $ANTLR end synpred210_Php

	partial void EnterRule_synpred211_Php_fragment();
	partial void LeaveRule_synpred211_Php_fragment();

	// $ANTLR start synpred211_Php
	private void synpred211_Php_fragment()
	{
		EnterRule_synpred211_Php_fragment();
		EnterRule("synpred211_Php_fragment", 292);
		TraceIn("synpred211_Php_fragment", 292);
		try
		{
			// Php.g:439:63: ( Try )
			DebugEnterAlt(1);
			// Php.g:439:63: Try
			{
			DebugLocation(439, 63);
			Match(input,Try,Follow._Try_in_synpred211_Php2420); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred211_Php_fragment", 292);
			LeaveRule("synpred211_Php_fragment", 292);
			LeaveRule_synpred211_Php_fragment();
		}
	}
	// $ANTLR end synpred211_Php

	partial void EnterRule_synpred212_Php_fragment();
	partial void LeaveRule_synpred212_Php_fragment();

	// $ANTLR start synpred212_Php
	private void synpred212_Php_fragment()
	{
		EnterRule_synpred212_Php_fragment();
		EnterRule("synpred212_Php_fragment", 293);
		TraceIn("synpred212_Php_fragment", 293);
		try
		{
			// Php.g:439:67: ( Catch )
			DebugEnterAlt(1);
			// Php.g:439:67: Catch
			{
			DebugLocation(439, 67);
			Match(input,Catch,Follow._Catch_in_synpred212_Php2422); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred212_Php_fragment", 293);
			LeaveRule("synpred212_Php_fragment", 293);
			LeaveRule_synpred212_Php_fragment();
		}
	}
	// $ANTLR end synpred212_Php

	partial void EnterRule_synpred213_Php_fragment();
	partial void LeaveRule_synpred213_Php_fragment();

	// $ANTLR start synpred213_Php
	private void synpred213_Php_fragment()
	{
		EnterRule_synpred213_Php_fragment();
		EnterRule("synpred213_Php_fragment", 294);
		TraceIn("synpred213_Php_fragment", 294);
		try
		{
			// Php.g:439:73: ( Finally )
			DebugEnterAlt(1);
			// Php.g:439:73: Finally
			{
			DebugLocation(439, 73);
			Match(input,Finally,Follow._Finally_in_synpred213_Php2424); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred213_Php_fragment", 294);
			LeaveRule("synpred213_Php_fragment", 294);
			LeaveRule_synpred213_Php_fragment();
		}
	}
	// $ANTLR end synpred213_Php

	partial void EnterRule_synpred214_Php_fragment();
	partial void LeaveRule_synpred214_Php_fragment();

	// $ANTLR start synpred214_Php
	private void synpred214_Php_fragment()
	{
		EnterRule_synpred214_Php_fragment();
		EnterRule("synpred214_Php_fragment", 295);
		TraceIn("synpred214_Php_fragment", 295);
		try
		{
			// Php.g:439:81: ( Switch )
			DebugEnterAlt(1);
			// Php.g:439:81: Switch
			{
			DebugLocation(439, 81);
			Match(input,Switch,Follow._Switch_in_synpred214_Php2426); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred214_Php_fragment", 295);
			LeaveRule("synpred214_Php_fragment", 295);
			LeaveRule_synpred214_Php_fragment();
		}
	}
	// $ANTLR end synpred214_Php

	partial void EnterRule_synpred215_Php_fragment();
	partial void LeaveRule_synpred215_Php_fragment();

	// $ANTLR start synpred215_Php
	private void synpred215_Php_fragment()
	{
		EnterRule_synpred215_Php_fragment();
		EnterRule("synpred215_Php_fragment", 296);
		TraceIn("synpred215_Php_fragment", 296);
		try
		{
			// Php.g:439:88: ( Case )
			DebugEnterAlt(1);
			// Php.g:439:88: Case
			{
			DebugLocation(439, 88);
			Match(input,Case,Follow._Case_in_synpred215_Php2428); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred215_Php_fragment", 296);
			LeaveRule("synpred215_Php_fragment", 296);
			LeaveRule_synpred215_Php_fragment();
		}
	}
	// $ANTLR end synpred215_Php

	partial void EnterRule_synpred216_Php_fragment();
	partial void LeaveRule_synpred216_Php_fragment();

	// $ANTLR start synpred216_Php
	private void synpred216_Php_fragment()
	{
		EnterRule_synpred216_Php_fragment();
		EnterRule("synpred216_Php_fragment", 297);
		TraceIn("synpred216_Php_fragment", 297);
		try
		{
			// Php.g:439:93: ( Default )
			DebugEnterAlt(1);
			// Php.g:439:93: Default
			{
			DebugLocation(439, 93);
			Match(input,Default,Follow._Default_in_synpred216_Php2430); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred216_Php_fragment", 297);
			LeaveRule("synpred216_Php_fragment", 297);
			LeaveRule_synpred216_Php_fragment();
		}
	}
	// $ANTLR end synpred216_Php

	partial void EnterRule_synpred217_Php_fragment();
	partial void LeaveRule_synpred217_Php_fragment();

	// $ANTLR start synpred217_Php
	private void synpred217_Php_fragment()
	{
		EnterRule_synpred217_Php_fragment();
		EnterRule("synpred217_Php_fragment", 298);
		TraceIn("synpred217_Php_fragment", 298);
		try
		{
			// Php.g:439:101: ( Namespace )
			DebugEnterAlt(1);
			// Php.g:439:101: Namespace
			{
			DebugLocation(439, 101);
			Match(input,Namespace,Follow._Namespace_in_synpred217_Php2432); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred217_Php_fragment", 298);
			LeaveRule("synpred217_Php_fragment", 298);
			LeaveRule_synpred217_Php_fragment();
		}
	}
	// $ANTLR end synpred217_Php

	partial void EnterRule_synpred218_Php_fragment();
	partial void LeaveRule_synpred218_Php_fragment();

	// $ANTLR start synpred218_Php
	private void synpred218_Php_fragment()
	{
		EnterRule_synpred218_Php_fragment();
		EnterRule("synpred218_Php_fragment", 299);
		TraceIn("synpred218_Php_fragment", 299);
		try
		{
			// Php.g:439:111: ( Function )
			DebugEnterAlt(1);
			// Php.g:439:111: Function
			{
			DebugLocation(439, 111);
			Match(input,Function,Follow._Function_in_synpred218_Php2434); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred218_Php_fragment", 299);
			LeaveRule("synpred218_Php_fragment", 299);
			LeaveRule_synpred218_Php_fragment();
		}
	}
	// $ANTLR end synpred218_Php

	partial void EnterRule_synpred219_Php_fragment();
	partial void LeaveRule_synpred219_Php_fragment();

	// $ANTLR start synpred219_Php
	private void synpred219_Php_fragment()
	{
		EnterRule_synpred219_Php_fragment();
		EnterRule("synpred219_Php_fragment", 300);
		TraceIn("synpred219_Php_fragment", 300);
		try
		{
			// Php.g:439:120: ( Break )
			DebugEnterAlt(1);
			// Php.g:439:120: Break
			{
			DebugLocation(439, 120);
			Match(input,Break,Follow._Break_in_synpred219_Php2436); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred219_Php_fragment", 300);
			LeaveRule("synpred219_Php_fragment", 300);
			LeaveRule_synpred219_Php_fragment();
		}
	}
	// $ANTLR end synpred219_Php

	partial void EnterRule_synpred220_Php_fragment();
	partial void LeaveRule_synpred220_Php_fragment();

	// $ANTLR start synpred220_Php
	private void synpred220_Php_fragment()
	{
		EnterRule_synpred220_Php_fragment();
		EnterRule("synpred220_Php_fragment", 301);
		TraceIn("synpred220_Php_fragment", 301);
		try
		{
			// Php.g:439:126: ( Continue )
			DebugEnterAlt(1);
			// Php.g:439:126: Continue
			{
			DebugLocation(439, 126);
			Match(input,Continue,Follow._Continue_in_synpred220_Php2438); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred220_Php_fragment", 301);
			LeaveRule("synpred220_Php_fragment", 301);
			LeaveRule_synpred220_Php_fragment();
		}
	}
	// $ANTLR end synpred220_Php

	partial void EnterRule_synpred221_Php_fragment();
	partial void LeaveRule_synpred221_Php_fragment();

	// $ANTLR start synpred221_Php
	private void synpred221_Php_fragment()
	{
		EnterRule_synpred221_Php_fragment();
		EnterRule("synpred221_Php_fragment", 302);
		TraceIn("synpred221_Php_fragment", 302);
		try
		{
			// Php.g:439:135: ( Goto )
			DebugEnterAlt(1);
			// Php.g:439:135: Goto
			{
			DebugLocation(439, 135);
			Match(input,Goto,Follow._Goto_in_synpred221_Php2440); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred221_Php_fragment", 302);
			LeaveRule("synpred221_Php_fragment", 302);
			LeaveRule_synpred221_Php_fragment();
		}
	}
	// $ANTLR end synpred221_Php

	partial void EnterRule_synpred222_Php_fragment();
	partial void LeaveRule_synpred222_Php_fragment();

	// $ANTLR start synpred222_Php
	private void synpred222_Php_fragment()
	{
		EnterRule_synpred222_Php_fragment();
		EnterRule("synpred222_Php_fragment", 303);
		TraceIn("synpred222_Php_fragment", 303);
		try
		{
			// Php.g:439:140: ( Return )
			DebugEnterAlt(1);
			// Php.g:439:140: Return
			{
			DebugLocation(439, 140);
			Match(input,Return,Follow._Return_in_synpred222_Php2442); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred222_Php_fragment", 303);
			LeaveRule("synpred222_Php_fragment", 303);
			LeaveRule_synpred222_Php_fragment();
		}
	}
	// $ANTLR end synpred222_Php

	partial void EnterRule_synpred223_Php_fragment();
	partial void LeaveRule_synpred223_Php_fragment();

	// $ANTLR start synpred223_Php
	private void synpred223_Php_fragment()
	{
		EnterRule_synpred223_Php_fragment();
		EnterRule("synpred223_Php_fragment", 304);
		TraceIn("synpred223_Php_fragment", 304);
		try
		{
			// Php.g:439:147: ( Throw )
			DebugEnterAlt(1);
			// Php.g:439:147: Throw
			{
			DebugLocation(439, 147);
			Match(input,Throw,Follow._Throw_in_synpred223_Php2444); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred223_Php_fragment", 304);
			LeaveRule("synpred223_Php_fragment", 304);
			LeaveRule_synpred223_Php_fragment();
		}
	}
	// $ANTLR end synpred223_Php

	partial void EnterRule_synpred224_Php_fragment();
	partial void LeaveRule_synpred224_Php_fragment();

	// $ANTLR start synpred224_Php
	private void synpred224_Php_fragment()
	{
		EnterRule_synpred224_Php_fragment();
		EnterRule("synpred224_Php_fragment", 305);
		TraceIn("synpred224_Php_fragment", 305);
		try
		{
			// Php.g:439:153: ( Global )
			DebugEnterAlt(1);
			// Php.g:439:153: Global
			{
			DebugLocation(439, 153);
			Match(input,Global,Follow._Global_in_synpred224_Php2446); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred224_Php_fragment", 305);
			LeaveRule("synpred224_Php_fragment", 305);
			LeaveRule_synpred224_Php_fragment();
		}
	}
	// $ANTLR end synpred224_Php

	partial void EnterRule_synpred225_Php_fragment();
	partial void LeaveRule_synpred225_Php_fragment();

	// $ANTLR start synpred225_Php
	private void synpred225_Php_fragment()
	{
		EnterRule_synpred225_Php_fragment();
		EnterRule("synpred225_Php_fragment", 306);
		TraceIn("synpred225_Php_fragment", 306);
		try
		{
			// Php.g:439:160: ( Static )
			DebugEnterAlt(1);
			// Php.g:439:160: Static
			{
			DebugLocation(439, 160);
			Match(input,Static,Follow._Static_in_synpred225_Php2448); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred225_Php_fragment", 306);
			LeaveRule("synpred225_Php_fragment", 306);
			LeaveRule_synpred225_Php_fragment();
		}
	}
	// $ANTLR end synpred225_Php

	partial void EnterRule_synpred226_Php_fragment();
	partial void LeaveRule_synpred226_Php_fragment();

	// $ANTLR start synpred226_Php
	private void synpred226_Php_fragment()
	{
		EnterRule_synpred226_Php_fragment();
		EnterRule("synpred226_Php_fragment", 307);
		TraceIn("synpred226_Php_fragment", 307);
		try
		{
			// Php.g:439:167: ( And )
			DebugEnterAlt(1);
			// Php.g:439:167: And
			{
			DebugLocation(439, 167);
			Match(input,And,Follow._And_in_synpred226_Php2450); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred226_Php_fragment", 307);
			LeaveRule("synpred226_Php_fragment", 307);
			LeaveRule_synpred226_Php_fragment();
		}
	}
	// $ANTLR end synpred226_Php

	partial void EnterRule_synpred227_Php_fragment();
	partial void LeaveRule_synpred227_Php_fragment();

	// $ANTLR start synpred227_Php
	private void synpred227_Php_fragment()
	{
		EnterRule_synpred227_Php_fragment();
		EnterRule("synpred227_Php_fragment", 308);
		TraceIn("synpred227_Php_fragment", 308);
		try
		{
			// Php.g:439:171: ( Or )
			DebugEnterAlt(1);
			// Php.g:439:171: Or
			{
			DebugLocation(439, 171);
			Match(input,Or,Follow._Or_in_synpred227_Php2452); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred227_Php_fragment", 308);
			LeaveRule("synpred227_Php_fragment", 308);
			LeaveRule_synpred227_Php_fragment();
		}
	}
	// $ANTLR end synpred227_Php

	partial void EnterRule_synpred228_Php_fragment();
	partial void LeaveRule_synpred228_Php_fragment();

	// $ANTLR start synpred228_Php
	private void synpred228_Php_fragment()
	{
		EnterRule_synpred228_Php_fragment();
		EnterRule("synpred228_Php_fragment", 309);
		TraceIn("synpred228_Php_fragment", 309);
		try
		{
			// Php.g:439:174: ( Xor )
			DebugEnterAlt(1);
			// Php.g:439:174: Xor
			{
			DebugLocation(439, 174);
			Match(input,Xor,Follow._Xor_in_synpred228_Php2454); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred228_Php_fragment", 309);
			LeaveRule("synpred228_Php_fragment", 309);
			LeaveRule_synpred228_Php_fragment();
		}
	}
	// $ANTLR end synpred228_Php

	partial void EnterRule_synpred229_Php_fragment();
	partial void LeaveRule_synpred229_Php_fragment();

	// $ANTLR start synpred229_Php
	private void synpred229_Php_fragment()
	{
		EnterRule_synpred229_Php_fragment();
		EnterRule("synpred229_Php_fragment", 310);
		TraceIn("synpred229_Php_fragment", 310);
		try
		{
			// Php.g:439:178: ( Instanceof )
			DebugEnterAlt(1);
			// Php.g:439:178: Instanceof
			{
			DebugLocation(439, 178);
			Match(input,Instanceof,Follow._Instanceof_in_synpred229_Php2456); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred229_Php_fragment", 310);
			LeaveRule("synpred229_Php_fragment", 310);
			LeaveRule_synpred229_Php_fragment();
		}
	}
	// $ANTLR end synpred229_Php

	partial void EnterRule_synpred230_Php_fragment();
	partial void LeaveRule_synpred230_Php_fragment();

	// $ANTLR start synpred230_Php
	private void synpred230_Php_fragment()
	{
		EnterRule_synpred230_Php_fragment();
		EnterRule("synpred230_Php_fragment", 311);
		TraceIn("synpred230_Php_fragment", 311);
		try
		{
			// Php.g:439:189: ( Null )
			DebugEnterAlt(1);
			// Php.g:439:189: Null
			{
			DebugLocation(439, 189);
			Match(input,Null,Follow._Null_in_synpred230_Php2458); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred230_Php_fragment", 311);
			LeaveRule("synpred230_Php_fragment", 311);
			LeaveRule_synpred230_Php_fragment();
		}
	}
	// $ANTLR end synpred230_Php

	partial void EnterRule_synpred231_Php_fragment();
	partial void LeaveRule_synpred231_Php_fragment();

	// $ANTLR start synpred231_Php
	private void synpred231_Php_fragment()
	{
		EnterRule_synpred231_Php_fragment();
		EnterRule("synpred231_Php_fragment", 312);
		TraceIn("synpred231_Php_fragment", 312);
		try
		{
			// Php.g:439:194: ( List )
			DebugEnterAlt(1);
			// Php.g:439:194: List
			{
			DebugLocation(439, 194);
			Match(input,List,Follow._List_in_synpred231_Php2460); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred231_Php_fragment", 312);
			LeaveRule("synpred231_Php_fragment", 312);
			LeaveRule_synpred231_Php_fragment();
		}
	}
	// $ANTLR end synpred231_Php

	partial void EnterRule_synpred232_Php_fragment();
	partial void LeaveRule_synpred232_Php_fragment();

	// $ANTLR start synpred232_Php
	private void synpred232_Php_fragment()
	{
		EnterRule_synpred232_Php_fragment();
		EnterRule("synpred232_Php_fragment", 313);
		TraceIn("synpred232_Php_fragment", 313);
		try
		{
			// Php.g:439:199: ( Class )
			DebugEnterAlt(1);
			// Php.g:439:199: Class
			{
			DebugLocation(439, 199);
			Match(input,Class,Follow._Class_in_synpred232_Php2462); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred232_Php_fragment", 313);
			LeaveRule("synpred232_Php_fragment", 313);
			LeaveRule_synpred232_Php_fragment();
		}
	}
	// $ANTLR end synpred232_Php

	partial void EnterRule_synpred233_Php_fragment();
	partial void LeaveRule_synpred233_Php_fragment();

	// $ANTLR start synpred233_Php
	private void synpred233_Php_fragment()
	{
		EnterRule_synpred233_Php_fragment();
		EnterRule("synpred233_Php_fragment", 314);
		TraceIn("synpred233_Php_fragment", 314);
		try
		{
			// Php.g:439:205: ( Interface )
			DebugEnterAlt(1);
			// Php.g:439:205: Interface
			{
			DebugLocation(439, 205);
			Match(input,Interface,Follow._Interface_in_synpred233_Php2464); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred233_Php_fragment", 314);
			LeaveRule("synpred233_Php_fragment", 314);
			LeaveRule_synpred233_Php_fragment();
		}
	}
	// $ANTLR end synpred233_Php

	partial void EnterRule_synpred234_Php_fragment();
	partial void LeaveRule_synpred234_Php_fragment();

	// $ANTLR start synpred234_Php
	private void synpred234_Php_fragment()
	{
		EnterRule_synpred234_Php_fragment();
		EnterRule("synpred234_Php_fragment", 315);
		TraceIn("synpred234_Php_fragment", 315);
		try
		{
			// Php.g:439:215: ( Extends )
			DebugEnterAlt(1);
			// Php.g:439:215: Extends
			{
			DebugLocation(439, 215);
			Match(input,Extends,Follow._Extends_in_synpred234_Php2466); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred234_Php_fragment", 315);
			LeaveRule("synpred234_Php_fragment", 315);
			LeaveRule_synpred234_Php_fragment();
		}
	}
	// $ANTLR end synpred234_Php

	partial void EnterRule_synpred235_Php_fragment();
	partial void LeaveRule_synpred235_Php_fragment();

	// $ANTLR start synpred235_Php
	private void synpred235_Php_fragment()
	{
		EnterRule_synpred235_Php_fragment();
		EnterRule("synpred235_Php_fragment", 316);
		TraceIn("synpred235_Php_fragment", 316);
		try
		{
			// Php.g:439:223: ( Implements )
			DebugEnterAlt(1);
			// Php.g:439:223: Implements
			{
			DebugLocation(439, 223);
			Match(input,Implements,Follow._Implements_in_synpred235_Php2468); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred235_Php_fragment", 316);
			LeaveRule("synpred235_Php_fragment", 316);
			LeaveRule_synpred235_Php_fragment();
		}
	}
	// $ANTLR end synpred235_Php

	partial void EnterRule_synpred236_Php_fragment();
	partial void LeaveRule_synpred236_Php_fragment();

	// $ANTLR start synpred236_Php
	private void synpred236_Php_fragment()
	{
		EnterRule_synpred236_Php_fragment();
		EnterRule("synpred236_Php_fragment", 317);
		TraceIn("synpred236_Php_fragment", 317);
		try
		{
			// Php.g:439:234: ( Abstract )
			DebugEnterAlt(1);
			// Php.g:439:234: Abstract
			{
			DebugLocation(439, 234);
			Match(input,Abstract,Follow._Abstract_in_synpred236_Php2470); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred236_Php_fragment", 317);
			LeaveRule("synpred236_Php_fragment", 317);
			LeaveRule_synpred236_Php_fragment();
		}
	}
	// $ANTLR end synpred236_Php

	partial void EnterRule_synpred237_Php_fragment();
	partial void LeaveRule_synpred237_Php_fragment();

	// $ANTLR start synpred237_Php
	private void synpred237_Php_fragment()
	{
		EnterRule_synpred237_Php_fragment();
		EnterRule("synpred237_Php_fragment", 318);
		TraceIn("synpred237_Php_fragment", 318);
		try
		{
			// Php.g:439:243: ( Var )
			DebugEnterAlt(1);
			// Php.g:439:243: Var
			{
			DebugLocation(439, 243);
			Match(input,Var,Follow._Var_in_synpred237_Php2472); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred237_Php_fragment", 318);
			LeaveRule("synpred237_Php_fragment", 318);
			LeaveRule_synpred237_Php_fragment();
		}
	}
	// $ANTLR end synpred237_Php

	partial void EnterRule_synpred238_Php_fragment();
	partial void LeaveRule_synpred238_Php_fragment();

	// $ANTLR start synpred238_Php
	private void synpred238_Php_fragment()
	{
		EnterRule_synpred238_Php_fragment();
		EnterRule("synpred238_Php_fragment", 319);
		TraceIn("synpred238_Php_fragment", 319);
		try
		{
			// Php.g:439:247: ( Const )
			DebugEnterAlt(1);
			// Php.g:439:247: Const
			{
			DebugLocation(439, 247);
			Match(input,Const,Follow._Const_in_synpred238_Php2474); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred238_Php_fragment", 319);
			LeaveRule("synpred238_Php_fragment", 319);
			LeaveRule_synpred238_Php_fragment();
		}
	}
	// $ANTLR end synpred238_Php

	partial void EnterRule_synpred239_Php_fragment();
	partial void LeaveRule_synpred239_Php_fragment();

	// $ANTLR start synpred239_Php
	private void synpred239_Php_fragment()
	{
		EnterRule_synpred239_Php_fragment();
		EnterRule("synpred239_Php_fragment", 320);
		TraceIn("synpred239_Php_fragment", 320);
		try
		{
			// Php.g:439:253: ( As )
			DebugEnterAlt(1);
			// Php.g:439:253: As
			{
			DebugLocation(439, 253);
			Match(input,As,Follow._As_in_synpred239_Php2476); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred239_Php_fragment", 320);
			LeaveRule("synpred239_Php_fragment", 320);
			LeaveRule_synpred239_Php_fragment();
		}
	}
	// $ANTLR end synpred239_Php

	partial void EnterRule_synpred240_Php_fragment();
	partial void LeaveRule_synpred240_Php_fragment();

	// $ANTLR start synpred240_Php
	private void synpred240_Php_fragment()
	{
		EnterRule_synpred240_Php_fragment();
		EnterRule("synpred240_Php_fragment", 321);
		TraceIn("synpred240_Php_fragment", 321);
		try
		{
			// Php.g:439:256: ( Require )
			DebugEnterAlt(1);
			// Php.g:439:256: Require
			{
			DebugLocation(439, 256);
			Match(input,Require,Follow._Require_in_synpred240_Php2478); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred240_Php_fragment", 321);
			LeaveRule("synpred240_Php_fragment", 321);
			LeaveRule_synpred240_Php_fragment();
		}
	}
	// $ANTLR end synpred240_Php

	partial void EnterRule_synpred241_Php_fragment();
	partial void LeaveRule_synpred241_Php_fragment();

	// $ANTLR start synpred241_Php
	private void synpred241_Php_fragment()
	{
		EnterRule_synpred241_Php_fragment();
		EnterRule("synpred241_Php_fragment", 322);
		TraceIn("synpred241_Php_fragment", 322);
		try
		{
			// Php.g:439:264: ( RequireOnce )
			DebugEnterAlt(1);
			// Php.g:439:264: RequireOnce
			{
			DebugLocation(439, 264);
			Match(input,RequireOnce,Follow._RequireOnce_in_synpred241_Php2480); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred241_Php_fragment", 322);
			LeaveRule("synpred241_Php_fragment", 322);
			LeaveRule_synpred241_Php_fragment();
		}
	}
	// $ANTLR end synpred241_Php

	partial void EnterRule_synpred242_Php_fragment();
	partial void LeaveRule_synpred242_Php_fragment();

	// $ANTLR start synpred242_Php
	private void synpred242_Php_fragment()
	{
		EnterRule_synpred242_Php_fragment();
		EnterRule("synpred242_Php_fragment", 323);
		TraceIn("synpred242_Php_fragment", 323);
		try
		{
			// Php.g:439:276: ( Include )
			DebugEnterAlt(1);
			// Php.g:439:276: Include
			{
			DebugLocation(439, 276);
			Match(input,Include,Follow._Include_in_synpred242_Php2482); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred242_Php_fragment", 323);
			LeaveRule("synpred242_Php_fragment", 323);
			LeaveRule_synpred242_Php_fragment();
		}
	}
	// $ANTLR end synpred242_Php

	partial void EnterRule_synpred243_Php_fragment();
	partial void LeaveRule_synpred243_Php_fragment();

	// $ANTLR start synpred243_Php
	private void synpred243_Php_fragment()
	{
		EnterRule_synpred243_Php_fragment();
		EnterRule("synpred243_Php_fragment", 324);
		TraceIn("synpred243_Php_fragment", 324);
		try
		{
			// Php.g:439:284: ( IncludeOnce )
			DebugEnterAlt(1);
			// Php.g:439:284: IncludeOnce
			{
			DebugLocation(439, 284);
			Match(input,IncludeOnce,Follow._IncludeOnce_in_synpred243_Php2484); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred243_Php_fragment", 324);
			LeaveRule("synpred243_Php_fragment", 324);
			LeaveRule_synpred243_Php_fragment();
		}
	}
	// $ANTLR end synpred243_Php

	partial void EnterRule_synpred244_Php_fragment();
	partial void LeaveRule_synpred244_Php_fragment();

	// $ANTLR start synpred244_Php
	private void synpred244_Php_fragment()
	{
		EnterRule_synpred244_Php_fragment();
		EnterRule("synpred244_Php_fragment", 325);
		TraceIn("synpred244_Php_fragment", 325);
		try
		{
			// Php.g:439:296: ( Public )
			DebugEnterAlt(1);
			// Php.g:439:296: Public
			{
			DebugLocation(439, 296);
			Match(input,Public,Follow._Public_in_synpred244_Php2486); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred244_Php_fragment", 325);
			LeaveRule("synpred244_Php_fragment", 325);
			LeaveRule_synpred244_Php_fragment();
		}
	}
	// $ANTLR end synpred244_Php

	partial void EnterRule_synpred245_Php_fragment();
	partial void LeaveRule_synpred245_Php_fragment();

	// $ANTLR start synpred245_Php
	private void synpred245_Php_fragment()
	{
		EnterRule_synpred245_Php_fragment();
		EnterRule("synpred245_Php_fragment", 326);
		TraceIn("synpred245_Php_fragment", 326);
		try
		{
			// Php.g:439:303: ( Private )
			DebugEnterAlt(1);
			// Php.g:439:303: Private
			{
			DebugLocation(439, 303);
			Match(input,Private,Follow._Private_in_synpred245_Php2488); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred245_Php_fragment", 326);
			LeaveRule("synpred245_Php_fragment", 326);
			LeaveRule_synpred245_Php_fragment();
		}
	}
	// $ANTLR end synpred245_Php

	partial void EnterRule_synpred246_Php_fragment();
	partial void LeaveRule_synpred246_Php_fragment();

	// $ANTLR start synpred246_Php
	private void synpred246_Php_fragment()
	{
		EnterRule_synpred246_Php_fragment();
		EnterRule("synpred246_Php_fragment", 327);
		TraceIn("synpred246_Php_fragment", 327);
		try
		{
			// Php.g:439:311: ( Protected )
			DebugEnterAlt(1);
			// Php.g:439:311: Protected
			{
			DebugLocation(439, 311);
			Match(input,Protected,Follow._Protected_in_synpred246_Php2490); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred246_Php_fragment", 327);
			LeaveRule("synpred246_Php_fragment", 327);
			LeaveRule_synpred246_Php_fragment();
		}
	}
	// $ANTLR end synpred246_Php

	partial void EnterRule_synpred247_Php_fragment();
	partial void LeaveRule_synpred247_Php_fragment();

	// $ANTLR start synpred247_Php
	private void synpred247_Php_fragment()
	{
		EnterRule_synpred247_Php_fragment();
		EnterRule("synpred247_Php_fragment", 328);
		TraceIn("synpred247_Php_fragment", 328);
		try
		{
			// Php.g:439:321: ( True )
			DebugEnterAlt(1);
			// Php.g:439:321: True
			{
			DebugLocation(439, 321);
			Match(input,True,Follow._True_in_synpred247_Php2492); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred247_Php_fragment", 328);
			LeaveRule("synpred247_Php_fragment", 328);
			LeaveRule_synpred247_Php_fragment();
		}
	}
	// $ANTLR end synpred247_Php

	partial void EnterRule_synpred248_Php_fragment();
	partial void LeaveRule_synpred248_Php_fragment();

	// $ANTLR start synpred248_Php
	private void synpred248_Php_fragment()
	{
		EnterRule_synpred248_Php_fragment();
		EnterRule("synpred248_Php_fragment", 329);
		TraceIn("synpred248_Php_fragment", 329);
		try
		{
			// Php.g:439:326: ( False )
			DebugEnterAlt(1);
			// Php.g:439:326: False
			{
			DebugLocation(439, 326);
			Match(input,False,Follow._False_in_synpred248_Php2494); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred248_Php_fragment", 329);
			LeaveRule("synpred248_Php_fragment", 329);
			LeaveRule_synpred248_Php_fragment();
		}
	}
	// $ANTLR end synpred248_Php

	partial void EnterRule_synpred249_Php_fragment();
	partial void LeaveRule_synpred249_Php_fragment();

	// $ANTLR start synpred249_Php
	private void synpred249_Php_fragment()
	{
		EnterRule_synpred249_Php_fragment();
		EnterRule("synpred249_Php_fragment", 330);
		TraceIn("synpred249_Php_fragment", 330);
		try
		{
			// Php.g:439:332: ( HaltCompiler )
			DebugEnterAlt(1);
			// Php.g:439:332: HaltCompiler
			{
			DebugLocation(439, 332);
			Match(input,HaltCompiler,Follow._HaltCompiler_in_synpred249_Php2496); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred249_Php_fragment", 330);
			LeaveRule("synpred249_Php_fragment", 330);
			LeaveRule_synpred249_Php_fragment();
		}
	}
	// $ANTLR end synpred249_Php

	partial void EnterRule_synpred250_Php_fragment();
	partial void LeaveRule_synpred250_Php_fragment();

	// $ANTLR start synpred250_Php
	private void synpred250_Php_fragment()
	{
		EnterRule_synpred250_Php_fragment();
		EnterRule("synpred250_Php_fragment", 331);
		TraceIn("synpred250_Php_fragment", 331);
		try
		{
			// Php.g:439:345: ( Die )
			DebugEnterAlt(1);
			// Php.g:439:345: Die
			{
			DebugLocation(439, 345);
			Match(input,Die,Follow._Die_in_synpred250_Php2498); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred250_Php_fragment", 331);
			LeaveRule("synpred250_Php_fragment", 331);
			LeaveRule_synpred250_Php_fragment();
		}
	}
	// $ANTLR end synpred250_Php

	partial void EnterRule_synpred251_Php_fragment();
	partial void LeaveRule_synpred251_Php_fragment();

	// $ANTLR start synpred251_Php
	private void synpred251_Php_fragment()
	{
		EnterRule_synpred251_Php_fragment();
		EnterRule("synpred251_Php_fragment", 332);
		TraceIn("synpred251_Php_fragment", 332);
		try
		{
			// Php.g:439:349: ( Empty )
			DebugEnterAlt(1);
			// Php.g:439:349: Empty
			{
			DebugLocation(439, 349);
			Match(input,Empty,Follow._Empty_in_synpred251_Php2500); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred251_Php_fragment", 332);
			LeaveRule("synpred251_Php_fragment", 332);
			LeaveRule_synpred251_Php_fragment();
		}
	}
	// $ANTLR end synpred251_Php

	partial void EnterRule_synpred252_Php_fragment();
	partial void LeaveRule_synpred252_Php_fragment();

	// $ANTLR start synpred252_Php
	private void synpred252_Php_fragment()
	{
		EnterRule_synpred252_Php_fragment();
		EnterRule("synpred252_Php_fragment", 333);
		TraceIn("synpred252_Php_fragment", 333);
		try
		{
			// Php.g:439:355: ( Exit )
			DebugEnterAlt(1);
			// Php.g:439:355: Exit
			{
			DebugLocation(439, 355);
			Match(input,Exit,Follow._Exit_in_synpred252_Php2502); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred252_Php_fragment", 333);
			LeaveRule("synpred252_Php_fragment", 333);
			LeaveRule_synpred252_Php_fragment();
		}
	}
	// $ANTLR end synpred252_Php

	partial void EnterRule_synpred253_Php_fragment();
	partial void LeaveRule_synpred253_Php_fragment();

	// $ANTLR start synpred253_Php
	private void synpred253_Php_fragment()
	{
		EnterRule_synpred253_Php_fragment();
		EnterRule("synpred253_Php_fragment", 334);
		TraceIn("synpred253_Php_fragment", 334);
		try
		{
			// Php.g:439:360: ( Eval )
			DebugEnterAlt(1);
			// Php.g:439:360: Eval
			{
			DebugLocation(439, 360);
			Match(input,Eval,Follow._Eval_in_synpred253_Php2504); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred253_Php_fragment", 334);
			LeaveRule("synpred253_Php_fragment", 334);
			LeaveRule_synpred253_Php_fragment();
		}
	}
	// $ANTLR end synpred253_Php

	partial void EnterRule_synpred254_Php_fragment();
	partial void LeaveRule_synpred254_Php_fragment();

	// $ANTLR start synpred254_Php
	private void synpred254_Php_fragment()
	{
		EnterRule_synpred254_Php_fragment();
		EnterRule("synpred254_Php_fragment", 335);
		TraceIn("synpred254_Php_fragment", 335);
		try
		{
			// Php.g:439:365: ( Isset )
			DebugEnterAlt(1);
			// Php.g:439:365: Isset
			{
			DebugLocation(439, 365);
			Match(input,Isset,Follow._Isset_in_synpred254_Php2506); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred254_Php_fragment", 335);
			LeaveRule("synpred254_Php_fragment", 335);
			LeaveRule_synpred254_Php_fragment();
		}
	}
	// $ANTLR end synpred254_Php

	partial void EnterRule_synpred255_Php_fragment();
	partial void LeaveRule_synpred255_Php_fragment();

	// $ANTLR start synpred255_Php
	private void synpred255_Php_fragment()
	{
		EnterRule_synpred255_Php_fragment();
		EnterRule("synpred255_Php_fragment", 336);
		TraceIn("synpred255_Php_fragment", 336);
		try
		{
			// Php.g:440:6: ( IntType )
			DebugEnterAlt(1);
			// Php.g:440:6: IntType
			{
			DebugLocation(440, 6);
			Match(input,IntType,Follow._IntType_in_synpred255_Php2513); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred255_Php_fragment", 336);
			LeaveRule("synpred255_Php_fragment", 336);
			LeaveRule_synpred255_Php_fragment();
		}
	}
	// $ANTLR end synpred255_Php

	partial void EnterRule_synpred256_Php_fragment();
	partial void LeaveRule_synpred256_Php_fragment();

	// $ANTLR start synpred256_Php
	private void synpred256_Php_fragment()
	{
		EnterRule_synpred256_Php_fragment();
		EnterRule("synpred256_Php_fragment", 337);
		TraceIn("synpred256_Php_fragment", 337);
		try
		{
			// Php.g:440:16: ( IntegerType )
			DebugEnterAlt(1);
			// Php.g:440:16: IntegerType
			{
			DebugLocation(440, 16);
			Match(input,IntegerType,Follow._IntegerType_in_synpred256_Php2517); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred256_Php_fragment", 337);
			LeaveRule("synpred256_Php_fragment", 337);
			LeaveRule_synpred256_Php_fragment();
		}
	}
	// $ANTLR end synpred256_Php

	partial void EnterRule_synpred257_Php_fragment();
	partial void LeaveRule_synpred257_Php_fragment();

	// $ANTLR start synpred257_Php
	private void synpred257_Php_fragment()
	{
		EnterRule_synpred257_Php_fragment();
		EnterRule("synpred257_Php_fragment", 338);
		TraceIn("synpred257_Php_fragment", 338);
		try
		{
			// Php.g:440:30: ( BoolType )
			DebugEnterAlt(1);
			// Php.g:440:30: BoolType
			{
			DebugLocation(440, 30);
			Match(input,BoolType,Follow._BoolType_in_synpred257_Php2521); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred257_Php_fragment", 338);
			LeaveRule("synpred257_Php_fragment", 338);
			LeaveRule_synpred257_Php_fragment();
		}
	}
	// $ANTLR end synpred257_Php

	partial void EnterRule_synpred258_Php_fragment();
	partial void LeaveRule_synpred258_Php_fragment();

	// $ANTLR start synpred258_Php
	private void synpred258_Php_fragment()
	{
		EnterRule_synpred258_Php_fragment();
		EnterRule("synpred258_Php_fragment", 339);
		TraceIn("synpred258_Php_fragment", 339);
		try
		{
			// Php.g:440:41: ( BooleanType )
			DebugEnterAlt(1);
			// Php.g:440:41: BooleanType
			{
			DebugLocation(440, 41);
			Match(input,BooleanType,Follow._BooleanType_in_synpred258_Php2525); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred258_Php_fragment", 339);
			LeaveRule("synpred258_Php_fragment", 339);
			LeaveRule_synpred258_Php_fragment();
		}
	}
	// $ANTLR end synpred258_Php

	partial void EnterRule_synpred259_Php_fragment();
	partial void LeaveRule_synpred259_Php_fragment();

	// $ANTLR start synpred259_Php
	private void synpred259_Php_fragment()
	{
		EnterRule_synpred259_Php_fragment();
		EnterRule("synpred259_Php_fragment", 340);
		TraceIn("synpred259_Php_fragment", 340);
		try
		{
			// Php.g:440:55: ( FloatType )
			DebugEnterAlt(1);
			// Php.g:440:55: FloatType
			{
			DebugLocation(440, 55);
			Match(input,FloatType,Follow._FloatType_in_synpred259_Php2529); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred259_Php_fragment", 340);
			LeaveRule("synpred259_Php_fragment", 340);
			LeaveRule_synpred259_Php_fragment();
		}
	}
	// $ANTLR end synpred259_Php

	partial void EnterRule_synpred260_Php_fragment();
	partial void LeaveRule_synpred260_Php_fragment();

	// $ANTLR start synpred260_Php
	private void synpred260_Php_fragment()
	{
		EnterRule_synpred260_Php_fragment();
		EnterRule("synpred260_Php_fragment", 341);
		TraceIn("synpred260_Php_fragment", 341);
		try
		{
			// Php.g:440:67: ( DoubleType )
			DebugEnterAlt(1);
			// Php.g:440:67: DoubleType
			{
			DebugLocation(440, 67);
			Match(input,DoubleType,Follow._DoubleType_in_synpred260_Php2533); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred260_Php_fragment", 341);
			LeaveRule("synpred260_Php_fragment", 341);
			LeaveRule_synpred260_Php_fragment();
		}
	}
	// $ANTLR end synpred260_Php

	partial void EnterRule_synpred261_Php_fragment();
	partial void LeaveRule_synpred261_Php_fragment();

	// $ANTLR start synpred261_Php
	private void synpred261_Php_fragment()
	{
		EnterRule_synpred261_Php_fragment();
		EnterRule("synpred261_Php_fragment", 342);
		TraceIn("synpred261_Php_fragment", 342);
		try
		{
			// Php.g:441:6: ( RealType )
			DebugEnterAlt(1);
			// Php.g:441:6: RealType
			{
			DebugLocation(441, 6);
			Match(input,RealType,Follow._RealType_in_synpred261_Php2540); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred261_Php_fragment", 342);
			LeaveRule("synpred261_Php_fragment", 342);
			LeaveRule_synpred261_Php_fragment();
		}
	}
	// $ANTLR end synpred261_Php

	partial void EnterRule_synpred262_Php_fragment();
	partial void LeaveRule_synpred262_Php_fragment();

	// $ANTLR start synpred262_Php
	private void synpred262_Php_fragment()
	{
		EnterRule_synpred262_Php_fragment();
		EnterRule("synpred262_Php_fragment", 343);
		TraceIn("synpred262_Php_fragment", 343);
		try
		{
			// Php.g:441:17: ( StringType )
			DebugEnterAlt(1);
			// Php.g:441:17: StringType
			{
			DebugLocation(441, 17);
			Match(input,StringType,Follow._StringType_in_synpred262_Php2544); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred262_Php_fragment", 343);
			LeaveRule("synpred262_Php_fragment", 343);
			LeaveRule_synpred262_Php_fragment();
		}
	}
	// $ANTLR end synpred262_Php

	partial void EnterRule_synpred263_Php_fragment();
	partial void LeaveRule_synpred263_Php_fragment();

	// $ANTLR start synpred263_Php
	private void synpred263_Php_fragment()
	{
		EnterRule_synpred263_Php_fragment();
		EnterRule("synpred263_Php_fragment", 344);
		TraceIn("synpred263_Php_fragment", 344);
		try
		{
			// Php.g:441:30: ( ObjectType )
			DebugEnterAlt(1);
			// Php.g:441:30: ObjectType
			{
			DebugLocation(441, 30);
			Match(input,ObjectType,Follow._ObjectType_in_synpred263_Php2548); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred263_Php_fragment", 344);
			LeaveRule("synpred263_Php_fragment", 344);
			LeaveRule_synpred263_Php_fragment();
		}
	}
	// $ANTLR end synpred263_Php

	partial void EnterRule_synpred264_Php_fragment();
	partial void LeaveRule_synpred264_Php_fragment();

	// $ANTLR start synpred264_Php
	private void synpred264_Php_fragment()
	{
		EnterRule_synpred264_Php_fragment();
		EnterRule("synpred264_Php_fragment", 345);
		TraceIn("synpred264_Php_fragment", 345);
		try
		{
			// Php.g:447:4: ( constantOrFunctionCall )
			DebugEnterAlt(1);
			// Php.g:447:4: constantOrFunctionCall
			{
			DebugLocation(447, 4);
			PushFollow(Follow._constantOrFunctionCall_in_synpred264_Php2570);
			constantOrFunctionCall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred264_Php_fragment", 345);
			LeaveRule("synpred264_Php_fragment", 345);
			LeaveRule_synpred264_Php_fragment();
		}
	}
	// $ANTLR end synpred264_Php

	partial void EnterRule_synpred265_Php_fragment();
	partial void LeaveRule_synpred265_Php_fragment();

	// $ANTLR start synpred265_Php
	private void synpred265_Php_fragment()
	{
		EnterRule_synpred265_Php_fragment();
		EnterRule("synpred265_Php_fragment", 346);
		TraceIn("synpred265_Php_fragment", 346);
		try
		{
			// Php.g:452:29: ( functionArguments )
			DebugEnterAlt(1);
			// Php.g:452:29: functionArguments
			{
			DebugLocation(452, 29);
			PushFollow(Follow._functionArguments_in_synpred265_Php2588);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred265_Php_fragment", 346);
			LeaveRule("synpred265_Php_fragment", 346);
			LeaveRule_synpred265_Php_fragment();
		}
	}
	// $ANTLR end synpred265_Php

	partial void EnterRule_synpred267_Php_fragment();
	partial void LeaveRule_synpred267_Php_fragment();

	// $ANTLR start synpred267_Php
	private void synpred267_Php_fragment()
	{
		EnterRule_synpred267_Php_fragment();
		EnterRule("synpred267_Php_fragment", 348);
		TraceIn("synpred267_Php_fragment", 348);
		try
		{
			// Php.g:452:74: ( functionArguments )
			DebugEnterAlt(1);
			// Php.g:452:74: functionArguments
			{
			DebugLocation(452, 74);
			PushFollow(Follow._functionArguments_in_synpred267_Php2600);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred267_Php_fragment", 348);
			LeaveRule("synpred267_Php_fragment", 348);
			LeaveRule_synpred267_Php_fragment();
		}
	}
	// $ANTLR end synpred267_Php

	partial void EnterRule_synpred268_Php_fragment();
	partial void LeaveRule_synpred268_Php_fragment();

	// $ANTLR start synpred268_Php
	private void synpred268_Php_fragment()
	{
		EnterRule_synpred268_Php_fragment();
		EnterRule("synpred268_Php_fragment", 349);
		TraceIn("synpred268_Php_fragment", 349);
		try
		{
			// Php.g:452:49: ( ( indexer | memberAccess ) ( functionArguments )? )
			DebugEnterAlt(1);
			// Php.g:452:49: ( indexer | memberAccess ) ( functionArguments )?
			{
			DebugLocation(452, 49);
			// Php.g:452:49: ( indexer | memberAccess )
			int alt201=2;
			try { DebugEnterSubRule(201);
			try { DebugEnterDecision(201, false);
			int LA201_1 = input.LA(1);

			if ((LA201_1==OpenCurlyBracket||LA201_1==OpenSquareBracket))
			{
				alt201 = 1;
			}
			else if ((LA201_1==InstanceMember))
			{
				alt201 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 201, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(201); }
			switch (alt201)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:452:50: indexer
				{
				DebugLocation(452, 50);
				PushFollow(Follow._indexer_in_synpred268_Php2593);
				indexer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:452:60: memberAccess
				{
				DebugLocation(452, 60);
				PushFollow(Follow._memberAccess_in_synpred268_Php2597);
				memberAccess();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(201); }

			DebugLocation(452, 74);
			// Php.g:452:74: ( functionArguments )?
			int alt202=2;
			try { DebugEnterSubRule(202);
			try { DebugEnterDecision(202, false);
			int LA202_1 = input.LA(1);

			if ((LA202_1==OpenRoundBracket))
			{
				alt202 = 1;
			}
			} finally { DebugExitDecision(202); }
			switch (alt202)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:452:74: functionArguments
				{
				DebugLocation(452, 74);
				PushFollow(Follow._functionArguments_in_synpred268_Php2600);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(202); }


			}

		}
		finally
		{
			TraceOut("synpred268_Php_fragment", 349);
			LeaveRule("synpred268_Php_fragment", 349);
			LeaveRule_synpred268_Php_fragment();
		}
	}
	// $ANTLR end synpred268_Php

	partial void EnterRule_synpred270_Php_fragment();
	partial void LeaveRule_synpred270_Php_fragment();

	// $ANTLR start synpred270_Php
	private void synpred270_Php_fragment()
	{
		EnterRule_synpred270_Php_fragment();
		EnterRule("synpred270_Php_fragment", 351);
		TraceIn("synpred270_Php_fragment", 351);
		try
		{
			// Php.g:456:73: ( functionArguments )
			DebugEnterAlt(1);
			// Php.g:456:73: functionArguments
			{
			DebugLocation(456, 73);
			PushFollow(Follow._functionArguments_in_synpred270_Php2627);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred270_Php_fragment", 351);
			LeaveRule("synpred270_Php_fragment", 351);
			LeaveRule_synpred270_Php_fragment();
		}
	}
	// $ANTLR end synpred270_Php

	partial void EnterRule_synpred271_Php_fragment();
	partial void LeaveRule_synpred271_Php_fragment();

	// $ANTLR start synpred271_Php
	private void synpred271_Php_fragment()
	{
		EnterRule_synpred271_Php_fragment();
		EnterRule("synpred271_Php_fragment", 352);
		TraceIn("synpred271_Php_fragment", 352);
		try
		{
			// Php.g:456:48: ( ( indexer | memberAccess ) ( functionArguments )? )
			DebugEnterAlt(1);
			// Php.g:456:48: ( indexer | memberAccess ) ( functionArguments )?
			{
			DebugLocation(456, 48);
			// Php.g:456:48: ( indexer | memberAccess )
			int alt203=2;
			try { DebugEnterSubRule(203);
			try { DebugEnterDecision(203, false);
			int LA203_1 = input.LA(1);

			if ((LA203_1==OpenCurlyBracket||LA203_1==OpenSquareBracket))
			{
				alt203 = 1;
			}
			else if ((LA203_1==InstanceMember))
			{
				alt203 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 203, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(203); }
			switch (alt203)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:456:49: indexer
				{
				DebugLocation(456, 49);
				PushFollow(Follow._indexer_in_synpred271_Php2620);
				indexer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:456:59: memberAccess
				{
				DebugLocation(456, 59);
				PushFollow(Follow._memberAccess_in_synpred271_Php2624);
				memberAccess();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(203); }

			DebugLocation(456, 73);
			// Php.g:456:73: ( functionArguments )?
			int alt204=2;
			try { DebugEnterSubRule(204);
			try { DebugEnterDecision(204, false);
			int LA204_1 = input.LA(1);

			if ((LA204_1==OpenRoundBracket))
			{
				alt204 = 1;
			}
			} finally { DebugExitDecision(204); }
			switch (alt204)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:456:73: functionArguments
				{
				DebugLocation(456, 73);
				PushFollow(Follow._functionArguments_in_synpred271_Php2627);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(204); }


			}

		}
		finally
		{
			TraceOut("synpred271_Php_fragment", 352);
			LeaveRule("synpred271_Php_fragment", 352);
			LeaveRule_synpred271_Php_fragment();
		}
	}
	// $ANTLR end synpred271_Php

	partial void EnterRule_synpred272_Php_fragment();
	partial void LeaveRule_synpred272_Php_fragment();

	// $ANTLR start synpred272_Php
	private void synpred272_Php_fragment()
	{
		EnterRule_synpred272_Php_fragment();
		EnterRule("synpred272_Php_fragment", 353);
		TraceIn("synpred272_Php_fragment", 353);
		try
		{
			// Php.g:456:4: ( constantOrStaticAccessor functionArguments ( ( indexer | memberAccess ) ( functionArguments )? )* )
			DebugEnterAlt(1);
			// Php.g:456:4: constantOrStaticAccessor functionArguments ( ( indexer | memberAccess ) ( functionArguments )? )*
			{
			DebugLocation(456, 4);
			PushFollow(Follow._constantOrStaticAccessor_in_synpred272_Php2614);
			constantOrStaticAccessor();
			PopFollow();
			if (state.failed) return;
			DebugLocation(456, 29);
			PushFollow(Follow._functionArguments_in_synpred272_Php2616);
			functionArguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(456, 47);
			// Php.g:456:47: ( ( indexer | memberAccess ) ( functionArguments )? )*
			try { DebugEnterSubRule(207);
			while (true)
			{
				int alt207=2;
				try { DebugEnterDecision(207, false);
				int LA207_1 = input.LA(1);

				if ((LA207_1==InstanceMember||LA207_1==OpenCurlyBracket||LA207_1==OpenSquareBracket))
				{
					alt207 = 1;
				}


				} finally { DebugExitDecision(207); }
				switch ( alt207 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:456:48: ( indexer | memberAccess ) ( functionArguments )?
					{
					DebugLocation(456, 48);
					// Php.g:456:48: ( indexer | memberAccess )
					int alt205=2;
					try { DebugEnterSubRule(205);
					try { DebugEnterDecision(205, false);
					int LA205_1 = input.LA(1);

					if ((LA205_1==OpenCurlyBracket||LA205_1==OpenSquareBracket))
					{
						alt205 = 1;
					}
					else if ((LA205_1==InstanceMember))
					{
						alt205 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 205, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(205); }
					switch (alt205)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:456:49: indexer
						{
						DebugLocation(456, 49);
						PushFollow(Follow._indexer_in_synpred272_Php2620);
						indexer();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Php.g:456:59: memberAccess
						{
						DebugLocation(456, 59);
						PushFollow(Follow._memberAccess_in_synpred272_Php2624);
						memberAccess();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(205); }

					DebugLocation(456, 73);
					// Php.g:456:73: ( functionArguments )?
					int alt206=2;
					try { DebugEnterSubRule(206);
					try { DebugEnterDecision(206, false);
					int LA206_1 = input.LA(1);

					if ((LA206_1==OpenRoundBracket))
					{
						alt206 = 1;
					}
					} finally { DebugExitDecision(206); }
					switch (alt206)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:456:73: functionArguments
						{
						DebugLocation(456, 73);
						PushFollow(Follow._functionArguments_in_synpred272_Php2627);
						functionArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(206); }


					}
					break;

				default:
					goto loop207;
				}
			}

			loop207:
				;

			} finally { DebugExitSubRule(207); }


			}

		}
		finally
		{
			TraceOut("synpred272_Php_fragment", 353);
			LeaveRule("synpred272_Php_fragment", 353);
			LeaveRule_synpred272_Php_fragment();
		}
	}
	// $ANTLR end synpred272_Php

	partial void EnterRule_synpred274_Php_fragment();
	partial void LeaveRule_synpred274_Php_fragment();

	// $ANTLR start synpred274_Php
	private void synpred274_Php_fragment()
	{
		EnterRule_synpred274_Php_fragment();
		EnterRule("synpred274_Php_fragment", 355);
		TraceIn("synpred274_Php_fragment", 355);
		try
		{
			// Php.g:457:55: ( functionArguments )
			DebugEnterAlt(1);
			// Php.g:457:55: functionArguments
			{
			DebugLocation(457, 55);
			PushFollow(Follow._functionArguments_in_synpred274_Php2646);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred274_Php_fragment", 355);
			LeaveRule("synpred274_Php_fragment", 355);
			LeaveRule_synpred274_Php_fragment();
		}
	}
	// $ANTLR end synpred274_Php

	partial void EnterRule_synpred275_Php_fragment();
	partial void LeaveRule_synpred275_Php_fragment();

	// $ANTLR start synpred275_Php
	private void synpred275_Php_fragment()
	{
		EnterRule_synpred275_Php_fragment();
		EnterRule("synpred275_Php_fragment", 356);
		TraceIn("synpred275_Php_fragment", 356);
		try
		{
			// Php.g:457:30: ( ( indexer | memberAccess ) ( functionArguments )? )
			DebugEnterAlt(1);
			// Php.g:457:30: ( indexer | memberAccess ) ( functionArguments )?
			{
			DebugLocation(457, 30);
			// Php.g:457:30: ( indexer | memberAccess )
			int alt208=2;
			try { DebugEnterSubRule(208);
			try { DebugEnterDecision(208, false);
			int LA208_1 = input.LA(1);

			if ((LA208_1==OpenCurlyBracket||LA208_1==OpenSquareBracket))
			{
				alt208 = 1;
			}
			else if ((LA208_1==InstanceMember))
			{
				alt208 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 208, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(208); }
			switch (alt208)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:457:31: indexer
				{
				DebugLocation(457, 31);
				PushFollow(Follow._indexer_in_synpred275_Php2639);
				indexer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:457:41: memberAccess
				{
				DebugLocation(457, 41);
				PushFollow(Follow._memberAccess_in_synpred275_Php2643);
				memberAccess();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(208); }

			DebugLocation(457, 55);
			// Php.g:457:55: ( functionArguments )?
			int alt209=2;
			try { DebugEnterSubRule(209);
			try { DebugEnterDecision(209, false);
			int LA209_1 = input.LA(1);

			if ((LA209_1==OpenRoundBracket))
			{
				alt209 = 1;
			}
			} finally { DebugExitDecision(209); }
			switch (alt209)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:457:55: functionArguments
				{
				DebugLocation(457, 55);
				PushFollow(Follow._functionArguments_in_synpred275_Php2646);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(209); }


			}

		}
		finally
		{
			TraceOut("synpred275_Php_fragment", 356);
			LeaveRule("synpred275_Php_fragment", 356);
			LeaveRule_synpred275_Php_fragment();
		}
	}
	// $ANTLR end synpred275_Php

	partial void EnterRule_synpred276_Php_fragment();
	partial void LeaveRule_synpred276_Php_fragment();

	// $ANTLR start synpred276_Php
	private void synpred276_Php_fragment()
	{
		EnterRule_synpred276_Php_fragment();
		EnterRule("synpred276_Php_fragment", 357);
		TraceIn("synpred276_Php_fragment", 357);
		try
		{
			// Php.g:457:4: ( constantOrStaticAccessor ( ( indexer | memberAccess ) ( functionArguments )? )+ )
			DebugEnterAlt(1);
			// Php.g:457:4: constantOrStaticAccessor ( ( indexer | memberAccess ) ( functionArguments )? )+
			{
			DebugLocation(457, 4);
			PushFollow(Follow._constantOrStaticAccessor_in_synpred276_Php2635);
			constantOrStaticAccessor();
			PopFollow();
			if (state.failed) return;
			DebugLocation(457, 29);
			// Php.g:457:29: ( ( indexer | memberAccess ) ( functionArguments )? )+
			int cnt212=0;
			try { DebugEnterSubRule(212);
			while (true)
			{
				int alt212=2;
				try { DebugEnterDecision(212, false);
				int LA212_1 = input.LA(1);

				if ((LA212_1==InstanceMember||LA212_1==OpenCurlyBracket||LA212_1==OpenSquareBracket))
				{
					alt212 = 1;
				}


				} finally { DebugExitDecision(212); }
				switch (alt212)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:457:30: ( indexer | memberAccess ) ( functionArguments )?
					{
					DebugLocation(457, 30);
					// Php.g:457:30: ( indexer | memberAccess )
					int alt210=2;
					try { DebugEnterSubRule(210);
					try { DebugEnterDecision(210, false);
					int LA210_1 = input.LA(1);

					if ((LA210_1==OpenCurlyBracket||LA210_1==OpenSquareBracket))
					{
						alt210 = 1;
					}
					else if ((LA210_1==InstanceMember))
					{
						alt210 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 210, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(210); }
					switch (alt210)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:457:31: indexer
						{
						DebugLocation(457, 31);
						PushFollow(Follow._indexer_in_synpred276_Php2639);
						indexer();
						PopFollow();
						if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Php.g:457:41: memberAccess
						{
						DebugLocation(457, 41);
						PushFollow(Follow._memberAccess_in_synpred276_Php2643);
						memberAccess();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(210); }

					DebugLocation(457, 55);
					// Php.g:457:55: ( functionArguments )?
					int alt211=2;
					try { DebugEnterSubRule(211);
					try { DebugEnterDecision(211, false);
					int LA211_1 = input.LA(1);

					if ((LA211_1==OpenRoundBracket))
					{
						alt211 = 1;
					}
					} finally { DebugExitDecision(211); }
					switch (alt211)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:457:55: functionArguments
						{
						DebugLocation(457, 55);
						PushFollow(Follow._functionArguments_in_synpred276_Php2646);
						functionArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(211); }


					}
					break;

				default:
					if (cnt212 >= 1)
						goto loop212;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee212 = new EarlyExitException( 212, input );
					DebugRecognitionException(eee212);
					throw eee212;
				}
				cnt212++;
			}
			loop212:
				;

			} finally { DebugExitSubRule(212); }


			}

		}
		finally
		{
			TraceOut("synpred276_Php_fragment", 357);
			LeaveRule("synpred276_Php_fragment", 357);
			LeaveRule_synpred276_Php_fragment();
		}
	}
	// $ANTLR end synpred276_Php

	partial void EnterRule_synpred277_Php_fragment();
	partial void LeaveRule_synpred277_Php_fragment();

	// $ANTLR start synpred277_Php
	private void synpred277_Php_fragment()
	{
		EnterRule_synpred277_Php_fragment();
		EnterRule("synpred277_Php_fragment", 358);
		TraceIn("synpred277_Php_fragment", 358);
		try
		{
			// Php.g:458:27: ( functionArguments )
			DebugEnterAlt(1);
			// Php.g:458:27: functionArguments
			{
			DebugLocation(458, 27);
			PushFollow(Follow._functionArguments_in_synpred277_Php2656);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred277_Php_fragment", 358);
			LeaveRule("synpred277_Php_fragment", 358);
			LeaveRule_synpred277_Php_fragment();
		}
	}
	// $ANTLR end synpred277_Php

	partial void EnterRule_synpred278_Php_fragment();
	partial void LeaveRule_synpred278_Php_fragment();

	// $ANTLR start synpred278_Php
	private void synpred278_Php_fragment()
	{
		EnterRule_synpred278_Php_fragment();
		EnterRule("synpred278_Php_fragment", 359);
		TraceIn("synpred278_Php_fragment", 359);
		try
		{
			// Php.g:466:5: ( variableOrStaticAccessor )
			DebugEnterAlt(1);
			// Php.g:466:5: variableOrStaticAccessor
			{
			DebugLocation(466, 5);
			PushFollow(Follow._variableOrStaticAccessor_in_synpred278_Php2677);
			variableOrStaticAccessor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred278_Php_fragment", 359);
			LeaveRule("synpred278_Php_fragment", 359);
			LeaveRule_synpred278_Php_fragment();
		}
	}
	// $ANTLR end synpred278_Php

	partial void EnterRule_synpred281_Php_fragment();
	partial void LeaveRule_synpred281_Php_fragment();

	// $ANTLR start synpred281_Php
	private void synpred281_Php_fragment()
	{
		EnterRule_synpred281_Php_fragment();
		EnterRule("synpred281_Php_fragment", 362);
		TraceIn("synpred281_Php_fragment", 362);
		try
		{
			// Php.g:468:16: ( memberAccess )
			DebugEnterAlt(1);
			// Php.g:468:16: memberAccess
			{
			DebugLocation(468, 16);
			PushFollow(Follow._memberAccess_in_synpred281_Php2699);
			memberAccess();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred281_Php_fragment", 362);
			LeaveRule("synpred281_Php_fragment", 362);
			LeaveRule_synpred281_Php_fragment();
		}
	}
	// $ANTLR end synpred281_Php

	partial void EnterRule_synpred282_Php_fragment();
	partial void LeaveRule_synpred282_Php_fragment();

	// $ANTLR start synpred282_Php
	private void synpred282_Php_fragment()
	{
		EnterRule_synpred282_Php_fragment();
		EnterRule("synpred282_Php_fragment", 363);
		TraceIn("synpred282_Php_fragment", 363);
		try
		{
			// Php.g:468:5: ( ( indexer | memberAccess )* memberAccess functionArguments )
			DebugEnterAlt(1);
			// Php.g:468:5: ( indexer | memberAccess )* memberAccess functionArguments
			{
			DebugLocation(468, 5);
			// Php.g:468:5: ( indexer | memberAccess )*
			try { DebugEnterSubRule(213);
			while (true)
			{
				int alt213=3;
				try { DebugEnterDecision(213, false);
				int LA213_1 = input.LA(1);

				if ((LA213_1==InstanceMember))
				{
					int LA213_2 = input.LA(2);

					if ((EvaluatePredicate(synpred281_Php_fragment)))
					{
						alt213 = 2;
					}


				}
				else if ((LA213_1==OpenCurlyBracket||LA213_1==OpenSquareBracket))
				{
					alt213 = 1;
				}


				} finally { DebugExitDecision(213); }
				switch ( alt213 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:468:6: indexer
					{
					DebugLocation(468, 6);
					PushFollow(Follow._indexer_in_synpred282_Php2695);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:468:16: memberAccess
					{
					DebugLocation(468, 16);
					PushFollow(Follow._memberAccess_in_synpred282_Php2699);
					memberAccess();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop213;
				}
			}

			loop213:
				;

			} finally { DebugExitSubRule(213); }

			DebugLocation(468, 31);
			PushFollow(Follow._memberAccess_in_synpred282_Php2703);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(468, 44);
			PushFollow(Follow._functionArguments_in_synpred282_Php2705);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred282_Php_fragment", 363);
			LeaveRule("synpred282_Php_fragment", 363);
			LeaveRule_synpred282_Php_fragment();
		}
	}
	// $ANTLR end synpred282_Php

	partial void EnterRule_synpred283_Php_fragment();
	partial void LeaveRule_synpred283_Php_fragment();

	// $ANTLR start synpred283_Php
	private void synpred283_Php_fragment()
	{
		EnterRule_synpred283_Php_fragment();
		EnterRule("synpred283_Php_fragment", 364);
		TraceIn("synpred283_Php_fragment", 364);
		try
		{
			// Php.g:469:5: ( indexer )
			DebugEnterAlt(1);
			// Php.g:469:5: indexer
			{
			DebugLocation(469, 5);
			PushFollow(Follow._indexer_in_synpred283_Php2713);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred283_Php_fragment", 364);
			LeaveRule("synpred283_Php_fragment", 364);
			LeaveRule_synpred283_Php_fragment();
		}
	}
	// $ANTLR end synpred283_Php

	partial void EnterRule_synpred284_Php_fragment();
	partial void LeaveRule_synpred284_Php_fragment();

	// $ANTLR start synpred284_Php
	private void synpred284_Php_fragment()
	{
		EnterRule_synpred284_Php_fragment();
		EnterRule("synpred284_Php_fragment", 365);
		TraceIn("synpred284_Php_fragment", 365);
		try
		{
			// Php.g:469:15: ( memberAccess )
			DebugEnterAlt(1);
			// Php.g:469:15: memberAccess
			{
			DebugLocation(469, 15);
			PushFollow(Follow._memberAccess_in_synpred284_Php2717);
			memberAccess();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred284_Php_fragment", 365);
			LeaveRule("synpred284_Php_fragment", 365);
			LeaveRule_synpred284_Php_fragment();
		}
	}
	// $ANTLR end synpred284_Php

	partial void EnterRule_synpred285_Php_fragment();
	partial void LeaveRule_synpred285_Php_fragment();

	// $ANTLR start synpred285_Php
	private void synpred285_Php_fragment()
	{
		EnterRule_synpred285_Php_fragment();
		EnterRule("synpred285_Php_fragment", 366);
		TraceIn("synpred285_Php_fragment", 366);
		try
		{
			// Php.g:466:4: ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ )
			DebugEnterAlt(1);
			// Php.g:466:4: ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+
			{
			DebugLocation(466, 4);
			// Php.g:466:4: ( variableOrStaticAccessor | constantOrStaticAccessor )
			int alt214=2;
			try { DebugEnterSubRule(214);
			try { DebugEnterDecision(214, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA214_2 = input.LA(2);

				if ((EvaluatePredicate(synpred278_Php_fragment)))
				{
					alt214 = 1;
				}
				else if ((true))
				{
					alt214 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 214, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA214_2 = input.LA(2);

				if ((EvaluatePredicate(synpred278_Php_fragment)))
				{
					alt214 = 1;
				}
				else if ((true))
				{
					alt214 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 214, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA214_2 = input.LA(2);

				if ((EvaluatePredicate(synpred278_Php_fragment)))
				{
					alt214 = 1;
				}
				else if ((true))
				{
					alt214 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 214, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Final:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA214_2 = input.LA(2);

				if ((EvaluatePredicate(synpred278_Php_fragment)))
				{
					alt214 = 1;
				}
				else if ((true))
				{
					alt214 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 214, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 214, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(214); }
			switch (alt214)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:466:5: variableOrStaticAccessor
				{
				DebugLocation(466, 5);
				PushFollow(Follow._variableOrStaticAccessor_in_synpred285_Php2677);
				variableOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:466:32: constantOrStaticAccessor
				{
				DebugLocation(466, 32);
				PushFollow(Follow._constantOrStaticAccessor_in_synpred285_Php2681);
				constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(214); }

			DebugLocation(467, 4);
			// Php.g:467:4: ( functionArguments )?
			int alt215=2;
			try { DebugEnterSubRule(215);
			try { DebugEnterDecision(215, false);
			int LA215_1 = input.LA(1);

			if ((LA215_1==OpenRoundBracket))
			{
				alt215 = 1;
			}
			} finally { DebugExitDecision(215); }
			switch (alt215)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:467:4: functionArguments
				{
				DebugLocation(467, 4);
				PushFollow(Follow._functionArguments_in_synpred285_Php2687);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(215); }

			DebugLocation(468, 4);
			// Php.g:468:4: ( ( indexer | memberAccess )* memberAccess functionArguments )*
			try { DebugEnterSubRule(217);
			while (true)
			{
				int alt217=2;
				try { DebugEnterDecision(217, false);
				switch (input.LA(1))
				{
				case OpenSquareBracket:
					{
					int LA217_2 = input.LA(2);

					if ((EvaluatePredicate(synpred282_Php_fragment)))
					{
						alt217 = 1;
					}


					}
					break;
				case OpenCurlyBracket:
					{
					int LA217_2 = input.LA(2);

					if ((EvaluatePredicate(synpred282_Php_fragment)))
					{
						alt217 = 1;
					}


					}
					break;
				case InstanceMember:
					{
					int LA217_2 = input.LA(2);

					if ((EvaluatePredicate(synpred282_Php_fragment)))
					{
						alt217 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(217); }
				switch ( alt217 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:468:5: ( indexer | memberAccess )* memberAccess functionArguments
					{
					DebugLocation(468, 5);
					// Php.g:468:5: ( indexer | memberAccess )*
					try { DebugEnterSubRule(216);
					while (true)
					{
						int alt216=3;
						try { DebugEnterDecision(216, false);
						int LA216_1 = input.LA(1);

						if ((LA216_1==InstanceMember))
						{
							int LA216_2 = input.LA(2);

							if ((EvaluatePredicate(synpred281_Php_fragment)))
							{
								alt216 = 2;
							}


						}
						else if ((LA216_1==OpenCurlyBracket||LA216_1==OpenSquareBracket))
						{
							alt216 = 1;
						}


						} finally { DebugExitDecision(216); }
						switch ( alt216 )
						{
						case 1:
							DebugEnterAlt(1);
							// Php.g:468:6: indexer
							{
							DebugLocation(468, 6);
							PushFollow(Follow._indexer_in_synpred285_Php2695);
							indexer();
							PopFollow();
							if (state.failed) return;

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// Php.g:468:16: memberAccess
							{
							DebugLocation(468, 16);
							PushFollow(Follow._memberAccess_in_synpred285_Php2699);
							memberAccess();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop216;
						}
					}

					loop216:
						;

					} finally { DebugExitSubRule(216); }

					DebugLocation(468, 31);
					PushFollow(Follow._memberAccess_in_synpred285_Php2703);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(468, 44);
					PushFollow(Follow._functionArguments_in_synpred285_Php2705);
					functionArguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop217;
				}
			}

			loop217:
				;

			} finally { DebugExitSubRule(217); }

			DebugLocation(469, 4);
			// Php.g:469:4: ( indexer | memberAccess )+
			int cnt218=0;
			try { DebugEnterSubRule(218);
			while (true)
			{
				int alt218=3;
				try { DebugEnterDecision(218, false);
				int LA218_1 = input.LA(1);

				if ((LA218_1==OpenCurlyBracket||LA218_1==OpenSquareBracket))
				{
					alt218 = 1;
				}
				else if ((LA218_1==InstanceMember))
				{
					alt218 = 2;
				}


				} finally { DebugExitDecision(218); }
				switch (alt218)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:469:5: indexer
					{
					DebugLocation(469, 5);
					PushFollow(Follow._indexer_in_synpred285_Php2713);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:469:15: memberAccess
					{
					DebugLocation(469, 15);
					PushFollow(Follow._memberAccess_in_synpred285_Php2717);
					memberAccess();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt218 >= 1)
						goto loop218;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee218 = new EarlyExitException( 218, input );
					DebugRecognitionException(eee218);
					throw eee218;
				}
				cnt218++;
			}
			loop218:
				;

			} finally { DebugExitSubRule(218); }


			}

		}
		finally
		{
			TraceOut("synpred285_Php_fragment", 366);
			LeaveRule("synpred285_Php_fragment", 366);
			LeaveRule_synpred285_Php_fragment();
		}
	}
	// $ANTLR end synpred285_Php

	partial void EnterRule_synpred287_Php_fragment();
	partial void LeaveRule_synpred287_Php_fragment();

	// $ANTLR start synpred287_Php
	private void synpred287_Php_fragment()
	{
		EnterRule_synpred287_Php_fragment();
		EnterRule("synpred287_Php_fragment", 368);
		TraceIn("synpred287_Php_fragment", 368);
		try
		{
			// Php.g:474:4: ( ( variable | qualifiedName ) '::' variable )
			DebugEnterAlt(1);
			// Php.g:474:4: ( variable | qualifiedName ) '::' variable
			{
			DebugLocation(474, 4);
			// Php.g:474:4: ( variable | qualifiedName )
			int alt219=2;
			try { DebugEnterSubRule(219);
			try { DebugEnterDecision(219, false);
			int LA219_1 = input.LA(1);

			if ((LA219_1==VariableName||LA219_1==130))
			{
				alt219 = 1;
			}
			else if ((LA219_1==Abstract||LA219_1==And||LA219_1==As||(LA219_1>=BoolType && LA219_1<=Class)||LA219_1==Clone||(LA219_1>=Const && LA219_1<=Continue)||(LA219_1>=Default && LA219_1<=Die)||LA219_1==Do||(LA219_1>=DoubleType && LA219_1<=Empty)||(LA219_1>=Eval && LA219_1<=Exit)||(LA219_1>=Extends && LA219_1<=Foreach)||(LA219_1>=Function && LA219_1<=HaltCompiler)||(LA219_1>=If && LA219_1<=IncludeOnce)||(LA219_1>=Instanceof && LA219_1<=IntType)||(LA219_1>=IntegerType && LA219_1<=List)||(LA219_1>=Namespace && LA219_1<=Null)||LA219_1==ObjectType||LA219_1==Or||(LA219_1>=Print && LA219_1<=Public)||(LA219_1>=RealType && LA219_1<=Return)||(LA219_1>=Static && LA219_1<=StringType)||(LA219_1>=Switch && LA219_1<=Throw)||(LA219_1>=True && LA219_1<=Try)||LA219_1==UnquotedString||(LA219_1>=Use && LA219_1<=Var)||LA219_1==While||LA219_1==Xor||LA219_1==131))
			{
				alt219 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 219, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(219); }
			switch (alt219)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:474:5: variable
				{
				DebugLocation(474, 5);
				PushFollow(Follow._variable_in_synpred287_Php2736);
				variable();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:474:16: qualifiedName
				{
				DebugLocation(474, 16);
				PushFollow(Follow._qualifiedName_in_synpred287_Php2740);
				qualifiedName();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(219); }

			DebugLocation(474, 31);
			Match(input,ClassMember,Follow._ClassMember_in_synpred287_Php2743); if (state.failed) return;
			DebugLocation(474, 36);
			PushFollow(Follow._variable_in_synpred287_Php2745);
			variable();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred287_Php_fragment", 368);
			LeaveRule("synpred287_Php_fragment", 368);
			LeaveRule_synpred287_Php_fragment();
		}
	}
	// $ANTLR end synpred287_Php
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA1 dfa1;
	private DFA2 dfa2;
	private DFA8 dfa8;
	private DFA24 dfa24;
	private DFA39 dfa39;
	private DFA41 dfa41;
	private DFA42 dfa42;
	private DFA44 dfa44;
	private DFA46 dfa46;
	private DFA47 dfa47;
	private DFA58 dfa58;
	private DFA60 dfa60;
	private DFA123 dfa123;
	private DFA146 dfa146;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa1 = new DFA1( this, SpecialStateTransition1 );
		dfa2 = new DFA2( this, SpecialStateTransition2 );
		dfa8 = new DFA8( this, SpecialStateTransition8 );
		dfa24 = new DFA24( this );
		dfa39 = new DFA39( this, SpecialStateTransition39 );
		dfa41 = new DFA41( this, SpecialStateTransition41 );
		dfa42 = new DFA42( this, SpecialStateTransition42 );
		dfa44 = new DFA44( this, SpecialStateTransition44 );
		dfa46 = new DFA46( this, SpecialStateTransition46 );
		dfa47 = new DFA47( this, SpecialStateTransition47 );
		dfa58 = new DFA58( this, SpecialStateTransition58 );
		dfa60 = new DFA60( this, SpecialStateTransition60 );
		dfa123 = new DFA123( this, SpecialStateTransition123 );
		dfa146 = new DFA146( this );
	}

	private class DFA1 : DFA
	{
		private const string DFA1_eotS =
			"\x2A\xFFFF";
		private const string DFA1_eofS =
			"\x2\x2\x28\xFFFF";
		private const string DFA1_minS =
			"\x2\x4\x1\xFFFF\x6\x4\x1\x5B\x1\x5\x1\x4\x1\xFFFF\x5\x4\x1\x0\x4\x5\x1"+
			"\x5B\x1\x5\x1\x0\x1\x4\x1\x0\x1\x4\x1\x0\x1\x4\x1\x0\x1\x4\x1\x0\x4\x5"+
			"\x4\x0";
		private const string DFA1_maxS =
			"\x2\x83\x1\xFFFF\x1\x83\x1\x81\x6\x83\x1\x81\x1\xFFFF\x5\x81\x1\x0\x6"+
			"\x83\x1\x0\x1\x81\x1\x0\x1\x81\x1\x0\x1\x81\x1\x0\x1\x81\x1\x0\x4\x83"+
			"\x4\x0";
		private const string DFA1_acceptS =
			"\x2\xFFFF\x1\x2\x9\xFFFF\x1\x1\x1D\xFFFF";
		private const string DFA1_specialS =
			"\x12\xFFFF\x1\x0\x6\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
			"\x1\x4\x1\xFFFF\x1\x5\x4\xFFFF\x1\x6\x1\x7\x1\x8\x1\x9}>";
		private static readonly string[] DFA1_transitionS =
			{
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\x1\x2\xFFFF\x6\x2\x1\xFFFF\x1"+
				"\x2\x6\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF"+
				"\x2\x2\x1\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1"+
				"\xFFFF\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4"+
				"\x2\x2\xFFFF\x5\x2\x1\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2",
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x2\xFFFF\x6\x2\x1\xFFFF\x1\x2\x6"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1\xFFFF"+
				"\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x3\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4"+
				"\x2\x2\xFFFF\x5\x2\x1\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2",
				"",
				"\x1\x9\x1\x2\x1\x6\x2\xFFFF\x1\x9\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x6\x9\x1\x2\x1\x9\x5\xFFFF\x1\x2\x2\x9\x2\xFFFF\x2\x9\x1\xFFFF\x1\x9"+
				"\x1\x2\x1\xFFFF\x5\x9\x1\xFFFF\x1\x2\x2\xFFFF\x2\x9\x1\xFFFF\x7\x9\x1"+
				"\x2\x4\x9\x1\x2\x3\xFFFF\x4\x9\x1\xFFFF\x1\x2\x1\x5\x1\x9\x1\xFFFF\x4"+
				"\x9\x3\x2\x1\xFFFF\x3\x9\x1\xFFFF\x1\x9\x1\xFFFF\x3\x2\x1\x8\x3\x2\x4"+
				"\x9\x1\x2\x1\xFFFF\x4\x9\x2\x2\x2\xFFFF\x2\x9\x1\xFFFF\x2\x9\x1\xFFFF"+
				"\x2\x9\x1\xFFFF\x1\x9\x2\xFFFF\x2\x9\x1\xFFFF\x1\x9\x1\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x4",
				"\x1\xA\x1\xFFFF\x1\xA\x2\xFFFF\x1\xA\x6\xFFFF\x6\xA\x1\xFFFF\x1\xA\x6"+
				"\xFFFF\x2\xA\x2\xFFFF\x2\xA\x1\xFFFF\x1\xA\x2\xFFFF\x5\xA\x4\xFFFF\x2"+
				"\xA\x1\xFFFF\x7\xA\x1\xFFFF\x4\xA\x4\xFFFF\x4\xA\x2\xFFFF\x2\xA\x1\xFFFF"+
				"\x4\xA\x4\xFFFF\x3\xA\x1\xFFFF\x1\xA\x4\xFFFF\x1\xA\x3\xFFFF\x4\xA\x2"+
				"\xFFFF\x4\xA\x4\xFFFF\x2\xA\x1\xFFFF\x2\xA\x1\xFFFF\x2\xA\x1\xFFFF\x1"+
				"\xA\x2\xFFFF\x2\xA\x1\xFFFF\x1\xA\x1\xFFFF\x1\xA",
				"\x3\x2\x1\xFFFF\x2\x2\x6\xFFFF\x6\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2\x2\x2"+
				"\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2\x2\x1\xFFFF\x7"+
				"\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1\xFFFF\x7\x2\x2\xFFFF"+
				"\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2\xFFFF\x5\x2\x1"+
				"\xFFFF\x5\x2\x1\xC\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x5\x2\x1\xFFFF\x2\x2\x1\xB",
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x6\x2\x1\xFFFF\x1\x2\x6"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1\xFFFF"+
				"\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2"+
				"\xFFFF\x5\x2\x1\xFFFF\x5\x2\x1\xC\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xD",
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x6\x2\x1\xFFFF\x1\x2\x6"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1\xFFFF"+
				"\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2"+
				"\xFFFF\x5\x2\x1\xFFFF\x5\x2\x1\xC\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xE",
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x6\x2\x1\xFFFF\x1\x2\x6"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x7\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1\xFFFF"+
				"\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2"+
				"\xFFFF\x5\x2\x1\xFFFF\x5\x2\x1\xC\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xF",
				"\x1\x2\x10\xFFFF\x1\xC\x16\xFFFF\x1\x10",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x12\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x11",
				"\x1\x13\x1\xFFFF\x1\x13\x2\xFFFF\x1\x13\x6\xFFFF\x6\x13\x1\xFFFF\x1"+
				"\x13\x6\xFFFF\x2\x13\x2\xFFFF\x2\x13\x1\xFFFF\x1\x13\x2\xFFFF\x5\x13"+
				"\x4\xFFFF\x2\x13\x1\xFFFF\x7\x13\x1\xFFFF\x4\x13\x4\xFFFF\x4\x13\x2"+
				"\xFFFF\x2\x13\x1\xFFFF\x4\x13\x4\xFFFF\x3\x13\x1\xFFFF\x1\x13\x4\xFFFF"+
				"\x1\x13\x3\xFFFF\x4\x13\x2\xFFFF\x4\x13\x4\xFFFF\x2\x13\x1\xFFFF\x2"+
				"\x13\x1\xFFFF\x2\x13\x1\xFFFF\x1\x13\x2\xFFFF\x2\x13\x1\xFFFF\x1\x13"+
				"\x1\xFFFF\x1\x13",
				"",
				"\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x6\xFFFF\x6\x14\x1\xFFFF\x1"+
				"\x14\x6\xFFFF\x2\x14\x2\xFFFF\x2\x14\x1\xFFFF\x1\x14\x2\xFFFF\x5\x14"+
				"\x4\xFFFF\x2\x14\x1\xFFFF\x7\x14\x1\xFFFF\x4\x14\x4\xFFFF\x4\x14\x2"+
				"\xFFFF\x2\x14\x1\xFFFF\x4\x14\x4\xFFFF\x3\x14\x1\xFFFF\x1\x14\x4\xFFFF"+
				"\x1\x14\x3\xFFFF\x4\x14\x2\xFFFF\x4\x14\x4\xFFFF\x2\x14\x1\xFFFF\x2"+
				"\x14\x1\xFFFF\x2\x14\x1\xFFFF\x1\x14\x2\xFFFF\x2\x14\x1\xFFFF\x1\x14"+
				"\x1\xFFFF\x1\x14",
				"\x1\x15\x1\xFFFF\x1\x15\x2\xFFFF\x1\x15\x6\xFFFF\x6\x15\x1\xFFFF\x1"+
				"\x15\x6\xFFFF\x2\x15\x2\xFFFF\x2\x15\x1\xFFFF\x1\x15\x2\xFFFF\x5\x15"+
				"\x4\xFFFF\x2\x15\x1\xFFFF\x7\x15\x1\xFFFF\x4\x15\x4\xFFFF\x4\x15\x2"+
				"\xFFFF\x2\x15\x1\xFFFF\x4\x15\x4\xFFFF\x3\x15\x1\xFFFF\x1\x15\x4\xFFFF"+
				"\x1\x15\x3\xFFFF\x4\x15\x2\xFFFF\x4\x15\x4\xFFFF\x2\x15\x1\xFFFF\x2"+
				"\x15\x1\xFFFF\x2\x15\x1\xFFFF\x1\x15\x2\xFFFF\x2\x15\x1\xFFFF\x1\x15"+
				"\x1\xFFFF\x1\x15",
				"\x1\x16\x1\xFFFF\x1\x16\x2\xFFFF\x1\x16\x6\xFFFF\x6\x16\x1\xFFFF\x1"+
				"\x16\x6\xFFFF\x2\x16\x2\xFFFF\x2\x16\x1\xFFFF\x1\x16\x2\xFFFF\x5\x16"+
				"\x4\xFFFF\x2\x16\x1\xFFFF\x7\x16\x1\xFFFF\x4\x16\x4\xFFFF\x4\x16\x2"+
				"\xFFFF\x2\x16\x1\xFFFF\x4\x16\x4\xFFFF\x3\x16\x1\xFFFF\x1\x16\x4\xFFFF"+
				"\x1\x16\x3\xFFFF\x4\x16\x2\xFFFF\x4\x16\x4\xFFFF\x2\x16\x1\xFFFF\x2"+
				"\x16\x1\xFFFF\x2\x16\x1\xFFFF\x1\x16\x2\xFFFF\x2\x16\x1\xFFFF\x1\x16"+
				"\x1\xFFFF\x1\x16",
				"\x1\x17\x1\xFFFF\x1\x17\x2\xFFFF\x1\x17\x6\xFFFF\x6\x17\x1\xFFFF\x1"+
				"\x17\x6\xFFFF\x2\x17\x2\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x5\x17"+
				"\x4\xFFFF\x2\x17\x1\xFFFF\x7\x17\x1\xFFFF\x4\x17\x4\xFFFF\x4\x17\x2"+
				"\xFFFF\x2\x17\x1\xFFFF\x4\x17\x4\xFFFF\x3\x17\x1\xFFFF\x1\x17\x4\xFFFF"+
				"\x1\x17\x3\xFFFF\x4\x17\x2\xFFFF\x4\x17\x4\xFFFF\x2\x17\x1\xFFFF\x2"+
				"\x17\x1\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x2\x17\x1\xFFFF\x1\x17"+
				"\x1\xFFFF\x1\x17",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x6\xFFFF\x6\x18\x1\xFFFF\x1"+
				"\x18\x6\xFFFF\x2\x18\x2\xFFFF\x2\x18\x1\xFFFF\x1\x18\x2\xFFFF\x5\x18"+
				"\x4\xFFFF\x2\x18\x1\xFFFF\x7\x18\x1\xFFFF\x4\x18\x4\xFFFF\x4\x18\x2"+
				"\xFFFF\x2\x18\x1\xFFFF\x4\x18\x4\xFFFF\x3\x18\x1\xFFFF\x1\x18\x4\xFFFF"+
				"\x1\x18\x3\xFFFF\x4\x18\x2\xFFFF\x4\x18\x4\xFFFF\x2\x18\x1\xFFFF\x2"+
				"\x18\x1\xFFFF\x2\x18\x1\xFFFF\x1\x18\x2\xFFFF\x2\x18\x1\xFFFF\x1\x18"+
				"\x1\xFFFF\x1\x18",
				"\x1\xFFFF",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x1"+
				"\x2\x7\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x19\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1A",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x1B\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1C",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x1D\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1E",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x1F\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x20",
				"\x1\x2\x10\xFFFF\x1\xC\x16\xFFFF\x1\x10",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x21\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x11",
				"\x1\xFFFF",
				"\x1\x22\x1\xFFFF\x1\x22\x2\xFFFF\x1\x22\x6\xFFFF\x6\x22\x1\xFFFF\x1"+
				"\x22\x6\xFFFF\x2\x22\x2\xFFFF\x2\x22\x1\xFFFF\x1\x22\x2\xFFFF\x5\x22"+
				"\x4\xFFFF\x2\x22\x1\xFFFF\x7\x22\x1\xFFFF\x4\x22\x4\xFFFF\x4\x22\x2"+
				"\xFFFF\x2\x22\x1\xFFFF\x4\x22\x4\xFFFF\x3\x22\x1\xFFFF\x1\x22\x4\xFFFF"+
				"\x1\x22\x3\xFFFF\x4\x22\x2\xFFFF\x4\x22\x4\xFFFF\x2\x22\x1\xFFFF\x2"+
				"\x22\x1\xFFFF\x2\x22\x1\xFFFF\x1\x22\x2\xFFFF\x2\x22\x1\xFFFF\x1\x22"+
				"\x1\xFFFF\x1\x22",
				"\x1\xFFFF",
				"\x1\x23\x1\xFFFF\x1\x23\x2\xFFFF\x1\x23\x6\xFFFF\x6\x23\x1\xFFFF\x1"+
				"\x23\x6\xFFFF\x2\x23\x2\xFFFF\x2\x23\x1\xFFFF\x1\x23\x2\xFFFF\x5\x23"+
				"\x4\xFFFF\x2\x23\x1\xFFFF\x7\x23\x1\xFFFF\x4\x23\x4\xFFFF\x4\x23\x2"+
				"\xFFFF\x2\x23\x1\xFFFF\x4\x23\x4\xFFFF\x3\x23\x1\xFFFF\x1\x23\x4\xFFFF"+
				"\x1\x23\x3\xFFFF\x4\x23\x2\xFFFF\x4\x23\x4\xFFFF\x2\x23\x1\xFFFF\x2"+
				"\x23\x1\xFFFF\x2\x23\x1\xFFFF\x1\x23\x2\xFFFF\x2\x23\x1\xFFFF\x1\x23"+
				"\x1\xFFFF\x1\x23",
				"\x1\xFFFF",
				"\x1\x24\x1\xFFFF\x1\x24\x2\xFFFF\x1\x24\x6\xFFFF\x6\x24\x1\xFFFF\x1"+
				"\x24\x6\xFFFF\x2\x24\x2\xFFFF\x2\x24\x1\xFFFF\x1\x24\x2\xFFFF\x5\x24"+
				"\x4\xFFFF\x2\x24\x1\xFFFF\x7\x24\x1\xFFFF\x4\x24\x4\xFFFF\x4\x24\x2"+
				"\xFFFF\x2\x24\x1\xFFFF\x4\x24\x4\xFFFF\x3\x24\x1\xFFFF\x1\x24\x4\xFFFF"+
				"\x1\x24\x3\xFFFF\x4\x24\x2\xFFFF\x4\x24\x4\xFFFF\x2\x24\x1\xFFFF\x2"+
				"\x24\x1\xFFFF\x2\x24\x1\xFFFF\x1\x24\x2\xFFFF\x2\x24\x1\xFFFF\x1\x24"+
				"\x1\xFFFF\x1\x24",
				"\x1\xFFFF",
				"\x1\x25\x1\xFFFF\x1\x25\x2\xFFFF\x1\x25\x6\xFFFF\x6\x25\x1\xFFFF\x1"+
				"\x25\x6\xFFFF\x2\x25\x2\xFFFF\x2\x25\x1\xFFFF\x1\x25\x2\xFFFF\x5\x25"+
				"\x4\xFFFF\x2\x25\x1\xFFFF\x7\x25\x1\xFFFF\x4\x25\x4\xFFFF\x4\x25\x2"+
				"\xFFFF\x2\x25\x1\xFFFF\x4\x25\x4\xFFFF\x3\x25\x1\xFFFF\x1\x25\x4\xFFFF"+
				"\x1\x25\x3\xFFFF\x4\x25\x2\xFFFF\x4\x25\x4\xFFFF\x2\x25\x1\xFFFF\x2"+
				"\x25\x1\xFFFF\x2\x25\x1\xFFFF\x1\x25\x2\xFFFF\x2\x25\x1\xFFFF\x1\x25"+
				"\x1\xFFFF\x1\x25",
				"\x1\xFFFF",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x1"+
				"\x2\x7\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x26\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1A",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x27\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1C",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x28\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1E",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x29\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x20",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA1_eot = DFA.UnpackEncodedString(DFA1_eotS);
		private static readonly short[] DFA1_eof = DFA.UnpackEncodedString(DFA1_eofS);
		private static readonly char[] DFA1_min = DFA.UnpackEncodedStringToUnsignedChars(DFA1_minS);
		private static readonly char[] DFA1_max = DFA.UnpackEncodedStringToUnsignedChars(DFA1_maxS);
		private static readonly short[] DFA1_accept = DFA.UnpackEncodedString(DFA1_acceptS);
		private static readonly short[] DFA1_special = DFA.UnpackEncodedString(DFA1_specialS);
		private static readonly short[][] DFA1_transition;

		static DFA1()
		{
			int numStates = DFA1_transitionS.Length;
			DFA1_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA1_transition[i] = DFA.UnpackEncodedString(DFA1_transitionS[i]);
			}
		}

		public DFA1( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 1;
			this.eot = DFA1_eot;
			this.eof = DFA1_eof;
			this.min = DFA1_min;
			this.max = DFA1_max;
			this.accept = DFA1_accept;
			this.special = DFA1_special;
			this.transition = DFA1_transition;
		}

		public override string Description { get { return "89:2: ( BodyString namespaceDefinition )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition1(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA1_1 = input.LA(1);
		int index1_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 1, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA2 : DFA
	{
		private const string DFA2_eotS =
			"\x2B\xFFFF";
		private const string DFA2_eofS =
			"\x1\x1\x2A\xFFFF";
		private const string DFA2_minS =
			"\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x5\x4\x1\xFFFF\x1\x5\x1\x4\x1\x5\x1\x4"+
			"\x1\x5\x1\x4\x1\x5\x1\x4\x1\x5\x1\x4\x1\x0\x5\x5\x1\x0\x1\x4\x1\x0\x1"+
			"\x4\x1\x0\x1\x4\x1\x0\x1\x4\x1\x0\x4\x5\x4\x0";
		private const string DFA2_maxS =
			"\x1\x83\x1\xFFFF\x1\x83\x1\xFFFF\x1\x81\x4\x83\x1\xFFFF\x1\x83\x1\x81"+
			"\x1\x83\x1\x81\x1\x83\x1\x81\x1\x83\x1\x81\x1\x83\x1\x81\x1\x0\x5\x83"+
			"\x1\x0\x1\x81\x1\x0\x1\x81\x1\x0\x1\x81\x1\x0\x1\x81\x1\x0\x4\x83\x4"+
			"\x0";
		private const string DFA2_acceptS =
			"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x2\x5\xFFFF\x1\x1\x21\xFFFF";
		private const string DFA2_specialS =
			"\x14\xFFFF\x1\x0\x5\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
			"\x1\x4\x1\xFFFF\x1\x5\x4\xFFFF\x1\x6\x1\x7\x1\x8\x1\x9}>";
		private static readonly string[] DFA2_transitionS =
			{
				"\x3\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x2\xFFFF\x6\x3\x1\xFFFF\x1\x3\x6"+
				"\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x6\x3\x4\xFFFF\x2"+
				"\x3\x1\xFFFF\x7\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF"+
				"\x7\x3\x2\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x1\xFFFF\x4\x3\x2"+
				"\xFFFF\x5\x3\x1\xFFFF\x6\x3\x1\xFFFF\x1\x3\x1\xFFFF\x8\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x1\x2\x3\x3\x1\xFFFF\x3\x3",
				"",
				"\x1\x9\x1\x3\x1\x6\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF"+
				"\x6\x9\x1\x3\x1\x9\x5\xFFFF\x1\x3\x2\x9\x2\xFFFF\x2\x9\x1\xFFFF\x1\x9"+
				"\x1\x3\x1\xFFFF\x5\x9\x1\xFFFF\x1\x3\x2\xFFFF\x2\x9\x1\xFFFF\x7\x9\x1"+
				"\x3\x4\x9\x1\x3\x3\xFFFF\x4\x9\x1\xFFFF\x1\x3\x1\x5\x1\x9\x1\xFFFF\x4"+
				"\x9\x3\x3\x1\xFFFF\x3\x9\x1\xFFFF\x1\x9\x1\xFFFF\x3\x3\x1\x8\x3\x3\x4"+
				"\x9\x1\x3\x1\xFFFF\x4\x9\x2\x3\x2\xFFFF\x2\x9\x1\xFFFF\x2\x9\x1\xFFFF"+
				"\x2\x9\x1\xFFFF\x1\x9\x2\xFFFF\x2\x9\x1\xFFFF\x1\x9\x1\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x4",
				"",
				"\x1\xA\x1\xFFFF\x1\xA\x2\xFFFF\x1\xA\x6\xFFFF\x6\xA\x1\xFFFF\x1\xA\x6"+
				"\xFFFF\x2\xA\x2\xFFFF\x2\xA\x1\xFFFF\x1\xA\x2\xFFFF\x5\xA\x4\xFFFF\x2"+
				"\xA\x1\xFFFF\x7\xA\x1\xFFFF\x4\xA\x4\xFFFF\x4\xA\x2\xFFFF\x2\xA\x1\xFFFF"+
				"\x4\xA\x4\xFFFF\x3\xA\x1\xFFFF\x1\xA\x4\xFFFF\x1\xA\x3\xFFFF\x4\xA\x2"+
				"\xFFFF\x4\xA\x4\xFFFF\x2\xA\x1\xFFFF\x2\xA\x1\xFFFF\x2\xA\x1\xFFFF\x1"+
				"\xA\x2\xFFFF\x2\xA\x1\xFFFF\x1\xA\x1\xFFFF\x1\xA",
				"\x3\x3\x1\xFFFF\x1\x3\x1\xC\x6\xFFFF\x6\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1"+
				"\x9\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x6\x3\x4\xFFFF"+
				"\x2\x3\x1\xFFFF\x7\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1"+
				"\xFFFF\x7\x3\x2\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x2\xFFFF\x5\x3\x1\xFFFF\x5\x3\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x8\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x1\xFFFF\x2\x3\x1\xB",
				"\x3\x3\x1\xFFFF\x1\x3\x1\xE\x2\xFFFF\x1\x3\x3\xFFFF\x6\x3\x1\xFFFF\x1"+
				"\x3\x4\xFFFF\x1\x9\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x6\x3\x4\xFFFF\x2\x3\x1\xFFFF\x7\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x5\x3\x1\xFFFF\x7\x3\x2\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x3\x3\x2\xFFFF\x5\x3\x1\xFFFF\x5\x3\x1\x9\x1\xFFFF\x1\x3"+
				"\x1\xFFFF\x8\x3\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x1\xFFFF\x2\x3\x1\xD",
				"\x3\x3\x1\xFFFF\x1\x3\x1\x10\x2\xFFFF\x1\x3\x3\xFFFF\x6\x3\x1\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x9\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1"+
				"\xFFFF\x6\x3\x4\xFFFF\x2\x3\x1\xFFFF\x7\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x5\x3\x1\xFFFF\x7\x3\x2\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x2\xFFFF\x5\x3\x1\xFFFF\x5\x3\x1\x9\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x8\x3\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x1\xFFFF\x2\x3\x1\xF",
				"\x3\x3\x1\xFFFF\x1\x3\x1\x12\x2\xFFFF\x1\x3\x3\xFFFF\x6\x3\x1\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x9\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1"+
				"\xFFFF\x6\x3\x4\xFFFF\x2\x3\x1\xFFFF\x7\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x5\x3\x1\xFFFF\x7\x3\x2\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x2\xFFFF\x5\x3\x1\xFFFF\x5\x3\x1\x9\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x8\x3\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x1\xFFFF\x2\x3\x1\x11",
				"",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x14\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x13",
				"\x1\x15\x1\xFFFF\x1\x15\x2\xFFFF\x1\x15\x6\xFFFF\x6\x15\x1\xFFFF\x1"+
				"\x15\x6\xFFFF\x2\x15\x2\xFFFF\x2\x15\x1\xFFFF\x1\x15\x2\xFFFF\x5\x15"+
				"\x4\xFFFF\x2\x15\x1\xFFFF\x7\x15\x1\xFFFF\x4\x15\x4\xFFFF\x4\x15\x2"+
				"\xFFFF\x2\x15\x1\xFFFF\x4\x15\x4\xFFFF\x3\x15\x1\xFFFF\x1\x15\x4\xFFFF"+
				"\x1\x15\x3\xFFFF\x4\x15\x2\xFFFF\x4\x15\x4\xFFFF\x2\x15\x1\xFFFF\x2"+
				"\x15\x1\xFFFF\x2\x15\x1\xFFFF\x1\x15\x2\xFFFF\x2\x15\x1\xFFFF\x1\x15"+
				"\x1\xFFFF\x1\x15",
				"\x2\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x6\xFFFF\x1\x3\x8"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF\x1\x3\x8\xFFFF\x1"+
				"\x3\x7\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5\xFFFF\x2\x3\xB\xFFFF"+
				"\x1\x9\x7\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x1\x16\x1\xFFFF\x1\x16\x2\xFFFF\x1\x16\x6\xFFFF\x6\x16\x1\xFFFF\x1"+
				"\x16\x6\xFFFF\x2\x16\x2\xFFFF\x2\x16\x1\xFFFF\x1\x16\x2\xFFFF\x5\x16"+
				"\x4\xFFFF\x2\x16\x1\xFFFF\x7\x16\x1\xFFFF\x4\x16\x4\xFFFF\x4\x16\x2"+
				"\xFFFF\x2\x16\x1\xFFFF\x4\x16\x4\xFFFF\x3\x16\x1\xFFFF\x1\x16\x4\xFFFF"+
				"\x1\x16\x3\xFFFF\x4\x16\x2\xFFFF\x4\x16\x4\xFFFF\x2\x16\x1\xFFFF\x2"+
				"\x16\x1\xFFFF\x2\x16\x1\xFFFF\x1\x16\x2\xFFFF\x2\x16\x1\xFFFF\x1\x16"+
				"\x1\xFFFF\x1\x16",
				"\x2\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x6\xFFFF\x1\x3\x8"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF\x1\x3\x8\xFFFF\x2"+
				"\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5\xFFFF\x2\x3\xB\xFFFF"+
				"\x1\x9\x7\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x1\x17\x1\xFFFF\x1\x17\x2\xFFFF\x1\x17\x6\xFFFF\x6\x17\x1\xFFFF\x1"+
				"\x17\x6\xFFFF\x2\x17\x2\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x5\x17"+
				"\x4\xFFFF\x2\x17\x1\xFFFF\x7\x17\x1\xFFFF\x4\x17\x4\xFFFF\x4\x17\x2"+
				"\xFFFF\x2\x17\x1\xFFFF\x4\x17\x4\xFFFF\x3\x17\x1\xFFFF\x1\x17\x4\xFFFF"+
				"\x1\x17\x3\xFFFF\x4\x17\x2\xFFFF\x4\x17\x4\xFFFF\x2\x17\x1\xFFFF\x2"+
				"\x17\x1\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x2\x17\x1\xFFFF\x1\x17"+
				"\x1\xFFFF\x1\x17",
				"\x2\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x6\xFFFF\x1\x3\x8"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF\x1\x3\x8\xFFFF\x2"+
				"\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5\xFFFF\x2\x3\xB\xFFFF"+
				"\x1\x9\x7\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x6\xFFFF\x6\x18\x1\xFFFF\x1"+
				"\x18\x6\xFFFF\x2\x18\x2\xFFFF\x2\x18\x1\xFFFF\x1\x18\x2\xFFFF\x5\x18"+
				"\x4\xFFFF\x2\x18\x1\xFFFF\x7\x18\x1\xFFFF\x4\x18\x4\xFFFF\x4\x18\x2"+
				"\xFFFF\x2\x18\x1\xFFFF\x4\x18\x4\xFFFF\x3\x18\x1\xFFFF\x1\x18\x4\xFFFF"+
				"\x1\x18\x3\xFFFF\x4\x18\x2\xFFFF\x4\x18\x4\xFFFF\x2\x18\x1\xFFFF\x2"+
				"\x18\x1\xFFFF\x2\x18\x1\xFFFF\x1\x18\x2\xFFFF\x2\x18\x1\xFFFF\x1\x18"+
				"\x1\xFFFF\x1\x18",
				"\x2\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x6\xFFFF\x1\x3\x8"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF\x1\x3\x8\xFFFF\x2"+
				"\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5\xFFFF\x2\x3\xB\xFFFF"+
				"\x1\x9\x7\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x1\x19\x1\xFFFF\x1\x19\x2\xFFFF\x1\x19\x6\xFFFF\x6\x19\x1\xFFFF\x1"+
				"\x19\x6\xFFFF\x2\x19\x2\xFFFF\x2\x19\x1\xFFFF\x1\x19\x2\xFFFF\x5\x19"+
				"\x4\xFFFF\x2\x19\x1\xFFFF\x7\x19\x1\xFFFF\x4\x19\x4\xFFFF\x4\x19\x2"+
				"\xFFFF\x2\x19\x1\xFFFF\x4\x19\x4\xFFFF\x3\x19\x1\xFFFF\x1\x19\x4\xFFFF"+
				"\x1\x19\x3\xFFFF\x4\x19\x2\xFFFF\x4\x19\x4\xFFFF\x2\x19\x1\xFFFF\x2"+
				"\x19\x1\xFFFF\x2\x19\x1\xFFFF\x1\x19\x2\xFFFF\x2\x19\x1\xFFFF\x1\x19"+
				"\x1\xFFFF\x1\x19",
				"\x1\xFFFF",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x1A\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1B",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x1C\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1D",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x1E\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1F",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x20\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x21",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x22\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x13",
				"\x1\xFFFF",
				"\x1\x23\x1\xFFFF\x1\x23\x2\xFFFF\x1\x23\x6\xFFFF\x6\x23\x1\xFFFF\x1"+
				"\x23\x6\xFFFF\x2\x23\x2\xFFFF\x2\x23\x1\xFFFF\x1\x23\x2\xFFFF\x5\x23"+
				"\x4\xFFFF\x2\x23\x1\xFFFF\x7\x23\x1\xFFFF\x4\x23\x4\xFFFF\x4\x23\x2"+
				"\xFFFF\x2\x23\x1\xFFFF\x4\x23\x4\xFFFF\x3\x23\x1\xFFFF\x1\x23\x4\xFFFF"+
				"\x1\x23\x3\xFFFF\x4\x23\x2\xFFFF\x4\x23\x4\xFFFF\x2\x23\x1\xFFFF\x2"+
				"\x23\x1\xFFFF\x2\x23\x1\xFFFF\x1\x23\x2\xFFFF\x2\x23\x1\xFFFF\x1\x23"+
				"\x1\xFFFF\x1\x23",
				"\x1\xFFFF",
				"\x1\x24\x1\xFFFF\x1\x24\x2\xFFFF\x1\x24\x6\xFFFF\x6\x24\x1\xFFFF\x1"+
				"\x24\x6\xFFFF\x2\x24\x2\xFFFF\x2\x24\x1\xFFFF\x1\x24\x2\xFFFF\x5\x24"+
				"\x4\xFFFF\x2\x24\x1\xFFFF\x7\x24\x1\xFFFF\x4\x24\x4\xFFFF\x4\x24\x2"+
				"\xFFFF\x2\x24\x1\xFFFF\x4\x24\x4\xFFFF\x3\x24\x1\xFFFF\x1\x24\x4\xFFFF"+
				"\x1\x24\x3\xFFFF\x4\x24\x2\xFFFF\x4\x24\x4\xFFFF\x2\x24\x1\xFFFF\x2"+
				"\x24\x1\xFFFF\x2\x24\x1\xFFFF\x1\x24\x2\xFFFF\x2\x24\x1\xFFFF\x1\x24"+
				"\x1\xFFFF\x1\x24",
				"\x1\xFFFF",
				"\x1\x25\x1\xFFFF\x1\x25\x2\xFFFF\x1\x25\x6\xFFFF\x6\x25\x1\xFFFF\x1"+
				"\x25\x6\xFFFF\x2\x25\x2\xFFFF\x2\x25\x1\xFFFF\x1\x25\x2\xFFFF\x5\x25"+
				"\x4\xFFFF\x2\x25\x1\xFFFF\x7\x25\x1\xFFFF\x4\x25\x4\xFFFF\x4\x25\x2"+
				"\xFFFF\x2\x25\x1\xFFFF\x4\x25\x4\xFFFF\x3\x25\x1\xFFFF\x1\x25\x4\xFFFF"+
				"\x1\x25\x3\xFFFF\x4\x25\x2\xFFFF\x4\x25\x4\xFFFF\x2\x25\x1\xFFFF\x2"+
				"\x25\x1\xFFFF\x2\x25\x1\xFFFF\x1\x25\x2\xFFFF\x2\x25\x1\xFFFF\x1\x25"+
				"\x1\xFFFF\x1\x25",
				"\x1\xFFFF",
				"\x1\x26\x1\xFFFF\x1\x26\x2\xFFFF\x1\x26\x6\xFFFF\x6\x26\x1\xFFFF\x1"+
				"\x26\x6\xFFFF\x2\x26\x2\xFFFF\x2\x26\x1\xFFFF\x1\x26\x2\xFFFF\x5\x26"+
				"\x4\xFFFF\x2\x26\x1\xFFFF\x7\x26\x1\xFFFF\x4\x26\x4\xFFFF\x4\x26\x2"+
				"\xFFFF\x2\x26\x1\xFFFF\x4\x26\x4\xFFFF\x3\x26\x1\xFFFF\x1\x26\x4\xFFFF"+
				"\x1\x26\x3\xFFFF\x4\x26\x2\xFFFF\x4\x26\x4\xFFFF\x2\x26\x1\xFFFF\x2"+
				"\x26\x1\xFFFF\x2\x26\x1\xFFFF\x1\x26\x2\xFFFF\x2\x26\x1\xFFFF\x1\x26"+
				"\x1\xFFFF\x1\x26",
				"\x1\xFFFF",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x27\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1B",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x28\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1D",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x29\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1F",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xC\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x2A\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x21",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA2_eot = DFA.UnpackEncodedString(DFA2_eotS);
		private static readonly short[] DFA2_eof = DFA.UnpackEncodedString(DFA2_eofS);
		private static readonly char[] DFA2_min = DFA.UnpackEncodedStringToUnsignedChars(DFA2_minS);
		private static readonly char[] DFA2_max = DFA.UnpackEncodedStringToUnsignedChars(DFA2_maxS);
		private static readonly short[] DFA2_accept = DFA.UnpackEncodedString(DFA2_acceptS);
		private static readonly short[] DFA2_special = DFA.UnpackEncodedString(DFA2_specialS);
		private static readonly short[][] DFA2_transition;

		static DFA2()
		{
			int numStates = DFA2_transitionS.Length;
			DFA2_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA2_transition[i] = DFA.UnpackEncodedString(DFA2_transitionS[i]);
			}
		}

		public DFA2( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 2;
			this.eot = DFA2_eot;
			this.eof = DFA2_eof;
			this.min = DFA2_min;
			this.max = DFA2_max;
			this.accept = DFA2_accept;
			this.special = DFA2_special;
			this.transition = DFA2_transition;
		}

		public override string Description { get { return "()* loopback of 90:2: ( useStatement | statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition2(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA2_1 = input.LA(1);
		int index2_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 2, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x3C\xFFFF";
		private const string DFA8_eofS =
			"\x3C\xFFFF";
		private const string DFA8_minS =
			"\x1\x4\x1B\x0\x1\xFFFF\xB\x0\x1\xFFFF\xB\x0\x8\xFFFF";
		private const string DFA8_maxS =
			"\x1\x83\x1B\x0\x1\xFFFF\xB\x0\x1\xFFFF\xB\x0\x8\xFFFF";
		private const string DFA8_acceptS =
			"\x1C\xFFFF\x1\x2\xB\xFFFF\x1\x4\xB\xFFFF\x1\xA\x1\x1\x1\x9\x1\x8\x1\x3"+
			"\x1\x5\x1\x6\x1\x7";
		private const string DFA8_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\xFFFF\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\xFFFF"+
			"\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F"+
			"\x1\x30\x8\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x1\x29\x1\xC\x1\x33\x1\xFFFF\x1\x19\x1\x33\x2\xFFFF\x1\x6\x1\x1C\x2"+
				"\xFFFF\x2\x33\x1\x21\x2\x33\x1\x2A\x1\xFFFF\x1\xA\x6\xFFFF\x1\x20\x1"+
				"\x22\x2\xFFFF\x1\x33\x1\xD\x1\xFFFF\x1\x30\x1\xFFFF\x1\x11\x1\x33\x1"+
				"\x1B\x2\x33\x1\xD\x4\xFFFF\x2\xD\x1\xFFFF\x1\x33\x1\xE\x1\x29\x2\x33"+
				"\x1\x2D\x1\x2E\x1\xFFFF\x1\xB\x1\x1E\x1\x23\x1\xD\x1\xFFFF\x1\x12\x2"+
				"\xFFFF\x1\x2C\x1\x33\x2\x18\x1\x9\x1\xFFFF\x2\x33\x1\x15\x1\x33\x1\x2B"+
				"\x1\xD\x1\x1\x2\xFFFF\x1\x7\x1\xFFFF\x1\x26\x1\x5\x1\x17\x1\xFFFF\x1"+
				"\x33\x1\xFFFF\x1\x28\x1\x8\x1\x1A\x1\x33\x2\xFFFF\x1\x14\x1\x1D\x3\x33"+
				"\x1\xFFFF\x1\x16\x1\x33\x2\x18\x1\x24\x1\x34\x1\xFFFF\x1\x10\x1\xFFFF"+
				"\x1\x1F\x1\x33\x1\x13\x1\x31\x1\x25\x1\x13\x1\xE\x1\x32\x1\xFFFF\x1"+
				"\x27\x1\xFFFF\x1\xF\x2\x33\x1\x2\x1\x2F\x1\xFFFF\x1\x33\x1\x3\x1\x4",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "108:1: statement : ({...}? => printExpr ';' | ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | namespaceBlock | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' | ';' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition8(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA8_1 = input.LA(1);
		int index8_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred11_Php_fragment))) {s = 56;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred13_Php_fragment))) {s = 57;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred14_Php_fragment))) {s = 58;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred14_Php_fragment))) {s = 58;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred15_Php_fragment))) {s = 59;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 8, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA24 : DFA
	{
		private const string DFA24_eotS =
			"\x8\xFFFF";
		private const string DFA24_eofS =
			"\x8\xFFFF";
		private const string DFA24_minS =
			"\x2\x4\x1\xFFFF\x2\x4\x3\xFFFF";
		private const string DFA24_maxS =
			"\x2\x7E\x1\xFFFF\x2\x7E\x3\xFFFF";
		private const string DFA24_acceptS =
			"\x2\xFFFF\x1\x1\x2\xFFFF\x1\x2\x1\x3\x1\x4";
		private const string DFA24_specialS =
			"\x8\xFFFF}>";
		private static readonly string[] DFA24_transitionS =
			{
				"\x1\x3\x19\xFFFF\x1\x5\x17\xFFFF\x1\x2\x5\xFFFF\x1\x2\x26\xFFFF\x3\x1"+
				"\xA\xFFFF\x1\x4\xC\xFFFF\x1\x6\x1\x7",
				"\x1\x3\x31\xFFFF\x1\x2\x5\xFFFF\x1\x2\x26\xFFFF\x3\x1\xA\xFFFF\x1\x4"+
				"\xD\xFFFF\x1\x7",
				"",
				"\x1\x3\x31\xFFFF\x1\x2\x5\xFFFF\x1\x2\x26\xFFFF\x3\x1\xA\xFFFF\x1\x4"+
				"\xD\xFFFF\x1\x7",
				"\x1\x3\x31\xFFFF\x1\x2\x5\xFFFF\x1\x2\x26\xFFFF\x3\x1\xA\xFFFF\x1\x4"+
				"\xD\xFFFF\x1\x7",
				"",
				"",
				""
			};

		private static readonly short[] DFA24_eot = DFA.UnpackEncodedString(DFA24_eotS);
		private static readonly short[] DFA24_eof = DFA.UnpackEncodedString(DFA24_eofS);
		private static readonly char[] DFA24_min = DFA.UnpackEncodedStringToUnsignedChars(DFA24_minS);
		private static readonly char[] DFA24_max = DFA.UnpackEncodedStringToUnsignedChars(DFA24_maxS);
		private static readonly short[] DFA24_accept = DFA.UnpackEncodedString(DFA24_acceptS);
		private static readonly short[] DFA24_special = DFA.UnpackEncodedString(DFA24_specialS);
		private static readonly short[][] DFA24_transition;

		static DFA24()
		{
			int numStates = DFA24_transitionS.Length;
			DFA24_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA24_transition[i] = DFA.UnpackEncodedString(DFA24_transitionS[i]);
			}
		}

		public DFA24( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 24;
			this.eot = DFA24_eot;
			this.eof = DFA24_eof;
			this.min = DFA24_min;
			this.max = DFA24_max;
			this.accept = DFA24_accept;
			this.special = DFA24_special;
			this.transition = DFA24_transition;
		}

		public override string Description { get { return "158:1: classMember : ( ( functionModifier )* Function ( '&' )? qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA39 : DFA
	{
		private const string DFA39_eotS =
			"\x3D\xFFFF";
		private const string DFA39_eofS =
			"\x1\x3\x3C\xFFFF";
		private const string DFA39_minS =
			"\x1\x4\x2\x0\x1\xFFFF\x35\x0\x1\xFFFF\x2\x0\x1\xFFFF";
		private const string DFA39_maxS =
			"\x1\x83\x2\x0\x1\xFFFF\x35\x0\x1\xFFFF\x2\x0\x1\xFFFF";
		private const string DFA39_acceptS =
			"\x3\xFFFF\x1\x2\x38\xFFFF\x1\x1";
		private const string DFA39_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1"+
			"\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1"+
			"\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\xFFFF\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA39_transitionS =
			{
				"\x1\x2D\x1\x10\x1\x3B\x1\xFFFF\x1\x1D\x1\x3B\x2\xFFFF\x1\xA\x1\x20\x2"+
				"\xFFFF\x2\x3B\x1\x25\x1\x3A\x1\x3B\x1\x2E\x1\xFFFF\x1\xE\x1\x3\x5\xFFFF"+
				"\x1\x24\x1\x26\x2\xFFFF\x1\x37\x1\x11\x1\xFFFF\x1\x34\x1\xFFFF\x1\x15"+
				"\x1\x3B\x1\x1F\x1\x2\x1\x1\x1\x11\x4\xFFFF\x2\x11\x1\xFFFF\x1\x3B\x1"+
				"\x12\x1\x2D\x2\x3B\x1\x31\x1\x32\x1\xFFFF\x1\xF\x1\x22\x1\x27\x1\x11"+
				"\x1\xFFFF\x1\x16\x2\xFFFF\x1\x30\x1\x3B\x2\x1C\x1\xD\x1\xFFFF\x2\x3B"+
				"\x1\x19\x1\x3B\x1\x2F\x1\x11\x1\x5\x2\xFFFF\x1\xB\x1\xFFFF\x1\x2A\x1"+
				"\x9\x1\x1B\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2C\x1\xC\x1\x1E\x1\x3B\x2\xFFFF"+
				"\x1\x18\x1\x21\x3\x3B\x1\xFFFF\x1\x1A\x1\x3B\x2\x1C\x1\x28\x1\x38\x1"+
				"\xFFFF\x1\x14\x1\xFFFF\x1\x23\x1\x3B\x1\x17\x1\x35\x1\x29\x1\x17\x1"+
				"\x12\x1\x36\x1\xFFFF\x1\x2B\x1\xFFFF\x1\x13\x1\x4\x1\x3B\x1\x6\x1\x33"+
				"\x1\xFFFF\x1\x3B\x1\x7\x1\x8",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
		private static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
		private static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
		private static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
		private static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
		private static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
		private static readonly short[][] DFA39_transition;

		static DFA39()
		{
			int numStates = DFA39_transitionS.Length;
			DFA39_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA39_transition[i] = DFA.UnpackEncodedString(DFA39_transitionS[i]);
			}
		}

		public DFA39( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 39;
			this.eot = DFA39_eot;
			this.eof = DFA39_eof;
			this.min = DFA39_min;
			this.max = DFA39_max;
			this.accept = DFA39_accept;
			this.special = DFA39_special;
			this.transition = DFA39_transition;
		}

		public override string Description { get { return "()* loopback of 193:30: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition39(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA39_1 = input.LA(1);
		int index39_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index39_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 39, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA41 : DFA
	{
		private const string DFA41_eotS =
			"\x3D\xFFFF";
		private const string DFA41_eofS =
			"\x1\x1\x3C\xFFFF";
		private const string DFA41_minS =
			"\x1\x4\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA41_maxS =
			"\x1\x83\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA41_acceptS =
			"\x1\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA41_specialS =
			"\x2\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\xFFFF\x1\x35\x1\x36\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA41_transitionS =
			{
				"\x1\x2B\x1\xE\x1\x3B\x1\xFFFF\x1\x1B\x1\x3B\x2\xFFFF\x1\x8\x1\x1E\x2"+
				"\xFFFF\x2\x3B\x1\x23\x1\x3A\x1\x3B\x1\x2C\x1\xFFFF\x1\xC\x1\x1\x5\xFFFF"+
				"\x1\x22\x1\x24\x2\xFFFF\x1\x39\x1\xF\x1\xFFFF\x1\x32\x1\xFFFF\x1\x13"+
				"\x1\x3B\x1\x1D\x1\x38\x1\x35\x1\xF\x4\xFFFF\x2\xF\x1\xFFFF\x1\x3B\x1"+
				"\x10\x1\x2B\x2\x3B\x1\x2F\x1\x30\x1\xFFFF\x1\xD\x1\x20\x1\x25\x1\xF"+
				"\x1\xFFFF\x1\x14\x2\xFFFF\x1\x2E\x1\x3B\x2\x1A\x1\xB\x1\xFFFF\x2\x3B"+
				"\x1\x17\x1\x3B\x1\x2D\x1\xF\x1\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x28\x1"+
				"\x7\x1\x19\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2A\x1\xA\x1\x1C\x1\x3B\x2\xFFFF"+
				"\x1\x16\x1\x1F\x3\x3B\x1\xFFFF\x1\x18\x1\x3B\x2\x1A\x1\x26\x1\x36\x1"+
				"\xFFFF\x1\x12\x1\xFFFF\x1\x21\x1\x3B\x1\x15\x1\x33\x1\x27\x1\x15\x1"+
				"\x10\x1\x34\x1\xFFFF\x1\x29\x1\xFFFF\x1\x11\x1\x2\x1\x3B\x1\x4\x1\x31"+
				"\x1\xFFFF\x1\x3B\x1\x5\x1\x6",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA41_eot = DFA.UnpackEncodedString(DFA41_eotS);
		private static readonly short[] DFA41_eof = DFA.UnpackEncodedString(DFA41_eofS);
		private static readonly char[] DFA41_min = DFA.UnpackEncodedStringToUnsignedChars(DFA41_minS);
		private static readonly char[] DFA41_max = DFA.UnpackEncodedStringToUnsignedChars(DFA41_maxS);
		private static readonly short[] DFA41_accept = DFA.UnpackEncodedString(DFA41_acceptS);
		private static readonly short[] DFA41_special = DFA.UnpackEncodedString(DFA41_specialS);
		private static readonly short[][] DFA41_transition;

		static DFA41()
		{
			int numStates = DFA41_transitionS.Length;
			DFA41_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA41_transition[i] = DFA.UnpackEncodedString(DFA41_transitionS[i]);
			}
		}

		public DFA41( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 41;
			this.eot = DFA41_eot;
			this.eof = DFA41_eof;
			this.min = DFA41_min;
			this.max = DFA41_max;
			this.accept = DFA41_accept;
			this.special = DFA41_special;
			this.transition = DFA41_transition;
		}

		public override string Description { get { return "()* loopback of 194:51: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition41(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA41_1 = input.LA(1);
		int index41_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred61_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 41, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA42 : DFA
	{
		private const string DFA42_eotS =
			"\x3D\xFFFF";
		private const string DFA42_eofS =
			"\x1\x1\x3C\xFFFF";
		private const string DFA42_minS =
			"\x1\x4\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA42_maxS =
			"\x1\x83\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA42_acceptS =
			"\x1\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA42_specialS =
			"\x2\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\xFFFF\x1\x35\x1\x36\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA42_transitionS =
			{
				"\x1\x2B\x1\xE\x1\x3B\x1\xFFFF\x1\x1B\x1\x3B\x2\xFFFF\x1\x8\x1\x1E\x2"+
				"\xFFFF\x2\x3B\x1\x23\x1\x3A\x1\x3B\x1\x2C\x1\xFFFF\x1\xC\x1\x1\x5\xFFFF"+
				"\x1\x22\x1\x24\x2\xFFFF\x1\x39\x1\xF\x1\xFFFF\x1\x32\x1\xFFFF\x1\x13"+
				"\x1\x3B\x1\x1D\x1\x38\x1\x35\x1\xF\x4\xFFFF\x2\xF\x1\xFFFF\x1\x3B\x1"+
				"\x10\x1\x2B\x2\x3B\x1\x2F\x1\x30\x1\xFFFF\x1\xD\x1\x20\x1\x25\x1\xF"+
				"\x1\xFFFF\x1\x14\x2\xFFFF\x1\x2E\x1\x3B\x2\x1A\x1\xB\x1\xFFFF\x2\x3B"+
				"\x1\x17\x1\x3B\x1\x2D\x1\xF\x1\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x28\x1"+
				"\x7\x1\x19\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2A\x1\xA\x1\x1C\x1\x3B\x2\xFFFF"+
				"\x1\x16\x1\x1F\x3\x3B\x1\xFFFF\x1\x18\x1\x3B\x2\x1A\x1\x26\x1\x36\x1"+
				"\xFFFF\x1\x12\x1\xFFFF\x1\x21\x1\x3B\x1\x15\x1\x33\x1\x27\x1\x15\x1"+
				"\x10\x1\x34\x1\xFFFF\x1\x29\x1\xFFFF\x1\x11\x1\x2\x1\x3B\x1\x4\x1\x31"+
				"\x1\xFFFF\x1\x3B\x1\x5\x1\x6",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA42_eot = DFA.UnpackEncodedString(DFA42_eotS);
		private static readonly short[] DFA42_eof = DFA.UnpackEncodedString(DFA42_eofS);
		private static readonly char[] DFA42_min = DFA.UnpackEncodedStringToUnsignedChars(DFA42_minS);
		private static readonly char[] DFA42_max = DFA.UnpackEncodedStringToUnsignedChars(DFA42_maxS);
		private static readonly short[] DFA42_accept = DFA.UnpackEncodedString(DFA42_acceptS);
		private static readonly short[] DFA42_special = DFA.UnpackEncodedString(DFA42_specialS);
		private static readonly short[][] DFA42_transition;

		static DFA42()
		{
			int numStates = DFA42_transitionS.Length;
			DFA42_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA42_transition[i] = DFA.UnpackEncodedString(DFA42_transitionS[i]);
			}
		}

		public DFA42( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 42;
			this.eot = DFA42_eot;
			this.eof = DFA42_eof;
			this.min = DFA42_min;
			this.max = DFA42_max;
			this.accept = DFA42_accept;
			this.special = DFA42_special;
			this.transition = DFA42_transition;
		}

		public override string Description { get { return "()* loopback of 195:49: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition42(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA42_1 = input.LA(1);
		int index42_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred63_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index42_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 42, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x3D\xFFFF";
		private const string DFA44_eofS =
			"\x1\x1\x3C\xFFFF";
		private const string DFA44_minS =
			"\x1\x4\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA44_maxS =
			"\x1\x83\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA44_acceptS =
			"\x1\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA44_specialS =
			"\x2\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\xFFFF\x1\x35\x1\x36\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x2B\x1\xE\x1\x3B\x1\xFFFF\x1\x1B\x1\x3B\x2\xFFFF\x1\x8\x1\x1E\x2"+
				"\xFFFF\x2\x3B\x1\x23\x1\x3A\x1\x3B\x1\x2C\x1\xFFFF\x1\xC\x1\x1\x5\xFFFF"+
				"\x1\x22\x1\x24\x2\xFFFF\x1\x39\x1\xF\x1\xFFFF\x1\x32\x1\xFFFF\x1\x13"+
				"\x1\x3B\x1\x1D\x1\x38\x1\x35\x1\xF\x4\xFFFF\x2\xF\x1\xFFFF\x1\x3B\x1"+
				"\x10\x1\x2B\x2\x3B\x1\x2F\x1\x30\x1\xFFFF\x1\xD\x1\x20\x1\x25\x1\xF"+
				"\x1\xFFFF\x1\x14\x2\xFFFF\x1\x2E\x1\x3B\x2\x1A\x1\xB\x1\xFFFF\x2\x3B"+
				"\x1\x17\x1\x3B\x1\x2D\x1\xF\x1\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x28\x1"+
				"\x7\x1\x19\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2A\x1\xA\x1\x1C\x1\x3B\x2\xFFFF"+
				"\x1\x16\x1\x1F\x3\x3B\x1\xFFFF\x1\x18\x1\x3B\x2\x1A\x1\x26\x1\x36\x1"+
				"\xFFFF\x1\x12\x1\xFFFF\x1\x21\x1\x3B\x1\x15\x1\x33\x1\x27\x1\x15\x1"+
				"\x10\x1\x34\x1\xFFFF\x1\x29\x1\xFFFF\x1\x11\x1\x2\x1\x3B\x1\x4\x1\x31"+
				"\x1\xFFFF\x1\x3B\x1\x5\x1\x6",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "()* loopback of 196:34: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition44(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA44_1 = input.LA(1);
		int index44_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index44_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 44, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA46 : DFA
	{
		private const string DFA46_eotS =
			"\x3F\xFFFF";
		private const string DFA46_eofS =
			"\x1\x1\x3E\xFFFF";
		private const string DFA46_minS =
			"\x1\x4\x3B\xFFFF\x1\x0\x2\xFFFF";
		private const string DFA46_maxS =
			"\x1\x83\x3B\xFFFF\x1\x0\x2\xFFFF";
		private const string DFA46_acceptS =
			"\x1\xFFFF\x1\x2\x3C\xFFFF\x1\x1";
		private const string DFA46_specialS =
			"\x3C\xFFFF\x1\x0\x2\xFFFF}>";
		private static readonly string[] DFA46_transitionS =
			{
				"\x3\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x2\xFFFF\x4\x1\x1\x3C\x1\x1\x1"+
				"\xFFFF\x2\x1\x5\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x6"+
				"\x1\x4\xFFFF\x2\x1\x1\xFFFF\x7\x1\x1\xFFFF\x4\x1\x1\xFFFF\x1\x1\x2\xFFFF"+
				"\x5\x1\x1\xFFFF\x7\x1\x2\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1"+
				"\xFFFF\x4\x1\x2\xFFFF\x5\x1\x1\xFFFF\x6\x1\x1\xFFFF\x1\x1\x1\xFFFF\x8"+
				"\x1\x1\xFFFF\x1\x1\x1\xFFFF\x5\x1\x1\xFFFF\x3\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				""
			};

		private static readonly short[] DFA46_eot = DFA.UnpackEncodedString(DFA46_eotS);
		private static readonly short[] DFA46_eof = DFA.UnpackEncodedString(DFA46_eofS);
		private static readonly char[] DFA46_min = DFA.UnpackEncodedStringToUnsignedChars(DFA46_minS);
		private static readonly char[] DFA46_max = DFA.UnpackEncodedStringToUnsignedChars(DFA46_maxS);
		private static readonly short[] DFA46_accept = DFA.UnpackEncodedString(DFA46_acceptS);
		private static readonly short[] DFA46_special = DFA.UnpackEncodedString(DFA46_specialS);
		private static readonly short[][] DFA46_transition;

		static DFA46()
		{
			int numStates = DFA46_transitionS.Length;
			DFA46_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA46_transition[i] = DFA.UnpackEncodedString(DFA46_transitionS[i]);
			}
		}

		public DFA46( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 46;
			this.eot = DFA46_eot;
			this.eof = DFA46_eof;
			this.min = DFA46_min;
			this.max = DFA46_max;
			this.accept = DFA46_accept;
			this.special = DFA46_special;
			this.transition = DFA46_transition;
		}

		public override string Description { get { return "()+ loopback of 205:4: ( Catch '(' qualifiedName variable ')' bracketedBlock )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition46(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA46_1 = input.LA(1);
		int index46_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred71_Php_fragment))) {s = 62;}

				else if ((true)) {s = 1;}

				input.Seek(index46_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 46, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA47 : DFA
	{
		private const string DFA47_eotS =
			"\x3E\xFFFF";
		private const string DFA47_eofS =
			"\x1\x2\x3D\xFFFF";
		private const string DFA47_minS =
			"\x1\x4\x1\x0\x3C\xFFFF";
		private const string DFA47_maxS =
			"\x1\x83\x1\x0\x3C\xFFFF";
		private const string DFA47_acceptS =
			"\x2\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA47_specialS =
			"\x1\xFFFF\x1\x0\x3C\xFFFF}>";
		private static readonly string[] DFA47_transitionS =
			{
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x2\xFFFF\x6\x2\x1\xFFFF\x2\x2\x5"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x3\x2\x1\x1\x3\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x5\x2\x1\xFFFF\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x4\x2\x2\xFFFF\x5\x2\x1\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA47_eot = DFA.UnpackEncodedString(DFA47_eotS);
		private static readonly short[] DFA47_eof = DFA.UnpackEncodedString(DFA47_eofS);
		private static readonly char[] DFA47_min = DFA.UnpackEncodedStringToUnsignedChars(DFA47_minS);
		private static readonly char[] DFA47_max = DFA.UnpackEncodedStringToUnsignedChars(DFA47_maxS);
		private static readonly short[] DFA47_accept = DFA.UnpackEncodedString(DFA47_acceptS);
		private static readonly short[] DFA47_special = DFA.UnpackEncodedString(DFA47_specialS);
		private static readonly short[][] DFA47_transition;

		static DFA47()
		{
			int numStates = DFA47_transitionS.Length;
			DFA47_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA47_transition[i] = DFA.UnpackEncodedString(DFA47_transitionS[i]);
			}
		}

		public DFA47( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 47;
			this.eot = DFA47_eot;
			this.eof = DFA47_eof;
			this.min = DFA47_min;
			this.max = DFA47_max;
			this.accept = DFA47_accept;
			this.special = DFA47_special;
			this.transition = DFA47_transition;
		}

		public override string Description { get { return "206:4: ( Finally bracketedBlock )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition47(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA47_1 = input.LA(1);
		int index47_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred72_Php_fragment))) {s = 61;}

				else if ((true)) {s = 2;}

				input.Seek(index47_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 47, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA58 : DFA
	{
		private const string DFA58_eotS =
			"\x3D\xFFFF";
		private const string DFA58_eofS =
			"\x1\x3\x3C\xFFFF";
		private const string DFA58_minS =
			"\x1\x4\x2\x0\x1\xFFFF\x35\x0\x1\xFFFF\x2\x0\x1\xFFFF";
		private const string DFA58_maxS =
			"\x1\x83\x2\x0\x1\xFFFF\x35\x0\x1\xFFFF\x2\x0\x1\xFFFF";
		private const string DFA58_acceptS =
			"\x3\xFFFF\x1\x2\x38\xFFFF\x1\x1";
		private const string DFA58_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1"+
			"\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1"+
			"\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\xFFFF\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA58_transitionS =
			{
				"\x1\x2D\x1\x10\x1\x3B\x1\xFFFF\x1\x1D\x1\x3B\x2\xFFFF\x1\xA\x1\x20\x2"+
				"\xFFFF\x2\x3B\x1\x25\x1\x3A\x1\x3B\x1\x2E\x1\xFFFF\x1\xE\x1\x3\x5\xFFFF"+
				"\x1\x24\x1\x26\x2\xFFFF\x1\x37\x1\x11\x1\xFFFF\x1\x34\x1\xFFFF\x1\x15"+
				"\x1\x3B\x1\x1F\x1\x2\x1\x1\x1\x11\x4\xFFFF\x2\x11\x1\xFFFF\x1\x3B\x1"+
				"\x12\x1\x2D\x2\x3B\x1\x31\x1\x32\x1\xFFFF\x1\xF\x1\x22\x1\x27\x1\x11"+
				"\x1\xFFFF\x1\x16\x2\xFFFF\x1\x30\x1\x3B\x2\x1C\x1\xD\x1\xFFFF\x2\x3B"+
				"\x1\x19\x1\x3B\x1\x2F\x1\x11\x1\x5\x2\xFFFF\x1\xB\x1\xFFFF\x1\x2A\x1"+
				"\x9\x1\x1B\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2C\x1\xC\x1\x1E\x1\x3B\x2\xFFFF"+
				"\x1\x18\x1\x21\x3\x3B\x1\xFFFF\x1\x1A\x1\x3B\x2\x1C\x1\x28\x1\x38\x1"+
				"\xFFFF\x1\x14\x1\xFFFF\x1\x23\x1\x3B\x1\x17\x1\x35\x1\x29\x1\x17\x1"+
				"\x12\x1\x36\x1\xFFFF\x1\x2B\x1\xFFFF\x1\x13\x1\x4\x1\x3B\x1\x6\x1\x33"+
				"\x1\xFFFF\x1\x3B\x1\x7\x1\x8",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA58_eot = DFA.UnpackEncodedString(DFA58_eotS);
		private static readonly short[] DFA58_eof = DFA.UnpackEncodedString(DFA58_eofS);
		private static readonly char[] DFA58_min = DFA.UnpackEncodedStringToUnsignedChars(DFA58_minS);
		private static readonly char[] DFA58_max = DFA.UnpackEncodedStringToUnsignedChars(DFA58_maxS);
		private static readonly short[] DFA58_accept = DFA.UnpackEncodedString(DFA58_acceptS);
		private static readonly short[] DFA58_special = DFA.UnpackEncodedString(DFA58_specialS);
		private static readonly short[][] DFA58_transition;

		static DFA58()
		{
			int numStates = DFA58_transitionS.Length;
			DFA58_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA58_transition[i] = DFA.UnpackEncodedString(DFA58_transitionS[i]);
			}
		}

		public DFA58( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 58;
			this.eot = DFA58_eot;
			this.eof = DFA58_eof;
			this.min = DFA58_min;
			this.max = DFA58_max;
			this.accept = DFA58_accept;
			this.special = DFA58_special;
			this.transition = DFA58_transition;
		}

		public override string Description { get { return "()* loopback of 230:34: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition58(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA58_1 = input.LA(1);
		int index58_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred93_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index58_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 58, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA60 : DFA
	{
		private const string DFA60_eotS =
			"\x3D\xFFFF";
		private const string DFA60_eofS =
			"\x1\x1\x3C\xFFFF";
		private const string DFA60_minS =
			"\x1\x4\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA60_maxS =
			"\x1\x83\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA60_acceptS =
			"\x1\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA60_specialS =
			"\x2\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\xFFFF\x1\x35\x1\x36\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA60_transitionS =
			{
				"\x1\x2B\x1\xE\x1\x3B\x1\xFFFF\x1\x1B\x1\x3B\x2\xFFFF\x1\x8\x1\x1E\x2"+
				"\xFFFF\x2\x3B\x1\x23\x1\x3A\x1\x3B\x1\x2C\x1\xFFFF\x1\xC\x1\x1\x5\xFFFF"+
				"\x1\x22\x1\x24\x2\xFFFF\x1\x39\x1\xF\x1\xFFFF\x1\x32\x1\xFFFF\x1\x13"+
				"\x1\x3B\x1\x1D\x1\x38\x1\x35\x1\xF\x4\xFFFF\x2\xF\x1\xFFFF\x1\x3B\x1"+
				"\x10\x1\x2B\x2\x3B\x1\x2F\x1\x30\x1\xFFFF\x1\xD\x1\x20\x1\x25\x1\xF"+
				"\x1\xFFFF\x1\x14\x2\xFFFF\x1\x2E\x1\x3B\x2\x1A\x1\xB\x1\xFFFF\x2\x3B"+
				"\x1\x17\x1\x3B\x1\x2D\x1\xF\x1\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x28\x1"+
				"\x7\x1\x19\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2A\x1\xA\x1\x1C\x1\x3B\x2\xFFFF"+
				"\x1\x16\x1\x1F\x3\x3B\x1\xFFFF\x1\x18\x1\x3B\x2\x1A\x1\x26\x1\x36\x1"+
				"\xFFFF\x1\x12\x1\xFFFF\x1\x21\x1\x3B\x1\x15\x1\x33\x1\x27\x1\x15\x1"+
				"\x10\x1\x34\x1\xFFFF\x1\x29\x1\xFFFF\x1\x11\x1\x2\x1\x3B\x1\x4\x1\x31"+
				"\x1\xFFFF\x1\x3B\x1\x5\x1\x6",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA60_eot = DFA.UnpackEncodedString(DFA60_eotS);
		private static readonly short[] DFA60_eof = DFA.UnpackEncodedString(DFA60_eofS);
		private static readonly char[] DFA60_min = DFA.UnpackEncodedStringToUnsignedChars(DFA60_minS);
		private static readonly char[] DFA60_max = DFA.UnpackEncodedStringToUnsignedChars(DFA60_maxS);
		private static readonly short[] DFA60_accept = DFA.UnpackEncodedString(DFA60_acceptS);
		private static readonly short[] DFA60_special = DFA.UnpackEncodedString(DFA60_specialS);
		private static readonly short[][] DFA60_transition;

		static DFA60()
		{
			int numStates = DFA60_transitionS.Length;
			DFA60_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA60_transition[i] = DFA.UnpackEncodedString(DFA60_transitionS[i]);
			}
		}

		public DFA60( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 60;
			this.eot = DFA60_eot;
			this.eof = DFA60_eof;
			this.min = DFA60_min;
			this.max = DFA60_max;
			this.accept = DFA60_accept;
			this.special = DFA60_special;
			this.transition = DFA60_transition;
		}

		public override string Description { get { return "()* loopback of 231:13: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition60(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA60_1 = input.LA(1);
		int index60_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred96_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index60_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 60, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA123 : DFA
	{
		private const string DFA123_eotS =
			"\x85\xFFFF";
		private const string DFA123_eofS =
			"\x85\xFFFF";
		private const string DFA123_minS =
			"\x1\x4\x1\x0\x1\xFFFF\x8\x0\x1\xFFFF\x38\x0\x41\xFFFF";
		private const string DFA123_maxS =
			"\x1\x83\x1\x0\x1\xFFFF\x8\x0\x1\xFFFF\x38\x0\x41\xFFFF";
		private const string DFA123_acceptS =
			"\x2\xFFFF\x1\x1\x8\xFFFF\x1\x2\x38\xFFFF\x1\x22\x1\x3\x1\x4\x1\x15\x1"+
			"\x34\x1\x32\x1\x21\x1\x2B\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1"+
			"\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\x16\x1\x17"+
			"\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x23"+
			"\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2F\x1\x2C\x1\x2D"+
			"\x1\x2E\x1\x30\x1\x31\x1\x3A\x1\x33\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39"+
			"\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43";
		private const string DFA123_specialS =
			"\x1\xFFFF\x1\x0\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x1\xFFFF\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B"+
			"\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25"+
			"\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F"+
			"\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39"+
			"\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x41\xFFFF}>";
		private static readonly string[] DFA123_transitionS =
			{
				"\x1\x2A\x1\x2\x1\x22\x1\xFFFF\x1\x2\x1\x2D\x2\xFFFF\x1\x2\x3\xFFFF\x1"+
				"\x3C\x1\x3D\x1\x1B\x1\x18\x1\x15\x1\x26\x1\xFFFF\x1\x4\x6\xFFFF\x1\x2C"+
				"\x1\x1C\x2\xFFFF\x1\x19\x1\x36\x1\xFFFF\x1\x13\x1\xFFFF\x1\x2\x1\x3F"+
				"\x1\xA\x1\xE\x1\xF\x1\x37\x4\xFFFF\x1\x39\x1\x38\x1\xFFFF\x1\x28\x1"+
				"\x35\x1\x2\x1\x16\x1\x3E\x1\x10\x1\x11\x1\xFFFF\x1\x5\x1\x20\x1\x1D"+
				"\x1\x6\x1\xFFFF\x1\x2\x2\xFFFF\x1\xD\x1\x29\x1\x30\x1\x31\x1\x2\x1\xFFFF"+
				"\x1\x25\x1\x34\x1\x2\x1\x3B\x1\x27\x1\x3A\x1\x1\x2\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x1A\x1\x3\x1\x8\x1\xFFFF\x1\x42\x1\xFFFF\x1\xB\x2\x2\x1\x23\x2\xFFFF"+
				"\x1\x2\x1\xC\x1\x32\x1\x33\x1\x2E\x1\xFFFF\x1\x2\x1\x40\x1\x9\x1\x2F"+
				"\x1\x1E\x2\xFFFF\x1\x2\x1\xFFFF\x1\x21\x1\x41\x1\x2\x1\x17\x1\x1F\x1"+
				"\x2\x1\x7\x1\x14\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\x43\x1\x2B\x1\x2\x1"+
				"\x12\x1\xFFFF\x1\x24\x2\x2",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA123_eot = DFA.UnpackEncodedString(DFA123_eotS);
		private static readonly short[] DFA123_eof = DFA.UnpackEncodedString(DFA123_eofS);
		private static readonly char[] DFA123_min = DFA.UnpackEncodedStringToUnsignedChars(DFA123_minS);
		private static readonly char[] DFA123_max = DFA.UnpackEncodedStringToUnsignedChars(DFA123_maxS);
		private static readonly short[] DFA123_accept = DFA.UnpackEncodedString(DFA123_acceptS);
		private static readonly short[] DFA123_special = DFA.UnpackEncodedString(DFA123_specialS);
		private static readonly short[][] DFA123_transition;

		static DFA123()
		{
			int numStates = DFA123_transitionS.Length;
			DFA123_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA123_transition[i] = DFA.UnpackEncodedString(DFA123_transitionS[i]);
			}
		}

		public DFA123( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 123;
			this.eot = DFA123_eot;
			this.eof = DFA123_eof;
			this.min = DFA123_min;
			this.max = DFA123_max;
			this.accept = DFA123_accept;
			this.special = DFA123_special;
			this.transition = DFA123_transition;
		}

		public override string Description { get { return "438:9: ( expression | '{' expression '}' | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Use )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition123(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA123_1 = input.LA(1);
		int index123_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred231_Php_fragment))) {s = 68;}

				input.Seek(index123_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred200_Php_fragment))) {s = 69;}

				input.Seek(index123_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred201_Php_fragment))) {s = 70;}

				input.Seek(index123_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred218_Php_fragment))) {s = 71;}

				input.Seek(index123_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred249_Php_fragment))) {s = 72;}

				input.Seek(index123_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred247_Php_fragment))) {s = 73;}

				input.Seek(index123_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred230_Php_fragment))) {s = 74;}

				input.Seek(index123_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred240_Php_fragment))) {s = 75;}

				input.Seek(index123_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred202_Php_fragment))) {s = 76;}

				input.Seek(index123_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred203_Php_fragment))) {s = 77;}

				input.Seek(index123_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred204_Php_fragment))) {s = 78;}

				input.Seek(index123_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred205_Php_fragment))) {s = 79;}

				input.Seek(index123_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred206_Php_fragment))) {s = 80;}

				input.Seek(index123_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred207_Php_fragment))) {s = 81;}

				input.Seek(index123_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred208_Php_fragment))) {s = 82;}

				input.Seek(index123_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred209_Php_fragment))) {s = 83;}

				input.Seek(index123_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred210_Php_fragment))) {s = 84;}

				input.Seek(index123_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred211_Php_fragment))) {s = 85;}

				input.Seek(index123_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred212_Php_fragment))) {s = 86;}

				input.Seek(index123_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred213_Php_fragment))) {s = 87;}

				input.Seek(index123_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred214_Php_fragment))) {s = 88;}

				input.Seek(index123_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred215_Php_fragment))) {s = 89;}

				input.Seek(index123_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred216_Php_fragment))) {s = 90;}

				input.Seek(index123_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred217_Php_fragment))) {s = 91;}

				input.Seek(index123_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred219_Php_fragment))) {s = 92;}

				input.Seek(index123_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred220_Php_fragment))) {s = 93;}

				input.Seek(index123_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred221_Php_fragment))) {s = 94;}

				input.Seek(index123_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred222_Php_fragment))) {s = 95;}

				input.Seek(index123_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred223_Php_fragment))) {s = 96;}

				input.Seek(index123_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred224_Php_fragment))) {s = 97;}

				input.Seek(index123_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred225_Php_fragment))) {s = 98;}

				input.Seek(index123_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred226_Php_fragment))) {s = 99;}

				input.Seek(index123_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred227_Php_fragment))) {s = 100;}

				input.Seek(index123_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred228_Php_fragment))) {s = 101;}

				input.Seek(index123_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred229_Php_fragment))) {s = 102;}

				input.Seek(index123_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred232_Php_fragment))) {s = 103;}

				input.Seek(index123_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred233_Php_fragment))) {s = 104;}

				input.Seek(index123_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred234_Php_fragment))) {s = 105;}

				input.Seek(index123_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred235_Php_fragment))) {s = 106;}

				input.Seek(index123_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred236_Php_fragment))) {s = 107;}

				input.Seek(index123_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred237_Php_fragment))) {s = 108;}

				input.Seek(index123_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred238_Php_fragment))) {s = 109;}

				input.Seek(index123_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred239_Php_fragment))) {s = 110;}

				input.Seek(index123_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred244_Php_fragment))) {s = 111;}

				input.Seek(index123_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred241_Php_fragment))) {s = 112;}

				input.Seek(index123_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred242_Php_fragment))) {s = 113;}

				input.Seek(index123_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred243_Php_fragment))) {s = 114;}

				input.Seek(index123_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred245_Php_fragment))) {s = 115;}

				input.Seek(index123_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred246_Php_fragment))) {s = 116;}

				input.Seek(index123_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred255_Php_fragment))) {s = 117;}

				input.Seek(index123_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred248_Php_fragment))) {s = 118;}

				input.Seek(index123_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred250_Php_fragment))) {s = 119;}

				input.Seek(index123_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred251_Php_fragment))) {s = 120;}

				input.Seek(index123_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred252_Php_fragment))) {s = 121;}

				input.Seek(index123_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred253_Php_fragment))) {s = 122;}

				input.Seek(index123_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred254_Php_fragment))) {s = 123;}

				input.Seek(index123_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred256_Php_fragment))) {s = 124;}

				input.Seek(index123_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred257_Php_fragment))) {s = 125;}

				input.Seek(index123_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred258_Php_fragment))) {s = 126;}

				input.Seek(index123_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred259_Php_fragment))) {s = 127;}

				input.Seek(index123_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred260_Php_fragment))) {s = 128;}

				input.Seek(index123_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred261_Php_fragment))) {s = 129;}

				input.Seek(index123_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred262_Php_fragment))) {s = 130;}

				input.Seek(index123_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred263_Php_fragment))) {s = 131;}

				input.Seek(index123_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 2;}

				else if ((true)) {s = 132;}

				input.Seek(index123_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 123, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA146 : DFA
	{
		private const string DFA146_eotS =
			"\x7\xFFFF";
		private const string DFA146_eofS =
			"\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5";
		private const string DFA146_minS =
			"\x1\x4\x1\xFFFF\x1\x4\x1\x5\x1\x4\x1\xFFFF\x1\x5";
		private const string DFA146_maxS =
			"\x1\x83\x1\xFFFF\x1\x81\x1\x83\x1\x81\x1\xFFFF\x1\x83";
		private const string DFA146_acceptS =
			"\x1\xFFFF\x1\x1\x3\xFFFF\x1\x2\x1\xFFFF";
		private const string DFA146_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA146_transitionS =
			{
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x6\xFFFF\x6\x3\x1\xFFFF\x1\x3\x6"+
				"\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x4\xFFFF\x2"+
				"\x3\x1\xFFFF\x7\x3\x1\xFFFF\x4\x3\x4\xFFFF\x4\x3\x2\xFFFF\x2\x3\x1\xFFFF"+
				"\x4\x3\x4\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x3\xFFFF\x4\x3\x2"+
				"\xFFFF\x4\x3\x4\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x1\x1\x1\x3\x1\xFFFF\x1\x3\x1\x1\x1\x2",
				"",
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x6\xFFFF\x6\x3\x1\xFFFF\x1\x3\x6"+
				"\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x4\xFFFF\x2"+
				"\x3\x1\xFFFF\x7\x3\x1\xFFFF\x4\x3\x4\xFFFF\x4\x3\x2\xFFFF\x2\x3\x1\xFFFF"+
				"\x4\x3\x4\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x3\xFFFF\x4\x3\x2"+
				"\xFFFF\x4\x3\x4\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x3\x5\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x8\xFFFF\x1\x1\x1\xFFFF\x6\x5\x8"+
				"\xFFFF\x1\x5\x7\xFFFF\x2\x5\xB\xFFFF\x1\x5\x4\xFFFF\x1\x5\x7\xFFFF\x3"+
				"\x5\x6\xFFFF\x3\x5\x7\xFFFF\x7\x5\x4\xFFFF\x1\x5\x5\xFFFF\x2\x5\x13"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x4",
				"\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6\x6\xFFFF\x6\x6\x1\xFFFF\x1\x6\x6"+
				"\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\xFFFF\x1\x6\x2\xFFFF\x5\x6\x4\xFFFF\x2"+
				"\x6\x1\xFFFF\x7\x6\x1\xFFFF\x4\x6\x4\xFFFF\x4\x6\x2\xFFFF\x2\x6\x1\xFFFF"+
				"\x4\x6\x4\xFFFF\x3\x6\x1\xFFFF\x1\x6\x4\xFFFF\x1\x6\x3\xFFFF\x4\x6\x2"+
				"\xFFFF\x4\x6\x4\xFFFF\x2\x6\x1\xFFFF\x2\x6\x1\xFFFF\x2\x6\x1\xFFFF\x1"+
				"\x6\x2\xFFFF\x2\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6",
				"",
				"\x3\x5\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x8\xFFFF\x1\x1\x1\xFFFF\x6\x5\x8"+
				"\xFFFF\x1\x5\x7\xFFFF\x2\x5\xB\xFFFF\x1\x5\x4\xFFFF\x1\x5\x7\xFFFF\x3"+
				"\x5\x6\xFFFF\x3\x5\x7\xFFFF\x7\x5\x4\xFFFF\x1\x5\x5\xFFFF\x2\x5\x13"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x4"
			};

		private static readonly short[] DFA146_eot = DFA.UnpackEncodedString(DFA146_eotS);
		private static readonly short[] DFA146_eof = DFA.UnpackEncodedString(DFA146_eofS);
		private static readonly char[] DFA146_min = DFA.UnpackEncodedStringToUnsignedChars(DFA146_minS);
		private static readonly char[] DFA146_max = DFA.UnpackEncodedStringToUnsignedChars(DFA146_maxS);
		private static readonly short[] DFA146_accept = DFA.UnpackEncodedString(DFA146_acceptS);
		private static readonly short[] DFA146_special = DFA.UnpackEncodedString(DFA146_specialS);
		private static readonly short[][] DFA146_transition;

		static DFA146()
		{
			int numStates = DFA146_transitionS.Length;
			DFA146_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA146_transition[i] = DFA.UnpackEncodedString(DFA146_transitionS[i]);
			}
		}

		public DFA146( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 146;
			this.eot = DFA146_eot;
			this.eof = DFA146_eof;
			this.min = DFA146_min;
			this.max = DFA146_max;
			this.accept = DFA146_accept;
			this.special = DFA146_special;
			this.transition = DFA146_transition;
		}

		public override string Description { get { return "478:1: constantOrStaticAccessor : ( ( variable | qualifiedName ) '::' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _BodyString_in_prog327 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _namespaceDefinition_in_prog331 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _useStatement_in_prog337 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_prog341 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameWithAs352 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _As_in_qualifiedNameWithAs355 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _UnquotedString_in_qualifiedNameWithAs357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Use_in_useStatement370 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedNameWithAs_in_useStatement372 = new BitSet(new ulong[]{0x10000000UL,0x100000000000UL});
		public static readonly BitSet _Comma_in_useStatement375 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedNameWithAs_in_useStatement377 = new BitSet(new ulong[]{0x10000000UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_useStatement381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespaceDefinition392 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_namespaceDefinition394 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_namespaceDefinition396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespaceBlock407 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_namespaceBlock409 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracketedBlock_in_namespaceBlock411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_statement427 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_statement429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_statement442 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _simpleStatement_in_statement447 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BodyString_in_statement453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespaceBlock_in_statement460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracketedBlock_in_statement465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_statement470 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_statement472 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_statement474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_statement479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDefinition_in_statement484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _complexStatement_in_statement489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleStatement_in_statement494 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_statement496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_statement501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_printExpr512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_bracketedBlock523 = new BitSet(new ulong[]{0xF7F61FACC1BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_bracketedBlock525 = new BitSet(new ulong[]{0xF7F61FACC1BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _CloseCurlyBracket_in_bracketedBlock528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_interfaceDefinition539 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_interfaceDefinition541 = new BitSet(new ulong[]{0x10000000000000UL,0x8000000UL});
		public static readonly BitSet _interfaceExtends_in_interfaceDefinition543 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_interfaceDefinition549 = new BitSet(new ulong[]{0x1040000041000010UL,0x1003800000000UL});
		public static readonly BitSet _interfaceMember_in_interfaceDefinition551 = new BitSet(new ulong[]{0x1040000041000010UL,0x1003800000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_interfaceDefinition554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_interfaceExtends565 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_interfaceExtends567 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_interfaceExtends570 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_interfaceExtends572 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _constDefinition_in_interfaceMember585 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionModifier_in_interfaceMember592 = new BitSet(new ulong[]{0x1040000000000010UL,0x1003800000000UL});
		public static readonly BitSet _Function_in_interfaceMember595 = new BitSet(new ulong[]{0xF7F61F2CC0BF0270UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _Ampersand_in_interfaceMember597 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_interfaceMember600 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _parametersDefinition_in_interfaceMember602 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classModifier_in_classDefinition617 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _Class_in_classDefinition623 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_classDefinition625 = new BitSet(new ulong[]{0x10000000000000UL,0x8000020UL});
		public static readonly BitSet _Extends_in_classDefinition631 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_classDefinition633 = new BitSet(new ulong[]{0x0UL,0x8000020UL});
		public static readonly BitSet _classImplements_in_classDefinition640 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_classDefinition645 = new BitSet(new ulong[]{0x1040000041000010UL,0x6001003800000000UL});
		public static readonly BitSet _classMember_in_classDefinition649 = new BitSet(new ulong[]{0x1040000041000010UL,0x6001003800000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_classDefinition654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_classImplements668 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_classImplements671 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_classImplements674 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_classImplements676 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _functionModifier_in_classMember690 = new BitSet(new ulong[]{0x1040000000000010UL,0x1003800000000UL});
		public static readonly BitSet _Function_in_classMember693 = new BitSet(new ulong[]{0xF7F61F2CC0BF0270UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _Ampersand_in_classMember695 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_classMember698 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _parametersDefinition_in_classMember700 = new BitSet(new ulong[]{0x0UL,0x100008000000UL});
		public static readonly BitSet _bracketedBlock_in_classMember703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_classMember707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constDefinition_in_classMember713 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_classMember715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varDefinition_in_classMember720 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_classMember722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDefinition_in_classMember727 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_classMember729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_constDefinition740 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_constDefinition742 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_constDefinition745 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_constDefinition747 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_constDefinition752 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_constDefinition754 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_constDefinition757 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_constDefinition759 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Var_in_varDefinition774 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _VariableName_in_varDefinition776 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_varDefinition779 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_varDefinition781 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_varDefinition786 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _VariableName_in_varDefinition788 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_varDefinition791 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_varDefinition793 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _fieldModifier_in_fieldDefinition808 = new BitSet(new ulong[]{0x10UL,0x4001003800000000UL});
		public static readonly BitSet _VariableName_in_fieldDefinition811 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_fieldDefinition814 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_fieldDefinition816 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_fieldDefinition821 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _VariableName_in_fieldDefinition823 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_fieldDefinition826 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_fieldDefinition828 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _accessModifier_in_functionModifier858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Final_in_functionModifier862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_functionModifier866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_functionModifier870 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessModifier_in_fieldModifier882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_fieldModifier886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_fieldModifier890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_complexStatement901 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement903 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_complexStatement905 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement907 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_complexStatement909 = new BitSet(new ulong[]{0xC0000000002UL});
		public static readonly BitSet _conditional_in_complexStatement911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_complexStatement917 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement919 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF5FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forInit_in_complexStatement921 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF5FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forCondition_in_complexStatement923 = new BitSet(new ulong[]{0xF7F61FACC2BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forUpdate_in_complexStatement925 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement927 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_complexStatement929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_complexStatement934 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement936 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_complexStatement938 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _As_in_complexStatement940 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _arrayEntry_in_complexStatement942 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement944 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_complexStatement946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_complexStatement951 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement953 = new BitSet(new ulong[]{0xF7F61FACC2BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_complexStatement955 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement958 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_complexStatement960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_complexStatement965 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement967 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_complexStatement969 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement971 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_complexStatement973 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_complexStatement975 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _conditionalWithColon_in_complexStatement978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_complexStatement984 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement986 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF5FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forInit_in_complexStatement988 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF5FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forCondition_in_complexStatement990 = new BitSet(new ulong[]{0xF7F61FACC2BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forUpdate_in_complexStatement992 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement994 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_complexStatement996 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_complexStatement998 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _Foreach_in_complexStatement1004 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1006 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_complexStatement1008 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _As_in_complexStatement1010 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _arrayEntry_in_complexStatement1012 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1014 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_complexStatement1016 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_complexStatement1018 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _While_in_complexStatement1024 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1026 = new BitSet(new ulong[]{0xF7F61FACC2BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_complexStatement1028 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1031 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_complexStatement1033 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_complexStatement1035 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _Do_in_complexStatement1041 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_complexStatement1043 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _While_in_complexStatement1045 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1047 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_complexStatement1049 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1051 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_complexStatement1053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_complexStatement1058 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1060 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_complexStatement1062 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1064 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_complexStatement1066 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _cases_in_complexStatement1068 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_complexStatement1070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_complexStatement1075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDefinition_in_complexStatement1080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Try_in_tryStatement1092 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement1094 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _Catch_in_tryStatement1100 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_tryStatement1102 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_tryStatement1104 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL,0x4UL});
		public static readonly BitSet _variable_in_tryStatement1106 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_tryStatement1108 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement1110 = new BitSet(new ulong[]{0x80000000100002UL});
		public static readonly BitSet _Finally_in_tryStatement1118 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement1120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_simpleStatement1133 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _commaList_in_simpleStatement1135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Print_in_simpleStatement1140 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_simpleStatement1142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_simpleStatement1147 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL,0x4UL});
		public static readonly BitSet _variable_in_simpleStatement1149 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_simpleStatement1152 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL,0x4UL});
		public static readonly BitSet _variable_in_simpleStatement1154 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Static_in_simpleStatement1162 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _VariableName_in_simpleStatement1164 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_simpleStatement1167 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_simpleStatement1169 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_simpleStatement1174 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _VariableName_in_simpleStatement1176 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_simpleStatement1179 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_simpleStatement1181 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _constDefinition_in_simpleStatement1190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_simpleStatement1195 = new BitSet(new ulong[]{0x2UL,0x1000UL});
		public static readonly BitSet _Integer_in_simpleStatement1197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_simpleStatement1203 = new BitSet(new ulong[]{0x2UL,0x1000UL});
		public static readonly BitSet _Integer_in_simpleStatement1205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_simpleStatement1211 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _UnquotedString_in_simpleStatement1213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_simpleStatement1218 = new BitSet(new ulong[]{0xF7F61FACC0BF1372UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_simpleStatement1220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_simpleStatement1226 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _UnquotedString_in_simpleStatement1228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_simpleStatement1233 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_simpleStatement1235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_simpleStatement1240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_conditional1251 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_conditional1253 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_conditional1255 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_conditional1257 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_conditional1259 = new BitSet(new ulong[]{0xC0000000002UL});
		public static readonly BitSet _conditional_in_conditional1261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_conditional1267 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_conditional1269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_conditionalWithColon1280 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_conditionalWithColon1282 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_conditionalWithColon1284 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_conditionalWithColon1286 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_conditionalWithColon1288 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_conditionalWithColon1290 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _conditionalWithColon_in_conditionalWithColon1293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_conditionalWithColon1299 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_conditionalWithColon1301 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_conditionalWithColon1303 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _commaList_in_forInit1315 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_forInit1318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forCondition1329 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_forCondition1332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forUpdate1344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _casestatement_in_cases1356 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _defaultcase_in_cases1359 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_cases1361 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_cases1367 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _Case_in_casestatement1379 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_casestatement1381 = new BitSet(new ulong[]{0x8000000UL,0x100000000000UL});
		public static readonly BitSet _set_in_casestatement1383 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_casestatement1389 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _Default_in_defaultcase1403 = new BitSet(new ulong[]{0x8000000UL,0x100000000000UL});
		public static readonly BitSet _set_in_defaultcase1405 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_defaultcase1411 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _Function_in_anonymousFunctionDefinition1424 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _parametersDefinition_in_anonymousFunctionDefinition1426 = new BitSet(new ulong[]{0x0UL,0x1000000008000000UL});
		public static readonly BitSet _Use_in_anonymousFunctionDefinition1429 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _parametersDefinition_in_anonymousFunctionDefinition1431 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracketedBlock_in_anonymousFunctionDefinition1435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_functionDefinition1446 = new BitSet(new ulong[]{0xF7F61F2CC0BF0270UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _Ampersand_in_functionDefinition1448 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_functionDefinition1451 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _parametersDefinition_in_functionDefinition1453 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracketedBlock_in_functionDefinition1455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_parametersDefinition1466 = new BitSet(new ulong[]{0xF7F61F2CC2BF0370UL,0xFADB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _paramDef_in_parametersDefinition1469 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_parametersDefinition1472 = new BitSet(new ulong[]{0xF7F61F2CC0BF0370UL,0xFADB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _paramDef_in_parametersDefinition1474 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_parametersDefinition1480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_paramDef1492 = new BitSet(new ulong[]{0x20UL,0x4000000000000000UL});
		public static readonly BitSet _primitiveType_in_paramDef1496 = new BitSet(new ulong[]{0x20UL,0x4000000000000000UL});
		public static readonly BitSet _paramName_in_paramDef1500 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _Equals_in_paramDef1503 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_paramDef1505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VariableName_in_paramName1518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_paramName1523 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _VariableName_in_paramName1525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_commaList1536 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_commaList1539 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_commaList1541 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _weakLogicalOr_in_expression1556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr1567 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _Or_in_weakLogicalOr1570 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr1572 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor1585 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _Xor_in_weakLogicalXor1588 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor1590 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd1604 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _And_in_weakLogicalAnd1607 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _assignment_in_weakLogicalAnd1609 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _listVariables_in_assignment1622 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_assignment1624 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _assignment_in_assignment1632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ternary_in_assignment1637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_listVariables1648 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_listVariables1650 = new BitSet(new ulong[]{0xF7F61F2CD2BF0250UL,0xF2DB0F3C42E1ECF0UL,0xEUL});
		public static readonly BitSet _name_in_listVariables1652 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_listVariables1656 = new BitSet(new ulong[]{0xF7F61F2CD2BF0250UL,0xF2DB0F3C42E1ECF0UL,0xEUL});
		public static readonly BitSet _name_in_listVariables1658 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_listVariables1663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_listVariables1669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary1680 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _QuestionMark_in_ternary1682 = new BitSet(new ulong[]{0xF7F61FACC8BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_ternary1684 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_ternary1687 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_ternary1689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary1694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAnd_in_logicalOr1706 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _LogicalOr_in_logicalOr1709 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _logicalAnd_in_logicalOr1711 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd1724 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _LogicalAnd_in_logicalAnd1727 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd1729 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _bitwiseXor_in_bitwiseOr1743 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _Pipe_in_bitwiseOr1746 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _bitwiseXor_in_bitwiseOr1748 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseXor1762 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _Hat_in_bitwiseXor1765 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseXor1767 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd1780 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _Ampersand_in_bitWiseAnd1783 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd1785 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck1798 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _EqualityOperator_in_equalityCheck1801 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck1803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck1817 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _ComparisionOperator_in_comparisionCheck1820 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck1822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addition_in_bitWiseShift1835 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _ShiftOperator_in_bitWiseShift1838 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _addition_in_bitWiseShift1840 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _multiplication_in_addition1854 = new BitSet(new ulong[]{0x4000000002UL,0x200080000UL});
		public static readonly BitSet _set_in_addition1857 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _multiplication_in_addition1869 = new BitSet(new ulong[]{0x4000000002UL,0x200080000UL});
		public static readonly BitSet _logicalNot_in_multiplication1882 = new BitSet(new ulong[]{0x800000000000802UL,0x80000000UL});
		public static readonly BitSet _set_in_multiplication1885 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _logicalNot_in_multiplication1897 = new BitSet(new ulong[]{0x800000000000802UL,0x80000000UL});
		public static readonly BitSet _Bang_in_logicalNot1910 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _logicalNot_in_logicalNot1912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _instanceOf_in_logicalNot1917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _negateOrCast_in_instanceOf1928 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _Instanceof_in_instanceOf1931 = new BitSet(new ulong[]{0xF7F61FACC0BF0370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _negateOrCast_in_instanceOf1933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_negateOrCast1946 = new BitSet(new ulong[]{0xF7F61FACC0BF0370UL,0xFADB4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _increment_in_negateOrCast1958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_negateOrCast1963 = new BitSet(new ulong[]{0x100010000030100UL,0x802010002002800UL});
		public static readonly BitSet _primitiveType_in_negateOrCast1965 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_negateOrCast1967 = new BitSet(new ulong[]{0xF7F61FACC0BF0370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _negateOrCast_in_negateOrCast1969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _increment_in_negateOrCast1974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncrementOperator_in_increment2037 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xF2DB0F3C42E1ECF0UL,0xEUL});
		public static readonly BitSet _name_in_increment2039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_increment2044 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _IncrementOperator_in_increment2046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_increment2051 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_increment2053 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _assignment_in_increment2061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newOrClone_in_increment2066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_increment2071 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_increment2073 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_increment2075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_newOrClone2097 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xFADB0F3C42E1ECF0UL,0xEUL});
		public static readonly BitSet _nameOrFunctionCall_in_newOrClone2100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_newOrClone2104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_newOrClone2110 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _Static_in_newOrClone2112 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_newOrClone2114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_newOrClone2120 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xF2DB0F3C42E1ECF0UL,0xEUL});
		public static readonly BitSet _name_in_newOrClone2122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atomOrReference_in_newOrClone2127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_atomOrReference2139 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xFADB0F3C42E1ECF0UL,0xEUL});
		public static readonly BitSet _nameOrFunctionCall_in_atomOrReference2141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymousFunctionDefinition_in_atomOrReference2146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrFunctionCall_in_atomOrReference2151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_atomOrReference2156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrFunctionCall_in_atomOrReference2161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ArrayType_in_arrayDeclaration2172 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_arrayDeclaration2174 = new BitSet(new ulong[]{0xF7F61FACC2BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2177 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2180 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2182 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2186 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_arrayDeclaration2191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenSquareBracket_in_arrayDeclaration2196 = new BitSet(new ulong[]{0xF7F61FACC4BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2199 = new BitSet(new ulong[]{0x14000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2202 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2204 = new BitSet(new ulong[]{0x14000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2208 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseSquareBracket_in_arrayDeclaration2213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_arrayEntry2225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_arrayEntry2229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_keyValuePair2242 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ArrayAssign_in_keyValuePair2244 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_keyValuePair2246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SingleQuotedString_in_atom2256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleQuotedString_in_atom2261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HereDoc_in_atom2266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Integer_in_atom2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Real_in_atom2290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_in_atom2295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_atom2300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaration_in_atom2305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _requireOperator_in_atom2310 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_atom2312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_atom2317 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_functionArguments2328 = new BitSet(new ulong[]{0xF7F61FACC2BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_functionArguments2331 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_functionArguments2334 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_functionArguments2336 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_functionArguments2342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenSquareBracket_in_indexer2353 = new BitSet(new ulong[]{0xF7F61FACC4BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_indexer2355 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseSquareBracket_in_indexer2358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_indexer2363 = new BitSet(new ulong[]{0xF7F61FACC1BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_indexer2365 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_indexer2368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _InstanceMember_in_memberAccess2380 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_memberAccess2383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_memberAccess2387 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_memberAccess2389 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_memberAccess2391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_memberAccess2398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_memberAccess2400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_memberAccess2402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Print_in_memberAccess2404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_memberAccess2406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_memberAccess2408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_memberAccess2410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_memberAccess2412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_memberAccess2414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_memberAccess2416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Do_in_memberAccess2418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Try_in_memberAccess2420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Catch_in_memberAccess2422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Finally_in_memberAccess2424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_memberAccess2426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Case_in_memberAccess2428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Default_in_memberAccess2430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_memberAccess2432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_memberAccess2434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_memberAccess2436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_memberAccess2438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_memberAccess2440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_memberAccess2442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_memberAccess2444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_memberAccess2446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_memberAccess2448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_memberAccess2450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_memberAccess2452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_memberAccess2454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Instanceof_in_memberAccess2456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_memberAccess2458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_memberAccess2460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Class_in_memberAccess2462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_memberAccess2464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_memberAccess2466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_memberAccess2468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_memberAccess2470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Var_in_memberAccess2472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_memberAccess2474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _As_in_memberAccess2476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Require_in_memberAccess2478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RequireOnce_in_memberAccess2480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Include_in_memberAccess2482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncludeOnce_in_memberAccess2484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Public_in_memberAccess2486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Private_in_memberAccess2488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Protected_in_memberAccess2490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _True_in_memberAccess2492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _False_in_memberAccess2494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HaltCompiler_in_memberAccess2496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Die_in_memberAccess2498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Empty_in_memberAccess2500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Exit_in_memberAccess2502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Eval_in_memberAccess2504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Isset_in_memberAccess2506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntType_in_memberAccess2513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntegerType_in_memberAccess2517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BoolType_in_memberAccess2521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BooleanType_in_memberAccess2525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FloatType_in_memberAccess2529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleType_in_memberAccess2533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealType_in_memberAccess2540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringType_in_memberAccess2544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ObjectType_in_memberAccess2548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Use_in_memberAccess2554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrFunctionCall_in_nameOrFunctionCall2570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrFunctionCall_in_nameOrFunctionCall2575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_variableOrFunctionCall2586 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _functionArguments_in_variableOrFunctionCall2588 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _indexer_in_variableOrFunctionCall2593 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _memberAccess_in_variableOrFunctionCall2597 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _functionArguments_in_variableOrFunctionCall2600 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _constantOrStaticAccessor_in_constantOrFunctionCall2614 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_constantOrFunctionCall2616 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _indexer_in_constantOrFunctionCall2620 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _memberAccess_in_constantOrFunctionCall2624 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _functionArguments_in_constantOrFunctionCall2627 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _constantOrStaticAccessor_in_constantOrFunctionCall2635 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _indexer_in_constantOrFunctionCall2639 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _memberAccess_in_constantOrFunctionCall2643 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _functionArguments_in_constantOrFunctionCall2646 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _predefinedFunctionName_in_constantOrFunctionCall2654 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_constantOrFunctionCall2656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_name2677 = new BitSet(new ulong[]{0x0UL,0x38000200UL});
		public static readonly BitSet _constantOrStaticAccessor_in_name2681 = new BitSet(new ulong[]{0x0UL,0x38000200UL});
		public static readonly BitSet _functionArguments_in_name2687 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _indexer_in_name2695 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _memberAccess_in_name2699 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _memberAccess_in_name2703 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_name2705 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _indexer_in_name2713 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _memberAccess_in_name2717 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _variableOrStaticAccessor_in_name2724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2736 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_variableOrStaticAccessor2740 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_variableOrStaticAccessor2743 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL,0x4UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_constantOrStaticAccessor2762 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_constantOrStaticAccessor2766 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_constantOrStaticAccessor2769 = new BitSet(new ulong[]{0xF7B61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0x2UL});
		public static readonly BitSet _set_in_constantOrStaticAccessor2771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_constantOrStaticAccessor2945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableVariable_in_variable2957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VariableName_in_variableVariable2968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_variableVariable2973 = new BitSet(new ulong[]{0x0UL,0x4000000008000000UL,0x4UL});
		public static readonly BitSet _variableVariable_in_variableVariable2976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_variableVariable2980 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_variableVariable2982 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_variableVariable2984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_qualifiedName2997 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0x2UL});
		public static readonly BitSet _set_in_qualifiedName3000 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_qualifiedName3176 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0x2UL});
		public static readonly BitSet _set_in_qualifiedName3178 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _BodyString_in_synpred1_Php327 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _namespaceDefinition_in_synpred1_Php331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _useStatement_in_synpred2_Php337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred3_Php341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred6_Php427 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_synpred6_Php429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred8_Php442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred10_Php442 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _simpleStatement_in_synpred10_Php447 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BodyString_in_synpred10_Php453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespaceBlock_in_synpred11_Php460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_synpred13_Php470 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred13_Php472 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred13_Php474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_synpred14_Php479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDefinition_in_synpred15_Php484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _complexStatement_in_synpred16_Php489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleStatement_in_synpred17_Php494 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _SemiColon_in_synpred17_Php496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred18_Php525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred52_Php911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_synpred53_Php901 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred53_Php903 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred53_Php905 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred53_Php907 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred53_Php909 = new BitSet(new ulong[]{0xC0000000002UL});
		public static readonly BitSet _conditional_in_synpred53_Php911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_synpred54_Php917 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred54_Php919 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF5FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forInit_in_synpred54_Php921 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF5FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forCondition_in_synpred54_Php923 = new BitSet(new ulong[]{0xF7F61FACC2BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forUpdate_in_synpred54_Php925 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred54_Php927 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred54_Php929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_synpred55_Php934 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred55_Php936 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred55_Php938 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _As_in_synpred55_Php940 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _arrayEntry_in_synpred55_Php942 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred55_Php944 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred55_Php946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_synpred57_Php951 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred57_Php953 = new BitSet(new ulong[]{0xF7F61FACC2BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred57_Php955 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred57_Php958 = new BitSet(new ulong[]{0xF7F61FACC0BF3370UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred57_Php960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred58_Php975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalWithColon_in_synpred59_Php978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_synpred60_Php965 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred60_Php967 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred60_Php969 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred60_Php971 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred60_Php973 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred60_Php975 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _conditionalWithColon_in_synpred60_Php978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred61_Php998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_synpred62_Php984 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred62_Php986 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF5FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forInit_in_synpred62_Php988 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF5FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forCondition_in_synpred62_Php990 = new BitSet(new ulong[]{0xF7F61FACC2BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _forUpdate_in_synpred62_Php992 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred62_Php994 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred62_Php996 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred62_Php998 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred63_Php1018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_synpred64_Php1004 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred64_Php1006 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred64_Php1008 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _As_in_synpred64_Php1010 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _arrayEntry_in_synpred64_Php1012 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred64_Php1014 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred64_Php1016 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred64_Php1018 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred66_Php1035 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_synpred67_Php1024 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred67_Php1026 = new BitSet(new ulong[]{0xF7F61FACC2BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred67_Php1028 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred67_Php1031 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred67_Php1033 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _statement_in_synpred67_Php1035 = new BitSet(new ulong[]{0xF7F61FACC0BF3372UL,0xFAFF5FBE7AE9FDF2UL,0xEUL});
		public static readonly BitSet _Catch_in_synpred71_Php1100 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred71_Php1102 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xB2DB0F3C42E1ECF0UL,0xAUL});
		public static readonly BitSet _qualifiedName_in_synpred71_Php1104 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL,0x4UL});
		public static readonly BitSet _variable_in_synpred71_Php1106 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred71_Php1108 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracketedBlock_in_synpred71_Php1110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Finally_in_synpred72_Php1118 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracketedBlock_in_synpred72_Php1120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_synpred73_Php1133 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _commaList_in_synpred73_Php1135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Print_in_synpred74_Php1140 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred74_Php1142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_synpred76_Php1147 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL,0x4UL});
		public static readonly BitSet _variable_in_synpred76_Php1149 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_synpred76_Php1152 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL,0x4UL});
		public static readonly BitSet _variable_in_synpred76_Php1154 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Static_in_synpred80_Php1162 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _VariableName_in_synpred80_Php1164 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_synpred80_Php1167 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_synpred80_Php1169 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_synpred80_Php1174 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _VariableName_in_synpred80_Php1176 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_synpred80_Php1179 = new BitSet(new ulong[]{0xF7F61FACC0BF0350UL,0xF2DB4FBE62E9FCF2UL,0xEUL});
		public static readonly BitSet _atom_in_synpred80_Php1181 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _constDefinition_in_synpred81_Php1190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_synpred83_Php1195 = new BitSet(new ulong[]{0x2UL,0x1000UL});
		public static readonly BitSet _Integer_in_synpred83_Php1197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_synpred85_Php1203 = new BitSet(new ulong[]{0x2UL,0x1000UL});
		public static readonly BitSet _Integer_in_synpred85_Php1205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_synpred86_Php1211 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _UnquotedString_in_synpred86_Php1213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_synpred88_Php1218 = new BitSet(new ulong[]{0xF7F61FACC0BF1372UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred88_Php1220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_synpred89_Php1226 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _UnquotedString_in_synpred89_Php1228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_synpred90_Php1233 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred90_Php1235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred91_Php1261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred93_Php1290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalWithColon_in_synpred94_Php1293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred96_Php1303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _casestatement_in_synpred102_Php1356 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _defaultcase_in_synpred102_Php1359 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_synpred102_Php1361 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _statement_in_synpred105_Php1389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred107_Php1411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_synpred112_Php1492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_synpred113_Php1496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_synpred117_Php1570 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _weakLogicalXor_in_synpred117_Php1572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_synpred118_Php1588 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _weakLogicalAnd_in_synpred118_Php1590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_synpred119_Php1607 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _assignment_in_synpred119_Php1609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_synpred121_Php1622 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_synpred121_Php1624 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _assignment_in_synpred121_Php1632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_synpred125_Php1648 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred125_Php1650 = new BitSet(new ulong[]{0xF7F61F2CD2BF0250UL,0xF2DB0F3C42E1ECF0UL,0xEUL});
		public static readonly BitSet _name_in_synpred125_Php1652 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_synpred125_Php1656 = new BitSet(new ulong[]{0xF7F61F2CD2BF0250UL,0xF2DB0F3C42E1ECF0UL,0xEUL});
		public static readonly BitSet _name_in_synpred125_Php1658 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred125_Php1663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_synpred127_Php1680 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _QuestionMark_in_synpred127_Php1682 = new BitSet(new ulong[]{0xF7F61FACC8BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred127_Php1684 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred127_Php1687 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred127_Php1689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LogicalOr_in_synpred128_Php1709 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _logicalAnd_in_synpred128_Php1711 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LogicalAnd_in_synpred129_Php1727 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _bitwiseOr_in_synpred129_Php1729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Pipe_in_synpred130_Php1746 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _bitwiseXor_in_synpred130_Php1748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Hat_in_synpred131_Php1765 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _bitWiseAnd_in_synpred131_Php1767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_synpred132_Php1783 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _equalityCheck_in_synpred132_Php1785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EqualityOperator_in_synpred133_Php1801 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _comparisionCheck_in_synpred133_Php1803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ComparisionOperator_in_synpred134_Php1820 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _bitWiseShift_in_synpred134_Php1822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ShiftOperator_in_synpred135_Php1838 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _addition_in_synpred135_Php1840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred138_Php1857 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _multiplication_in_synpred138_Php1869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred141_Php1885 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _logicalNot_in_synpred141_Php1897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Instanceof_in_synpred143_Php1931 = new BitSet(new ulong[]{0xF7F61FACC0BF0370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _negateOrCast_in_synpred143_Php1933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred146_Php1946 = new BitSet(new ulong[]{0xF7F61FACC0BF0370UL,0xFADB4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _increment_in_synpred146_Php1958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred147_Php1963 = new BitSet(new ulong[]{0x100010000030100UL,0x802010002002800UL});
		public static readonly BitSet _primitiveType_in_synpred147_Php1965 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred147_Php1967 = new BitSet(new ulong[]{0xF7F61FACC0BF0370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _negateOrCast_in_synpred147_Php1969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred159_Php2044 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _IncrementOperator_in_synpred159_Php2046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_synpred161_Php2051 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_synpred161_Php2053 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _assignment_in_synpred161_Php2061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newOrClone_in_synpred162_Php2066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameOrFunctionCall_in_synpred163_Php2100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred164_Php2097 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xFADB0F3C42E1ECF0UL,0xEUL});
		public static readonly BitSet _nameOrFunctionCall_in_synpred164_Php2100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred164_Php2104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred165_Php2114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred166_Php2110 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _Static_in_synpred166_Php2112 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_synpred166_Php2114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_synpred167_Php2120 = new BitSet(new ulong[]{0xF7F61F2CC0BF0250UL,0xF2DB0F3C42E1ECF0UL,0xEUL});
		public static readonly BitSet _name_in_synpred167_Php2122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymousFunctionDefinition_in_synpred169_Php2146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrFunctionCall_in_synpred170_Php2151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_synpred171_Php2156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_synpred179_Php2225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Integer_in_synpred185_Php2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Real_in_synpred188_Php2290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_in_synpred189_Php2295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_synpred190_Php2300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _requireOperator_in_synpred192_Php2310 = new BitSet(new ulong[]{0xF7F61FACC0BF1370UL,0xFAFF4FBE72E9FDF2UL,0xEUL});
		public static readonly BitSet _expression_in_synpred192_Php2312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred198_Php2383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred200_Php2398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_synpred201_Php2400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_synpred202_Php2402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Print_in_synpred203_Php2404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_synpred204_Php2406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_synpred205_Php2408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_synpred206_Php2410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_synpred207_Php2412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_synpred208_Php2414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_synpred209_Php2416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Do_in_synpred210_Php2418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Try_in_synpred211_Php2420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Catch_in_synpred212_Php2422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Finally_in_synpred213_Php2424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_synpred214_Php2426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Case_in_synpred215_Php2428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Default_in_synpred216_Php2430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_synpred217_Php2432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_synpred218_Php2434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_synpred219_Php2436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_synpred220_Php2438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_synpred221_Php2440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_synpred222_Php2442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_synpred223_Php2444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_synpred224_Php2446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_synpred225_Php2448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_synpred226_Php2450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_synpred227_Php2452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_synpred228_Php2454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Instanceof_in_synpred229_Php2456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_synpred230_Php2458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_synpred231_Php2460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Class_in_synpred232_Php2462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_synpred233_Php2464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_synpred234_Php2466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_synpred235_Php2468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_synpred236_Php2470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Var_in_synpred237_Php2472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_synpred238_Php2474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _As_in_synpred239_Php2476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Require_in_synpred240_Php2478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RequireOnce_in_synpred241_Php2480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Include_in_synpred242_Php2482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncludeOnce_in_synpred243_Php2484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Public_in_synpred244_Php2486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Private_in_synpred245_Php2488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Protected_in_synpred246_Php2490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _True_in_synpred247_Php2492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _False_in_synpred248_Php2494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HaltCompiler_in_synpred249_Php2496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Die_in_synpred250_Php2498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Empty_in_synpred251_Php2500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Exit_in_synpred252_Php2502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Eval_in_synpred253_Php2504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Isset_in_synpred254_Php2506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntType_in_synpred255_Php2513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntegerType_in_synpred256_Php2517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BoolType_in_synpred257_Php2521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BooleanType_in_synpred258_Php2525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FloatType_in_synpred259_Php2529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleType_in_synpred260_Php2533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealType_in_synpred261_Php2540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringType_in_synpred262_Php2544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ObjectType_in_synpred263_Php2548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrFunctionCall_in_synpred264_Php2570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred265_Php2588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred267_Php2600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred268_Php2593 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _memberAccess_in_synpred268_Php2597 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_synpred268_Php2600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred270_Php2627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred271_Php2620 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _memberAccess_in_synpred271_Php2624 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_synpred271_Php2627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred272_Php2614 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_synpred272_Php2616 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _indexer_in_synpred272_Php2620 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _memberAccess_in_synpred272_Php2624 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _functionArguments_in_synpred272_Php2627 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _functionArguments_in_synpred274_Php2646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred275_Php2639 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _memberAccess_in_synpred275_Php2643 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_synpred275_Php2646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred276_Php2635 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _indexer_in_synpred276_Php2639 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _memberAccess_in_synpred276_Php2643 = new BitSet(new ulong[]{0x2UL,0x38000200UL});
		public static readonly BitSet _functionArguments_in_synpred276_Php2646 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _functionArguments_in_synpred277_Php2656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_synpred278_Php2677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred281_Php2699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred282_Php2695 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _memberAccess_in_synpred282_Php2699 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _memberAccess_in_synpred282_Php2703 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_synpred282_Php2705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred283_Php2713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred284_Php2717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_synpred285_Php2677 = new BitSet(new ulong[]{0x0UL,0x38000200UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred285_Php2681 = new BitSet(new ulong[]{0x0UL,0x38000200UL});
		public static readonly BitSet _functionArguments_in_synpred285_Php2687 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _indexer_in_synpred285_Php2695 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _memberAccess_in_synpred285_Php2699 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _memberAccess_in_synpred285_Php2703 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _functionArguments_in_synpred285_Php2705 = new BitSet(new ulong[]{0x0UL,0x28000200UL});
		public static readonly BitSet _indexer_in_synpred285_Php2713 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _memberAccess_in_synpred285_Php2717 = new BitSet(new ulong[]{0x2UL,0x28000200UL});
		public static readonly BitSet _variable_in_synpred287_Php2736 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_synpred287_Php2740 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_synpred287_Php2743 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL,0x4UL});
		public static readonly BitSet _variable_in_synpred287_Php2745 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
