//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 Java.g 2014-10-29 10:02:03

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Code2Xml.Languages.ANTLRv3.Processors.Java 
{
/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created
 *          elementValuePair and elementValuePairs rules, then used them in the
 *          annotation rule.  Allows it to recognize annotation references with
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which
 *          has the Identifier portion in it, the parser would fail on constants in
 *          annotation definitions because it expected two identifiers.
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *         
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "Identifier ('.' Identifier)*" to "qualifiedName" in more
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and
 *          normalInterfaceDeclaration rather than classDeclaration and
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation,
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaIdentifierStart(int) returns true."  A "Java
 *      letter-or-digit is a character for which the method
 *      Character.isJavaIdentifierPart(int) returns true."
 */
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class JavaParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AMP", "AMPAMP", "AMPEQ", "ASSERT", "BANG", "BANGEQ", "BAR", "BARBAR", "BAREQ", "BOOLEAN", "BREAK", "BYTE", "BinaryDigit", "BinaryDigitOrUnderscore", "BinaryDigits", "BinaryExponent", "BinaryExponentIndicator", "BinaryIntegerLiteral", "BinaryNumeral", "BooleanLiteral", "CARET", "CARETEQ", "CASE", "CATCH", "CHAR", "CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONTINUE", "CharacterLiteral", "DEFAULT", "DO", "DOT", "DOUBLE", "DecimalFloatingPointLiteral", "DecimalIntegerLiteral", "DecimalNumeral", "Digit", "DigitOrUnderscore", "Digits", "ELLIPSIS", "ELSE", "ENUM", "EQ", "EQEQ", "EXTENDS", "EscapeSequence", "ExponentIndicator", "ExponentPart", "FINAL", "FINALLY", "FLOAT", "FOR", "FloatTypeSuffix", "FloatingPointLiteral", "GOTO", "GT", "HexDigit", "HexDigitOrUnderscore", "HexDigits", "HexIntegerLiteral", "HexNumeral", "HexSignificand", "HexadecimalFloatingPointLiteral", "IDENTIFIER", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "IdentifierPart", "IdentifierStart", "IntegerLiteral", "IntegerTypeSuffix", "LBRACE", "LBRACKET", "LINE_COMMENT", "LONG", "LPAREN", "LT", "MONKEYS_AT", "NATIVE", "NEW", "NonZeroDigit", "NullLiteral", "OctalDigit", "OctalDigitOrUnderscore", "OctalDigits", "OctalEscape", "OctalIntegerLiteral", "OctalNumeral", "PACKAGE", "PERCENT", "PERCENTEQ", "PLUS", "PLUSEQ", "PLUSPLUS", "PRIVATE", "PROTECTED", "PUBLIC", "QUES", "RBRACE", "RBRACKET", "RETURN", "RPAREN", "SEMI", "SHORT", "SLASH", "SLASHEQ", "STAR", "STAREQ", "STATIC", "STRICTFP", "SUB", "SUBEQ", "SUBSUB", "SUPER", "SWITCH", "SYNCHRONIZED", "Sign", "SignedInteger", "StringLiteral", "SurrogateIdentifer", "THIS", "THROW", "THROWS", "TILDE", "TRANSIENT", "TRY", "Underscores", "UnicodeEscape", "VOID", "VOLATILE", "WHILE", "WS", "ZeroToThree"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int AMP=5;
	public const int AMPAMP=6;
	public const int AMPEQ=7;
	public const int ASSERT=8;
	public const int BANG=9;
	public const int BANGEQ=10;
	public const int BAR=11;
	public const int BARBAR=12;
	public const int BAREQ=13;
	public const int BOOLEAN=14;
	public const int BREAK=15;
	public const int BYTE=16;
	public const int BinaryDigit=17;
	public const int BinaryDigitOrUnderscore=18;
	public const int BinaryDigits=19;
	public const int BinaryExponent=20;
	public const int BinaryExponentIndicator=21;
	public const int BinaryIntegerLiteral=22;
	public const int BinaryNumeral=23;
	public const int BooleanLiteral=24;
	public const int CARET=25;
	public const int CARETEQ=26;
	public const int CASE=27;
	public const int CATCH=28;
	public const int CHAR=29;
	public const int CLASS=30;
	public const int COLON=31;
	public const int COMMA=32;
	public const int COMMENT=33;
	public const int CONST=34;
	public const int CONTINUE=35;
	public const int CharacterLiteral=36;
	public const int DEFAULT=37;
	public const int DO=38;
	public const int DOT=39;
	public const int DOUBLE=40;
	public const int DecimalFloatingPointLiteral=41;
	public const int DecimalIntegerLiteral=42;
	public const int DecimalNumeral=43;
	public const int Digit=44;
	public const int DigitOrUnderscore=45;
	public const int Digits=46;
	public const int ELLIPSIS=47;
	public const int ELSE=48;
	public const int ENUM=49;
	public const int EQ=50;
	public const int EQEQ=51;
	public const int EXTENDS=52;
	public const int EscapeSequence=53;
	public const int ExponentIndicator=54;
	public const int ExponentPart=55;
	public const int FINAL=56;
	public const int FINALLY=57;
	public const int FLOAT=58;
	public const int FOR=59;
	public const int FloatTypeSuffix=60;
	public const int FloatingPointLiteral=61;
	public const int GOTO=62;
	public const int GT=63;
	public const int HexDigit=64;
	public const int HexDigitOrUnderscore=65;
	public const int HexDigits=66;
	public const int HexIntegerLiteral=67;
	public const int HexNumeral=68;
	public const int HexSignificand=69;
	public const int HexadecimalFloatingPointLiteral=70;
	public const int IDENTIFIER=71;
	public const int IF=72;
	public const int IMPLEMENTS=73;
	public const int IMPORT=74;
	public const int INSTANCEOF=75;
	public const int INT=76;
	public const int INTERFACE=77;
	public const int IdentifierPart=78;
	public const int IdentifierStart=79;
	public const int IntegerLiteral=80;
	public const int IntegerTypeSuffix=81;
	public const int LBRACE=82;
	public const int LBRACKET=83;
	public const int LINE_COMMENT=84;
	public const int LONG=85;
	public const int LPAREN=86;
	public const int LT=87;
	public const int MONKEYS_AT=88;
	public const int NATIVE=89;
	public const int NEW=90;
	public const int NonZeroDigit=91;
	public const int NullLiteral=92;
	public const int OctalDigit=93;
	public const int OctalDigitOrUnderscore=94;
	public const int OctalDigits=95;
	public const int OctalEscape=96;
	public const int OctalIntegerLiteral=97;
	public const int OctalNumeral=98;
	public const int PACKAGE=99;
	public const int PERCENT=100;
	public const int PERCENTEQ=101;
	public const int PLUS=102;
	public const int PLUSEQ=103;
	public const int PLUSPLUS=104;
	public const int PRIVATE=105;
	public const int PROTECTED=106;
	public const int PUBLIC=107;
	public const int QUES=108;
	public const int RBRACE=109;
	public const int RBRACKET=110;
	public const int RETURN=111;
	public const int RPAREN=112;
	public const int SEMI=113;
	public const int SHORT=114;
	public const int SLASH=115;
	public const int SLASHEQ=116;
	public const int STAR=117;
	public const int STAREQ=118;
	public const int STATIC=119;
	public const int STRICTFP=120;
	public const int SUB=121;
	public const int SUBEQ=122;
	public const int SUBSUB=123;
	public const int SUPER=124;
	public const int SWITCH=125;
	public const int SYNCHRONIZED=126;
	public const int Sign=127;
	public const int SignedInteger=128;
	public const int StringLiteral=129;
	public const int SurrogateIdentifer=130;
	public const int THIS=131;
	public const int THROW=132;
	public const int THROWS=133;
	public const int TILDE=134;
	public const int TRANSIENT=135;
	public const int TRY=136;
	public const int Underscores=137;
	public const int UnicodeEscape=138;
	public const int VOID=139;
	public const int VOLATILE=140;
	public const int WHILE=141;
	public const int WS=142;
	public const int ZeroToThree=143;

	public JavaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[400+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return JavaParser.tokenNames; } }
	public override string GrammarFileName { get { return "Java.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();
	// $ANTLR start "compilationUnit"
	// Java.g:301:1: public compilationUnit : ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ;
	[GrammarRule("compilationUnit")]
	public AstParserRuleReturnScope<object, IToken> compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 1);
		TraceIn("compilationUnit", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int compilationUnit_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> annotations1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> packageDeclaration2 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> importDeclaration3 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeDeclaration4 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(301, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// Java.g:302:5: ( ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
			DebugEnterAlt(1);
			// Java.g:302:9: ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(302, 9);
			// Java.g:302:9: ( ( annotations )? packageDeclaration )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==MONKEYS_AT))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred2_Java_fragment)))
				{
					alt2 = 1;
				}
			}
			else if ((LA2_1==PACKAGE))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:302:13: ( annotations )? packageDeclaration
				{
				DebugLocation(302, 13);
				// Java.g:302:13: ( annotations )?
				int alt1=2;
				try { DebugEnterSubRule(1);
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==MONKEYS_AT))
				{
					alt1 = 1;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:302:14: annotations
					{
					DebugLocation(302, 14);
					PushFollow(Follow._annotations_in_compilationUnit107);
					annotations1=annotations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotations1.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(1); }

				DebugLocation(304, 13);
				PushFollow(Follow._packageDeclaration_in_compilationUnit136);
				packageDeclaration2=packageDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, packageDeclaration2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(306, 9);
			// Java.g:306:9: ( importDeclaration )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==IMPORT))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:306:10: importDeclaration
					{
					DebugLocation(306, 10);
					PushFollow(Follow._importDeclaration_in_compilationUnit158);
					importDeclaration3=importDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, importDeclaration3.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(308, 9);
			// Java.g:308:9: ( typeDeclaration )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==ABSTRACT||LA4_1==BOOLEAN||LA4_1==BYTE||(LA4_1>=CHAR && LA4_1<=CLASS)||LA4_1==DOUBLE||LA4_1==ENUM||LA4_1==FINAL||LA4_1==FLOAT||LA4_1==IDENTIFIER||(LA4_1>=INT && LA4_1<=INTERFACE)||LA4_1==LONG||(LA4_1>=LT && LA4_1<=NATIVE)||(LA4_1>=PRIVATE && LA4_1<=PUBLIC)||(LA4_1>=SEMI && LA4_1<=SHORT)||(LA4_1>=STATIC && LA4_1<=STRICTFP)||LA4_1==SYNCHRONIZED||LA4_1==TRANSIENT||(LA4_1>=VOID && LA4_1<=VOLATILE)))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:308:10: typeDeclaration
					{
					DebugLocation(308, 10);
					PushFollow(Follow._typeDeclaration_in_compilationUnit180);
					typeDeclaration4=typeDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration4.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compilationUnit", 1);
			LeaveRule("compilationUnit", 1);
			LeaveRule_compilationUnit();
			if (state.backtracking > 0) { Memoize(input, 1, compilationUnit_StartIndex); }

		}
		DebugLocation(310, 4);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return retval;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();
	// $ANTLR start "packageDeclaration"
	// Java.g:312:1: packageDeclaration : 'package' qualifiedName ';' ;
	[GrammarRule("packageDeclaration")]
	private AstParserRuleReturnScope<object, IToken> packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 2);
		TraceIn("packageDeclaration", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int packageDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal5 = default(IToken);
		IToken char_literal7 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName6 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal5_tree = default(object);
		object char_literal7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(312, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// Java.g:313:5: ( 'package' qualifiedName ';' )
			DebugEnterAlt(1);
			// Java.g:313:9: 'package' qualifiedName ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(313, 9);
			string_literal5=(IToken)Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration211); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal5_tree = (object)adaptor.Create(string_literal5);
			adaptor.AddChild(root_0, string_literal5_tree);
			}
			DebugLocation(313, 19);
			PushFollow(Follow._qualifiedName_in_packageDeclaration213);
			qualifiedName6=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName6.Tree);
			DebugLocation(314, 9);
			char_literal7=(IToken)Match(input,SEMI,Follow._SEMI_in_packageDeclaration223); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal7_tree = (object)adaptor.Create(char_literal7);
			adaptor.AddChild(root_0, char_literal7_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("packageDeclaration", 2);
			LeaveRule("packageDeclaration", 2);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 2, packageDeclaration_StartIndex); }

		}
		DebugLocation(315, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return retval;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();
	// $ANTLR start "importDeclaration"
	// Java.g:317:1: importDeclaration : ( 'import' ( 'static' )? IDENTIFIER '.' '*' ';' | 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';' );
	[GrammarRule("importDeclaration")]
	private AstParserRuleReturnScope<object, IToken> importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 3);
		TraceIn("importDeclaration", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int importDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal8 = default(IToken);
		IToken string_literal9 = default(IToken);
		IToken IDENTIFIER10 = default(IToken);
		IToken char_literal11 = default(IToken);
		IToken char_literal12 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken string_literal14 = default(IToken);
		IToken string_literal15 = default(IToken);
		IToken IDENTIFIER16 = default(IToken);
		IToken char_literal17 = default(IToken);
		IToken IDENTIFIER18 = default(IToken);
		IToken char_literal19 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal21 = default(IToken);

		object string_literal8_tree = default(object);
		object string_literal9_tree = default(object);
		object IDENTIFIER10_tree = default(object);
		object char_literal11_tree = default(object);
		object char_literal12_tree = default(object);
		object char_literal13_tree = default(object);
		object string_literal14_tree = default(object);
		object string_literal15_tree = default(object);
		object IDENTIFIER16_tree = default(object);
		object char_literal17_tree = default(object);
		object IDENTIFIER18_tree = default(object);
		object char_literal19_tree = default(object);
		object char_literal20_tree = default(object);
		object char_literal21_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(317, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// Java.g:318:5: ( 'import' ( 'static' )? IDENTIFIER '.' '*' ';' | 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==IMPORT))
			{
				int LA9_2 = input.LA(2);

				if ((LA9_2==STATIC))
				{
					int LA9_3 = input.LA(3);

					if ((LA9_3==IDENTIFIER))
					{
						int LA9_4 = input.LA(4);

						if ((LA9_4==DOT))
						{
							int LA9_5 = input.LA(5);

							if ((LA9_5==STAR))
							{
								alt9 = 1;
							}
							else if ((LA9_5==IDENTIFIER))
							{
								alt9 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA9_2==IDENTIFIER))
				{
					int LA9_3 = input.LA(3);

					if ((LA9_3==DOT))
					{
						int LA9_4 = input.LA(4);

						if ((LA9_4==STAR))
						{
							alt9 = 1;
						}
						else if ((LA9_4==IDENTIFIER))
						{
							alt9 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:318:9: 'import' ( 'static' )? IDENTIFIER '.' '*' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(318, 9);
				string_literal8=(IToken)Match(input,IMPORT,Follow._IMPORT_in_importDeclaration244); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal8_tree = (object)adaptor.Create(string_literal8);
				adaptor.AddChild(root_0, string_literal8_tree);
				}
				DebugLocation(319, 9);
				// Java.g:319:9: ( 'static' )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==STATIC))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:319:10: 'static'
					{
					DebugLocation(319, 10);
					string_literal9=(IToken)Match(input,STATIC,Follow._STATIC_in_importDeclaration256); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal9_tree = (object)adaptor.Create(string_literal9);
					adaptor.AddChild(root_0, string_literal9_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(321, 9);
				IDENTIFIER10=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration277); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER10_tree = (object)adaptor.Create(IDENTIFIER10);
				adaptor.AddChild(root_0, IDENTIFIER10_tree);
				}
				DebugLocation(321, 20);
				char_literal11=(IToken)Match(input,DOT,Follow._DOT_in_importDeclaration279); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal11_tree = (object)adaptor.Create(char_literal11);
				adaptor.AddChild(root_0, char_literal11_tree);
				}
				DebugLocation(321, 24);
				char_literal12=(IToken)Match(input,STAR,Follow._STAR_in_importDeclaration281); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal12_tree = (object)adaptor.Create(char_literal12);
				adaptor.AddChild(root_0, char_literal12_tree);
				}
				DebugLocation(322, 9);
				char_literal13=(IToken)Match(input,SEMI,Follow._SEMI_in_importDeclaration291); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal13_tree = (object)adaptor.Create(char_literal13);
				adaptor.AddChild(root_0, char_literal13_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:323:9: 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(323, 9);
				string_literal14=(IToken)Match(input,IMPORT,Follow._IMPORT_in_importDeclaration308); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal14_tree = (object)adaptor.Create(string_literal14);
				adaptor.AddChild(root_0, string_literal14_tree);
				}
				DebugLocation(324, 9);
				// Java.g:324:9: ( 'static' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==STATIC))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:324:10: 'static'
					{
					DebugLocation(324, 10);
					string_literal15=(IToken)Match(input,STATIC,Follow._STATIC_in_importDeclaration320); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal15_tree = (object)adaptor.Create(string_literal15);
					adaptor.AddChild(root_0, string_literal15_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(326, 9);
				IDENTIFIER16=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration341); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER16_tree = (object)adaptor.Create(IDENTIFIER16);
				adaptor.AddChild(root_0, IDENTIFIER16_tree);
				}
				DebugLocation(327, 9);
				// Java.g:327:9: ( '.' IDENTIFIER )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1==DOT))
					{
						int LA7_2 = input.LA(2);

						if ((LA7_2==IDENTIFIER))
						{
							alt7 = 1;
						}


					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:327:10: '.' IDENTIFIER
						{
						DebugLocation(327, 10);
						char_literal17=(IToken)Match(input,DOT,Follow._DOT_in_importDeclaration352); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal17_tree = (object)adaptor.Create(char_literal17);
						adaptor.AddChild(root_0, char_literal17_tree);
						}
						DebugLocation(327, 14);
						IDENTIFIER18=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration354); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER18_tree = (object)adaptor.Create(IDENTIFIER18);
						adaptor.AddChild(root_0, IDENTIFIER18_tree);
						}

						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(329, 9);
				// Java.g:329:9: ( '.' '*' )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==DOT))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:329:10: '.' '*'
					{
					DebugLocation(329, 10);
					char_literal19=(IToken)Match(input,DOT,Follow._DOT_in_importDeclaration376); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal19_tree = (object)adaptor.Create(char_literal19);
					adaptor.AddChild(root_0, char_literal19_tree);
					}
					DebugLocation(329, 14);
					char_literal20=(IToken)Match(input,STAR,Follow._STAR_in_importDeclaration378); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal20_tree = (object)adaptor.Create(char_literal20);
					adaptor.AddChild(root_0, char_literal20_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(331, 9);
				char_literal21=(IToken)Match(input,SEMI,Follow._SEMI_in_importDeclaration399); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal21_tree = (object)adaptor.Create(char_literal21);
				adaptor.AddChild(root_0, char_literal21_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importDeclaration", 3);
			LeaveRule("importDeclaration", 3);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 3, importDeclaration_StartIndex); }

		}
		DebugLocation(332, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return retval;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_qualifiedImportName();
	partial void LeaveRule_qualifiedImportName();
	// $ANTLR start "qualifiedImportName"
	// Java.g:334:1: qualifiedImportName : IDENTIFIER ( '.' IDENTIFIER )* ;
	[GrammarRule("qualifiedImportName")]
	private AstParserRuleReturnScope<object, IToken> qualifiedImportName()
	{
		EnterRule_qualifiedImportName();
		EnterRule("qualifiedImportName", 4);
		TraceIn("qualifiedImportName", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedImportName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER22 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken IDENTIFIER24 = default(IToken);

		object IDENTIFIER22_tree = default(object);
		object char_literal23_tree = default(object);
		object IDENTIFIER24_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedImportName");
		DebugLocation(334, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// Java.g:335:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
			DebugEnterAlt(1);
			// Java.g:335:9: IDENTIFIER ( '.' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(335, 9);
			IDENTIFIER22=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedImportName419); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER22_tree = (object)adaptor.Create(IDENTIFIER22);
			adaptor.AddChild(root_0, IDENTIFIER22_tree);
			}
			DebugLocation(336, 9);
			// Java.g:336:9: ( '.' IDENTIFIER )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==DOT))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:336:10: '.' IDENTIFIER
					{
					DebugLocation(336, 10);
					char_literal23=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedImportName430); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal23_tree = (object)adaptor.Create(char_literal23);
					adaptor.AddChild(root_0, char_literal23_tree);
					}
					DebugLocation(336, 14);
					IDENTIFIER24=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedImportName432); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER24_tree = (object)adaptor.Create(IDENTIFIER24);
					adaptor.AddChild(root_0, IDENTIFIER24_tree);
					}

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedImportName", 4);
			LeaveRule("qualifiedImportName", 4);
			LeaveRule_qualifiedImportName();
			if (state.backtracking > 0) { Memoize(input, 4, qualifiedImportName_StartIndex); }

		}
		DebugLocation(338, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedImportName"); }
		return retval;

	}
	// $ANTLR end "qualifiedImportName"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// Java.g:340:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
	[GrammarRule("typeDeclaration")]
	private AstParserRuleReturnScope<object, IToken> typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 5);
		TraceIn("typeDeclaration", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal26 = default(IToken);
		AstParserRuleReturnScope<object, IToken> classOrInterfaceDeclaration25 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal26_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(340, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// Java.g:341:5: ( classOrInterfaceDeclaration | ';' )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==ABSTRACT||LA11_1==BOOLEAN||LA11_1==BYTE||(LA11_1>=CHAR && LA11_1<=CLASS)||LA11_1==DOUBLE||LA11_1==ENUM||LA11_1==FINAL||LA11_1==FLOAT||LA11_1==IDENTIFIER||(LA11_1>=INT && LA11_1<=INTERFACE)||LA11_1==LONG||(LA11_1>=LT && LA11_1<=NATIVE)||(LA11_1>=PRIVATE && LA11_1<=PUBLIC)||LA11_1==SHORT||(LA11_1>=STATIC && LA11_1<=STRICTFP)||LA11_1==SYNCHRONIZED||LA11_1==TRANSIENT||(LA11_1>=VOID && LA11_1<=VOLATILE)))
			{
				alt11 = 1;
			}
			else if ((LA11_1==SEMI))
			{
				alt11 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:341:9: classOrInterfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(341, 9);
				PushFollow(Follow._classOrInterfaceDeclaration_in_typeDeclaration463);
				classOrInterfaceDeclaration25=classOrInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceDeclaration25.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:342:9: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(342, 9);
				char_literal26=(IToken)Match(input,SEMI,Follow._SEMI_in_typeDeclaration473); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal26_tree = (object)adaptor.Create(char_literal26);
				adaptor.AddChild(root_0, char_literal26_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDeclaration", 5);
			LeaveRule("typeDeclaration", 5);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 5, typeDeclaration_StartIndex); }

		}
		DebugLocation(343, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return retval;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_classOrInterfaceDeclaration();
	partial void LeaveRule_classOrInterfaceDeclaration();
	// $ANTLR start "classOrInterfaceDeclaration"
	// Java.g:345:1: classOrInterfaceDeclaration : ( classDeclaration | interfaceDeclaration );
	[GrammarRule("classOrInterfaceDeclaration")]
	private AstParserRuleReturnScope<object, IToken> classOrInterfaceDeclaration()
	{
		EnterRule_classOrInterfaceDeclaration();
		EnterRule("classOrInterfaceDeclaration", 6);
		TraceIn("classOrInterfaceDeclaration", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classOrInterfaceDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> classDeclaration27 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceDeclaration28 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "classOrInterfaceDeclaration");
		DebugLocation(345, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// Java.g:346:5: ( classDeclaration | interfaceDeclaration )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt12 = 1;
				}
				break;
			case INTERFACE:
				{
				alt12 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:346:10: classDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(346, 10);
				PushFollow(Follow._classDeclaration_in_classOrInterfaceDeclaration494);
				classDeclaration27=classDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDeclaration27.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:347:9: interfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(347, 9);
				PushFollow(Follow._interfaceDeclaration_in_classOrInterfaceDeclaration504);
				interfaceDeclaration28=interfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDeclaration28.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classOrInterfaceDeclaration", 6);
			LeaveRule("classOrInterfaceDeclaration", 6);
			LeaveRule_classOrInterfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 6, classOrInterfaceDeclaration_StartIndex); }

		}
		DebugLocation(348, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceDeclaration"); }
		return retval;

	}
	// $ANTLR end "classOrInterfaceDeclaration"

	partial void EnterRule_modifiers();
	partial void LeaveRule_modifiers();
	// $ANTLR start "modifiers"
	// Java.g:351:1: modifiers : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* ;
	[GrammarRule("modifiers")]
	private AstParserRuleReturnScope<object, IToken> modifiers()
	{
		EnterRule_modifiers();
		EnterRule("modifiers", 7);
		TraceIn("modifiers", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal30 = default(IToken);
		IToken string_literal31 = default(IToken);
		IToken string_literal32 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken string_literal36 = default(IToken);
		IToken string_literal37 = default(IToken);
		IToken string_literal38 = default(IToken);
		IToken string_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		AstParserRuleReturnScope<object, IToken> annotation29 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal30_tree = default(object);
		object string_literal31_tree = default(object);
		object string_literal32_tree = default(object);
		object string_literal33_tree = default(object);
		object string_literal34_tree = default(object);
		object string_literal35_tree = default(object);
		object string_literal36_tree = default(object);
		object string_literal37_tree = default(object);
		object string_literal38_tree = default(object);
		object string_literal39_tree = default(object);
		object string_literal40_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "modifiers");
		DebugLocation(351, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// Java.g:352:5: ( ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* )
			DebugEnterAlt(1);
			// Java.g:353:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(353, 5);
			// Java.g:353:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=13;
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case MONKEYS_AT:
					{
					int LA13_2 = input.LA(2);

					if ((LA13_2==IDENTIFIER))
					{
						alt13 = 1;
					}


					}
					break;
				case PUBLIC:
					{
					alt13 = 2;
					}
					break;
				case PROTECTED:
					{
					alt13 = 3;
					}
					break;
				case PRIVATE:
					{
					alt13 = 4;
					}
					break;
				case STATIC:
					{
					alt13 = 5;
					}
					break;
				case ABSTRACT:
					{
					alt13 = 6;
					}
					break;
				case FINAL:
					{
					alt13 = 7;
					}
					break;
				case NATIVE:
					{
					alt13 = 8;
					}
					break;
				case SYNCHRONIZED:
					{
					alt13 = 9;
					}
					break;
				case TRANSIENT:
					{
					alt13 = 10;
					}
					break;
				case VOLATILE:
					{
					alt13 = 11;
					}
					break;
				case STRICTFP:
					{
					alt13 = 12;
					}
					break;
				}

				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:353:10: annotation
					{
					DebugLocation(353, 10);
					PushFollow(Follow._annotation_in_modifiers539);
					annotation29=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotation29.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:354:9: 'public'
					{
					DebugLocation(354, 9);
					string_literal30=(IToken)Match(input,PUBLIC,Follow._PUBLIC_in_modifiers549); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal30_tree = (object)adaptor.Create(string_literal30);
					adaptor.AddChild(root_0, string_literal30_tree);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:355:9: 'protected'
					{
					DebugLocation(355, 9);
					string_literal31=(IToken)Match(input,PROTECTED,Follow._PROTECTED_in_modifiers559); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal31_tree = (object)adaptor.Create(string_literal31);
					adaptor.AddChild(root_0, string_literal31_tree);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Java.g:356:9: 'private'
					{
					DebugLocation(356, 9);
					string_literal32=(IToken)Match(input,PRIVATE,Follow._PRIVATE_in_modifiers569); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal32_tree = (object)adaptor.Create(string_literal32);
					adaptor.AddChild(root_0, string_literal32_tree);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// Java.g:357:9: 'static'
					{
					DebugLocation(357, 9);
					string_literal33=(IToken)Match(input,STATIC,Follow._STATIC_in_modifiers579); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal33_tree = (object)adaptor.Create(string_literal33);
					adaptor.AddChild(root_0, string_literal33_tree);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// Java.g:358:9: 'abstract'
					{
					DebugLocation(358, 9);
					string_literal34=(IToken)Match(input,ABSTRACT,Follow._ABSTRACT_in_modifiers589); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal34_tree = (object)adaptor.Create(string_literal34);
					adaptor.AddChild(root_0, string_literal34_tree);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// Java.g:359:9: 'final'
					{
					DebugLocation(359, 9);
					string_literal35=(IToken)Match(input,FINAL,Follow._FINAL_in_modifiers599); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal35_tree = (object)adaptor.Create(string_literal35);
					adaptor.AddChild(root_0, string_literal35_tree);
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// Java.g:360:9: 'native'
					{
					DebugLocation(360, 9);
					string_literal36=(IToken)Match(input,NATIVE,Follow._NATIVE_in_modifiers609); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal36_tree = (object)adaptor.Create(string_literal36);
					adaptor.AddChild(root_0, string_literal36_tree);
					}

					}
					break;
				case 9:
					DebugEnterAlt(9);
					// Java.g:361:9: 'synchronized'
					{
					DebugLocation(361, 9);
					string_literal37=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifiers619); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal37_tree = (object)adaptor.Create(string_literal37);
					adaptor.AddChild(root_0, string_literal37_tree);
					}

					}
					break;
				case 10:
					DebugEnterAlt(10);
					// Java.g:362:9: 'transient'
					{
					DebugLocation(362, 9);
					string_literal38=(IToken)Match(input,TRANSIENT,Follow._TRANSIENT_in_modifiers629); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal38_tree = (object)adaptor.Create(string_literal38);
					adaptor.AddChild(root_0, string_literal38_tree);
					}

					}
					break;
				case 11:
					DebugEnterAlt(11);
					// Java.g:363:9: 'volatile'
					{
					DebugLocation(363, 9);
					string_literal39=(IToken)Match(input,VOLATILE,Follow._VOLATILE_in_modifiers639); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal39_tree = (object)adaptor.Create(string_literal39);
					adaptor.AddChild(root_0, string_literal39_tree);
					}

					}
					break;
				case 12:
					DebugEnterAlt(12);
					// Java.g:364:9: 'strictfp'
					{
					DebugLocation(364, 9);
					string_literal40=(IToken)Match(input,STRICTFP,Follow._STRICTFP_in_modifiers649); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal40_tree = (object)adaptor.Create(string_literal40);
					adaptor.AddChild(root_0, string_literal40_tree);
					}

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifiers", 7);
			LeaveRule("modifiers", 7);
			LeaveRule_modifiers();
			if (state.backtracking > 0) { Memoize(input, 7, modifiers_StartIndex); }

		}
		DebugLocation(366, 4);
		} finally { DebugExitRule(GrammarFileName, "modifiers"); }
		return retval;

	}
	// $ANTLR end "modifiers"

	partial void EnterRule_variableModifiers();
	partial void LeaveRule_variableModifiers();
	// $ANTLR start "variableModifiers"
	// Java.g:369:1: variableModifiers : ( 'final' | annotation )* ;
	[GrammarRule("variableModifiers")]
	private AstParserRuleReturnScope<object, IToken> variableModifiers()
	{
		EnterRule_variableModifiers();
		EnterRule("variableModifiers", 8);
		TraceIn("variableModifiers", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableModifiers_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal41 = default(IToken);
		AstParserRuleReturnScope<object, IToken> annotation42 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal41_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableModifiers");
		DebugLocation(369, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// Java.g:370:5: ( ( 'final' | annotation )* )
			DebugEnterAlt(1);
			// Java.g:370:9: ( 'final' | annotation )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(370, 9);
			// Java.g:370:9: ( 'final' | annotation )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=3;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==FINAL))
				{
					alt14 = 1;
				}
				else if ((LA14_1==MONKEYS_AT))
				{
					alt14 = 2;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:370:13: 'final'
					{
					DebugLocation(370, 13);
					string_literal41=(IToken)Match(input,FINAL,Follow._FINAL_in_variableModifiers681); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal41_tree = (object)adaptor.Create(string_literal41);
					adaptor.AddChild(root_0, string_literal41_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:371:13: annotation
					{
					DebugLocation(371, 13);
					PushFollow(Follow._annotation_in_variableModifiers695);
					annotation42=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotation42.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableModifiers", 8);
			LeaveRule("variableModifiers", 8);
			LeaveRule_variableModifiers();
			if (state.backtracking > 0) { Memoize(input, 8, variableModifiers_StartIndex); }

		}
		DebugLocation(373, 4);
		} finally { DebugExitRule(GrammarFileName, "variableModifiers"); }
		return retval;

	}
	// $ANTLR end "variableModifiers"

	partial void EnterRule_classDeclaration();
	partial void LeaveRule_classDeclaration();
	// $ANTLR start "classDeclaration"
	// Java.g:376:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );
	[GrammarRule("classDeclaration")]
	private AstParserRuleReturnScope<object, IToken> classDeclaration()
	{
		EnterRule_classDeclaration();
		EnterRule("classDeclaration", 9);
		TraceIn("classDeclaration", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> normalClassDeclaration43 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumDeclaration44 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "classDeclaration");
		DebugLocation(376, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// Java.g:377:5: ( normalClassDeclaration | enumDeclaration )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				alt15 = 1;
				}
				break;
			case ENUM:
				{
				alt15 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:377:9: normalClassDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(377, 9);
				PushFollow(Follow._normalClassDeclaration_in_classDeclaration731);
				normalClassDeclaration43=normalClassDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalClassDeclaration43.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:378:9: enumDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(378, 9);
				PushFollow(Follow._enumDeclaration_in_classDeclaration741);
				enumDeclaration44=enumDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumDeclaration44.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classDeclaration", 9);
			LeaveRule("classDeclaration", 9);
			LeaveRule_classDeclaration();
			if (state.backtracking > 0) { Memoize(input, 9, classDeclaration_StartIndex); }

		}
		DebugLocation(379, 4);
		} finally { DebugExitRule(GrammarFileName, "classDeclaration"); }
		return retval;

	}
	// $ANTLR end "classDeclaration"

	partial void EnterRule_normalClassDeclaration();
	partial void LeaveRule_normalClassDeclaration();
	// $ANTLR start "normalClassDeclaration"
	// Java.g:381:1: normalClassDeclaration : modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody ;
	[GrammarRule("normalClassDeclaration")]
	private AstParserRuleReturnScope<object, IToken> normalClassDeclaration()
	{
		EnterRule_normalClassDeclaration();
		EnterRule("normalClassDeclaration", 10);
		TraceIn("normalClassDeclaration", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int normalClassDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal46 = default(IToken);
		IToken IDENTIFIER47 = default(IToken);
		IToken string_literal49 = default(IToken);
		IToken string_literal51 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers45 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters48 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type50 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeList52 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classBody53 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal46_tree = default(object);
		object IDENTIFIER47_tree = default(object);
		object string_literal49_tree = default(object);
		object string_literal51_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "normalClassDeclaration");
		DebugLocation(381, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// Java.g:382:5: ( modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody )
			DebugEnterAlt(1);
			// Java.g:382:9: modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(382, 9);
			PushFollow(Follow._modifiers_in_normalClassDeclaration761);
			modifiers45=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers45.Tree);
			DebugLocation(382, 20);
			string_literal46=(IToken)Match(input,CLASS,Follow._CLASS_in_normalClassDeclaration764); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal46_tree = (object)adaptor.Create(string_literal46);
			adaptor.AddChild(root_0, string_literal46_tree);
			}
			DebugLocation(382, 28);
			IDENTIFIER47=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalClassDeclaration766); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER47_tree = (object)adaptor.Create(IDENTIFIER47);
			adaptor.AddChild(root_0, IDENTIFIER47_tree);
			}
			DebugLocation(383, 9);
			// Java.g:383:9: ( typeParameters )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==LT))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:383:10: typeParameters
				{
				DebugLocation(383, 10);
				PushFollow(Follow._typeParameters_in_normalClassDeclaration777);
				typeParameters48=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters48.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(385, 9);
			// Java.g:385:9: ( 'extends' type )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==EXTENDS))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:385:10: 'extends' type
				{
				DebugLocation(385, 10);
				string_literal49=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_normalClassDeclaration799); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal49_tree = (object)adaptor.Create(string_literal49);
				adaptor.AddChild(root_0, string_literal49_tree);
				}
				DebugLocation(385, 20);
				PushFollow(Follow._type_in_normalClassDeclaration801);
				type50=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type50.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(387, 9);
			// Java.g:387:9: ( 'implements' typeList )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==IMPLEMENTS))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:387:10: 'implements' typeList
				{
				DebugLocation(387, 10);
				string_literal51=(IToken)Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_normalClassDeclaration823); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal51_tree = (object)adaptor.Create(string_literal51);
				adaptor.AddChild(root_0, string_literal51_tree);
				}
				DebugLocation(387, 23);
				PushFollow(Follow._typeList_in_normalClassDeclaration825);
				typeList52=typeList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeList52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(389, 9);
			PushFollow(Follow._classBody_in_normalClassDeclaration858);
			classBody53=classBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, classBody53.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("normalClassDeclaration", 10);
			LeaveRule("normalClassDeclaration", 10);
			LeaveRule_normalClassDeclaration();
			if (state.backtracking > 0) { Memoize(input, 10, normalClassDeclaration_StartIndex); }

		}
		DebugLocation(390, 4);
		} finally { DebugExitRule(GrammarFileName, "normalClassDeclaration"); }
		return retval;

	}
	// $ANTLR end "normalClassDeclaration"

	partial void EnterRule_typeParameters();
	partial void LeaveRule_typeParameters();
	// $ANTLR start "typeParameters"
	// Java.g:393:1: typeParameters : '<' typeParameter ( ',' typeParameter )* '>' ;
	[GrammarRule("typeParameters")]
	private AstParserRuleReturnScope<object, IToken> typeParameters()
	{
		EnterRule_typeParameters();
		EnterRule("typeParameters", 11);
		TraceIn("typeParameters", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeParameters_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken char_literal58 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeParameter55 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameter57 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal54_tree = default(object);
		object char_literal56_tree = default(object);
		object char_literal58_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeParameters");
		DebugLocation(393, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// Java.g:394:5: ( '<' typeParameter ( ',' typeParameter )* '>' )
			DebugEnterAlt(1);
			// Java.g:394:9: '<' typeParameter ( ',' typeParameter )* '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(394, 9);
			char_literal54=(IToken)Match(input,LT,Follow._LT_in_typeParameters879); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal54_tree = (object)adaptor.Create(char_literal54);
			adaptor.AddChild(root_0, char_literal54_tree);
			}
			DebugLocation(395, 13);
			PushFollow(Follow._typeParameter_in_typeParameters893);
			typeParameter55=typeParameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameter55.Tree);
			DebugLocation(396, 13);
			// Java.g:396:13: ( ',' typeParameter )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==COMMA))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:396:14: ',' typeParameter
					{
					DebugLocation(396, 14);
					char_literal56=(IToken)Match(input,COMMA,Follow._COMMA_in_typeParameters908); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal56_tree = (object)adaptor.Create(char_literal56);
					adaptor.AddChild(root_0, char_literal56_tree);
					}
					DebugLocation(396, 18);
					PushFollow(Follow._typeParameter_in_typeParameters910);
					typeParameter57=typeParameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameter57.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(398, 9);
			char_literal58=(IToken)Match(input,GT,Follow._GT_in_typeParameters935); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal58_tree = (object)adaptor.Create(char_literal58);
			adaptor.AddChild(root_0, char_literal58_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeParameters", 11);
			LeaveRule("typeParameters", 11);
			LeaveRule_typeParameters();
			if (state.backtracking > 0) { Memoize(input, 11, typeParameters_StartIndex); }

		}
		DebugLocation(399, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameters"); }
		return retval;

	}
	// $ANTLR end "typeParameters"

	partial void EnterRule_typeParameter();
	partial void LeaveRule_typeParameter();
	// $ANTLR start "typeParameter"
	// Java.g:401:1: typeParameter : IDENTIFIER ( 'extends' typeBound )? ;
	[GrammarRule("typeParameter")]
	private AstParserRuleReturnScope<object, IToken> typeParameter()
	{
		EnterRule_typeParameter();
		EnterRule("typeParameter", 12);
		TraceIn("typeParameter", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeParameter_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER59 = default(IToken);
		IToken string_literal60 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeBound61 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER59_tree = default(object);
		object string_literal60_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeParameter");
		DebugLocation(401, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// Java.g:402:5: ( IDENTIFIER ( 'extends' typeBound )? )
			DebugEnterAlt(1);
			// Java.g:402:9: IDENTIFIER ( 'extends' typeBound )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(402, 9);
			IDENTIFIER59=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_typeParameter955); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER59_tree = (object)adaptor.Create(IDENTIFIER59);
			adaptor.AddChild(root_0, IDENTIFIER59_tree);
			}
			DebugLocation(403, 9);
			// Java.g:403:9: ( 'extends' typeBound )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==EXTENDS))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:403:10: 'extends' typeBound
				{
				DebugLocation(403, 10);
				string_literal60=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_typeParameter966); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal60_tree = (object)adaptor.Create(string_literal60);
				adaptor.AddChild(root_0, string_literal60_tree);
				}
				DebugLocation(403, 20);
				PushFollow(Follow._typeBound_in_typeParameter968);
				typeBound61=typeBound();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeBound61.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeParameter", 12);
			LeaveRule("typeParameter", 12);
			LeaveRule_typeParameter();
			if (state.backtracking > 0) { Memoize(input, 12, typeParameter_StartIndex); }

		}
		DebugLocation(405, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameter"); }
		return retval;

	}
	// $ANTLR end "typeParameter"

	partial void EnterRule_typeBound();
	partial void LeaveRule_typeBound();
	// $ANTLR start "typeBound"
	// Java.g:408:1: typeBound : type ( '&' type )* ;
	[GrammarRule("typeBound")]
	private AstParserRuleReturnScope<object, IToken> typeBound()
	{
		EnterRule_typeBound();
		EnterRule("typeBound", 13);
		TraceIn("typeBound", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeBound_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal63 = default(IToken);
		AstParserRuleReturnScope<object, IToken> type62 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type64 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal63_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeBound");
		DebugLocation(408, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// Java.g:409:5: ( type ( '&' type )* )
			DebugEnterAlt(1);
			// Java.g:409:9: type ( '&' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(409, 9);
			PushFollow(Follow._type_in_typeBound1000);
			type62=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type62.Tree);
			DebugLocation(410, 9);
			// Java.g:410:9: ( '&' type )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==AMP))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:410:10: '&' type
					{
					DebugLocation(410, 10);
					char_literal63=(IToken)Match(input,AMP,Follow._AMP_in_typeBound1011); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal63_tree = (object)adaptor.Create(char_literal63);
					adaptor.AddChild(root_0, char_literal63_tree);
					}
					DebugLocation(410, 14);
					PushFollow(Follow._type_in_typeBound1013);
					type64=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type64.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeBound", 13);
			LeaveRule("typeBound", 13);
			LeaveRule_typeBound();
			if (state.backtracking > 0) { Memoize(input, 13, typeBound_StartIndex); }

		}
		DebugLocation(412, 4);
		} finally { DebugExitRule(GrammarFileName, "typeBound"); }
		return retval;

	}
	// $ANTLR end "typeBound"

	partial void EnterRule_enumDeclaration();
	partial void LeaveRule_enumDeclaration();
	// $ANTLR start "enumDeclaration"
	// Java.g:415:1: enumDeclaration : modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody ;
	[GrammarRule("enumDeclaration")]
	private AstParserRuleReturnScope<object, IToken> enumDeclaration()
	{
		EnterRule_enumDeclaration();
		EnterRule("enumDeclaration", 14);
		TraceIn("enumDeclaration", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal66 = default(IToken);
		IToken IDENTIFIER67 = default(IToken);
		IToken string_literal68 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers65 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeList69 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumBody70 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal66_tree = default(object);
		object IDENTIFIER67_tree = default(object);
		object string_literal68_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumDeclaration");
		DebugLocation(415, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// Java.g:416:5: ( modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody )
			DebugEnterAlt(1);
			// Java.g:416:9: modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(416, 9);
			PushFollow(Follow._modifiers_in_enumDeclaration1045);
			modifiers65=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers65.Tree);
			DebugLocation(417, 9);
			// Java.g:417:9: ( 'enum' )
			DebugEnterAlt(1);
			// Java.g:417:10: 'enum'
			{
			DebugLocation(417, 10);
			string_literal66=(IToken)Match(input,ENUM,Follow._ENUM_in_enumDeclaration1057); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal66_tree = (object)adaptor.Create(string_literal66);
			adaptor.AddChild(root_0, string_literal66_tree);
			}

			}

			DebugLocation(419, 9);
			IDENTIFIER67=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumDeclaration1078); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER67_tree = (object)adaptor.Create(IDENTIFIER67);
			adaptor.AddChild(root_0, IDENTIFIER67_tree);
			}
			DebugLocation(420, 9);
			// Java.g:420:9: ( 'implements' typeList )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==IMPLEMENTS))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:420:10: 'implements' typeList
				{
				DebugLocation(420, 10);
				string_literal68=(IToken)Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_enumDeclaration1089); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal68_tree = (object)adaptor.Create(string_literal68);
				adaptor.AddChild(root_0, string_literal68_tree);
				}
				DebugLocation(420, 23);
				PushFollow(Follow._typeList_in_enumDeclaration1091);
				typeList69=typeList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeList69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(422, 9);
			PushFollow(Follow._enumBody_in_enumDeclaration1112);
			enumBody70=enumBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumBody70.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumDeclaration", 14);
			LeaveRule("enumDeclaration", 14);
			LeaveRule_enumDeclaration();
			if (state.backtracking > 0) { Memoize(input, 14, enumDeclaration_StartIndex); }

		}
		DebugLocation(423, 4);
		} finally { DebugExitRule(GrammarFileName, "enumDeclaration"); }
		return retval;

	}
	// $ANTLR end "enumDeclaration"

	partial void EnterRule_enumBody();
	partial void LeaveRule_enumBody();
	// $ANTLR start "enumBody"
	// Java.g:426:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' ;
	[GrammarRule("enumBody")]
	private AstParserRuleReturnScope<object, IToken> enumBody()
	{
		EnterRule_enumBody();
		EnterRule("enumBody", 15);
		TraceIn("enumBody", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumBody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal71 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken char_literal75 = default(IToken);
		AstParserRuleReturnScope<object, IToken> enumConstants72 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumBodyDeclarations74 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal71_tree = default(object);
		object char_literal73_tree = default(object);
		object char_literal75_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumBody");
		DebugLocation(426, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// Java.g:427:5: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' )
			DebugEnterAlt(1);
			// Java.g:427:9: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(427, 9);
			char_literal71=(IToken)Match(input,LBRACE,Follow._LBRACE_in_enumBody1137); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal71_tree = (object)adaptor.Create(char_literal71);
			adaptor.AddChild(root_0, char_literal71_tree);
			}
			DebugLocation(428, 9);
			// Java.g:428:9: ( enumConstants )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==IDENTIFIER||LA23_1==MONKEYS_AT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:428:10: enumConstants
				{
				DebugLocation(428, 10);
				PushFollow(Follow._enumConstants_in_enumBody1148);
				enumConstants72=enumConstants();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstants72.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(430, 9);
			// Java.g:430:9: ( ',' )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==COMMA))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:430:9: ','
				{
				DebugLocation(430, 9);
				char_literal73=(IToken)Match(input,COMMA,Follow._COMMA_in_enumBody1170); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal73_tree = (object)adaptor.Create(char_literal73);
				adaptor.AddChild(root_0, char_literal73_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(431, 9);
			// Java.g:431:9: ( enumBodyDeclarations )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==SEMI))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:431:10: enumBodyDeclarations
				{
				DebugLocation(431, 10);
				PushFollow(Follow._enumBodyDeclarations_in_enumBody1183);
				enumBodyDeclarations74=enumBodyDeclarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumBodyDeclarations74.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(433, 9);
			char_literal75=(IToken)Match(input,RBRACE,Follow._RBRACE_in_enumBody1205); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal75_tree = (object)adaptor.Create(char_literal75);
			adaptor.AddChild(root_0, char_literal75_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumBody", 15);
			LeaveRule("enumBody", 15);
			LeaveRule_enumBody();
			if (state.backtracking > 0) { Memoize(input, 15, enumBody_StartIndex); }

		}
		DebugLocation(434, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBody"); }
		return retval;

	}
	// $ANTLR end "enumBody"

	partial void EnterRule_enumConstants();
	partial void LeaveRule_enumConstants();
	// $ANTLR start "enumConstants"
	// Java.g:436:1: enumConstants : enumConstant ( ',' enumConstant )* ;
	[GrammarRule("enumConstants")]
	private AstParserRuleReturnScope<object, IToken> enumConstants()
	{
		EnterRule_enumConstants();
		EnterRule("enumConstants", 16);
		TraceIn("enumConstants", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstants_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal77 = default(IToken);
		AstParserRuleReturnScope<object, IToken> enumConstant76 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumConstant78 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal77_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumConstants");
		DebugLocation(436, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// Java.g:437:5: ( enumConstant ( ',' enumConstant )* )
			DebugEnterAlt(1);
			// Java.g:437:9: enumConstant ( ',' enumConstant )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(437, 9);
			PushFollow(Follow._enumConstant_in_enumConstants1225);
			enumConstant76=enumConstant();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant76.Tree);
			DebugLocation(438, 9);
			// Java.g:438:9: ( ',' enumConstant )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==COMMA))
				{
					int LA26_2 = input.LA(2);

					if ((LA26_2==IDENTIFIER||LA26_2==MONKEYS_AT))
					{
						alt26 = 1;
					}


				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:438:10: ',' enumConstant
					{
					DebugLocation(438, 10);
					char_literal77=(IToken)Match(input,COMMA,Follow._COMMA_in_enumConstants1236); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal77_tree = (object)adaptor.Create(char_literal77);
					adaptor.AddChild(root_0, char_literal77_tree);
					}
					DebugLocation(438, 14);
					PushFollow(Follow._enumConstant_in_enumConstants1238);
					enumConstant78=enumConstant();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant78.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstants", 16);
			LeaveRule("enumConstants", 16);
			LeaveRule_enumConstants();
			if (state.backtracking > 0) { Memoize(input, 16, enumConstants_StartIndex); }

		}
		DebugLocation(440, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstants"); }
		return retval;

	}
	// $ANTLR end "enumConstants"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();
	// $ANTLR start "enumConstant"
	// Java.g:446:1: enumConstant : ( annotations )? IDENTIFIER ( arguments )? ( classBody )? ;
	[GrammarRule("enumConstant")]
	private AstParserRuleReturnScope<object, IToken> enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 17);
		TraceIn("enumConstant", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstant_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER80 = default(IToken);
		AstParserRuleReturnScope<object, IToken> annotations79 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments81 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classBody82 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER80_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(446, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// Java.g:447:5: ( ( annotations )? IDENTIFIER ( arguments )? ( classBody )? )
			DebugEnterAlt(1);
			// Java.g:447:9: ( annotations )? IDENTIFIER ( arguments )? ( classBody )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(447, 9);
			// Java.g:447:9: ( annotations )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==MONKEYS_AT))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:447:10: annotations
				{
				DebugLocation(447, 10);
				PushFollow(Follow._annotations_in_enumConstant1272);
				annotations79=annotations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotations79.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(449, 9);
			IDENTIFIER80=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumConstant1293); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER80_tree = (object)adaptor.Create(IDENTIFIER80);
			adaptor.AddChild(root_0, IDENTIFIER80_tree);
			}
			DebugLocation(450, 9);
			// Java.g:450:9: ( arguments )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1==LPAREN))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:450:10: arguments
				{
				DebugLocation(450, 10);
				PushFollow(Follow._arguments_in_enumConstant1304);
				arguments81=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(452, 9);
			// Java.g:452:9: ( classBody )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==LBRACE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:452:10: classBody
				{
				DebugLocation(452, 10);
				PushFollow(Follow._classBody_in_enumConstant1326);
				classBody82=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classBody82.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstant", 17);
			LeaveRule("enumConstant", 17);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 17, enumConstant_StartIndex); }

		}
		DebugLocation(456, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return retval;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_enumBodyDeclarations();
	partial void LeaveRule_enumBodyDeclarations();
	// $ANTLR start "enumBodyDeclarations"
	// Java.g:458:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* ;
	[GrammarRule("enumBodyDeclarations")]
	private AstParserRuleReturnScope<object, IToken> enumBodyDeclarations()
	{
		EnterRule_enumBodyDeclarations();
		EnterRule("enumBodyDeclarations", 18);
		TraceIn("enumBodyDeclarations", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumBodyDeclarations_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal83 = default(IToken);
		AstParserRuleReturnScope<object, IToken> classBodyDeclaration84 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal83_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumBodyDeclarations");
		DebugLocation(458, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// Java.g:459:5: ( ';' ( classBodyDeclaration )* )
			DebugEnterAlt(1);
			// Java.g:459:9: ';' ( classBodyDeclaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(459, 9);
			char_literal83=(IToken)Match(input,SEMI,Follow._SEMI_in_enumBodyDeclarations1367); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal83_tree = (object)adaptor.Create(char_literal83);
			adaptor.AddChild(root_0, char_literal83_tree);
			}
			DebugLocation(460, 9);
			// Java.g:460:9: ( classBodyDeclaration )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==ABSTRACT||LA30_1==BOOLEAN||LA30_1==BYTE||(LA30_1>=CHAR && LA30_1<=CLASS)||LA30_1==DOUBLE||LA30_1==ENUM||LA30_1==FINAL||LA30_1==FLOAT||LA30_1==IDENTIFIER||(LA30_1>=INT && LA30_1<=INTERFACE)||LA30_1==LBRACE||LA30_1==LONG||(LA30_1>=LT && LA30_1<=NATIVE)||(LA30_1>=PRIVATE && LA30_1<=PUBLIC)||(LA30_1>=SEMI && LA30_1<=SHORT)||(LA30_1>=STATIC && LA30_1<=STRICTFP)||LA30_1==SYNCHRONIZED||LA30_1==TRANSIENT||(LA30_1>=VOID && LA30_1<=VOLATILE)))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:460:10: classBodyDeclaration
					{
					DebugLocation(460, 10);
					PushFollow(Follow._classBodyDeclaration_in_enumBodyDeclarations1379);
					classBodyDeclaration84=classBodyDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classBodyDeclaration84.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumBodyDeclarations", 18);
			LeaveRule("enumBodyDeclarations", 18);
			LeaveRule_enumBodyDeclarations();
			if (state.backtracking > 0) { Memoize(input, 18, enumBodyDeclarations_StartIndex); }

		}
		DebugLocation(462, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBodyDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumBodyDeclarations"

	partial void EnterRule_interfaceDeclaration();
	partial void LeaveRule_interfaceDeclaration();
	// $ANTLR start "interfaceDeclaration"
	// Java.g:464:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
	[GrammarRule("interfaceDeclaration")]
	private AstParserRuleReturnScope<object, IToken> interfaceDeclaration()
	{
		EnterRule_interfaceDeclaration();
		EnterRule("interfaceDeclaration", 19);
		TraceIn("interfaceDeclaration", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> normalInterfaceDeclaration85 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> annotationTypeDeclaration86 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "interfaceDeclaration");
		DebugLocation(464, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// Java.g:465:5: ( normalInterfaceDeclaration | annotationTypeDeclaration )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTERFACE:
				{
				alt31 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:465:9: normalInterfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(465, 9);
				PushFollow(Follow._normalInterfaceDeclaration_in_interfaceDeclaration1410);
				normalInterfaceDeclaration85=normalInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalInterfaceDeclaration85.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:466:9: annotationTypeDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(466, 9);
				PushFollow(Follow._annotationTypeDeclaration_in_interfaceDeclaration1420);
				annotationTypeDeclaration86=annotationTypeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeDeclaration86.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceDeclaration", 19);
			LeaveRule("interfaceDeclaration", 19);
			LeaveRule_interfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 19, interfaceDeclaration_StartIndex); }

		}
		DebugLocation(467, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceDeclaration"

	partial void EnterRule_normalInterfaceDeclaration();
	partial void LeaveRule_normalInterfaceDeclaration();
	// $ANTLR start "normalInterfaceDeclaration"
	// Java.g:469:1: normalInterfaceDeclaration : modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody ;
	[GrammarRule("normalInterfaceDeclaration")]
	private AstParserRuleReturnScope<object, IToken> normalInterfaceDeclaration()
	{
		EnterRule_normalInterfaceDeclaration();
		EnterRule("normalInterfaceDeclaration", 20);
		TraceIn("normalInterfaceDeclaration", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int normalInterfaceDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal88 = default(IToken);
		IToken IDENTIFIER89 = default(IToken);
		IToken string_literal91 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers87 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters90 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeList92 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceBody93 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal88_tree = default(object);
		object IDENTIFIER89_tree = default(object);
		object string_literal91_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "normalInterfaceDeclaration");
		DebugLocation(469, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// Java.g:470:5: ( modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody )
			DebugEnterAlt(1);
			// Java.g:470:9: modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(470, 9);
			PushFollow(Follow._modifiers_in_normalInterfaceDeclaration1444);
			modifiers87=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers87.Tree);
			DebugLocation(470, 19);
			string_literal88=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_normalInterfaceDeclaration1446); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal88_tree = (object)adaptor.Create(string_literal88);
			adaptor.AddChild(root_0, string_literal88_tree);
			}
			DebugLocation(470, 31);
			IDENTIFIER89=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalInterfaceDeclaration1448); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER89_tree = (object)adaptor.Create(IDENTIFIER89);
			adaptor.AddChild(root_0, IDENTIFIER89_tree);
			}
			DebugLocation(471, 9);
			// Java.g:471:9: ( typeParameters )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==LT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:471:10: typeParameters
				{
				DebugLocation(471, 10);
				PushFollow(Follow._typeParameters_in_normalInterfaceDeclaration1459);
				typeParameters90=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(473, 9);
			// Java.g:473:9: ( 'extends' typeList )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==EXTENDS))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:473:10: 'extends' typeList
				{
				DebugLocation(473, 10);
				string_literal91=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_normalInterfaceDeclaration1481); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal91_tree = (object)adaptor.Create(string_literal91);
				adaptor.AddChild(root_0, string_literal91_tree);
				}
				DebugLocation(473, 20);
				PushFollow(Follow._typeList_in_normalInterfaceDeclaration1483);
				typeList92=typeList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeList92.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(475, 9);
			PushFollow(Follow._interfaceBody_in_normalInterfaceDeclaration1504);
			interfaceBody93=interfaceBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceBody93.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("normalInterfaceDeclaration", 20);
			LeaveRule("normalInterfaceDeclaration", 20);
			LeaveRule_normalInterfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 20, normalInterfaceDeclaration_StartIndex); }

		}
		DebugLocation(476, 4);
		} finally { DebugExitRule(GrammarFileName, "normalInterfaceDeclaration"); }
		return retval;

	}
	// $ANTLR end "normalInterfaceDeclaration"

	partial void EnterRule_typeList();
	partial void LeaveRule_typeList();
	// $ANTLR start "typeList"
	// Java.g:478:1: typeList : type ( ',' type )* ;
	[GrammarRule("typeList")]
	private AstParserRuleReturnScope<object, IToken> typeList()
	{
		EnterRule_typeList();
		EnterRule("typeList", 21);
		TraceIn("typeList", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal95 = default(IToken);
		AstParserRuleReturnScope<object, IToken> type94 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type96 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal95_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeList");
		DebugLocation(478, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// Java.g:479:5: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// Java.g:479:9: type ( ',' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(479, 9);
			PushFollow(Follow._type_in_typeList1524);
			type94=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type94.Tree);
			DebugLocation(480, 9);
			// Java.g:480:9: ( ',' type )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==COMMA))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:480:10: ',' type
					{
					DebugLocation(480, 10);
					char_literal95=(IToken)Match(input,COMMA,Follow._COMMA_in_typeList1535); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal95_tree = (object)adaptor.Create(char_literal95);
					adaptor.AddChild(root_0, char_literal95_tree);
					}
					DebugLocation(480, 14);
					PushFollow(Follow._type_in_typeList1537);
					type96=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type96.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeList", 21);
			LeaveRule("typeList", 21);
			LeaveRule_typeList();
			if (state.backtracking > 0) { Memoize(input, 21, typeList_StartIndex); }

		}
		DebugLocation(482, 4);
		} finally { DebugExitRule(GrammarFileName, "typeList"); }
		return retval;

	}
	// $ANTLR end "typeList"

	partial void EnterRule_classBody();
	partial void LeaveRule_classBody();
	// $ANTLR start "classBody"
	// Java.g:484:1: classBody : '{' ( classBodyDeclaration )* '}' ;
	[GrammarRule("classBody")]
	private AstParserRuleReturnScope<object, IToken> classBody()
	{
		EnterRule_classBody();
		EnterRule("classBody", 22);
		TraceIn("classBody", 22);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classBody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal97 = default(IToken);
		IToken char_literal99 = default(IToken);
		AstParserRuleReturnScope<object, IToken> classBodyDeclaration98 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal97_tree = default(object);
		object char_literal99_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classBody");
		DebugLocation(484, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// Java.g:485:5: ( '{' ( classBodyDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:485:9: '{' ( classBodyDeclaration )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(485, 9);
			char_literal97=(IToken)Match(input,LBRACE,Follow._LBRACE_in_classBody1568); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal97_tree = (object)adaptor.Create(char_literal97);
			adaptor.AddChild(root_0, char_literal97_tree);
			}
			DebugLocation(486, 9);
			// Java.g:486:9: ( classBodyDeclaration )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==ABSTRACT||LA35_1==BOOLEAN||LA35_1==BYTE||(LA35_1>=CHAR && LA35_1<=CLASS)||LA35_1==DOUBLE||LA35_1==ENUM||LA35_1==FINAL||LA35_1==FLOAT||LA35_1==IDENTIFIER||(LA35_1>=INT && LA35_1<=INTERFACE)||LA35_1==LBRACE||LA35_1==LONG||(LA35_1>=LT && LA35_1<=NATIVE)||(LA35_1>=PRIVATE && LA35_1<=PUBLIC)||(LA35_1>=SEMI && LA35_1<=SHORT)||(LA35_1>=STATIC && LA35_1<=STRICTFP)||LA35_1==SYNCHRONIZED||LA35_1==TRANSIENT||(LA35_1>=VOID && LA35_1<=VOLATILE)))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:486:10: classBodyDeclaration
					{
					DebugLocation(486, 10);
					PushFollow(Follow._classBodyDeclaration_in_classBody1580);
					classBodyDeclaration98=classBodyDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classBodyDeclaration98.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }

			DebugLocation(488, 9);
			char_literal99=(IToken)Match(input,RBRACE,Follow._RBRACE_in_classBody1602); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal99_tree = (object)adaptor.Create(char_literal99);
			adaptor.AddChild(root_0, char_literal99_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBody", 22);
			LeaveRule("classBody", 22);
			LeaveRule_classBody();
			if (state.backtracking > 0) { Memoize(input, 22, classBody_StartIndex); }

		}
		DebugLocation(489, 4);
		} finally { DebugExitRule(GrammarFileName, "classBody"); }
		return retval;

	}
	// $ANTLR end "classBody"

	partial void EnterRule_interfaceBody();
	partial void LeaveRule_interfaceBody();
	// $ANTLR start "interfaceBody"
	// Java.g:491:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
	[GrammarRule("interfaceBody")]
	private AstParserRuleReturnScope<object, IToken> interfaceBody()
	{
		EnterRule_interfaceBody();
		EnterRule("interfaceBody", 23);
		TraceIn("interfaceBody", 23);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceBody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal100 = default(IToken);
		IToken char_literal102 = default(IToken);
		AstParserRuleReturnScope<object, IToken> interfaceBodyDeclaration101 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal100_tree = default(object);
		object char_literal102_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceBody");
		DebugLocation(491, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// Java.g:492:5: ( '{' ( interfaceBodyDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:492:9: '{' ( interfaceBodyDeclaration )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(492, 9);
			char_literal100=(IToken)Match(input,LBRACE,Follow._LBRACE_in_interfaceBody1622); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal100_tree = (object)adaptor.Create(char_literal100);
			adaptor.AddChild(root_0, char_literal100_tree);
			}
			DebugLocation(493, 9);
			// Java.g:493:9: ( interfaceBodyDeclaration )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==ABSTRACT||LA36_1==BOOLEAN||LA36_1==BYTE||(LA36_1>=CHAR && LA36_1<=CLASS)||LA36_1==DOUBLE||LA36_1==ENUM||LA36_1==FINAL||LA36_1==FLOAT||LA36_1==IDENTIFIER||(LA36_1>=INT && LA36_1<=INTERFACE)||LA36_1==LONG||(LA36_1>=LT && LA36_1<=NATIVE)||(LA36_1>=PRIVATE && LA36_1<=PUBLIC)||(LA36_1>=SEMI && LA36_1<=SHORT)||(LA36_1>=STATIC && LA36_1<=STRICTFP)||LA36_1==SYNCHRONIZED||LA36_1==TRANSIENT||(LA36_1>=VOID && LA36_1<=VOLATILE)))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:493:10: interfaceBodyDeclaration
					{
					DebugLocation(493, 10);
					PushFollow(Follow._interfaceBodyDeclaration_in_interfaceBody1634);
					interfaceBodyDeclaration101=interfaceBodyDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceBodyDeclaration101.Tree);

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }

			DebugLocation(495, 9);
			char_literal102=(IToken)Match(input,RBRACE,Follow._RBRACE_in_interfaceBody1656); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal102_tree = (object)adaptor.Create(char_literal102);
			adaptor.AddChild(root_0, char_literal102_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceBody", 23);
			LeaveRule("interfaceBody", 23);
			LeaveRule_interfaceBody();
			if (state.backtracking > 0) { Memoize(input, 23, interfaceBody_StartIndex); }

		}
		DebugLocation(496, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBody"); }
		return retval;

	}
	// $ANTLR end "interfaceBody"

	partial void EnterRule_classBodyDeclaration();
	partial void LeaveRule_classBodyDeclaration();
	// $ANTLR start "classBodyDeclaration"
	// Java.g:498:1: classBodyDeclaration : ( ';' | ( 'static' )? block | memberDecl );
	[GrammarRule("classBodyDeclaration")]
	private AstParserRuleReturnScope<object, IToken> classBodyDeclaration()
	{
		EnterRule_classBodyDeclaration();
		EnterRule("classBodyDeclaration", 24);
		TraceIn("classBodyDeclaration", 24);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classBodyDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal103 = default(IToken);
		IToken string_literal104 = default(IToken);
		AstParserRuleReturnScope<object, IToken> block105 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> memberDecl106 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal103_tree = default(object);
		object string_literal104_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classBodyDeclaration");
		DebugLocation(498, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// Java.g:499:5: ( ';' | ( 'static' )? block | memberDecl )
			int alt38=3;
			try { DebugEnterDecision(38, false);
			switch (input.LA(1))
			{
			case SEMI:
				{
				alt38 = 1;
				}
				break;
			case STATIC:
				{
				int LA38_2 = input.LA(2);

				if ((LA38_2==LBRACE))
				{
					alt38 = 2;
				}
				else if ((LA38_2==ABSTRACT||LA38_2==BOOLEAN||LA38_2==BYTE||(LA38_2>=CHAR && LA38_2<=CLASS)||LA38_2==DOUBLE||LA38_2==ENUM||LA38_2==FINAL||LA38_2==FLOAT||LA38_2==IDENTIFIER||(LA38_2>=INT && LA38_2<=INTERFACE)||LA38_2==LONG||(LA38_2>=LT && LA38_2<=NATIVE)||(LA38_2>=PRIVATE && LA38_2<=PUBLIC)||LA38_2==SHORT||(LA38_2>=STATIC && LA38_2<=STRICTFP)||LA38_2==SYNCHRONIZED||LA38_2==TRANSIENT||(LA38_2>=VOID && LA38_2<=VOLATILE)))
				{
					alt38 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LBRACE:
				{
				alt38 = 2;
				}
				break;
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case IDENTIFIER:
			case INT:
			case INTERFACE:
			case LONG:
			case LT:
			case MONKEYS_AT:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
				{
				alt38 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:499:9: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(499, 9);
				char_literal103=(IToken)Match(input,SEMI,Follow._SEMI_in_classBodyDeclaration1676); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal103_tree = (object)adaptor.Create(char_literal103);
				adaptor.AddChild(root_0, char_literal103_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:500:9: ( 'static' )? block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(500, 9);
				// Java.g:500:9: ( 'static' )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==STATIC))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:500:10: 'static'
					{
					DebugLocation(500, 10);
					string_literal104=(IToken)Match(input,STATIC,Follow._STATIC_in_classBodyDeclaration1687); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal104_tree = (object)adaptor.Create(string_literal104);
					adaptor.AddChild(root_0, string_literal104_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(502, 9);
				PushFollow(Follow._block_in_classBodyDeclaration1709);
				block105=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block105.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:503:9: memberDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(503, 9);
				PushFollow(Follow._memberDecl_in_classBodyDeclaration1719);
				memberDecl106=memberDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, memberDecl106.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBodyDeclaration", 24);
			LeaveRule("classBodyDeclaration", 24);
			LeaveRule_classBodyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 24, classBodyDeclaration_StartIndex); }

		}
		DebugLocation(504, 4);
		} finally { DebugExitRule(GrammarFileName, "classBodyDeclaration"); }
		return retval;

	}
	// $ANTLR end "classBodyDeclaration"

	partial void EnterRule_memberDecl();
	partial void LeaveRule_memberDecl();
	// $ANTLR start "memberDecl"
	// Java.g:506:1: memberDecl : ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration );
	[GrammarRule("memberDecl")]
	private AstParserRuleReturnScope<object, IToken> memberDecl()
	{
		EnterRule_memberDecl();
		EnterRule("memberDecl", 25);
		TraceIn("memberDecl", 25);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int memberDecl_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> fieldDeclaration107 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> methodDeclaration108 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classDeclaration109 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceDeclaration110 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "memberDecl");
		DebugLocation(506, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// Java.g:507:5: ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration )
			int alt39=4;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
			case VOID:
				{
				alt39 = 2;
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt39 = 3;
				}
				break;
			case INTERFACE:
				{
				alt39 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:507:10: fieldDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(507, 10);
				PushFollow(Follow._fieldDeclaration_in_memberDecl1740);
				fieldDeclaration107=fieldDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fieldDeclaration107.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:508:10: methodDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(508, 10);
				PushFollow(Follow._methodDeclaration_in_memberDecl1751);
				methodDeclaration108=methodDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, methodDeclaration108.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:509:10: classDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(509, 10);
				PushFollow(Follow._classDeclaration_in_memberDecl1762);
				classDeclaration109=classDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDeclaration109.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:510:10: interfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(510, 10);
				PushFollow(Follow._interfaceDeclaration_in_memberDecl1773);
				interfaceDeclaration110=interfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDeclaration110.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberDecl", 25);
			LeaveRule("memberDecl", 25);
			LeaveRule_memberDecl();
			if (state.backtracking > 0) { Memoize(input, 25, memberDecl_StartIndex); }

		}
		DebugLocation(511, 4);
		} finally { DebugExitRule(GrammarFileName, "memberDecl"); }
		return retval;

	}
	// $ANTLR end "memberDecl"

	partial void EnterRule_methodDeclaration();
	partial void LeaveRule_methodDeclaration();
	// $ANTLR start "methodDeclaration"
	// Java.g:514:1: methodDeclaration : ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) );
	[GrammarRule("methodDeclaration")]
	private AstParserRuleReturnScope<object, IToken> methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 26);
		TraceIn("methodDeclaration", 26);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int methodDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER113 = default(IToken);
		IToken string_literal115 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken string_literal124 = default(IToken);
		IToken IDENTIFIER125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal128 = default(IToken);
		IToken string_literal129 = default(IToken);
		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers111 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters112 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> formalParameters114 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedNameList116 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> explicitConstructorInvocation118 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> blockStatement119 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> modifiers121 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters122 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type123 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> formalParameters126 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedNameList130 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block131 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER113_tree = default(object);
		object string_literal115_tree = default(object);
		object char_literal117_tree = default(object);
		object char_literal120_tree = default(object);
		object string_literal124_tree = default(object);
		object IDENTIFIER125_tree = default(object);
		object char_literal127_tree = default(object);
		object char_literal128_tree = default(object);
		object string_literal129_tree = default(object);
		object char_literal132_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(514, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// Java.g:515:5: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt49 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:517:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(517, 10);
				PushFollow(Follow._modifiers_in_methodDeclaration1811);
				modifiers111=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers111.Tree);
				DebugLocation(518, 9);
				// Java.g:518:9: ( typeParameters )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==LT))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:518:10: typeParameters
					{
					DebugLocation(518, 10);
					PushFollow(Follow._typeParameters_in_methodDeclaration1822);
					typeParameters112=typeParameters();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters112.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(520, 9);
				IDENTIFIER113=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodDeclaration1843); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER113_tree = (object)adaptor.Create(IDENTIFIER113);
				adaptor.AddChild(root_0, IDENTIFIER113_tree);
				}
				DebugLocation(521, 9);
				PushFollow(Follow._formalParameters_in_methodDeclaration1853);
				formalParameters114=formalParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameters114.Tree);
				DebugLocation(522, 9);
				// Java.g:522:9: ( 'throws' qualifiedNameList )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==THROWS))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:522:10: 'throws' qualifiedNameList
					{
					DebugLocation(522, 10);
					string_literal115=(IToken)Match(input,THROWS,Follow._THROWS_in_methodDeclaration1864); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal115_tree = (object)adaptor.Create(string_literal115);
					adaptor.AddChild(root_0, string_literal115_tree);
					}
					DebugLocation(522, 19);
					PushFollow(Follow._qualifiedNameList_in_methodDeclaration1866);
					qualifiedNameList116=qualifiedNameList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameList116.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(524, 9);
				char_literal117=(IToken)Match(input,LBRACE,Follow._LBRACE_in_methodDeclaration1887); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal117_tree = (object)adaptor.Create(char_literal117);
				adaptor.AddChild(root_0, char_literal117_tree);
				}
				DebugLocation(525, 9);
				// Java.g:525:9: ( explicitConstructorInvocation )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				switch (input.LA(1))
				{
				case LT:
					{
					alt42 = 1;
					}
					break;
				case THIS:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case LPAREN:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case SUPER:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case BooleanLiteral:
				case CharacterLiteral:
				case FloatingPointLiteral:
				case IntegerLiteral:
				case NullLiteral:
				case StringLiteral:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case NEW:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case VOID:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:525:10: explicitConstructorInvocation
					{
					DebugLocation(525, 10);
					PushFollow(Follow._explicitConstructorInvocation_in_methodDeclaration1899);
					explicitConstructorInvocation118=explicitConstructorInvocation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explicitConstructorInvocation118.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(527, 9);
				// Java.g:527:9: ( blockStatement )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_1 = input.LA(1);

					if ((LA43_1==EOF||LA43_1==ABSTRACT||(LA43_1>=ASSERT && LA43_1<=BANG)||(LA43_1>=BOOLEAN && LA43_1<=BYTE)||LA43_1==BooleanLiteral||(LA43_1>=CHAR && LA43_1<=CLASS)||(LA43_1>=CONTINUE && LA43_1<=CharacterLiteral)||LA43_1==DO||LA43_1==DOUBLE||LA43_1==ENUM||LA43_1==FINAL||(LA43_1>=FLOAT && LA43_1<=FOR)||LA43_1==FloatingPointLiteral||(LA43_1>=IDENTIFIER && LA43_1<=IF)||(LA43_1>=INT && LA43_1<=INTERFACE)||LA43_1==IntegerLiteral||LA43_1==LBRACE||(LA43_1>=LONG && LA43_1<=NEW)||LA43_1==NullLiteral||LA43_1==PLUS||(LA43_1>=PLUSPLUS && LA43_1<=PUBLIC)||LA43_1==RETURN||(LA43_1>=SEMI && LA43_1<=SHORT)||(LA43_1>=STATIC && LA43_1<=SUB)||(LA43_1>=SUBSUB && LA43_1<=SYNCHRONIZED)||LA43_1==StringLiteral||(LA43_1>=THIS && LA43_1<=THROW)||(LA43_1>=TILDE && LA43_1<=TRY)||(LA43_1>=VOID && LA43_1<=WHILE)))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:527:10: blockStatement
						{
						DebugLocation(527, 10);
						PushFollow(Follow._blockStatement_in_methodDeclaration1921);
						blockStatement119=blockStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement119.Tree);

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(529, 9);
				char_literal120=(IToken)Match(input,RBRACE,Follow._RBRACE_in_methodDeclaration1942); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal120_tree = (object)adaptor.Create(char_literal120);
				adaptor.AddChild(root_0, char_literal120_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:530:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(530, 9);
				PushFollow(Follow._modifiers_in_methodDeclaration1952);
				modifiers121=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers121.Tree);
				DebugLocation(531, 9);
				// Java.g:531:9: ( typeParameters )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==LT))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:531:10: typeParameters
					{
					DebugLocation(531, 10);
					PushFollow(Follow._typeParameters_in_methodDeclaration1963);
					typeParameters122=typeParameters();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters122.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(533, 9);
				// Java.g:533:9: ( type | 'void' )
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==BOOLEAN||LA45_1==BYTE||LA45_1==CHAR||LA45_1==DOUBLE||LA45_1==FLOAT||LA45_1==IDENTIFIER||LA45_1==INT||LA45_1==LONG||LA45_1==SHORT))
				{
					alt45 = 1;
				}
				else if ((LA45_1==VOID))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:533:10: type
					{
					DebugLocation(533, 10);
					PushFollow(Follow._type_in_methodDeclaration1985);
					type123=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type123.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:534:13: 'void'
					{
					DebugLocation(534, 13);
					string_literal124=(IToken)Match(input,VOID,Follow._VOID_in_methodDeclaration1999); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal124_tree = (object)adaptor.Create(string_literal124);
					adaptor.AddChild(root_0, string_literal124_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(536, 9);
				IDENTIFIER125=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodDeclaration2019); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER125_tree = (object)adaptor.Create(IDENTIFIER125);
				adaptor.AddChild(root_0, IDENTIFIER125_tree);
				}
				DebugLocation(537, 9);
				PushFollow(Follow._formalParameters_in_methodDeclaration2029);
				formalParameters126=formalParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameters126.Tree);
				DebugLocation(538, 9);
				// Java.g:538:9: ( '[' ']' )*
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, false);
					int LA46_1 = input.LA(1);

					if ((LA46_1==LBRACKET))
					{
						alt46 = 1;
					}


					} finally { DebugExitDecision(46); }
					switch ( alt46 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:538:10: '[' ']'
						{
						DebugLocation(538, 10);
						char_literal127=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_methodDeclaration2040); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal127_tree = (object)adaptor.Create(char_literal127);
						adaptor.AddChild(root_0, char_literal127_tree);
						}
						DebugLocation(538, 14);
						char_literal128=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_methodDeclaration2042); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal128_tree = (object)adaptor.Create(char_literal128);
						adaptor.AddChild(root_0, char_literal128_tree);
						}

						}
						break;

					default:
						goto loop46;
					}
				}

				loop46:
					;

				} finally { DebugExitSubRule(46); }

				DebugLocation(540, 9);
				// Java.g:540:9: ( 'throws' qualifiedNameList )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==THROWS))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:540:10: 'throws' qualifiedNameList
					{
					DebugLocation(540, 10);
					string_literal129=(IToken)Match(input,THROWS,Follow._THROWS_in_methodDeclaration2064); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal129_tree = (object)adaptor.Create(string_literal129);
					adaptor.AddChild(root_0, string_literal129_tree);
					}
					DebugLocation(540, 19);
					PushFollow(Follow._qualifiedNameList_in_methodDeclaration2066);
					qualifiedNameList130=qualifiedNameList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameList130.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(542, 9);
				// Java.g:542:9: ( block | ';' )
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==LBRACE))
				{
					alt48 = 1;
				}
				else if ((LA48_1==SEMI))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:543:13: block
					{
					DebugLocation(543, 13);
					PushFollow(Follow._block_in_methodDeclaration2121);
					block131=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block131.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:544:13: ';'
					{
					DebugLocation(544, 13);
					char_literal132=(IToken)Match(input,SEMI,Follow._SEMI_in_methodDeclaration2135); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal132_tree = (object)adaptor.Create(char_literal132);
					adaptor.AddChild(root_0, char_literal132_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("methodDeclaration", 26);
			LeaveRule("methodDeclaration", 26);
			LeaveRule_methodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 26, methodDeclaration_StartIndex); }

		}
		DebugLocation(546, 4);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return retval;

	}
	// $ANTLR end "methodDeclaration"

	partial void EnterRule_fieldDeclaration();
	partial void LeaveRule_fieldDeclaration();
	// $ANTLR start "fieldDeclaration"
	// Java.g:549:1: fieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' ;
	[GrammarRule("fieldDeclaration")]
	private AstParserRuleReturnScope<object, IToken> fieldDeclaration()
	{
		EnterRule_fieldDeclaration();
		EnterRule("fieldDeclaration", 27);
		TraceIn("fieldDeclaration", 27);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int fieldDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal136 = default(IToken);
		IToken char_literal138 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers133 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type134 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator135 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator137 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal136_tree = default(object);
		object char_literal138_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldDeclaration");
		DebugLocation(549, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// Java.g:550:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' )
			DebugEnterAlt(1);
			// Java.g:550:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(550, 9);
			PushFollow(Follow._modifiers_in_fieldDeclaration2167);
			modifiers133=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers133.Tree);
			DebugLocation(551, 9);
			PushFollow(Follow._type_in_fieldDeclaration2177);
			type134=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type134.Tree);
			DebugLocation(552, 9);
			PushFollow(Follow._variableDeclarator_in_fieldDeclaration2187);
			variableDeclarator135=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator135.Tree);
			DebugLocation(553, 9);
			// Java.g:553:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_1 = input.LA(1);

				if ((LA50_1==COMMA))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:553:10: ',' variableDeclarator
					{
					DebugLocation(553, 10);
					char_literal136=(IToken)Match(input,COMMA,Follow._COMMA_in_fieldDeclaration2198); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal136_tree = (object)adaptor.Create(char_literal136);
					adaptor.AddChild(root_0, char_literal136_tree);
					}
					DebugLocation(553, 14);
					PushFollow(Follow._variableDeclarator_in_fieldDeclaration2200);
					variableDeclarator137=variableDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator137.Tree);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }

			DebugLocation(555, 9);
			char_literal138=(IToken)Match(input,SEMI,Follow._SEMI_in_fieldDeclaration2221); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal138_tree = (object)adaptor.Create(char_literal138);
			adaptor.AddChild(root_0, char_literal138_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldDeclaration", 27);
			LeaveRule("fieldDeclaration", 27);
			LeaveRule_fieldDeclaration();
			if (state.backtracking > 0) { Memoize(input, 27, fieldDeclaration_StartIndex); }

		}
		DebugLocation(556, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldDeclaration"); }
		return retval;

	}
	// $ANTLR end "fieldDeclaration"

	partial void EnterRule_variableDeclarator();
	partial void LeaveRule_variableDeclarator();
	// $ANTLR start "variableDeclarator"
	// Java.g:558:1: variableDeclarator : IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? ;
	[GrammarRule("variableDeclarator")]
	private AstParserRuleReturnScope<object, IToken> variableDeclarator()
	{
		EnterRule_variableDeclarator();
		EnterRule("variableDeclarator", 28);
		TraceIn("variableDeclarator", 28);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableDeclarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER139 = default(IToken);
		IToken char_literal140 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal142 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableInitializer143 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER139_tree = default(object);
		object char_literal140_tree = default(object);
		object char_literal141_tree = default(object);
		object char_literal142_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableDeclarator");
		DebugLocation(558, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// Java.g:559:5: ( IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? )
			DebugEnterAlt(1);
			// Java.g:559:9: IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(559, 9);
			IDENTIFIER139=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_variableDeclarator2241); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER139_tree = (object)adaptor.Create(IDENTIFIER139);
			adaptor.AddChild(root_0, IDENTIFIER139_tree);
			}
			DebugLocation(560, 9);
			// Java.g:560:9: ( '[' ']' )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==LBRACKET))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:560:10: '[' ']'
					{
					DebugLocation(560, 10);
					char_literal140=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_variableDeclarator2252); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal140_tree = (object)adaptor.Create(char_literal140);
					adaptor.AddChild(root_0, char_literal140_tree);
					}
					DebugLocation(560, 14);
					char_literal141=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_variableDeclarator2254); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal141_tree = (object)adaptor.Create(char_literal141);
					adaptor.AddChild(root_0, char_literal141_tree);
					}

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(562, 9);
			// Java.g:562:9: ( '=' variableInitializer )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==EQ))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:562:10: '=' variableInitializer
				{
				DebugLocation(562, 10);
				char_literal142=(IToken)Match(input,EQ,Follow._EQ_in_variableDeclarator2276); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal142_tree = (object)adaptor.Create(char_literal142);
				adaptor.AddChild(root_0, char_literal142_tree);
				}
				DebugLocation(562, 14);
				PushFollow(Follow._variableInitializer_in_variableDeclarator2278);
				variableInitializer143=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableInitializer143.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarator", 28);
			LeaveRule("variableDeclarator", 28);
			LeaveRule_variableDeclarator();
			if (state.backtracking > 0) { Memoize(input, 28, variableDeclarator_StartIndex); }

		}
		DebugLocation(564, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarator"); }
		return retval;

	}
	// $ANTLR end "variableDeclarator"

	partial void EnterRule_interfaceBodyDeclaration();
	partial void LeaveRule_interfaceBodyDeclaration();
	// $ANTLR start "interfaceBodyDeclaration"
	// Java.g:569:1: interfaceBodyDeclaration : ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' );
	[GrammarRule("interfaceBodyDeclaration")]
	private AstParserRuleReturnScope<object, IToken> interfaceBodyDeclaration()
	{
		EnterRule_interfaceBodyDeclaration();
		EnterRule("interfaceBodyDeclaration", 29);
		TraceIn("interfaceBodyDeclaration", 29);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceBodyDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal148 = default(IToken);
		AstParserRuleReturnScope<object, IToken> interfaceFieldDeclaration144 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceMethodDeclaration145 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceDeclaration146 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classDeclaration147 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal148_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceBodyDeclaration");
		DebugLocation(569, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// Java.g:570:5: ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' )
			int alt53=5;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
			case VOID:
				{
				alt53 = 2;
				}
				break;
			case INTERFACE:
				{
				alt53 = 3;
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt53 = 4;
				}
				break;
			case SEMI:
				{
				alt53 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:571:9: interfaceFieldDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(571, 9);
				PushFollow(Follow._interfaceFieldDeclaration_in_interfaceBodyDeclaration2317);
				interfaceFieldDeclaration144=interfaceFieldDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceFieldDeclaration144.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:572:9: interfaceMethodDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(572, 9);
				PushFollow(Follow._interfaceMethodDeclaration_in_interfaceBodyDeclaration2327);
				interfaceMethodDeclaration145=interfaceMethodDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceMethodDeclaration145.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:573:9: interfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(573, 9);
				PushFollow(Follow._interfaceDeclaration_in_interfaceBodyDeclaration2337);
				interfaceDeclaration146=interfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDeclaration146.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:574:9: classDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(574, 9);
				PushFollow(Follow._classDeclaration_in_interfaceBodyDeclaration2347);
				classDeclaration147=classDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDeclaration147.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:575:9: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(575, 9);
				char_literal148=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceBodyDeclaration2357); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal148_tree = (object)adaptor.Create(char_literal148);
				adaptor.AddChild(root_0, char_literal148_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceBodyDeclaration", 29);
			LeaveRule("interfaceBodyDeclaration", 29);
			LeaveRule_interfaceBodyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 29, interfaceBodyDeclaration_StartIndex); }

		}
		DebugLocation(576, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBodyDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceBodyDeclaration"

	partial void EnterRule_interfaceMethodDeclaration();
	partial void LeaveRule_interfaceMethodDeclaration();
	// $ANTLR start "interfaceMethodDeclaration"
	// Java.g:578:1: interfaceMethodDeclaration : modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' ;
	[GrammarRule("interfaceMethodDeclaration")]
	private AstParserRuleReturnScope<object, IToken> interfaceMethodDeclaration()
	{
		EnterRule_interfaceMethodDeclaration();
		EnterRule("interfaceMethodDeclaration", 30);
		TraceIn("interfaceMethodDeclaration", 30);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceMethodDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal152 = default(IToken);
		IToken IDENTIFIER153 = default(IToken);
		IToken char_literal155 = default(IToken);
		IToken char_literal156 = default(IToken);
		IToken string_literal157 = default(IToken);
		IToken char_literal159 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers149 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters150 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type151 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> formalParameters154 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedNameList158 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal152_tree = default(object);
		object IDENTIFIER153_tree = default(object);
		object char_literal155_tree = default(object);
		object char_literal156_tree = default(object);
		object string_literal157_tree = default(object);
		object char_literal159_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceMethodDeclaration");
		DebugLocation(578, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// Java.g:579:5: ( modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' )
			DebugEnterAlt(1);
			// Java.g:579:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(579, 9);
			PushFollow(Follow._modifiers_in_interfaceMethodDeclaration2377);
			modifiers149=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers149.Tree);
			DebugLocation(580, 9);
			// Java.g:580:9: ( typeParameters )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==LT))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:580:10: typeParameters
				{
				DebugLocation(580, 10);
				PushFollow(Follow._typeParameters_in_interfaceMethodDeclaration2388);
				typeParameters150=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters150.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(582, 9);
			// Java.g:582:9: ( type | 'void' )
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_1 = input.LA(1);

			if ((LA55_1==BOOLEAN||LA55_1==BYTE||LA55_1==CHAR||LA55_1==DOUBLE||LA55_1==FLOAT||LA55_1==IDENTIFIER||LA55_1==INT||LA55_1==LONG||LA55_1==SHORT))
			{
				alt55 = 1;
			}
			else if ((LA55_1==VOID))
			{
				alt55 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:582:10: type
				{
				DebugLocation(582, 10);
				PushFollow(Follow._type_in_interfaceMethodDeclaration2410);
				type151=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type151.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:583:10: 'void'
				{
				DebugLocation(583, 10);
				string_literal152=(IToken)Match(input,VOID,Follow._VOID_in_interfaceMethodDeclaration2421); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal152_tree = (object)adaptor.Create(string_literal152);
				adaptor.AddChild(root_0, string_literal152_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(585, 9);
			IDENTIFIER153=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_interfaceMethodDeclaration2441); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER153_tree = (object)adaptor.Create(IDENTIFIER153);
			adaptor.AddChild(root_0, IDENTIFIER153_tree);
			}
			DebugLocation(586, 9);
			PushFollow(Follow._formalParameters_in_interfaceMethodDeclaration2451);
			formalParameters154=formalParameters();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameters154.Tree);
			DebugLocation(587, 9);
			// Java.g:587:9: ( '[' ']' )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==LBRACKET))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:587:10: '[' ']'
					{
					DebugLocation(587, 10);
					char_literal155=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_interfaceMethodDeclaration2462); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal155_tree = (object)adaptor.Create(char_literal155);
					adaptor.AddChild(root_0, char_literal155_tree);
					}
					DebugLocation(587, 14);
					char_literal156=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_interfaceMethodDeclaration2464); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal156_tree = (object)adaptor.Create(char_literal156);
					adaptor.AddChild(root_0, char_literal156_tree);
					}

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(589, 9);
			// Java.g:589:9: ( 'throws' qualifiedNameList )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_1 = input.LA(1);

			if ((LA57_1==THROWS))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:589:10: 'throws' qualifiedNameList
				{
				DebugLocation(589, 10);
				string_literal157=(IToken)Match(input,THROWS,Follow._THROWS_in_interfaceMethodDeclaration2486); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal157_tree = (object)adaptor.Create(string_literal157);
				adaptor.AddChild(root_0, string_literal157_tree);
				}
				DebugLocation(589, 19);
				PushFollow(Follow._qualifiedNameList_in_interfaceMethodDeclaration2488);
				qualifiedNameList158=qualifiedNameList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameList158.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(590, 12);
			char_literal159=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceMethodDeclaration2501); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal159_tree = (object)adaptor.Create(char_literal159);
			adaptor.AddChild(root_0, char_literal159_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceMethodDeclaration", 30);
			LeaveRule("interfaceMethodDeclaration", 30);
			LeaveRule_interfaceMethodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 30, interfaceMethodDeclaration_StartIndex); }

		}
		DebugLocation(591, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceMethodDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceMethodDeclaration"

	partial void EnterRule_interfaceFieldDeclaration();
	partial void LeaveRule_interfaceFieldDeclaration();
	// $ANTLR start "interfaceFieldDeclaration"
	// Java.g:598:1: interfaceFieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' ;
	[GrammarRule("interfaceFieldDeclaration")]
	private AstParserRuleReturnScope<object, IToken> interfaceFieldDeclaration()
	{
		EnterRule_interfaceFieldDeclaration();
		EnterRule("interfaceFieldDeclaration", 31);
		TraceIn("interfaceFieldDeclaration", 31);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceFieldDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal163 = default(IToken);
		IToken char_literal165 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers160 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type161 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator162 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator164 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal163_tree = default(object);
		object char_literal165_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclaration");
		DebugLocation(598, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// Java.g:599:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' )
			DebugEnterAlt(1);
			// Java.g:599:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(599, 9);
			PushFollow(Follow._modifiers_in_interfaceFieldDeclaration2523);
			modifiers160=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers160.Tree);
			DebugLocation(599, 19);
			PushFollow(Follow._type_in_interfaceFieldDeclaration2525);
			type161=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type161.Tree);
			DebugLocation(599, 24);
			PushFollow(Follow._variableDeclarator_in_interfaceFieldDeclaration2527);
			variableDeclarator162=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator162.Tree);
			DebugLocation(600, 9);
			// Java.g:600:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if ((LA58_1==COMMA))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:600:10: ',' variableDeclarator
					{
					DebugLocation(600, 10);
					char_literal163=(IToken)Match(input,COMMA,Follow._COMMA_in_interfaceFieldDeclaration2538); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal163_tree = (object)adaptor.Create(char_literal163);
					adaptor.AddChild(root_0, char_literal163_tree);
					}
					DebugLocation(600, 14);
					PushFollow(Follow._variableDeclarator_in_interfaceFieldDeclaration2540);
					variableDeclarator164=variableDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator164.Tree);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }

			DebugLocation(602, 9);
			char_literal165=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceFieldDeclaration2561); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal165_tree = (object)adaptor.Create(char_literal165);
			adaptor.AddChild(root_0, char_literal165_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclaration", 31);
			LeaveRule("interfaceFieldDeclaration", 31);
			LeaveRule_interfaceFieldDeclaration();
			if (state.backtracking > 0) { Memoize(input, 31, interfaceFieldDeclaration_StartIndex); }

		}
		DebugLocation(603, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclaration"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// Java.g:606:1: type : ( classOrInterfaceType ( '[' ']' )* | primitiveType ( '[' ']' )* );
	[GrammarRule("type")]
	private AstParserRuleReturnScope<object, IToken> type()
	{
		EnterRule_type();
		EnterRule("type", 32);
		TraceIn("type", 32);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal167 = default(IToken);
		IToken char_literal168 = default(IToken);
		IToken char_literal170 = default(IToken);
		IToken char_literal171 = default(IToken);
		AstParserRuleReturnScope<object, IToken> classOrInterfaceType166 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primitiveType169 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal167_tree = default(object);
		object char_literal168_tree = default(object);
		object char_literal170_tree = default(object);
		object char_literal171_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(606, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// Java.g:607:5: ( classOrInterfaceType ( '[' ']' )* | primitiveType ( '[' ']' )* )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==IDENTIFIER))
			{
				alt61 = 1;
			}
			else if ((LA61_1==BOOLEAN||LA61_1==BYTE||LA61_1==CHAR||LA61_1==DOUBLE||LA61_1==FLOAT||LA61_1==INT||LA61_1==LONG||LA61_1==SHORT))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:607:9: classOrInterfaceType ( '[' ']' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(607, 9);
				PushFollow(Follow._classOrInterfaceType_in_type2582);
				classOrInterfaceType166=classOrInterfaceType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceType166.Tree);
				DebugLocation(608, 9);
				// Java.g:608:9: ( '[' ']' )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_1 = input.LA(1);

					if ((LA59_1==LBRACKET))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:608:10: '[' ']'
						{
						DebugLocation(608, 10);
						char_literal167=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_type2593); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal167_tree = (object)adaptor.Create(char_literal167);
						adaptor.AddChild(root_0, char_literal167_tree);
						}
						DebugLocation(608, 14);
						char_literal168=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_type2595); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal168_tree = (object)adaptor.Create(char_literal168);
						adaptor.AddChild(root_0, char_literal168_tree);
						}

						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:610:9: primitiveType ( '[' ']' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(610, 9);
				PushFollow(Follow._primitiveType_in_type2616);
				primitiveType169=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType169.Tree);
				DebugLocation(611, 9);
				// Java.g:611:9: ( '[' ']' )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					int LA60_1 = input.LA(1);

					if ((LA60_1==LBRACKET))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:611:10: '[' ']'
						{
						DebugLocation(611, 10);
						char_literal170=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_type2627); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal170_tree = (object)adaptor.Create(char_literal170);
						adaptor.AddChild(root_0, char_literal170_tree);
						}
						DebugLocation(611, 14);
						char_literal171=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_type2629); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal171_tree = (object)adaptor.Create(char_literal171);
						adaptor.AddChild(root_0, char_literal171_tree);
						}

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 32);
			LeaveRule("type", 32);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 32, type_StartIndex); }

		}
		DebugLocation(613, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_classOrInterfaceType();
	partial void LeaveRule_classOrInterfaceType();
	// $ANTLR start "classOrInterfaceType"
	// Java.g:616:1: classOrInterfaceType : IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* ;
	[GrammarRule("classOrInterfaceType")]
	private AstParserRuleReturnScope<object, IToken> classOrInterfaceType()
	{
		EnterRule_classOrInterfaceType();
		EnterRule("classOrInterfaceType", 33);
		TraceIn("classOrInterfaceType", 33);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classOrInterfaceType_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER172 = default(IToken);
		IToken char_literal174 = default(IToken);
		IToken IDENTIFIER175 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeArguments173 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeArguments176 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER172_tree = default(object);
		object char_literal174_tree = default(object);
		object IDENTIFIER175_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classOrInterfaceType");
		DebugLocation(616, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// Java.g:617:5: ( IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* )
			DebugEnterAlt(1);
			// Java.g:617:9: IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(617, 9);
			IDENTIFIER172=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceType2661); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER172_tree = (object)adaptor.Create(IDENTIFIER172);
			adaptor.AddChild(root_0, IDENTIFIER172_tree);
			}
			DebugLocation(618, 9);
			// Java.g:618:9: ( typeArguments )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if ((LA62_1==LT))
			{
				int LA62_2 = input.LA(2);

				if ((LA62_2==BOOLEAN||LA62_2==BYTE||LA62_2==CHAR||LA62_2==DOUBLE||LA62_2==FLOAT||LA62_2==IDENTIFIER||LA62_2==INT||LA62_2==LONG||LA62_2==QUES||LA62_2==SHORT))
				{
					alt62 = 1;
				}
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:618:10: typeArguments
				{
				DebugLocation(618, 10);
				PushFollow(Follow._typeArguments_in_classOrInterfaceType2672);
				typeArguments173=typeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments173.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(620, 9);
			// Java.g:620:9: ( '.' IDENTIFIER ( typeArguments )? )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if ((LA64_1==DOT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:620:10: '.' IDENTIFIER ( typeArguments )?
					{
					DebugLocation(620, 10);
					char_literal174=(IToken)Match(input,DOT,Follow._DOT_in_classOrInterfaceType2694); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal174_tree = (object)adaptor.Create(char_literal174);
					adaptor.AddChild(root_0, char_literal174_tree);
					}
					DebugLocation(620, 14);
					IDENTIFIER175=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceType2696); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER175_tree = (object)adaptor.Create(IDENTIFIER175);
					adaptor.AddChild(root_0, IDENTIFIER175_tree);
					}
					DebugLocation(621, 13);
					// Java.g:621:13: ( typeArguments )?
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, false);
					int LA63_1 = input.LA(1);

					if ((LA63_1==LT))
					{
						int LA63_2 = input.LA(2);

						if ((LA63_2==BOOLEAN||LA63_2==BYTE||LA63_2==CHAR||LA63_2==DOUBLE||LA63_2==FLOAT||LA63_2==IDENTIFIER||LA63_2==INT||LA63_2==LONG||LA63_2==QUES||LA63_2==SHORT))
						{
							alt63 = 1;
						}
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:621:14: typeArguments
						{
						DebugLocation(621, 14);
						PushFollow(Follow._typeArguments_in_classOrInterfaceType2711);
						typeArguments176=typeArguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments176.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(63); }


					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classOrInterfaceType", 33);
			LeaveRule("classOrInterfaceType", 33);
			LeaveRule_classOrInterfaceType();
			if (state.backtracking > 0) { Memoize(input, 33, classOrInterfaceType_StartIndex); }

		}
		DebugLocation(624, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceType"); }
		return retval;

	}
	// $ANTLR end "classOrInterfaceType"

	partial void EnterRule_classOrInterfaceTypeWithDiamond();
	partial void LeaveRule_classOrInterfaceTypeWithDiamond();
	// $ANTLR start "classOrInterfaceTypeWithDiamond"
	// Java.g:627:1: classOrInterfaceTypeWithDiamond : IDENTIFIER ( typeArgumentsOrDiamond )? ( '.' IDENTIFIER ( typeArgumentsOrDiamond )? )* ;
	[GrammarRule("classOrInterfaceTypeWithDiamond")]
	private AstParserRuleReturnScope<object, IToken> classOrInterfaceTypeWithDiamond()
	{
		EnterRule_classOrInterfaceTypeWithDiamond();
		EnterRule("classOrInterfaceTypeWithDiamond", 34);
		TraceIn("classOrInterfaceTypeWithDiamond", 34);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classOrInterfaceTypeWithDiamond_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER177 = default(IToken);
		IToken char_literal179 = default(IToken);
		IToken IDENTIFIER180 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeArgumentsOrDiamond178 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeArgumentsOrDiamond181 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER177_tree = default(object);
		object char_literal179_tree = default(object);
		object IDENTIFIER180_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classOrInterfaceTypeWithDiamond");
		DebugLocation(627, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// Java.g:628:5: ( IDENTIFIER ( typeArgumentsOrDiamond )? ( '.' IDENTIFIER ( typeArgumentsOrDiamond )? )* )
			DebugEnterAlt(1);
			// Java.g:628:9: IDENTIFIER ( typeArgumentsOrDiamond )? ( '.' IDENTIFIER ( typeArgumentsOrDiamond )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(628, 9);
			IDENTIFIER177=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceTypeWithDiamond2757); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER177_tree = (object)adaptor.Create(IDENTIFIER177);
			adaptor.AddChild(root_0, IDENTIFIER177_tree);
			}
			DebugLocation(629, 9);
			// Java.g:629:9: ( typeArgumentsOrDiamond )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_1 = input.LA(1);

			if ((LA65_1==LT))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:629:10: typeArgumentsOrDiamond
				{
				DebugLocation(629, 10);
				PushFollow(Follow._typeArgumentsOrDiamond_in_classOrInterfaceTypeWithDiamond2768);
				typeArgumentsOrDiamond178=typeArgumentsOrDiamond();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeArgumentsOrDiamond178.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(631, 9);
			// Java.g:631:9: ( '.' IDENTIFIER ( typeArgumentsOrDiamond )? )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_1 = input.LA(1);

				if ((LA67_1==DOT))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:631:10: '.' IDENTIFIER ( typeArgumentsOrDiamond )?
					{
					DebugLocation(631, 10);
					char_literal179=(IToken)Match(input,DOT,Follow._DOT_in_classOrInterfaceTypeWithDiamond2790); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal179_tree = (object)adaptor.Create(char_literal179);
					adaptor.AddChild(root_0, char_literal179_tree);
					}
					DebugLocation(631, 14);
					IDENTIFIER180=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceTypeWithDiamond2792); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER180_tree = (object)adaptor.Create(IDENTIFIER180);
					adaptor.AddChild(root_0, IDENTIFIER180_tree);
					}
					DebugLocation(632, 13);
					// Java.g:632:13: ( typeArgumentsOrDiamond )?
					int alt66=2;
					try { DebugEnterSubRule(66);
					try { DebugEnterDecision(66, false);
					int LA66_1 = input.LA(1);

					if ((LA66_1==LT))
					{
						alt66 = 1;
					}
					} finally { DebugExitDecision(66); }
					switch (alt66)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:632:14: typeArgumentsOrDiamond
						{
						DebugLocation(632, 14);
						PushFollow(Follow._typeArgumentsOrDiamond_in_classOrInterfaceTypeWithDiamond2807);
						typeArgumentsOrDiamond181=typeArgumentsOrDiamond();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, typeArgumentsOrDiamond181.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(66); }


					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classOrInterfaceTypeWithDiamond", 34);
			LeaveRule("classOrInterfaceTypeWithDiamond", 34);
			LeaveRule_classOrInterfaceTypeWithDiamond();
			if (state.backtracking > 0) { Memoize(input, 34, classOrInterfaceTypeWithDiamond_StartIndex); }

		}
		DebugLocation(635, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceTypeWithDiamond"); }
		return retval;

	}
	// $ANTLR end "classOrInterfaceTypeWithDiamond"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// Java.g:638:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
	[GrammarRule("primitiveType")]
	private AstParserRuleReturnScope<object, IToken> primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 35);
		TraceIn("primitiveType", 35);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set182 = default(IToken);

		object set182_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(638, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// Java.g:639:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
			DebugEnterAlt(1);
			// Java.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(639, 5);

			set182=(IToken)input.LT(1);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set182));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 35);
			LeaveRule("primitiveType", 35);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 35, primitiveType_StartIndex); }

		}
		DebugLocation(647, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_typeArguments();
	partial void LeaveRule_typeArguments();
	// $ANTLR start "typeArguments"
	// Java.g:649:1: typeArguments : '<' typeArgument ( ',' typeArgument )* '>' ;
	[GrammarRule("typeArguments")]
	private AstParserRuleReturnScope<object, IToken> typeArguments()
	{
		EnterRule_typeArguments();
		EnterRule("typeArguments", 36);
		TraceIn("typeArguments", 36);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeArguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal183 = default(IToken);
		IToken char_literal185 = default(IToken);
		IToken char_literal187 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeArgument184 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeArgument186 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal183_tree = default(object);
		object char_literal185_tree = default(object);
		object char_literal187_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeArguments");
		DebugLocation(649, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// Java.g:650:5: ( '<' typeArgument ( ',' typeArgument )* '>' )
			DebugEnterAlt(1);
			// Java.g:650:9: '<' typeArgument ( ',' typeArgument )* '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(650, 9);
			char_literal183=(IToken)Match(input,LT,Follow._LT_in_typeArguments2944); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal183_tree = (object)adaptor.Create(char_literal183);
			adaptor.AddChild(root_0, char_literal183_tree);
			}
			DebugLocation(650, 13);
			PushFollow(Follow._typeArgument_in_typeArguments2946);
			typeArgument184=typeArgument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeArgument184.Tree);
			DebugLocation(650, 26);
			// Java.g:650:26: ( ',' typeArgument )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==COMMA))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:650:27: ',' typeArgument
					{
					DebugLocation(650, 27);
					char_literal185=(IToken)Match(input,COMMA,Follow._COMMA_in_typeArguments2949); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal185_tree = (object)adaptor.Create(char_literal185);
					adaptor.AddChild(root_0, char_literal185_tree);
					}
					DebugLocation(650, 31);
					PushFollow(Follow._typeArgument_in_typeArguments2951);
					typeArgument186=typeArgument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeArgument186.Tree);

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }

			DebugLocation(650, 46);
			char_literal187=(IToken)Match(input,GT,Follow._GT_in_typeArguments2955); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal187_tree = (object)adaptor.Create(char_literal187);
			adaptor.AddChild(root_0, char_literal187_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeArguments", 36);
			LeaveRule("typeArguments", 36);
			LeaveRule_typeArguments();
			if (state.backtracking > 0) { Memoize(input, 36, typeArguments_StartIndex); }

		}
		DebugLocation(651, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArguments"); }
		return retval;

	}
	// $ANTLR end "typeArguments"

	partial void EnterRule_typeArgument();
	partial void LeaveRule_typeArgument();
	// $ANTLR start "typeArgument"
	// Java.g:653:1: typeArgument : ( type | '?' ( ( 'extends' | 'super' ) type )? );
	[GrammarRule("typeArgument")]
	private AstParserRuleReturnScope<object, IToken> typeArgument()
	{
		EnterRule_typeArgument();
		EnterRule("typeArgument", 37);
		TraceIn("typeArgument", 37);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeArgument_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal189 = default(IToken);
		IToken set190 = default(IToken);
		AstParserRuleReturnScope<object, IToken> type188 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type191 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal189_tree = default(object);
		object set190_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeArgument");
		DebugLocation(653, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// Java.g:654:5: ( type | '?' ( ( 'extends' | 'super' ) type )? )
			int alt70=2;
			try { DebugEnterDecision(70, false);
			int LA70_1 = input.LA(1);

			if ((LA70_1==BOOLEAN||LA70_1==BYTE||LA70_1==CHAR||LA70_1==DOUBLE||LA70_1==FLOAT||LA70_1==IDENTIFIER||LA70_1==INT||LA70_1==LONG||LA70_1==SHORT))
			{
				alt70 = 1;
			}
			else if ((LA70_1==QUES))
			{
				alt70 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:654:9: type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(654, 9);
				PushFollow(Follow._type_in_typeArgument2975);
				type188=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type188.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:655:9: '?' ( ( 'extends' | 'super' ) type )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(655, 9);
				char_literal189=(IToken)Match(input,QUES,Follow._QUES_in_typeArgument2985); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal189_tree = (object)adaptor.Create(char_literal189);
				adaptor.AddChild(root_0, char_literal189_tree);
				}
				DebugLocation(656, 9);
				// Java.g:656:9: ( ( 'extends' | 'super' ) type )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_1 = input.LA(1);

				if ((LA69_1==EXTENDS||LA69_1==SUPER))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:657:13: ( 'extends' | 'super' ) type
					{
					DebugLocation(657, 13);

					set190=(IToken)input.LT(1);
					if (input.LA(1)==EXTENDS||input.LA(1)==SUPER)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set190));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(660, 13);
					PushFollow(Follow._type_in_typeArgument3053);
					type191=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type191.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(69); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeArgument", 37);
			LeaveRule("typeArgument", 37);
			LeaveRule_typeArgument();
			if (state.backtracking > 0) { Memoize(input, 37, typeArgument_StartIndex); }

		}
		DebugLocation(662, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArgument"); }
		return retval;

	}
	// $ANTLR end "typeArgument"

	partial void EnterRule_qualifiedNameList();
	partial void LeaveRule_qualifiedNameList();
	// $ANTLR start "qualifiedNameList"
	// Java.g:664:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
	[GrammarRule("qualifiedNameList")]
	private AstParserRuleReturnScope<object, IToken> qualifiedNameList()
	{
		EnterRule_qualifiedNameList();
		EnterRule("qualifiedNameList", 38);
		TraceIn("qualifiedNameList", 38);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedNameList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal193 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName192 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName194 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal193_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedNameList");
		DebugLocation(664, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// Java.g:665:5: ( qualifiedName ( ',' qualifiedName )* )
			DebugEnterAlt(1);
			// Java.g:665:9: qualifiedName ( ',' qualifiedName )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(665, 9);
			PushFollow(Follow._qualifiedName_in_qualifiedNameList3084);
			qualifiedName192=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName192.Tree);
			DebugLocation(666, 9);
			// Java.g:666:9: ( ',' qualifiedName )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, false);
				int LA71_1 = input.LA(1);

				if ((LA71_1==COMMA))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:666:10: ',' qualifiedName
					{
					DebugLocation(666, 10);
					char_literal193=(IToken)Match(input,COMMA,Follow._COMMA_in_qualifiedNameList3095); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal193_tree = (object)adaptor.Create(char_literal193);
					adaptor.AddChild(root_0, char_literal193_tree);
					}
					DebugLocation(666, 14);
					PushFollow(Follow._qualifiedName_in_qualifiedNameList3097);
					qualifiedName194=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName194.Tree);

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedNameList", 38);
			LeaveRule("qualifiedNameList", 38);
			LeaveRule_qualifiedNameList();
			if (state.backtracking > 0) { Memoize(input, 38, qualifiedNameList_StartIndex); }

		}
		DebugLocation(668, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedNameList"); }
		return retval;

	}
	// $ANTLR end "qualifiedNameList"

	partial void EnterRule_formalParameters();
	partial void LeaveRule_formalParameters();
	// $ANTLR start "formalParameters"
	// Java.g:670:1: formalParameters : '(' ( formalParameterDecls )? ')' ;
	[GrammarRule("formalParameters")]
	private AstParserRuleReturnScope<object, IToken> formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 39);
		TraceIn("formalParameters", 39);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameters_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal195 = default(IToken);
		IToken char_literal197 = default(IToken);
		AstParserRuleReturnScope<object, IToken> formalParameterDecls196 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal195_tree = default(object);
		object char_literal197_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(670, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// Java.g:671:5: ( '(' ( formalParameterDecls )? ')' )
			DebugEnterAlt(1);
			// Java.g:671:9: '(' ( formalParameterDecls )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(671, 9);
			char_literal195=(IToken)Match(input,LPAREN,Follow._LPAREN_in_formalParameters3128); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal195_tree = (object)adaptor.Create(char_literal195);
			adaptor.AddChild(root_0, char_literal195_tree);
			}
			DebugLocation(672, 9);
			// Java.g:672:9: ( formalParameterDecls )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==EOF||LA72_1==BOOLEAN||LA72_1==BYTE||LA72_1==CHAR||LA72_1==DOUBLE||LA72_1==FINAL||LA72_1==FLOAT||LA72_1==IDENTIFIER||LA72_1==INT||LA72_1==LONG||LA72_1==MONKEYS_AT||LA72_1==SHORT))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:672:10: formalParameterDecls
				{
				DebugLocation(672, 10);
				PushFollow(Follow._formalParameterDecls_in_formalParameters3139);
				formalParameterDecls196=formalParameterDecls();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameterDecls196.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(674, 9);
			char_literal197=(IToken)Match(input,RPAREN,Follow._RPAREN_in_formalParameters3161); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal197_tree = (object)adaptor.Create(char_literal197);
			adaptor.AddChild(root_0, char_literal197_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameters", 39);
			LeaveRule("formalParameters", 39);
			LeaveRule_formalParameters();
			if (state.backtracking > 0) { Memoize(input, 39, formalParameters_StartIndex); }

		}
		DebugLocation(675, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return retval;

	}
	// $ANTLR end "formalParameters"

	partial void EnterRule_formalParameterDecls();
	partial void LeaveRule_formalParameterDecls();
	// $ANTLR start "formalParameterDecls"
	// Java.g:677:1: formalParameterDecls : ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl );
	[GrammarRule("formalParameterDecls")]
	private AstParserRuleReturnScope<object, IToken> formalParameterDecls()
	{
		EnterRule_formalParameterDecls();
		EnterRule("formalParameterDecls", 40);
		TraceIn("formalParameterDecls", 40);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterDecls_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal200 = default(IToken);
		IToken char_literal203 = default(IToken);
		AstParserRuleReturnScope<object, IToken> ellipsisParameterDecl198 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> normalParameterDecl199 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> normalParameterDecl201 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> normalParameterDecl202 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> ellipsisParameterDecl204 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal200_tree = default(object);
		object char_literal203_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formalParameterDecls");
		DebugLocation(677, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// Java.g:678:5: ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl )
			int alt75=3;
			try { DebugEnterDecision(75, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred101_Java_fragment)))
				{
					alt75 = 2;
				}
				else if ((true))
				{
					alt75 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MONKEYS_AT:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred101_Java_fragment)))
				{
					alt75 = 2;
				}
				else if ((true))
				{
					alt75 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred101_Java_fragment)))
				{
					alt75 = 2;
				}
				else if ((true))
				{
					alt75 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Java_fragment)))
				{
					alt75 = 1;
				}
				else if ((EvaluatePredicate(synpred101_Java_fragment)))
				{
					alt75 = 2;
				}
				else if ((true))
				{
					alt75 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:678:9: ellipsisParameterDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(678, 9);
				PushFollow(Follow._ellipsisParameterDecl_in_formalParameterDecls3181);
				ellipsisParameterDecl198=ellipsisParameterDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ellipsisParameterDecl198.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:679:9: normalParameterDecl ( ',' normalParameterDecl )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(679, 9);
				PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3191);
				normalParameterDecl199=normalParameterDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalParameterDecl199.Tree);
				DebugLocation(680, 9);
				// Java.g:680:9: ( ',' normalParameterDecl )*
				try { DebugEnterSubRule(73);
				while (true)
				{
					int alt73=2;
					try { DebugEnterDecision(73, false);
					int LA73_1 = input.LA(1);

					if ((LA73_1==COMMA))
					{
						alt73 = 1;
					}


					} finally { DebugExitDecision(73); }
					switch ( alt73 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:680:10: ',' normalParameterDecl
						{
						DebugLocation(680, 10);
						char_literal200=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterDecls3202); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal200_tree = (object)adaptor.Create(char_literal200);
						adaptor.AddChild(root_0, char_literal200_tree);
						}
						DebugLocation(680, 14);
						PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3204);
						normalParameterDecl201=normalParameterDecl();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, normalParameterDecl201.Tree);

						}
						break;

					default:
						goto loop73;
					}
				}

				loop73:
					;

				} finally { DebugExitSubRule(73); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:682:9: ( normalParameterDecl ',' )+ ellipsisParameterDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(682, 9);
				// Java.g:682:9: ( normalParameterDecl ',' )+
				int cnt74=0;
				try { DebugEnterSubRule(74);
				while (true)
				{
					int alt74=2;
					try { DebugEnterDecision(74, false);
					switch (input.LA(1))
					{
					case FINAL:
						{
						int LA74_2 = input.LA(2);

						if ((EvaluatePredicate(synpred102_Java_fragment)))
						{
							alt74 = 1;
						}


						}
						break;
					case MONKEYS_AT:
						{
						int LA74_2 = input.LA(2);

						if ((EvaluatePredicate(synpred102_Java_fragment)))
						{
							alt74 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA74_2 = input.LA(2);

						if ((EvaluatePredicate(synpred102_Java_fragment)))
						{
							alt74 = 1;
						}


						}
						break;
					case BOOLEAN:
					case BYTE:
					case CHAR:
					case DOUBLE:
					case FLOAT:
					case INT:
					case LONG:
					case SHORT:
						{
						int LA74_2 = input.LA(2);

						if ((EvaluatePredicate(synpred102_Java_fragment)))
						{
							alt74 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(74); }
					switch (alt74)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:682:10: normalParameterDecl ','
						{
						DebugLocation(682, 10);
						PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3226);
						normalParameterDecl202=normalParameterDecl();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, normalParameterDecl202.Tree);
						DebugLocation(683, 9);
						char_literal203=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterDecls3236); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal203_tree = (object)adaptor.Create(char_literal203);
						adaptor.AddChild(root_0, char_literal203_tree);
						}

						}
						break;

					default:
						if (cnt74 >= 1)
							goto loop74;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee74 = new EarlyExitException( 74, input );
						DebugRecognitionException(eee74);
						throw eee74;
					}
					cnt74++;
				}
				loop74:
					;

				} finally { DebugExitSubRule(74); }

				DebugLocation(685, 9);
				PushFollow(Follow._ellipsisParameterDecl_in_formalParameterDecls3258);
				ellipsisParameterDecl204=ellipsisParameterDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ellipsisParameterDecl204.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterDecls", 40);
			LeaveRule("formalParameterDecls", 40);
			LeaveRule_formalParameterDecls();
			if (state.backtracking > 0) { Memoize(input, 40, formalParameterDecls_StartIndex); }

		}
		DebugLocation(686, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterDecls"); }
		return retval;

	}
	// $ANTLR end "formalParameterDecls"

	partial void EnterRule_normalParameterDecl();
	partial void LeaveRule_normalParameterDecl();
	// $ANTLR start "normalParameterDecl"
	// Java.g:688:1: normalParameterDecl : variableModifiers type IDENTIFIER ( '[' ']' )* ;
	[GrammarRule("normalParameterDecl")]
	private AstParserRuleReturnScope<object, IToken> normalParameterDecl()
	{
		EnterRule_normalParameterDecl();
		EnterRule("normalParameterDecl", 41);
		TraceIn("normalParameterDecl", 41);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int normalParameterDecl_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER207 = default(IToken);
		IToken char_literal208 = default(IToken);
		IToken char_literal209 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers205 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type206 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER207_tree = default(object);
		object char_literal208_tree = default(object);
		object char_literal209_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "normalParameterDecl");
		DebugLocation(688, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// Java.g:689:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* )
			DebugEnterAlt(1);
			// Java.g:689:9: variableModifiers type IDENTIFIER ( '[' ']' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(689, 9);
			PushFollow(Follow._variableModifiers_in_normalParameterDecl3278);
			variableModifiers205=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers205.Tree);
			DebugLocation(689, 27);
			PushFollow(Follow._type_in_normalParameterDecl3280);
			type206=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type206.Tree);
			DebugLocation(689, 32);
			IDENTIFIER207=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalParameterDecl3282); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER207_tree = (object)adaptor.Create(IDENTIFIER207);
			adaptor.AddChild(root_0, IDENTIFIER207_tree);
			}
			DebugLocation(690, 9);
			// Java.g:690:9: ( '[' ']' )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==LBRACKET))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:690:10: '[' ']'
					{
					DebugLocation(690, 10);
					char_literal208=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_normalParameterDecl3293); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal208_tree = (object)adaptor.Create(char_literal208);
					adaptor.AddChild(root_0, char_literal208_tree);
					}
					DebugLocation(690, 14);
					char_literal209=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_normalParameterDecl3295); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal209_tree = (object)adaptor.Create(char_literal209);
					adaptor.AddChild(root_0, char_literal209_tree);
					}

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("normalParameterDecl", 41);
			LeaveRule("normalParameterDecl", 41);
			LeaveRule_normalParameterDecl();
			if (state.backtracking > 0) { Memoize(input, 41, normalParameterDecl_StartIndex); }

		}
		DebugLocation(692, 4);
		} finally { DebugExitRule(GrammarFileName, "normalParameterDecl"); }
		return retval;

	}
	// $ANTLR end "normalParameterDecl"

	partial void EnterRule_ellipsisParameterDecl();
	partial void LeaveRule_ellipsisParameterDecl();
	// $ANTLR start "ellipsisParameterDecl"
	// Java.g:694:1: ellipsisParameterDecl : variableModifiers type '...' IDENTIFIER ;
	[GrammarRule("ellipsisParameterDecl")]
	private AstParserRuleReturnScope<object, IToken> ellipsisParameterDecl()
	{
		EnterRule_ellipsisParameterDecl();
		EnterRule("ellipsisParameterDecl", 42);
		TraceIn("ellipsisParameterDecl", 42);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ellipsisParameterDecl_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal212 = default(IToken);
		IToken IDENTIFIER213 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers210 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type211 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal212_tree = default(object);
		object IDENTIFIER213_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ellipsisParameterDecl");
		DebugLocation(694, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// Java.g:695:5: ( variableModifiers type '...' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:695:9: variableModifiers type '...' IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(695, 9);
			PushFollow(Follow._variableModifiers_in_ellipsisParameterDecl3326);
			variableModifiers210=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers210.Tree);
			DebugLocation(696, 9);
			PushFollow(Follow._type_in_ellipsisParameterDecl3336);
			type211=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type211.Tree);
			DebugLocation(696, 15);
			string_literal212=(IToken)Match(input,ELLIPSIS,Follow._ELLIPSIS_in_ellipsisParameterDecl3339); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal212_tree = (object)adaptor.Create(string_literal212);
			adaptor.AddChild(root_0, string_literal212_tree);
			}
			DebugLocation(697, 9);
			IDENTIFIER213=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_ellipsisParameterDecl3349); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER213_tree = (object)adaptor.Create(IDENTIFIER213);
			adaptor.AddChild(root_0, IDENTIFIER213_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ellipsisParameterDecl", 42);
			LeaveRule("ellipsisParameterDecl", 42);
			LeaveRule_ellipsisParameterDecl();
			if (state.backtracking > 0) { Memoize(input, 42, ellipsisParameterDecl_StartIndex); }

		}
		DebugLocation(698, 4);
		} finally { DebugExitRule(GrammarFileName, "ellipsisParameterDecl"); }
		return retval;

	}
	// $ANTLR end "ellipsisParameterDecl"

	partial void EnterRule_explicitConstructorInvocation();
	partial void LeaveRule_explicitConstructorInvocation();
	// $ANTLR start "explicitConstructorInvocation"
	// Java.g:701:1: explicitConstructorInvocation : ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' );
	[GrammarRule("explicitConstructorInvocation")]
	private AstParserRuleReturnScope<object, IToken> explicitConstructorInvocation()
	{
		EnterRule_explicitConstructorInvocation();
		EnterRule("explicitConstructorInvocation", 43);
		TraceIn("explicitConstructorInvocation", 43);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int explicitConstructorInvocation_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set215 = default(IToken);
		IToken char_literal217 = default(IToken);
		IToken char_literal219 = default(IToken);
		IToken string_literal221 = default(IToken);
		IToken char_literal223 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments214 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments216 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primary218 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments220 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments222 = default(AstParserRuleReturnScope<object, IToken>);

		object set215_tree = default(object);
		object char_literal217_tree = default(object);
		object char_literal219_tree = default(object);
		object string_literal221_tree = default(object);
		object char_literal223_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "explicitConstructorInvocation");
		DebugLocation(701, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// Java.g:702:5: ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' )
			int alt79=2;
			try { DebugEnterDecision(79, false);
			switch (input.LA(1))
			{
			case LT:
				{
				alt79 = 1;
				}
				break;
			case THIS:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred106_Java_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case BooleanLiteral:
			case CHAR:
			case CharacterLiteral:
			case DOUBLE:
			case FLOAT:
			case FloatingPointLiteral:
			case IDENTIFIER:
			case INT:
			case IntegerLiteral:
			case LONG:
			case LPAREN:
			case NEW:
			case NullLiteral:
			case SHORT:
			case StringLiteral:
			case VOID:
				{
				alt79 = 2;
				}
				break;
			case SUPER:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred106_Java_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:702:9: ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(702, 9);
				// Java.g:702:9: ( nonWildcardTypeArguments )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==LT))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:702:10: nonWildcardTypeArguments
					{
					DebugLocation(702, 10);
					PushFollow(Follow._nonWildcardTypeArguments_in_explicitConstructorInvocation3371);
					nonWildcardTypeArguments214=nonWildcardTypeArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments214.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(704, 9);

				set215=(IToken)input.LT(1);
				if (input.LA(1)==SUPER||input.LA(1)==THIS)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set215));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(707, 9);
				PushFollow(Follow._arguments_in_explicitConstructorInvocation3429);
				arguments216=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments216.Tree);
				DebugLocation(707, 19);
				char_literal217=(IToken)Match(input,SEMI,Follow._SEMI_in_explicitConstructorInvocation3431); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal217_tree = (object)adaptor.Create(char_literal217);
				adaptor.AddChild(root_0, char_literal217_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:709:9: primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(709, 9);
				PushFollow(Follow._primary_in_explicitConstructorInvocation3442);
				primary218=primary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary218.Tree);
				DebugLocation(710, 9);
				char_literal219=(IToken)Match(input,DOT,Follow._DOT_in_explicitConstructorInvocation3452); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal219_tree = (object)adaptor.Create(char_literal219);
				adaptor.AddChild(root_0, char_literal219_tree);
				}
				DebugLocation(711, 9);
				// Java.g:711:9: ( nonWildcardTypeArguments )?
				int alt78=2;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==LT))
				{
					alt78 = 1;
				}
				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:711:10: nonWildcardTypeArguments
					{
					DebugLocation(711, 10);
					PushFollow(Follow._nonWildcardTypeArguments_in_explicitConstructorInvocation3463);
					nonWildcardTypeArguments220=nonWildcardTypeArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments220.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(78); }

				DebugLocation(713, 9);
				string_literal221=(IToken)Match(input,SUPER,Follow._SUPER_in_explicitConstructorInvocation3484); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal221_tree = (object)adaptor.Create(string_literal221);
				adaptor.AddChild(root_0, string_literal221_tree);
				}
				DebugLocation(714, 9);
				PushFollow(Follow._arguments_in_explicitConstructorInvocation3494);
				arguments222=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments222.Tree);
				DebugLocation(714, 19);
				char_literal223=(IToken)Match(input,SEMI,Follow._SEMI_in_explicitConstructorInvocation3496); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal223_tree = (object)adaptor.Create(char_literal223);
				adaptor.AddChild(root_0, char_literal223_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicitConstructorInvocation", 43);
			LeaveRule("explicitConstructorInvocation", 43);
			LeaveRule_explicitConstructorInvocation();
			if (state.backtracking > 0) { Memoize(input, 43, explicitConstructorInvocation_StartIndex); }

		}
		DebugLocation(715, 4);
		} finally { DebugExitRule(GrammarFileName, "explicitConstructorInvocation"); }
		return retval;

	}
	// $ANTLR end "explicitConstructorInvocation"

	partial void EnterRule_qualifiedName();
	partial void LeaveRule_qualifiedName();
	// $ANTLR start "qualifiedName"
	// Java.g:717:1: qualifiedName : IDENTIFIER ( '.' IDENTIFIER )* ;
	[GrammarRule("qualifiedName")]
	private AstParserRuleReturnScope<object, IToken> qualifiedName()
	{
		EnterRule_qualifiedName();
		EnterRule("qualifiedName", 44);
		TraceIn("qualifiedName", 44);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER224 = default(IToken);
		IToken char_literal225 = default(IToken);
		IToken IDENTIFIER226 = default(IToken);

		object IDENTIFIER224_tree = default(object);
		object char_literal225_tree = default(object);
		object IDENTIFIER226_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedName");
		DebugLocation(717, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// Java.g:718:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
			DebugEnterAlt(1);
			// Java.g:718:9: IDENTIFIER ( '.' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(718, 9);
			IDENTIFIER224=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedName3516); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER224_tree = (object)adaptor.Create(IDENTIFIER224);
			adaptor.AddChild(root_0, IDENTIFIER224_tree);
			}
			DebugLocation(719, 9);
			// Java.g:719:9: ( '.' IDENTIFIER )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_1 = input.LA(1);

				if ((LA80_1==DOT))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:719:10: '.' IDENTIFIER
					{
					DebugLocation(719, 10);
					char_literal225=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedName3527); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal225_tree = (object)adaptor.Create(char_literal225);
					adaptor.AddChild(root_0, char_literal225_tree);
					}
					DebugLocation(719, 14);
					IDENTIFIER226=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedName3529); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER226_tree = (object)adaptor.Create(IDENTIFIER226);
					adaptor.AddChild(root_0, IDENTIFIER226_tree);
					}

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedName", 44);
			LeaveRule("qualifiedName", 44);
			LeaveRule_qualifiedName();
			if (state.backtracking > 0) { Memoize(input, 44, qualifiedName_StartIndex); }

		}
		DebugLocation(721, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedName"); }
		return retval;

	}
	// $ANTLR end "qualifiedName"

	partial void EnterRule_annotations();
	partial void LeaveRule_annotations();
	// $ANTLR start "annotations"
	// Java.g:723:1: annotations : ( annotation )+ ;
	[GrammarRule("annotations")]
	private AstParserRuleReturnScope<object, IToken> annotations()
	{
		EnterRule_annotations();
		EnterRule("annotations", 45);
		TraceIn("annotations", 45);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotations_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> annotation227 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "annotations");
		DebugLocation(723, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// Java.g:724:5: ( ( annotation )+ )
			DebugEnterAlt(1);
			// Java.g:724:9: ( annotation )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(724, 9);
			// Java.g:724:9: ( annotation )+
			int cnt81=0;
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_1 = input.LA(1);

				if ((LA81_1==MONKEYS_AT))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:724:10: annotation
					{
					DebugLocation(724, 10);
					PushFollow(Follow._annotation_in_annotations3561);
					annotation227=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotation227.Tree);

					}
					break;

				default:
					if (cnt81 >= 1)
						goto loop81;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee81 = new EarlyExitException( 81, input );
					DebugRecognitionException(eee81);
					throw eee81;
				}
				cnt81++;
			}
			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotations", 45);
			LeaveRule("annotations", 45);
			LeaveRule_annotations();
			if (state.backtracking > 0) { Memoize(input, 45, annotations_StartIndex); }

		}
		DebugLocation(726, 4);
		} finally { DebugExitRule(GrammarFileName, "annotations"); }
		return retval;

	}
	// $ANTLR end "annotations"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// Java.g:732:1: annotation : '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? ;
	[GrammarRule("annotation")]
	private AstParserRuleReturnScope<object, IToken> annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 46);
		TraceIn("annotation", 46);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotation_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal228 = default(IToken);
		IToken char_literal230 = default(IToken);
		IToken char_literal233 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName229 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValuePairs231 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValue232 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal228_tree = default(object);
		object char_literal230_tree = default(object);
		object char_literal233_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(732, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// Java.g:733:5: ( '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? )
			DebugEnterAlt(1);
			// Java.g:733:9: '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(733, 9);
			char_literal228=(IToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotation3594); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal228_tree = (object)adaptor.Create(char_literal228);
			adaptor.AddChild(root_0, char_literal228_tree);
			}
			DebugLocation(733, 13);
			PushFollow(Follow._qualifiedName_in_annotation3596);
			qualifiedName229=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName229.Tree);
			DebugLocation(734, 9);
			// Java.g:734:9: ( '(' ( elementValuePairs | elementValue )? ')' )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_1 = input.LA(1);

			if ((LA83_1==LPAREN))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:734:13: '(' ( elementValuePairs | elementValue )? ')'
				{
				DebugLocation(734, 13);
				char_literal230=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotation3610); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal230_tree = (object)adaptor.Create(char_literal230);
				adaptor.AddChild(root_0, char_literal230_tree);
				}
				DebugLocation(735, 19);
				// Java.g:735:19: ( elementValuePairs | elementValue )?
				int alt82=3;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				int LA82_1 = input.LA(1);

				if ((LA82_1==IDENTIFIER))
				{
					int LA82_2 = input.LA(2);

					if ((LA82_2==EQ))
					{
						alt82 = 1;
					}
					else if (((LA82_2>=AMP && LA82_2<=AMPAMP)||(LA82_2>=BANGEQ && LA82_2<=BARBAR)||LA82_2==CARET||LA82_2==DOT||LA82_2==EQEQ||LA82_2==GT||LA82_2==INSTANCEOF||LA82_2==LBRACKET||(LA82_2>=LPAREN && LA82_2<=LT)||LA82_2==PERCENT||LA82_2==PLUS||LA82_2==PLUSPLUS||LA82_2==QUES||LA82_2==RPAREN||LA82_2==SLASH||LA82_2==STAR||LA82_2==SUB||LA82_2==SUBSUB))
					{
						alt82 = 2;
					}
				}
				else if ((LA82_1==BANG||LA82_1==BOOLEAN||LA82_1==BYTE||LA82_1==BooleanLiteral||LA82_1==CHAR||LA82_1==CharacterLiteral||LA82_1==DOUBLE||LA82_1==FLOAT||LA82_1==FloatingPointLiteral||LA82_1==INT||LA82_1==IntegerLiteral||LA82_1==LBRACE||(LA82_1>=LONG && LA82_1<=LPAREN)||LA82_1==MONKEYS_AT||LA82_1==NEW||LA82_1==NullLiteral||LA82_1==PLUS||LA82_1==PLUSPLUS||LA82_1==SHORT||LA82_1==SUB||(LA82_1>=SUBSUB && LA82_1<=SUPER)||LA82_1==StringLiteral||LA82_1==THIS||LA82_1==TILDE||LA82_1==VOID))
				{
					alt82 = 2;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:735:23: elementValuePairs
					{
					DebugLocation(735, 23);
					PushFollow(Follow._elementValuePairs_in_annotation3637);
					elementValuePairs231=elementValuePairs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, elementValuePairs231.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:736:23: elementValue
					{
					DebugLocation(736, 23);
					PushFollow(Follow._elementValue_in_annotation3661);
					elementValue232=elementValue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue232.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(82); }

				DebugLocation(738, 13);
				char_literal233=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotation3697); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal233_tree = (object)adaptor.Create(char_literal233);
				adaptor.AddChild(root_0, char_literal233_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotation", 46);
			LeaveRule("annotation", 46);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 46, annotation_StartIndex); }

		}
		DebugLocation(740, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return retval;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_elementValuePairs();
	partial void LeaveRule_elementValuePairs();
	// $ANTLR start "elementValuePairs"
	// Java.g:742:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
	[GrammarRule("elementValuePairs")]
	private AstParserRuleReturnScope<object, IToken> elementValuePairs()
	{
		EnterRule_elementValuePairs();
		EnterRule("elementValuePairs", 47);
		TraceIn("elementValuePairs", 47);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int elementValuePairs_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal235 = default(IToken);
		AstParserRuleReturnScope<object, IToken> elementValuePair234 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValuePair236 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal235_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "elementValuePairs");
		DebugLocation(742, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// Java.g:743:5: ( elementValuePair ( ',' elementValuePair )* )
			DebugEnterAlt(1);
			// Java.g:743:9: elementValuePair ( ',' elementValuePair )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(743, 9);
			PushFollow(Follow._elementValuePair_in_elementValuePairs3729);
			elementValuePair234=elementValuePair();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, elementValuePair234.Tree);
			DebugLocation(744, 9);
			// Java.g:744:9: ( ',' elementValuePair )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_1 = input.LA(1);

				if ((LA84_1==COMMA))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:744:10: ',' elementValuePair
					{
					DebugLocation(744, 10);
					char_literal235=(IToken)Match(input,COMMA,Follow._COMMA_in_elementValuePairs3740); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal235_tree = (object)adaptor.Create(char_literal235);
					adaptor.AddChild(root_0, char_literal235_tree);
					}
					DebugLocation(744, 14);
					PushFollow(Follow._elementValuePair_in_elementValuePairs3742);
					elementValuePair236=elementValuePair();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, elementValuePair236.Tree);

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValuePairs", 47);
			LeaveRule("elementValuePairs", 47);
			LeaveRule_elementValuePairs();
			if (state.backtracking > 0) { Memoize(input, 47, elementValuePairs_StartIndex); }

		}
		DebugLocation(746, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValuePairs"); }
		return retval;

	}
	// $ANTLR end "elementValuePairs"

	partial void EnterRule_elementValuePair();
	partial void LeaveRule_elementValuePair();
	// $ANTLR start "elementValuePair"
	// Java.g:748:1: elementValuePair : IDENTIFIER '=' elementValue ;
	[GrammarRule("elementValuePair")]
	private AstParserRuleReturnScope<object, IToken> elementValuePair()
	{
		EnterRule_elementValuePair();
		EnterRule("elementValuePair", 48);
		TraceIn("elementValuePair", 48);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int elementValuePair_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER237 = default(IToken);
		IToken char_literal238 = default(IToken);
		AstParserRuleReturnScope<object, IToken> elementValue239 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER237_tree = default(object);
		object char_literal238_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "elementValuePair");
		DebugLocation(748, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// Java.g:749:5: ( IDENTIFIER '=' elementValue )
			DebugEnterAlt(1);
			// Java.g:749:9: IDENTIFIER '=' elementValue
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(749, 9);
			IDENTIFIER237=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_elementValuePair3773); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER237_tree = (object)adaptor.Create(IDENTIFIER237);
			adaptor.AddChild(root_0, IDENTIFIER237_tree);
			}
			DebugLocation(749, 20);
			char_literal238=(IToken)Match(input,EQ,Follow._EQ_in_elementValuePair3775); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal238_tree = (object)adaptor.Create(char_literal238);
			adaptor.AddChild(root_0, char_literal238_tree);
			}
			DebugLocation(749, 24);
			PushFollow(Follow._elementValue_in_elementValuePair3777);
			elementValue239=elementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue239.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValuePair", 48);
			LeaveRule("elementValuePair", 48);
			LeaveRule_elementValuePair();
			if (state.backtracking > 0) { Memoize(input, 48, elementValuePair_StartIndex); }

		}
		DebugLocation(750, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValuePair"); }
		return retval;

	}
	// $ANTLR end "elementValuePair"

	partial void EnterRule_elementValue();
	partial void LeaveRule_elementValue();
	// $ANTLR start "elementValue"
	// Java.g:752:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
	[GrammarRule("elementValue")]
	private AstParserRuleReturnScope<object, IToken> elementValue()
	{
		EnterRule_elementValue();
		EnterRule("elementValue", 49);
		TraceIn("elementValue", 49);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int elementValue_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> conditionalExpression240 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> annotation241 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValueArrayInitializer242 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "elementValue");
		DebugLocation(752, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// Java.g:753:5: ( conditionalExpression | annotation | elementValueArrayInitializer )
			int alt85=3;
			try { DebugEnterDecision(85, false);
			switch (input.LA(1))
			{
			case BANG:
			case BOOLEAN:
			case BYTE:
			case BooleanLiteral:
			case CHAR:
			case CharacterLiteral:
			case DOUBLE:
			case FLOAT:
			case FloatingPointLiteral:
			case IDENTIFIER:
			case INT:
			case IntegerLiteral:
			case LONG:
			case LPAREN:
			case NEW:
			case NullLiteral:
			case PLUS:
			case PLUSPLUS:
			case SHORT:
			case SUB:
			case SUBSUB:
			case SUPER:
			case StringLiteral:
			case THIS:
			case TILDE:
			case VOID:
				{
				alt85 = 1;
				}
				break;
			case MONKEYS_AT:
				{
				alt85 = 2;
				}
				break;
			case LBRACE:
				{
				alt85 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:753:9: conditionalExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(753, 9);
				PushFollow(Follow._conditionalExpression_in_elementValue3797);
				conditionalExpression240=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression240.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:754:9: annotation
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(754, 9);
				PushFollow(Follow._annotation_in_elementValue3807);
				annotation241=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation241.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:755:9: elementValueArrayInitializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(755, 9);
				PushFollow(Follow._elementValueArrayInitializer_in_elementValue3817);
				elementValueArrayInitializer242=elementValueArrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementValueArrayInitializer242.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValue", 49);
			LeaveRule("elementValue", 49);
			LeaveRule_elementValue();
			if (state.backtracking > 0) { Memoize(input, 49, elementValue_StartIndex); }

		}
		DebugLocation(756, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValue"); }
		return retval;

	}
	// $ANTLR end "elementValue"

	partial void EnterRule_elementValueArrayInitializer();
	partial void LeaveRule_elementValueArrayInitializer();
	// $ANTLR start "elementValueArrayInitializer"
	// Java.g:758:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
	[GrammarRule("elementValueArrayInitializer")]
	private AstParserRuleReturnScope<object, IToken> elementValueArrayInitializer()
	{
		EnterRule_elementValueArrayInitializer();
		EnterRule("elementValueArrayInitializer", 50);
		TraceIn("elementValueArrayInitializer", 50);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int elementValueArrayInitializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal243 = default(IToken);
		IToken char_literal245 = default(IToken);
		IToken char_literal247 = default(IToken);
		IToken char_literal248 = default(IToken);
		AstParserRuleReturnScope<object, IToken> elementValue244 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValue246 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal243_tree = default(object);
		object char_literal245_tree = default(object);
		object char_literal247_tree = default(object);
		object char_literal248_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "elementValueArrayInitializer");
		DebugLocation(758, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// Java.g:759:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// Java.g:759:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(759, 9);
			char_literal243=(IToken)Match(input,LBRACE,Follow._LBRACE_in_elementValueArrayInitializer3837); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal243_tree = (object)adaptor.Create(char_literal243);
			adaptor.AddChild(root_0, char_literal243_tree);
			}
			DebugLocation(760, 9);
			// Java.g:760:9: ( elementValue ( ',' elementValue )* )?
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_1 = input.LA(1);

			if ((LA87_1==BANG||LA87_1==BOOLEAN||LA87_1==BYTE||LA87_1==BooleanLiteral||LA87_1==CHAR||LA87_1==CharacterLiteral||LA87_1==DOUBLE||LA87_1==FLOAT||LA87_1==FloatingPointLiteral||LA87_1==IDENTIFIER||LA87_1==INT||LA87_1==IntegerLiteral||LA87_1==LBRACE||(LA87_1>=LONG && LA87_1<=LPAREN)||LA87_1==MONKEYS_AT||LA87_1==NEW||LA87_1==NullLiteral||LA87_1==PLUS||LA87_1==PLUSPLUS||LA87_1==SHORT||LA87_1==SUB||(LA87_1>=SUBSUB && LA87_1<=SUPER)||LA87_1==StringLiteral||LA87_1==THIS||LA87_1==TILDE||LA87_1==VOID))
			{
				alt87 = 1;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:760:10: elementValue ( ',' elementValue )*
				{
				DebugLocation(760, 10);
				PushFollow(Follow._elementValue_in_elementValueArrayInitializer3848);
				elementValue244=elementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue244.Tree);
				DebugLocation(761, 13);
				// Java.g:761:13: ( ',' elementValue )*
				try { DebugEnterSubRule(86);
				while (true)
				{
					int alt86=2;
					try { DebugEnterDecision(86, false);
					int LA86_1 = input.LA(1);

					if ((LA86_1==COMMA))
					{
						int LA86_2 = input.LA(2);

						if ((LA86_2==BANG||LA86_2==BOOLEAN||LA86_2==BYTE||LA86_2==BooleanLiteral||LA86_2==CHAR||LA86_2==CharacterLiteral||LA86_2==DOUBLE||LA86_2==FLOAT||LA86_2==FloatingPointLiteral||LA86_2==IDENTIFIER||LA86_2==INT||LA86_2==IntegerLiteral||LA86_2==LBRACE||(LA86_2>=LONG && LA86_2<=LPAREN)||LA86_2==MONKEYS_AT||LA86_2==NEW||LA86_2==NullLiteral||LA86_2==PLUS||LA86_2==PLUSPLUS||LA86_2==SHORT||LA86_2==SUB||(LA86_2>=SUBSUB && LA86_2<=SUPER)||LA86_2==StringLiteral||LA86_2==THIS||LA86_2==TILDE||LA86_2==VOID))
						{
							alt86 = 1;
						}


					}


					} finally { DebugExitDecision(86); }
					switch ( alt86 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:761:14: ',' elementValue
						{
						DebugLocation(761, 14);
						char_literal245=(IToken)Match(input,COMMA,Follow._COMMA_in_elementValueArrayInitializer3863); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal245_tree = (object)adaptor.Create(char_literal245);
						adaptor.AddChild(root_0, char_literal245_tree);
						}
						DebugLocation(761, 18);
						PushFollow(Follow._elementValue_in_elementValueArrayInitializer3865);
						elementValue246=elementValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue246.Tree);

						}
						break;

					default:
						goto loop86;
					}
				}

				loop86:
					;

				} finally { DebugExitSubRule(86); }


				}
				break;

			}
			} finally { DebugExitSubRule(87); }

			DebugLocation(763, 12);
			// Java.g:763:12: ( ',' )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			int LA88_1 = input.LA(1);

			if ((LA88_1==COMMA))
			{
				alt88 = 1;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:763:13: ','
				{
				DebugLocation(763, 13);
				char_literal247=(IToken)Match(input,COMMA,Follow._COMMA_in_elementValueArrayInitializer3894); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal247_tree = (object)adaptor.Create(char_literal247);
				adaptor.AddChild(root_0, char_literal247_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(88); }

			DebugLocation(763, 19);
			char_literal248=(IToken)Match(input,RBRACE,Follow._RBRACE_in_elementValueArrayInitializer3898); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal248_tree = (object)adaptor.Create(char_literal248);
			adaptor.AddChild(root_0, char_literal248_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValueArrayInitializer", 50);
			LeaveRule("elementValueArrayInitializer", 50);
			LeaveRule_elementValueArrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 50, elementValueArrayInitializer_StartIndex); }

		}
		DebugLocation(764, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValueArrayInitializer"); }
		return retval;

	}
	// $ANTLR end "elementValueArrayInitializer"

	partial void EnterRule_annotationTypeDeclaration();
	partial void LeaveRule_annotationTypeDeclaration();
	// $ANTLR start "annotationTypeDeclaration"
	// Java.g:770:1: annotationTypeDeclaration : modifiers '@' 'interface' IDENTIFIER annotationTypeBody ;
	[GrammarRule("annotationTypeDeclaration")]
	private AstParserRuleReturnScope<object, IToken> annotationTypeDeclaration()
	{
		EnterRule_annotationTypeDeclaration();
		EnterRule("annotationTypeDeclaration", 51);
		TraceIn("annotationTypeDeclaration", 51);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationTypeDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal250 = default(IToken);
		IToken string_literal251 = default(IToken);
		IToken IDENTIFIER252 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers249 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> annotationTypeBody253 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal250_tree = default(object);
		object string_literal251_tree = default(object);
		object IDENTIFIER252_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotationTypeDeclaration");
		DebugLocation(770, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// Java.g:771:5: ( modifiers '@' 'interface' IDENTIFIER annotationTypeBody )
			DebugEnterAlt(1);
			// Java.g:771:9: modifiers '@' 'interface' IDENTIFIER annotationTypeBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(771, 9);
			PushFollow(Follow._modifiers_in_annotationTypeDeclaration3921);
			modifiers249=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers249.Tree);
			DebugLocation(771, 19);
			char_literal250=(IToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotationTypeDeclaration3923); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal250_tree = (object)adaptor.Create(char_literal250);
			adaptor.AddChild(root_0, char_literal250_tree);
			}
			DebugLocation(772, 9);
			string_literal251=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_annotationTypeDeclaration3933); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal251_tree = (object)adaptor.Create(string_literal251);
			adaptor.AddChild(root_0, string_literal251_tree);
			}
			DebugLocation(773, 9);
			IDENTIFIER252=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationTypeDeclaration3943); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER252_tree = (object)adaptor.Create(IDENTIFIER252);
			adaptor.AddChild(root_0, IDENTIFIER252_tree);
			}
			DebugLocation(774, 9);
			PushFollow(Follow._annotationTypeBody_in_annotationTypeDeclaration3953);
			annotationTypeBody253=annotationTypeBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeBody253.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeDeclaration", 51);
			LeaveRule("annotationTypeDeclaration", 51);
			LeaveRule_annotationTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 51, annotationTypeDeclaration_StartIndex); }

		}
		DebugLocation(775, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationTypeDeclaration"

	partial void EnterRule_annotationTypeBody();
	partial void LeaveRule_annotationTypeBody();
	// $ANTLR start "annotationTypeBody"
	// Java.g:778:1: annotationTypeBody : '{' ( annotationTypeElementDeclaration )* '}' ;
	[GrammarRule("annotationTypeBody")]
	private AstParserRuleReturnScope<object, IToken> annotationTypeBody()
	{
		EnterRule_annotationTypeBody();
		EnterRule("annotationTypeBody", 52);
		TraceIn("annotationTypeBody", 52);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationTypeBody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal254 = default(IToken);
		IToken char_literal256 = default(IToken);
		AstParserRuleReturnScope<object, IToken> annotationTypeElementDeclaration255 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal254_tree = default(object);
		object char_literal256_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotationTypeBody");
		DebugLocation(778, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// Java.g:779:5: ( '{' ( annotationTypeElementDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:779:9: '{' ( annotationTypeElementDeclaration )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(779, 9);
			char_literal254=(IToken)Match(input,LBRACE,Follow._LBRACE_in_annotationTypeBody3974); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal254_tree = (object)adaptor.Create(char_literal254);
			adaptor.AddChild(root_0, char_literal254_tree);
			}
			DebugLocation(780, 9);
			// Java.g:780:9: ( annotationTypeElementDeclaration )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_1 = input.LA(1);

				if ((LA89_1==ABSTRACT||LA89_1==BOOLEAN||LA89_1==BYTE||(LA89_1>=CHAR && LA89_1<=CLASS)||LA89_1==DOUBLE||LA89_1==ENUM||LA89_1==FINAL||LA89_1==FLOAT||LA89_1==IDENTIFIER||(LA89_1>=INT && LA89_1<=INTERFACE)||LA89_1==LONG||(LA89_1>=LT && LA89_1<=NATIVE)||(LA89_1>=PRIVATE && LA89_1<=PUBLIC)||(LA89_1>=SEMI && LA89_1<=SHORT)||(LA89_1>=STATIC && LA89_1<=STRICTFP)||LA89_1==SYNCHRONIZED||LA89_1==TRANSIENT||(LA89_1>=VOID && LA89_1<=VOLATILE)))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:780:10: annotationTypeElementDeclaration
					{
					DebugLocation(780, 10);
					PushFollow(Follow._annotationTypeElementDeclaration_in_annotationTypeBody3986);
					annotationTypeElementDeclaration255=annotationTypeElementDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeElementDeclaration255.Tree);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(782, 9);
			char_literal256=(IToken)Match(input,RBRACE,Follow._RBRACE_in_annotationTypeBody4008); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal256_tree = (object)adaptor.Create(char_literal256);
			adaptor.AddChild(root_0, char_literal256_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeBody", 52);
			LeaveRule("annotationTypeBody", 52);
			LeaveRule_annotationTypeBody();
			if (state.backtracking > 0) { Memoize(input, 52, annotationTypeBody_StartIndex); }

		}
		DebugLocation(783, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeBody"); }
		return retval;

	}
	// $ANTLR end "annotationTypeBody"

	partial void EnterRule_annotationTypeElementDeclaration();
	partial void LeaveRule_annotationTypeElementDeclaration();
	// $ANTLR start "annotationTypeElementDeclaration"
	// Java.g:788:1: annotationTypeElementDeclaration : ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' );
	[GrammarRule("annotationTypeElementDeclaration")]
	private AstParserRuleReturnScope<object, IToken> annotationTypeElementDeclaration()
	{
		EnterRule_annotationTypeElementDeclaration();
		EnterRule("annotationTypeElementDeclaration", 53);
		TraceIn("annotationTypeElementDeclaration", 53);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationTypeElementDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal263 = default(IToken);
		AstParserRuleReturnScope<object, IToken> annotationMethodDeclaration257 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceFieldDeclaration258 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> normalClassDeclaration259 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> normalInterfaceDeclaration260 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumDeclaration261 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> annotationTypeDeclaration262 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal263_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotationTypeElementDeclaration");
		DebugLocation(788, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// Java.g:789:5: ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' )
			int alt90=7;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt90 = 3;
				}
				else if ((EvaluatePredicate(synpred123_Java_fragment)))
				{
					alt90 = 4;
				}
				else if ((EvaluatePredicate(synpred124_Java_fragment)))
				{
					alt90 = 5;
				}
				else if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				alt90 = 3;
				}
				break;
			case INTERFACE:
				{
				alt90 = 4;
				}
				break;
			case ENUM:
				{
				alt90 = 5;
				}
				break;
			case SEMI:
				{
				alt90 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:789:9: annotationMethodDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(789, 9);
				PushFollow(Follow._annotationMethodDeclaration_in_annotationTypeElementDeclaration4030);
				annotationMethodDeclaration257=annotationMethodDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationMethodDeclaration257.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:790:9: interfaceFieldDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(790, 9);
				PushFollow(Follow._interfaceFieldDeclaration_in_annotationTypeElementDeclaration4040);
				interfaceFieldDeclaration258=interfaceFieldDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceFieldDeclaration258.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:791:9: normalClassDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(791, 9);
				PushFollow(Follow._normalClassDeclaration_in_annotationTypeElementDeclaration4050);
				normalClassDeclaration259=normalClassDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalClassDeclaration259.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:792:9: normalInterfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(792, 9);
				PushFollow(Follow._normalInterfaceDeclaration_in_annotationTypeElementDeclaration4060);
				normalInterfaceDeclaration260=normalInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalInterfaceDeclaration260.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:793:9: enumDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(793, 9);
				PushFollow(Follow._enumDeclaration_in_annotationTypeElementDeclaration4070);
				enumDeclaration261=enumDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumDeclaration261.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:794:9: annotationTypeDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(794, 9);
				PushFollow(Follow._annotationTypeDeclaration_in_annotationTypeElementDeclaration4080);
				annotationTypeDeclaration262=annotationTypeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeDeclaration262.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:795:9: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(795, 9);
				char_literal263=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationTypeElementDeclaration4090); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal263_tree = (object)adaptor.Create(char_literal263);
				adaptor.AddChild(root_0, char_literal263_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeElementDeclaration", 53);
			LeaveRule("annotationTypeElementDeclaration", 53);
			LeaveRule_annotationTypeElementDeclaration();
			if (state.backtracking > 0) { Memoize(input, 53, annotationTypeElementDeclaration_StartIndex); }

		}
		DebugLocation(796, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeElementDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationTypeElementDeclaration"

	partial void EnterRule_annotationMethodDeclaration();
	partial void LeaveRule_annotationMethodDeclaration();
	// $ANTLR start "annotationMethodDeclaration"
	// Java.g:798:1: annotationMethodDeclaration : modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' ;
	[GrammarRule("annotationMethodDeclaration")]
	private AstParserRuleReturnScope<object, IToken> annotationMethodDeclaration()
	{
		EnterRule_annotationMethodDeclaration();
		EnterRule("annotationMethodDeclaration", 54);
		TraceIn("annotationMethodDeclaration", 54);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationMethodDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER266 = default(IToken);
		IToken char_literal267 = default(IToken);
		IToken char_literal268 = default(IToken);
		IToken string_literal269 = default(IToken);
		IToken char_literal271 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers264 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type265 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValue270 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER266_tree = default(object);
		object char_literal267_tree = default(object);
		object char_literal268_tree = default(object);
		object string_literal269_tree = default(object);
		object char_literal271_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotationMethodDeclaration");
		DebugLocation(798, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// Java.g:799:5: ( modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' )
			DebugEnterAlt(1);
			// Java.g:799:9: modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(799, 9);
			PushFollow(Follow._modifiers_in_annotationMethodDeclaration4110);
			modifiers264=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers264.Tree);
			DebugLocation(799, 19);
			PushFollow(Follow._type_in_annotationMethodDeclaration4112);
			type265=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type265.Tree);
			DebugLocation(799, 24);
			IDENTIFIER266=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationMethodDeclaration4114); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER266_tree = (object)adaptor.Create(IDENTIFIER266);
			adaptor.AddChild(root_0, IDENTIFIER266_tree);
			}
			DebugLocation(800, 9);
			char_literal267=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotationMethodDeclaration4124); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal267_tree = (object)adaptor.Create(char_literal267);
			adaptor.AddChild(root_0, char_literal267_tree);
			}
			DebugLocation(800, 13);
			char_literal268=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotationMethodDeclaration4126); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal268_tree = (object)adaptor.Create(char_literal268);
			adaptor.AddChild(root_0, char_literal268_tree);
			}
			DebugLocation(800, 17);
			// Java.g:800:17: ( 'default' elementValue )?
			int alt91=2;
			try { DebugEnterSubRule(91);
			try { DebugEnterDecision(91, false);
			int LA91_1 = input.LA(1);

			if ((LA91_1==DEFAULT))
			{
				alt91 = 1;
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:800:18: 'default' elementValue
				{
				DebugLocation(800, 18);
				string_literal269=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_annotationMethodDeclaration4129); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal269_tree = (object)adaptor.Create(string_literal269);
				adaptor.AddChild(root_0, string_literal269_tree);
				}
				DebugLocation(800, 28);
				PushFollow(Follow._elementValue_in_annotationMethodDeclaration4131);
				elementValue270=elementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue270.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(91); }

			DebugLocation(802, 9);
			char_literal271=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationMethodDeclaration4160); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal271_tree = (object)adaptor.Create(char_literal271);
			adaptor.AddChild(root_0, char_literal271_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationMethodDeclaration", 54);
			LeaveRule("annotationMethodDeclaration", 54);
			LeaveRule_annotationMethodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 54, annotationMethodDeclaration_StartIndex); }

		}
		DebugLocation(803, 8);
		} finally { DebugExitRule(GrammarFileName, "annotationMethodDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationMethodDeclaration"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Java.g:805:1: block : '{' ( blockStatement )* '}' ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<object, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 55);
		TraceIn("block", 55);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int block_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal272 = default(IToken);
		IToken char_literal274 = default(IToken);
		AstParserRuleReturnScope<object, IToken> blockStatement273 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal272_tree = default(object);
		object char_literal274_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(805, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// Java.g:806:5: ( '{' ( blockStatement )* '}' )
			DebugEnterAlt(1);
			// Java.g:806:9: '{' ( blockStatement )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(806, 9);
			char_literal272=(IToken)Match(input,LBRACE,Follow._LBRACE_in_block4184); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal272_tree = (object)adaptor.Create(char_literal272);
			adaptor.AddChild(root_0, char_literal272_tree);
			}
			DebugLocation(807, 9);
			// Java.g:807:9: ( blockStatement )*
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=2;
				try { DebugEnterDecision(92, false);
				int LA92_1 = input.LA(1);

				if ((LA92_1==EOF||LA92_1==ABSTRACT||(LA92_1>=ASSERT && LA92_1<=BANG)||(LA92_1>=BOOLEAN && LA92_1<=BYTE)||LA92_1==BooleanLiteral||(LA92_1>=CHAR && LA92_1<=CLASS)||(LA92_1>=CONTINUE && LA92_1<=CharacterLiteral)||LA92_1==DO||LA92_1==DOUBLE||LA92_1==ENUM||LA92_1==FINAL||(LA92_1>=FLOAT && LA92_1<=FOR)||LA92_1==FloatingPointLiteral||(LA92_1>=IDENTIFIER && LA92_1<=IF)||(LA92_1>=INT && LA92_1<=INTERFACE)||LA92_1==IntegerLiteral||LA92_1==LBRACE||(LA92_1>=LONG && LA92_1<=NEW)||LA92_1==NullLiteral||LA92_1==PLUS||(LA92_1>=PLUSPLUS && LA92_1<=PUBLIC)||LA92_1==RETURN||(LA92_1>=SEMI && LA92_1<=SHORT)||(LA92_1>=STATIC && LA92_1<=SUB)||(LA92_1>=SUBSUB && LA92_1<=SYNCHRONIZED)||LA92_1==StringLiteral||(LA92_1>=THIS && LA92_1<=THROW)||(LA92_1>=TILDE && LA92_1<=TRY)||(LA92_1>=VOID && LA92_1<=WHILE)))
				{
					alt92 = 1;
				}


				} finally { DebugExitDecision(92); }
				switch ( alt92 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:807:10: blockStatement
					{
					DebugLocation(807, 10);
					PushFollow(Follow._blockStatement_in_block4195);
					blockStatement273=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement273.Tree);

					}
					break;

				default:
					goto loop92;
				}
			}

			loop92:
				;

			} finally { DebugExitSubRule(92); }

			DebugLocation(809, 9);
			char_literal274=(IToken)Match(input,RBRACE,Follow._RBRACE_in_block4216); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal274_tree = (object)adaptor.Create(char_literal274);
			adaptor.AddChild(root_0, char_literal274_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 55);
			LeaveRule("block", 55);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 55, block_StartIndex); }

		}
		DebugLocation(810, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// Java.g:836:1: blockStatement : ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement );
	[GrammarRule("blockStatement")]
	private AstParserRuleReturnScope<object, IToken> blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 56);
		TraceIn("blockStatement", 56);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int blockStatement_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> localVariableDeclarationStatement275 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classOrInterfaceDeclaration276 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement277 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(836, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// Java.g:837:5: ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement )
			int alt93=3;
			try { DebugEnterDecision(93, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA93_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt93 = 1;
				}
				else if ((EvaluatePredicate(synpred129_Java_fragment)))
				{
					alt93 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MONKEYS_AT:
				{
				int LA93_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt93 = 1;
				}
				else if ((EvaluatePredicate(synpred129_Java_fragment)))
				{
					alt93 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA93_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt93 = 1;
				}
				else if ((true))
				{
					alt93 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA93_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Java_fragment)))
				{
					alt93 = 1;
				}
				else if ((true))
				{
					alt93 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case INTERFACE:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case TRANSIENT:
			case VOLATILE:
				{
				alt93 = 2;
				}
				break;
			case SYNCHRONIZED:
				{
				int LA93_2 = input.LA(2);

				if ((EvaluatePredicate(synpred129_Java_fragment)))
				{
					alt93 = 2;
				}
				else if ((true))
				{
					alt93 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ASSERT:
			case BANG:
			case BREAK:
			case BooleanLiteral:
			case CONTINUE:
			case CharacterLiteral:
			case DO:
			case FOR:
			case FloatingPointLiteral:
			case IF:
			case IntegerLiteral:
			case LBRACE:
			case LPAREN:
			case NEW:
			case NullLiteral:
			case PLUS:
			case PLUSPLUS:
			case RETURN:
			case SEMI:
			case SUB:
			case SUBSUB:
			case SUPER:
			case SWITCH:
			case StringLiteral:
			case THIS:
			case THROW:
			case TILDE:
			case TRY:
			case VOID:
			case WHILE:
				{
				alt93 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:837:9: localVariableDeclarationStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(837, 9);
				PushFollow(Follow._localVariableDeclarationStatement_in_blockStatement4238);
				localVariableDeclarationStatement275=localVariableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclarationStatement275.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:838:9: classOrInterfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(838, 9);
				PushFollow(Follow._classOrInterfaceDeclaration_in_blockStatement4248);
				classOrInterfaceDeclaration276=classOrInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceDeclaration276.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:839:9: statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(839, 9);
				PushFollow(Follow._statement_in_blockStatement4258);
				statement277=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement277.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blockStatement", 56);
			LeaveRule("blockStatement", 56);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 56, blockStatement_StartIndex); }

		}
		DebugLocation(840, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return retval;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_localVariableDeclarationStatement();
	partial void LeaveRule_localVariableDeclarationStatement();
	// $ANTLR start "localVariableDeclarationStatement"
	// Java.g:843:1: localVariableDeclarationStatement : localVariableDeclaration ';' ;
	[GrammarRule("localVariableDeclarationStatement")]
	private AstParserRuleReturnScope<object, IToken> localVariableDeclarationStatement()
	{
		EnterRule_localVariableDeclarationStatement();
		EnterRule("localVariableDeclarationStatement", 57);
		TraceIn("localVariableDeclarationStatement", 57);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localVariableDeclarationStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal279 = default(IToken);
		AstParserRuleReturnScope<object, IToken> localVariableDeclaration278 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal279_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "localVariableDeclarationStatement");
		DebugLocation(843, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// Java.g:844:5: ( localVariableDeclaration ';' )
			DebugEnterAlt(1);
			// Java.g:844:9: localVariableDeclaration ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(844, 9);
			PushFollow(Follow._localVariableDeclaration_in_localVariableDeclarationStatement4279);
			localVariableDeclaration278=localVariableDeclaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclaration278.Tree);
			DebugLocation(845, 9);
			char_literal279=(IToken)Match(input,SEMI,Follow._SEMI_in_localVariableDeclarationStatement4289); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal279_tree = (object)adaptor.Create(char_literal279);
			adaptor.AddChild(root_0, char_literal279_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclarationStatement", 57);
			LeaveRule("localVariableDeclarationStatement", 57);
			LeaveRule_localVariableDeclarationStatement();
			if (state.backtracking > 0) { Memoize(input, 57, localVariableDeclarationStatement_StartIndex); }

		}
		DebugLocation(846, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclarationStatement"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();
	// $ANTLR start "localVariableDeclaration"
	// Java.g:848:1: localVariableDeclaration : variableModifiers type variableDeclarator ( ',' variableDeclarator )* ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<object, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 58);
		TraceIn("localVariableDeclaration", 58);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localVariableDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal283 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers280 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type281 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator282 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator284 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal283_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(848, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// Java.g:849:5: ( variableModifiers type variableDeclarator ( ',' variableDeclarator )* )
			DebugEnterAlt(1);
			// Java.g:849:9: variableModifiers type variableDeclarator ( ',' variableDeclarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(849, 9);
			PushFollow(Follow._variableModifiers_in_localVariableDeclaration4309);
			variableModifiers280=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers280.Tree);
			DebugLocation(849, 27);
			PushFollow(Follow._type_in_localVariableDeclaration4311);
			type281=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type281.Tree);
			DebugLocation(850, 9);
			PushFollow(Follow._variableDeclarator_in_localVariableDeclaration4321);
			variableDeclarator282=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator282.Tree);
			DebugLocation(851, 9);
			// Java.g:851:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, false);
				int LA94_1 = input.LA(1);

				if ((LA94_1==COMMA))
				{
					alt94 = 1;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:851:10: ',' variableDeclarator
					{
					DebugLocation(851, 10);
					char_literal283=(IToken)Match(input,COMMA,Follow._COMMA_in_localVariableDeclaration4332); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal283_tree = (object)adaptor.Create(char_literal283);
					adaptor.AddChild(root_0, char_literal283_tree);
					}
					DebugLocation(851, 14);
					PushFollow(Follow._variableDeclarator_in_localVariableDeclaration4334);
					variableDeclarator284=variableDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator284.Tree);

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 58);
			LeaveRule("localVariableDeclaration", 58);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 58, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(853, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Java.g:855:1: statement : ( block | ';' | IDENTIFIER ':' statement | expression ';' | 'if' parExpression statement ( 'else' statement )? | 'assert' expression ( ':' expression )? ';' | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | forstatement | 'break' ( IDENTIFIER )? ';' | 'continue' ( IDENTIFIER )? ';' | 'return' ( expression )? ';' | 'throw' expression ';' | 'synchronized' parExpression block | trystatement | tryWithResourcesStatement );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<object, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 59);
		TraceIn("statement", 59);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal286 = default(IToken);
		IToken IDENTIFIER287 = default(IToken);
		IToken char_literal288 = default(IToken);
		IToken char_literal291 = default(IToken);
		IToken string_literal292 = default(IToken);
		IToken string_literal295 = default(IToken);
		IToken string_literal297 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken char_literal301 = default(IToken);
		IToken string_literal302 = default(IToken);
		IToken char_literal304 = default(IToken);
		IToken char_literal306 = default(IToken);
		IToken string_literal307 = default(IToken);
		IToken string_literal310 = default(IToken);
		IToken string_literal312 = default(IToken);
		IToken char_literal314 = default(IToken);
		IToken string_literal316 = default(IToken);
		IToken IDENTIFIER317 = default(IToken);
		IToken char_literal318 = default(IToken);
		IToken string_literal319 = default(IToken);
		IToken IDENTIFIER320 = default(IToken);
		IToken char_literal321 = default(IToken);
		IToken string_literal322 = default(IToken);
		IToken char_literal324 = default(IToken);
		IToken string_literal325 = default(IToken);
		IToken char_literal327 = default(IToken);
		IToken string_literal328 = default(IToken);
		AstParserRuleReturnScope<object, IToken> block285 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement289 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression290 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parExpression293 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement294 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement296 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression298 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression300 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parExpression303 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> switchBlockStatementGroups305 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parExpression308 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement309 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement311 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parExpression313 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forstatement315 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression323 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression326 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parExpression329 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block330 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> trystatement331 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> tryWithResourcesStatement332 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal286_tree = default(object);
		object IDENTIFIER287_tree = default(object);
		object char_literal288_tree = default(object);
		object char_literal291_tree = default(object);
		object string_literal292_tree = default(object);
		object string_literal295_tree = default(object);
		object string_literal297_tree = default(object);
		object char_literal299_tree = default(object);
		object char_literal301_tree = default(object);
		object string_literal302_tree = default(object);
		object char_literal304_tree = default(object);
		object char_literal306_tree = default(object);
		object string_literal307_tree = default(object);
		object string_literal310_tree = default(object);
		object string_literal312_tree = default(object);
		object char_literal314_tree = default(object);
		object string_literal316_tree = default(object);
		object IDENTIFIER317_tree = default(object);
		object char_literal318_tree = default(object);
		object string_literal319_tree = default(object);
		object IDENTIFIER320_tree = default(object);
		object char_literal321_tree = default(object);
		object string_literal322_tree = default(object);
		object char_literal324_tree = default(object);
		object string_literal325_tree = default(object);
		object char_literal327_tree = default(object);
		object string_literal328_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(855, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// Java.g:856:5: ( block | ';' | IDENTIFIER ':' statement | expression ';' | 'if' parExpression statement ( 'else' statement )? | 'assert' expression ( ':' expression )? ';' | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | forstatement | 'break' ( IDENTIFIER )? ';' | 'continue' ( IDENTIFIER )? ';' | 'return' ( expression )? ';' | 'throw' expression ';' | 'synchronized' parExpression block | trystatement | tryWithResourcesStatement )
			int alt100=17;
			try { DebugEnterDecision(100, false);
			switch (input.LA(1))
			{
			case LBRACE:
				{
				alt100 = 1;
				}
				break;
			case SEMI:
				{
				alt100 = 2;
				}
				break;
			case IDENTIFIER:
				{
				int LA100_2 = input.LA(2);

				if ((LA100_2==COLON))
				{
					alt100 = 3;
				}
				else if (((LA100_2>=AMP && LA100_2<=AMPEQ)||(LA100_2>=BANGEQ && LA100_2<=BAREQ)||(LA100_2>=CARET && LA100_2<=CARETEQ)||LA100_2==DOT||(LA100_2>=EQ && LA100_2<=EQEQ)||LA100_2==GT||LA100_2==INSTANCEOF||LA100_2==LBRACKET||(LA100_2>=LPAREN && LA100_2<=LT)||(LA100_2>=PERCENT && LA100_2<=PLUSPLUS)||LA100_2==QUES||LA100_2==SEMI||(LA100_2>=SLASH && LA100_2<=STAREQ)||(LA100_2>=SUB && LA100_2<=SUBSUB)))
				{
					alt100 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BANG:
			case BOOLEAN:
			case BYTE:
			case BooleanLiteral:
			case CHAR:
			case CharacterLiteral:
			case DOUBLE:
			case FLOAT:
			case FloatingPointLiteral:
			case INT:
			case IntegerLiteral:
			case LONG:
			case LPAREN:
			case NEW:
			case NullLiteral:
			case PLUS:
			case PLUSPLUS:
			case SHORT:
			case SUB:
			case SUBSUB:
			case SUPER:
			case StringLiteral:
			case THIS:
			case TILDE:
			case VOID:
				{
				alt100 = 4;
				}
				break;
			case IF:
				{
				alt100 = 5;
				}
				break;
			case ASSERT:
				{
				alt100 = 6;
				}
				break;
			case SWITCH:
				{
				alt100 = 7;
				}
				break;
			case WHILE:
				{
				alt100 = 8;
				}
				break;
			case DO:
				{
				alt100 = 9;
				}
				break;
			case FOR:
				{
				alt100 = 10;
				}
				break;
			case BREAK:
				{
				alt100 = 11;
				}
				break;
			case CONTINUE:
				{
				alt100 = 12;
				}
				break;
			case RETURN:
				{
				alt100 = 13;
				}
				break;
			case THROW:
				{
				alt100 = 14;
				}
				break;
			case SYNCHRONIZED:
				{
				alt100 = 15;
				}
				break;
			case TRY:
				{
				int LA100_2 = input.LA(2);

				if ((LA100_2==LBRACE))
				{
					alt100 = 16;
				}
				else if ((LA100_2==LPAREN))
				{
					alt100 = 17;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:856:9: block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(856, 9);
				PushFollow(Follow._block_in_statement4365);
				block285=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block285.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:857:9: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(857, 9);
				char_literal286=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4375); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal286_tree = (object)adaptor.Create(char_literal286);
				adaptor.AddChild(root_0, char_literal286_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:858:9: IDENTIFIER ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(858, 9);
				IDENTIFIER287=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4385); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER287_tree = (object)adaptor.Create(IDENTIFIER287);
				adaptor.AddChild(root_0, IDENTIFIER287_tree);
				}
				DebugLocation(858, 20);
				char_literal288=(IToken)Match(input,COLON,Follow._COLON_in_statement4387); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal288_tree = (object)adaptor.Create(char_literal288);
				adaptor.AddChild(root_0, char_literal288_tree);
				}
				DebugLocation(858, 24);
				PushFollow(Follow._statement_in_statement4389);
				statement289=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement289.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:859:9: expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(859, 9);
				PushFollow(Follow._expression_in_statement4399);
				expression290=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression290.Tree);
				DebugLocation(859, 21);
				char_literal291=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4402); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal291_tree = (object)adaptor.Create(char_literal291);
				adaptor.AddChild(root_0, char_literal291_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:860:9: 'if' parExpression statement ( 'else' statement )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(860, 9);
				string_literal292=(IToken)Match(input,IF,Follow._IF_in_statement4417); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal292_tree = (object)adaptor.Create(string_literal292);
				adaptor.AddChild(root_0, string_literal292_tree);
				}
				DebugLocation(860, 14);
				PushFollow(Follow._parExpression_in_statement4419);
				parExpression293=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression293.Tree);
				DebugLocation(860, 28);
				PushFollow(Follow._statement_in_statement4421);
				statement294=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement294.Tree);
				DebugLocation(860, 38);
				// Java.g:860:38: ( 'else' statement )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==ELSE))
				{
					int LA95_2 = input.LA(2);

					if ((EvaluatePredicate(synpred135_Java_fragment)))
					{
						alt95 = 1;
					}
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:860:39: 'else' statement
					{
					DebugLocation(860, 39);
					string_literal295=(IToken)Match(input,ELSE,Follow._ELSE_in_statement4424); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal295_tree = (object)adaptor.Create(string_literal295);
					adaptor.AddChild(root_0, string_literal295_tree);
					}
					DebugLocation(860, 46);
					PushFollow(Follow._statement_in_statement4426);
					statement296=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement296.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(95); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:861:9: 'assert' expression ( ':' expression )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(861, 9);
				string_literal297=(IToken)Match(input,ASSERT,Follow._ASSERT_in_statement4448); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal297_tree = (object)adaptor.Create(string_literal297);
				adaptor.AddChild(root_0, string_literal297_tree);
				}
				DebugLocation(861, 19);
				PushFollow(Follow._expression_in_statement4451);
				expression298=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression298.Tree);
				DebugLocation(861, 30);
				// Java.g:861:30: ( ':' expression )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_1 = input.LA(1);

				if ((LA96_1==COLON))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:861:31: ':' expression
					{
					DebugLocation(861, 31);
					char_literal299=(IToken)Match(input,COLON,Follow._COLON_in_statement4454); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal299_tree = (object)adaptor.Create(char_literal299);
					adaptor.AddChild(root_0, char_literal299_tree);
					}
					DebugLocation(861, 35);
					PushFollow(Follow._expression_in_statement4456);
					expression300=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression300.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(861, 48);
				char_literal301=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4460); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal301_tree = (object)adaptor.Create(char_literal301);
				adaptor.AddChild(root_0, char_literal301_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:862:9: 'switch' parExpression '{' switchBlockStatementGroups '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(862, 9);
				string_literal302=(IToken)Match(input,SWITCH,Follow._SWITCH_in_statement4482); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal302_tree = (object)adaptor.Create(string_literal302);
				adaptor.AddChild(root_0, string_literal302_tree);
				}
				DebugLocation(862, 18);
				PushFollow(Follow._parExpression_in_statement4484);
				parExpression303=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression303.Tree);
				DebugLocation(862, 32);
				char_literal304=(IToken)Match(input,LBRACE,Follow._LBRACE_in_statement4486); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal304_tree = (object)adaptor.Create(char_literal304);
				adaptor.AddChild(root_0, char_literal304_tree);
				}
				DebugLocation(862, 36);
				PushFollow(Follow._switchBlockStatementGroups_in_statement4488);
				switchBlockStatementGroups305=switchBlockStatementGroups();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switchBlockStatementGroups305.Tree);
				DebugLocation(862, 63);
				char_literal306=(IToken)Match(input,RBRACE,Follow._RBRACE_in_statement4490); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal306_tree = (object)adaptor.Create(char_literal306);
				adaptor.AddChild(root_0, char_literal306_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:863:9: 'while' parExpression statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(863, 9);
				string_literal307=(IToken)Match(input,WHILE,Follow._WHILE_in_statement4500); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal307_tree = (object)adaptor.Create(string_literal307);
				adaptor.AddChild(root_0, string_literal307_tree);
				}
				DebugLocation(863, 17);
				PushFollow(Follow._parExpression_in_statement4502);
				parExpression308=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression308.Tree);
				DebugLocation(863, 31);
				PushFollow(Follow._statement_in_statement4504);
				statement309=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement309.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:864:9: 'do' statement 'while' parExpression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(864, 9);
				string_literal310=(IToken)Match(input,DO,Follow._DO_in_statement4514); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal310_tree = (object)adaptor.Create(string_literal310);
				adaptor.AddChild(root_0, string_literal310_tree);
				}
				DebugLocation(864, 14);
				PushFollow(Follow._statement_in_statement4516);
				statement311=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement311.Tree);
				DebugLocation(864, 24);
				string_literal312=(IToken)Match(input,WHILE,Follow._WHILE_in_statement4518); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal312_tree = (object)adaptor.Create(string_literal312);
				adaptor.AddChild(root_0, string_literal312_tree);
				}
				DebugLocation(864, 32);
				PushFollow(Follow._parExpression_in_statement4520);
				parExpression313=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression313.Tree);
				DebugLocation(864, 46);
				char_literal314=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4522); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal314_tree = (object)adaptor.Create(char_literal314);
				adaptor.AddChild(root_0, char_literal314_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:865:9: forstatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(865, 9);
				PushFollow(Follow._forstatement_in_statement4532);
				forstatement315=forstatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forstatement315.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:866:9: 'break' ( IDENTIFIER )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(866, 9);
				string_literal316=(IToken)Match(input,BREAK,Follow._BREAK_in_statement4542); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal316_tree = (object)adaptor.Create(string_literal316);
				adaptor.AddChild(root_0, string_literal316_tree);
				}
				DebugLocation(866, 17);
				// Java.g:866:17: ( IDENTIFIER )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_1 = input.LA(1);

				if ((LA97_1==IDENTIFIER))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:866:18: IDENTIFIER
					{
					DebugLocation(866, 18);
					IDENTIFIER317=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4545); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER317_tree = (object)adaptor.Create(IDENTIFIER317);
					adaptor.AddChild(root_0, IDENTIFIER317_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(866, 31);
				char_literal318=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4549); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal318_tree = (object)adaptor.Create(char_literal318);
				adaptor.AddChild(root_0, char_literal318_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Java.g:867:9: 'continue' ( IDENTIFIER )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(867, 9);
				string_literal319=(IToken)Match(input,CONTINUE,Follow._CONTINUE_in_statement4559); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal319_tree = (object)adaptor.Create(string_literal319);
				adaptor.AddChild(root_0, string_literal319_tree);
				}
				DebugLocation(867, 20);
				// Java.g:867:20: ( IDENTIFIER )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, false);
				int LA98_1 = input.LA(1);

				if ((LA98_1==IDENTIFIER))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:867:21: IDENTIFIER
					{
					DebugLocation(867, 21);
					IDENTIFIER320=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4562); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER320_tree = (object)adaptor.Create(IDENTIFIER320);
					adaptor.AddChild(root_0, IDENTIFIER320_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(867, 34);
				char_literal321=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4566); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal321_tree = (object)adaptor.Create(char_literal321);
				adaptor.AddChild(root_0, char_literal321_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Java.g:868:9: 'return' ( expression )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(868, 9);
				string_literal322=(IToken)Match(input,RETURN,Follow._RETURN_in_statement4576); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal322_tree = (object)adaptor.Create(string_literal322);
				adaptor.AddChild(root_0, string_literal322_tree);
				}
				DebugLocation(868, 18);
				// Java.g:868:18: ( expression )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, false);
				int LA99_1 = input.LA(1);

				if ((LA99_1==BANG||LA99_1==BOOLEAN||LA99_1==BYTE||LA99_1==BooleanLiteral||LA99_1==CHAR||LA99_1==CharacterLiteral||LA99_1==DOUBLE||LA99_1==FLOAT||LA99_1==FloatingPointLiteral||LA99_1==IDENTIFIER||LA99_1==INT||LA99_1==IntegerLiteral||(LA99_1>=LONG && LA99_1<=LPAREN)||LA99_1==NEW||LA99_1==NullLiteral||LA99_1==PLUS||LA99_1==PLUSPLUS||LA99_1==SHORT||LA99_1==SUB||(LA99_1>=SUBSUB && LA99_1<=SUPER)||LA99_1==StringLiteral||LA99_1==THIS||LA99_1==TILDE||LA99_1==VOID))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:868:19: expression
					{
					DebugLocation(868, 19);
					PushFollow(Follow._expression_in_statement4579);
					expression323=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression323.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(868, 33);
				char_literal324=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4584); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal324_tree = (object)adaptor.Create(char_literal324);
				adaptor.AddChild(root_0, char_literal324_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Java.g:869:9: 'throw' expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(869, 9);
				string_literal325=(IToken)Match(input,THROW,Follow._THROW_in_statement4594); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal325_tree = (object)adaptor.Create(string_literal325);
				adaptor.AddChild(root_0, string_literal325_tree);
				}
				DebugLocation(869, 17);
				PushFollow(Follow._expression_in_statement4596);
				expression326=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression326.Tree);
				DebugLocation(869, 28);
				char_literal327=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4598); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal327_tree = (object)adaptor.Create(char_literal327);
				adaptor.AddChild(root_0, char_literal327_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Java.g:870:9: 'synchronized' parExpression block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(870, 9);
				string_literal328=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement4608); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal328_tree = (object)adaptor.Create(string_literal328);
				adaptor.AddChild(root_0, string_literal328_tree);
				}
				DebugLocation(870, 24);
				PushFollow(Follow._parExpression_in_statement4610);
				parExpression329=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression329.Tree);
				DebugLocation(870, 38);
				PushFollow(Follow._block_in_statement4612);
				block330=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block330.Tree);

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Java.g:871:9: trystatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(871, 9);
				PushFollow(Follow._trystatement_in_statement4622);
				trystatement331=trystatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, trystatement331.Tree);

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Java.g:872:9: tryWithResourcesStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(872, 9);
				PushFollow(Follow._tryWithResourcesStatement_in_statement4632);
				tryWithResourcesStatement332=tryWithResourcesStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tryWithResourcesStatement332.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 59);
			LeaveRule("statement", 59);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 59, statement_StartIndex); }

		}
		DebugLocation(873, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_switchBlockStatementGroups();
	partial void LeaveRule_switchBlockStatementGroups();
	// $ANTLR start "switchBlockStatementGroups"
	// Java.g:875:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
	[GrammarRule("switchBlockStatementGroups")]
	private AstParserRuleReturnScope<object, IToken> switchBlockStatementGroups()
	{
		EnterRule_switchBlockStatementGroups();
		EnterRule("switchBlockStatementGroups", 60);
		TraceIn("switchBlockStatementGroups", 60);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchBlockStatementGroups_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> switchBlockStatementGroup333 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchBlockStatementGroups");
		DebugLocation(875, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// Java.g:876:5: ( ( switchBlockStatementGroup )* )
			DebugEnterAlt(1);
			// Java.g:876:9: ( switchBlockStatementGroup )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(876, 9);
			// Java.g:876:9: ( switchBlockStatementGroup )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, false);
				int LA101_1 = input.LA(1);

				if ((LA101_1==CASE||LA101_1==DEFAULT))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:876:10: switchBlockStatementGroup
					{
					DebugLocation(876, 10);
					PushFollow(Follow._switchBlockStatementGroup_in_switchBlockStatementGroups4653);
					switchBlockStatementGroup333=switchBlockStatementGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switchBlockStatementGroup333.Tree);

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchBlockStatementGroups", 60);
			LeaveRule("switchBlockStatementGroups", 60);
			LeaveRule_switchBlockStatementGroups();
			if (state.backtracking > 0) { Memoize(input, 60, switchBlockStatementGroups_StartIndex); }

		}
		DebugLocation(877, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockStatementGroups"); }
		return retval;

	}
	// $ANTLR end "switchBlockStatementGroups"

	partial void EnterRule_switchBlockStatementGroup();
	partial void LeaveRule_switchBlockStatementGroup();
	// $ANTLR start "switchBlockStatementGroup"
	// Java.g:879:1: switchBlockStatementGroup : switchLabel ( blockStatement )* ;
	[GrammarRule("switchBlockStatementGroup")]
	private AstParserRuleReturnScope<object, IToken> switchBlockStatementGroup()
	{
		EnterRule_switchBlockStatementGroup();
		EnterRule("switchBlockStatementGroup", 61);
		TraceIn("switchBlockStatementGroup", 61);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchBlockStatementGroup_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> switchLabel334 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> blockStatement335 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchBlockStatementGroup");
		DebugLocation(879, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// Java.g:880:5: ( switchLabel ( blockStatement )* )
			DebugEnterAlt(1);
			// Java.g:881:9: switchLabel ( blockStatement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(881, 9);
			PushFollow(Follow._switchLabel_in_switchBlockStatementGroup4682);
			switchLabel334=switchLabel();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, switchLabel334.Tree);
			DebugLocation(882, 9);
			// Java.g:882:9: ( blockStatement )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_1 = input.LA(1);

				if ((LA102_1==ABSTRACT||(LA102_1>=ASSERT && LA102_1<=BANG)||(LA102_1>=BOOLEAN && LA102_1<=BYTE)||LA102_1==BooleanLiteral||(LA102_1>=CHAR && LA102_1<=CLASS)||(LA102_1>=CONTINUE && LA102_1<=CharacterLiteral)||LA102_1==DO||LA102_1==DOUBLE||LA102_1==ENUM||LA102_1==FINAL||(LA102_1>=FLOAT && LA102_1<=FOR)||LA102_1==FloatingPointLiteral||(LA102_1>=IDENTIFIER && LA102_1<=IF)||(LA102_1>=INT && LA102_1<=INTERFACE)||LA102_1==IntegerLiteral||LA102_1==LBRACE||(LA102_1>=LONG && LA102_1<=LPAREN)||(LA102_1>=MONKEYS_AT && LA102_1<=NEW)||LA102_1==NullLiteral||LA102_1==PLUS||(LA102_1>=PLUSPLUS && LA102_1<=PUBLIC)||LA102_1==RETURN||(LA102_1>=SEMI && LA102_1<=SHORT)||(LA102_1>=STATIC && LA102_1<=SUB)||(LA102_1>=SUBSUB && LA102_1<=SYNCHRONIZED)||LA102_1==StringLiteral||(LA102_1>=THIS && LA102_1<=THROW)||(LA102_1>=TILDE && LA102_1<=TRY)||(LA102_1>=VOID && LA102_1<=WHILE)))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:882:10: blockStatement
					{
					DebugLocation(882, 10);
					PushFollow(Follow._blockStatement_in_switchBlockStatementGroup4693);
					blockStatement335=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement335.Tree);

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchBlockStatementGroup", 61);
			LeaveRule("switchBlockStatementGroup", 61);
			LeaveRule_switchBlockStatementGroup();
			if (state.backtracking > 0) { Memoize(input, 61, switchBlockStatementGroup_StartIndex); }

		}
		DebugLocation(884, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockStatementGroup"); }
		return retval;

	}
	// $ANTLR end "switchBlockStatementGroup"

	partial void EnterRule_switchLabel();
	partial void LeaveRule_switchLabel();
	// $ANTLR start "switchLabel"
	// Java.g:886:1: switchLabel : ( 'case' expression ':' | 'default' ':' );
	[GrammarRule("switchLabel")]
	private AstParserRuleReturnScope<object, IToken> switchLabel()
	{
		EnterRule_switchLabel();
		EnterRule("switchLabel", 62);
		TraceIn("switchLabel", 62);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchLabel_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal336 = default(IToken);
		IToken char_literal338 = default(IToken);
		IToken string_literal339 = default(IToken);
		IToken char_literal340 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression337 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal336_tree = default(object);
		object char_literal338_tree = default(object);
		object string_literal339_tree = default(object);
		object char_literal340_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "switchLabel");
		DebugLocation(886, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// Java.g:887:5: ( 'case' expression ':' | 'default' ':' )
			int alt103=2;
			try { DebugEnterDecision(103, false);
			int LA103_1 = input.LA(1);

			if ((LA103_1==CASE))
			{
				alt103 = 1;
			}
			else if ((LA103_1==DEFAULT))
			{
				alt103 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:887:9: 'case' expression ':'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(887, 9);
				string_literal336=(IToken)Match(input,CASE,Follow._CASE_in_switchLabel4724); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal336_tree = (object)adaptor.Create(string_literal336);
				adaptor.AddChild(root_0, string_literal336_tree);
				}
				DebugLocation(887, 16);
				PushFollow(Follow._expression_in_switchLabel4726);
				expression337=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression337.Tree);
				DebugLocation(887, 27);
				char_literal338=(IToken)Match(input,COLON,Follow._COLON_in_switchLabel4728); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal338_tree = (object)adaptor.Create(char_literal338);
				adaptor.AddChild(root_0, char_literal338_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:888:9: 'default' ':'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(888, 9);
				string_literal339=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_switchLabel4738); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal339_tree = (object)adaptor.Create(string_literal339);
				adaptor.AddChild(root_0, string_literal339_tree);
				}
				DebugLocation(888, 19);
				char_literal340=(IToken)Match(input,COLON,Follow._COLON_in_switchLabel4740); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal340_tree = (object)adaptor.Create(char_literal340);
				adaptor.AddChild(root_0, char_literal340_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchLabel", 62);
			LeaveRule("switchLabel", 62);
			LeaveRule_switchLabel();
			if (state.backtracking > 0) { Memoize(input, 62, switchLabel_StartIndex); }

		}
		DebugLocation(889, 4);
		} finally { DebugExitRule(GrammarFileName, "switchLabel"); }
		return retval;

	}
	// $ANTLR end "switchLabel"

	partial void EnterRule_trystatement();
	partial void LeaveRule_trystatement();
	// $ANTLR start "trystatement"
	// Java.g:892:1: trystatement : 'try' block ( catches 'finally' block | catches | 'finally' block ) ;
	[GrammarRule("trystatement")]
	private AstParserRuleReturnScope<object, IToken> trystatement()
	{
		EnterRule_trystatement();
		EnterRule("trystatement", 63);
		TraceIn("trystatement", 63);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int trystatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal341 = default(IToken);
		IToken string_literal344 = default(IToken);
		IToken string_literal347 = default(IToken);
		AstParserRuleReturnScope<object, IToken> block342 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catches343 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block345 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catches346 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block348 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal341_tree = default(object);
		object string_literal344_tree = default(object);
		object string_literal347_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "trystatement");
		DebugLocation(892, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// Java.g:893:5: ( 'try' block ( catches 'finally' block | catches | 'finally' block ) )
			DebugEnterAlt(1);
			// Java.g:893:9: 'try' block ( catches 'finally' block | catches | 'finally' block )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(893, 9);
			string_literal341=(IToken)Match(input,TRY,Follow._TRY_in_trystatement4761); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal341_tree = (object)adaptor.Create(string_literal341);
			adaptor.AddChild(root_0, string_literal341_tree);
			}
			DebugLocation(893, 15);
			PushFollow(Follow._block_in_trystatement4763);
			block342=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block342.Tree);
			DebugLocation(894, 9);
			// Java.g:894:9: ( catches 'finally' block | catches | 'finally' block )
			int alt104=3;
			try { DebugEnterSubRule(104);
			try { DebugEnterDecision(104, false);
			int LA104_1 = input.LA(1);

			if ((LA104_1==CATCH))
			{
				int LA104_2 = input.LA(2);

				if ((EvaluatePredicate(synpred155_Java_fragment)))
				{
					alt104 = 1;
				}
				else if ((EvaluatePredicate(synpred156_Java_fragment)))
				{
					alt104 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 104, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA104_1==FINALLY))
			{
				alt104 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 104, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:894:13: catches 'finally' block
				{
				DebugLocation(894, 13);
				PushFollow(Follow._catches_in_trystatement4777);
				catches343=catches();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catches343.Tree);
				DebugLocation(894, 21);
				string_literal344=(IToken)Match(input,FINALLY,Follow._FINALLY_in_trystatement4779); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal344_tree = (object)adaptor.Create(string_literal344);
				adaptor.AddChild(root_0, string_literal344_tree);
				}
				DebugLocation(894, 31);
				PushFollow(Follow._block_in_trystatement4781);
				block345=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block345.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:895:13: catches
				{
				DebugLocation(895, 13);
				PushFollow(Follow._catches_in_trystatement4795);
				catches346=catches();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catches346.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:896:13: 'finally' block
				{
				DebugLocation(896, 13);
				string_literal347=(IToken)Match(input,FINALLY,Follow._FINALLY_in_trystatement4809); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal347_tree = (object)adaptor.Create(string_literal347);
				adaptor.AddChild(root_0, string_literal347_tree);
				}
				DebugLocation(896, 23);
				PushFollow(Follow._block_in_trystatement4811);
				block348=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block348.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("trystatement", 63);
			LeaveRule("trystatement", 63);
			LeaveRule_trystatement();
			if (state.backtracking > 0) { Memoize(input, 63, trystatement_StartIndex); }

		}
		DebugLocation(898, 5);
		} finally { DebugExitRule(GrammarFileName, "trystatement"); }
		return retval;

	}
	// $ANTLR end "trystatement"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();
	// $ANTLR start "catches"
	// Java.g:900:1: catches : catchClause ( catchClause )* ;
	[GrammarRule("catches")]
	private AstParserRuleReturnScope<object, IToken> catches()
	{
		EnterRule_catches();
		EnterRule("catches", 64);
		TraceIn("catches", 64);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catches_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> catchClause349 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catchClause350 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(900, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// Java.g:901:5: ( catchClause ( catchClause )* )
			DebugEnterAlt(1);
			// Java.g:901:9: catchClause ( catchClause )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(901, 9);
			PushFollow(Follow._catchClause_in_catches4842);
			catchClause349=catchClause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, catchClause349.Tree);
			DebugLocation(902, 9);
			// Java.g:902:9: ( catchClause )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_1 = input.LA(1);

				if ((LA105_1==CATCH))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:902:10: catchClause
					{
					DebugLocation(902, 10);
					PushFollow(Follow._catchClause_in_catches4853);
					catchClause350=catchClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, catchClause350.Tree);

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catches", 64);
			LeaveRule("catches", 64);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 64, catches_StartIndex); }

		}
		DebugLocation(904, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return retval;

	}
	// $ANTLR end "catches"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// Java.g:906:1: catchClause : 'catch' '(' formalParameter ')' block ;
	[GrammarRule("catchClause")]
	private AstParserRuleReturnScope<object, IToken> catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 65);
		TraceIn("catchClause", 65);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catchClause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal351 = default(IToken);
		IToken char_literal352 = default(IToken);
		IToken char_literal354 = default(IToken);
		AstParserRuleReturnScope<object, IToken> formalParameter353 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block355 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal351_tree = default(object);
		object char_literal352_tree = default(object);
		object char_literal354_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(906, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// Java.g:907:5: ( 'catch' '(' formalParameter ')' block )
			DebugEnterAlt(1);
			// Java.g:907:9: 'catch' '(' formalParameter ')' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(907, 9);
			string_literal351=(IToken)Match(input,CATCH,Follow._CATCH_in_catchClause4884); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal351_tree = (object)adaptor.Create(string_literal351);
			adaptor.AddChild(root_0, string_literal351_tree);
			}
			DebugLocation(907, 17);
			char_literal352=(IToken)Match(input,LPAREN,Follow._LPAREN_in_catchClause4886); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal352_tree = (object)adaptor.Create(char_literal352);
			adaptor.AddChild(root_0, char_literal352_tree);
			}
			DebugLocation(907, 21);
			PushFollow(Follow._formalParameter_in_catchClause4888);
			formalParameter353=formalParameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameter353.Tree);
			DebugLocation(908, 9);
			char_literal354=(IToken)Match(input,RPAREN,Follow._RPAREN_in_catchClause4898); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal354_tree = (object)adaptor.Create(char_literal354);
			adaptor.AddChild(root_0, char_literal354_tree);
			}
			DebugLocation(908, 13);
			PushFollow(Follow._block_in_catchClause4900);
			block355=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block355.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 65);
			LeaveRule("catchClause", 65);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 65, catchClause_StartIndex); }

		}
		DebugLocation(909, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_formalParameter();
	partial void LeaveRule_formalParameter();
	// $ANTLR start "formalParameter"
	// Java.g:911:1: formalParameter : ( variableModifiers catchType IDENTIFIER ( '[' ']' )* | catchType IDENTIFIER ( '[' ']' )* );
	[GrammarRule("formalParameter")]
	private AstParserRuleReturnScope<object, IToken> formalParameter()
	{
		EnterRule_formalParameter();
		EnterRule("formalParameter", 66);
		TraceIn("formalParameter", 66);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameter_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER358 = default(IToken);
		IToken char_literal359 = default(IToken);
		IToken char_literal360 = default(IToken);
		IToken IDENTIFIER362 = default(IToken);
		IToken char_literal363 = default(IToken);
		IToken char_literal364 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers356 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catchType357 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catchType361 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER358_tree = default(object);
		object char_literal359_tree = default(object);
		object char_literal360_tree = default(object);
		object IDENTIFIER362_tree = default(object);
		object char_literal363_tree = default(object);
		object char_literal364_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formalParameter");
		DebugLocation(911, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// Java.g:912:5: ( variableModifiers catchType IDENTIFIER ( '[' ']' )* | catchType IDENTIFIER ( '[' ']' )* )
			int alt108=2;
			try { DebugEnterDecision(108, false);
			switch (input.LA(1))
			{
			case FINAL:
			case MONKEYS_AT:
				{
				alt108 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA108_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Java_fragment)))
				{
					alt108 = 1;
				}
				else if ((true))
				{
					alt108 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 108, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA108_2 = input.LA(2);

				if ((EvaluatePredicate(synpred159_Java_fragment)))
				{
					alt108 = 1;
				}
				else if ((true))
				{
					alt108 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 108, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 108, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:912:9: variableModifiers catchType IDENTIFIER ( '[' ']' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(912, 9);
				PushFollow(Follow._variableModifiers_in_formalParameter4921);
				variableModifiers356=variableModifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers356.Tree);
				DebugLocation(912, 27);
				PushFollow(Follow._catchType_in_formalParameter4923);
				catchType357=catchType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catchType357.Tree);
				DebugLocation(912, 37);
				IDENTIFIER358=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_formalParameter4925); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER358_tree = (object)adaptor.Create(IDENTIFIER358);
				adaptor.AddChild(root_0, IDENTIFIER358_tree);
				}
				DebugLocation(913, 9);
				// Java.g:913:9: ( '[' ']' )*
				try { DebugEnterSubRule(106);
				while (true)
				{
					int alt106=2;
					try { DebugEnterDecision(106, false);
					int LA106_1 = input.LA(1);

					if ((LA106_1==LBRACKET))
					{
						alt106 = 1;
					}


					} finally { DebugExitDecision(106); }
					switch ( alt106 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:913:10: '[' ']'
						{
						DebugLocation(913, 10);
						char_literal359=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_formalParameter4936); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal359_tree = (object)adaptor.Create(char_literal359);
						adaptor.AddChild(root_0, char_literal359_tree);
						}
						DebugLocation(913, 14);
						char_literal360=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_formalParameter4938); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal360_tree = (object)adaptor.Create(char_literal360);
						adaptor.AddChild(root_0, char_literal360_tree);
						}

						}
						break;

					default:
						goto loop106;
					}
				}

				loop106:
					;

				} finally { DebugExitSubRule(106); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:915:9: catchType IDENTIFIER ( '[' ']' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(915, 9);
				PushFollow(Follow._catchType_in_formalParameter4959);
				catchType361=catchType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catchType361.Tree);
				DebugLocation(915, 19);
				IDENTIFIER362=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_formalParameter4961); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER362_tree = (object)adaptor.Create(IDENTIFIER362);
				adaptor.AddChild(root_0, IDENTIFIER362_tree);
				}
				DebugLocation(916, 9);
				// Java.g:916:9: ( '[' ']' )*
				try { DebugEnterSubRule(107);
				while (true)
				{
					int alt107=2;
					try { DebugEnterDecision(107, false);
					int LA107_1 = input.LA(1);

					if ((LA107_1==LBRACKET))
					{
						alt107 = 1;
					}


					} finally { DebugExitDecision(107); }
					switch ( alt107 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:916:10: '[' ']'
						{
						DebugLocation(916, 10);
						char_literal363=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_formalParameter4972); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal363_tree = (object)adaptor.Create(char_literal363);
						adaptor.AddChild(root_0, char_literal363_tree);
						}
						DebugLocation(916, 14);
						char_literal364=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_formalParameter4974); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal364_tree = (object)adaptor.Create(char_literal364);
						adaptor.AddChild(root_0, char_literal364_tree);
						}

						}
						break;

					default:
						goto loop107;
					}
				}

				loop107:
					;

				} finally { DebugExitSubRule(107); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameter", 66);
			LeaveRule("formalParameter", 66);
			LeaveRule_formalParameter();
			if (state.backtracking > 0) { Memoize(input, 66, formalParameter_StartIndex); }

		}
		DebugLocation(918, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameter"); }
		return retval;

	}
	// $ANTLR end "formalParameter"

	partial void EnterRule_catchType();
	partial void LeaveRule_catchType();
	// $ANTLR start "catchType"
	// Java.g:920:1: catchType : type ( '|' type )* ;
	[GrammarRule("catchType")]
	private AstParserRuleReturnScope<object, IToken> catchType()
	{
		EnterRule_catchType();
		EnterRule("catchType", 67);
		TraceIn("catchType", 67);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catchType_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal366 = default(IToken);
		AstParserRuleReturnScope<object, IToken> type365 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type367 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal366_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "catchType");
		DebugLocation(920, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// Java.g:921:5: ( type ( '|' type )* )
			DebugEnterAlt(1);
			// Java.g:921:9: type ( '|' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(921, 9);
			PushFollow(Follow._type_in_catchType5004);
			type365=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type365.Tree);
			DebugLocation(922, 9);
			// Java.g:922:9: ( '|' type )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_1 = input.LA(1);

				if ((LA109_1==BAR))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:922:10: '|' type
					{
					DebugLocation(922, 10);
					char_literal366=(IToken)Match(input,BAR,Follow._BAR_in_catchType5015); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal366_tree = (object)adaptor.Create(char_literal366);
					adaptor.AddChild(root_0, char_literal366_tree);
					}
					DebugLocation(922, 14);
					PushFollow(Follow._type_in_catchType5017);
					type367=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type367.Tree);

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchType", 67);
			LeaveRule("catchType", 67);
			LeaveRule_catchType();
			if (state.backtracking > 0) { Memoize(input, 67, catchType_StartIndex); }

		}
		DebugLocation(924, 4);
		} finally { DebugExitRule(GrammarFileName, "catchType"); }
		return retval;

	}
	// $ANTLR end "catchType"

	partial void EnterRule_tryWithResourcesStatement();
	partial void LeaveRule_tryWithResourcesStatement();
	// $ANTLR start "tryWithResourcesStatement"
	// Java.g:926:1: tryWithResourcesStatement : 'try' resourceSpecification block ( catches )? ( 'finally' block )? ;
	[GrammarRule("tryWithResourcesStatement")]
	private AstParserRuleReturnScope<object, IToken> tryWithResourcesStatement()
	{
		EnterRule_tryWithResourcesStatement();
		EnterRule("tryWithResourcesStatement", 68);
		TraceIn("tryWithResourcesStatement", 68);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int tryWithResourcesStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal368 = default(IToken);
		IToken string_literal372 = default(IToken);
		AstParserRuleReturnScope<object, IToken> resourceSpecification369 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block370 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catches371 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block373 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal368_tree = default(object);
		object string_literal372_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tryWithResourcesStatement");
		DebugLocation(926, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// Java.g:927:5: ( 'try' resourceSpecification block ( catches )? ( 'finally' block )? )
			DebugEnterAlt(1);
			// Java.g:927:10: 'try' resourceSpecification block ( catches )? ( 'finally' block )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(927, 10);
			string_literal368=(IToken)Match(input,TRY,Follow._TRY_in_tryWithResourcesStatement5048); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal368_tree = (object)adaptor.Create(string_literal368);
			adaptor.AddChild(root_0, string_literal368_tree);
			}
			DebugLocation(927, 16);
			PushFollow(Follow._resourceSpecification_in_tryWithResourcesStatement5050);
			resourceSpecification369=resourceSpecification();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, resourceSpecification369.Tree);
			DebugLocation(927, 38);
			PushFollow(Follow._block_in_tryWithResourcesStatement5052);
			block370=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block370.Tree);
			DebugLocation(927, 44);
			// Java.g:927:44: ( catches )?
			int alt110=2;
			try { DebugEnterSubRule(110);
			try { DebugEnterDecision(110, false);
			int LA110_1 = input.LA(1);

			if ((LA110_1==CATCH))
			{
				alt110 = 1;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:927:44: catches
				{
				DebugLocation(927, 44);
				PushFollow(Follow._catches_in_tryWithResourcesStatement5054);
				catches371=catches();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catches371.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(110); }

			DebugLocation(927, 53);
			// Java.g:927:53: ( 'finally' block )?
			int alt111=2;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			int LA111_1 = input.LA(1);

			if ((LA111_1==FINALLY))
			{
				alt111 = 1;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:927:54: 'finally' block
				{
				DebugLocation(927, 54);
				string_literal372=(IToken)Match(input,FINALLY,Follow._FINALLY_in_tryWithResourcesStatement5058); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal372_tree = (object)adaptor.Create(string_literal372);
				adaptor.AddChild(root_0, string_literal372_tree);
				}
				DebugLocation(927, 64);
				PushFollow(Follow._block_in_tryWithResourcesStatement5060);
				block373=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block373.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryWithResourcesStatement", 68);
			LeaveRule("tryWithResourcesStatement", 68);
			LeaveRule_tryWithResourcesStatement();
			if (state.backtracking > 0) { Memoize(input, 68, tryWithResourcesStatement_StartIndex); }

		}
		DebugLocation(928, 4);
		} finally { DebugExitRule(GrammarFileName, "tryWithResourcesStatement"); }
		return retval;

	}
	// $ANTLR end "tryWithResourcesStatement"

	partial void EnterRule_resourceSpecification();
	partial void LeaveRule_resourceSpecification();
	// $ANTLR start "resourceSpecification"
	// Java.g:930:1: resourceSpecification : '(' resources ( ';' )? ')' ;
	[GrammarRule("resourceSpecification")]
	private AstParserRuleReturnScope<object, IToken> resourceSpecification()
	{
		EnterRule_resourceSpecification();
		EnterRule("resourceSpecification", 69);
		TraceIn("resourceSpecification", 69);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int resourceSpecification_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal374 = default(IToken);
		IToken char_literal376 = default(IToken);
		IToken char_literal377 = default(IToken);
		AstParserRuleReturnScope<object, IToken> resources375 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal374_tree = default(object);
		object char_literal376_tree = default(object);
		object char_literal377_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "resourceSpecification");
		DebugLocation(930, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// Java.g:931:5: ( '(' resources ( ';' )? ')' )
			DebugEnterAlt(1);
			// Java.g:931:10: '(' resources ( ';' )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(931, 10);
			char_literal374=(IToken)Match(input,LPAREN,Follow._LPAREN_in_resourceSpecification5082); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal374_tree = (object)adaptor.Create(char_literal374);
			adaptor.AddChild(root_0, char_literal374_tree);
			}
			DebugLocation(931, 14);
			PushFollow(Follow._resources_in_resourceSpecification5084);
			resources375=resources();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, resources375.Tree);
			DebugLocation(931, 24);
			// Java.g:931:24: ( ';' )?
			int alt112=2;
			try { DebugEnterSubRule(112);
			try { DebugEnterDecision(112, false);
			int LA112_1 = input.LA(1);

			if ((LA112_1==SEMI))
			{
				alt112 = 1;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:931:24: ';'
				{
				DebugLocation(931, 24);
				char_literal376=(IToken)Match(input,SEMI,Follow._SEMI_in_resourceSpecification5086); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal376_tree = (object)adaptor.Create(char_literal376);
				adaptor.AddChild(root_0, char_literal376_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(112); }

			DebugLocation(931, 29);
			char_literal377=(IToken)Match(input,RPAREN,Follow._RPAREN_in_resourceSpecification5089); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal377_tree = (object)adaptor.Create(char_literal377);
			adaptor.AddChild(root_0, char_literal377_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("resourceSpecification", 69);
			LeaveRule("resourceSpecification", 69);
			LeaveRule_resourceSpecification();
			if (state.backtracking > 0) { Memoize(input, 69, resourceSpecification_StartIndex); }

		}
		DebugLocation(932, 4);
		} finally { DebugExitRule(GrammarFileName, "resourceSpecification"); }
		return retval;

	}
	// $ANTLR end "resourceSpecification"

	partial void EnterRule_resources();
	partial void LeaveRule_resources();
	// $ANTLR start "resources"
	// Java.g:934:1: resources : resource ( ';' resource )* ;
	[GrammarRule("resources")]
	private AstParserRuleReturnScope<object, IToken> resources()
	{
		EnterRule_resources();
		EnterRule("resources", 70);
		TraceIn("resources", 70);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int resources_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal379 = default(IToken);
		AstParserRuleReturnScope<object, IToken> resource378 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> resource380 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal379_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "resources");
		DebugLocation(934, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// Java.g:935:5: ( resource ( ';' resource )* )
			DebugEnterAlt(1);
			// Java.g:935:10: resource ( ';' resource )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(935, 10);
			PushFollow(Follow._resource_in_resources5109);
			resource378=resource();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, resource378.Tree);
			DebugLocation(935, 20);
			// Java.g:935:20: ( ';' resource )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_1 = input.LA(1);

				if ((LA113_1==SEMI))
				{
					int LA113_2 = input.LA(2);

					if ((LA113_2==BOOLEAN||LA113_2==BYTE||LA113_2==CHAR||LA113_2==DOUBLE||LA113_2==FINAL||LA113_2==FLOAT||LA113_2==IDENTIFIER||LA113_2==INT||LA113_2==LONG||LA113_2==MONKEYS_AT||LA113_2==SHORT))
					{
						alt113 = 1;
					}


				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:935:22: ';' resource
					{
					DebugLocation(935, 22);
					char_literal379=(IToken)Match(input,SEMI,Follow._SEMI_in_resources5114); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal379_tree = (object)adaptor.Create(char_literal379);
					adaptor.AddChild(root_0, char_literal379_tree);
					}
					DebugLocation(935, 26);
					PushFollow(Follow._resource_in_resources5116);
					resource380=resource();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, resource380.Tree);

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("resources", 70);
			LeaveRule("resources", 70);
			LeaveRule_resources();
			if (state.backtracking > 0) { Memoize(input, 70, resources_StartIndex); }

		}
		DebugLocation(936, 4);
		} finally { DebugExitRule(GrammarFileName, "resources"); }
		return retval;

	}
	// $ANTLR end "resources"

	partial void EnterRule_resource();
	partial void LeaveRule_resource();
	// $ANTLR start "resource"
	// Java.g:938:1: resource : ( variableModifiers )? type IDENTIFIER ( '[' ']' )* '=' expression ;
	[GrammarRule("resource")]
	private AstParserRuleReturnScope<object, IToken> resource()
	{
		EnterRule_resource();
		EnterRule("resource", 71);
		TraceIn("resource", 71);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int resource_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER383 = default(IToken);
		IToken char_literal384 = default(IToken);
		IToken char_literal385 = default(IToken);
		IToken char_literal386 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers381 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type382 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression387 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER383_tree = default(object);
		object char_literal384_tree = default(object);
		object char_literal385_tree = default(object);
		object char_literal386_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "resource");
		DebugLocation(938, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// Java.g:939:5: ( ( variableModifiers )? type IDENTIFIER ( '[' ']' )* '=' expression )
			DebugEnterAlt(1);
			// Java.g:939:10: ( variableModifiers )? type IDENTIFIER ( '[' ']' )* '=' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(939, 10);
			// Java.g:939:10: ( variableModifiers )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			switch (input.LA(1))
			{
			case FINAL:
			case MONKEYS_AT:
				{
				alt114 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred166_Java_fragment)))
				{
					alt114 = 1;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred166_Java_fragment)))
				{
					alt114 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:939:10: variableModifiers
				{
				DebugLocation(939, 10);
				PushFollow(Follow._variableModifiers_in_resource5139);
				variableModifiers381=variableModifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers381.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(114); }

			DebugLocation(939, 29);
			PushFollow(Follow._type_in_resource5142);
			type382=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type382.Tree);
			DebugLocation(939, 34);
			IDENTIFIER383=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_resource5144); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER383_tree = (object)adaptor.Create(IDENTIFIER383);
			adaptor.AddChild(root_0, IDENTIFIER383_tree);
			}
			DebugLocation(939, 45);
			// Java.g:939:45: ( '[' ']' )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_1 = input.LA(1);

				if ((LA115_1==LBRACKET))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:939:46: '[' ']'
					{
					DebugLocation(939, 46);
					char_literal384=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_resource5147); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal384_tree = (object)adaptor.Create(char_literal384);
					adaptor.AddChild(root_0, char_literal384_tree);
					}
					DebugLocation(939, 50);
					char_literal385=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_resource5149); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal385_tree = (object)adaptor.Create(char_literal385);
					adaptor.AddChild(root_0, char_literal385_tree);
					}

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }

			DebugLocation(939, 56);
			char_literal386=(IToken)Match(input,EQ,Follow._EQ_in_resource5153); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal386_tree = (object)adaptor.Create(char_literal386);
			adaptor.AddChild(root_0, char_literal386_tree);
			}
			DebugLocation(939, 60);
			PushFollow(Follow._expression_in_resource5155);
			expression387=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression387.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("resource", 71);
			LeaveRule("resource", 71);
			LeaveRule_resource();
			if (state.backtracking > 0) { Memoize(input, 71, resource_StartIndex); }

		}
		DebugLocation(940, 4);
		} finally { DebugExitRule(GrammarFileName, "resource"); }
		return retval;

	}
	// $ANTLR end "resource"

	partial void EnterRule_forstatement();
	partial void LeaveRule_forstatement();
	// $ANTLR start "forstatement"
	// Java.g:942:1: forstatement : ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement );
	[GrammarRule("forstatement")]
	private AstParserRuleReturnScope<object, IToken> forstatement()
	{
		EnterRule_forstatement();
		EnterRule("forstatement", 72);
		TraceIn("forstatement", 72);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forstatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal388 = default(IToken);
		IToken char_literal389 = default(IToken);
		IToken IDENTIFIER392 = default(IToken);
		IToken char_literal393 = default(IToken);
		IToken char_literal395 = default(IToken);
		IToken string_literal397 = default(IToken);
		IToken char_literal398 = default(IToken);
		IToken char_literal400 = default(IToken);
		IToken char_literal402 = default(IToken);
		IToken char_literal404 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers390 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type391 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression394 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement396 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forInit399 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression401 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expressionList403 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement405 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal388_tree = default(object);
		object char_literal389_tree = default(object);
		object IDENTIFIER392_tree = default(object);
		object char_literal393_tree = default(object);
		object char_literal395_tree = default(object);
		object string_literal397_tree = default(object);
		object char_literal398_tree = default(object);
		object char_literal400_tree = default(object);
		object char_literal402_tree = default(object);
		object char_literal404_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forstatement");
		DebugLocation(942, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// Java.g:943:5: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement )
			int alt119=2;
			try { DebugEnterDecision(119, false);
			int LA119_1 = input.LA(1);

			if ((LA119_1==FOR))
			{
				int LA119_2 = input.LA(2);

				if ((EvaluatePredicate(synpred168_Java_fragment)))
				{
					alt119 = 1;
				}
				else if ((true))
				{
					alt119 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 119, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:945:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(945, 9);
				string_literal388=(IToken)Match(input,FOR,Follow._FOR_in_forstatement5194); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal388_tree = (object)adaptor.Create(string_literal388);
				adaptor.AddChild(root_0, string_literal388_tree);
				}
				DebugLocation(945, 15);
				char_literal389=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forstatement5196); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal389_tree = (object)adaptor.Create(char_literal389);
				adaptor.AddChild(root_0, char_literal389_tree);
				}
				DebugLocation(945, 19);
				PushFollow(Follow._variableModifiers_in_forstatement5198);
				variableModifiers390=variableModifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers390.Tree);
				DebugLocation(945, 37);
				PushFollow(Follow._type_in_forstatement5200);
				type391=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type391.Tree);
				DebugLocation(945, 42);
				IDENTIFIER392=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_forstatement5202); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER392_tree = (object)adaptor.Create(IDENTIFIER392);
				adaptor.AddChild(root_0, IDENTIFIER392_tree);
				}
				DebugLocation(945, 53);
				char_literal393=(IToken)Match(input,COLON,Follow._COLON_in_forstatement5204); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal393_tree = (object)adaptor.Create(char_literal393);
				adaptor.AddChild(root_0, char_literal393_tree);
				}
				DebugLocation(946, 9);
				PushFollow(Follow._expression_in_forstatement5215);
				expression394=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression394.Tree);
				DebugLocation(946, 20);
				char_literal395=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forstatement5217); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal395_tree = (object)adaptor.Create(char_literal395);
				adaptor.AddChild(root_0, char_literal395_tree);
				}
				DebugLocation(946, 24);
				PushFollow(Follow._statement_in_forstatement5219);
				statement396=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement396.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:949:9: 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(949, 9);
				string_literal397=(IToken)Match(input,FOR,Follow._FOR_in_forstatement5251); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal397_tree = (object)adaptor.Create(string_literal397);
				adaptor.AddChild(root_0, string_literal397_tree);
				}
				DebugLocation(949, 15);
				char_literal398=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forstatement5253); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal398_tree = (object)adaptor.Create(char_literal398);
				adaptor.AddChild(root_0, char_literal398_tree);
				}
				DebugLocation(950, 17);
				// Java.g:950:17: ( forInit )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==EOF||LA116_1==BANG||LA116_1==BOOLEAN||LA116_1==BYTE||LA116_1==BooleanLiteral||LA116_1==CHAR||LA116_1==CharacterLiteral||LA116_1==DOUBLE||LA116_1==FINAL||LA116_1==FLOAT||LA116_1==FloatingPointLiteral||LA116_1==IDENTIFIER||LA116_1==INT||LA116_1==IntegerLiteral||(LA116_1>=LONG && LA116_1<=LPAREN)||LA116_1==MONKEYS_AT||LA116_1==NEW||LA116_1==NullLiteral||LA116_1==PLUS||LA116_1==PLUSPLUS||LA116_1==SHORT||LA116_1==SUB||(LA116_1>=SUBSUB && LA116_1<=SUPER)||LA116_1==StringLiteral||LA116_1==THIS||LA116_1==TILDE||LA116_1==VOID))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:950:18: forInit
					{
					DebugLocation(950, 18);
					PushFollow(Follow._forInit_in_forstatement5273);
					forInit399=forInit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, forInit399.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(951, 20);
				char_literal400=(IToken)Match(input,SEMI,Follow._SEMI_in_forstatement5294); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal400_tree = (object)adaptor.Create(char_literal400);
				adaptor.AddChild(root_0, char_literal400_tree);
				}
				DebugLocation(952, 17);
				// Java.g:952:17: ( expression )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				int LA117_1 = input.LA(1);

				if ((LA117_1==BANG||LA117_1==BOOLEAN||LA117_1==BYTE||LA117_1==BooleanLiteral||LA117_1==CHAR||LA117_1==CharacterLiteral||LA117_1==DOUBLE||LA117_1==FLOAT||LA117_1==FloatingPointLiteral||LA117_1==IDENTIFIER||LA117_1==INT||LA117_1==IntegerLiteral||(LA117_1>=LONG && LA117_1<=LPAREN)||LA117_1==NEW||LA117_1==NullLiteral||LA117_1==PLUS||LA117_1==PLUSPLUS||LA117_1==SHORT||LA117_1==SUB||(LA117_1>=SUBSUB && LA117_1<=SUPER)||LA117_1==StringLiteral||LA117_1==THIS||LA117_1==TILDE||LA117_1==VOID))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:952:18: expression
					{
					DebugLocation(952, 18);
					PushFollow(Follow._expression_in_forstatement5314);
					expression401=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression401.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(953, 20);
				char_literal402=(IToken)Match(input,SEMI,Follow._SEMI_in_forstatement5335); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal402_tree = (object)adaptor.Create(char_literal402);
				adaptor.AddChild(root_0, char_literal402_tree);
				}
				DebugLocation(954, 17);
				// Java.g:954:17: ( expressionList )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, false);
				int LA118_1 = input.LA(1);

				if ((LA118_1==BANG||LA118_1==BOOLEAN||LA118_1==BYTE||LA118_1==BooleanLiteral||LA118_1==CHAR||LA118_1==CharacterLiteral||LA118_1==DOUBLE||LA118_1==FLOAT||LA118_1==FloatingPointLiteral||LA118_1==IDENTIFIER||LA118_1==INT||LA118_1==IntegerLiteral||(LA118_1>=LONG && LA118_1<=LPAREN)||LA118_1==NEW||LA118_1==NullLiteral||LA118_1==PLUS||LA118_1==PLUSPLUS||LA118_1==SHORT||LA118_1==SUB||(LA118_1>=SUBSUB && LA118_1<=SUPER)||LA118_1==StringLiteral||LA118_1==THIS||LA118_1==TILDE||LA118_1==VOID))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:954:18: expressionList
					{
					DebugLocation(954, 18);
					PushFollow(Follow._expressionList_in_forstatement5355);
					expressionList403=expressionList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expressionList403.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(955, 20);
				char_literal404=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forstatement5376); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal404_tree = (object)adaptor.Create(char_literal404);
				adaptor.AddChild(root_0, char_literal404_tree);
				}
				DebugLocation(955, 24);
				PushFollow(Follow._statement_in_forstatement5378);
				statement405=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement405.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forstatement", 72);
			LeaveRule("forstatement", 72);
			LeaveRule_forstatement();
			if (state.backtracking > 0) { Memoize(input, 72, forstatement_StartIndex); }

		}
		DebugLocation(956, 4);
		} finally { DebugExitRule(GrammarFileName, "forstatement"); }
		return retval;

	}
	// $ANTLR end "forstatement"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// Java.g:958:1: forInit : ( localVariableDeclaration | expressionList );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<object, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 73);
		TraceIn("forInit", 73);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> localVariableDeclaration406 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expressionList407 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(958, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// Java.g:959:5: ( localVariableDeclaration | expressionList )
			int alt120=2;
			try { DebugEnterDecision(120, false);
			switch (input.LA(1))
			{
			case FINAL:
			case MONKEYS_AT:
				{
				alt120 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA120_2 = input.LA(2);

				if ((EvaluatePredicate(synpred172_Java_fragment)))
				{
					alt120 = 1;
				}
				else if ((true))
				{
					alt120 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA120_2 = input.LA(2);

				if ((EvaluatePredicate(synpred172_Java_fragment)))
				{
					alt120 = 1;
				}
				else if ((true))
				{
					alt120 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BANG:
			case BooleanLiteral:
			case CharacterLiteral:
			case FloatingPointLiteral:
			case IntegerLiteral:
			case LPAREN:
			case NEW:
			case NullLiteral:
			case PLUS:
			case PLUSPLUS:
			case SUB:
			case SUBSUB:
			case SUPER:
			case StringLiteral:
			case THIS:
			case TILDE:
			case VOID:
				{
				alt120 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:959:9: localVariableDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(959, 9);
				PushFollow(Follow._localVariableDeclaration_in_forInit5398);
				localVariableDeclaration406=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclaration406.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:960:9: expressionList
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(960, 9);
				PushFollow(Follow._expressionList_in_forInit5408);
				expressionList407=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionList407.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 73);
			LeaveRule("forInit", 73);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 73, forInit_StartIndex); }

		}
		DebugLocation(961, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_parExpression();
	partial void LeaveRule_parExpression();
	// $ANTLR start "parExpression"
	// Java.g:963:1: parExpression : '(' expression ')' ;
	[GrammarRule("parExpression")]
	private AstParserRuleReturnScope<object, IToken> parExpression()
	{
		EnterRule_parExpression();
		EnterRule("parExpression", 74);
		TraceIn("parExpression", 74);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int parExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal408 = default(IToken);
		IToken char_literal410 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression409 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal408_tree = default(object);
		object char_literal410_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parExpression");
		DebugLocation(963, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// Java.g:964:5: ( '(' expression ')' )
			DebugEnterAlt(1);
			// Java.g:964:9: '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(964, 9);
			char_literal408=(IToken)Match(input,LPAREN,Follow._LPAREN_in_parExpression5428); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal408_tree = (object)adaptor.Create(char_literal408);
			adaptor.AddChild(root_0, char_literal408_tree);
			}
			DebugLocation(964, 13);
			PushFollow(Follow._expression_in_parExpression5430);
			expression409=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression409.Tree);
			DebugLocation(964, 24);
			char_literal410=(IToken)Match(input,RPAREN,Follow._RPAREN_in_parExpression5432); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal410_tree = (object)adaptor.Create(char_literal410);
			adaptor.AddChild(root_0, char_literal410_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parExpression", 74);
			LeaveRule("parExpression", 74);
			LeaveRule_parExpression();
			if (state.backtracking > 0) { Memoize(input, 74, parExpression_StartIndex); }

		}
		DebugLocation(965, 4);
		} finally { DebugExitRule(GrammarFileName, "parExpression"); }
		return retval;

	}
	// $ANTLR end "parExpression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();
	// $ANTLR start "expressionList"
	// Java.g:967:1: expressionList : expression ( ',' expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<object, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 75);
		TraceIn("expressionList", 75);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expressionList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal412 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression411 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression413 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal412_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(967, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// Java.g:968:5: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// Java.g:968:9: expression ( ',' expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(968, 9);
			PushFollow(Follow._expression_in_expressionList5452);
			expression411=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression411.Tree);
			DebugLocation(969, 9);
			// Java.g:969:9: ( ',' expression )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==COMMA))
				{
					alt121 = 1;
				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:969:10: ',' expression
					{
					DebugLocation(969, 10);
					char_literal412=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList5463); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal412_tree = (object)adaptor.Create(char_literal412);
					adaptor.AddChild(root_0, char_literal412_tree);
					}
					DebugLocation(969, 14);
					PushFollow(Follow._expression_in_expressionList5465);
					expression413=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression413.Tree);

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 75);
			LeaveRule("expressionList", 75);
			LeaveRule_expressionList();
			if (state.backtracking > 0) { Memoize(input, 75, expressionList_StartIndex); }

		}
		DebugLocation(971, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// Java.g:974:1: expression : conditionalExpression ( assignmentOperator expression )? ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 76);
		TraceIn("expression", 76);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> conditionalExpression414 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentOperator415 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression416 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(974, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// Java.g:975:5: ( conditionalExpression ( assignmentOperator expression )? )
			DebugEnterAlt(1);
			// Java.g:975:9: conditionalExpression ( assignmentOperator expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(975, 9);
			PushFollow(Follow._conditionalExpression_in_expression5497);
			conditionalExpression414=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression414.Tree);
			DebugLocation(976, 9);
			// Java.g:976:9: ( assignmentOperator expression )?
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_1 = input.LA(1);

			if ((LA122_1==AMPEQ||LA122_1==BAREQ||LA122_1==CARETEQ||LA122_1==EQ||LA122_1==GT||LA122_1==LT||LA122_1==PERCENTEQ||LA122_1==PLUSEQ||LA122_1==SLASHEQ||LA122_1==STAREQ||LA122_1==SUBEQ))
			{
				alt122 = 1;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:976:10: assignmentOperator expression
				{
				DebugLocation(976, 10);
				PushFollow(Follow._assignmentOperator_in_expression5508);
				assignmentOperator415=assignmentOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentOperator415.Tree);
				DebugLocation(976, 29);
				PushFollow(Follow._expression_in_expression5510);
				expression416=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression416.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 76);
			LeaveRule("expression", 76);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 76, expression_StartIndex); }

		}
		DebugLocation(978, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();
	// $ANTLR start "assignmentOperator"
	// Java.g:981:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' );
	[GrammarRule("assignmentOperator")]
	private AstParserRuleReturnScope<object, IToken> assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 77);
		TraceIn("assignmentOperator", 77);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignmentOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal417 = default(IToken);
		IToken string_literal418 = default(IToken);
		IToken string_literal419 = default(IToken);
		IToken string_literal420 = default(IToken);
		IToken string_literal421 = default(IToken);
		IToken string_literal422 = default(IToken);
		IToken string_literal423 = default(IToken);
		IToken string_literal424 = default(IToken);
		IToken string_literal425 = default(IToken);
		IToken char_literal426 = default(IToken);
		IToken char_literal427 = default(IToken);
		IToken char_literal428 = default(IToken);
		IToken char_literal429 = default(IToken);
		IToken char_literal430 = default(IToken);
		IToken char_literal431 = default(IToken);
		IToken char_literal432 = default(IToken);
		IToken char_literal433 = default(IToken);
		IToken char_literal434 = default(IToken);
		IToken char_literal435 = default(IToken);

		object char_literal417_tree = default(object);
		object string_literal418_tree = default(object);
		object string_literal419_tree = default(object);
		object string_literal420_tree = default(object);
		object string_literal421_tree = default(object);
		object string_literal422_tree = default(object);
		object string_literal423_tree = default(object);
		object string_literal424_tree = default(object);
		object string_literal425_tree = default(object);
		object char_literal426_tree = default(object);
		object char_literal427_tree = default(object);
		object char_literal428_tree = default(object);
		object char_literal429_tree = default(object);
		object char_literal430_tree = default(object);
		object char_literal431_tree = default(object);
		object char_literal432_tree = default(object);
		object char_literal433_tree = default(object);
		object char_literal434_tree = default(object);
		object char_literal435_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(981, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// Java.g:982:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' )
			int alt123=12;
			try { DebugEnterDecision(123, false);
			switch (input.LA(1))
			{
			case EQ:
				{
				alt123 = 1;
				}
				break;
			case PLUSEQ:
				{
				alt123 = 2;
				}
				break;
			case SUBEQ:
				{
				alt123 = 3;
				}
				break;
			case STAREQ:
				{
				alt123 = 4;
				}
				break;
			case SLASHEQ:
				{
				alt123 = 5;
				}
				break;
			case AMPEQ:
				{
				alt123 = 6;
				}
				break;
			case BAREQ:
				{
				alt123 = 7;
				}
				break;
			case CARETEQ:
				{
				alt123 = 8;
				}
				break;
			case PERCENTEQ:
				{
				alt123 = 9;
				}
				break;
			case LT:
				{
				alt123 = 10;
				}
				break;
			case GT:
				{
				int LA123_2 = input.LA(2);

				if ((LA123_2==GT))
				{
					int LA123_3 = input.LA(3);

					if ((LA123_3==GT))
					{
						alt123 = 11;
					}
					else if ((LA123_3==EQ))
					{
						alt123 = 12;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 123, 12, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:982:9: '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(982, 9);
				char_literal417=(IToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5542); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal417_tree = (object)adaptor.Create(char_literal417);
				adaptor.AddChild(root_0, char_literal417_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:983:9: '+='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(983, 9);
				string_literal418=(IToken)Match(input,PLUSEQ,Follow._PLUSEQ_in_assignmentOperator5552); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal418_tree = (object)adaptor.Create(string_literal418);
				adaptor.AddChild(root_0, string_literal418_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:984:9: '-='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(984, 9);
				string_literal419=(IToken)Match(input,SUBEQ,Follow._SUBEQ_in_assignmentOperator5562); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal419_tree = (object)adaptor.Create(string_literal419);
				adaptor.AddChild(root_0, string_literal419_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:985:9: '*='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(985, 9);
				string_literal420=(IToken)Match(input,STAREQ,Follow._STAREQ_in_assignmentOperator5572); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal420_tree = (object)adaptor.Create(string_literal420);
				adaptor.AddChild(root_0, string_literal420_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:986:9: '/='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(986, 9);
				string_literal421=(IToken)Match(input,SLASHEQ,Follow._SLASHEQ_in_assignmentOperator5582); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal421_tree = (object)adaptor.Create(string_literal421);
				adaptor.AddChild(root_0, string_literal421_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:987:9: '&='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(987, 9);
				string_literal422=(IToken)Match(input,AMPEQ,Follow._AMPEQ_in_assignmentOperator5592); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal422_tree = (object)adaptor.Create(string_literal422);
				adaptor.AddChild(root_0, string_literal422_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:988:9: '|='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(988, 9);
				string_literal423=(IToken)Match(input,BAREQ,Follow._BAREQ_in_assignmentOperator5602); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal423_tree = (object)adaptor.Create(string_literal423);
				adaptor.AddChild(root_0, string_literal423_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:989:9: '^='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(989, 9);
				string_literal424=(IToken)Match(input,CARETEQ,Follow._CARETEQ_in_assignmentOperator5612); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal424_tree = (object)adaptor.Create(string_literal424);
				adaptor.AddChild(root_0, string_literal424_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:990:9: '%='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(990, 9);
				string_literal425=(IToken)Match(input,PERCENTEQ,Follow._PERCENTEQ_in_assignmentOperator5622); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal425_tree = (object)adaptor.Create(string_literal425);
				adaptor.AddChild(root_0, string_literal425_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:991:10: '<' '<' '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(991, 10);
				char_literal426=(IToken)Match(input,LT,Follow._LT_in_assignmentOperator5633); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal426_tree = (object)adaptor.Create(char_literal426);
				adaptor.AddChild(root_0, char_literal426_tree);
				}
				DebugLocation(991, 14);
				char_literal427=(IToken)Match(input,LT,Follow._LT_in_assignmentOperator5635); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal427_tree = (object)adaptor.Create(char_literal427);
				adaptor.AddChild(root_0, char_literal427_tree);
				}
				DebugLocation(991, 18);
				char_literal428=(IToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5637); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal428_tree = (object)adaptor.Create(char_literal428);
				adaptor.AddChild(root_0, char_literal428_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:992:10: '>' '>' '>' '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(992, 10);
				char_literal429=(IToken)Match(input,GT,Follow._GT_in_assignmentOperator5648); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal429_tree = (object)adaptor.Create(char_literal429);
				adaptor.AddChild(root_0, char_literal429_tree);
				}
				DebugLocation(992, 14);
				char_literal430=(IToken)Match(input,GT,Follow._GT_in_assignmentOperator5650); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal430_tree = (object)adaptor.Create(char_literal430);
				adaptor.AddChild(root_0, char_literal430_tree);
				}
				DebugLocation(992, 18);
				char_literal431=(IToken)Match(input,GT,Follow._GT_in_assignmentOperator5652); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal431_tree = (object)adaptor.Create(char_literal431);
				adaptor.AddChild(root_0, char_literal431_tree);
				}
				DebugLocation(992, 22);
				char_literal432=(IToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5654); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal432_tree = (object)adaptor.Create(char_literal432);
				adaptor.AddChild(root_0, char_literal432_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Java.g:993:10: '>' '>' '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(993, 10);
				char_literal433=(IToken)Match(input,GT,Follow._GT_in_assignmentOperator5665); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal433_tree = (object)adaptor.Create(char_literal433);
				adaptor.AddChild(root_0, char_literal433_tree);
				}
				DebugLocation(993, 14);
				char_literal434=(IToken)Match(input,GT,Follow._GT_in_assignmentOperator5667); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal434_tree = (object)adaptor.Create(char_literal434);
				adaptor.AddChild(root_0, char_literal434_tree);
				}
				DebugLocation(993, 18);
				char_literal435=(IToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5669); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal435_tree = (object)adaptor.Create(char_literal435);
				adaptor.AddChild(root_0, char_literal435_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentOperator", 77);
			LeaveRule("assignmentOperator", 77);
			LeaveRule_assignmentOperator();
			if (state.backtracking > 0) { Memoize(input, 77, assignmentOperator_StartIndex); }

		}
		DebugLocation(994, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return retval;

	}
	// $ANTLR end "assignmentOperator"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();
	// $ANTLR start "conditionalExpression"
	// Java.g:997:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' conditionalExpression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<object, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 78);
		TraceIn("conditionalExpression", 78);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal437 = default(IToken);
		IToken char_literal439 = default(IToken);
		AstParserRuleReturnScope<object, IToken> conditionalOrExpression436 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression438 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditionalExpression440 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal437_tree = default(object);
		object char_literal439_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(997, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// Java.g:998:5: ( conditionalOrExpression ( '?' expression ':' conditionalExpression )? )
			DebugEnterAlt(1);
			// Java.g:998:9: conditionalOrExpression ( '?' expression ':' conditionalExpression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(998, 9);
			PushFollow(Follow._conditionalOrExpression_in_conditionalExpression5690);
			conditionalOrExpression436=conditionalOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalOrExpression436.Tree);
			DebugLocation(999, 9);
			// Java.g:999:9: ( '?' expression ':' conditionalExpression )?
			int alt124=2;
			try { DebugEnterSubRule(124);
			try { DebugEnterDecision(124, false);
			int LA124_1 = input.LA(1);

			if ((LA124_1==QUES))
			{
				alt124 = 1;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:999:10: '?' expression ':' conditionalExpression
				{
				DebugLocation(999, 10);
				char_literal437=(IToken)Match(input,QUES,Follow._QUES_in_conditionalExpression5701); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal437_tree = (object)adaptor.Create(char_literal437);
				adaptor.AddChild(root_0, char_literal437_tree);
				}
				DebugLocation(999, 14);
				PushFollow(Follow._expression_in_conditionalExpression5703);
				expression438=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression438.Tree);
				DebugLocation(999, 25);
				char_literal439=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression5705); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal439_tree = (object)adaptor.Create(char_literal439);
				adaptor.AddChild(root_0, char_literal439_tree);
				}
				DebugLocation(999, 29);
				PushFollow(Follow._conditionalExpression_in_conditionalExpression5707);
				conditionalExpression440=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression440.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(124); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 78);
			LeaveRule("conditionalExpression", 78);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 78, conditionalExpression_StartIndex); }

		}
		DebugLocation(1001, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalOrExpression();
	partial void LeaveRule_conditionalOrExpression();
	// $ANTLR start "conditionalOrExpression"
	// Java.g:1003:1: conditionalOrExpression : conditionalAndExpression ( '||' conditionalAndExpression )* ;
	[GrammarRule("conditionalOrExpression")]
	private AstParserRuleReturnScope<object, IToken> conditionalOrExpression()
	{
		EnterRule_conditionalOrExpression();
		EnterRule("conditionalOrExpression", 79);
		TraceIn("conditionalOrExpression", 79);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalOrExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal442 = default(IToken);
		AstParserRuleReturnScope<object, IToken> conditionalAndExpression441 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditionalAndExpression443 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal442_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditionalOrExpression");
		DebugLocation(1003, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// Java.g:1004:5: ( conditionalAndExpression ( '||' conditionalAndExpression )* )
			DebugEnterAlt(1);
			// Java.g:1004:9: conditionalAndExpression ( '||' conditionalAndExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1004, 9);
			PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression5737);
			conditionalAndExpression441=conditionalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalAndExpression441.Tree);
			DebugLocation(1005, 9);
			// Java.g:1005:9: ( '||' conditionalAndExpression )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_1 = input.LA(1);

				if ((LA125_1==BARBAR))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1005:10: '||' conditionalAndExpression
					{
					DebugLocation(1005, 10);
					string_literal442=(IToken)Match(input,BARBAR,Follow._BARBAR_in_conditionalOrExpression5748); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal442_tree = (object)adaptor.Create(string_literal442);
					adaptor.AddChild(root_0, string_literal442_tree);
					}
					DebugLocation(1005, 15);
					PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression5750);
					conditionalAndExpression443=conditionalAndExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalAndExpression443.Tree);

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalOrExpression", 79);
			LeaveRule("conditionalOrExpression", 79);
			LeaveRule_conditionalOrExpression();
			if (state.backtracking > 0) { Memoize(input, 79, conditionalOrExpression_StartIndex); }

		}
		DebugLocation(1007, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalOrExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalOrExpression"

	partial void EnterRule_conditionalAndExpression();
	partial void LeaveRule_conditionalAndExpression();
	// $ANTLR start "conditionalAndExpression"
	// Java.g:1009:1: conditionalAndExpression : inclusiveOrExpression ( '&&' inclusiveOrExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private AstParserRuleReturnScope<object, IToken> conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 80);
		TraceIn("conditionalAndExpression", 80);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalAndExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal445 = default(IToken);
		AstParserRuleReturnScope<object, IToken> inclusiveOrExpression444 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> inclusiveOrExpression446 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal445_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(1009, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// Java.g:1010:5: ( inclusiveOrExpression ( '&&' inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:1010:9: inclusiveOrExpression ( '&&' inclusiveOrExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1010, 9);
			PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression5780);
			inclusiveOrExpression444=inclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression444.Tree);
			DebugLocation(1011, 9);
			// Java.g:1011:9: ( '&&' inclusiveOrExpression )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_1 = input.LA(1);

				if ((LA126_1==AMPAMP))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1011:10: '&&' inclusiveOrExpression
					{
					DebugLocation(1011, 10);
					string_literal445=(IToken)Match(input,AMPAMP,Follow._AMPAMP_in_conditionalAndExpression5791); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal445_tree = (object)adaptor.Create(string_literal445);
					adaptor.AddChild(root_0, string_literal445_tree);
					}
					DebugLocation(1011, 15);
					PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression5793);
					inclusiveOrExpression446=inclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression446.Tree);

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalAndExpression", 80);
			LeaveRule("conditionalAndExpression", 80);
			LeaveRule_conditionalAndExpression();
			if (state.backtracking > 0) { Memoize(input, 80, conditionalAndExpression_StartIndex); }

		}
		DebugLocation(1013, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();
	// $ANTLR start "inclusiveOrExpression"
	// Java.g:1015:1: inclusiveOrExpression : exclusiveOrExpression ( '|' exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<object, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 81);
		TraceIn("inclusiveOrExpression", 81);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int inclusiveOrExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal448 = default(IToken);
		AstParserRuleReturnScope<object, IToken> exclusiveOrExpression447 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> exclusiveOrExpression449 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal448_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(1015, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// Java.g:1016:5: ( exclusiveOrExpression ( '|' exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:1016:9: exclusiveOrExpression ( '|' exclusiveOrExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1016, 9);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression5823);
			exclusiveOrExpression447=exclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression447.Tree);
			DebugLocation(1017, 9);
			// Java.g:1017:9: ( '|' exclusiveOrExpression )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				int LA127_1 = input.LA(1);

				if ((LA127_1==BAR))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1017:10: '|' exclusiveOrExpression
					{
					DebugLocation(1017, 10);
					char_literal448=(IToken)Match(input,BAR,Follow._BAR_in_inclusiveOrExpression5834); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal448_tree = (object)adaptor.Create(char_literal448);
					adaptor.AddChild(root_0, char_literal448_tree);
					}
					DebugLocation(1017, 14);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression5836);
					exclusiveOrExpression449=exclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression449.Tree);

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 81);
			LeaveRule("inclusiveOrExpression", 81);
			LeaveRule_inclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 81, inclusiveOrExpression_StartIndex); }

		}
		DebugLocation(1019, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();
	// $ANTLR start "exclusiveOrExpression"
	// Java.g:1021:1: exclusiveOrExpression : andExpression ( '^' andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<object, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 82);
		TraceIn("exclusiveOrExpression", 82);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int exclusiveOrExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal451 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andExpression450 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andExpression452 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal451_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(1021, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// Java.g:1022:5: ( andExpression ( '^' andExpression )* )
			DebugEnterAlt(1);
			// Java.g:1022:9: andExpression ( '^' andExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1022, 9);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression5866);
			andExpression450=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression450.Tree);
			DebugLocation(1023, 9);
			// Java.g:1023:9: ( '^' andExpression )*
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				int LA128_1 = input.LA(1);

				if ((LA128_1==CARET))
				{
					alt128 = 1;
				}


				} finally { DebugExitDecision(128); }
				switch ( alt128 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1023:10: '^' andExpression
					{
					DebugLocation(1023, 10);
					char_literal451=(IToken)Match(input,CARET,Follow._CARET_in_exclusiveOrExpression5877); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal451_tree = (object)adaptor.Create(char_literal451);
					adaptor.AddChild(root_0, char_literal451_tree);
					}
					DebugLocation(1023, 14);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression5879);
					andExpression452=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression452.Tree);

					}
					break;

				default:
					goto loop128;
				}
			}

			loop128:
				;

			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 82);
			LeaveRule("exclusiveOrExpression", 82);
			LeaveRule_exclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 82, exclusiveOrExpression_StartIndex); }

		}
		DebugLocation(1025, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Java.g:1027:1: andExpression : equalityExpression ( '&' equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<object, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 83);
		TraceIn("andExpression", 83);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int andExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal454 = default(IToken);
		AstParserRuleReturnScope<object, IToken> equalityExpression453 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> equalityExpression455 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal454_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(1027, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// Java.g:1028:5: ( equalityExpression ( '&' equalityExpression )* )
			DebugEnterAlt(1);
			// Java.g:1028:9: equalityExpression ( '&' equalityExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1028, 9);
			PushFollow(Follow._equalityExpression_in_andExpression5909);
			equalityExpression453=equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression453.Tree);
			DebugLocation(1029, 9);
			// Java.g:1029:9: ( '&' equalityExpression )*
			try { DebugEnterSubRule(129);
			while (true)
			{
				int alt129=2;
				try { DebugEnterDecision(129, false);
				int LA129_1 = input.LA(1);

				if ((LA129_1==AMP))
				{
					alt129 = 1;
				}


				} finally { DebugExitDecision(129); }
				switch ( alt129 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1029:10: '&' equalityExpression
					{
					DebugLocation(1029, 10);
					char_literal454=(IToken)Match(input,AMP,Follow._AMP_in_andExpression5920); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal454_tree = (object)adaptor.Create(char_literal454);
					adaptor.AddChild(root_0, char_literal454_tree);
					}
					DebugLocation(1029, 14);
					PushFollow(Follow._equalityExpression_in_andExpression5922);
					equalityExpression455=equalityExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression455.Tree);

					}
					break;

				default:
					goto loop129;
				}
			}

			loop129:
				;

			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 83);
			LeaveRule("andExpression", 83);
			LeaveRule_andExpression();
			if (state.backtracking > 0) { Memoize(input, 83, andExpression_StartIndex); }

		}
		DebugLocation(1031, 4);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// Java.g:1033:1: equalityExpression : instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<object, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 84);
		TraceIn("equalityExpression", 84);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set457 = default(IToken);
		AstParserRuleReturnScope<object, IToken> instanceOfExpression456 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> instanceOfExpression458 = default(AstParserRuleReturnScope<object, IToken>);

		object set457_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(1033, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// Java.g:1034:5: ( instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* )
			DebugEnterAlt(1);
			// Java.g:1034:9: instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1034, 9);
			PushFollow(Follow._instanceOfExpression_in_equalityExpression5952);
			instanceOfExpression456=instanceOfExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression456.Tree);
			DebugLocation(1035, 9);
			// Java.g:1035:9: ( ( '==' | '!=' ) instanceOfExpression )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_1 = input.LA(1);

				if ((LA130_1==BANGEQ||LA130_1==EQEQ))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1036:13: ( '==' | '!=' ) instanceOfExpression
					{
					DebugLocation(1036, 13);

					set457=(IToken)input.LT(1);
					if (input.LA(1)==BANGEQ||input.LA(1)==EQEQ)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set457));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1039, 13);
					PushFollow(Follow._instanceOfExpression_in_equalityExpression6029);
					instanceOfExpression458=instanceOfExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression458.Tree);

					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 84);
			LeaveRule("equalityExpression", 84);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 84, equalityExpression_StartIndex); }

		}
		DebugLocation(1041, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_instanceOfExpression();
	partial void LeaveRule_instanceOfExpression();
	// $ANTLR start "instanceOfExpression"
	// Java.g:1043:1: instanceOfExpression : relationalExpression ( 'instanceof' type )? ;
	[GrammarRule("instanceOfExpression")]
	private AstParserRuleReturnScope<object, IToken> instanceOfExpression()
	{
		EnterRule_instanceOfExpression();
		EnterRule("instanceOfExpression", 85);
		TraceIn("instanceOfExpression", 85);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int instanceOfExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal460 = default(IToken);
		AstParserRuleReturnScope<object, IToken> relationalExpression459 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type461 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal460_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "instanceOfExpression");
		DebugLocation(1043, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// Java.g:1044:5: ( relationalExpression ( 'instanceof' type )? )
			DebugEnterAlt(1);
			// Java.g:1044:9: relationalExpression ( 'instanceof' type )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1044, 9);
			PushFollow(Follow._relationalExpression_in_instanceOfExpression6059);
			relationalExpression459=relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression459.Tree);
			DebugLocation(1045, 9);
			// Java.g:1045:9: ( 'instanceof' type )?
			int alt131=2;
			try { DebugEnterSubRule(131);
			try { DebugEnterDecision(131, false);
			int LA131_1 = input.LA(1);

			if ((LA131_1==INSTANCEOF))
			{
				alt131 = 1;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1045:10: 'instanceof' type
				{
				DebugLocation(1045, 10);
				string_literal460=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_instanceOfExpression6070); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal460_tree = (object)adaptor.Create(string_literal460);
				adaptor.AddChild(root_0, string_literal460_tree);
				}
				DebugLocation(1045, 23);
				PushFollow(Follow._type_in_instanceOfExpression6072);
				type461=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type461.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(131); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOfExpression", 85);
			LeaveRule("instanceOfExpression", 85);
			LeaveRule_instanceOfExpression();
			if (state.backtracking > 0) { Memoize(input, 85, instanceOfExpression_StartIndex); }

		}
		DebugLocation(1047, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOfExpression"); }
		return retval;

	}
	// $ANTLR end "instanceOfExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// Java.g:1049:1: relationalExpression : shiftExpression ( relationalOp shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<object, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 86);
		TraceIn("relationalExpression", 86);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalExpression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> shiftExpression462 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> relationalOp463 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> shiftExpression464 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(1049, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// Java.g:1050:5: ( shiftExpression ( relationalOp shiftExpression )* )
			DebugEnterAlt(1);
			// Java.g:1050:9: shiftExpression ( relationalOp shiftExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1050, 9);
			PushFollow(Follow._shiftExpression_in_relationalExpression6102);
			shiftExpression462=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression462.Tree);
			DebugLocation(1051, 9);
			// Java.g:1051:9: ( relationalOp shiftExpression )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_1 = input.LA(1);

				if ((LA132_1==LT))
				{
					int LA132_2 = input.LA(2);

					if ((LA132_2==BANG||LA132_2==BOOLEAN||LA132_2==BYTE||LA132_2==BooleanLiteral||LA132_2==CHAR||LA132_2==CharacterLiteral||LA132_2==DOUBLE||LA132_2==EQ||LA132_2==FLOAT||LA132_2==FloatingPointLiteral||LA132_2==IDENTIFIER||LA132_2==INT||LA132_2==IntegerLiteral||(LA132_2>=LONG && LA132_2<=LPAREN)||LA132_2==NEW||LA132_2==NullLiteral||LA132_2==PLUS||LA132_2==PLUSPLUS||LA132_2==SHORT||LA132_2==SUB||(LA132_2>=SUBSUB && LA132_2<=SUPER)||LA132_2==StringLiteral||LA132_2==THIS||LA132_2==TILDE||LA132_2==VOID))
					{
						alt132 = 1;
					}


				}
				else if ((LA132_1==GT))
				{
					int LA132_2 = input.LA(2);

					if ((LA132_2==BANG||LA132_2==BOOLEAN||LA132_2==BYTE||LA132_2==BooleanLiteral||LA132_2==CHAR||LA132_2==CharacterLiteral||LA132_2==DOUBLE||LA132_2==EQ||LA132_2==FLOAT||LA132_2==FloatingPointLiteral||LA132_2==IDENTIFIER||LA132_2==INT||LA132_2==IntegerLiteral||(LA132_2>=LONG && LA132_2<=LPAREN)||LA132_2==NEW||LA132_2==NullLiteral||LA132_2==PLUS||LA132_2==PLUSPLUS||LA132_2==SHORT||LA132_2==SUB||(LA132_2>=SUBSUB && LA132_2<=SUPER)||LA132_2==StringLiteral||LA132_2==THIS||LA132_2==TILDE||LA132_2==VOID))
					{
						alt132 = 1;
					}


				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1051:10: relationalOp shiftExpression
					{
					DebugLocation(1051, 10);
					PushFollow(Follow._relationalOp_in_relationalExpression6113);
					relationalOp463=relationalOp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relationalOp463.Tree);
					DebugLocation(1051, 23);
					PushFollow(Follow._shiftExpression_in_relationalExpression6115);
					shiftExpression464=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression464.Tree);

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 86);
			LeaveRule("relationalExpression", 86);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 86, relationalExpression_StartIndex); }

		}
		DebugLocation(1053, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_relationalOp();
	partial void LeaveRule_relationalOp();
	// $ANTLR start "relationalOp"
	// Java.g:1055:1: relationalOp : ( '<' '=' | '>' '=' | '<' | '>' );
	[GrammarRule("relationalOp")]
	private AstParserRuleReturnScope<object, IToken> relationalOp()
	{
		EnterRule_relationalOp();
		EnterRule("relationalOp", 87);
		TraceIn("relationalOp", 87);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalOp_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal465 = default(IToken);
		IToken char_literal466 = default(IToken);
		IToken char_literal467 = default(IToken);
		IToken char_literal468 = default(IToken);
		IToken char_literal469 = default(IToken);
		IToken char_literal470 = default(IToken);

		object char_literal465_tree = default(object);
		object char_literal466_tree = default(object);
		object char_literal467_tree = default(object);
		object char_literal468_tree = default(object);
		object char_literal469_tree = default(object);
		object char_literal470_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relationalOp");
		DebugLocation(1055, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// Java.g:1056:5: ( '<' '=' | '>' '=' | '<' | '>' )
			int alt133=4;
			try { DebugEnterDecision(133, false);
			int LA133_1 = input.LA(1);

			if ((LA133_1==LT))
			{
				int LA133_2 = input.LA(2);

				if ((LA133_2==EQ))
				{
					alt133 = 1;
				}
				else if ((LA133_2==BANG||LA133_2==BOOLEAN||LA133_2==BYTE||LA133_2==BooleanLiteral||LA133_2==CHAR||LA133_2==CharacterLiteral||LA133_2==DOUBLE||LA133_2==FLOAT||LA133_2==FloatingPointLiteral||LA133_2==IDENTIFIER||LA133_2==INT||LA133_2==IntegerLiteral||(LA133_2>=LONG && LA133_2<=LPAREN)||LA133_2==NEW||LA133_2==NullLiteral||LA133_2==PLUS||LA133_2==PLUSPLUS||LA133_2==SHORT||LA133_2==SUB||(LA133_2>=SUBSUB && LA133_2<=SUPER)||LA133_2==StringLiteral||LA133_2==THIS||LA133_2==TILDE||LA133_2==VOID))
				{
					alt133 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA133_1==GT))
			{
				int LA133_2 = input.LA(2);

				if ((LA133_2==EQ))
				{
					alt133 = 2;
				}
				else if ((LA133_2==BANG||LA133_2==BOOLEAN||LA133_2==BYTE||LA133_2==BooleanLiteral||LA133_2==CHAR||LA133_2==CharacterLiteral||LA133_2==DOUBLE||LA133_2==FLOAT||LA133_2==FloatingPointLiteral||LA133_2==IDENTIFIER||LA133_2==INT||LA133_2==IntegerLiteral||(LA133_2>=LONG && LA133_2<=LPAREN)||LA133_2==NEW||LA133_2==NullLiteral||LA133_2==PLUS||LA133_2==PLUSPLUS||LA133_2==SHORT||LA133_2==SUB||(LA133_2>=SUBSUB && LA133_2<=SUPER)||LA133_2==StringLiteral||LA133_2==THIS||LA133_2==TILDE||LA133_2==VOID))
				{
					alt133 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 133, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 133, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1056:10: '<' '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1056, 10);
				char_literal465=(IToken)Match(input,LT,Follow._LT_in_relationalOp6146); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal465_tree = (object)adaptor.Create(char_literal465);
				adaptor.AddChild(root_0, char_literal465_tree);
				}
				DebugLocation(1056, 14);
				char_literal466=(IToken)Match(input,EQ,Follow._EQ_in_relationalOp6148); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal466_tree = (object)adaptor.Create(char_literal466);
				adaptor.AddChild(root_0, char_literal466_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1057:10: '>' '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1057, 10);
				char_literal467=(IToken)Match(input,GT,Follow._GT_in_relationalOp6159); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal467_tree = (object)adaptor.Create(char_literal467);
				adaptor.AddChild(root_0, char_literal467_tree);
				}
				DebugLocation(1057, 14);
				char_literal468=(IToken)Match(input,EQ,Follow._EQ_in_relationalOp6161); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal468_tree = (object)adaptor.Create(char_literal468);
				adaptor.AddChild(root_0, char_literal468_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1058:9: '<'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1058, 9);
				char_literal469=(IToken)Match(input,LT,Follow._LT_in_relationalOp6171); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal469_tree = (object)adaptor.Create(char_literal469);
				adaptor.AddChild(root_0, char_literal469_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1059:9: '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1059, 9);
				char_literal470=(IToken)Match(input,GT,Follow._GT_in_relationalOp6181); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal470_tree = (object)adaptor.Create(char_literal470);
				adaptor.AddChild(root_0, char_literal470_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalOp", 87);
			LeaveRule("relationalOp", 87);
			LeaveRule_relationalOp();
			if (state.backtracking > 0) { Memoize(input, 87, relationalOp_StartIndex); }

		}
		DebugLocation(1060, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalOp"); }
		return retval;

	}
	// $ANTLR end "relationalOp"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();
	// $ANTLR start "shiftExpression"
	// Java.g:1062:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<object, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 88);
		TraceIn("shiftExpression", 88);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shiftExpression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> additiveExpression471 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> shiftOp472 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> additiveExpression473 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(1062, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// Java.g:1063:5: ( additiveExpression ( shiftOp additiveExpression )* )
			DebugEnterAlt(1);
			// Java.g:1063:9: additiveExpression ( shiftOp additiveExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1063, 9);
			PushFollow(Follow._additiveExpression_in_shiftExpression6200);
			additiveExpression471=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression471.Tree);
			DebugLocation(1064, 9);
			// Java.g:1064:9: ( shiftOp additiveExpression )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_1 = input.LA(1);

				if ((LA134_1==LT))
				{
					int LA134_2 = input.LA(2);

					if ((LA134_2==LT))
					{
						int LA134_3 = input.LA(3);

						if ((LA134_3==BANG||LA134_3==BOOLEAN||LA134_3==BYTE||LA134_3==BooleanLiteral||LA134_3==CHAR||LA134_3==CharacterLiteral||LA134_3==DOUBLE||LA134_3==FLOAT||LA134_3==FloatingPointLiteral||LA134_3==IDENTIFIER||LA134_3==INT||LA134_3==IntegerLiteral||(LA134_3>=LONG && LA134_3<=LPAREN)||LA134_3==NEW||LA134_3==NullLiteral||LA134_3==PLUS||LA134_3==PLUSPLUS||LA134_3==SHORT||LA134_3==SUB||(LA134_3>=SUBSUB && LA134_3<=SUPER)||LA134_3==StringLiteral||LA134_3==THIS||LA134_3==TILDE||LA134_3==VOID))
						{
							alt134 = 1;
						}


					}


				}
				else if ((LA134_1==GT))
				{
					int LA134_2 = input.LA(2);

					if ((LA134_2==GT))
					{
						int LA134_3 = input.LA(3);

						if ((LA134_3==GT))
						{
							int LA134_4 = input.LA(4);

							if ((LA134_4==BANG||LA134_4==BOOLEAN||LA134_4==BYTE||LA134_4==BooleanLiteral||LA134_4==CHAR||LA134_4==CharacterLiteral||LA134_4==DOUBLE||LA134_4==FLOAT||LA134_4==FloatingPointLiteral||LA134_4==IDENTIFIER||LA134_4==INT||LA134_4==IntegerLiteral||(LA134_4>=LONG && LA134_4<=LPAREN)||LA134_4==NEW||LA134_4==NullLiteral||LA134_4==PLUS||LA134_4==PLUSPLUS||LA134_4==SHORT||LA134_4==SUB||(LA134_4>=SUBSUB && LA134_4<=SUPER)||LA134_4==StringLiteral||LA134_4==THIS||LA134_4==TILDE||LA134_4==VOID))
							{
								alt134 = 1;
							}


						}
						else if ((LA134_3==BANG||LA134_3==BOOLEAN||LA134_3==BYTE||LA134_3==BooleanLiteral||LA134_3==CHAR||LA134_3==CharacterLiteral||LA134_3==DOUBLE||LA134_3==FLOAT||LA134_3==FloatingPointLiteral||LA134_3==IDENTIFIER||LA134_3==INT||LA134_3==IntegerLiteral||(LA134_3>=LONG && LA134_3<=LPAREN)||LA134_3==NEW||LA134_3==NullLiteral||LA134_3==PLUS||LA134_3==PLUSPLUS||LA134_3==SHORT||LA134_3==SUB||(LA134_3>=SUBSUB && LA134_3<=SUPER)||LA134_3==StringLiteral||LA134_3==THIS||LA134_3==TILDE||LA134_3==VOID))
						{
							alt134 = 1;
						}


					}


				}


				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1064:10: shiftOp additiveExpression
					{
					DebugLocation(1064, 10);
					PushFollow(Follow._shiftOp_in_shiftExpression6211);
					shiftOp472=shiftOp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftOp472.Tree);
					DebugLocation(1064, 18);
					PushFollow(Follow._additiveExpression_in_shiftExpression6213);
					additiveExpression473=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression473.Tree);

					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 88);
			LeaveRule("shiftExpression", 88);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 88, shiftExpression_StartIndex); }

		}
		DebugLocation(1066, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_shiftOp();
	partial void LeaveRule_shiftOp();
	// $ANTLR start "shiftOp"
	// Java.g:1068:1: shiftOp : ( '<' '<' | '>' '>' '>' | '>' '>' );
	[GrammarRule("shiftOp")]
	private AstParserRuleReturnScope<object, IToken> shiftOp()
	{
		EnterRule_shiftOp();
		EnterRule("shiftOp", 89);
		TraceIn("shiftOp", 89);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shiftOp_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal474 = default(IToken);
		IToken char_literal475 = default(IToken);
		IToken char_literal476 = default(IToken);
		IToken char_literal477 = default(IToken);
		IToken char_literal478 = default(IToken);
		IToken char_literal479 = default(IToken);
		IToken char_literal480 = default(IToken);

		object char_literal474_tree = default(object);
		object char_literal475_tree = default(object);
		object char_literal476_tree = default(object);
		object char_literal477_tree = default(object);
		object char_literal478_tree = default(object);
		object char_literal479_tree = default(object);
		object char_literal480_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shiftOp");
		DebugLocation(1068, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// Java.g:1069:5: ( '<' '<' | '>' '>' '>' | '>' '>' )
			int alt135=3;
			try { DebugEnterDecision(135, false);
			int LA135_1 = input.LA(1);

			if ((LA135_1==LT))
			{
				alt135 = 1;
			}
			else if ((LA135_1==GT))
			{
				int LA135_2 = input.LA(2);

				if ((LA135_2==GT))
				{
					int LA135_3 = input.LA(3);

					if ((LA135_3==GT))
					{
						alt135 = 2;
					}
					else if ((LA135_3==BANG||LA135_3==BOOLEAN||LA135_3==BYTE||LA135_3==BooleanLiteral||LA135_3==CHAR||LA135_3==CharacterLiteral||LA135_3==DOUBLE||LA135_3==FLOAT||LA135_3==FloatingPointLiteral||LA135_3==IDENTIFIER||LA135_3==INT||LA135_3==IntegerLiteral||(LA135_3>=LONG && LA135_3<=LPAREN)||LA135_3==NEW||LA135_3==NullLiteral||LA135_3==PLUS||LA135_3==PLUSPLUS||LA135_3==SHORT||LA135_3==SUB||(LA135_3>=SUBSUB && LA135_3<=SUPER)||LA135_3==StringLiteral||LA135_3==THIS||LA135_3==TILDE||LA135_3==VOID))
					{
						alt135 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 135, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 135, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 135, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1069:10: '<' '<'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1069, 10);
				char_literal474=(IToken)Match(input,LT,Follow._LT_in_shiftOp6244); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal474_tree = (object)adaptor.Create(char_literal474);
				adaptor.AddChild(root_0, char_literal474_tree);
				}
				DebugLocation(1069, 14);
				char_literal475=(IToken)Match(input,LT,Follow._LT_in_shiftOp6246); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal475_tree = (object)adaptor.Create(char_literal475);
				adaptor.AddChild(root_0, char_literal475_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1070:10: '>' '>' '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1070, 10);
				char_literal476=(IToken)Match(input,GT,Follow._GT_in_shiftOp6257); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal476_tree = (object)adaptor.Create(char_literal476);
				adaptor.AddChild(root_0, char_literal476_tree);
				}
				DebugLocation(1070, 14);
				char_literal477=(IToken)Match(input,GT,Follow._GT_in_shiftOp6259); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal477_tree = (object)adaptor.Create(char_literal477);
				adaptor.AddChild(root_0, char_literal477_tree);
				}
				DebugLocation(1070, 18);
				char_literal478=(IToken)Match(input,GT,Follow._GT_in_shiftOp6261); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal478_tree = (object)adaptor.Create(char_literal478);
				adaptor.AddChild(root_0, char_literal478_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1071:10: '>' '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1071, 10);
				char_literal479=(IToken)Match(input,GT,Follow._GT_in_shiftOp6272); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal479_tree = (object)adaptor.Create(char_literal479);
				adaptor.AddChild(root_0, char_literal479_tree);
				}
				DebugLocation(1071, 14);
				char_literal480=(IToken)Match(input,GT,Follow._GT_in_shiftOp6274); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal480_tree = (object)adaptor.Create(char_literal480);
				adaptor.AddChild(root_0, char_literal480_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftOp", 89);
			LeaveRule("shiftOp", 89);
			LeaveRule_shiftOp();
			if (state.backtracking > 0) { Memoize(input, 89, shiftOp_StartIndex); }

		}
		DebugLocation(1072, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftOp"); }
		return retval;

	}
	// $ANTLR end "shiftOp"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// Java.g:1074:1: additiveExpression : multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<object, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 90);
		TraceIn("additiveExpression", 90);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int additiveExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set482 = default(IToken);
		AstParserRuleReturnScope<object, IToken> multiplicativeExpression481 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> multiplicativeExpression483 = default(AstParserRuleReturnScope<object, IToken>);

		object set482_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(1074, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// Java.g:1075:5: ( multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// Java.g:1075:9: multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1075, 9);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression6293);
			multiplicativeExpression481=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression481.Tree);
			DebugLocation(1076, 9);
			// Java.g:1076:9: ( ( '+' | '-' ) multiplicativeExpression )*
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_1 = input.LA(1);

				if ((LA136_1==PLUS||LA136_1==SUB))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch ( alt136 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1077:13: ( '+' | '-' ) multiplicativeExpression
					{
					DebugLocation(1077, 13);

					set482=(IToken)input.LT(1);
					if (input.LA(1)==PLUS||input.LA(1)==SUB)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set482));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1080, 13);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression6370);
					multiplicativeExpression483=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression483.Tree);

					}
					break;

				default:
					goto loop136;
				}
			}

			loop136:
				;

			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 90);
			LeaveRule("additiveExpression", 90);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 90, additiveExpression_StartIndex); }

		}
		DebugLocation(1082, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// Java.g:1084:1: multiplicativeExpression : unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<object, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 91);
		TraceIn("multiplicativeExpression", 91);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int multiplicativeExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set485 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unaryExpression484 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression486 = default(AstParserRuleReturnScope<object, IToken>);

		object set485_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(1084, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// Java.g:1085:5: ( unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* )
			DebugEnterAlt(1);
			// Java.g:1086:9: unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1086, 9);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression6407);
			unaryExpression484=unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression484.Tree);
			DebugLocation(1087, 9);
			// Java.g:1087:9: ( ( '*' | '/' | '%' ) unaryExpression )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				int LA137_1 = input.LA(1);

				if ((LA137_1==PERCENT||LA137_1==SLASH||LA137_1==STAR))
				{
					alt137 = 1;
				}


				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1088:13: ( '*' | '/' | '%' ) unaryExpression
					{
					DebugLocation(1088, 13);

					set485=(IToken)input.LT(1);
					if (input.LA(1)==PERCENT||input.LA(1)==SLASH||input.LA(1)==STAR)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set485));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1092, 13);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression6502);
					unaryExpression486=unaryExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression486.Tree);

					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 91);
			LeaveRule("multiplicativeExpression", 91);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 91, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(1094, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// Java.g:1100:1: unaryExpression : ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<object, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 92);
		TraceIn("unaryExpression", 92);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal487 = default(IToken);
		IToken char_literal489 = default(IToken);
		IToken string_literal491 = default(IToken);
		IToken string_literal493 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unaryExpression488 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression490 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression492 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression494 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpressionNotPlusMinus495 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal487_tree = default(object);
		object char_literal489_tree = default(object);
		object string_literal491_tree = default(object);
		object string_literal493_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(1100, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// Java.g:1101:5: ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus )
			int alt138=5;
			try { DebugEnterDecision(138, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt138 = 1;
				}
				break;
			case SUB:
				{
				alt138 = 2;
				}
				break;
			case PLUSPLUS:
				{
				alt138 = 3;
				}
				break;
			case SUBSUB:
				{
				alt138 = 4;
				}
				break;
			case BANG:
			case BOOLEAN:
			case BYTE:
			case BooleanLiteral:
			case CHAR:
			case CharacterLiteral:
			case DOUBLE:
			case FLOAT:
			case FloatingPointLiteral:
			case IDENTIFIER:
			case INT:
			case IntegerLiteral:
			case LONG:
			case LPAREN:
			case NEW:
			case NullLiteral:
			case SHORT:
			case SUPER:
			case StringLiteral:
			case THIS:
			case TILDE:
			case VOID:
				{
				alt138 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 138, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1101:9: '+' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1101, 9);
				char_literal487=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression6534); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal487_tree = (object)adaptor.Create(char_literal487);
				adaptor.AddChild(root_0, char_literal487_tree);
				}
				DebugLocation(1101, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6537);
				unaryExpression488=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression488.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1102:9: '-' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1102, 9);
				char_literal489=(IToken)Match(input,SUB,Follow._SUB_in_unaryExpression6547); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal489_tree = (object)adaptor.Create(char_literal489);
				adaptor.AddChild(root_0, char_literal489_tree);
				}
				DebugLocation(1102, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpression6549);
				unaryExpression490=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression490.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1103:9: '++' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1103, 9);
				string_literal491=(IToken)Match(input,PLUSPLUS,Follow._PLUSPLUS_in_unaryExpression6559); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal491_tree = (object)adaptor.Create(string_literal491);
				adaptor.AddChild(root_0, string_literal491_tree);
				}
				DebugLocation(1103, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6561);
				unaryExpression492=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression492.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1104:9: '--' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1104, 9);
				string_literal493=(IToken)Match(input,SUBSUB,Follow._SUBSUB_in_unaryExpression6571); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal493_tree = (object)adaptor.Create(string_literal493);
				adaptor.AddChild(root_0, string_literal493_tree);
				}
				DebugLocation(1104, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6573);
				unaryExpression494=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression494.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1105:9: unaryExpressionNotPlusMinus
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1105, 9);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_unaryExpression6583);
				unaryExpressionNotPlusMinus495=unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus495.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 92);
			LeaveRule("unaryExpression", 92);
			LeaveRule_unaryExpression();
			if (state.backtracking > 0) { Memoize(input, 92, unaryExpression_StartIndex); }

		}
		DebugLocation(1106, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_unaryExpressionNotPlusMinus();
	partial void LeaveRule_unaryExpressionNotPlusMinus();
	// $ANTLR start "unaryExpressionNotPlusMinus"
	// Java.g:1108:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );
	[GrammarRule("unaryExpressionNotPlusMinus")]
	private AstParserRuleReturnScope<object, IToken> unaryExpressionNotPlusMinus()
	{
		EnterRule_unaryExpressionNotPlusMinus();
		EnterRule("unaryExpressionNotPlusMinus", 93);
		TraceIn("unaryExpressionNotPlusMinus", 93);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpressionNotPlusMinus_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal496 = default(IToken);
		IToken char_literal498 = default(IToken);
		IToken set503 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unaryExpression497 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression499 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> castExpression500 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primary501 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> selector502 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal496_tree = default(object);
		object char_literal498_tree = default(object);
		object set503_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unaryExpressionNotPlusMinus");
		DebugLocation(1108, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// Java.g:1109:5: ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? )
			int alt141=4;
			try { DebugEnterDecision(141, false);
			switch (input.LA(1))
			{
			case TILDE:
				{
				alt141 = 1;
				}
				break;
			case BANG:
				{
				alt141 = 2;
				}
				break;
			case LPAREN:
				{
				int LA141_2 = input.LA(2);

				if ((EvaluatePredicate(synpred213_Java_fragment)))
				{
					alt141 = 3;
				}
				else if ((true))
				{
					alt141 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 141, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case BooleanLiteral:
			case CHAR:
			case CharacterLiteral:
			case DOUBLE:
			case FLOAT:
			case FloatingPointLiteral:
			case IDENTIFIER:
			case INT:
			case IntegerLiteral:
			case LONG:
			case NEW:
			case NullLiteral:
			case SHORT:
			case SUPER:
			case StringLiteral:
			case THIS:
			case VOID:
				{
				alt141 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 141, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(141); }
			switch (alt141)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1109:9: '~' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1109, 9);
				char_literal496=(IToken)Match(input,TILDE,Follow._TILDE_in_unaryExpressionNotPlusMinus6602); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal496_tree = (object)adaptor.Create(char_literal496);
				adaptor.AddChild(root_0, char_literal496_tree);
				}
				DebugLocation(1109, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus6604);
				unaryExpression497=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression497.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1110:9: '!' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1110, 9);
				char_literal498=(IToken)Match(input,BANG,Follow._BANG_in_unaryExpressionNotPlusMinus6614); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal498_tree = (object)adaptor.Create(char_literal498);
				adaptor.AddChild(root_0, char_literal498_tree);
				}
				DebugLocation(1110, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus6616);
				unaryExpression499=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression499.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1111:9: castExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1111, 9);
				PushFollow(Follow._castExpression_in_unaryExpressionNotPlusMinus6626);
				castExpression500=castExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, castExpression500.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1112:9: primary ( selector )* ( '++' | '--' )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1112, 9);
				PushFollow(Follow._primary_in_unaryExpressionNotPlusMinus6636);
				primary501=primary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary501.Tree);
				DebugLocation(1113, 9);
				// Java.g:1113:9: ( selector )*
				try { DebugEnterSubRule(139);
				while (true)
				{
					int alt139=2;
					try { DebugEnterDecision(139, false);
					int LA139_1 = input.LA(1);

					if ((LA139_1==DOT||LA139_1==LBRACKET))
					{
						alt139 = 1;
					}


					} finally { DebugExitDecision(139); }
					switch ( alt139 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1113:10: selector
						{
						DebugLocation(1113, 10);
						PushFollow(Follow._selector_in_unaryExpressionNotPlusMinus6647);
						selector502=selector();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, selector502.Tree);

						}
						break;

					default:
						goto loop139;
					}
				}

				loop139:
					;

				} finally { DebugExitSubRule(139); }

				DebugLocation(1115, 9);
				// Java.g:1115:9: ( '++' | '--' )?
				int alt140=2;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, false);
				int LA140_1 = input.LA(1);

				if ((LA140_1==PLUSPLUS||LA140_1==SUBSUB))
				{
					alt140 = 1;
				}
				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:
					{
					DebugLocation(1115, 9);

					set503=(IToken)input.LT(1);
					if (input.LA(1)==PLUSPLUS||input.LA(1)==SUBSUB)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set503));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(140); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpressionNotPlusMinus", 93);
			LeaveRule("unaryExpressionNotPlusMinus", 93);
			LeaveRule_unaryExpressionNotPlusMinus();
			if (state.backtracking > 0) { Memoize(input, 93, unaryExpressionNotPlusMinus_StartIndex); }

		}
		DebugLocation(1118, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionNotPlusMinus"); }
		return retval;

	}
	// $ANTLR end "unaryExpressionNotPlusMinus"

	partial void EnterRule_castExpression();
	partial void LeaveRule_castExpression();
	// $ANTLR start "castExpression"
	// Java.g:1120:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus );
	[GrammarRule("castExpression")]
	private AstParserRuleReturnScope<object, IToken> castExpression()
	{
		EnterRule_castExpression();
		EnterRule("castExpression", 94);
		TraceIn("castExpression", 94);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int castExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal504 = default(IToken);
		IToken char_literal506 = default(IToken);
		IToken char_literal508 = default(IToken);
		IToken char_literal510 = default(IToken);
		AstParserRuleReturnScope<object, IToken> primitiveType505 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression507 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type509 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpressionNotPlusMinus511 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal504_tree = default(object);
		object char_literal506_tree = default(object);
		object char_literal508_tree = default(object);
		object char_literal510_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "castExpression");
		DebugLocation(1120, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// Java.g:1121:5: ( '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus )
			int alt142=2;
			try { DebugEnterDecision(142, false);
			int LA142_1 = input.LA(1);

			if ((LA142_1==LPAREN))
			{
				int LA142_2 = input.LA(2);

				if ((EvaluatePredicate(synpred217_Java_fragment)))
				{
					alt142 = 1;
				}
				else if ((true))
				{
					alt142 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 142, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 142, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1121:9: '(' primitiveType ')' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1121, 9);
				char_literal504=(IToken)Match(input,LPAREN,Follow._LPAREN_in_castExpression6716); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal504_tree = (object)adaptor.Create(char_literal504);
				adaptor.AddChild(root_0, char_literal504_tree);
				}
				DebugLocation(1121, 13);
				PushFollow(Follow._primitiveType_in_castExpression6718);
				primitiveType505=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType505.Tree);
				DebugLocation(1121, 27);
				char_literal506=(IToken)Match(input,RPAREN,Follow._RPAREN_in_castExpression6720); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal506_tree = (object)adaptor.Create(char_literal506);
				adaptor.AddChild(root_0, char_literal506_tree);
				}
				DebugLocation(1121, 31);
				PushFollow(Follow._unaryExpression_in_castExpression6722);
				unaryExpression507=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression507.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1122:9: '(' type ')' unaryExpressionNotPlusMinus
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1122, 9);
				char_literal508=(IToken)Match(input,LPAREN,Follow._LPAREN_in_castExpression6732); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal508_tree = (object)adaptor.Create(char_literal508);
				adaptor.AddChild(root_0, char_literal508_tree);
				}
				DebugLocation(1122, 13);
				PushFollow(Follow._type_in_castExpression6734);
				type509=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type509.Tree);
				DebugLocation(1122, 18);
				char_literal510=(IToken)Match(input,RPAREN,Follow._RPAREN_in_castExpression6736); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal510_tree = (object)adaptor.Create(char_literal510);
				adaptor.AddChild(root_0, char_literal510_tree);
				}
				DebugLocation(1122, 22);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_castExpression6738);
				unaryExpressionNotPlusMinus511=unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus511.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("castExpression", 94);
			LeaveRule("castExpression", 94);
			LeaveRule_castExpression();
			if (state.backtracking > 0) { Memoize(input, 94, castExpression_StartIndex); }

		}
		DebugLocation(1123, 4);
		} finally { DebugExitRule(GrammarFileName, "castExpression"); }
		return retval;

	}
	// $ANTLR end "castExpression"

	partial void EnterRule_primary();
	partial void LeaveRule_primary();
	// $ANTLR start "primary"
	// Java.g:1128:1: primary : ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );
	[GrammarRule("primary")]
	private AstParserRuleReturnScope<object, IToken> primary()
	{
		EnterRule_primary();
		EnterRule("primary", 95);
		TraceIn("primary", 95);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primary_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal513 = default(IToken);
		IToken char_literal514 = default(IToken);
		IToken IDENTIFIER515 = default(IToken);
		IToken IDENTIFIER517 = default(IToken);
		IToken char_literal518 = default(IToken);
		IToken IDENTIFIER519 = default(IToken);
		IToken string_literal521 = default(IToken);
		IToken char_literal526 = default(IToken);
		IToken char_literal527 = default(IToken);
		IToken char_literal528 = default(IToken);
		IToken string_literal529 = default(IToken);
		IToken string_literal530 = default(IToken);
		IToken char_literal531 = default(IToken);
		IToken string_literal532 = default(IToken);
		AstParserRuleReturnScope<object, IToken> parExpression512 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> identifierSuffix516 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> identifierSuffix520 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> superSuffix522 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> literal523 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> creator524 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primitiveType525 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal513_tree = default(object);
		object char_literal514_tree = default(object);
		object IDENTIFIER515_tree = default(object);
		object IDENTIFIER517_tree = default(object);
		object char_literal518_tree = default(object);
		object IDENTIFIER519_tree = default(object);
		object string_literal521_tree = default(object);
		object char_literal526_tree = default(object);
		object char_literal527_tree = default(object);
		object char_literal528_tree = default(object);
		object string_literal529_tree = default(object);
		object string_literal530_tree = default(object);
		object char_literal531_tree = default(object);
		object string_literal532_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary");
		DebugLocation(1128, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// Java.g:1129:5: ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' )
			int alt148=8;
			try { DebugEnterDecision(148, false);
			switch (input.LA(1))
			{
			case LPAREN:
				{
				alt148 = 1;
				}
				break;
			case THIS:
				{
				alt148 = 2;
				}
				break;
			case IDENTIFIER:
				{
				alt148 = 3;
				}
				break;
			case SUPER:
				{
				alt148 = 4;
				}
				break;
			case BooleanLiteral:
			case CharacterLiteral:
			case FloatingPointLiteral:
			case IntegerLiteral:
			case NullLiteral:
			case StringLiteral:
				{
				alt148 = 5;
				}
				break;
			case NEW:
				{
				alt148 = 6;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt148 = 7;
				}
				break;
			case VOID:
				{
				alt148 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 148, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1129:9: parExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1129, 9);
				PushFollow(Follow._parExpression_in_primary6759);
				parExpression512=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression512.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1130:9: 'this' ( '.' IDENTIFIER )* ( identifierSuffix )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1130, 9);
				string_literal513=(IToken)Match(input,THIS,Follow._THIS_in_primary6781); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal513_tree = (object)adaptor.Create(string_literal513);
				adaptor.AddChild(root_0, string_literal513_tree);
				}
				DebugLocation(1131, 9);
				// Java.g:1131:9: ( '.' IDENTIFIER )*
				try { DebugEnterSubRule(143);
				while (true)
				{
					int alt143=2;
					try { DebugEnterDecision(143, false);
					int LA143_1 = input.LA(1);

					if ((LA143_1==DOT))
					{
						int LA143_2 = input.LA(2);

						if ((LA143_2==IDENTIFIER))
						{
							int LA143_3 = input.LA(3);

							if ((EvaluatePredicate(synpred219_Java_fragment)))
							{
								alt143 = 1;
							}


						}


					}


					} finally { DebugExitDecision(143); }
					switch ( alt143 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1131:10: '.' IDENTIFIER
						{
						DebugLocation(1131, 10);
						char_literal514=(IToken)Match(input,DOT,Follow._DOT_in_primary6792); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal514_tree = (object)adaptor.Create(char_literal514);
						adaptor.AddChild(root_0, char_literal514_tree);
						}
						DebugLocation(1131, 14);
						IDENTIFIER515=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6794); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER515_tree = (object)adaptor.Create(IDENTIFIER515);
						adaptor.AddChild(root_0, IDENTIFIER515_tree);
						}

						}
						break;

					default:
						goto loop143;
					}
				}

				loop143:
					;

				} finally { DebugExitSubRule(143); }

				DebugLocation(1133, 9);
				// Java.g:1133:9: ( identifierSuffix )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, false);
				switch (input.LA(1))
				{
				case LBRACKET:
					{
					int LA144_2 = input.LA(2);

					if ((EvaluatePredicate(synpred220_Java_fragment)))
					{
						alt144 = 1;
					}
					}
					break;
				case LPAREN:
					{
					alt144 = 1;
					}
					break;
				case DOT:
					{
					int LA144_2 = input.LA(2);

					if ((EvaluatePredicate(synpred220_Java_fragment)))
					{
						alt144 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1133:10: identifierSuffix
					{
					DebugLocation(1133, 10);
					PushFollow(Follow._identifierSuffix_in_primary6816);
					identifierSuffix516=identifierSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifierSuffix516.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(144); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1135:9: IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1135, 9);
				IDENTIFIER517=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6837); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER517_tree = (object)adaptor.Create(IDENTIFIER517);
				adaptor.AddChild(root_0, IDENTIFIER517_tree);
				}
				DebugLocation(1136, 9);
				// Java.g:1136:9: ( '.' IDENTIFIER )*
				try { DebugEnterSubRule(145);
				while (true)
				{
					int alt145=2;
					try { DebugEnterDecision(145, false);
					int LA145_1 = input.LA(1);

					if ((LA145_1==DOT))
					{
						int LA145_2 = input.LA(2);

						if ((LA145_2==IDENTIFIER))
						{
							int LA145_3 = input.LA(3);

							if ((EvaluatePredicate(synpred222_Java_fragment)))
							{
								alt145 = 1;
							}


						}


					}


					} finally { DebugExitDecision(145); }
					switch ( alt145 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1136:10: '.' IDENTIFIER
						{
						DebugLocation(1136, 10);
						char_literal518=(IToken)Match(input,DOT,Follow._DOT_in_primary6848); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal518_tree = (object)adaptor.Create(char_literal518);
						adaptor.AddChild(root_0, char_literal518_tree);
						}
						DebugLocation(1136, 14);
						IDENTIFIER519=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6850); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER519_tree = (object)adaptor.Create(IDENTIFIER519);
						adaptor.AddChild(root_0, IDENTIFIER519_tree);
						}

						}
						break;

					default:
						goto loop145;
					}
				}

				loop145:
					;

				} finally { DebugExitSubRule(145); }

				DebugLocation(1138, 9);
				// Java.g:1138:9: ( identifierSuffix )?
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, false);
				switch (input.LA(1))
				{
				case LBRACKET:
					{
					int LA146_2 = input.LA(2);

					if ((EvaluatePredicate(synpred223_Java_fragment)))
					{
						alt146 = 1;
					}
					}
					break;
				case LPAREN:
					{
					alt146 = 1;
					}
					break;
				case DOT:
					{
					int LA146_2 = input.LA(2);

					if ((EvaluatePredicate(synpred223_Java_fragment)))
					{
						alt146 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1138:10: identifierSuffix
					{
					DebugLocation(1138, 10);
					PushFollow(Follow._identifierSuffix_in_primary6872);
					identifierSuffix520=identifierSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifierSuffix520.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(146); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1140:9: 'super' superSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1140, 9);
				string_literal521=(IToken)Match(input,SUPER,Follow._SUPER_in_primary6893); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal521_tree = (object)adaptor.Create(string_literal521);
				adaptor.AddChild(root_0, string_literal521_tree);
				}
				DebugLocation(1141, 9);
				PushFollow(Follow._superSuffix_in_primary6903);
				superSuffix522=superSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, superSuffix522.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1142:9: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1142, 9);
				PushFollow(Follow._literal_in_primary6913);
				literal523=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal523.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1143:9: creator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1143, 9);
				PushFollow(Follow._creator_in_primary6923);
				creator524=creator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, creator524.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1144:9: primitiveType ( '[' ']' )* '.' 'class'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1144, 9);
				PushFollow(Follow._primitiveType_in_primary6933);
				primitiveType525=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType525.Tree);
				DebugLocation(1145, 9);
				// Java.g:1145:9: ( '[' ']' )*
				try { DebugEnterSubRule(147);
				while (true)
				{
					int alt147=2;
					try { DebugEnterDecision(147, false);
					int LA147_1 = input.LA(1);

					if ((LA147_1==LBRACKET))
					{
						alt147 = 1;
					}


					} finally { DebugExitDecision(147); }
					switch ( alt147 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1145:10: '[' ']'
						{
						DebugLocation(1145, 10);
						char_literal526=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_primary6944); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal526_tree = (object)adaptor.Create(char_literal526);
						adaptor.AddChild(root_0, char_literal526_tree);
						}
						DebugLocation(1145, 14);
						char_literal527=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_primary6946); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal527_tree = (object)adaptor.Create(char_literal527);
						adaptor.AddChild(root_0, char_literal527_tree);
						}

						}
						break;

					default:
						goto loop147;
					}
				}

				loop147:
					;

				} finally { DebugExitSubRule(147); }

				DebugLocation(1147, 9);
				char_literal528=(IToken)Match(input,DOT,Follow._DOT_in_primary6967); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal528_tree = (object)adaptor.Create(char_literal528);
				adaptor.AddChild(root_0, char_literal528_tree);
				}
				DebugLocation(1147, 13);
				string_literal529=(IToken)Match(input,CLASS,Follow._CLASS_in_primary6969); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal529_tree = (object)adaptor.Create(string_literal529);
				adaptor.AddChild(root_0, string_literal529_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1148:9: 'void' '.' 'class'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1148, 9);
				string_literal530=(IToken)Match(input,VOID,Follow._VOID_in_primary6979); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal530_tree = (object)adaptor.Create(string_literal530);
				adaptor.AddChild(root_0, string_literal530_tree);
				}
				DebugLocation(1148, 16);
				char_literal531=(IToken)Match(input,DOT,Follow._DOT_in_primary6981); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal531_tree = (object)adaptor.Create(char_literal531);
				adaptor.AddChild(root_0, char_literal531_tree);
				}
				DebugLocation(1148, 20);
				string_literal532=(IToken)Match(input,CLASS,Follow._CLASS_in_primary6983); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal532_tree = (object)adaptor.Create(string_literal532);
				adaptor.AddChild(root_0, string_literal532_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary", 95);
			LeaveRule("primary", 95);
			LeaveRule_primary();
			if (state.backtracking > 0) { Memoize(input, 95, primary_StartIndex); }

		}
		DebugLocation(1149, 4);
		} finally { DebugExitRule(GrammarFileName, "primary"); }
		return retval;

	}
	// $ANTLR end "primary"

	partial void EnterRule_superSuffix();
	partial void LeaveRule_superSuffix();
	// $ANTLR start "superSuffix"
	// Java.g:1151:1: superSuffix : ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? );
	[GrammarRule("superSuffix")]
	private AstParserRuleReturnScope<object, IToken> superSuffix()
	{
		EnterRule_superSuffix();
		EnterRule("superSuffix", 96);
		TraceIn("superSuffix", 96);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int superSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal534 = default(IToken);
		IToken IDENTIFIER536 = default(IToken);
		AstParserRuleReturnScope<object, IToken> arguments533 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeArguments535 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments537 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal534_tree = default(object);
		object IDENTIFIER536_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "superSuffix");
		DebugLocation(1151, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// Java.g:1152:5: ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? )
			int alt151=2;
			try { DebugEnterDecision(151, false);
			int LA151_1 = input.LA(1);

			if ((LA151_1==LPAREN))
			{
				alt151 = 1;
			}
			else if ((LA151_1==DOT))
			{
				alt151 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 151, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1152:9: arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1152, 9);
				PushFollow(Follow._arguments_in_superSuffix7002);
				arguments533=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments533.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1153:9: '.' ( typeArguments )? IDENTIFIER ( arguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1153, 9);
				char_literal534=(IToken)Match(input,DOT,Follow._DOT_in_superSuffix7012); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal534_tree = (object)adaptor.Create(char_literal534);
				adaptor.AddChild(root_0, char_literal534_tree);
				}
				DebugLocation(1153, 13);
				// Java.g:1153:13: ( typeArguments )?
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, false);
				int LA149_1 = input.LA(1);

				if ((LA149_1==LT))
				{
					alt149 = 1;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1153:14: typeArguments
					{
					DebugLocation(1153, 14);
					PushFollow(Follow._typeArguments_in_superSuffix7015);
					typeArguments535=typeArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments535.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(149); }

				DebugLocation(1155, 9);
				IDENTIFIER536=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_superSuffix7036); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER536_tree = (object)adaptor.Create(IDENTIFIER536);
				adaptor.AddChild(root_0, IDENTIFIER536_tree);
				}
				DebugLocation(1156, 9);
				// Java.g:1156:9: ( arguments )?
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, false);
				int LA150_1 = input.LA(1);

				if ((LA150_1==LPAREN))
				{
					alt150 = 1;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1156:10: arguments
					{
					DebugLocation(1156, 10);
					PushFollow(Follow._arguments_in_superSuffix7047);
					arguments537=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments537.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(150); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("superSuffix", 96);
			LeaveRule("superSuffix", 96);
			LeaveRule_superSuffix();
			if (state.backtracking > 0) { Memoize(input, 96, superSuffix_StartIndex); }

		}
		DebugLocation(1158, 4);
		} finally { DebugExitRule(GrammarFileName, "superSuffix"); }
		return retval;

	}
	// $ANTLR end "superSuffix"

	partial void EnterRule_identifierSuffix();
	partial void LeaveRule_identifierSuffix();
	// $ANTLR start "identifierSuffix"
	// Java.g:1160:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator );
	[GrammarRule("identifierSuffix")]
	private AstParserRuleReturnScope<object, IToken> identifierSuffix()
	{
		EnterRule_identifierSuffix();
		EnterRule("identifierSuffix", 97);
		TraceIn("identifierSuffix", 97);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int identifierSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal538 = default(IToken);
		IToken char_literal539 = default(IToken);
		IToken char_literal540 = default(IToken);
		IToken string_literal541 = default(IToken);
		IToken char_literal542 = default(IToken);
		IToken char_literal544 = default(IToken);
		IToken char_literal546 = default(IToken);
		IToken string_literal547 = default(IToken);
		IToken char_literal548 = default(IToken);
		IToken IDENTIFIER550 = default(IToken);
		IToken char_literal552 = default(IToken);
		IToken string_literal553 = default(IToken);
		IToken char_literal554 = default(IToken);
		IToken string_literal555 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression543 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments545 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments549 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments551 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments556 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> innerCreator557 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal538_tree = default(object);
		object char_literal539_tree = default(object);
		object char_literal540_tree = default(object);
		object string_literal541_tree = default(object);
		object char_literal542_tree = default(object);
		object char_literal544_tree = default(object);
		object char_literal546_tree = default(object);
		object string_literal547_tree = default(object);
		object char_literal548_tree = default(object);
		object IDENTIFIER550_tree = default(object);
		object char_literal552_tree = default(object);
		object string_literal553_tree = default(object);
		object char_literal554_tree = default(object);
		object string_literal555_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifierSuffix");
		DebugLocation(1160, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }

			// Java.g:1161:5: ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator )
			int alt154=8;
			try { DebugEnterDecision(154, false);
			switch (input.LA(1))
			{
			case LBRACKET:
				{
				int LA154_2 = input.LA(2);

				if ((LA154_2==RBRACKET))
				{
					alt154 = 1;
				}
				else if ((LA154_2==BANG||LA154_2==BOOLEAN||LA154_2==BYTE||LA154_2==BooleanLiteral||LA154_2==CHAR||LA154_2==CharacterLiteral||LA154_2==DOUBLE||LA154_2==FLOAT||LA154_2==FloatingPointLiteral||LA154_2==IDENTIFIER||LA154_2==INT||LA154_2==IntegerLiteral||(LA154_2>=LONG && LA154_2<=LPAREN)||LA154_2==NEW||LA154_2==NullLiteral||LA154_2==PLUS||LA154_2==PLUSPLUS||LA154_2==SHORT||LA154_2==SUB||(LA154_2>=SUBSUB && LA154_2<=SUPER)||LA154_2==StringLiteral||LA154_2==THIS||LA154_2==TILDE||LA154_2==VOID))
				{
					alt154 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 154, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LPAREN:
				{
				alt154 = 3;
				}
				break;
			case DOT:
				{
				switch (input.LA(2))
				{
				case CLASS:
					{
					alt154 = 4;
					}
					break;
				case THIS:
					{
					alt154 = 6;
					}
					break;
				case SUPER:
					{
					alt154 = 7;
					}
					break;
				case NEW:
					{
					alt154 = 8;
					}
					break;
				case LT:
					{
					alt154 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 154, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 154, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1161:9: ( '[' ']' )+ '.' 'class'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1161, 9);
				// Java.g:1161:9: ( '[' ']' )+
				int cnt152=0;
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, false);
					int LA152_1 = input.LA(1);

					if ((LA152_1==LBRACKET))
					{
						alt152 = 1;
					}


					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1161:10: '[' ']'
						{
						DebugLocation(1161, 10);
						char_literal538=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_identifierSuffix7078); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal538_tree = (object)adaptor.Create(char_literal538);
						adaptor.AddChild(root_0, char_literal538_tree);
						}
						DebugLocation(1161, 14);
						char_literal539=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_identifierSuffix7080); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal539_tree = (object)adaptor.Create(char_literal539);
						adaptor.AddChild(root_0, char_literal539_tree);
						}

						}
						break;

					default:
						if (cnt152 >= 1)
							goto loop152;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee152 = new EarlyExitException( 152, input );
						DebugRecognitionException(eee152);
						throw eee152;
					}
					cnt152++;
				}
				loop152:
					;

				} finally { DebugExitSubRule(152); }

				DebugLocation(1163, 9);
				char_literal540=(IToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7101); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal540_tree = (object)adaptor.Create(char_literal540);
				adaptor.AddChild(root_0, char_literal540_tree);
				}
				DebugLocation(1163, 13);
				string_literal541=(IToken)Match(input,CLASS,Follow._CLASS_in_identifierSuffix7103); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal541_tree = (object)adaptor.Create(string_literal541);
				adaptor.AddChild(root_0, string_literal541_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1164:9: ( '[' expression ']' )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1164, 9);
				// Java.g:1164:9: ( '[' expression ']' )+
				int cnt153=0;
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, false);
					int LA153_1 = input.LA(1);

					if ((LA153_1==LBRACKET))
					{
						int LA153_2 = input.LA(2);

						if ((EvaluatePredicate(synpred235_Java_fragment)))
						{
							alt153 = 1;
						}


					}


					} finally { DebugExitDecision(153); }
					switch (alt153)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1164:10: '[' expression ']'
						{
						DebugLocation(1164, 10);
						char_literal542=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_identifierSuffix7114); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal542_tree = (object)adaptor.Create(char_literal542);
						adaptor.AddChild(root_0, char_literal542_tree);
						}
						DebugLocation(1164, 14);
						PushFollow(Follow._expression_in_identifierSuffix7116);
						expression543=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression543.Tree);
						DebugLocation(1164, 25);
						char_literal544=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_identifierSuffix7118); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal544_tree = (object)adaptor.Create(char_literal544);
						adaptor.AddChild(root_0, char_literal544_tree);
						}

						}
						break;

					default:
						if (cnt153 >= 1)
							goto loop153;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee153 = new EarlyExitException( 153, input );
						DebugRecognitionException(eee153);
						throw eee153;
					}
					cnt153++;
				}
				loop153:
					;

				} finally { DebugExitSubRule(153); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1166:9: arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1166, 9);
				PushFollow(Follow._arguments_in_identifierSuffix7139);
				arguments545=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments545.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1167:9: '.' 'class'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1167, 9);
				char_literal546=(IToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7149); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal546_tree = (object)adaptor.Create(char_literal546);
				adaptor.AddChild(root_0, char_literal546_tree);
				}
				DebugLocation(1167, 13);
				string_literal547=(IToken)Match(input,CLASS,Follow._CLASS_in_identifierSuffix7151); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal547_tree = (object)adaptor.Create(string_literal547);
				adaptor.AddChild(root_0, string_literal547_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1168:9: '.' nonWildcardTypeArguments IDENTIFIER arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1168, 9);
				char_literal548=(IToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7161); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal548_tree = (object)adaptor.Create(char_literal548);
				adaptor.AddChild(root_0, char_literal548_tree);
				}
				DebugLocation(1168, 13);
				PushFollow(Follow._nonWildcardTypeArguments_in_identifierSuffix7163);
				nonWildcardTypeArguments549=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments549.Tree);
				DebugLocation(1168, 38);
				IDENTIFIER550=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifierSuffix7165); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER550_tree = (object)adaptor.Create(IDENTIFIER550);
				adaptor.AddChild(root_0, IDENTIFIER550_tree);
				}
				DebugLocation(1168, 49);
				PushFollow(Follow._arguments_in_identifierSuffix7167);
				arguments551=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments551.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1169:9: '.' 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1169, 9);
				char_literal552=(IToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7177); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal552_tree = (object)adaptor.Create(char_literal552);
				adaptor.AddChild(root_0, char_literal552_tree);
				}
				DebugLocation(1169, 13);
				string_literal553=(IToken)Match(input,THIS,Follow._THIS_in_identifierSuffix7179); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal553_tree = (object)adaptor.Create(string_literal553);
				adaptor.AddChild(root_0, string_literal553_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1170:9: '.' 'super' arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1170, 9);
				char_literal554=(IToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7189); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal554_tree = (object)adaptor.Create(char_literal554);
				adaptor.AddChild(root_0, char_literal554_tree);
				}
				DebugLocation(1170, 13);
				string_literal555=(IToken)Match(input,SUPER,Follow._SUPER_in_identifierSuffix7191); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal555_tree = (object)adaptor.Create(string_literal555);
				adaptor.AddChild(root_0, string_literal555_tree);
				}
				DebugLocation(1170, 21);
				PushFollow(Follow._arguments_in_identifierSuffix7193);
				arguments556=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments556.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1171:9: innerCreator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1171, 9);
				PushFollow(Follow._innerCreator_in_identifierSuffix7203);
				innerCreator557=innerCreator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, innerCreator557.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifierSuffix", 97);
			LeaveRule("identifierSuffix", 97);
			LeaveRule_identifierSuffix();
			if (state.backtracking > 0) { Memoize(input, 97, identifierSuffix_StartIndex); }

		}
		DebugLocation(1172, 4);
		} finally { DebugExitRule(GrammarFileName, "identifierSuffix"); }
		return retval;

	}
	// $ANTLR end "identifierSuffix"

	partial void EnterRule_selector();
	partial void LeaveRule_selector();
	// $ANTLR start "selector"
	// Java.g:1174:1: selector : ( '.' IDENTIFIER ( arguments )? | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' );
	[GrammarRule("selector")]
	private AstParserRuleReturnScope<object, IToken> selector()
	{
		EnterRule_selector();
		EnterRule("selector", 98);
		TraceIn("selector", 98);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int selector_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal558 = default(IToken);
		IToken IDENTIFIER559 = default(IToken);
		IToken char_literal561 = default(IToken);
		IToken IDENTIFIER563 = default(IToken);
		IToken char_literal565 = default(IToken);
		IToken string_literal566 = default(IToken);
		IToken char_literal567 = default(IToken);
		IToken string_literal568 = default(IToken);
		IToken char_literal571 = default(IToken);
		IToken char_literal573 = default(IToken);
		AstParserRuleReturnScope<object, IToken> arguments560 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments562 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments564 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> superSuffix569 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> innerCreator570 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression572 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal558_tree = default(object);
		object IDENTIFIER559_tree = default(object);
		object char_literal561_tree = default(object);
		object IDENTIFIER563_tree = default(object);
		object char_literal565_tree = default(object);
		object string_literal566_tree = default(object);
		object char_literal567_tree = default(object);
		object string_literal568_tree = default(object);
		object char_literal571_tree = default(object);
		object char_literal573_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "selector");
		DebugLocation(1174, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }

			// Java.g:1175:5: ( '.' IDENTIFIER ( arguments )? | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' )
			int alt156=6;
			try { DebugEnterDecision(156, false);
			int LA156_1 = input.LA(1);

			if ((LA156_1==DOT))
			{
				switch (input.LA(2))
				{
				case IDENTIFIER:
					{
					alt156 = 1;
					}
					break;
				case THIS:
					{
					alt156 = 3;
					}
					break;
				case SUPER:
					{
					alt156 = 4;
					}
					break;
				case NEW:
					{
					alt156 = 5;
					}
					break;
				case LT:
					{
					alt156 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 156, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA156_1==LBRACKET))
			{
				alt156 = 6;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 156, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1175:9: '.' IDENTIFIER ( arguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1175, 9);
				char_literal558=(IToken)Match(input,DOT,Follow._DOT_in_selector7222); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal558_tree = (object)adaptor.Create(char_literal558);
				adaptor.AddChild(root_0, char_literal558_tree);
				}
				DebugLocation(1175, 13);
				IDENTIFIER559=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_selector7224); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER559_tree = (object)adaptor.Create(IDENTIFIER559);
				adaptor.AddChild(root_0, IDENTIFIER559_tree);
				}
				DebugLocation(1175, 24);
				// Java.g:1175:24: ( arguments )?
				int alt155=2;
				try { DebugEnterSubRule(155);
				try { DebugEnterDecision(155, false);
				int LA155_1 = input.LA(1);

				if ((LA155_1==LPAREN))
				{
					alt155 = 1;
				}
				} finally { DebugExitDecision(155); }
				switch (alt155)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1175:24: arguments
					{
					DebugLocation(1175, 24);
					PushFollow(Follow._arguments_in_selector7226);
					arguments560=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments560.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(155); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1176:9: '.' nonWildcardTypeArguments IDENTIFIER arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1176, 9);
				char_literal561=(IToken)Match(input,DOT,Follow._DOT_in_selector7237); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal561_tree = (object)adaptor.Create(char_literal561);
				adaptor.AddChild(root_0, char_literal561_tree);
				}
				DebugLocation(1176, 13);
				PushFollow(Follow._nonWildcardTypeArguments_in_selector7239);
				nonWildcardTypeArguments562=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments562.Tree);
				DebugLocation(1176, 38);
				IDENTIFIER563=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_selector7241); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER563_tree = (object)adaptor.Create(IDENTIFIER563);
				adaptor.AddChild(root_0, IDENTIFIER563_tree);
				}
				DebugLocation(1176, 49);
				PushFollow(Follow._arguments_in_selector7243);
				arguments564=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments564.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1177:9: '.' 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1177, 9);
				char_literal565=(IToken)Match(input,DOT,Follow._DOT_in_selector7254); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal565_tree = (object)adaptor.Create(char_literal565);
				adaptor.AddChild(root_0, char_literal565_tree);
				}
				DebugLocation(1177, 13);
				string_literal566=(IToken)Match(input,THIS,Follow._THIS_in_selector7256); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal566_tree = (object)adaptor.Create(string_literal566);
				adaptor.AddChild(root_0, string_literal566_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1178:9: '.' 'super' superSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1178, 9);
				char_literal567=(IToken)Match(input,DOT,Follow._DOT_in_selector7266); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal567_tree = (object)adaptor.Create(char_literal567);
				adaptor.AddChild(root_0, char_literal567_tree);
				}
				DebugLocation(1178, 13);
				string_literal568=(IToken)Match(input,SUPER,Follow._SUPER_in_selector7268); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal568_tree = (object)adaptor.Create(string_literal568);
				adaptor.AddChild(root_0, string_literal568_tree);
				}
				DebugLocation(1179, 9);
				PushFollow(Follow._superSuffix_in_selector7278);
				superSuffix569=superSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, superSuffix569.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1180:9: innerCreator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1180, 9);
				PushFollow(Follow._innerCreator_in_selector7288);
				innerCreator570=innerCreator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, innerCreator570.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1181:9: '[' expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1181, 9);
				char_literal571=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_selector7298); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal571_tree = (object)adaptor.Create(char_literal571);
				adaptor.AddChild(root_0, char_literal571_tree);
				}
				DebugLocation(1181, 13);
				PushFollow(Follow._expression_in_selector7300);
				expression572=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression572.Tree);
				DebugLocation(1181, 24);
				char_literal573=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_selector7302); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal573_tree = (object)adaptor.Create(char_literal573);
				adaptor.AddChild(root_0, char_literal573_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector", 98);
			LeaveRule("selector", 98);
			LeaveRule_selector();
			if (state.backtracking > 0) { Memoize(input, 98, selector_StartIndex); }

		}
		DebugLocation(1182, 4);
		} finally { DebugExitRule(GrammarFileName, "selector"); }
		return retval;

	}
	// $ANTLR end "selector"

	partial void EnterRule_creator();
	partial void LeaveRule_creator();
	// $ANTLR start "creator"
	// Java.g:1184:1: creator : ( 'new' nonWildcardTypeArguments classOrInterfaceTypeWithDiamond classCreatorRest | 'new' classOrInterfaceTypeWithDiamond classCreatorRest | arrayCreator );
	[GrammarRule("creator")]
	private AstParserRuleReturnScope<object, IToken> creator()
	{
		EnterRule_creator();
		EnterRule("creator", 99);
		TraceIn("creator", 99);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int creator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal574 = default(IToken);
		IToken string_literal578 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments575 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classOrInterfaceTypeWithDiamond576 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classCreatorRest577 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classOrInterfaceTypeWithDiamond579 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classCreatorRest580 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayCreator581 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal574_tree = default(object);
		object string_literal578_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "creator");
		DebugLocation(1184, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }

			// Java.g:1185:5: ( 'new' nonWildcardTypeArguments classOrInterfaceTypeWithDiamond classCreatorRest | 'new' classOrInterfaceTypeWithDiamond classCreatorRest | arrayCreator )
			int alt157=3;
			try { DebugEnterDecision(157, false);
			int LA157_1 = input.LA(1);

			if ((LA157_1==NEW))
			{
				int LA157_2 = input.LA(2);

				if ((EvaluatePredicate(synpred248_Java_fragment)))
				{
					alt157 = 1;
				}
				else if ((EvaluatePredicate(synpred249_Java_fragment)))
				{
					alt157 = 2;
				}
				else if ((true))
				{
					alt157 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 157, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 157, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1185:9: 'new' nonWildcardTypeArguments classOrInterfaceTypeWithDiamond classCreatorRest
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1185, 9);
				string_literal574=(IToken)Match(input,NEW,Follow._NEW_in_creator7321); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal574_tree = (object)adaptor.Create(string_literal574);
				adaptor.AddChild(root_0, string_literal574_tree);
				}
				DebugLocation(1185, 15);
				PushFollow(Follow._nonWildcardTypeArguments_in_creator7323);
				nonWildcardTypeArguments575=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments575.Tree);
				DebugLocation(1185, 40);
				PushFollow(Follow._classOrInterfaceTypeWithDiamond_in_creator7325);
				classOrInterfaceTypeWithDiamond576=classOrInterfaceTypeWithDiamond();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceTypeWithDiamond576.Tree);
				DebugLocation(1185, 72);
				PushFollow(Follow._classCreatorRest_in_creator7327);
				classCreatorRest577=classCreatorRest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classCreatorRest577.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1186:9: 'new' classOrInterfaceTypeWithDiamond classCreatorRest
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1186, 9);
				string_literal578=(IToken)Match(input,NEW,Follow._NEW_in_creator7337); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal578_tree = (object)adaptor.Create(string_literal578);
				adaptor.AddChild(root_0, string_literal578_tree);
				}
				DebugLocation(1186, 15);
				PushFollow(Follow._classOrInterfaceTypeWithDiamond_in_creator7339);
				classOrInterfaceTypeWithDiamond579=classOrInterfaceTypeWithDiamond();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceTypeWithDiamond579.Tree);
				DebugLocation(1186, 47);
				PushFollow(Follow._classCreatorRest_in_creator7341);
				classCreatorRest580=classCreatorRest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classCreatorRest580.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1187:9: arrayCreator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1187, 9);
				PushFollow(Follow._arrayCreator_in_creator7351);
				arrayCreator581=arrayCreator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayCreator581.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("creator", 99);
			LeaveRule("creator", 99);
			LeaveRule_creator();
			if (state.backtracking > 0) { Memoize(input, 99, creator_StartIndex); }

		}
		DebugLocation(1188, 4);
		} finally { DebugExitRule(GrammarFileName, "creator"); }
		return retval;

	}
	// $ANTLR end "creator"

	partial void EnterRule_arrayCreator();
	partial void LeaveRule_arrayCreator();
	// $ANTLR start "arrayCreator"
	// Java.g:1190:1: arrayCreator : ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* );
	[GrammarRule("arrayCreator")]
	private AstParserRuleReturnScope<object, IToken> arrayCreator()
	{
		EnterRule_arrayCreator();
		EnterRule("arrayCreator", 100);
		TraceIn("arrayCreator", 100);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayCreator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal582 = default(IToken);
		IToken char_literal584 = default(IToken);
		IToken char_literal585 = default(IToken);
		IToken char_literal586 = default(IToken);
		IToken char_literal587 = default(IToken);
		IToken string_literal589 = default(IToken);
		IToken char_literal591 = default(IToken);
		IToken char_literal593 = default(IToken);
		IToken char_literal594 = default(IToken);
		IToken char_literal596 = default(IToken);
		IToken char_literal597 = default(IToken);
		IToken char_literal598 = default(IToken);
		AstParserRuleReturnScope<object, IToken> createdName583 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayInitializer588 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> createdName590 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression592 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression595 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal582_tree = default(object);
		object char_literal584_tree = default(object);
		object char_literal585_tree = default(object);
		object char_literal586_tree = default(object);
		object char_literal587_tree = default(object);
		object string_literal589_tree = default(object);
		object char_literal591_tree = default(object);
		object char_literal593_tree = default(object);
		object char_literal594_tree = default(object);
		object char_literal596_tree = default(object);
		object char_literal597_tree = default(object);
		object char_literal598_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayCreator");
		DebugLocation(1190, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }

			// Java.g:1191:5: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* )
			int alt161=2;
			try { DebugEnterDecision(161, false);
			int LA161_1 = input.LA(1);

			if ((LA161_1==NEW))
			{
				int LA161_2 = input.LA(2);

				if ((EvaluatePredicate(synpred251_Java_fragment)))
				{
					alt161 = 1;
				}
				else if ((true))
				{
					alt161 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 161, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 161, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1191:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1191, 9);
				string_literal582=(IToken)Match(input,NEW,Follow._NEW_in_arrayCreator7370); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal582_tree = (object)adaptor.Create(string_literal582);
				adaptor.AddChild(root_0, string_literal582_tree);
				}
				DebugLocation(1191, 15);
				PushFollow(Follow._createdName_in_arrayCreator7372);
				createdName583=createdName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createdName583.Tree);
				DebugLocation(1192, 9);
				char_literal584=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7382); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal584_tree = (object)adaptor.Create(char_literal584);
				adaptor.AddChild(root_0, char_literal584_tree);
				}
				DebugLocation(1192, 13);
				char_literal585=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7384); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal585_tree = (object)adaptor.Create(char_literal585);
				adaptor.AddChild(root_0, char_literal585_tree);
				}
				DebugLocation(1193, 9);
				// Java.g:1193:9: ( '[' ']' )*
				try { DebugEnterSubRule(158);
				while (true)
				{
					int alt158=2;
					try { DebugEnterDecision(158, false);
					int LA158_1 = input.LA(1);

					if ((LA158_1==LBRACKET))
					{
						alt158 = 1;
					}


					} finally { DebugExitDecision(158); }
					switch ( alt158 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1193:10: '[' ']'
						{
						DebugLocation(1193, 10);
						char_literal586=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7395); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal586_tree = (object)adaptor.Create(char_literal586);
						adaptor.AddChild(root_0, char_literal586_tree);
						}
						DebugLocation(1193, 14);
						char_literal587=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7397); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal587_tree = (object)adaptor.Create(char_literal587);
						adaptor.AddChild(root_0, char_literal587_tree);
						}

						}
						break;

					default:
						goto loop158;
					}
				}

				loop158:
					;

				} finally { DebugExitSubRule(158); }

				DebugLocation(1195, 9);
				PushFollow(Follow._arrayInitializer_in_arrayCreator7418);
				arrayInitializer588=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer588.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1197:9: 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1197, 9);
				string_literal589=(IToken)Match(input,NEW,Follow._NEW_in_arrayCreator7429); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal589_tree = (object)adaptor.Create(string_literal589);
				adaptor.AddChild(root_0, string_literal589_tree);
				}
				DebugLocation(1197, 15);
				PushFollow(Follow._createdName_in_arrayCreator7431);
				createdName590=createdName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createdName590.Tree);
				DebugLocation(1198, 9);
				char_literal591=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7441); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal591_tree = (object)adaptor.Create(char_literal591);
				adaptor.AddChild(root_0, char_literal591_tree);
				}
				DebugLocation(1198, 13);
				PushFollow(Follow._expression_in_arrayCreator7443);
				expression592=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression592.Tree);
				DebugLocation(1199, 9);
				char_literal593=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7453); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal593_tree = (object)adaptor.Create(char_literal593);
				adaptor.AddChild(root_0, char_literal593_tree);
				}
				DebugLocation(1200, 9);
				// Java.g:1200:9: ( '[' expression ']' )*
				try { DebugEnterSubRule(159);
				while (true)
				{
					int alt159=2;
					try { DebugEnterDecision(159, false);
					int LA159_1 = input.LA(1);

					if ((LA159_1==LBRACKET))
					{
						int LA159_2 = input.LA(2);

						if ((EvaluatePredicate(synpred252_Java_fragment)))
						{
							alt159 = 1;
						}


					}


					} finally { DebugExitDecision(159); }
					switch ( alt159 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1200:13: '[' expression ']'
						{
						DebugLocation(1200, 13);
						char_literal594=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7467); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal594_tree = (object)adaptor.Create(char_literal594);
						adaptor.AddChild(root_0, char_literal594_tree);
						}
						DebugLocation(1200, 17);
						PushFollow(Follow._expression_in_arrayCreator7469);
						expression595=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression595.Tree);
						DebugLocation(1201, 13);
						char_literal596=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7483); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal596_tree = (object)adaptor.Create(char_literal596);
						adaptor.AddChild(root_0, char_literal596_tree);
						}

						}
						break;

					default:
						goto loop159;
					}
				}

				loop159:
					;

				} finally { DebugExitSubRule(159); }

				DebugLocation(1203, 9);
				// Java.g:1203:9: ( '[' ']' )*
				try { DebugEnterSubRule(160);
				while (true)
				{
					int alt160=2;
					try { DebugEnterDecision(160, false);
					int LA160_1 = input.LA(1);

					if ((LA160_1==LBRACKET))
					{
						int LA160_2 = input.LA(2);

						if ((LA160_2==RBRACKET))
						{
							alt160 = 1;
						}


					}


					} finally { DebugExitDecision(160); }
					switch ( alt160 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1203:10: '[' ']'
						{
						DebugLocation(1203, 10);
						char_literal597=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7505); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal597_tree = (object)adaptor.Create(char_literal597);
						adaptor.AddChild(root_0, char_literal597_tree);
						}
						DebugLocation(1203, 14);
						char_literal598=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7507); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal598_tree = (object)adaptor.Create(char_literal598);
						adaptor.AddChild(root_0, char_literal598_tree);
						}

						}
						break;

					default:
						goto loop160;
					}
				}

				loop160:
					;

				} finally { DebugExitSubRule(160); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayCreator", 100);
			LeaveRule("arrayCreator", 100);
			LeaveRule_arrayCreator();
			if (state.backtracking > 0) { Memoize(input, 100, arrayCreator_StartIndex); }

		}
		DebugLocation(1205, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayCreator"); }
		return retval;

	}
	// $ANTLR end "arrayCreator"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// Java.g:1207:1: variableInitializer : ( arrayInitializer | expression );
	[GrammarRule("variableInitializer")]
	private AstParserRuleReturnScope<object, IToken> variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 101);
		TraceIn("variableInitializer", 101);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableInitializer_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> arrayInitializer599 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression600 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(1207, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }

			// Java.g:1208:5: ( arrayInitializer | expression )
			int alt162=2;
			try { DebugEnterDecision(162, false);
			int LA162_1 = input.LA(1);

			if ((LA162_1==LBRACE))
			{
				alt162 = 1;
			}
			else if ((LA162_1==BANG||LA162_1==BOOLEAN||LA162_1==BYTE||LA162_1==BooleanLiteral||LA162_1==CHAR||LA162_1==CharacterLiteral||LA162_1==DOUBLE||LA162_1==FLOAT||LA162_1==FloatingPointLiteral||LA162_1==IDENTIFIER||LA162_1==INT||LA162_1==IntegerLiteral||(LA162_1>=LONG && LA162_1<=LPAREN)||LA162_1==NEW||LA162_1==NullLiteral||LA162_1==PLUS||LA162_1==PLUSPLUS||LA162_1==SHORT||LA162_1==SUB||(LA162_1>=SUBSUB && LA162_1<=SUPER)||LA162_1==StringLiteral||LA162_1==THIS||LA162_1==TILDE||LA162_1==VOID))
			{
				alt162 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 162, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1208:9: arrayInitializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1208, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer7537);
				arrayInitializer599=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer599.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1209:9: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1209, 9);
				PushFollow(Follow._expression_in_variableInitializer7547);
				expression600=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression600.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableInitializer", 101);
			LeaveRule("variableInitializer", 101);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 101, variableInitializer_StartIndex); }

		}
		DebugLocation(1210, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return retval;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// Java.g:1212:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' ;
	[GrammarRule("arrayInitializer")]
	private AstParserRuleReturnScope<object, IToken> arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 102);
		TraceIn("arrayInitializer", 102);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayInitializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal601 = default(IToken);
		IToken char_literal603 = default(IToken);
		IToken char_literal605 = default(IToken);
		IToken char_literal606 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableInitializer602 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableInitializer604 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal601_tree = default(object);
		object char_literal603_tree = default(object);
		object char_literal605_tree = default(object);
		object char_literal606_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(1212, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }

			// Java.g:1213:5: ( '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// Java.g:1213:9: '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1213, 9);
			char_literal601=(IToken)Match(input,LBRACE,Follow._LBRACE_in_arrayInitializer7566); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal601_tree = (object)adaptor.Create(char_literal601);
			adaptor.AddChild(root_0, char_literal601_tree);
			}
			DebugLocation(1214, 13);
			// Java.g:1214:13: ( variableInitializer ( ',' variableInitializer )* )?
			int alt164=2;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, false);
			int LA164_1 = input.LA(1);

			if ((LA164_1==BANG||LA164_1==BOOLEAN||LA164_1==BYTE||LA164_1==BooleanLiteral||LA164_1==CHAR||LA164_1==CharacterLiteral||LA164_1==DOUBLE||LA164_1==FLOAT||LA164_1==FloatingPointLiteral||LA164_1==IDENTIFIER||LA164_1==INT||LA164_1==IntegerLiteral||LA164_1==LBRACE||(LA164_1>=LONG && LA164_1<=LPAREN)||LA164_1==NEW||LA164_1==NullLiteral||LA164_1==PLUS||LA164_1==PLUSPLUS||LA164_1==SHORT||LA164_1==SUB||(LA164_1>=SUBSUB && LA164_1<=SUPER)||LA164_1==StringLiteral||LA164_1==THIS||LA164_1==TILDE||LA164_1==VOID))
			{
				alt164 = 1;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1214:14: variableInitializer ( ',' variableInitializer )*
				{
				DebugLocation(1214, 14);
				PushFollow(Follow._variableInitializer_in_arrayInitializer7582);
				variableInitializer602=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableInitializer602.Tree);
				DebugLocation(1215, 17);
				// Java.g:1215:17: ( ',' variableInitializer )*
				try { DebugEnterSubRule(163);
				while (true)
				{
					int alt163=2;
					try { DebugEnterDecision(163, false);
					int LA163_1 = input.LA(1);

					if ((LA163_1==COMMA))
					{
						int LA163_2 = input.LA(2);

						if ((LA163_2==BANG||LA163_2==BOOLEAN||LA163_2==BYTE||LA163_2==BooleanLiteral||LA163_2==CHAR||LA163_2==CharacterLiteral||LA163_2==DOUBLE||LA163_2==FLOAT||LA163_2==FloatingPointLiteral||LA163_2==IDENTIFIER||LA163_2==INT||LA163_2==IntegerLiteral||LA163_2==LBRACE||(LA163_2>=LONG && LA163_2<=LPAREN)||LA163_2==NEW||LA163_2==NullLiteral||LA163_2==PLUS||LA163_2==PLUSPLUS||LA163_2==SHORT||LA163_2==SUB||(LA163_2>=SUBSUB && LA163_2<=SUPER)||LA163_2==StringLiteral||LA163_2==THIS||LA163_2==TILDE||LA163_2==VOID))
						{
							alt163 = 1;
						}


					}


					} finally { DebugExitDecision(163); }
					switch ( alt163 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1215:18: ',' variableInitializer
						{
						DebugLocation(1215, 18);
						char_literal603=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer7601); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal603_tree = (object)adaptor.Create(char_literal603);
						adaptor.AddChild(root_0, char_literal603_tree);
						}
						DebugLocation(1215, 22);
						PushFollow(Follow._variableInitializer_in_arrayInitializer7603);
						variableInitializer604=variableInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, variableInitializer604.Tree);

						}
						break;

					default:
						goto loop163;
					}
				}

				loop163:
					;

				} finally { DebugExitSubRule(163); }


				}
				break;

			}
			} finally { DebugExitSubRule(164); }

			DebugLocation(1218, 13);
			// Java.g:1218:13: ( ',' )?
			int alt165=2;
			try { DebugEnterSubRule(165);
			try { DebugEnterDecision(165, false);
			int LA165_1 = input.LA(1);

			if ((LA165_1==COMMA))
			{
				alt165 = 1;
			}
			} finally { DebugExitDecision(165); }
			switch (alt165)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1218:14: ','
				{
				DebugLocation(1218, 14);
				char_literal605=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer7653); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal605_tree = (object)adaptor.Create(char_literal605);
				adaptor.AddChild(root_0, char_literal605_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(165); }

			DebugLocation(1219, 9);
			char_literal606=(IToken)Match(input,RBRACE,Follow._RBRACE_in_arrayInitializer7666); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal606_tree = (object)adaptor.Create(char_literal606);
			adaptor.AddChild(root_0, char_literal606_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayInitializer", 102);
			LeaveRule("arrayInitializer", 102);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 102, arrayInitializer_StartIndex); }

		}
		DebugLocation(1220, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return retval;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_createdName();
	partial void LeaveRule_createdName();
	// $ANTLR start "createdName"
	// Java.g:1223:1: createdName : ( classOrInterfaceTypeWithDiamond | primitiveType );
	[GrammarRule("createdName")]
	private AstParserRuleReturnScope<object, IToken> createdName()
	{
		EnterRule_createdName();
		EnterRule("createdName", 103);
		TraceIn("createdName", 103);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int createdName_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> classOrInterfaceTypeWithDiamond607 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primitiveType608 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "createdName");
		DebugLocation(1223, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }

			// Java.g:1224:5: ( classOrInterfaceTypeWithDiamond | primitiveType )
			int alt166=2;
			try { DebugEnterDecision(166, false);
			int LA166_1 = input.LA(1);

			if ((LA166_1==IDENTIFIER))
			{
				alt166 = 1;
			}
			else if ((LA166_1==BOOLEAN||LA166_1==BYTE||LA166_1==CHAR||LA166_1==DOUBLE||LA166_1==FLOAT||LA166_1==INT||LA166_1==LONG||LA166_1==SHORT))
			{
				alt166 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 166, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(166); }
			switch (alt166)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1224:9: classOrInterfaceTypeWithDiamond
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1224, 9);
				PushFollow(Follow._classOrInterfaceTypeWithDiamond_in_createdName7699);
				classOrInterfaceTypeWithDiamond607=classOrInterfaceTypeWithDiamond();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceTypeWithDiamond607.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1225:9: primitiveType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1225, 9);
				PushFollow(Follow._primitiveType_in_createdName7709);
				primitiveType608=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType608.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createdName", 103);
			LeaveRule("createdName", 103);
			LeaveRule_createdName();
			if (state.backtracking > 0) { Memoize(input, 103, createdName_StartIndex); }

		}
		DebugLocation(1226, 4);
		} finally { DebugExitRule(GrammarFileName, "createdName"); }
		return retval;

	}
	// $ANTLR end "createdName"

	partial void EnterRule_innerCreator();
	partial void LeaveRule_innerCreator();
	// $ANTLR start "innerCreator"
	// Java.g:1228:1: innerCreator : '.' 'new' ( nonWildcardTypeArgumentsOrDiamond )? IDENTIFIER ( typeArguments )? classCreatorRest ;
	[GrammarRule("innerCreator")]
	private AstParserRuleReturnScope<object, IToken> innerCreator()
	{
		EnterRule_innerCreator();
		EnterRule("innerCreator", 104);
		TraceIn("innerCreator", 104);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int innerCreator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal609 = default(IToken);
		IToken string_literal610 = default(IToken);
		IToken IDENTIFIER612 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArgumentsOrDiamond611 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeArguments613 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classCreatorRest614 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal609_tree = default(object);
		object string_literal610_tree = default(object);
		object IDENTIFIER612_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "innerCreator");
		DebugLocation(1228, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }

			// Java.g:1229:5: ( '.' 'new' ( nonWildcardTypeArgumentsOrDiamond )? IDENTIFIER ( typeArguments )? classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1229:9: '.' 'new' ( nonWildcardTypeArgumentsOrDiamond )? IDENTIFIER ( typeArguments )? classCreatorRest
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1229, 9);
			char_literal609=(IToken)Match(input,DOT,Follow._DOT_in_innerCreator7728); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal609_tree = (object)adaptor.Create(char_literal609);
			adaptor.AddChild(root_0, char_literal609_tree);
			}
			DebugLocation(1229, 13);
			string_literal610=(IToken)Match(input,NEW,Follow._NEW_in_innerCreator7730); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal610_tree = (object)adaptor.Create(string_literal610);
			adaptor.AddChild(root_0, string_literal610_tree);
			}
			DebugLocation(1230, 9);
			// Java.g:1230:9: ( nonWildcardTypeArgumentsOrDiamond )?
			int alt167=2;
			try { DebugEnterSubRule(167);
			try { DebugEnterDecision(167, false);
			int LA167_1 = input.LA(1);

			if ((LA167_1==LT))
			{
				alt167 = 1;
			}
			} finally { DebugExitDecision(167); }
			switch (alt167)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1230:10: nonWildcardTypeArgumentsOrDiamond
				{
				DebugLocation(1230, 10);
				PushFollow(Follow._nonWildcardTypeArgumentsOrDiamond_in_innerCreator7741);
				nonWildcardTypeArgumentsOrDiamond611=nonWildcardTypeArgumentsOrDiamond();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArgumentsOrDiamond611.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(167); }

			DebugLocation(1232, 9);
			IDENTIFIER612=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_innerCreator7762); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER612_tree = (object)adaptor.Create(IDENTIFIER612);
			adaptor.AddChild(root_0, IDENTIFIER612_tree);
			}
			DebugLocation(1233, 9);
			// Java.g:1233:9: ( typeArguments )?
			int alt168=2;
			try { DebugEnterSubRule(168);
			try { DebugEnterDecision(168, false);
			int LA168_1 = input.LA(1);

			if ((LA168_1==LT))
			{
				alt168 = 1;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1233:10: typeArguments
				{
				DebugLocation(1233, 10);
				PushFollow(Follow._typeArguments_in_innerCreator7773);
				typeArguments613=typeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments613.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(168); }

			DebugLocation(1235, 9);
			PushFollow(Follow._classCreatorRest_in_innerCreator7794);
			classCreatorRest614=classCreatorRest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, classCreatorRest614.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerCreator", 104);
			LeaveRule("innerCreator", 104);
			LeaveRule_innerCreator();
			if (state.backtracking > 0) { Memoize(input, 104, innerCreator_StartIndex); }

		}
		DebugLocation(1236, 4);
		} finally { DebugExitRule(GrammarFileName, "innerCreator"); }
		return retval;

	}
	// $ANTLR end "innerCreator"

	partial void EnterRule_classCreatorRest();
	partial void LeaveRule_classCreatorRest();
	// $ANTLR start "classCreatorRest"
	// Java.g:1238:1: classCreatorRest : arguments ( classBody )? ;
	[GrammarRule("classCreatorRest")]
	private AstParserRuleReturnScope<object, IToken> classCreatorRest()
	{
		EnterRule_classCreatorRest();
		EnterRule("classCreatorRest", 105);
		TraceIn("classCreatorRest", 105);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classCreatorRest_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> arguments615 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classBody616 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "classCreatorRest");
		DebugLocation(1238, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }

			// Java.g:1239:5: ( arguments ( classBody )? )
			DebugEnterAlt(1);
			// Java.g:1239:9: arguments ( classBody )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1239, 9);
			PushFollow(Follow._arguments_in_classCreatorRest7813);
			arguments615=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, arguments615.Tree);
			DebugLocation(1240, 9);
			// Java.g:1240:9: ( classBody )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, false);
			int LA169_1 = input.LA(1);

			if ((LA169_1==LBRACE))
			{
				alt169 = 1;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1240:10: classBody
				{
				DebugLocation(1240, 10);
				PushFollow(Follow._classBody_in_classCreatorRest7824);
				classBody616=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classBody616.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(169); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classCreatorRest", 105);
			LeaveRule("classCreatorRest", 105);
			LeaveRule_classCreatorRest();
			if (state.backtracking > 0) { Memoize(input, 105, classCreatorRest_StartIndex); }

		}
		DebugLocation(1242, 4);
		} finally { DebugExitRule(GrammarFileName, "classCreatorRest"); }
		return retval;

	}
	// $ANTLR end "classCreatorRest"

	partial void EnterRule_nonWildcardTypeArguments();
	partial void LeaveRule_nonWildcardTypeArguments();
	// $ANTLR start "nonWildcardTypeArguments"
	// Java.g:1244:1: nonWildcardTypeArguments : '<' typeList '>' ;
	[GrammarRule("nonWildcardTypeArguments")]
	private AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments()
	{
		EnterRule_nonWildcardTypeArguments();
		EnterRule("nonWildcardTypeArguments", 106);
		TraceIn("nonWildcardTypeArguments", 106);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int nonWildcardTypeArguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal617 = default(IToken);
		IToken char_literal619 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeList618 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal617_tree = default(object);
		object char_literal619_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "nonWildcardTypeArguments");
		DebugLocation(1244, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }

			// Java.g:1245:5: ( '<' typeList '>' )
			DebugEnterAlt(1);
			// Java.g:1245:9: '<' typeList '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1245, 9);
			char_literal617=(IToken)Match(input,LT,Follow._LT_in_nonWildcardTypeArguments7854); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal617_tree = (object)adaptor.Create(char_literal617);
			adaptor.AddChild(root_0, char_literal617_tree);
			}
			DebugLocation(1245, 13);
			PushFollow(Follow._typeList_in_nonWildcardTypeArguments7856);
			typeList618=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeList618.Tree);
			DebugLocation(1245, 22);
			char_literal619=(IToken)Match(input,GT,Follow._GT_in_nonWildcardTypeArguments7858); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal619_tree = (object)adaptor.Create(char_literal619);
			adaptor.AddChild(root_0, char_literal619_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nonWildcardTypeArguments", 106);
			LeaveRule("nonWildcardTypeArguments", 106);
			LeaveRule_nonWildcardTypeArguments();
			if (state.backtracking > 0) { Memoize(input, 106, nonWildcardTypeArguments_StartIndex); }

		}
		DebugLocation(1246, 4);
		} finally { DebugExitRule(GrammarFileName, "nonWildcardTypeArguments"); }
		return retval;

	}
	// $ANTLR end "nonWildcardTypeArguments"

	partial void EnterRule_typeArgumentsOrDiamond();
	partial void LeaveRule_typeArgumentsOrDiamond();
	// $ANTLR start "typeArgumentsOrDiamond"
	// Java.g:1248:1: typeArgumentsOrDiamond : ( '<' '>' | typeArguments );
	[GrammarRule("typeArgumentsOrDiamond")]
	private AstParserRuleReturnScope<object, IToken> typeArgumentsOrDiamond()
	{
		EnterRule_typeArgumentsOrDiamond();
		EnterRule("typeArgumentsOrDiamond", 107);
		TraceIn("typeArgumentsOrDiamond", 107);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeArgumentsOrDiamond_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal620 = default(IToken);
		IToken char_literal621 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeArguments622 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal620_tree = default(object);
		object char_literal621_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeArgumentsOrDiamond");
		DebugLocation(1248, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }

			// Java.g:1249:5: ( '<' '>' | typeArguments )
			int alt170=2;
			try { DebugEnterDecision(170, false);
			int LA170_1 = input.LA(1);

			if ((LA170_1==LT))
			{
				int LA170_2 = input.LA(2);

				if ((LA170_2==GT))
				{
					alt170 = 1;
				}
				else if ((LA170_2==BOOLEAN||LA170_2==BYTE||LA170_2==CHAR||LA170_2==DOUBLE||LA170_2==FLOAT||LA170_2==IDENTIFIER||LA170_2==INT||LA170_2==LONG||LA170_2==QUES||LA170_2==SHORT))
				{
					alt170 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 170, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 170, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1249:9: '<' '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1249, 9);
				char_literal620=(IToken)Match(input,LT,Follow._LT_in_typeArgumentsOrDiamond7877); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal620_tree = (object)adaptor.Create(char_literal620);
				adaptor.AddChild(root_0, char_literal620_tree);
				}
				DebugLocation(1249, 13);
				char_literal621=(IToken)Match(input,GT,Follow._GT_in_typeArgumentsOrDiamond7879); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal621_tree = (object)adaptor.Create(char_literal621);
				adaptor.AddChild(root_0, char_literal621_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1250:9: typeArguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1250, 9);
				PushFollow(Follow._typeArguments_in_typeArgumentsOrDiamond7889);
				typeArguments622=typeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments622.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeArgumentsOrDiamond", 107);
			LeaveRule("typeArgumentsOrDiamond", 107);
			LeaveRule_typeArgumentsOrDiamond();
			if (state.backtracking > 0) { Memoize(input, 107, typeArgumentsOrDiamond_StartIndex); }

		}
		DebugLocation(1251, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArgumentsOrDiamond"); }
		return retval;

	}
	// $ANTLR end "typeArgumentsOrDiamond"

	partial void EnterRule_nonWildcardTypeArgumentsOrDiamond();
	partial void LeaveRule_nonWildcardTypeArgumentsOrDiamond();
	// $ANTLR start "nonWildcardTypeArgumentsOrDiamond"
	// Java.g:1253:1: nonWildcardTypeArgumentsOrDiamond : ( '<' '>' | nonWildcardTypeArguments );
	[GrammarRule("nonWildcardTypeArgumentsOrDiamond")]
	private AstParserRuleReturnScope<object, IToken> nonWildcardTypeArgumentsOrDiamond()
	{
		EnterRule_nonWildcardTypeArgumentsOrDiamond();
		EnterRule("nonWildcardTypeArgumentsOrDiamond", 108);
		TraceIn("nonWildcardTypeArgumentsOrDiamond", 108);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int nonWildcardTypeArgumentsOrDiamond_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal623 = default(IToken);
		IToken char_literal624 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments625 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal623_tree = default(object);
		object char_literal624_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "nonWildcardTypeArgumentsOrDiamond");
		DebugLocation(1253, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }

			// Java.g:1254:5: ( '<' '>' | nonWildcardTypeArguments )
			int alt171=2;
			try { DebugEnterDecision(171, false);
			int LA171_1 = input.LA(1);

			if ((LA171_1==LT))
			{
				int LA171_2 = input.LA(2);

				if ((LA171_2==GT))
				{
					alt171 = 1;
				}
				else if ((LA171_2==BOOLEAN||LA171_2==BYTE||LA171_2==CHAR||LA171_2==DOUBLE||LA171_2==FLOAT||LA171_2==IDENTIFIER||LA171_2==INT||LA171_2==LONG||LA171_2==SHORT))
				{
					alt171 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 171, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 171, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1254:9: '<' '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1254, 9);
				char_literal623=(IToken)Match(input,LT,Follow._LT_in_nonWildcardTypeArgumentsOrDiamond7908); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal623_tree = (object)adaptor.Create(char_literal623);
				adaptor.AddChild(root_0, char_literal623_tree);
				}
				DebugLocation(1254, 13);
				char_literal624=(IToken)Match(input,GT,Follow._GT_in_nonWildcardTypeArgumentsOrDiamond7910); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal624_tree = (object)adaptor.Create(char_literal624);
				adaptor.AddChild(root_0, char_literal624_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1255:9: nonWildcardTypeArguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1255, 9);
				PushFollow(Follow._nonWildcardTypeArguments_in_nonWildcardTypeArgumentsOrDiamond7920);
				nonWildcardTypeArguments625=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments625.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nonWildcardTypeArgumentsOrDiamond", 108);
			LeaveRule("nonWildcardTypeArgumentsOrDiamond", 108);
			LeaveRule_nonWildcardTypeArgumentsOrDiamond();
			if (state.backtracking > 0) { Memoize(input, 108, nonWildcardTypeArgumentsOrDiamond_StartIndex); }

		}
		DebugLocation(1256, 4);
		} finally { DebugExitRule(GrammarFileName, "nonWildcardTypeArgumentsOrDiamond"); }
		return retval;

	}
	// $ANTLR end "nonWildcardTypeArgumentsOrDiamond"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// Java.g:1258:1: arguments : '(' ( expressionList )? ')' ;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<object, IToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 109);
		TraceIn("arguments", 109);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal626 = default(IToken);
		IToken char_literal628 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expressionList627 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal626_tree = default(object);
		object char_literal628_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(1258, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }

			// Java.g:1259:5: ( '(' ( expressionList )? ')' )
			DebugEnterAlt(1);
			// Java.g:1259:9: '(' ( expressionList )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1259, 9);
			char_literal626=(IToken)Match(input,LPAREN,Follow._LPAREN_in_arguments7940); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal626_tree = (object)adaptor.Create(char_literal626);
			adaptor.AddChild(root_0, char_literal626_tree);
			}
			DebugLocation(1259, 13);
			// Java.g:1259:13: ( expressionList )?
			int alt172=2;
			try { DebugEnterSubRule(172);
			try { DebugEnterDecision(172, false);
			int LA172_1 = input.LA(1);

			if ((LA172_1==BANG||LA172_1==BOOLEAN||LA172_1==BYTE||LA172_1==BooleanLiteral||LA172_1==CHAR||LA172_1==CharacterLiteral||LA172_1==DOUBLE||LA172_1==FLOAT||LA172_1==FloatingPointLiteral||LA172_1==IDENTIFIER||LA172_1==INT||LA172_1==IntegerLiteral||(LA172_1>=LONG && LA172_1<=LPAREN)||LA172_1==NEW||LA172_1==NullLiteral||LA172_1==PLUS||LA172_1==PLUSPLUS||LA172_1==SHORT||LA172_1==SUB||(LA172_1>=SUBSUB && LA172_1<=SUPER)||LA172_1==StringLiteral||LA172_1==THIS||LA172_1==TILDE||LA172_1==VOID))
			{
				alt172 = 1;
			}
			} finally { DebugExitDecision(172); }
			switch (alt172)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1259:14: expressionList
				{
				DebugLocation(1259, 14);
				PushFollow(Follow._expressionList_in_arguments7943);
				expressionList627=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionList627.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(172); }

			DebugLocation(1260, 12);
			char_literal628=(IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments7956); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal628_tree = (object)adaptor.Create(char_literal628);
			adaptor.AddChild(root_0, char_literal628_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 109);
			LeaveRule("arguments", 109);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 109, arguments_StartIndex); }

		}
		DebugLocation(1261, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Java.g:1263:1: literal : ( IntegerLiteral | FloatingPointLiteral | CharacterLiteral | StringLiteral | BooleanLiteral | NullLiteral );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<object, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 110);
		TraceIn("literal", 110);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set629 = default(IToken);

		object set629_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1263, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }

			// Java.g:1264:5: ( IntegerLiteral | FloatingPointLiteral | CharacterLiteral | StringLiteral | BooleanLiteral | NullLiteral )
			DebugEnterAlt(1);
			// Java.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1264, 5);

			set629=(IToken)input.LT(1);
			if (input.LA(1)==BooleanLiteral||input.LA(1)==CharacterLiteral||input.LA(1)==FloatingPointLiteral||input.LA(1)==IntegerLiteral||input.LA(1)==NullLiteral||input.LA(1)==StringLiteral)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set629));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 110);
			LeaveRule("literal", 110);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 110, literal_StartIndex); }

		}
		DebugLocation(1270, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_classHeader();
	partial void LeaveRule_classHeader();
	// $ANTLR start "classHeader"
	// Java.g:1277:1: classHeader : modifiers 'class' IDENTIFIER ;
	[GrammarRule("classHeader")]
	private AstParserRuleReturnScope<object, IToken> classHeader()
	{
		EnterRule_classHeader();
		EnterRule("classHeader", 111);
		TraceIn("classHeader", 111);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal631 = default(IToken);
		IToken IDENTIFIER632 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers630 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal631_tree = default(object);
		object IDENTIFIER632_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classHeader");
		DebugLocation(1277, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 111)) { return retval; }

			// Java.g:1278:5: ( modifiers 'class' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1278:9: modifiers 'class' IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1278, 9);
			PushFollow(Follow._modifiers_in_classHeader8050);
			modifiers630=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers630.Tree);
			DebugLocation(1278, 19);
			string_literal631=(IToken)Match(input,CLASS,Follow._CLASS_in_classHeader8052); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal631_tree = (object)adaptor.Create(string_literal631);
			adaptor.AddChild(root_0, string_literal631_tree);
			}
			DebugLocation(1278, 27);
			IDENTIFIER632=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classHeader8054); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER632_tree = (object)adaptor.Create(IDENTIFIER632);
			adaptor.AddChild(root_0, IDENTIFIER632_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classHeader", 111);
			LeaveRule("classHeader", 111);
			LeaveRule_classHeader();
			if (state.backtracking > 0) { Memoize(input, 111, classHeader_StartIndex); }

		}
		DebugLocation(1279, 4);
		} finally { DebugExitRule(GrammarFileName, "classHeader"); }
		return retval;

	}
	// $ANTLR end "classHeader"

	partial void EnterRule_enumHeader();
	partial void LeaveRule_enumHeader();
	// $ANTLR start "enumHeader"
	// Java.g:1281:1: enumHeader : modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER ;
	[GrammarRule("enumHeader")]
	private AstParserRuleReturnScope<object, IToken> enumHeader()
	{
		EnterRule_enumHeader();
		EnterRule("enumHeader", 112);
		TraceIn("enumHeader", 112);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set634 = default(IToken);
		IToken IDENTIFIER635 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers633 = default(AstParserRuleReturnScope<object, IToken>);

		object set634_tree = default(object);
		object IDENTIFIER635_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumHeader");
		DebugLocation(1281, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 112)) { return retval; }

			// Java.g:1282:5: ( modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1282:9: modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1282, 9);
			PushFollow(Follow._modifiers_in_enumHeader8074);
			modifiers633=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers633.Tree);
			DebugLocation(1282, 19);

			set634=(IToken)input.LT(1);
			if (input.LA(1)==ENUM||input.LA(1)==IDENTIFIER)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set634));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(1282, 39);
			IDENTIFIER635=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumHeader8082); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER635_tree = (object)adaptor.Create(IDENTIFIER635);
			adaptor.AddChild(root_0, IDENTIFIER635_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumHeader", 112);
			LeaveRule("enumHeader", 112);
			LeaveRule_enumHeader();
			if (state.backtracking > 0) { Memoize(input, 112, enumHeader_StartIndex); }

		}
		DebugLocation(1283, 4);
		} finally { DebugExitRule(GrammarFileName, "enumHeader"); }
		return retval;

	}
	// $ANTLR end "enumHeader"

	partial void EnterRule_interfaceHeader();
	partial void LeaveRule_interfaceHeader();
	// $ANTLR start "interfaceHeader"
	// Java.g:1285:1: interfaceHeader : modifiers 'interface' IDENTIFIER ;
	[GrammarRule("interfaceHeader")]
	private AstParserRuleReturnScope<object, IToken> interfaceHeader()
	{
		EnterRule_interfaceHeader();
		EnterRule("interfaceHeader", 113);
		TraceIn("interfaceHeader", 113);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal637 = default(IToken);
		IToken IDENTIFIER638 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers636 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal637_tree = default(object);
		object IDENTIFIER638_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceHeader");
		DebugLocation(1285, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 113)) { return retval; }

			// Java.g:1286:5: ( modifiers 'interface' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1286:9: modifiers 'interface' IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1286, 9);
			PushFollow(Follow._modifiers_in_interfaceHeader8102);
			modifiers636=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers636.Tree);
			DebugLocation(1286, 19);
			string_literal637=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_interfaceHeader8104); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal637_tree = (object)adaptor.Create(string_literal637);
			adaptor.AddChild(root_0, string_literal637_tree);
			}
			DebugLocation(1286, 31);
			IDENTIFIER638=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_interfaceHeader8106); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER638_tree = (object)adaptor.Create(IDENTIFIER638);
			adaptor.AddChild(root_0, IDENTIFIER638_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceHeader", 113);
			LeaveRule("interfaceHeader", 113);
			LeaveRule_interfaceHeader();
			if (state.backtracking > 0) { Memoize(input, 113, interfaceHeader_StartIndex); }

		}
		DebugLocation(1287, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceHeader"); }
		return retval;

	}
	// $ANTLR end "interfaceHeader"

	partial void EnterRule_annotationHeader();
	partial void LeaveRule_annotationHeader();
	// $ANTLR start "annotationHeader"
	// Java.g:1289:1: annotationHeader : modifiers '@' 'interface' IDENTIFIER ;
	[GrammarRule("annotationHeader")]
	private AstParserRuleReturnScope<object, IToken> annotationHeader()
	{
		EnterRule_annotationHeader();
		EnterRule("annotationHeader", 114);
		TraceIn("annotationHeader", 114);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal640 = default(IToken);
		IToken string_literal641 = default(IToken);
		IToken IDENTIFIER642 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers639 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal640_tree = default(object);
		object string_literal641_tree = default(object);
		object IDENTIFIER642_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotationHeader");
		DebugLocation(1289, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 114)) { return retval; }

			// Java.g:1290:5: ( modifiers '@' 'interface' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1290:9: modifiers '@' 'interface' IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1290, 9);
			PushFollow(Follow._modifiers_in_annotationHeader8126);
			modifiers639=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers639.Tree);
			DebugLocation(1290, 19);
			char_literal640=(IToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotationHeader8128); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal640_tree = (object)adaptor.Create(char_literal640);
			adaptor.AddChild(root_0, char_literal640_tree);
			}
			DebugLocation(1290, 23);
			string_literal641=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_annotationHeader8130); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal641_tree = (object)adaptor.Create(string_literal641);
			adaptor.AddChild(root_0, string_literal641_tree);
			}
			DebugLocation(1290, 35);
			IDENTIFIER642=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationHeader8132); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER642_tree = (object)adaptor.Create(IDENTIFIER642);
			adaptor.AddChild(root_0, IDENTIFIER642_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationHeader", 114);
			LeaveRule("annotationHeader", 114);
			LeaveRule_annotationHeader();
			if (state.backtracking > 0) { Memoize(input, 114, annotationHeader_StartIndex); }

		}
		DebugLocation(1291, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationHeader"); }
		return retval;

	}
	// $ANTLR end "annotationHeader"

	partial void EnterRule_typeHeader();
	partial void LeaveRule_typeHeader();
	// $ANTLR start "typeHeader"
	// Java.g:1293:1: typeHeader : modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER ;
	[GrammarRule("typeHeader")]
	private AstParserRuleReturnScope<object, IToken> typeHeader()
	{
		EnterRule_typeHeader();
		EnterRule("typeHeader", 115);
		TraceIn("typeHeader", 115);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal644 = default(IToken);
		IToken string_literal645 = default(IToken);
		IToken char_literal646 = default(IToken);
		IToken string_literal647 = default(IToken);
		IToken IDENTIFIER648 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers643 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal644_tree = default(object);
		object string_literal645_tree = default(object);
		object char_literal646_tree = default(object);
		object string_literal647_tree = default(object);
		object IDENTIFIER648_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeHeader");
		DebugLocation(1293, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 115)) { return retval; }

			// Java.g:1294:5: ( modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1294:9: modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1294, 9);
			PushFollow(Follow._modifiers_in_typeHeader8152);
			modifiers643=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers643.Tree);
			DebugLocation(1294, 19);
			// Java.g:1294:19: ( 'class' | 'enum' | ( ( '@' )? 'interface' ) )
			int alt174=3;
			try { DebugEnterSubRule(174);
			try { DebugEnterDecision(174, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt174 = 1;
				}
				break;
			case ENUM:
				{
				alt174 = 2;
				}
				break;
			case INTERFACE:
			case MONKEYS_AT:
				{
				alt174 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 174, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1294:20: 'class'
				{
				DebugLocation(1294, 20);
				string_literal644=(IToken)Match(input,CLASS,Follow._CLASS_in_typeHeader8155); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal644_tree = (object)adaptor.Create(string_literal644);
				adaptor.AddChild(root_0, string_literal644_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1294:28: 'enum'
				{
				DebugLocation(1294, 28);
				string_literal645=(IToken)Match(input,ENUM,Follow._ENUM_in_typeHeader8157); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal645_tree = (object)adaptor.Create(string_literal645);
				adaptor.AddChild(root_0, string_literal645_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1294:35: ( ( '@' )? 'interface' )
				{
				DebugLocation(1294, 35);
				// Java.g:1294:35: ( ( '@' )? 'interface' )
				DebugEnterAlt(1);
				// Java.g:1294:36: ( '@' )? 'interface'
				{
				DebugLocation(1294, 36);
				// Java.g:1294:36: ( '@' )?
				int alt173=2;
				try { DebugEnterSubRule(173);
				try { DebugEnterDecision(173, false);
				int LA173_1 = input.LA(1);

				if ((LA173_1==MONKEYS_AT))
				{
					alt173 = 1;
				}
				} finally { DebugExitDecision(173); }
				switch (alt173)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1294:36: '@'
					{
					DebugLocation(1294, 36);
					char_literal646=(IToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_typeHeader8160); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal646_tree = (object)adaptor.Create(char_literal646);
					adaptor.AddChild(root_0, char_literal646_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(173); }

				DebugLocation(1294, 42);
				string_literal647=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_typeHeader8164); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal647_tree = (object)adaptor.Create(string_literal647);
				adaptor.AddChild(root_0, string_literal647_tree);
				}

				}


				}
				break;

			}
			} finally { DebugExitSubRule(174); }

			DebugLocation(1294, 56);
			IDENTIFIER648=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_typeHeader8168); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER648_tree = (object)adaptor.Create(IDENTIFIER648);
			adaptor.AddChild(root_0, IDENTIFIER648_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeHeader", 115);
			LeaveRule("typeHeader", 115);
			LeaveRule_typeHeader();
			if (state.backtracking > 0) { Memoize(input, 115, typeHeader_StartIndex); }

		}
		DebugLocation(1295, 4);
		} finally { DebugExitRule(GrammarFileName, "typeHeader"); }
		return retval;

	}
	// $ANTLR end "typeHeader"

	partial void EnterRule_methodHeader();
	partial void LeaveRule_methodHeader();
	// $ANTLR start "methodHeader"
	// Java.g:1297:1: methodHeader : modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' ;
	[GrammarRule("methodHeader")]
	private AstParserRuleReturnScope<object, IToken> methodHeader()
	{
		EnterRule_methodHeader();
		EnterRule("methodHeader", 116);
		TraceIn("methodHeader", 116);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int methodHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal652 = default(IToken);
		IToken IDENTIFIER653 = default(IToken);
		IToken char_literal654 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers649 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters650 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type651 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal652_tree = default(object);
		object IDENTIFIER653_tree = default(object);
		object char_literal654_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "methodHeader");
		DebugLocation(1297, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 116)) { return retval; }

			// Java.g:1298:5: ( modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' )
			DebugEnterAlt(1);
			// Java.g:1298:9: modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '('
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1298, 9);
			PushFollow(Follow._modifiers_in_methodHeader8188);
			modifiers649=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers649.Tree);
			DebugLocation(1298, 19);
			// Java.g:1298:19: ( typeParameters )?
			int alt175=2;
			try { DebugEnterSubRule(175);
			try { DebugEnterDecision(175, false);
			int LA175_1 = input.LA(1);

			if ((LA175_1==LT))
			{
				alt175 = 1;
			}
			} finally { DebugExitDecision(175); }
			switch (alt175)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1298:19: typeParameters
				{
				DebugLocation(1298, 19);
				PushFollow(Follow._typeParameters_in_methodHeader8190);
				typeParameters650=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters650.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(175); }

			DebugLocation(1298, 35);
			// Java.g:1298:35: ( type | 'void' )?
			int alt176=3;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA176_2 = input.LA(2);

				if ((LA176_2==DOT||LA176_2==IDENTIFIER||LA176_2==LBRACKET||LA176_2==LT))
				{
					alt176 = 1;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt176 = 1;
				}
				break;
			case VOID:
				{
				alt176 = 2;
				}
				break;
			}

			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1298:36: type
				{
				DebugLocation(1298, 36);
				PushFollow(Follow._type_in_methodHeader8194);
				type651=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type651.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1298:41: 'void'
				{
				DebugLocation(1298, 41);
				string_literal652=(IToken)Match(input,VOID,Follow._VOID_in_methodHeader8196); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal652_tree = (object)adaptor.Create(string_literal652);
				adaptor.AddChild(root_0, string_literal652_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(176); }

			DebugLocation(1298, 50);
			IDENTIFIER653=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodHeader8200); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER653_tree = (object)adaptor.Create(IDENTIFIER653);
			adaptor.AddChild(root_0, IDENTIFIER653_tree);
			}
			DebugLocation(1298, 61);
			char_literal654=(IToken)Match(input,LPAREN,Follow._LPAREN_in_methodHeader8202); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal654_tree = (object)adaptor.Create(char_literal654);
			adaptor.AddChild(root_0, char_literal654_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("methodHeader", 116);
			LeaveRule("methodHeader", 116);
			LeaveRule_methodHeader();
			if (state.backtracking > 0) { Memoize(input, 116, methodHeader_StartIndex); }

		}
		DebugLocation(1299, 4);
		} finally { DebugExitRule(GrammarFileName, "methodHeader"); }
		return retval;

	}
	// $ANTLR end "methodHeader"

	partial void EnterRule_fieldHeader();
	partial void LeaveRule_fieldHeader();
	// $ANTLR start "fieldHeader"
	// Java.g:1301:1: fieldHeader : modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
	[GrammarRule("fieldHeader")]
	private AstParserRuleReturnScope<object, IToken> fieldHeader()
	{
		EnterRule_fieldHeader();
		EnterRule("fieldHeader", 117);
		TraceIn("fieldHeader", 117);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int fieldHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER657 = default(IToken);
		IToken char_literal658 = default(IToken);
		IToken char_literal659 = default(IToken);
		IToken set660 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers655 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type656 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER657_tree = default(object);
		object char_literal658_tree = default(object);
		object char_literal659_tree = default(object);
		object set660_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldHeader");
		DebugLocation(1301, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 117)) { return retval; }

			// Java.g:1302:5: ( modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
			DebugEnterAlt(1);
			// Java.g:1302:9: modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1302, 9);
			PushFollow(Follow._modifiers_in_fieldHeader8222);
			modifiers655=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers655.Tree);
			DebugLocation(1302, 19);
			PushFollow(Follow._type_in_fieldHeader8224);
			type656=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type656.Tree);
			DebugLocation(1302, 24);
			IDENTIFIER657=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_fieldHeader8226); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER657_tree = (object)adaptor.Create(IDENTIFIER657);
			adaptor.AddChild(root_0, IDENTIFIER657_tree);
			}
			DebugLocation(1302, 35);
			// Java.g:1302:35: ( '[' ']' )*
			try { DebugEnterSubRule(177);
			while (true)
			{
				int alt177=2;
				try { DebugEnterDecision(177, false);
				int LA177_1 = input.LA(1);

				if ((LA177_1==LBRACKET))
				{
					alt177 = 1;
				}


				} finally { DebugExitDecision(177); }
				switch ( alt177 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1302:36: '[' ']'
					{
					DebugLocation(1302, 36);
					char_literal658=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_fieldHeader8229); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal658_tree = (object)adaptor.Create(char_literal658);
					adaptor.AddChild(root_0, char_literal658_tree);
					}
					DebugLocation(1302, 39);
					char_literal659=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_fieldHeader8230); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal659_tree = (object)adaptor.Create(char_literal659);
					adaptor.AddChild(root_0, char_literal659_tree);
					}

					}
					break;

				default:
					goto loop177;
				}
			}

			loop177:
				;

			} finally { DebugExitSubRule(177); }

			DebugLocation(1302, 45);

			set660=(IToken)input.LT(1);
			if (input.LA(1)==COMMA||input.LA(1)==EQ||input.LA(1)==SEMI)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set660));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldHeader", 117);
			LeaveRule("fieldHeader", 117);
			LeaveRule_fieldHeader();
			if (state.backtracking > 0) { Memoize(input, 117, fieldHeader_StartIndex); }

		}
		DebugLocation(1303, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldHeader"); }
		return retval;

	}
	// $ANTLR end "fieldHeader"

	partial void EnterRule_localVariableHeader();
	partial void LeaveRule_localVariableHeader();
	// $ANTLR start "localVariableHeader"
	// Java.g:1305:1: localVariableHeader : variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
	[GrammarRule("localVariableHeader")]
	private AstParserRuleReturnScope<object, IToken> localVariableHeader()
	{
		EnterRule_localVariableHeader();
		EnterRule("localVariableHeader", 118);
		TraceIn("localVariableHeader", 118);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localVariableHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER663 = default(IToken);
		IToken char_literal664 = default(IToken);
		IToken char_literal665 = default(IToken);
		IToken set666 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers661 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type662 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER663_tree = default(object);
		object char_literal664_tree = default(object);
		object char_literal665_tree = default(object);
		object set666_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "localVariableHeader");
		DebugLocation(1305, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 118)) { return retval; }

			// Java.g:1306:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
			DebugEnterAlt(1);
			// Java.g:1306:9: variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1306, 9);
			PushFollow(Follow._variableModifiers_in_localVariableHeader8260);
			variableModifiers661=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers661.Tree);
			DebugLocation(1306, 27);
			PushFollow(Follow._type_in_localVariableHeader8262);
			type662=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type662.Tree);
			DebugLocation(1306, 32);
			IDENTIFIER663=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_localVariableHeader8264); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER663_tree = (object)adaptor.Create(IDENTIFIER663);
			adaptor.AddChild(root_0, IDENTIFIER663_tree);
			}
			DebugLocation(1306, 43);
			// Java.g:1306:43: ( '[' ']' )*
			try { DebugEnterSubRule(178);
			while (true)
			{
				int alt178=2;
				try { DebugEnterDecision(178, false);
				int LA178_1 = input.LA(1);

				if ((LA178_1==LBRACKET))
				{
					alt178 = 1;
				}


				} finally { DebugExitDecision(178); }
				switch ( alt178 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1306:44: '[' ']'
					{
					DebugLocation(1306, 44);
					char_literal664=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_localVariableHeader8267); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal664_tree = (object)adaptor.Create(char_literal664);
					adaptor.AddChild(root_0, char_literal664_tree);
					}
					DebugLocation(1306, 47);
					char_literal665=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_localVariableHeader8268); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal665_tree = (object)adaptor.Create(char_literal665);
					adaptor.AddChild(root_0, char_literal665_tree);
					}

					}
					break;

				default:
					goto loop178;
				}
			}

			loop178:
				;

			} finally { DebugExitSubRule(178); }

			DebugLocation(1306, 53);

			set666=(IToken)input.LT(1);
			if (input.LA(1)==COMMA||input.LA(1)==EQ||input.LA(1)==SEMI)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set666));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableHeader", 118);
			LeaveRule("localVariableHeader", 118);
			LeaveRule_localVariableHeader();
			if (state.backtracking > 0) { Memoize(input, 118, localVariableHeader_StartIndex); }

		}
		DebugLocation(1307, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableHeader"); }
		return retval;

	}
	// $ANTLR end "localVariableHeader"

	partial void EnterRule_synpred2_Java_fragment();
	partial void LeaveRule_synpred2_Java_fragment();

	// $ANTLR start synpred2_Java
	private void synpred2_Java_fragment()
	{
		EnterRule_synpred2_Java_fragment();
		EnterRule("synpred2_Java_fragment", 120);
		TraceIn("synpred2_Java_fragment", 120);
		try
		{
			// Java.g:302:13: ( ( annotations )? packageDeclaration )
			DebugEnterAlt(1);
			// Java.g:302:13: ( annotations )? packageDeclaration
			{
			DebugLocation(302, 13);
			// Java.g:302:13: ( annotations )?
			int alt179=2;
			try { DebugEnterSubRule(179);
			try { DebugEnterDecision(179, false);
			int LA179_1 = input.LA(1);

			if ((LA179_1==MONKEYS_AT))
			{
				alt179 = 1;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:302:14: annotations
				{
				DebugLocation(302, 14);
				PushFollow(Follow._annotations_in_synpred2_Java107);
				annotations();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(179); }

			DebugLocation(304, 13);
			PushFollow(Follow._packageDeclaration_in_synpred2_Java136);
			packageDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Java_fragment", 120);
			LeaveRule("synpred2_Java_fragment", 120);
			LeaveRule_synpred2_Java_fragment();
		}
	}
	// $ANTLR end synpred2_Java

	partial void EnterRule_synpred12_Java_fragment();
	partial void LeaveRule_synpred12_Java_fragment();

	// $ANTLR start synpred12_Java
	private void synpred12_Java_fragment()
	{
		EnterRule_synpred12_Java_fragment();
		EnterRule("synpred12_Java_fragment", 130);
		TraceIn("synpred12_Java_fragment", 130);
		try
		{
			// Java.g:346:10: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:346:10: classDeclaration
			{
			DebugLocation(346, 10);
			PushFollow(Follow._classDeclaration_in_synpred12_Java494);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_Java_fragment", 130);
			LeaveRule("synpred12_Java_fragment", 130);
			LeaveRule_synpred12_Java_fragment();
		}
	}
	// $ANTLR end synpred12_Java

	partial void EnterRule_synpred27_Java_fragment();
	partial void LeaveRule_synpred27_Java_fragment();

	// $ANTLR start synpred27_Java
	private void synpred27_Java_fragment()
	{
		EnterRule_synpred27_Java_fragment();
		EnterRule("synpred27_Java_fragment", 145);
		TraceIn("synpred27_Java_fragment", 145);
		try
		{
			// Java.g:377:9: ( normalClassDeclaration )
			DebugEnterAlt(1);
			// Java.g:377:9: normalClassDeclaration
			{
			DebugLocation(377, 9);
			PushFollow(Follow._normalClassDeclaration_in_synpred27_Java731);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_Java_fragment", 145);
			LeaveRule("synpred27_Java_fragment", 145);
			LeaveRule_synpred27_Java_fragment();
		}
	}
	// $ANTLR end synpred27_Java

	partial void EnterRule_synpred43_Java_fragment();
	partial void LeaveRule_synpred43_Java_fragment();

	// $ANTLR start synpred43_Java
	private void synpred43_Java_fragment()
	{
		EnterRule_synpred43_Java_fragment();
		EnterRule("synpred43_Java_fragment", 161);
		TraceIn("synpred43_Java_fragment", 161);
		try
		{
			// Java.g:465:9: ( normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:465:9: normalInterfaceDeclaration
			{
			DebugLocation(465, 9);
			PushFollow(Follow._normalInterfaceDeclaration_in_synpred43_Java1410);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred43_Java_fragment", 161);
			LeaveRule("synpred43_Java_fragment", 161);
			LeaveRule_synpred43_Java_fragment();
		}
	}
	// $ANTLR end synpred43_Java

	partial void EnterRule_synpred52_Java_fragment();
	partial void LeaveRule_synpred52_Java_fragment();

	// $ANTLR start synpred52_Java
	private void synpred52_Java_fragment()
	{
		EnterRule_synpred52_Java_fragment();
		EnterRule("synpred52_Java_fragment", 170);
		TraceIn("synpred52_Java_fragment", 170);
		try
		{
			// Java.g:507:10: ( fieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:507:10: fieldDeclaration
			{
			DebugLocation(507, 10);
			PushFollow(Follow._fieldDeclaration_in_synpred52_Java1740);
			fieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred52_Java_fragment", 170);
			LeaveRule("synpred52_Java_fragment", 170);
			LeaveRule_synpred52_Java_fragment();
		}
	}
	// $ANTLR end synpred52_Java

	partial void EnterRule_synpred53_Java_fragment();
	partial void LeaveRule_synpred53_Java_fragment();

	// $ANTLR start synpred53_Java
	private void synpred53_Java_fragment()
	{
		EnterRule_synpred53_Java_fragment();
		EnterRule("synpred53_Java_fragment", 171);
		TraceIn("synpred53_Java_fragment", 171);
		try
		{
			// Java.g:508:10: ( methodDeclaration )
			DebugEnterAlt(1);
			// Java.g:508:10: methodDeclaration
			{
			DebugLocation(508, 10);
			PushFollow(Follow._methodDeclaration_in_synpred53_Java1751);
			methodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_Java_fragment", 171);
			LeaveRule("synpred53_Java_fragment", 171);
			LeaveRule_synpred53_Java_fragment();
		}
	}
	// $ANTLR end synpred53_Java

	partial void EnterRule_synpred54_Java_fragment();
	partial void LeaveRule_synpred54_Java_fragment();

	// $ANTLR start synpred54_Java
	private void synpred54_Java_fragment()
	{
		EnterRule_synpred54_Java_fragment();
		EnterRule("synpred54_Java_fragment", 172);
		TraceIn("synpred54_Java_fragment", 172);
		try
		{
			// Java.g:509:10: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:509:10: classDeclaration
			{
			DebugLocation(509, 10);
			PushFollow(Follow._classDeclaration_in_synpred54_Java1762);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_Java_fragment", 172);
			LeaveRule("synpred54_Java_fragment", 172);
			LeaveRule_synpred54_Java_fragment();
		}
	}
	// $ANTLR end synpred54_Java

	partial void EnterRule_synpred57_Java_fragment();
	partial void LeaveRule_synpred57_Java_fragment();

	// $ANTLR start synpred57_Java
	private void synpred57_Java_fragment()
	{
		EnterRule_synpred57_Java_fragment();
		EnterRule("synpred57_Java_fragment", 175);
		TraceIn("synpred57_Java_fragment", 175);
		try
		{
			// Java.g:525:10: ( explicitConstructorInvocation )
			DebugEnterAlt(1);
			// Java.g:525:10: explicitConstructorInvocation
			{
			DebugLocation(525, 10);
			PushFollow(Follow._explicitConstructorInvocation_in_synpred57_Java1899);
			explicitConstructorInvocation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred57_Java_fragment", 175);
			LeaveRule("synpred57_Java_fragment", 175);
			LeaveRule_synpred57_Java_fragment();
		}
	}
	// $ANTLR end synpred57_Java

	partial void EnterRule_synpred59_Java_fragment();
	partial void LeaveRule_synpred59_Java_fragment();

	// $ANTLR start synpred59_Java
	private void synpred59_Java_fragment()
	{
		EnterRule_synpred59_Java_fragment();
		EnterRule("synpred59_Java_fragment", 177);
		TraceIn("synpred59_Java_fragment", 177);
		try
		{
			// Java.g:517:10: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' )
			DebugEnterAlt(1);
			// Java.g:517:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
			{
			DebugLocation(517, 10);
			PushFollow(Follow._modifiers_in_synpred59_Java1811);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(518, 9);
			// Java.g:518:9: ( typeParameters )?
			int alt182=2;
			try { DebugEnterSubRule(182);
			try { DebugEnterDecision(182, false);
			int LA182_1 = input.LA(1);

			if ((LA182_1==LT))
			{
				alt182 = 1;
			}
			} finally { DebugExitDecision(182); }
			switch (alt182)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:518:10: typeParameters
				{
				DebugLocation(518, 10);
				PushFollow(Follow._typeParameters_in_synpred59_Java1822);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(182); }

			DebugLocation(520, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred59_Java1843); if (state.failed) return;
			DebugLocation(521, 9);
			PushFollow(Follow._formalParameters_in_synpred59_Java1853);
			formalParameters();
			PopFollow();
			if (state.failed) return;
			DebugLocation(522, 9);
			// Java.g:522:9: ( 'throws' qualifiedNameList )?
			int alt183=2;
			try { DebugEnterSubRule(183);
			try { DebugEnterDecision(183, false);
			int LA183_1 = input.LA(1);

			if ((LA183_1==THROWS))
			{
				alt183 = 1;
			}
			} finally { DebugExitDecision(183); }
			switch (alt183)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:522:10: 'throws' qualifiedNameList
				{
				DebugLocation(522, 10);
				Match(input,THROWS,Follow._THROWS_in_synpred59_Java1864); if (state.failed) return;
				DebugLocation(522, 19);
				PushFollow(Follow._qualifiedNameList_in_synpred59_Java1866);
				qualifiedNameList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(183); }

			DebugLocation(524, 9);
			Match(input,LBRACE,Follow._LBRACE_in_synpred59_Java1887); if (state.failed) return;
			DebugLocation(525, 9);
			// Java.g:525:9: ( explicitConstructorInvocation )?
			int alt184=2;
			try { DebugEnterSubRule(184);
			try { DebugEnterDecision(184, false);
			switch (input.LA(1))
			{
			case LT:
				{
				alt184 = 1;
				}
				break;
			case THIS:
				{
				int LA184_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt184 = 1;
				}
				}
				break;
			case LPAREN:
				{
				int LA184_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt184 = 1;
				}
				}
				break;
			case SUPER:
				{
				int LA184_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt184 = 1;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA184_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt184 = 1;
				}
				}
				break;
			case BooleanLiteral:
			case CharacterLiteral:
			case FloatingPointLiteral:
			case IntegerLiteral:
			case NullLiteral:
			case StringLiteral:
				{
				int LA184_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt184 = 1;
				}
				}
				break;
			case NEW:
				{
				int LA184_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt184 = 1;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA184_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt184 = 1;
				}
				}
				break;
			case VOID:
				{
				int LA184_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt184 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(184); }
			switch (alt184)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:525:10: explicitConstructorInvocation
				{
				DebugLocation(525, 10);
				PushFollow(Follow._explicitConstructorInvocation_in_synpred59_Java1899);
				explicitConstructorInvocation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(184); }

			DebugLocation(527, 9);
			// Java.g:527:9: ( blockStatement )*
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=2;
				try { DebugEnterDecision(185, false);
				int LA185_1 = input.LA(1);

				if ((LA185_1==EOF||LA185_1==ABSTRACT||(LA185_1>=ASSERT && LA185_1<=BANG)||(LA185_1>=BOOLEAN && LA185_1<=BYTE)||LA185_1==BooleanLiteral||(LA185_1>=CHAR && LA185_1<=CLASS)||(LA185_1>=CONTINUE && LA185_1<=CharacterLiteral)||LA185_1==DO||LA185_1==DOUBLE||LA185_1==ENUM||LA185_1==FINAL||(LA185_1>=FLOAT && LA185_1<=FOR)||LA185_1==FloatingPointLiteral||(LA185_1>=IDENTIFIER && LA185_1<=IF)||(LA185_1>=INT && LA185_1<=INTERFACE)||LA185_1==IntegerLiteral||LA185_1==LBRACE||(LA185_1>=LONG && LA185_1<=NEW)||LA185_1==NullLiteral||LA185_1==PLUS||(LA185_1>=PLUSPLUS && LA185_1<=PUBLIC)||LA185_1==RETURN||(LA185_1>=SEMI && LA185_1<=SHORT)||(LA185_1>=STATIC && LA185_1<=SUB)||(LA185_1>=SUBSUB && LA185_1<=SYNCHRONIZED)||LA185_1==StringLiteral||(LA185_1>=THIS && LA185_1<=THROW)||(LA185_1>=TILDE && LA185_1<=TRY)||(LA185_1>=VOID && LA185_1<=WHILE)))
				{
					alt185 = 1;
				}


				} finally { DebugExitDecision(185); }
				switch ( alt185 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:527:10: blockStatement
					{
					DebugLocation(527, 10);
					PushFollow(Follow._blockStatement_in_synpred59_Java1921);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop185;
				}
			}

			loop185:
				;

			} finally { DebugExitSubRule(185); }

			DebugLocation(529, 9);
			Match(input,RBRACE,Follow._RBRACE_in_synpred59_Java1942); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_Java_fragment", 177);
			LeaveRule("synpred59_Java_fragment", 177);
			LeaveRule_synpred59_Java_fragment();
		}
	}
	// $ANTLR end synpred59_Java

	partial void EnterRule_synpred68_Java_fragment();
	partial void LeaveRule_synpred68_Java_fragment();

	// $ANTLR start synpred68_Java
	private void synpred68_Java_fragment()
	{
		EnterRule_synpred68_Java_fragment();
		EnterRule("synpred68_Java_fragment", 186);
		TraceIn("synpred68_Java_fragment", 186);
		try
		{
			// Java.g:571:9: ( interfaceFieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:571:9: interfaceFieldDeclaration
			{
			DebugLocation(571, 9);
			PushFollow(Follow._interfaceFieldDeclaration_in_synpred68_Java2317);
			interfaceFieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_Java_fragment", 186);
			LeaveRule("synpred68_Java_fragment", 186);
			LeaveRule_synpred68_Java_fragment();
		}
	}
	// $ANTLR end synpred68_Java

	partial void EnterRule_synpred69_Java_fragment();
	partial void LeaveRule_synpred69_Java_fragment();

	// $ANTLR start synpred69_Java
	private void synpred69_Java_fragment()
	{
		EnterRule_synpred69_Java_fragment();
		EnterRule("synpred69_Java_fragment", 187);
		TraceIn("synpred69_Java_fragment", 187);
		try
		{
			// Java.g:572:9: ( interfaceMethodDeclaration )
			DebugEnterAlt(1);
			// Java.g:572:9: interfaceMethodDeclaration
			{
			DebugLocation(572, 9);
			PushFollow(Follow._interfaceMethodDeclaration_in_synpred69_Java2327);
			interfaceMethodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred69_Java_fragment", 187);
			LeaveRule("synpred69_Java_fragment", 187);
			LeaveRule_synpred69_Java_fragment();
		}
	}
	// $ANTLR end synpred69_Java

	partial void EnterRule_synpred70_Java_fragment();
	partial void LeaveRule_synpred70_Java_fragment();

	// $ANTLR start synpred70_Java
	private void synpred70_Java_fragment()
	{
		EnterRule_synpred70_Java_fragment();
		EnterRule("synpred70_Java_fragment", 188);
		TraceIn("synpred70_Java_fragment", 188);
		try
		{
			// Java.g:573:9: ( interfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:573:9: interfaceDeclaration
			{
			DebugLocation(573, 9);
			PushFollow(Follow._interfaceDeclaration_in_synpred70_Java2337);
			interfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred70_Java_fragment", 188);
			LeaveRule("synpred70_Java_fragment", 188);
			LeaveRule_synpred70_Java_fragment();
		}
	}
	// $ANTLR end synpred70_Java

	partial void EnterRule_synpred71_Java_fragment();
	partial void LeaveRule_synpred71_Java_fragment();

	// $ANTLR start synpred71_Java
	private void synpred71_Java_fragment()
	{
		EnterRule_synpred71_Java_fragment();
		EnterRule("synpred71_Java_fragment", 189);
		TraceIn("synpred71_Java_fragment", 189);
		try
		{
			// Java.g:574:9: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:574:9: classDeclaration
			{
			DebugLocation(574, 9);
			PushFollow(Follow._classDeclaration_in_synpred71_Java2347);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred71_Java_fragment", 189);
			LeaveRule("synpred71_Java_fragment", 189);
			LeaveRule_synpred71_Java_fragment();
		}
	}
	// $ANTLR end synpred71_Java

	partial void EnterRule_synpred99_Java_fragment();
	partial void LeaveRule_synpred99_Java_fragment();

	// $ANTLR start synpred99_Java
	private void synpred99_Java_fragment()
	{
		EnterRule_synpred99_Java_fragment();
		EnterRule("synpred99_Java_fragment", 217);
		TraceIn("synpred99_Java_fragment", 217);
		try
		{
			// Java.g:678:9: ( ellipsisParameterDecl )
			DebugEnterAlt(1);
			// Java.g:678:9: ellipsisParameterDecl
			{
			DebugLocation(678, 9);
			PushFollow(Follow._ellipsisParameterDecl_in_synpred99_Java3181);
			ellipsisParameterDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Java_fragment", 217);
			LeaveRule("synpred99_Java_fragment", 217);
			LeaveRule_synpred99_Java_fragment();
		}
	}
	// $ANTLR end synpred99_Java

	partial void EnterRule_synpred101_Java_fragment();
	partial void LeaveRule_synpred101_Java_fragment();

	// $ANTLR start synpred101_Java
	private void synpred101_Java_fragment()
	{
		EnterRule_synpred101_Java_fragment();
		EnterRule("synpred101_Java_fragment", 219);
		TraceIn("synpred101_Java_fragment", 219);
		try
		{
			// Java.g:679:9: ( normalParameterDecl ( ',' normalParameterDecl )* )
			DebugEnterAlt(1);
			// Java.g:679:9: normalParameterDecl ( ',' normalParameterDecl )*
			{
			DebugLocation(679, 9);
			PushFollow(Follow._normalParameterDecl_in_synpred101_Java3191);
			normalParameterDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(680, 9);
			// Java.g:680:9: ( ',' normalParameterDecl )*
			try { DebugEnterSubRule(189);
			while (true)
			{
				int alt189=2;
				try { DebugEnterDecision(189, false);
				int LA189_1 = input.LA(1);

				if ((LA189_1==COMMA))
				{
					alt189 = 1;
				}


				} finally { DebugExitDecision(189); }
				switch ( alt189 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:680:10: ',' normalParameterDecl
					{
					DebugLocation(680, 10);
					Match(input,COMMA,Follow._COMMA_in_synpred101_Java3202); if (state.failed) return;
					DebugLocation(680, 14);
					PushFollow(Follow._normalParameterDecl_in_synpred101_Java3204);
					normalParameterDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop189;
				}
			}

			loop189:
				;

			} finally { DebugExitSubRule(189); }


			}

		}
		finally
		{
			TraceOut("synpred101_Java_fragment", 219);
			LeaveRule("synpred101_Java_fragment", 219);
			LeaveRule_synpred101_Java_fragment();
		}
	}
	// $ANTLR end synpred101_Java

	partial void EnterRule_synpred102_Java_fragment();
	partial void LeaveRule_synpred102_Java_fragment();

	// $ANTLR start synpred102_Java
	private void synpred102_Java_fragment()
	{
		EnterRule_synpred102_Java_fragment();
		EnterRule("synpred102_Java_fragment", 220);
		TraceIn("synpred102_Java_fragment", 220);
		try
		{
			// Java.g:682:10: ( normalParameterDecl ',' )
			DebugEnterAlt(1);
			// Java.g:682:10: normalParameterDecl ','
			{
			DebugLocation(682, 10);
			PushFollow(Follow._normalParameterDecl_in_synpred102_Java3226);
			normalParameterDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(683, 9);
			Match(input,COMMA,Follow._COMMA_in_synpred102_Java3236); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred102_Java_fragment", 220);
			LeaveRule("synpred102_Java_fragment", 220);
			LeaveRule_synpred102_Java_fragment();
		}
	}
	// $ANTLR end synpred102_Java

	partial void EnterRule_synpred106_Java_fragment();
	partial void LeaveRule_synpred106_Java_fragment();

	// $ANTLR start synpred106_Java
	private void synpred106_Java_fragment()
	{
		EnterRule_synpred106_Java_fragment();
		EnterRule("synpred106_Java_fragment", 224);
		TraceIn("synpred106_Java_fragment", 224);
		try
		{
			// Java.g:702:9: ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' )
			DebugEnterAlt(1);
			// Java.g:702:9: ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';'
			{
			DebugLocation(702, 9);
			// Java.g:702:9: ( nonWildcardTypeArguments )?
			int alt190=2;
			try { DebugEnterSubRule(190);
			try { DebugEnterDecision(190, false);
			int LA190_1 = input.LA(1);

			if ((LA190_1==LT))
			{
				alt190 = 1;
			}
			} finally { DebugExitDecision(190); }
			switch (alt190)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:702:10: nonWildcardTypeArguments
				{
				DebugLocation(702, 10);
				PushFollow(Follow._nonWildcardTypeArguments_in_synpred106_Java3371);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(190); }

			DebugLocation(704, 9);
			if (input.LA(1)==SUPER||input.LA(1)==THIS)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(707, 9);
			PushFollow(Follow._arguments_in_synpred106_Java3429);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(707, 19);
			Match(input,SEMI,Follow._SEMI_in_synpred106_Java3431); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred106_Java_fragment", 224);
			LeaveRule("synpred106_Java_fragment", 224);
			LeaveRule_synpred106_Java_fragment();
		}
	}
	// $ANTLR end synpred106_Java

	partial void EnterRule_synpred120_Java_fragment();
	partial void LeaveRule_synpred120_Java_fragment();

	// $ANTLR start synpred120_Java
	private void synpred120_Java_fragment()
	{
		EnterRule_synpred120_Java_fragment();
		EnterRule("synpred120_Java_fragment", 238);
		TraceIn("synpred120_Java_fragment", 238);
		try
		{
			// Java.g:789:9: ( annotationMethodDeclaration )
			DebugEnterAlt(1);
			// Java.g:789:9: annotationMethodDeclaration
			{
			DebugLocation(789, 9);
			PushFollow(Follow._annotationMethodDeclaration_in_synpred120_Java4030);
			annotationMethodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred120_Java_fragment", 238);
			LeaveRule("synpred120_Java_fragment", 238);
			LeaveRule_synpred120_Java_fragment();
		}
	}
	// $ANTLR end synpred120_Java

	partial void EnterRule_synpred121_Java_fragment();
	partial void LeaveRule_synpred121_Java_fragment();

	// $ANTLR start synpred121_Java
	private void synpred121_Java_fragment()
	{
		EnterRule_synpred121_Java_fragment();
		EnterRule("synpred121_Java_fragment", 239);
		TraceIn("synpred121_Java_fragment", 239);
		try
		{
			// Java.g:790:9: ( interfaceFieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:790:9: interfaceFieldDeclaration
			{
			DebugLocation(790, 9);
			PushFollow(Follow._interfaceFieldDeclaration_in_synpred121_Java4040);
			interfaceFieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_Java_fragment", 239);
			LeaveRule("synpred121_Java_fragment", 239);
			LeaveRule_synpred121_Java_fragment();
		}
	}
	// $ANTLR end synpred121_Java

	partial void EnterRule_synpred122_Java_fragment();
	partial void LeaveRule_synpred122_Java_fragment();

	// $ANTLR start synpred122_Java
	private void synpred122_Java_fragment()
	{
		EnterRule_synpred122_Java_fragment();
		EnterRule("synpred122_Java_fragment", 240);
		TraceIn("synpred122_Java_fragment", 240);
		try
		{
			// Java.g:791:9: ( normalClassDeclaration )
			DebugEnterAlt(1);
			// Java.g:791:9: normalClassDeclaration
			{
			DebugLocation(791, 9);
			PushFollow(Follow._normalClassDeclaration_in_synpred122_Java4050);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred122_Java_fragment", 240);
			LeaveRule("synpred122_Java_fragment", 240);
			LeaveRule_synpred122_Java_fragment();
		}
	}
	// $ANTLR end synpred122_Java

	partial void EnterRule_synpred123_Java_fragment();
	partial void LeaveRule_synpred123_Java_fragment();

	// $ANTLR start synpred123_Java
	private void synpred123_Java_fragment()
	{
		EnterRule_synpred123_Java_fragment();
		EnterRule("synpred123_Java_fragment", 241);
		TraceIn("synpred123_Java_fragment", 241);
		try
		{
			// Java.g:792:9: ( normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:792:9: normalInterfaceDeclaration
			{
			DebugLocation(792, 9);
			PushFollow(Follow._normalInterfaceDeclaration_in_synpred123_Java4060);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred123_Java_fragment", 241);
			LeaveRule("synpred123_Java_fragment", 241);
			LeaveRule_synpred123_Java_fragment();
		}
	}
	// $ANTLR end synpred123_Java

	partial void EnterRule_synpred124_Java_fragment();
	partial void LeaveRule_synpred124_Java_fragment();

	// $ANTLR start synpred124_Java
	private void synpred124_Java_fragment()
	{
		EnterRule_synpred124_Java_fragment();
		EnterRule("synpred124_Java_fragment", 242);
		TraceIn("synpred124_Java_fragment", 242);
		try
		{
			// Java.g:793:9: ( enumDeclaration )
			DebugEnterAlt(1);
			// Java.g:793:9: enumDeclaration
			{
			DebugLocation(793, 9);
			PushFollow(Follow._enumDeclaration_in_synpred124_Java4070);
			enumDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred124_Java_fragment", 242);
			LeaveRule("synpred124_Java_fragment", 242);
			LeaveRule_synpred124_Java_fragment();
		}
	}
	// $ANTLR end synpred124_Java

	partial void EnterRule_synpred125_Java_fragment();
	partial void LeaveRule_synpred125_Java_fragment();

	// $ANTLR start synpred125_Java
	private void synpred125_Java_fragment()
	{
		EnterRule_synpred125_Java_fragment();
		EnterRule("synpred125_Java_fragment", 243);
		TraceIn("synpred125_Java_fragment", 243);
		try
		{
			// Java.g:794:9: ( annotationTypeDeclaration )
			DebugEnterAlt(1);
			// Java.g:794:9: annotationTypeDeclaration
			{
			DebugLocation(794, 9);
			PushFollow(Follow._annotationTypeDeclaration_in_synpred125_Java4080);
			annotationTypeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred125_Java_fragment", 243);
			LeaveRule("synpred125_Java_fragment", 243);
			LeaveRule_synpred125_Java_fragment();
		}
	}
	// $ANTLR end synpred125_Java

	partial void EnterRule_synpred128_Java_fragment();
	partial void LeaveRule_synpred128_Java_fragment();

	// $ANTLR start synpred128_Java
	private void synpred128_Java_fragment()
	{
		EnterRule_synpred128_Java_fragment();
		EnterRule("synpred128_Java_fragment", 246);
		TraceIn("synpred128_Java_fragment", 246);
		try
		{
			// Java.g:837:9: ( localVariableDeclarationStatement )
			DebugEnterAlt(1);
			// Java.g:837:9: localVariableDeclarationStatement
			{
			DebugLocation(837, 9);
			PushFollow(Follow._localVariableDeclarationStatement_in_synpred128_Java4238);
			localVariableDeclarationStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred128_Java_fragment", 246);
			LeaveRule("synpred128_Java_fragment", 246);
			LeaveRule_synpred128_Java_fragment();
		}
	}
	// $ANTLR end synpred128_Java

	partial void EnterRule_synpred129_Java_fragment();
	partial void LeaveRule_synpred129_Java_fragment();

	// $ANTLR start synpred129_Java
	private void synpred129_Java_fragment()
	{
		EnterRule_synpred129_Java_fragment();
		EnterRule("synpred129_Java_fragment", 247);
		TraceIn("synpred129_Java_fragment", 247);
		try
		{
			// Java.g:838:9: ( classOrInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:838:9: classOrInterfaceDeclaration
			{
			DebugLocation(838, 9);
			PushFollow(Follow._classOrInterfaceDeclaration_in_synpred129_Java4248);
			classOrInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred129_Java_fragment", 247);
			LeaveRule("synpred129_Java_fragment", 247);
			LeaveRule_synpred129_Java_fragment();
		}
	}
	// $ANTLR end synpred129_Java

	partial void EnterRule_synpred135_Java_fragment();
	partial void LeaveRule_synpred135_Java_fragment();

	// $ANTLR start synpred135_Java
	private void synpred135_Java_fragment()
	{
		EnterRule_synpred135_Java_fragment();
		EnterRule("synpred135_Java_fragment", 253);
		TraceIn("synpred135_Java_fragment", 253);
		try
		{
			// Java.g:860:39: ( 'else' statement )
			DebugEnterAlt(1);
			// Java.g:860:39: 'else' statement
			{
			DebugLocation(860, 39);
			Match(input,ELSE,Follow._ELSE_in_synpred135_Java4424); if (state.failed) return;
			DebugLocation(860, 46);
			PushFollow(Follow._statement_in_synpred135_Java4426);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred135_Java_fragment", 253);
			LeaveRule("synpred135_Java_fragment", 253);
			LeaveRule_synpred135_Java_fragment();
		}
	}
	// $ANTLR end synpred135_Java

	partial void EnterRule_synpred155_Java_fragment();
	partial void LeaveRule_synpred155_Java_fragment();

	// $ANTLR start synpred155_Java
	private void synpred155_Java_fragment()
	{
		EnterRule_synpred155_Java_fragment();
		EnterRule("synpred155_Java_fragment", 273);
		TraceIn("synpred155_Java_fragment", 273);
		try
		{
			// Java.g:894:13: ( catches 'finally' block )
			DebugEnterAlt(1);
			// Java.g:894:13: catches 'finally' block
			{
			DebugLocation(894, 13);
			PushFollow(Follow._catches_in_synpred155_Java4777);
			catches();
			PopFollow();
			if (state.failed) return;
			DebugLocation(894, 21);
			Match(input,FINALLY,Follow._FINALLY_in_synpred155_Java4779); if (state.failed) return;
			DebugLocation(894, 31);
			PushFollow(Follow._block_in_synpred155_Java4781);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred155_Java_fragment", 273);
			LeaveRule("synpred155_Java_fragment", 273);
			LeaveRule_synpred155_Java_fragment();
		}
	}
	// $ANTLR end synpred155_Java

	partial void EnterRule_synpred156_Java_fragment();
	partial void LeaveRule_synpred156_Java_fragment();

	// $ANTLR start synpred156_Java
	private void synpred156_Java_fragment()
	{
		EnterRule_synpred156_Java_fragment();
		EnterRule("synpred156_Java_fragment", 274);
		TraceIn("synpred156_Java_fragment", 274);
		try
		{
			// Java.g:895:13: ( catches )
			DebugEnterAlt(1);
			// Java.g:895:13: catches
			{
			DebugLocation(895, 13);
			PushFollow(Follow._catches_in_synpred156_Java4795);
			catches();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred156_Java_fragment", 274);
			LeaveRule("synpred156_Java_fragment", 274);
			LeaveRule_synpred156_Java_fragment();
		}
	}
	// $ANTLR end synpred156_Java

	partial void EnterRule_synpred159_Java_fragment();
	partial void LeaveRule_synpred159_Java_fragment();

	// $ANTLR start synpred159_Java
	private void synpred159_Java_fragment()
	{
		EnterRule_synpred159_Java_fragment();
		EnterRule("synpred159_Java_fragment", 277);
		TraceIn("synpred159_Java_fragment", 277);
		try
		{
			// Java.g:912:9: ( variableModifiers catchType IDENTIFIER ( '[' ']' )* )
			DebugEnterAlt(1);
			// Java.g:912:9: variableModifiers catchType IDENTIFIER ( '[' ']' )*
			{
			DebugLocation(912, 9);
			PushFollow(Follow._variableModifiers_in_synpred159_Java4921);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(912, 27);
			PushFollow(Follow._catchType_in_synpred159_Java4923);
			catchType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(912, 37);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred159_Java4925); if (state.failed) return;
			DebugLocation(913, 9);
			// Java.g:913:9: ( '[' ']' )*
			try { DebugEnterSubRule(198);
			while (true)
			{
				int alt198=2;
				try { DebugEnterDecision(198, false);
				int LA198_1 = input.LA(1);

				if ((LA198_1==LBRACKET))
				{
					alt198 = 1;
				}


				} finally { DebugExitDecision(198); }
				switch ( alt198 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:913:10: '[' ']'
					{
					DebugLocation(913, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_synpred159_Java4936); if (state.failed) return;
					DebugLocation(913, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_synpred159_Java4938); if (state.failed) return;

					}
					break;

				default:
					goto loop198;
				}
			}

			loop198:
				;

			} finally { DebugExitSubRule(198); }


			}

		}
		finally
		{
			TraceOut("synpred159_Java_fragment", 277);
			LeaveRule("synpred159_Java_fragment", 277);
			LeaveRule_synpred159_Java_fragment();
		}
	}
	// $ANTLR end synpred159_Java

	partial void EnterRule_synpred166_Java_fragment();
	partial void LeaveRule_synpred166_Java_fragment();

	// $ANTLR start synpred166_Java
	private void synpred166_Java_fragment()
	{
		EnterRule_synpred166_Java_fragment();
		EnterRule("synpred166_Java_fragment", 284);
		TraceIn("synpred166_Java_fragment", 284);
		try
		{
			// Java.g:939:10: ( variableModifiers )
			DebugEnterAlt(1);
			// Java.g:939:10: variableModifiers
			{
			DebugLocation(939, 10);
			PushFollow(Follow._variableModifiers_in_synpred166_Java5139);
			variableModifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred166_Java_fragment", 284);
			LeaveRule("synpred166_Java_fragment", 284);
			LeaveRule_synpred166_Java_fragment();
		}
	}
	// $ANTLR end synpred166_Java

	partial void EnterRule_synpred168_Java_fragment();
	partial void LeaveRule_synpred168_Java_fragment();

	// $ANTLR start synpred168_Java
	private void synpred168_Java_fragment()
	{
		EnterRule_synpred168_Java_fragment();
		EnterRule("synpred168_Java_fragment", 286);
		TraceIn("synpred168_Java_fragment", 286);
		try
		{
			// Java.g:945:9: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement )
			DebugEnterAlt(1);
			// Java.g:945:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
			{
			DebugLocation(945, 9);
			Match(input,FOR,Follow._FOR_in_synpred168_Java5194); if (state.failed) return;
			DebugLocation(945, 15);
			Match(input,LPAREN,Follow._LPAREN_in_synpred168_Java5196); if (state.failed) return;
			DebugLocation(945, 19);
			PushFollow(Follow._variableModifiers_in_synpred168_Java5198);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(945, 37);
			PushFollow(Follow._type_in_synpred168_Java5200);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(945, 42);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred168_Java5202); if (state.failed) return;
			DebugLocation(945, 53);
			Match(input,COLON,Follow._COLON_in_synpred168_Java5204); if (state.failed) return;
			DebugLocation(946, 9);
			PushFollow(Follow._expression_in_synpred168_Java5215);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(946, 20);
			Match(input,RPAREN,Follow._RPAREN_in_synpred168_Java5217); if (state.failed) return;
			DebugLocation(946, 24);
			PushFollow(Follow._statement_in_synpred168_Java5219);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred168_Java_fragment", 286);
			LeaveRule("synpred168_Java_fragment", 286);
			LeaveRule_synpred168_Java_fragment();
		}
	}
	// $ANTLR end synpred168_Java

	partial void EnterRule_synpred172_Java_fragment();
	partial void LeaveRule_synpred172_Java_fragment();

	// $ANTLR start synpred172_Java
	private void synpred172_Java_fragment()
	{
		EnterRule_synpred172_Java_fragment();
		EnterRule("synpred172_Java_fragment", 290);
		TraceIn("synpred172_Java_fragment", 290);
		try
		{
			// Java.g:959:9: ( localVariableDeclaration )
			DebugEnterAlt(1);
			// Java.g:959:9: localVariableDeclaration
			{
			DebugLocation(959, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred172_Java5398);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred172_Java_fragment", 290);
			LeaveRule("synpred172_Java_fragment", 290);
			LeaveRule_synpred172_Java_fragment();
		}
	}
	// $ANTLR end synpred172_Java

	partial void EnterRule_synpred213_Java_fragment();
	partial void LeaveRule_synpred213_Java_fragment();

	// $ANTLR start synpred213_Java
	private void synpred213_Java_fragment()
	{
		EnterRule_synpred213_Java_fragment();
		EnterRule("synpred213_Java_fragment", 331);
		TraceIn("synpred213_Java_fragment", 331);
		try
		{
			// Java.g:1111:9: ( castExpression )
			DebugEnterAlt(1);
			// Java.g:1111:9: castExpression
			{
			DebugLocation(1111, 9);
			PushFollow(Follow._castExpression_in_synpred213_Java6626);
			castExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred213_Java_fragment", 331);
			LeaveRule("synpred213_Java_fragment", 331);
			LeaveRule_synpred213_Java_fragment();
		}
	}
	// $ANTLR end synpred213_Java

	partial void EnterRule_synpred217_Java_fragment();
	partial void LeaveRule_synpred217_Java_fragment();

	// $ANTLR start synpred217_Java
	private void synpred217_Java_fragment()
	{
		EnterRule_synpred217_Java_fragment();
		EnterRule("synpred217_Java_fragment", 335);
		TraceIn("synpred217_Java_fragment", 335);
		try
		{
			// Java.g:1121:9: ( '(' primitiveType ')' unaryExpression )
			DebugEnterAlt(1);
			// Java.g:1121:9: '(' primitiveType ')' unaryExpression
			{
			DebugLocation(1121, 9);
			Match(input,LPAREN,Follow._LPAREN_in_synpred217_Java6716); if (state.failed) return;
			DebugLocation(1121, 13);
			PushFollow(Follow._primitiveType_in_synpred217_Java6718);
			primitiveType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1121, 27);
			Match(input,RPAREN,Follow._RPAREN_in_synpred217_Java6720); if (state.failed) return;
			DebugLocation(1121, 31);
			PushFollow(Follow._unaryExpression_in_synpred217_Java6722);
			unaryExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred217_Java_fragment", 335);
			LeaveRule("synpred217_Java_fragment", 335);
			LeaveRule_synpred217_Java_fragment();
		}
	}
	// $ANTLR end synpred217_Java

	partial void EnterRule_synpred219_Java_fragment();
	partial void LeaveRule_synpred219_Java_fragment();

	// $ANTLR start synpred219_Java
	private void synpred219_Java_fragment()
	{
		EnterRule_synpred219_Java_fragment();
		EnterRule("synpred219_Java_fragment", 337);
		TraceIn("synpred219_Java_fragment", 337);
		try
		{
			// Java.g:1131:10: ( '.' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1131:10: '.' IDENTIFIER
			{
			DebugLocation(1131, 10);
			Match(input,DOT,Follow._DOT_in_synpred219_Java6792); if (state.failed) return;
			DebugLocation(1131, 14);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred219_Java6794); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred219_Java_fragment", 337);
			LeaveRule("synpred219_Java_fragment", 337);
			LeaveRule_synpred219_Java_fragment();
		}
	}
	// $ANTLR end synpred219_Java

	partial void EnterRule_synpred220_Java_fragment();
	partial void LeaveRule_synpred220_Java_fragment();

	// $ANTLR start synpred220_Java
	private void synpred220_Java_fragment()
	{
		EnterRule_synpred220_Java_fragment();
		EnterRule("synpred220_Java_fragment", 338);
		TraceIn("synpred220_Java_fragment", 338);
		try
		{
			// Java.g:1133:10: ( identifierSuffix )
			DebugEnterAlt(1);
			// Java.g:1133:10: identifierSuffix
			{
			DebugLocation(1133, 10);
			PushFollow(Follow._identifierSuffix_in_synpred220_Java6816);
			identifierSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred220_Java_fragment", 338);
			LeaveRule("synpred220_Java_fragment", 338);
			LeaveRule_synpred220_Java_fragment();
		}
	}
	// $ANTLR end synpred220_Java

	partial void EnterRule_synpred222_Java_fragment();
	partial void LeaveRule_synpred222_Java_fragment();

	// $ANTLR start synpred222_Java
	private void synpred222_Java_fragment()
	{
		EnterRule_synpred222_Java_fragment();
		EnterRule("synpred222_Java_fragment", 340);
		TraceIn("synpred222_Java_fragment", 340);
		try
		{
			// Java.g:1136:10: ( '.' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1136:10: '.' IDENTIFIER
			{
			DebugLocation(1136, 10);
			Match(input,DOT,Follow._DOT_in_synpred222_Java6848); if (state.failed) return;
			DebugLocation(1136, 14);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred222_Java6850); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred222_Java_fragment", 340);
			LeaveRule("synpred222_Java_fragment", 340);
			LeaveRule_synpred222_Java_fragment();
		}
	}
	// $ANTLR end synpred222_Java

	partial void EnterRule_synpred223_Java_fragment();
	partial void LeaveRule_synpred223_Java_fragment();

	// $ANTLR start synpred223_Java
	private void synpred223_Java_fragment()
	{
		EnterRule_synpred223_Java_fragment();
		EnterRule("synpred223_Java_fragment", 341);
		TraceIn("synpred223_Java_fragment", 341);
		try
		{
			// Java.g:1138:10: ( identifierSuffix )
			DebugEnterAlt(1);
			// Java.g:1138:10: identifierSuffix
			{
			DebugLocation(1138, 10);
			PushFollow(Follow._identifierSuffix_in_synpred223_Java6872);
			identifierSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred223_Java_fragment", 341);
			LeaveRule("synpred223_Java_fragment", 341);
			LeaveRule_synpred223_Java_fragment();
		}
	}
	// $ANTLR end synpred223_Java

	partial void EnterRule_synpred235_Java_fragment();
	partial void LeaveRule_synpred235_Java_fragment();

	// $ANTLR start synpred235_Java
	private void synpred235_Java_fragment()
	{
		EnterRule_synpred235_Java_fragment();
		EnterRule("synpred235_Java_fragment", 353);
		TraceIn("synpred235_Java_fragment", 353);
		try
		{
			// Java.g:1164:10: ( '[' expression ']' )
			DebugEnterAlt(1);
			// Java.g:1164:10: '[' expression ']'
			{
			DebugLocation(1164, 10);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred235_Java7114); if (state.failed) return;
			DebugLocation(1164, 14);
			PushFollow(Follow._expression_in_synpred235_Java7116);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1164, 25);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred235_Java7118); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred235_Java_fragment", 353);
			LeaveRule("synpred235_Java_fragment", 353);
			LeaveRule_synpred235_Java_fragment();
		}
	}
	// $ANTLR end synpred235_Java

	partial void EnterRule_synpred248_Java_fragment();
	partial void LeaveRule_synpred248_Java_fragment();

	// $ANTLR start synpred248_Java
	private void synpred248_Java_fragment()
	{
		EnterRule_synpred248_Java_fragment();
		EnterRule("synpred248_Java_fragment", 366);
		TraceIn("synpred248_Java_fragment", 366);
		try
		{
			// Java.g:1185:9: ( 'new' nonWildcardTypeArguments classOrInterfaceTypeWithDiamond classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1185:9: 'new' nonWildcardTypeArguments classOrInterfaceTypeWithDiamond classCreatorRest
			{
			DebugLocation(1185, 9);
			Match(input,NEW,Follow._NEW_in_synpred248_Java7321); if (state.failed) return;
			DebugLocation(1185, 15);
			PushFollow(Follow._nonWildcardTypeArguments_in_synpred248_Java7323);
			nonWildcardTypeArguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1185, 40);
			PushFollow(Follow._classOrInterfaceTypeWithDiamond_in_synpred248_Java7325);
			classOrInterfaceTypeWithDiamond();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1185, 72);
			PushFollow(Follow._classCreatorRest_in_synpred248_Java7327);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred248_Java_fragment", 366);
			LeaveRule("synpred248_Java_fragment", 366);
			LeaveRule_synpred248_Java_fragment();
		}
	}
	// $ANTLR end synpred248_Java

	partial void EnterRule_synpred249_Java_fragment();
	partial void LeaveRule_synpred249_Java_fragment();

	// $ANTLR start synpred249_Java
	private void synpred249_Java_fragment()
	{
		EnterRule_synpred249_Java_fragment();
		EnterRule("synpred249_Java_fragment", 367);
		TraceIn("synpred249_Java_fragment", 367);
		try
		{
			// Java.g:1186:9: ( 'new' classOrInterfaceTypeWithDiamond classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1186:9: 'new' classOrInterfaceTypeWithDiamond classCreatorRest
			{
			DebugLocation(1186, 9);
			Match(input,NEW,Follow._NEW_in_synpred249_Java7337); if (state.failed) return;
			DebugLocation(1186, 15);
			PushFollow(Follow._classOrInterfaceTypeWithDiamond_in_synpred249_Java7339);
			classOrInterfaceTypeWithDiamond();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1186, 47);
			PushFollow(Follow._classCreatorRest_in_synpred249_Java7341);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred249_Java_fragment", 367);
			LeaveRule("synpred249_Java_fragment", 367);
			LeaveRule_synpred249_Java_fragment();
		}
	}
	// $ANTLR end synpred249_Java

	partial void EnterRule_synpred251_Java_fragment();
	partial void LeaveRule_synpred251_Java_fragment();

	// $ANTLR start synpred251_Java
	private void synpred251_Java_fragment()
	{
		EnterRule_synpred251_Java_fragment();
		EnterRule("synpred251_Java_fragment", 369);
		TraceIn("synpred251_Java_fragment", 369);
		try
		{
			// Java.g:1191:9: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer )
			DebugEnterAlt(1);
			// Java.g:1191:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
			{
			DebugLocation(1191, 9);
			Match(input,NEW,Follow._NEW_in_synpred251_Java7370); if (state.failed) return;
			DebugLocation(1191, 15);
			PushFollow(Follow._createdName_in_synpred251_Java7372);
			createdName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1192, 9);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred251_Java7382); if (state.failed) return;
			DebugLocation(1192, 13);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred251_Java7384); if (state.failed) return;
			DebugLocation(1193, 9);
			// Java.g:1193:9: ( '[' ']' )*
			try { DebugEnterSubRule(207);
			while (true)
			{
				int alt207=2;
				try { DebugEnterDecision(207, false);
				int LA207_1 = input.LA(1);

				if ((LA207_1==LBRACKET))
				{
					alt207 = 1;
				}


				} finally { DebugExitDecision(207); }
				switch ( alt207 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1193:10: '[' ']'
					{
					DebugLocation(1193, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_synpred251_Java7395); if (state.failed) return;
					DebugLocation(1193, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_synpred251_Java7397); if (state.failed) return;

					}
					break;

				default:
					goto loop207;
				}
			}

			loop207:
				;

			} finally { DebugExitSubRule(207); }

			DebugLocation(1195, 9);
			PushFollow(Follow._arrayInitializer_in_synpred251_Java7418);
			arrayInitializer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred251_Java_fragment", 369);
			LeaveRule("synpred251_Java_fragment", 369);
			LeaveRule_synpred251_Java_fragment();
		}
	}
	// $ANTLR end synpred251_Java

	partial void EnterRule_synpred252_Java_fragment();
	partial void LeaveRule_synpred252_Java_fragment();

	// $ANTLR start synpred252_Java
	private void synpred252_Java_fragment()
	{
		EnterRule_synpred252_Java_fragment();
		EnterRule("synpred252_Java_fragment", 370);
		TraceIn("synpred252_Java_fragment", 370);
		try
		{
			// Java.g:1200:13: ( '[' expression ']' )
			DebugEnterAlt(1);
			// Java.g:1200:13: '[' expression ']'
			{
			DebugLocation(1200, 13);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred252_Java7467); if (state.failed) return;
			DebugLocation(1200, 17);
			PushFollow(Follow._expression_in_synpred252_Java7469);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1201, 13);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred252_Java7483); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred252_Java_fragment", 370);
			LeaveRule("synpred252_Java_fragment", 370);
			LeaveRule_synpred252_Java_fragment();
		}
	}
	// $ANTLR end synpred252_Java
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _annotations_in_compilationUnit107 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _packageDeclaration_in_compilationUnit136 = new BitSet(new ulong[]{0x102000040000012UL,0x41820E0003002400UL,0x1080UL});
		public static readonly BitSet _importDeclaration_in_compilationUnit158 = new BitSet(new ulong[]{0x102000040000012UL,0x41820E0003002400UL,0x1080UL});
		public static readonly BitSet _typeDeclaration_in_compilationUnit180 = new BitSet(new ulong[]{0x102000040000012UL,0x41820E0003002000UL,0x1080UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration211 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _qualifiedName_in_packageDeclaration213 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_packageDeclaration223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration244 = new BitSet(new ulong[]{0x0UL,0x80000000000080UL});
		public static readonly BitSet _STATIC_in_importDeclaration256 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration277 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _DOT_in_importDeclaration279 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _STAR_in_importDeclaration281 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_importDeclaration291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration308 = new BitSet(new ulong[]{0x0UL,0x80000000000080UL});
		public static readonly BitSet _STATIC_in_importDeclaration320 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration341 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _DOT_in_importDeclaration352 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration354 = new BitSet(new ulong[]{0x8000000000UL,0x2000000000000UL});
		public static readonly BitSet _DOT_in_importDeclaration376 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _STAR_in_importDeclaration378 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_importDeclaration399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedImportName419 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _DOT_in_qualifiedImportName430 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedImportName432 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_typeDeclaration463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_typeDeclaration473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_classOrInterfaceDeclaration494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_classOrInterfaceDeclaration504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_modifiers539 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _PUBLIC_in_modifiers549 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _PROTECTED_in_modifiers559 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _PRIVATE_in_modifiers569 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _STATIC_in_modifiers579 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _ABSTRACT_in_modifiers589 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _FINAL_in_modifiers599 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _NATIVE_in_modifiers609 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifiers619 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _TRANSIENT_in_modifiers629 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _VOLATILE_in_modifiers639 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _STRICTFP_in_modifiers649 = new BitSet(new ulong[]{0x100000000000012UL,0x41800E0003000000UL,0x1080UL});
		public static readonly BitSet _FINAL_in_variableModifiers681 = new BitSet(new ulong[]{0x100000000000002UL,0x1000000UL});
		public static readonly BitSet _annotation_in_variableModifiers695 = new BitSet(new ulong[]{0x100000000000002UL,0x1000000UL});
		public static readonly BitSet _normalClassDeclaration_in_classDeclaration731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_classDeclaration741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_normalClassDeclaration761 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _CLASS_in_normalClassDeclaration764 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_normalClassDeclaration766 = new BitSet(new ulong[]{0x10000000000000UL,0x840200UL});
		public static readonly BitSet _typeParameters_in_normalClassDeclaration777 = new BitSet(new ulong[]{0x10000000000000UL,0x40200UL});
		public static readonly BitSet _EXTENDS_in_normalClassDeclaration799 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_normalClassDeclaration801 = new BitSet(new ulong[]{0x0UL,0x40200UL});
		public static readonly BitSet _IMPLEMENTS_in_normalClassDeclaration823 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _typeList_in_normalClassDeclaration825 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _classBody_in_normalClassDeclaration858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_typeParameters879 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _typeParameter_in_typeParameters893 = new BitSet(new ulong[]{0x8000000100000000UL});
		public static readonly BitSet _COMMA_in_typeParameters908 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _typeParameter_in_typeParameters910 = new BitSet(new ulong[]{0x8000000100000000UL});
		public static readonly BitSet _GT_in_typeParameters935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_typeParameter955 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _EXTENDS_in_typeParameter966 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _typeBound_in_typeParameter968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeBound1000 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AMP_in_typeBound1011 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_typeBound1013 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _modifiers_in_enumDeclaration1045 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ENUM_in_enumDeclaration1057 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_enumDeclaration1078 = new BitSet(new ulong[]{0x0UL,0x40200UL});
		public static readonly BitSet _IMPLEMENTS_in_enumDeclaration1089 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _typeList_in_enumDeclaration1091 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _enumBody_in_enumDeclaration1112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_enumBody1137 = new BitSet(new ulong[]{0x100000000UL,0x2200001000080UL});
		public static readonly BitSet _enumConstants_in_enumBody1148 = new BitSet(new ulong[]{0x100000000UL,0x2200000000000UL});
		public static readonly BitSet _COMMA_in_enumBody1170 = new BitSet(new ulong[]{0x0UL,0x2200000000000UL});
		public static readonly BitSet _enumBodyDeclarations_in_enumBody1183 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _RBRACE_in_enumBody1205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumConstant_in_enumConstants1225 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _COMMA_in_enumConstants1236 = new BitSet(new ulong[]{0x0UL,0x1000080UL});
		public static readonly BitSet _enumConstant_in_enumConstants1238 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _annotations_in_enumConstant1272 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_enumConstant1293 = new BitSet(new ulong[]{0x2UL,0x440000UL});
		public static readonly BitSet _arguments_in_enumConstant1304 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _classBody_in_enumConstant1326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_enumBodyDeclarations1367 = new BitSet(new ulong[]{0x502010060014012UL,0x41860E0003A43080UL,0x1880UL});
		public static readonly BitSet _classBodyDeclaration_in_enumBodyDeclarations1379 = new BitSet(new ulong[]{0x502010060014012UL,0x41860E0003A43080UL,0x1880UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_interfaceDeclaration1410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_interfaceDeclaration1420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_normalInterfaceDeclaration1444 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _INTERFACE_in_normalInterfaceDeclaration1446 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_normalInterfaceDeclaration1448 = new BitSet(new ulong[]{0x10000000000000UL,0x840000UL});
		public static readonly BitSet _typeParameters_in_normalInterfaceDeclaration1459 = new BitSet(new ulong[]{0x10000000000000UL,0x40000UL});
		public static readonly BitSet _EXTENDS_in_normalInterfaceDeclaration1481 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _typeList_in_normalInterfaceDeclaration1483 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _interfaceBody_in_normalInterfaceDeclaration1504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeList1524 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _COMMA_in_typeList1535 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_typeList1537 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _LBRACE_in_classBody1568 = new BitSet(new ulong[]{0x502010060014010UL,0x41862E0003A43080UL,0x1880UL});
		public static readonly BitSet _classBodyDeclaration_in_classBody1580 = new BitSet(new ulong[]{0x502010060014010UL,0x41862E0003A43080UL,0x1880UL});
		public static readonly BitSet _RBRACE_in_classBody1602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_interfaceBody1622 = new BitSet(new ulong[]{0x502010060014010UL,0x41862E0003A03080UL,0x1880UL});
		public static readonly BitSet _interfaceBodyDeclaration_in_interfaceBody1634 = new BitSet(new ulong[]{0x502010060014010UL,0x41862E0003A03080UL,0x1880UL});
		public static readonly BitSet _RBRACE_in_interfaceBody1656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classBodyDeclaration1676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_classBodyDeclaration1687 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _block_in_classBodyDeclaration1709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberDecl_in_classBodyDeclaration1719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_memberDecl1740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclaration_in_memberDecl1751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_memberDecl1762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_memberDecl1773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDeclaration1811 = new BitSet(new ulong[]{0x0UL,0x800080UL});
		public static readonly BitSet _typeParameters_in_methodDeclaration1822 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_methodDeclaration1843 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration1853 = new BitSet(new ulong[]{0x0UL,0x40000UL,0x20UL});
		public static readonly BitSet _THROWS_in_methodDeclaration1864 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _qualifiedNameList_in_methodDeclaration1866 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _LBRACE_in_methodDeclaration1887 = new BitSet(new ulong[]{0x2D0201586101C310UL,0x7B86AF4017E53180UL,0x39DAUL});
		public static readonly BitSet _explicitConstructorInvocation_in_methodDeclaration1899 = new BitSet(new ulong[]{0x2D0201586101C310UL,0x7B86AF4017653180UL,0x39DAUL});
		public static readonly BitSet _blockStatement_in_methodDeclaration1921 = new BitSet(new ulong[]{0x2D0201586101C310UL,0x7B86AF4017653180UL,0x39DAUL});
		public static readonly BitSet _RBRACE_in_methodDeclaration1942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDeclaration1952 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000A01080UL,0x800UL});
		public static readonly BitSet _typeParameters_in_methodDeclaration1963 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL,0x800UL});
		public static readonly BitSet _type_in_methodDeclaration1985 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _VOID_in_methodDeclaration1999 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_methodDeclaration2019 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration2029 = new BitSet(new ulong[]{0x0UL,0x20000000C0000UL,0x20UL});
		public static readonly BitSet _LBRACKET_in_methodDeclaration2040 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_methodDeclaration2042 = new BitSet(new ulong[]{0x0UL,0x20000000C0000UL,0x20UL});
		public static readonly BitSet _THROWS_in_methodDeclaration2064 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _qualifiedNameList_in_methodDeclaration2066 = new BitSet(new ulong[]{0x0UL,0x2000000040000UL});
		public static readonly BitSet _block_in_methodDeclaration2121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_methodDeclaration2135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_fieldDeclaration2167 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_fieldDeclaration2177 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _variableDeclarator_in_fieldDeclaration2187 = new BitSet(new ulong[]{0x100000000UL,0x2000000000000UL});
		public static readonly BitSet _COMMA_in_fieldDeclaration2198 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _variableDeclarator_in_fieldDeclaration2200 = new BitSet(new ulong[]{0x100000000UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_fieldDeclaration2221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_variableDeclarator2241 = new BitSet(new ulong[]{0x4000000000002UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_variableDeclarator2252 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_variableDeclarator2254 = new BitSet(new ulong[]{0x4000000000002UL,0x80000UL});
		public static readonly BitSet _EQ_in_variableDeclarator2276 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014651080UL,0x84AUL});
		public static readonly BitSet _variableInitializer_in_variableDeclarator2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_interfaceBodyDeclaration2317 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceMethodDeclaration_in_interfaceBodyDeclaration2327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_interfaceBodyDeclaration2337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_interfaceBodyDeclaration2347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_interfaceBodyDeclaration2357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceMethodDeclaration2377 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000A01080UL,0x800UL});
		public static readonly BitSet _typeParameters_in_interfaceMethodDeclaration2388 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL,0x800UL});
		public static readonly BitSet _type_in_interfaceMethodDeclaration2410 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _VOID_in_interfaceMethodDeclaration2421 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_interfaceMethodDeclaration2441 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _formalParameters_in_interfaceMethodDeclaration2451 = new BitSet(new ulong[]{0x0UL,0x2000000080000UL,0x20UL});
		public static readonly BitSet _LBRACKET_in_interfaceMethodDeclaration2462 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_interfaceMethodDeclaration2464 = new BitSet(new ulong[]{0x0UL,0x2000000080000UL,0x20UL});
		public static readonly BitSet _THROWS_in_interfaceMethodDeclaration2486 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _qualifiedNameList_in_interfaceMethodDeclaration2488 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_interfaceMethodDeclaration2501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceFieldDeclaration2523 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_interfaceFieldDeclaration2525 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _variableDeclarator_in_interfaceFieldDeclaration2527 = new BitSet(new ulong[]{0x100000000UL,0x2000000000000UL});
		public static readonly BitSet _COMMA_in_interfaceFieldDeclaration2538 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _variableDeclarator_in_interfaceFieldDeclaration2540 = new BitSet(new ulong[]{0x100000000UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_interfaceFieldDeclaration2561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceType_in_type2582 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_type2593 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_type2595 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _primitiveType_in_type2616 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_type2627 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_type2629 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceType2661 = new BitSet(new ulong[]{0x8000000002UL,0x800000UL});
		public static readonly BitSet _typeArguments_in_classOrInterfaceType2672 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _DOT_in_classOrInterfaceType2694 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceType2696 = new BitSet(new ulong[]{0x8000000002UL,0x800000UL});
		public static readonly BitSet _typeArguments_in_classOrInterfaceType2711 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceTypeWithDiamond2757 = new BitSet(new ulong[]{0x8000000002UL,0x800000UL});
		public static readonly BitSet _typeArgumentsOrDiamond_in_classOrInterfaceTypeWithDiamond2768 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _DOT_in_classOrInterfaceTypeWithDiamond2790 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceTypeWithDiamond2792 = new BitSet(new ulong[]{0x8000000002UL,0x800000UL});
		public static readonly BitSet _typeArgumentsOrDiamond_in_classOrInterfaceTypeWithDiamond2807 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _LT_in_typeArguments2944 = new BitSet(new ulong[]{0x400010020014000UL,0x4100000201080UL});
		public static readonly BitSet _typeArgument_in_typeArguments2946 = new BitSet(new ulong[]{0x8000000100000000UL});
		public static readonly BitSet _COMMA_in_typeArguments2949 = new BitSet(new ulong[]{0x400010020014000UL,0x4100000201080UL});
		public static readonly BitSet _typeArgument_in_typeArguments2951 = new BitSet(new ulong[]{0x8000000100000000UL});
		public static readonly BitSet _GT_in_typeArguments2955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeArgument2975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUES_in_typeArgument2985 = new BitSet(new ulong[]{0x10000000000002UL,0x1000000000000000UL});
		public static readonly BitSet _set_in_typeArgument3009 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_typeArgument3053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameList3084 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _COMMA_in_qualifiedNameList3095 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameList3097 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _LPAREN_in_formalParameters3128 = new BitSet(new ulong[]{0x500010020014000UL,0x5000001201080UL});
		public static readonly BitSet _formalParameterDecls_in_formalParameters3139 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_formalParameters3161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ellipsisParameterDecl_in_formalParameterDecls3181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3191 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _COMMA_in_formalParameterDecls3202 = new BitSet(new ulong[]{0x500010020014000UL,0x4000001201080UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3204 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3226 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _COMMA_in_formalParameterDecls3236 = new BitSet(new ulong[]{0x500010020014000UL,0x4000001201080UL});
		public static readonly BitSet _ellipsisParameterDecl_in_formalParameterDecls3258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_normalParameterDecl3278 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_normalParameterDecl3280 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_normalParameterDecl3282 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_normalParameterDecl3293 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_normalParameterDecl3295 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _variableModifiers_in_ellipsisParameterDecl3326 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_ellipsisParameterDecl3336 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ELLIPSIS_in_ellipsisParameterDecl3339 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_ellipsisParameterDecl3349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_explicitConstructorInvocation3371 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x8UL});
		public static readonly BitSet _set_in_explicitConstructorInvocation3397 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _arguments_in_explicitConstructorInvocation3429 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_explicitConstructorInvocation3431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_explicitConstructorInvocation3442 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _DOT_in_explicitConstructorInvocation3452 = new BitSet(new ulong[]{0x0UL,0x1000000000800000UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_explicitConstructorInvocation3463 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _SUPER_in_explicitConstructorInvocation3484 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _arguments_in_explicitConstructorInvocation3494 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_explicitConstructorInvocation3496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedName3516 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _DOT_in_qualifiedName3527 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedName3529 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _annotation_in_annotations3561 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _MONKEYS_AT_in_annotation3594 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _qualifiedName_in_annotation3596 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _LPAREN_in_annotation3610 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A05014015651080UL,0x84AUL});
		public static readonly BitSet _elementValuePairs_in_annotation3637 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _elementValue_in_annotation3661 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_annotation3697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementValuePair_in_elementValuePairs3729 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _COMMA_in_elementValuePairs3740 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _elementValuePair_in_elementValuePairs3742 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _IDENTIFIER_in_elementValuePair3773 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _EQ_in_elementValuePair3775 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014015651080UL,0x84AUL});
		public static readonly BitSet _elementValue_in_elementValuePair3777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_elementValue3797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_elementValue3807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementValueArrayInitializer_in_elementValue3817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_elementValueArrayInitializer3837 = new BitSet(new ulong[]{0x2400011121014200UL,0x1A04214015651080UL,0x84AUL});
		public static readonly BitSet _elementValue_in_elementValueArrayInitializer3848 = new BitSet(new ulong[]{0x100000000UL,0x200000000000UL});
		public static readonly BitSet _COMMA_in_elementValueArrayInitializer3863 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014015651080UL,0x84AUL});
		public static readonly BitSet _elementValue_in_elementValueArrayInitializer3865 = new BitSet(new ulong[]{0x100000000UL,0x200000000000UL});
		public static readonly BitSet _COMMA_in_elementValueArrayInitializer3894 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _RBRACE_in_elementValueArrayInitializer3898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationTypeDeclaration3921 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _MONKEYS_AT_in_annotationTypeDeclaration3923 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _INTERFACE_in_annotationTypeDeclaration3933 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_annotationTypeDeclaration3943 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _annotationTypeBody_in_annotationTypeDeclaration3953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_annotationTypeBody3974 = new BitSet(new ulong[]{0x502010060014010UL,0x41862E0003203080UL,0x1080UL});
		public static readonly BitSet _annotationTypeElementDeclaration_in_annotationTypeBody3986 = new BitSet(new ulong[]{0x502010060014010UL,0x41862E0003203080UL,0x1080UL});
		public static readonly BitSet _RBRACE_in_annotationTypeBody4008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationMethodDeclaration_in_annotationTypeElementDeclaration4030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_annotationTypeElementDeclaration4040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_annotationTypeElementDeclaration4050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_annotationTypeElementDeclaration4060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_annotationTypeElementDeclaration4070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_annotationTypeElementDeclaration4080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_annotationTypeElementDeclaration4090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationMethodDeclaration4110 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_annotationMethodDeclaration4112 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_annotationMethodDeclaration4114 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _LPAREN_in_annotationMethodDeclaration4124 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_annotationMethodDeclaration4126 = new BitSet(new ulong[]{0x2000000000UL,0x2000000000000UL});
		public static readonly BitSet _DEFAULT_in_annotationMethodDeclaration4129 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014015651080UL,0x84AUL});
		public static readonly BitSet _elementValue_in_annotationMethodDeclaration4131 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_annotationMethodDeclaration4160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_block4184 = new BitSet(new ulong[]{0x2D0201586101C310UL,0x7B86AF4017653180UL,0x39DAUL});
		public static readonly BitSet _blockStatement_in_block4195 = new BitSet(new ulong[]{0x2D0201586101C310UL,0x7B86AF4017653180UL,0x39DAUL});
		public static readonly BitSet _RBRACE_in_block4216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclarationStatement_in_blockStatement4238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_blockStatement4248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement4258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_localVariableDeclarationStatement4279 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_localVariableDeclarationStatement4289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_localVariableDeclaration4309 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_localVariableDeclaration4311 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _variableDeclarator_in_localVariableDeclaration4321 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _COMMA_in_localVariableDeclaration4332 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _variableDeclarator_in_localVariableDeclaration4334 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _block_in_statement4365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement4375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_statement4385 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _COLON_in_statement4387 = new BitSet(new ulong[]{0x2C0001582101C300UL,0x7A06814014651180UL,0x295AUL});
		public static readonly BitSet _statement_in_statement4389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement4399 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_statement4402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_statement4417 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _parExpression_in_statement4419 = new BitSet(new ulong[]{0x2C0001582101C300UL,0x7A06814014651180UL,0x295AUL});
		public static readonly BitSet _statement_in_statement4421 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _ELSE_in_statement4424 = new BitSet(new ulong[]{0x2C0001582101C300UL,0x7A06814014651180UL,0x295AUL});
		public static readonly BitSet _statement_in_statement4426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement4448 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_statement4451 = new BitSet(new ulong[]{0x80000000UL,0x2000000000000UL});
		public static readonly BitSet _COLON_in_statement4454 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_statement4456 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_statement4460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_statement4482 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _parExpression_in_statement4484 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _LBRACE_in_statement4486 = new BitSet(new ulong[]{0x2008000000UL,0x200000000000UL});
		public static readonly BitSet _switchBlockStatementGroups_in_statement4488 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _RBRACE_in_statement4490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_statement4500 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _parExpression_in_statement4502 = new BitSet(new ulong[]{0x2C0001582101C300UL,0x7A06814014651180UL,0x295AUL});
		public static readonly BitSet _statement_in_statement4504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_statement4514 = new BitSet(new ulong[]{0x2C0001582101C300UL,0x7A06814014651180UL,0x295AUL});
		public static readonly BitSet _statement_in_statement4516 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WHILE_in_statement4518 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _parExpression_in_statement4520 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_statement4522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forstatement_in_statement4532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_statement4542 = new BitSet(new ulong[]{0x0UL,0x2000000000080UL});
		public static readonly BitSet _IDENTIFIER_in_statement4545 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_statement4549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_statement4559 = new BitSet(new ulong[]{0x0UL,0x2000000000080UL});
		public static readonly BitSet _IDENTIFIER_in_statement4562 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_statement4566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_statement4576 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A06014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_statement4579 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_statement4584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_statement4594 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_statement4596 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_statement4598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement4608 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _parExpression_in_statement4610 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _block_in_statement4612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _trystatement_in_statement4622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryWithResourcesStatement_in_statement4632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchBlockStatementGroup_in_switchBlockStatementGroups4653 = new BitSet(new ulong[]{0x2008000002UL});
		public static readonly BitSet _switchLabel_in_switchBlockStatementGroup4682 = new BitSet(new ulong[]{0x2D0201586101C312UL,0x7B868F4017653180UL,0x39DAUL});
		public static readonly BitSet _blockStatement_in_switchBlockStatementGroup4693 = new BitSet(new ulong[]{0x2D0201586101C312UL,0x7B868F4017653180UL,0x39DAUL});
		public static readonly BitSet _CASE_in_switchLabel4724 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_switchLabel4726 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _COLON_in_switchLabel4728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_switchLabel4738 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _COLON_in_switchLabel4740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_trystatement4761 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _block_in_trystatement4763 = new BitSet(new ulong[]{0x200000010000000UL});
		public static readonly BitSet _catches_in_trystatement4777 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _FINALLY_in_trystatement4779 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _block_in_trystatement4781 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_trystatement4795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_trystatement4809 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _block_in_trystatement4811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_catches4842 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _catchClause_in_catches4853 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _CATCH_in_catchClause4884 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _LPAREN_in_catchClause4886 = new BitSet(new ulong[]{0x500010020014000UL,0x4000001201080UL});
		public static readonly BitSet _formalParameter_in_catchClause4888 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_catchClause4898 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _block_in_catchClause4900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_formalParameter4921 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _catchType_in_formalParameter4923 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_formalParameter4925 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_formalParameter4936 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_formalParameter4938 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _catchType_in_formalParameter4959 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_formalParameter4961 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_formalParameter4972 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_formalParameter4974 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _type_in_catchType5004 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _BAR_in_catchType5015 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_catchType5017 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _TRY_in_tryWithResourcesStatement5048 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _resourceSpecification_in_tryWithResourcesStatement5050 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _block_in_tryWithResourcesStatement5052 = new BitSet(new ulong[]{0x200000010000002UL});
		public static readonly BitSet _catches_in_tryWithResourcesStatement5054 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _FINALLY_in_tryWithResourcesStatement5058 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _block_in_tryWithResourcesStatement5060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_resourceSpecification5082 = new BitSet(new ulong[]{0x500010020014000UL,0x4000001201080UL});
		public static readonly BitSet _resources_in_resourceSpecification5084 = new BitSet(new ulong[]{0x0UL,0x3000000000000UL});
		public static readonly BitSet _SEMI_in_resourceSpecification5086 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_resourceSpecification5089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _resource_in_resources5109 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_resources5114 = new BitSet(new ulong[]{0x500010020014000UL,0x4000001201080UL});
		public static readonly BitSet _resource_in_resources5116 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _variableModifiers_in_resource5139 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_resource5142 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_resource5144 = new BitSet(new ulong[]{0x4000000000000UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_resource5147 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_resource5149 = new BitSet(new ulong[]{0x4000000000000UL,0x80000UL});
		public static readonly BitSet _EQ_in_resource5153 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_resource5155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forstatement5194 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _LPAREN_in_forstatement5196 = new BitSet(new ulong[]{0x500010020014000UL,0x4000001201080UL});
		public static readonly BitSet _variableModifiers_in_forstatement5198 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_forstatement5200 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_forstatement5202 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _COLON_in_forstatement5204 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_forstatement5215 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_forstatement5217 = new BitSet(new ulong[]{0x2C0001582101C300UL,0x7A06814014651180UL,0x295AUL});
		public static readonly BitSet _statement_in_forstatement5219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forstatement5251 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _LPAREN_in_forstatement5253 = new BitSet(new ulong[]{0x2500011021014200UL,0x1A06014015611080UL,0x84AUL});
		public static readonly BitSet _forInit_in_forstatement5273 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_forstatement5294 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A06014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_forstatement5314 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_forstatement5335 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A05014014611080UL,0x84AUL});
		public static readonly BitSet _expressionList_in_forstatement5355 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_forstatement5376 = new BitSet(new ulong[]{0x2C0001582101C300UL,0x7A06814014651180UL,0x295AUL});
		public static readonly BitSet _statement_in_forstatement5378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit5398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInit5408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parExpression5428 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_parExpression5430 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_parExpression5432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList5452 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _COMMA_in_expressionList5463 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_expressionList5465 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _conditionalExpression_in_expression5497 = new BitSet(new ulong[]{0x8004000004002082UL,0x45000A000800000UL});
		public static readonly BitSet _assignmentOperator_in_expression5508 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_expression5510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQ_in_assignmentOperator5542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUSEQ_in_assignmentOperator5552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBEQ_in_assignmentOperator5562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STAREQ_in_assignmentOperator5572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SLASHEQ_in_assignmentOperator5582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AMPEQ_in_assignmentOperator5592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BAREQ_in_assignmentOperator5602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CARETEQ_in_assignmentOperator5612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PERCENTEQ_in_assignmentOperator5622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_assignmentOperator5633 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _LT_in_assignmentOperator5635 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignmentOperator5648 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5650 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5652 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignmentOperator5665 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5667 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalOrExpression_in_conditionalExpression5690 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _QUES_in_conditionalExpression5701 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_conditionalExpression5703 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression5705 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _conditionalExpression_in_conditionalExpression5707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression5737 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _BARBAR_in_conditionalOrExpression5748 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression5750 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression5780 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _AMPAMP_in_conditionalAndExpression5791 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression5793 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression5823 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _BAR_in_inclusiveOrExpression5834 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression5836 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression5866 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _CARET_in_exclusiveOrExpression5877 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression5879 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _equalityExpression_in_andExpression5909 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AMP_in_andExpression5920 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _equalityExpression_in_andExpression5922 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression5952 = new BitSet(new ulong[]{0x8000000000402UL});
		public static readonly BitSet _set_in_equalityExpression5979 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression6029 = new BitSet(new ulong[]{0x8000000000402UL});
		public static readonly BitSet _relationalExpression_in_instanceOfExpression6059 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _INSTANCEOF_in_instanceOfExpression6070 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_instanceOfExpression6072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression6102 = new BitSet(new ulong[]{0x8000000000000002UL,0x800000UL});
		public static readonly BitSet _relationalOp_in_relationalExpression6113 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _shiftExpression_in_relationalExpression6115 = new BitSet(new ulong[]{0x8000000000000002UL,0x800000UL});
		public static readonly BitSet _LT_in_relationalOp6146 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _EQ_in_relationalOp6148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOp6159 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _EQ_in_relationalOp6161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_relationalOp6171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOp6181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression6200 = new BitSet(new ulong[]{0x8000000000000002UL,0x800000UL});
		public static readonly BitSet _shiftOp_in_shiftExpression6211 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _additiveExpression_in_shiftExpression6213 = new BitSet(new ulong[]{0x8000000000000002UL,0x800000UL});
		public static readonly BitSet _LT_in_shiftOp6244 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _LT_in_shiftOp6246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_shiftOp6257 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6259 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_shiftOp6272 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression6293 = new BitSet(new ulong[]{0x2UL,0x200004000000000UL});
		public static readonly BitSet _set_in_additiveExpression6320 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression6370 = new BitSet(new ulong[]{0x2UL,0x200004000000000UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression6407 = new BitSet(new ulong[]{0x2UL,0x28001000000000UL});
		public static readonly BitSet _set_in_multiplicativeExpression6434 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression6502 = new BitSet(new ulong[]{0x2UL,0x28001000000000UL});
		public static readonly BitSet _PLUS_in_unaryExpression6534 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUB_in_unaryExpression6547 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUSPLUS_in_unaryExpression6559 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBSUB_in_unaryExpression6571 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_unaryExpression6583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TILDE_in_unaryExpressionNotPlusMinus6602 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus6604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BANG_in_unaryExpressionNotPlusMinus6614 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus6616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_unaryExpressionNotPlusMinus6626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_unaryExpressionNotPlusMinus6636 = new BitSet(new ulong[]{0x8000000002UL,0x800010000080000UL});
		public static readonly BitSet _selector_in_unaryExpressionNotPlusMinus6647 = new BitSet(new ulong[]{0x8000000002UL,0x800010000080000UL});
		public static readonly BitSet _LPAREN_in_castExpression6716 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201000UL});
		public static readonly BitSet _primitiveType_in_castExpression6718 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_castExpression6720 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _unaryExpression_in_castExpression6722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_castExpression6732 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_castExpression6734 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_castExpression6736 = new BitSet(new ulong[]{0x2400011021014200UL,0x1004000014611080UL,0x84AUL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_castExpression6738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parExpression_in_primary6759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primary6781 = new BitSet(new ulong[]{0x8000000002UL,0x480000UL});
		public static readonly BitSet _DOT_in_primary6792 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_primary6794 = new BitSet(new ulong[]{0x8000000002UL,0x480000UL});
		public static readonly BitSet _identifierSuffix_in_primary6816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_primary6837 = new BitSet(new ulong[]{0x8000000002UL,0x480000UL});
		public static readonly BitSet _DOT_in_primary6848 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_primary6850 = new BitSet(new ulong[]{0x8000000002UL,0x480000UL});
		public static readonly BitSet _identifierSuffix_in_primary6872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primary6893 = new BitSet(new ulong[]{0x8000000000UL,0x400000UL});
		public static readonly BitSet _superSuffix_in_primary6903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primary6913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _creator_in_primary6923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_primary6933 = new BitSet(new ulong[]{0x8000000000UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_primary6944 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_primary6946 = new BitSet(new ulong[]{0x8000000000UL,0x80000UL});
		public static readonly BitSet _DOT_in_primary6967 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _CLASS_in_primary6969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_primary6979 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _DOT_in_primary6981 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _CLASS_in_primary6983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_superSuffix7002 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_superSuffix7012 = new BitSet(new ulong[]{0x0UL,0x800080UL});
		public static readonly BitSet _typeArguments_in_superSuffix7015 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_superSuffix7036 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _arguments_in_superSuffix7047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_identifierSuffix7078 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_identifierSuffix7080 = new BitSet(new ulong[]{0x8000000000UL,0x80000UL});
		public static readonly BitSet _DOT_in_identifierSuffix7101 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _CLASS_in_identifierSuffix7103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_identifierSuffix7114 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_identifierSuffix7116 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_identifierSuffix7118 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _arguments_in_identifierSuffix7139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7149 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _CLASS_in_identifierSuffix7151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7161 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_identifierSuffix7163 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_identifierSuffix7165 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _arguments_in_identifierSuffix7167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7177 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8UL});
		public static readonly BitSet _THIS_in_identifierSuffix7179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7189 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _SUPER_in_identifierSuffix7191 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _arguments_in_identifierSuffix7193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerCreator_in_identifierSuffix7203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7222 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_selector7224 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _arguments_in_selector7226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7237 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_selector7239 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_selector7241 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _arguments_in_selector7243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7254 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8UL});
		public static readonly BitSet _THIS_in_selector7256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7266 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _SUPER_in_selector7268 = new BitSet(new ulong[]{0x8000000000UL,0x400000UL});
		public static readonly BitSet _superSuffix_in_selector7278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerCreator_in_selector7288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_selector7298 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_selector7300 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_selector7302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_creator7321 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_creator7323 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _classOrInterfaceTypeWithDiamond_in_creator7325 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classCreatorRest_in_creator7327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_creator7337 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _classOrInterfaceTypeWithDiamond_in_creator7339 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classCreatorRest_in_creator7341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayCreator_in_creator7351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_arrayCreator7370 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _createdName_in_arrayCreator7372 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7382 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7384 = new BitSet(new ulong[]{0x0UL,0xC0000UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7395 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7397 = new BitSet(new ulong[]{0x0UL,0xC0000UL});
		public static readonly BitSet _arrayInitializer_in_arrayCreator7418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_arrayCreator7429 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _createdName_in_arrayCreator7431 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7441 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_arrayCreator7443 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7453 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7467 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_arrayCreator7469 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7483 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7505 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7507 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer7537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer7547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_arrayInitializer7566 = new BitSet(new ulong[]{0x2400011121014200UL,0x1A04214014651080UL,0x84AUL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer7582 = new BitSet(new ulong[]{0x100000000UL,0x200000000000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer7601 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014651080UL,0x84AUL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer7603 = new BitSet(new ulong[]{0x100000000UL,0x200000000000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer7653 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _RBRACE_in_arrayInitializer7666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceTypeWithDiamond_in_createdName7699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_createdName7709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_innerCreator7728 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _NEW_in_innerCreator7730 = new BitSet(new ulong[]{0x0UL,0x800080UL});
		public static readonly BitSet _nonWildcardTypeArgumentsOrDiamond_in_innerCreator7741 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_innerCreator7762 = new BitSet(new ulong[]{0x0UL,0xC00000UL});
		public static readonly BitSet _typeArguments_in_innerCreator7773 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classCreatorRest_in_innerCreator7794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_classCreatorRest7813 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _classBody_in_classCreatorRest7824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_nonWildcardTypeArguments7854 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _typeList_in_nonWildcardTypeArguments7856 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _GT_in_nonWildcardTypeArguments7858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_typeArgumentsOrDiamond7877 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _GT_in_typeArgumentsOrDiamond7879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeArguments_in_typeArgumentsOrDiamond7889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_nonWildcardTypeArgumentsOrDiamond7908 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _GT_in_nonWildcardTypeArgumentsOrDiamond7910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_nonWildcardTypeArgumentsOrDiamond7920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments7940 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A05014014611080UL,0x84AUL});
		public static readonly BitSet _expressionList_in_arguments7943 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_arguments7956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_classHeader8050 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _CLASS_in_classHeader8052 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_classHeader8054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_enumHeader8074 = new BitSet(new ulong[]{0x2000000000000UL,0x80UL});
		public static readonly BitSet _set_in_enumHeader8076 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_enumHeader8082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceHeader8102 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _INTERFACE_in_interfaceHeader8104 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_interfaceHeader8106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationHeader8126 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _MONKEYS_AT_in_annotationHeader8128 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _INTERFACE_in_annotationHeader8130 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_annotationHeader8132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_typeHeader8152 = new BitSet(new ulong[]{0x2000040000000UL,0x1002000UL});
		public static readonly BitSet _CLASS_in_typeHeader8155 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _ENUM_in_typeHeader8157 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _MONKEYS_AT_in_typeHeader8160 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _INTERFACE_in_typeHeader8164 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_typeHeader8168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodHeader8188 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000A01080UL,0x800UL});
		public static readonly BitSet _typeParameters_in_methodHeader8190 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL,0x800UL});
		public static readonly BitSet _type_in_methodHeader8194 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _VOID_in_methodHeader8196 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_methodHeader8200 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _LPAREN_in_methodHeader8202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_fieldHeader8222 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_fieldHeader8224 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_fieldHeader8226 = new BitSet(new ulong[]{0x4000100000000UL,0x2000000080000UL});
		public static readonly BitSet _LBRACKET_in_fieldHeader8229 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_fieldHeader8230 = new BitSet(new ulong[]{0x4000100000000UL,0x2000000080000UL});
		public static readonly BitSet _set_in_fieldHeader8234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_localVariableHeader8260 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_localVariableHeader8262 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_localVariableHeader8264 = new BitSet(new ulong[]{0x4000100000000UL,0x2000000080000UL});
		public static readonly BitSet _LBRACKET_in_localVariableHeader8267 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_localVariableHeader8268 = new BitSet(new ulong[]{0x4000100000000UL,0x2000000080000UL});
		public static readonly BitSet _set_in_localVariableHeader8272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotations_in_synpred2_Java107 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _packageDeclaration_in_synpred2_Java136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred12_Java494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_synpred27_Java731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_synpred43_Java1410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_synpred52_Java1740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclaration_in_synpred53_Java1751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred54_Java1762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_synpred57_Java1899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred59_Java1811 = new BitSet(new ulong[]{0x0UL,0x800080UL});
		public static readonly BitSet _typeParameters_in_synpred59_Java1822 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_synpred59_Java1843 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _formalParameters_in_synpred59_Java1853 = new BitSet(new ulong[]{0x0UL,0x40000UL,0x20UL});
		public static readonly BitSet _THROWS_in_synpred59_Java1864 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _qualifiedNameList_in_synpred59_Java1866 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _LBRACE_in_synpred59_Java1887 = new BitSet(new ulong[]{0x2D0201586101C310UL,0x7B86AF4017E53180UL,0x39DAUL});
		public static readonly BitSet _explicitConstructorInvocation_in_synpred59_Java1899 = new BitSet(new ulong[]{0x2D0201586101C310UL,0x7B86AF4017653180UL,0x39DAUL});
		public static readonly BitSet _blockStatement_in_synpred59_Java1921 = new BitSet(new ulong[]{0x2D0201586101C310UL,0x7B86AF4017653180UL,0x39DAUL});
		public static readonly BitSet _RBRACE_in_synpred59_Java1942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_synpred68_Java2317 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceMethodDeclaration_in_synpred69_Java2327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_synpred70_Java2337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred71_Java2347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ellipsisParameterDecl_in_synpred99_Java3181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalParameterDecl_in_synpred101_Java3191 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _COMMA_in_synpred101_Java3202 = new BitSet(new ulong[]{0x500010020014000UL,0x4000001201080UL});
		public static readonly BitSet _normalParameterDecl_in_synpred101_Java3204 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _normalParameterDecl_in_synpred102_Java3226 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _COMMA_in_synpred102_Java3236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_synpred106_Java3371 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x8UL});
		public static readonly BitSet _set_in_synpred106_Java3397 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _arguments_in_synpred106_Java3429 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _SEMI_in_synpred106_Java3431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationMethodDeclaration_in_synpred120_Java4030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_synpred121_Java4040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_synpred122_Java4050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_synpred123_Java4060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_synpred124_Java4070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_synpred125_Java4080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclarationStatement_in_synpred128_Java4238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_synpred129_Java4248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_synpred135_Java4424 = new BitSet(new ulong[]{0x2C0001582101C300UL,0x7A06814014651180UL,0x295AUL});
		public static readonly BitSet _statement_in_synpred135_Java4426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_synpred155_Java4777 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _FINALLY_in_synpred155_Java4779 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _block_in_synpred155_Java4781 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_synpred156_Java4795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_synpred159_Java4921 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _catchType_in_synpred159_Java4923 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_synpred159_Java4925 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_synpred159_Java4936 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_synpred159_Java4938 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _variableModifiers_in_synpred166_Java5139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_synpred168_Java5194 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _LPAREN_in_synpred168_Java5196 = new BitSet(new ulong[]{0x500010020014000UL,0x4000001201080UL});
		public static readonly BitSet _variableModifiers_in_synpred168_Java5198 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _type_in_synpred168_Java5200 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_synpred168_Java5202 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _COLON_in_synpred168_Java5204 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_synpred168_Java5215 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_synpred168_Java5217 = new BitSet(new ulong[]{0x2C0001582101C300UL,0x7A06814014651180UL,0x295AUL});
		public static readonly BitSet _statement_in_synpred168_Java5219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred172_Java5398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_synpred213_Java6626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred217_Java6716 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201000UL});
		public static readonly BitSet _primitiveType_in_synpred217_Java6718 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _RPAREN_in_synpred217_Java6720 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _unaryExpression_in_synpred217_Java6722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred219_Java6792 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_synpred219_Java6794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierSuffix_in_synpred220_Java6816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred222_Java6848 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IDENTIFIER_in_synpred222_Java6850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierSuffix_in_synpred223_Java6872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_synpred235_Java7114 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_synpred235_Java7116 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_synpred235_Java7118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred248_Java7321 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_synpred248_Java7323 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _classOrInterfaceTypeWithDiamond_in_synpred248_Java7325 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classCreatorRest_in_synpred248_Java7327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred249_Java7337 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _classOrInterfaceTypeWithDiamond_in_synpred249_Java7339 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _classCreatorRest_in_synpred249_Java7341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred251_Java7370 = new BitSet(new ulong[]{0x400010020014000UL,0x4000000201080UL});
		public static readonly BitSet _createdName_in_synpred251_Java7372 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _LBRACKET_in_synpred251_Java7382 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_synpred251_Java7384 = new BitSet(new ulong[]{0x0UL,0xC0000UL});
		public static readonly BitSet _LBRACKET_in_synpred251_Java7395 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_synpred251_Java7397 = new BitSet(new ulong[]{0x0UL,0xC0000UL});
		public static readonly BitSet _arrayInitializer_in_synpred251_Java7418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_synpred252_Java7467 = new BitSet(new ulong[]{0x2400011021014200UL,0x1A04014014611080UL,0x84AUL});
		public static readonly BitSet _expression_in_synpred252_Java7469 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _RBRACKET_in_synpred252_Java7483 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Code2Xml.Languages.ANTLRv3.Processors.Java 
