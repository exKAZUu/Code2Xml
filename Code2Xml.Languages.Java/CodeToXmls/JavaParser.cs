//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 Java.g 2012-10-05 18:57:02

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created
 *          elementValuePair and elementValuePairs rules, then used them in the
 *          annotation rule.  Allows it to recognize annotation references with
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which
 *          has the Identifier portion in it, the parser would fail on constants in
 *          annotation definitions because it expected two identifiers.
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *         
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "Identifier ('.' Identifier)*" to "qualifiedName" in more
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and
 *          normalInterfaceDeclaration rather than classDeclaration and
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation,
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaIdentifierStart(int) returns true."  A "Java
 *      letter-or-digit is a character for which the method
 *      Character.isJavaIdentifierPart(int) returns true."
 */
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class JavaParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AMP", "AMPAMP", "AMPEQ", "ASSERT", "BANG", "BANGEQ", "BAR", "BARBAR", "BAREQ", "BOOLEAN", "BREAK", "BYTE", "CARET", "CARETEQ", "CASE", "CATCH", "CHAR", "CHARLITERAL", "CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONTINUE", "DEFAULT", "DO", "DOT", "DOUBLE", "DOUBLELITERAL", "DoubleSuffix", "ELLIPSIS", "ELSE", "ENUM", "EQ", "EQEQ", "EXTENDS", "EscapeSequence", "Exponent", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATLITERAL", "FOR", "FloatSuffix", "GOTO", "GT", "HexDigit", "HexPrefix", "IDENTIFIER", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "INTLITERAL", "IdentifierPart", "IdentifierStart", "IntegerNumber", "LBRACE", "LBRACKET", "LINE_COMMENT", "LONG", "LONGLITERAL", "LPAREN", "LT", "LongSuffix", "MONKEYS_AT", "NATIVE", "NEW", "NULL", "NonIntegerNumber", "PACKAGE", "PERCENT", "PERCENTEQ", "PLUS", "PLUSEQ", "PLUSPLUS", "PRIVATE", "PROTECTED", "PUBLIC", "QUES", "RBRACE", "RBRACKET", "RETURN", "RPAREN", "SEMI", "SHORT", "SLASH", "SLASHEQ", "STAR", "STAREQ", "STATIC", "STRICTFP", "STRINGLITERAL", "SUB", "SUBEQ", "SUBSUB", "SUPER", "SWITCH", "SYNCHRONIZED", "SurrogateIdentifer", "THIS", "THROW", "THROWS", "TILDE", "TRANSIENT", "TRUE", "TRY", "VOID", "VOLATILE", "WHILE", "WS", "'filly'"
	};
	public const int EOF=-1;
	public const int T__119=119;
	public const int ABSTRACT=4;
	public const int AMP=5;
	public const int AMPAMP=6;
	public const int AMPEQ=7;
	public const int ASSERT=8;
	public const int BANG=9;
	public const int BANGEQ=10;
	public const int BAR=11;
	public const int BARBAR=12;
	public const int BAREQ=13;
	public const int BOOLEAN=14;
	public const int BREAK=15;
	public const int BYTE=16;
	public const int CARET=17;
	public const int CARETEQ=18;
	public const int CASE=19;
	public const int CATCH=20;
	public const int CHAR=21;
	public const int CHARLITERAL=22;
	public const int CLASS=23;
	public const int COLON=24;
	public const int COMMA=25;
	public const int COMMENT=26;
	public const int CONST=27;
	public const int CONTINUE=28;
	public const int DEFAULT=29;
	public const int DO=30;
	public const int DOT=31;
	public const int DOUBLE=32;
	public const int DOUBLELITERAL=33;
	public const int DoubleSuffix=34;
	public const int ELLIPSIS=35;
	public const int ELSE=36;
	public const int ENUM=37;
	public const int EQ=38;
	public const int EQEQ=39;
	public const int EXTENDS=40;
	public const int EscapeSequence=41;
	public const int Exponent=42;
	public const int FALSE=43;
	public const int FINAL=44;
	public const int FINALLY=45;
	public const int FLOAT=46;
	public const int FLOATLITERAL=47;
	public const int FOR=48;
	public const int FloatSuffix=49;
	public const int GOTO=50;
	public const int GT=51;
	public const int HexDigit=52;
	public const int HexPrefix=53;
	public const int IDENTIFIER=54;
	public const int IF=55;
	public const int IMPLEMENTS=56;
	public const int IMPORT=57;
	public const int INSTANCEOF=58;
	public const int INT=59;
	public const int INTERFACE=60;
	public const int INTLITERAL=61;
	public const int IdentifierPart=62;
	public const int IdentifierStart=63;
	public const int IntegerNumber=64;
	public const int LBRACE=65;
	public const int LBRACKET=66;
	public const int LINE_COMMENT=67;
	public const int LONG=68;
	public const int LONGLITERAL=69;
	public const int LPAREN=70;
	public const int LT=71;
	public const int LongSuffix=72;
	public const int MONKEYS_AT=73;
	public const int NATIVE=74;
	public const int NEW=75;
	public const int NULL=76;
	public const int NonIntegerNumber=77;
	public const int PACKAGE=78;
	public const int PERCENT=79;
	public const int PERCENTEQ=80;
	public const int PLUS=81;
	public const int PLUSEQ=82;
	public const int PLUSPLUS=83;
	public const int PRIVATE=84;
	public const int PROTECTED=85;
	public const int PUBLIC=86;
	public const int QUES=87;
	public const int RBRACE=88;
	public const int RBRACKET=89;
	public const int RETURN=90;
	public const int RPAREN=91;
	public const int SEMI=92;
	public const int SHORT=93;
	public const int SLASH=94;
	public const int SLASHEQ=95;
	public const int STAR=96;
	public const int STAREQ=97;
	public const int STATIC=98;
	public const int STRICTFP=99;
	public const int STRINGLITERAL=100;
	public const int SUB=101;
	public const int SUBEQ=102;
	public const int SUBSUB=103;
	public const int SUPER=104;
	public const int SWITCH=105;
	public const int SYNCHRONIZED=106;
	public const int SurrogateIdentifer=107;
	public const int THIS=108;
	public const int THROW=109;
	public const int THROWS=110;
	public const int TILDE=111;
	public const int TRANSIENT=112;
	public const int TRUE=113;
	public const int TRY=114;
	public const int VOID=115;
	public const int VOLATILE=116;
	public const int WHILE=117;
	public const int WS=118;

	public JavaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[408+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return JavaParser.tokenNames; } }
	public override string GrammarFileName { get { return "Java.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();

	// $ANTLR start "compilationUnit"
	// Java.g:298:1: compilationUnit : ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ;
	[GrammarRule("compilationUnit")]
	private AstParserRuleReturnScope<object, IToken> compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 1);
		TraceIn("compilationUnit", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int compilationUnit_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> annotations1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> packageDeclaration2 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> importDeclaration3 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeDeclaration4 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(298, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// Java.g:299:5: ( ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
			DebugEnterAlt(1);
			// Java.g:299:9: ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(299, 9);
			// Java.g:299:9: ( ( annotations )? packageDeclaration )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==MONKEYS_AT))
			{
				int LA2_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_Java_fragment)))
				{
					alt2 = 1;
				}
			}
			else if ((LA2_0==PACKAGE))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:299:13: ( annotations )? packageDeclaration
				{
				DebugLocation(299, 13);
				// Java.g:299:13: ( annotations )?
				int alt1=2;
				try { DebugEnterSubRule(1);
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==MONKEYS_AT))
				{
					alt1 = 1;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:299:14: annotations
					{
					DebugLocation(299, 14);
					PushFollow(Follow._annotations_in_compilationUnit100);
					annotations1=annotations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotations1.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(1); }

				DebugLocation(301, 13);
				PushFollow(Follow._packageDeclaration_in_compilationUnit129);
				packageDeclaration2=packageDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, packageDeclaration2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(303, 9);
			// Java.g:303:9: ( importDeclaration )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IMPORT))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:303:10: importDeclaration
					{
					DebugLocation(303, 10);
					PushFollow(Follow._importDeclaration_in_compilationUnit151);
					importDeclaration3=importDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, importDeclaration3.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(305, 9);
			// Java.g:305:9: ( typeDeclaration )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==ABSTRACT||LA4_0==BOOLEAN||LA4_0==BYTE||LA4_0==CHAR||LA4_0==CLASS||LA4_0==DOUBLE||LA4_0==ENUM||LA4_0==FINAL||LA4_0==FLOAT||LA4_0==IDENTIFIER||(LA4_0>=INT && LA4_0<=INTERFACE)||LA4_0==LONG||LA4_0==LT||(LA4_0>=MONKEYS_AT && LA4_0<=NATIVE)||(LA4_0>=PRIVATE && LA4_0<=PUBLIC)||(LA4_0>=SEMI && LA4_0<=SHORT)||(LA4_0>=STATIC && LA4_0<=STRICTFP)||LA4_0==SYNCHRONIZED||LA4_0==TRANSIENT||(LA4_0>=VOID && LA4_0<=VOLATILE)))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:305:10: typeDeclaration
					{
					DebugLocation(305, 10);
					PushFollow(Follow._typeDeclaration_in_compilationUnit173);
					typeDeclaration4=typeDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration4.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compilationUnit", 1);
			LeaveRule("compilationUnit", 1);
			LeaveRule_compilationUnit();
			if (state.backtracking > 0) { Memoize(input, 1, compilationUnit_StartIndex); }

		}
		DebugLocation(307, 4);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return retval;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();

	// $ANTLR start "packageDeclaration"
	// Java.g:309:1: packageDeclaration : 'package' qualifiedName ';' ;
	[GrammarRule("packageDeclaration")]
	private AstParserRuleReturnScope<object, IToken> packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 2);
		TraceIn("packageDeclaration", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int packageDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal5 = default(IToken);
		IToken char_literal7 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName6 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal5_tree = default(object);
		object char_literal7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(309, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// Java.g:310:5: ( 'package' qualifiedName ';' )
			DebugEnterAlt(1);
			// Java.g:310:9: 'package' qualifiedName ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(310, 9);
			string_literal5=(IToken)Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration204); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal5_tree = (object)adaptor.Create(string_literal5);
			adaptor.AddChild(root_0, string_literal5_tree);
			}
			DebugLocation(310, 19);
			PushFollow(Follow._qualifiedName_in_packageDeclaration206);
			qualifiedName6=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName6.Tree);
			DebugLocation(311, 9);
			char_literal7=(IToken)Match(input,SEMI,Follow._SEMI_in_packageDeclaration216); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal7_tree = (object)adaptor.Create(char_literal7);
			adaptor.AddChild(root_0, char_literal7_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("packageDeclaration", 2);
			LeaveRule("packageDeclaration", 2);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 2, packageDeclaration_StartIndex); }

		}
		DebugLocation(312, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return retval;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();

	// $ANTLR start "importDeclaration"
	// Java.g:314:1: importDeclaration : ( 'import' ( 'static' )? IDENTIFIER '.' '*' ';' | 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';' );
	[GrammarRule("importDeclaration")]
	private AstParserRuleReturnScope<object, IToken> importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 3);
		TraceIn("importDeclaration", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int importDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal8 = default(IToken);
		IToken string_literal9 = default(IToken);
		IToken IDENTIFIER10 = default(IToken);
		IToken char_literal11 = default(IToken);
		IToken char_literal12 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken string_literal14 = default(IToken);
		IToken string_literal15 = default(IToken);
		IToken IDENTIFIER16 = default(IToken);
		IToken char_literal17 = default(IToken);
		IToken IDENTIFIER18 = default(IToken);
		IToken char_literal19 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal21 = default(IToken);

		object string_literal8_tree = default(object);
		object string_literal9_tree = default(object);
		object IDENTIFIER10_tree = default(object);
		object char_literal11_tree = default(object);
		object char_literal12_tree = default(object);
		object char_literal13_tree = default(object);
		object string_literal14_tree = default(object);
		object string_literal15_tree = default(object);
		object IDENTIFIER16_tree = default(object);
		object char_literal17_tree = default(object);
		object IDENTIFIER18_tree = default(object);
		object char_literal19_tree = default(object);
		object char_literal20_tree = default(object);
		object char_literal21_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(314, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// Java.g:315:5: ( 'import' ( 'static' )? IDENTIFIER '.' '*' ';' | 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==IMPORT))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==STATIC))
				{
					int LA9_2 = input.LA(3);

					if ((LA9_2==IDENTIFIER))
					{
						int LA9_3 = input.LA(4);

						if ((LA9_3==DOT))
						{
							int LA9_4 = input.LA(5);

							if ((LA9_4==STAR))
							{
								alt9 = 1;
							}
							else if ((LA9_4==IDENTIFIER))
							{
								alt9 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 9, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 9, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA9_1==IDENTIFIER))
				{
					int LA9_3 = input.LA(3);

					if ((LA9_3==DOT))
					{
						int LA9_4 = input.LA(4);

						if ((LA9_4==STAR))
						{
							alt9 = 1;
						}
						else if ((LA9_4==IDENTIFIER))
						{
							alt9 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 9, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:315:9: 'import' ( 'static' )? IDENTIFIER '.' '*' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(315, 9);
				string_literal8=(IToken)Match(input,IMPORT,Follow._IMPORT_in_importDeclaration237); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal8_tree = (object)adaptor.Create(string_literal8);
				adaptor.AddChild(root_0, string_literal8_tree);
				}
				DebugLocation(316, 9);
				// Java.g:316:9: ( 'static' )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==STATIC))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:316:10: 'static'
					{
					DebugLocation(316, 10);
					string_literal9=(IToken)Match(input,STATIC,Follow._STATIC_in_importDeclaration249); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal9_tree = (object)adaptor.Create(string_literal9);
					adaptor.AddChild(root_0, string_literal9_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(318, 9);
				IDENTIFIER10=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration270); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER10_tree = (object)adaptor.Create(IDENTIFIER10);
				adaptor.AddChild(root_0, IDENTIFIER10_tree);
				}
				DebugLocation(318, 20);
				char_literal11=(IToken)Match(input,DOT,Follow._DOT_in_importDeclaration272); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal11_tree = (object)adaptor.Create(char_literal11);
				adaptor.AddChild(root_0, char_literal11_tree);
				}
				DebugLocation(318, 24);
				char_literal12=(IToken)Match(input,STAR,Follow._STAR_in_importDeclaration274); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal12_tree = (object)adaptor.Create(char_literal12);
				adaptor.AddChild(root_0, char_literal12_tree);
				}
				DebugLocation(319, 9);
				char_literal13=(IToken)Match(input,SEMI,Follow._SEMI_in_importDeclaration284); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal13_tree = (object)adaptor.Create(char_literal13);
				adaptor.AddChild(root_0, char_literal13_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:320:9: 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(320, 9);
				string_literal14=(IToken)Match(input,IMPORT,Follow._IMPORT_in_importDeclaration301); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal14_tree = (object)adaptor.Create(string_literal14);
				adaptor.AddChild(root_0, string_literal14_tree);
				}
				DebugLocation(321, 9);
				// Java.g:321:9: ( 'static' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==STATIC))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:321:10: 'static'
					{
					DebugLocation(321, 10);
					string_literal15=(IToken)Match(input,STATIC,Follow._STATIC_in_importDeclaration313); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal15_tree = (object)adaptor.Create(string_literal15);
					adaptor.AddChild(root_0, string_literal15_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(323, 9);
				IDENTIFIER16=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration334); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER16_tree = (object)adaptor.Create(IDENTIFIER16);
				adaptor.AddChild(root_0, IDENTIFIER16_tree);
				}
				DebugLocation(324, 9);
				// Java.g:324:9: ( '.' IDENTIFIER )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==DOT))
					{
						int LA7_1 = input.LA(2);

						if ((LA7_1==IDENTIFIER))
						{
							alt7 = 1;
						}


					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:324:10: '.' IDENTIFIER
						{
						DebugLocation(324, 10);
						char_literal17=(IToken)Match(input,DOT,Follow._DOT_in_importDeclaration345); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal17_tree = (object)adaptor.Create(char_literal17);
						adaptor.AddChild(root_0, char_literal17_tree);
						}
						DebugLocation(324, 14);
						IDENTIFIER18=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration347); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER18_tree = (object)adaptor.Create(IDENTIFIER18);
						adaptor.AddChild(root_0, IDENTIFIER18_tree);
						}

						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(326, 9);
				// Java.g:326:9: ( '.' '*' )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==DOT))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:326:10: '.' '*'
					{
					DebugLocation(326, 10);
					char_literal19=(IToken)Match(input,DOT,Follow._DOT_in_importDeclaration369); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal19_tree = (object)adaptor.Create(char_literal19);
					adaptor.AddChild(root_0, char_literal19_tree);
					}
					DebugLocation(326, 14);
					char_literal20=(IToken)Match(input,STAR,Follow._STAR_in_importDeclaration371); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal20_tree = (object)adaptor.Create(char_literal20);
					adaptor.AddChild(root_0, char_literal20_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(328, 9);
				char_literal21=(IToken)Match(input,SEMI,Follow._SEMI_in_importDeclaration392); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal21_tree = (object)adaptor.Create(char_literal21);
				adaptor.AddChild(root_0, char_literal21_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importDeclaration", 3);
			LeaveRule("importDeclaration", 3);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 3, importDeclaration_StartIndex); }

		}
		DebugLocation(329, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return retval;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_qualifiedImportName();
	partial void LeaveRule_qualifiedImportName();

	// $ANTLR start "qualifiedImportName"
	// Java.g:331:1: qualifiedImportName : IDENTIFIER ( '.' IDENTIFIER )* ;
	[GrammarRule("qualifiedImportName")]
	private AstParserRuleReturnScope<object, IToken> qualifiedImportName()
	{
		EnterRule_qualifiedImportName();
		EnterRule("qualifiedImportName", 4);
		TraceIn("qualifiedImportName", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedImportName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER22 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken IDENTIFIER24 = default(IToken);

		object IDENTIFIER22_tree = default(object);
		object char_literal23_tree = default(object);
		object IDENTIFIER24_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedImportName");
		DebugLocation(331, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// Java.g:332:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
			DebugEnterAlt(1);
			// Java.g:332:9: IDENTIFIER ( '.' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(332, 9);
			IDENTIFIER22=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedImportName412); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER22_tree = (object)adaptor.Create(IDENTIFIER22);
			adaptor.AddChild(root_0, IDENTIFIER22_tree);
			}
			DebugLocation(333, 9);
			// Java.g:333:9: ( '.' IDENTIFIER )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==DOT))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:333:10: '.' IDENTIFIER
					{
					DebugLocation(333, 10);
					char_literal23=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedImportName423); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal23_tree = (object)adaptor.Create(char_literal23);
					adaptor.AddChild(root_0, char_literal23_tree);
					}
					DebugLocation(333, 14);
					IDENTIFIER24=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedImportName425); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER24_tree = (object)adaptor.Create(IDENTIFIER24);
					adaptor.AddChild(root_0, IDENTIFIER24_tree);
					}

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedImportName", 4);
			LeaveRule("qualifiedImportName", 4);
			LeaveRule_qualifiedImportName();
			if (state.backtracking > 0) { Memoize(input, 4, qualifiedImportName_StartIndex); }

		}
		DebugLocation(335, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedImportName"); }
		return retval;

	}
	// $ANTLR end "qualifiedImportName"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();

	// $ANTLR start "typeDeclaration"
	// Java.g:337:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
	[GrammarRule("typeDeclaration")]
	private AstParserRuleReturnScope<object, IToken> typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 5);
		TraceIn("typeDeclaration", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal26 = default(IToken);
		AstParserRuleReturnScope<object, IToken> classOrInterfaceDeclaration25 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal26_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(337, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// Java.g:338:5: ( classOrInterfaceDeclaration | ';' )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==ABSTRACT||LA11_0==BOOLEAN||LA11_0==BYTE||LA11_0==CHAR||LA11_0==CLASS||LA11_0==DOUBLE||LA11_0==ENUM||LA11_0==FINAL||LA11_0==FLOAT||LA11_0==IDENTIFIER||(LA11_0>=INT && LA11_0<=INTERFACE)||LA11_0==LONG||LA11_0==LT||(LA11_0>=MONKEYS_AT && LA11_0<=NATIVE)||(LA11_0>=PRIVATE && LA11_0<=PUBLIC)||LA11_0==SHORT||(LA11_0>=STATIC && LA11_0<=STRICTFP)||LA11_0==SYNCHRONIZED||LA11_0==TRANSIENT||(LA11_0>=VOID && LA11_0<=VOLATILE)))
			{
				alt11 = 1;
			}
			else if ((LA11_0==SEMI))
			{
				alt11 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:338:9: classOrInterfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(338, 9);
				PushFollow(Follow._classOrInterfaceDeclaration_in_typeDeclaration456);
				classOrInterfaceDeclaration25=classOrInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceDeclaration25.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:339:9: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(339, 9);
				char_literal26=(IToken)Match(input,SEMI,Follow._SEMI_in_typeDeclaration466); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal26_tree = (object)adaptor.Create(char_literal26);
				adaptor.AddChild(root_0, char_literal26_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDeclaration", 5);
			LeaveRule("typeDeclaration", 5);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 5, typeDeclaration_StartIndex); }

		}
		DebugLocation(340, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return retval;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_classOrInterfaceDeclaration();
	partial void LeaveRule_classOrInterfaceDeclaration();

	// $ANTLR start "classOrInterfaceDeclaration"
	// Java.g:342:1: classOrInterfaceDeclaration : ( classDeclaration | interfaceDeclaration );
	[GrammarRule("classOrInterfaceDeclaration")]
	private AstParserRuleReturnScope<object, IToken> classOrInterfaceDeclaration()
	{
		EnterRule_classOrInterfaceDeclaration();
		EnterRule("classOrInterfaceDeclaration", 6);
		TraceIn("classOrInterfaceDeclaration", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classOrInterfaceDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> classDeclaration27 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceDeclaration28 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "classOrInterfaceDeclaration");
		DebugLocation(342, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// Java.g:343:5: ( classDeclaration | interfaceDeclaration )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA12_1 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA12_3 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA12_4 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA12_5 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA12_6 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA12_7 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA12_8 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA12_9 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA12_10 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA12_11 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA12_12 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt12 = 1;
				}
				break;
			case INTERFACE:
				{
				alt12 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:343:10: classDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(343, 10);
				PushFollow(Follow._classDeclaration_in_classOrInterfaceDeclaration487);
				classDeclaration27=classDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDeclaration27.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:344:9: interfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(344, 9);
				PushFollow(Follow._interfaceDeclaration_in_classOrInterfaceDeclaration497);
				interfaceDeclaration28=interfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDeclaration28.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classOrInterfaceDeclaration", 6);
			LeaveRule("classOrInterfaceDeclaration", 6);
			LeaveRule_classOrInterfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 6, classOrInterfaceDeclaration_StartIndex); }

		}
		DebugLocation(345, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceDeclaration"); }
		return retval;

	}
	// $ANTLR end "classOrInterfaceDeclaration"

	partial void EnterRule_modifiers();
	partial void LeaveRule_modifiers();

	// $ANTLR start "modifiers"
	// Java.g:348:1: modifiers : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* ;
	[GrammarRule("modifiers")]
	private AstParserRuleReturnScope<object, IToken> modifiers()
	{
		EnterRule_modifiers();
		EnterRule("modifiers", 7);
		TraceIn("modifiers", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal30 = default(IToken);
		IToken string_literal31 = default(IToken);
		IToken string_literal32 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken string_literal36 = default(IToken);
		IToken string_literal37 = default(IToken);
		IToken string_literal38 = default(IToken);
		IToken string_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		AstParserRuleReturnScope<object, IToken> annotation29 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal30_tree = default(object);
		object string_literal31_tree = default(object);
		object string_literal32_tree = default(object);
		object string_literal33_tree = default(object);
		object string_literal34_tree = default(object);
		object string_literal35_tree = default(object);
		object string_literal36_tree = default(object);
		object string_literal37_tree = default(object);
		object string_literal38_tree = default(object);
		object string_literal39_tree = default(object);
		object string_literal40_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "modifiers");
		DebugLocation(348, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// Java.g:349:5: ( ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* )
			DebugEnterAlt(1);
			// Java.g:350:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(350, 5);
			// Java.g:350:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=13;
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case MONKEYS_AT:
					{
					int LA13_2 = input.LA(2);

					if ((LA13_2==IDENTIFIER))
					{
						alt13 = 1;
					}


					}
					break;
				case PUBLIC:
					{
					alt13 = 2;
					}
					break;
				case PROTECTED:
					{
					alt13 = 3;
					}
					break;
				case PRIVATE:
					{
					alt13 = 4;
					}
					break;
				case STATIC:
					{
					alt13 = 5;
					}
					break;
				case ABSTRACT:
					{
					alt13 = 6;
					}
					break;
				case FINAL:
					{
					alt13 = 7;
					}
					break;
				case NATIVE:
					{
					alt13 = 8;
					}
					break;
				case SYNCHRONIZED:
					{
					alt13 = 9;
					}
					break;
				case TRANSIENT:
					{
					alt13 = 10;
					}
					break;
				case VOLATILE:
					{
					alt13 = 11;
					}
					break;
				case STRICTFP:
					{
					alt13 = 12;
					}
					break;
				}

				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:350:10: annotation
					{
					DebugLocation(350, 10);
					PushFollow(Follow._annotation_in_modifiers532);
					annotation29=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotation29.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:351:9: 'public'
					{
					DebugLocation(351, 9);
					string_literal30=(IToken)Match(input,PUBLIC,Follow._PUBLIC_in_modifiers542); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal30_tree = (object)adaptor.Create(string_literal30);
					adaptor.AddChild(root_0, string_literal30_tree);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:352:9: 'protected'
					{
					DebugLocation(352, 9);
					string_literal31=(IToken)Match(input,PROTECTED,Follow._PROTECTED_in_modifiers552); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal31_tree = (object)adaptor.Create(string_literal31);
					adaptor.AddChild(root_0, string_literal31_tree);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Java.g:353:9: 'private'
					{
					DebugLocation(353, 9);
					string_literal32=(IToken)Match(input,PRIVATE,Follow._PRIVATE_in_modifiers562); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal32_tree = (object)adaptor.Create(string_literal32);
					adaptor.AddChild(root_0, string_literal32_tree);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// Java.g:354:9: 'static'
					{
					DebugLocation(354, 9);
					string_literal33=(IToken)Match(input,STATIC,Follow._STATIC_in_modifiers572); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal33_tree = (object)adaptor.Create(string_literal33);
					adaptor.AddChild(root_0, string_literal33_tree);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// Java.g:355:9: 'abstract'
					{
					DebugLocation(355, 9);
					string_literal34=(IToken)Match(input,ABSTRACT,Follow._ABSTRACT_in_modifiers582); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal34_tree = (object)adaptor.Create(string_literal34);
					adaptor.AddChild(root_0, string_literal34_tree);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// Java.g:356:9: 'final'
					{
					DebugLocation(356, 9);
					string_literal35=(IToken)Match(input,FINAL,Follow._FINAL_in_modifiers592); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal35_tree = (object)adaptor.Create(string_literal35);
					adaptor.AddChild(root_0, string_literal35_tree);
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// Java.g:357:9: 'native'
					{
					DebugLocation(357, 9);
					string_literal36=(IToken)Match(input,NATIVE,Follow._NATIVE_in_modifiers602); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal36_tree = (object)adaptor.Create(string_literal36);
					adaptor.AddChild(root_0, string_literal36_tree);
					}

					}
					break;
				case 9:
					DebugEnterAlt(9);
					// Java.g:358:9: 'synchronized'
					{
					DebugLocation(358, 9);
					string_literal37=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifiers612); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal37_tree = (object)adaptor.Create(string_literal37);
					adaptor.AddChild(root_0, string_literal37_tree);
					}

					}
					break;
				case 10:
					DebugEnterAlt(10);
					// Java.g:359:9: 'transient'
					{
					DebugLocation(359, 9);
					string_literal38=(IToken)Match(input,TRANSIENT,Follow._TRANSIENT_in_modifiers622); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal38_tree = (object)adaptor.Create(string_literal38);
					adaptor.AddChild(root_0, string_literal38_tree);
					}

					}
					break;
				case 11:
					DebugEnterAlt(11);
					// Java.g:360:9: 'volatile'
					{
					DebugLocation(360, 9);
					string_literal39=(IToken)Match(input,VOLATILE,Follow._VOLATILE_in_modifiers632); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal39_tree = (object)adaptor.Create(string_literal39);
					adaptor.AddChild(root_0, string_literal39_tree);
					}

					}
					break;
				case 12:
					DebugEnterAlt(12);
					// Java.g:361:9: 'strictfp'
					{
					DebugLocation(361, 9);
					string_literal40=(IToken)Match(input,STRICTFP,Follow._STRICTFP_in_modifiers642); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal40_tree = (object)adaptor.Create(string_literal40);
					adaptor.AddChild(root_0, string_literal40_tree);
					}

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifiers", 7);
			LeaveRule("modifiers", 7);
			LeaveRule_modifiers();
			if (state.backtracking > 0) { Memoize(input, 7, modifiers_StartIndex); }

		}
		DebugLocation(363, 4);
		} finally { DebugExitRule(GrammarFileName, "modifiers"); }
		return retval;

	}
	// $ANTLR end "modifiers"

	partial void EnterRule_variableModifiers();
	partial void LeaveRule_variableModifiers();

	// $ANTLR start "variableModifiers"
	// Java.g:366:1: variableModifiers : ( 'final' | annotation )* ;
	[GrammarRule("variableModifiers")]
	private AstParserRuleReturnScope<object, IToken> variableModifiers()
	{
		EnterRule_variableModifiers();
		EnterRule("variableModifiers", 8);
		TraceIn("variableModifiers", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableModifiers_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal41 = default(IToken);
		AstParserRuleReturnScope<object, IToken> annotation42 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal41_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableModifiers");
		DebugLocation(366, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// Java.g:367:5: ( ( 'final' | annotation )* )
			DebugEnterAlt(1);
			// Java.g:367:9: ( 'final' | annotation )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(367, 9);
			// Java.g:367:9: ( 'final' | annotation )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=3;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==FINAL))
				{
					alt14 = 1;
				}
				else if ((LA14_0==MONKEYS_AT))
				{
					alt14 = 2;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:367:13: 'final'
					{
					DebugLocation(367, 13);
					string_literal41=(IToken)Match(input,FINAL,Follow._FINAL_in_variableModifiers674); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal41_tree = (object)adaptor.Create(string_literal41);
					adaptor.AddChild(root_0, string_literal41_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:368:13: annotation
					{
					DebugLocation(368, 13);
					PushFollow(Follow._annotation_in_variableModifiers688);
					annotation42=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotation42.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableModifiers", 8);
			LeaveRule("variableModifiers", 8);
			LeaveRule_variableModifiers();
			if (state.backtracking > 0) { Memoize(input, 8, variableModifiers_StartIndex); }

		}
		DebugLocation(370, 4);
		} finally { DebugExitRule(GrammarFileName, "variableModifiers"); }
		return retval;

	}
	// $ANTLR end "variableModifiers"

	partial void EnterRule_classDeclaration();
	partial void LeaveRule_classDeclaration();

	// $ANTLR start "classDeclaration"
	// Java.g:373:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );
	[GrammarRule("classDeclaration")]
	private AstParserRuleReturnScope<object, IToken> classDeclaration()
	{
		EnterRule_classDeclaration();
		EnterRule("classDeclaration", 9);
		TraceIn("classDeclaration", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> normalClassDeclaration43 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumDeclaration44 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "classDeclaration");
		DebugLocation(373, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// Java.g:374:5: ( normalClassDeclaration | enumDeclaration )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA15_1 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA15_3 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA15_4 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA15_5 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA15_6 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA15_7 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA15_8 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA15_9 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA15_10 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA15_11 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA15_12 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				alt15 = 1;
				}
				break;
			case ENUM:
				{
				alt15 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:374:9: normalClassDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(374, 9);
				PushFollow(Follow._normalClassDeclaration_in_classDeclaration724);
				normalClassDeclaration43=normalClassDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalClassDeclaration43.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:375:9: enumDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(375, 9);
				PushFollow(Follow._enumDeclaration_in_classDeclaration734);
				enumDeclaration44=enumDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumDeclaration44.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classDeclaration", 9);
			LeaveRule("classDeclaration", 9);
			LeaveRule_classDeclaration();
			if (state.backtracking > 0) { Memoize(input, 9, classDeclaration_StartIndex); }

		}
		DebugLocation(376, 4);
		} finally { DebugExitRule(GrammarFileName, "classDeclaration"); }
		return retval;

	}
	// $ANTLR end "classDeclaration"

	partial void EnterRule_normalClassDeclaration();
	partial void LeaveRule_normalClassDeclaration();

	// $ANTLR start "normalClassDeclaration"
	// Java.g:378:1: normalClassDeclaration : modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody ;
	[GrammarRule("normalClassDeclaration")]
	private AstParserRuleReturnScope<object, IToken> normalClassDeclaration()
	{
		EnterRule_normalClassDeclaration();
		EnterRule("normalClassDeclaration", 10);
		TraceIn("normalClassDeclaration", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int normalClassDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal46 = default(IToken);
		IToken IDENTIFIER47 = default(IToken);
		IToken string_literal49 = default(IToken);
		IToken string_literal51 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers45 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters48 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type50 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeList52 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classBody53 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal46_tree = default(object);
		object IDENTIFIER47_tree = default(object);
		object string_literal49_tree = default(object);
		object string_literal51_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "normalClassDeclaration");
		DebugLocation(378, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// Java.g:379:5: ( modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody )
			DebugEnterAlt(1);
			// Java.g:379:9: modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(379, 9);
			PushFollow(Follow._modifiers_in_normalClassDeclaration754);
			modifiers45=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers45.Tree);
			DebugLocation(379, 20);
			string_literal46=(IToken)Match(input,CLASS,Follow._CLASS_in_normalClassDeclaration757); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal46_tree = (object)adaptor.Create(string_literal46);
			adaptor.AddChild(root_0, string_literal46_tree);
			}
			DebugLocation(379, 28);
			IDENTIFIER47=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalClassDeclaration759); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER47_tree = (object)adaptor.Create(IDENTIFIER47);
			adaptor.AddChild(root_0, IDENTIFIER47_tree);
			}
			DebugLocation(380, 9);
			// Java.g:380:9: ( typeParameters )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==LT))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:380:10: typeParameters
				{
				DebugLocation(380, 10);
				PushFollow(Follow._typeParameters_in_normalClassDeclaration770);
				typeParameters48=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters48.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(382, 9);
			// Java.g:382:9: ( 'extends' type )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==EXTENDS))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:382:10: 'extends' type
				{
				DebugLocation(382, 10);
				string_literal49=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_normalClassDeclaration792); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal49_tree = (object)adaptor.Create(string_literal49);
				adaptor.AddChild(root_0, string_literal49_tree);
				}
				DebugLocation(382, 20);
				PushFollow(Follow._type_in_normalClassDeclaration794);
				type50=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type50.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(384, 9);
			// Java.g:384:9: ( 'implements' typeList )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==IMPLEMENTS))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:384:10: 'implements' typeList
				{
				DebugLocation(384, 10);
				string_literal51=(IToken)Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_normalClassDeclaration816); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal51_tree = (object)adaptor.Create(string_literal51);
				adaptor.AddChild(root_0, string_literal51_tree);
				}
				DebugLocation(384, 23);
				PushFollow(Follow._typeList_in_normalClassDeclaration818);
				typeList52=typeList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeList52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(386, 9);
			PushFollow(Follow._classBody_in_normalClassDeclaration851);
			classBody53=classBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, classBody53.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("normalClassDeclaration", 10);
			LeaveRule("normalClassDeclaration", 10);
			LeaveRule_normalClassDeclaration();
			if (state.backtracking > 0) { Memoize(input, 10, normalClassDeclaration_StartIndex); }

		}
		DebugLocation(387, 4);
		} finally { DebugExitRule(GrammarFileName, "normalClassDeclaration"); }
		return retval;

	}
	// $ANTLR end "normalClassDeclaration"

	partial void EnterRule_typeParameters();
	partial void LeaveRule_typeParameters();

	// $ANTLR start "typeParameters"
	// Java.g:390:1: typeParameters : '<' typeParameter ( ',' typeParameter )* '>' ;
	[GrammarRule("typeParameters")]
	private AstParserRuleReturnScope<object, IToken> typeParameters()
	{
		EnterRule_typeParameters();
		EnterRule("typeParameters", 11);
		TraceIn("typeParameters", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeParameters_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken char_literal58 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeParameter55 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameter57 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal54_tree = default(object);
		object char_literal56_tree = default(object);
		object char_literal58_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeParameters");
		DebugLocation(390, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// Java.g:391:5: ( '<' typeParameter ( ',' typeParameter )* '>' )
			DebugEnterAlt(1);
			// Java.g:391:9: '<' typeParameter ( ',' typeParameter )* '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(391, 9);
			char_literal54=(IToken)Match(input,LT,Follow._LT_in_typeParameters872); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal54_tree = (object)adaptor.Create(char_literal54);
			adaptor.AddChild(root_0, char_literal54_tree);
			}
			DebugLocation(392, 13);
			PushFollow(Follow._typeParameter_in_typeParameters886);
			typeParameter55=typeParameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameter55.Tree);
			DebugLocation(393, 13);
			// Java.g:393:13: ( ',' typeParameter )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==COMMA))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:393:14: ',' typeParameter
					{
					DebugLocation(393, 14);
					char_literal56=(IToken)Match(input,COMMA,Follow._COMMA_in_typeParameters901); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal56_tree = (object)adaptor.Create(char_literal56);
					adaptor.AddChild(root_0, char_literal56_tree);
					}
					DebugLocation(393, 18);
					PushFollow(Follow._typeParameter_in_typeParameters903);
					typeParameter57=typeParameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameter57.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(395, 9);
			char_literal58=(IToken)Match(input,GT,Follow._GT_in_typeParameters928); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal58_tree = (object)adaptor.Create(char_literal58);
			adaptor.AddChild(root_0, char_literal58_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeParameters", 11);
			LeaveRule("typeParameters", 11);
			LeaveRule_typeParameters();
			if (state.backtracking > 0) { Memoize(input, 11, typeParameters_StartIndex); }

		}
		DebugLocation(396, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameters"); }
		return retval;

	}
	// $ANTLR end "typeParameters"

	partial void EnterRule_typeParameter();
	partial void LeaveRule_typeParameter();

	// $ANTLR start "typeParameter"
	// Java.g:398:1: typeParameter : IDENTIFIER ( 'extends' typeBound )? ;
	[GrammarRule("typeParameter")]
	private AstParserRuleReturnScope<object, IToken> typeParameter()
	{
		EnterRule_typeParameter();
		EnterRule("typeParameter", 12);
		TraceIn("typeParameter", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeParameter_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER59 = default(IToken);
		IToken string_literal60 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeBound61 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER59_tree = default(object);
		object string_literal60_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeParameter");
		DebugLocation(398, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// Java.g:399:5: ( IDENTIFIER ( 'extends' typeBound )? )
			DebugEnterAlt(1);
			// Java.g:399:9: IDENTIFIER ( 'extends' typeBound )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(399, 9);
			IDENTIFIER59=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_typeParameter948); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER59_tree = (object)adaptor.Create(IDENTIFIER59);
			adaptor.AddChild(root_0, IDENTIFIER59_tree);
			}
			DebugLocation(400, 9);
			// Java.g:400:9: ( 'extends' typeBound )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==EXTENDS))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:400:10: 'extends' typeBound
				{
				DebugLocation(400, 10);
				string_literal60=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_typeParameter959); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal60_tree = (object)adaptor.Create(string_literal60);
				adaptor.AddChild(root_0, string_literal60_tree);
				}
				DebugLocation(400, 20);
				PushFollow(Follow._typeBound_in_typeParameter961);
				typeBound61=typeBound();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeBound61.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeParameter", 12);
			LeaveRule("typeParameter", 12);
			LeaveRule_typeParameter();
			if (state.backtracking > 0) { Memoize(input, 12, typeParameter_StartIndex); }

		}
		DebugLocation(402, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameter"); }
		return retval;

	}
	// $ANTLR end "typeParameter"

	partial void EnterRule_typeBound();
	partial void LeaveRule_typeBound();

	// $ANTLR start "typeBound"
	// Java.g:405:1: typeBound : type ( '&' type )* ;
	[GrammarRule("typeBound")]
	private AstParserRuleReturnScope<object, IToken> typeBound()
	{
		EnterRule_typeBound();
		EnterRule("typeBound", 13);
		TraceIn("typeBound", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeBound_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal63 = default(IToken);
		AstParserRuleReturnScope<object, IToken> type62 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type64 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal63_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeBound");
		DebugLocation(405, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// Java.g:406:5: ( type ( '&' type )* )
			DebugEnterAlt(1);
			// Java.g:406:9: type ( '&' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(406, 9);
			PushFollow(Follow._type_in_typeBound993);
			type62=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type62.Tree);
			DebugLocation(407, 9);
			// Java.g:407:9: ( '&' type )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==AMP))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:407:10: '&' type
					{
					DebugLocation(407, 10);
					char_literal63=(IToken)Match(input,AMP,Follow._AMP_in_typeBound1004); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal63_tree = (object)adaptor.Create(char_literal63);
					adaptor.AddChild(root_0, char_literal63_tree);
					}
					DebugLocation(407, 14);
					PushFollow(Follow._type_in_typeBound1006);
					type64=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type64.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeBound", 13);
			LeaveRule("typeBound", 13);
			LeaveRule_typeBound();
			if (state.backtracking > 0) { Memoize(input, 13, typeBound_StartIndex); }

		}
		DebugLocation(409, 4);
		} finally { DebugExitRule(GrammarFileName, "typeBound"); }
		return retval;

	}
	// $ANTLR end "typeBound"

	partial void EnterRule_enumDeclaration();
	partial void LeaveRule_enumDeclaration();

	// $ANTLR start "enumDeclaration"
	// Java.g:412:1: enumDeclaration : modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody ;
	[GrammarRule("enumDeclaration")]
	private AstParserRuleReturnScope<object, IToken> enumDeclaration()
	{
		EnterRule_enumDeclaration();
		EnterRule("enumDeclaration", 14);
		TraceIn("enumDeclaration", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal66 = default(IToken);
		IToken IDENTIFIER67 = default(IToken);
		IToken string_literal68 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers65 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeList69 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumBody70 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal66_tree = default(object);
		object IDENTIFIER67_tree = default(object);
		object string_literal68_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumDeclaration");
		DebugLocation(412, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// Java.g:413:5: ( modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody )
			DebugEnterAlt(1);
			// Java.g:413:9: modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(413, 9);
			PushFollow(Follow._modifiers_in_enumDeclaration1038);
			modifiers65=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers65.Tree);
			DebugLocation(414, 9);
			// Java.g:414:9: ( 'enum' )
			DebugEnterAlt(1);
			// Java.g:414:10: 'enum'
			{
			DebugLocation(414, 10);
			string_literal66=(IToken)Match(input,ENUM,Follow._ENUM_in_enumDeclaration1050); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal66_tree = (object)adaptor.Create(string_literal66);
			adaptor.AddChild(root_0, string_literal66_tree);
			}

			}

			DebugLocation(416, 9);
			IDENTIFIER67=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumDeclaration1071); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER67_tree = (object)adaptor.Create(IDENTIFIER67);
			adaptor.AddChild(root_0, IDENTIFIER67_tree);
			}
			DebugLocation(417, 9);
			// Java.g:417:9: ( 'implements' typeList )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==IMPLEMENTS))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:417:10: 'implements' typeList
				{
				DebugLocation(417, 10);
				string_literal68=(IToken)Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_enumDeclaration1082); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal68_tree = (object)adaptor.Create(string_literal68);
				adaptor.AddChild(root_0, string_literal68_tree);
				}
				DebugLocation(417, 23);
				PushFollow(Follow._typeList_in_enumDeclaration1084);
				typeList69=typeList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeList69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(419, 9);
			PushFollow(Follow._enumBody_in_enumDeclaration1105);
			enumBody70=enumBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumBody70.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumDeclaration", 14);
			LeaveRule("enumDeclaration", 14);
			LeaveRule_enumDeclaration();
			if (state.backtracking > 0) { Memoize(input, 14, enumDeclaration_StartIndex); }

		}
		DebugLocation(420, 4);
		} finally { DebugExitRule(GrammarFileName, "enumDeclaration"); }
		return retval;

	}
	// $ANTLR end "enumDeclaration"

	partial void EnterRule_enumBody();
	partial void LeaveRule_enumBody();

	// $ANTLR start "enumBody"
	// Java.g:423:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' ;
	[GrammarRule("enumBody")]
	private AstParserRuleReturnScope<object, IToken> enumBody()
	{
		EnterRule_enumBody();
		EnterRule("enumBody", 15);
		TraceIn("enumBody", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumBody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal71 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken char_literal75 = default(IToken);
		AstParserRuleReturnScope<object, IToken> enumConstants72 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumBodyDeclarations74 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal71_tree = default(object);
		object char_literal73_tree = default(object);
		object char_literal75_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumBody");
		DebugLocation(423, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// Java.g:424:5: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' )
			DebugEnterAlt(1);
			// Java.g:424:9: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(424, 9);
			char_literal71=(IToken)Match(input,LBRACE,Follow._LBRACE_in_enumBody1130); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal71_tree = (object)adaptor.Create(char_literal71);
			adaptor.AddChild(root_0, char_literal71_tree);
			}
			DebugLocation(425, 9);
			// Java.g:425:9: ( enumConstants )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==IDENTIFIER||LA23_0==MONKEYS_AT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:425:10: enumConstants
				{
				DebugLocation(425, 10);
				PushFollow(Follow._enumConstants_in_enumBody1141);
				enumConstants72=enumConstants();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstants72.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(427, 9);
			// Java.g:427:9: ( ',' )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==COMMA))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:427:9: ','
				{
				DebugLocation(427, 9);
				char_literal73=(IToken)Match(input,COMMA,Follow._COMMA_in_enumBody1163); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal73_tree = (object)adaptor.Create(char_literal73);
				adaptor.AddChild(root_0, char_literal73_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(428, 9);
			// Java.g:428:9: ( enumBodyDeclarations )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==SEMI))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:428:10: enumBodyDeclarations
				{
				DebugLocation(428, 10);
				PushFollow(Follow._enumBodyDeclarations_in_enumBody1176);
				enumBodyDeclarations74=enumBodyDeclarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumBodyDeclarations74.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(430, 9);
			char_literal75=(IToken)Match(input,RBRACE,Follow._RBRACE_in_enumBody1198); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal75_tree = (object)adaptor.Create(char_literal75);
			adaptor.AddChild(root_0, char_literal75_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumBody", 15);
			LeaveRule("enumBody", 15);
			LeaveRule_enumBody();
			if (state.backtracking > 0) { Memoize(input, 15, enumBody_StartIndex); }

		}
		DebugLocation(431, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBody"); }
		return retval;

	}
	// $ANTLR end "enumBody"

	partial void EnterRule_enumConstants();
	partial void LeaveRule_enumConstants();

	// $ANTLR start "enumConstants"
	// Java.g:433:1: enumConstants : enumConstant ( ',' enumConstant )* ;
	[GrammarRule("enumConstants")]
	private AstParserRuleReturnScope<object, IToken> enumConstants()
	{
		EnterRule_enumConstants();
		EnterRule("enumConstants", 16);
		TraceIn("enumConstants", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstants_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal77 = default(IToken);
		AstParserRuleReturnScope<object, IToken> enumConstant76 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumConstant78 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal77_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumConstants");
		DebugLocation(433, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// Java.g:434:5: ( enumConstant ( ',' enumConstant )* )
			DebugEnterAlt(1);
			// Java.g:434:9: enumConstant ( ',' enumConstant )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(434, 9);
			PushFollow(Follow._enumConstant_in_enumConstants1218);
			enumConstant76=enumConstant();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant76.Tree);
			DebugLocation(435, 9);
			// Java.g:435:9: ( ',' enumConstant )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==COMMA))
				{
					int LA26_1 = input.LA(2);

					if ((LA26_1==IDENTIFIER||LA26_1==MONKEYS_AT))
					{
						alt26 = 1;
					}


				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:435:10: ',' enumConstant
					{
					DebugLocation(435, 10);
					char_literal77=(IToken)Match(input,COMMA,Follow._COMMA_in_enumConstants1229); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal77_tree = (object)adaptor.Create(char_literal77);
					adaptor.AddChild(root_0, char_literal77_tree);
					}
					DebugLocation(435, 14);
					PushFollow(Follow._enumConstant_in_enumConstants1231);
					enumConstant78=enumConstant();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant78.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstants", 16);
			LeaveRule("enumConstants", 16);
			LeaveRule_enumConstants();
			if (state.backtracking > 0) { Memoize(input, 16, enumConstants_StartIndex); }

		}
		DebugLocation(437, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstants"); }
		return retval;

	}
	// $ANTLR end "enumConstants"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();

	// $ANTLR start "enumConstant"
	// Java.g:443:1: enumConstant : ( annotations )? IDENTIFIER ( arguments )? ( classBody )? ;
	[GrammarRule("enumConstant")]
	private AstParserRuleReturnScope<object, IToken> enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 17);
		TraceIn("enumConstant", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumConstant_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER80 = default(IToken);
		AstParserRuleReturnScope<object, IToken> annotations79 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments81 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classBody82 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER80_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(443, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// Java.g:444:5: ( ( annotations )? IDENTIFIER ( arguments )? ( classBody )? )
			DebugEnterAlt(1);
			// Java.g:444:9: ( annotations )? IDENTIFIER ( arguments )? ( classBody )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(444, 9);
			// Java.g:444:9: ( annotations )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==MONKEYS_AT))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:444:10: annotations
				{
				DebugLocation(444, 10);
				PushFollow(Follow._annotations_in_enumConstant1265);
				annotations79=annotations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotations79.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(446, 9);
			IDENTIFIER80=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumConstant1286); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER80_tree = (object)adaptor.Create(IDENTIFIER80);
			adaptor.AddChild(root_0, IDENTIFIER80_tree);
			}
			DebugLocation(447, 9);
			// Java.g:447:9: ( arguments )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==LPAREN))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:447:10: arguments
				{
				DebugLocation(447, 10);
				PushFollow(Follow._arguments_in_enumConstant1297);
				arguments81=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(449, 9);
			// Java.g:449:9: ( classBody )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==LBRACE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:449:10: classBody
				{
				DebugLocation(449, 10);
				PushFollow(Follow._classBody_in_enumConstant1319);
				classBody82=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classBody82.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstant", 17);
			LeaveRule("enumConstant", 17);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 17, enumConstant_StartIndex); }

		}
		DebugLocation(453, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return retval;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_enumBodyDeclarations();
	partial void LeaveRule_enumBodyDeclarations();

	// $ANTLR start "enumBodyDeclarations"
	// Java.g:455:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* ;
	[GrammarRule("enumBodyDeclarations")]
	private AstParserRuleReturnScope<object, IToken> enumBodyDeclarations()
	{
		EnterRule_enumBodyDeclarations();
		EnterRule("enumBodyDeclarations", 18);
		TraceIn("enumBodyDeclarations", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumBodyDeclarations_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal83 = default(IToken);
		AstParserRuleReturnScope<object, IToken> classBodyDeclaration84 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal83_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumBodyDeclarations");
		DebugLocation(455, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// Java.g:456:5: ( ';' ( classBodyDeclaration )* )
			DebugEnterAlt(1);
			// Java.g:456:9: ';' ( classBodyDeclaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(456, 9);
			char_literal83=(IToken)Match(input,SEMI,Follow._SEMI_in_enumBodyDeclarations1360); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal83_tree = (object)adaptor.Create(char_literal83);
			adaptor.AddChild(root_0, char_literal83_tree);
			}
			DebugLocation(457, 9);
			// Java.g:457:9: ( classBodyDeclaration )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==ABSTRACT||LA30_0==BOOLEAN||LA30_0==BYTE||LA30_0==CHAR||LA30_0==CLASS||LA30_0==DOUBLE||LA30_0==ENUM||LA30_0==FINAL||LA30_0==FLOAT||LA30_0==IDENTIFIER||(LA30_0>=INT && LA30_0<=INTERFACE)||LA30_0==LBRACE||LA30_0==LONG||LA30_0==LT||(LA30_0>=MONKEYS_AT && LA30_0<=NATIVE)||(LA30_0>=PRIVATE && LA30_0<=PUBLIC)||(LA30_0>=SEMI && LA30_0<=SHORT)||(LA30_0>=STATIC && LA30_0<=STRICTFP)||LA30_0==SYNCHRONIZED||LA30_0==TRANSIENT||(LA30_0>=VOID && LA30_0<=VOLATILE)))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:457:10: classBodyDeclaration
					{
					DebugLocation(457, 10);
					PushFollow(Follow._classBodyDeclaration_in_enumBodyDeclarations1372);
					classBodyDeclaration84=classBodyDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classBodyDeclaration84.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumBodyDeclarations", 18);
			LeaveRule("enumBodyDeclarations", 18);
			LeaveRule_enumBodyDeclarations();
			if (state.backtracking > 0) { Memoize(input, 18, enumBodyDeclarations_StartIndex); }

		}
		DebugLocation(459, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBodyDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumBodyDeclarations"

	partial void EnterRule_interfaceDeclaration();
	partial void LeaveRule_interfaceDeclaration();

	// $ANTLR start "interfaceDeclaration"
	// Java.g:461:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
	[GrammarRule("interfaceDeclaration")]
	private AstParserRuleReturnScope<object, IToken> interfaceDeclaration()
	{
		EnterRule_interfaceDeclaration();
		EnterRule("interfaceDeclaration", 19);
		TraceIn("interfaceDeclaration", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> normalInterfaceDeclaration85 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> annotationTypeDeclaration86 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "interfaceDeclaration");
		DebugLocation(461, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// Java.g:462:5: ( normalInterfaceDeclaration | annotationTypeDeclaration )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA31_1 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA31_3 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA31_4 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA31_5 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA31_6 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA31_7 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA31_8 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA31_9 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA31_10 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA31_11 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA31_12 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTERFACE:
				{
				alt31 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:462:9: normalInterfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(462, 9);
				PushFollow(Follow._normalInterfaceDeclaration_in_interfaceDeclaration1403);
				normalInterfaceDeclaration85=normalInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalInterfaceDeclaration85.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:463:9: annotationTypeDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(463, 9);
				PushFollow(Follow._annotationTypeDeclaration_in_interfaceDeclaration1413);
				annotationTypeDeclaration86=annotationTypeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeDeclaration86.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceDeclaration", 19);
			LeaveRule("interfaceDeclaration", 19);
			LeaveRule_interfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 19, interfaceDeclaration_StartIndex); }

		}
		DebugLocation(464, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceDeclaration"

	partial void EnterRule_normalInterfaceDeclaration();
	partial void LeaveRule_normalInterfaceDeclaration();

	// $ANTLR start "normalInterfaceDeclaration"
	// Java.g:466:1: normalInterfaceDeclaration : modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody ;
	[GrammarRule("normalInterfaceDeclaration")]
	private AstParserRuleReturnScope<object, IToken> normalInterfaceDeclaration()
	{
		EnterRule_normalInterfaceDeclaration();
		EnterRule("normalInterfaceDeclaration", 20);
		TraceIn("normalInterfaceDeclaration", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int normalInterfaceDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal88 = default(IToken);
		IToken IDENTIFIER89 = default(IToken);
		IToken string_literal91 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers87 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters90 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeList92 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceBody93 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal88_tree = default(object);
		object IDENTIFIER89_tree = default(object);
		object string_literal91_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "normalInterfaceDeclaration");
		DebugLocation(466, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// Java.g:467:5: ( modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody )
			DebugEnterAlt(1);
			// Java.g:467:9: modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(467, 9);
			PushFollow(Follow._modifiers_in_normalInterfaceDeclaration1437);
			modifiers87=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers87.Tree);
			DebugLocation(467, 19);
			string_literal88=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_normalInterfaceDeclaration1439); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal88_tree = (object)adaptor.Create(string_literal88);
			adaptor.AddChild(root_0, string_literal88_tree);
			}
			DebugLocation(467, 31);
			IDENTIFIER89=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalInterfaceDeclaration1441); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER89_tree = (object)adaptor.Create(IDENTIFIER89);
			adaptor.AddChild(root_0, IDENTIFIER89_tree);
			}
			DebugLocation(468, 9);
			// Java.g:468:9: ( typeParameters )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==LT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:468:10: typeParameters
				{
				DebugLocation(468, 10);
				PushFollow(Follow._typeParameters_in_normalInterfaceDeclaration1452);
				typeParameters90=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(470, 9);
			// Java.g:470:9: ( 'extends' typeList )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==EXTENDS))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:470:10: 'extends' typeList
				{
				DebugLocation(470, 10);
				string_literal91=(IToken)Match(input,EXTENDS,Follow._EXTENDS_in_normalInterfaceDeclaration1474); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal91_tree = (object)adaptor.Create(string_literal91);
				adaptor.AddChild(root_0, string_literal91_tree);
				}
				DebugLocation(470, 20);
				PushFollow(Follow._typeList_in_normalInterfaceDeclaration1476);
				typeList92=typeList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeList92.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(472, 9);
			PushFollow(Follow._interfaceBody_in_normalInterfaceDeclaration1497);
			interfaceBody93=interfaceBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceBody93.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("normalInterfaceDeclaration", 20);
			LeaveRule("normalInterfaceDeclaration", 20);
			LeaveRule_normalInterfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 20, normalInterfaceDeclaration_StartIndex); }

		}
		DebugLocation(473, 4);
		} finally { DebugExitRule(GrammarFileName, "normalInterfaceDeclaration"); }
		return retval;

	}
	// $ANTLR end "normalInterfaceDeclaration"

	partial void EnterRule_typeList();
	partial void LeaveRule_typeList();

	// $ANTLR start "typeList"
	// Java.g:475:1: typeList : type ( ',' type )* ;
	[GrammarRule("typeList")]
	private AstParserRuleReturnScope<object, IToken> typeList()
	{
		EnterRule_typeList();
		EnterRule("typeList", 21);
		TraceIn("typeList", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal95 = default(IToken);
		AstParserRuleReturnScope<object, IToken> type94 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type96 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal95_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeList");
		DebugLocation(475, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// Java.g:476:5: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// Java.g:476:9: type ( ',' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(476, 9);
			PushFollow(Follow._type_in_typeList1517);
			type94=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type94.Tree);
			DebugLocation(477, 9);
			// Java.g:477:9: ( ',' type )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==COMMA))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:477:10: ',' type
					{
					DebugLocation(477, 10);
					char_literal95=(IToken)Match(input,COMMA,Follow._COMMA_in_typeList1528); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal95_tree = (object)adaptor.Create(char_literal95);
					adaptor.AddChild(root_0, char_literal95_tree);
					}
					DebugLocation(477, 14);
					PushFollow(Follow._type_in_typeList1530);
					type96=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type96.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeList", 21);
			LeaveRule("typeList", 21);
			LeaveRule_typeList();
			if (state.backtracking > 0) { Memoize(input, 21, typeList_StartIndex); }

		}
		DebugLocation(479, 4);
		} finally { DebugExitRule(GrammarFileName, "typeList"); }
		return retval;

	}
	// $ANTLR end "typeList"

	partial void EnterRule_classBody();
	partial void LeaveRule_classBody();

	// $ANTLR start "classBody"
	// Java.g:481:1: classBody : '{' ( classBodyDeclaration )* '}' ;
	[GrammarRule("classBody")]
	private AstParserRuleReturnScope<object, IToken> classBody()
	{
		EnterRule_classBody();
		EnterRule("classBody", 22);
		TraceIn("classBody", 22);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classBody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal97 = default(IToken);
		IToken char_literal99 = default(IToken);
		AstParserRuleReturnScope<object, IToken> classBodyDeclaration98 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal97_tree = default(object);
		object char_literal99_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classBody");
		DebugLocation(481, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// Java.g:482:5: ( '{' ( classBodyDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:482:9: '{' ( classBodyDeclaration )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(482, 9);
			char_literal97=(IToken)Match(input,LBRACE,Follow._LBRACE_in_classBody1561); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal97_tree = (object)adaptor.Create(char_literal97);
			adaptor.AddChild(root_0, char_literal97_tree);
			}
			DebugLocation(483, 9);
			// Java.g:483:9: ( classBodyDeclaration )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==ABSTRACT||LA35_0==BOOLEAN||LA35_0==BYTE||LA35_0==CHAR||LA35_0==CLASS||LA35_0==DOUBLE||LA35_0==ENUM||LA35_0==FINAL||LA35_0==FLOAT||LA35_0==IDENTIFIER||(LA35_0>=INT && LA35_0<=INTERFACE)||LA35_0==LBRACE||LA35_0==LONG||LA35_0==LT||(LA35_0>=MONKEYS_AT && LA35_0<=NATIVE)||(LA35_0>=PRIVATE && LA35_0<=PUBLIC)||(LA35_0>=SEMI && LA35_0<=SHORT)||(LA35_0>=STATIC && LA35_0<=STRICTFP)||LA35_0==SYNCHRONIZED||LA35_0==TRANSIENT||(LA35_0>=VOID && LA35_0<=VOLATILE)))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:483:10: classBodyDeclaration
					{
					DebugLocation(483, 10);
					PushFollow(Follow._classBodyDeclaration_in_classBody1573);
					classBodyDeclaration98=classBodyDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classBodyDeclaration98.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }

			DebugLocation(485, 9);
			char_literal99=(IToken)Match(input,RBRACE,Follow._RBRACE_in_classBody1595); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal99_tree = (object)adaptor.Create(char_literal99);
			adaptor.AddChild(root_0, char_literal99_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBody", 22);
			LeaveRule("classBody", 22);
			LeaveRule_classBody();
			if (state.backtracking > 0) { Memoize(input, 22, classBody_StartIndex); }

		}
		DebugLocation(486, 4);
		} finally { DebugExitRule(GrammarFileName, "classBody"); }
		return retval;

	}
	// $ANTLR end "classBody"

	partial void EnterRule_interfaceBody();
	partial void LeaveRule_interfaceBody();

	// $ANTLR start "interfaceBody"
	// Java.g:488:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
	[GrammarRule("interfaceBody")]
	private AstParserRuleReturnScope<object, IToken> interfaceBody()
	{
		EnterRule_interfaceBody();
		EnterRule("interfaceBody", 23);
		TraceIn("interfaceBody", 23);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceBody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal100 = default(IToken);
		IToken char_literal102 = default(IToken);
		AstParserRuleReturnScope<object, IToken> interfaceBodyDeclaration101 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal100_tree = default(object);
		object char_literal102_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceBody");
		DebugLocation(488, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// Java.g:489:5: ( '{' ( interfaceBodyDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:489:9: '{' ( interfaceBodyDeclaration )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(489, 9);
			char_literal100=(IToken)Match(input,LBRACE,Follow._LBRACE_in_interfaceBody1615); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal100_tree = (object)adaptor.Create(char_literal100);
			adaptor.AddChild(root_0, char_literal100_tree);
			}
			DebugLocation(490, 9);
			// Java.g:490:9: ( interfaceBodyDeclaration )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==ABSTRACT||LA36_0==BOOLEAN||LA36_0==BYTE||LA36_0==CHAR||LA36_0==CLASS||LA36_0==DOUBLE||LA36_0==ENUM||LA36_0==FINAL||LA36_0==FLOAT||LA36_0==IDENTIFIER||(LA36_0>=INT && LA36_0<=INTERFACE)||LA36_0==LONG||LA36_0==LT||(LA36_0>=MONKEYS_AT && LA36_0<=NATIVE)||(LA36_0>=PRIVATE && LA36_0<=PUBLIC)||(LA36_0>=SEMI && LA36_0<=SHORT)||(LA36_0>=STATIC && LA36_0<=STRICTFP)||LA36_0==SYNCHRONIZED||LA36_0==TRANSIENT||(LA36_0>=VOID && LA36_0<=VOLATILE)))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:490:10: interfaceBodyDeclaration
					{
					DebugLocation(490, 10);
					PushFollow(Follow._interfaceBodyDeclaration_in_interfaceBody1627);
					interfaceBodyDeclaration101=interfaceBodyDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceBodyDeclaration101.Tree);

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }

			DebugLocation(492, 9);
			char_literal102=(IToken)Match(input,RBRACE,Follow._RBRACE_in_interfaceBody1649); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal102_tree = (object)adaptor.Create(char_literal102);
			adaptor.AddChild(root_0, char_literal102_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceBody", 23);
			LeaveRule("interfaceBody", 23);
			LeaveRule_interfaceBody();
			if (state.backtracking > 0) { Memoize(input, 23, interfaceBody_StartIndex); }

		}
		DebugLocation(493, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBody"); }
		return retval;

	}
	// $ANTLR end "interfaceBody"

	partial void EnterRule_classBodyDeclaration();
	partial void LeaveRule_classBodyDeclaration();

	// $ANTLR start "classBodyDeclaration"
	// Java.g:495:1: classBodyDeclaration : ( ';' | ( 'static' )? block | memberDecl );
	[GrammarRule("classBodyDeclaration")]
	private AstParserRuleReturnScope<object, IToken> classBodyDeclaration()
	{
		EnterRule_classBodyDeclaration();
		EnterRule("classBodyDeclaration", 24);
		TraceIn("classBodyDeclaration", 24);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classBodyDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal103 = default(IToken);
		IToken string_literal104 = default(IToken);
		AstParserRuleReturnScope<object, IToken> block105 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> memberDecl106 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal103_tree = default(object);
		object string_literal104_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classBodyDeclaration");
		DebugLocation(495, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// Java.g:496:5: ( ';' | ( 'static' )? block | memberDecl )
			int alt38=3;
			try { DebugEnterDecision(38, false);
			switch (input.LA(1))
			{
			case SEMI:
				{
				alt38 = 1;
				}
				break;
			case STATIC:
				{
				int LA38_2 = input.LA(2);

				if ((LA38_2==LBRACE))
				{
					alt38 = 2;
				}
				else if ((LA38_2==ABSTRACT||LA38_2==BOOLEAN||LA38_2==BYTE||LA38_2==CHAR||LA38_2==CLASS||LA38_2==DOUBLE||LA38_2==ENUM||LA38_2==FINAL||LA38_2==FLOAT||LA38_2==IDENTIFIER||(LA38_2>=INT && LA38_2<=INTERFACE)||LA38_2==LONG||LA38_2==LT||(LA38_2>=MONKEYS_AT && LA38_2<=NATIVE)||(LA38_2>=PRIVATE && LA38_2<=PUBLIC)||LA38_2==SHORT||(LA38_2>=STATIC && LA38_2<=STRICTFP)||LA38_2==SYNCHRONIZED||LA38_2==TRANSIENT||(LA38_2>=VOID && LA38_2<=VOLATILE)))
				{
					alt38 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LBRACE:
				{
				alt38 = 2;
				}
				break;
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case IDENTIFIER:
			case INT:
			case INTERFACE:
			case LONG:
			case LT:
			case MONKEYS_AT:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
				{
				alt38 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:496:9: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(496, 9);
				char_literal103=(IToken)Match(input,SEMI,Follow._SEMI_in_classBodyDeclaration1669); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal103_tree = (object)adaptor.Create(char_literal103);
				adaptor.AddChild(root_0, char_literal103_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:497:9: ( 'static' )? block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(497, 9);
				// Java.g:497:9: ( 'static' )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==STATIC))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:497:10: 'static'
					{
					DebugLocation(497, 10);
					string_literal104=(IToken)Match(input,STATIC,Follow._STATIC_in_classBodyDeclaration1680); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal104_tree = (object)adaptor.Create(string_literal104);
					adaptor.AddChild(root_0, string_literal104_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(499, 9);
				PushFollow(Follow._block_in_classBodyDeclaration1702);
				block105=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block105.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:500:9: memberDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(500, 9);
				PushFollow(Follow._memberDecl_in_classBodyDeclaration1712);
				memberDecl106=memberDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, memberDecl106.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBodyDeclaration", 24);
			LeaveRule("classBodyDeclaration", 24);
			LeaveRule_classBodyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 24, classBodyDeclaration_StartIndex); }

		}
		DebugLocation(501, 4);
		} finally { DebugExitRule(GrammarFileName, "classBodyDeclaration"); }
		return retval;

	}
	// $ANTLR end "classBodyDeclaration"

	partial void EnterRule_memberDecl();
	partial void LeaveRule_memberDecl();

	// $ANTLR start "memberDecl"
	// Java.g:503:1: memberDecl : ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration );
	[GrammarRule("memberDecl")]
	private AstParserRuleReturnScope<object, IToken> memberDecl()
	{
		EnterRule_memberDecl();
		EnterRule("memberDecl", 25);
		TraceIn("memberDecl", 25);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int memberDecl_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> fieldDeclaration107 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> methodDeclaration108 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classDeclaration109 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceDeclaration110 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "memberDecl");
		DebugLocation(503, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// Java.g:504:5: ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration )
			int alt39=4;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA39_1 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA39_3 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA39_4 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA39_5 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA39_6 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA39_7 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA39_8 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA39_9 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA39_10 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA39_11 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA39_12 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA39_13 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA39_14 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
			case VOID:
				{
				alt39 = 2;
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt39 = 3;
				}
				break;
			case INTERFACE:
				{
				alt39 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:504:10: fieldDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(504, 10);
				PushFollow(Follow._fieldDeclaration_in_memberDecl1733);
				fieldDeclaration107=fieldDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fieldDeclaration107.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:505:10: methodDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(505, 10);
				PushFollow(Follow._methodDeclaration_in_memberDecl1744);
				methodDeclaration108=methodDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, methodDeclaration108.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:506:10: classDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(506, 10);
				PushFollow(Follow._classDeclaration_in_memberDecl1755);
				classDeclaration109=classDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDeclaration109.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:507:10: interfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(507, 10);
				PushFollow(Follow._interfaceDeclaration_in_memberDecl1766);
				interfaceDeclaration110=interfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDeclaration110.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberDecl", 25);
			LeaveRule("memberDecl", 25);
			LeaveRule_memberDecl();
			if (state.backtracking > 0) { Memoize(input, 25, memberDecl_StartIndex); }

		}
		DebugLocation(508, 4);
		} finally { DebugExitRule(GrammarFileName, "memberDecl"); }
		return retval;

	}
	// $ANTLR end "memberDecl"

	partial void EnterRule_methodDeclaration();
	partial void LeaveRule_methodDeclaration();

	// $ANTLR start "methodDeclaration"
	// Java.g:511:1: methodDeclaration : ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) );
	[GrammarRule("methodDeclaration")]
	private AstParserRuleReturnScope<object, IToken> methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 26);
		TraceIn("methodDeclaration", 26);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int methodDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER113 = default(IToken);
		IToken string_literal115 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken string_literal124 = default(IToken);
		IToken IDENTIFIER125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal128 = default(IToken);
		IToken string_literal129 = default(IToken);
		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers111 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters112 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> formalParameters114 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedNameList116 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> explicitConstructorInvocation118 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> blockStatement119 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> modifiers121 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters122 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type123 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> formalParameters126 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedNameList130 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block131 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER113_tree = default(object);
		object string_literal115_tree = default(object);
		object char_literal117_tree = default(object);
		object char_literal120_tree = default(object);
		object string_literal124_tree = default(object);
		object IDENTIFIER125_tree = default(object);
		object char_literal127_tree = default(object);
		object char_literal128_tree = default(object);
		object string_literal129_tree = default(object);
		object char_literal132_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(511, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// Java.g:512:5: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA49_1 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA49_3 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA49_4 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA49_5 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA49_6 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA49_7 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA49_8 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA49_9 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA49_10 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA49_11 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA49_12 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
				{
				int LA49_13 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA49_14 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt49 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:514:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(514, 10);
				PushFollow(Follow._modifiers_in_methodDeclaration1804);
				modifiers111=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers111.Tree);
				DebugLocation(515, 9);
				// Java.g:515:9: ( typeParameters )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==LT))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:515:10: typeParameters
					{
					DebugLocation(515, 10);
					PushFollow(Follow._typeParameters_in_methodDeclaration1815);
					typeParameters112=typeParameters();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters112.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(517, 9);
				IDENTIFIER113=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodDeclaration1836); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER113_tree = (object)adaptor.Create(IDENTIFIER113);
				adaptor.AddChild(root_0, IDENTIFIER113_tree);
				}
				DebugLocation(518, 9);
				PushFollow(Follow._formalParameters_in_methodDeclaration1846);
				formalParameters114=formalParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameters114.Tree);
				DebugLocation(519, 9);
				// Java.g:519:9: ( 'throws' qualifiedNameList )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==THROWS))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:519:10: 'throws' qualifiedNameList
					{
					DebugLocation(519, 10);
					string_literal115=(IToken)Match(input,THROWS,Follow._THROWS_in_methodDeclaration1857); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal115_tree = (object)adaptor.Create(string_literal115);
					adaptor.AddChild(root_0, string_literal115_tree);
					}
					DebugLocation(519, 19);
					PushFollow(Follow._qualifiedNameList_in_methodDeclaration1859);
					qualifiedNameList116=qualifiedNameList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameList116.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(521, 9);
				char_literal117=(IToken)Match(input,LBRACE,Follow._LBRACE_in_methodDeclaration1880); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal117_tree = (object)adaptor.Create(char_literal117);
				adaptor.AddChild(root_0, char_literal117_tree);
				}
				DebugLocation(522, 9);
				// Java.g:522:9: ( explicitConstructorInvocation )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				switch (input.LA(1))
				{
				case LT:
					{
					alt42 = 1;
					}
					break;
				case THIS:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case LPAREN:
					{
					int LA42_3 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case SUPER:
					{
					int LA42_4 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA42_5 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case INTLITERAL:
					{
					int LA42_6 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case LONGLITERAL:
					{
					int LA42_7 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case FLOATLITERAL:
					{
					int LA42_8 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case DOUBLELITERAL:
					{
					int LA42_9 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case CHARLITERAL:
					{
					int LA42_10 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case STRINGLITERAL:
					{
					int LA42_11 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case TRUE:
					{
					int LA42_12 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case FALSE:
					{
					int LA42_13 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case NULL:
					{
					int LA42_14 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case NEW:
					{
					int LA42_15 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA42_16 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case VOID:
					{
					int LA42_17 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:522:10: explicitConstructorInvocation
					{
					DebugLocation(522, 10);
					PushFollow(Follow._explicitConstructorInvocation_in_methodDeclaration1892);
					explicitConstructorInvocation118=explicitConstructorInvocation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explicitConstructorInvocation118.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(524, 9);
				// Java.g:524:9: ( blockStatement )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==ABSTRACT||(LA43_0>=ASSERT && LA43_0<=BANG)||(LA43_0>=BOOLEAN && LA43_0<=BYTE)||(LA43_0>=CHAR && LA43_0<=CLASS)||LA43_0==CONTINUE||LA43_0==DO||(LA43_0>=DOUBLE && LA43_0<=DOUBLELITERAL)||LA43_0==ENUM||(LA43_0>=FALSE && LA43_0<=FINAL)||(LA43_0>=FLOAT && LA43_0<=FOR)||(LA43_0>=IDENTIFIER && LA43_0<=IF)||(LA43_0>=INT && LA43_0<=INTLITERAL)||LA43_0==LBRACE||(LA43_0>=LONG && LA43_0<=LT)||(LA43_0>=MONKEYS_AT && LA43_0<=NULL)||LA43_0==PLUS||(LA43_0>=PLUSPLUS && LA43_0<=PUBLIC)||LA43_0==RETURN||(LA43_0>=SEMI && LA43_0<=SHORT)||(LA43_0>=STATIC && LA43_0<=SUB)||(LA43_0>=SUBSUB && LA43_0<=SYNCHRONIZED)||(LA43_0>=THIS && LA43_0<=THROW)||(LA43_0>=TILDE && LA43_0<=WHILE)))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:524:10: blockStatement
						{
						DebugLocation(524, 10);
						PushFollow(Follow._blockStatement_in_methodDeclaration1914);
						blockStatement119=blockStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement119.Tree);

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(526, 9);
				char_literal120=(IToken)Match(input,RBRACE,Follow._RBRACE_in_methodDeclaration1935); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal120_tree = (object)adaptor.Create(char_literal120);
				adaptor.AddChild(root_0, char_literal120_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:527:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(527, 9);
				PushFollow(Follow._modifiers_in_methodDeclaration1945);
				modifiers121=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers121.Tree);
				DebugLocation(528, 9);
				// Java.g:528:9: ( typeParameters )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==LT))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:528:10: typeParameters
					{
					DebugLocation(528, 10);
					PushFollow(Follow._typeParameters_in_methodDeclaration1956);
					typeParameters122=typeParameters();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters122.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(530, 9);
				// Java.g:530:9: ( type | 'void' )
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==BOOLEAN||LA45_0==BYTE||LA45_0==CHAR||LA45_0==DOUBLE||LA45_0==FLOAT||LA45_0==IDENTIFIER||LA45_0==INT||LA45_0==LONG||LA45_0==SHORT))
				{
					alt45 = 1;
				}
				else if ((LA45_0==VOID))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:530:10: type
					{
					DebugLocation(530, 10);
					PushFollow(Follow._type_in_methodDeclaration1978);
					type123=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type123.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:531:13: 'void'
					{
					DebugLocation(531, 13);
					string_literal124=(IToken)Match(input,VOID,Follow._VOID_in_methodDeclaration1992); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal124_tree = (object)adaptor.Create(string_literal124);
					adaptor.AddChild(root_0, string_literal124_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(533, 9);
				IDENTIFIER125=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodDeclaration2012); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER125_tree = (object)adaptor.Create(IDENTIFIER125);
				adaptor.AddChild(root_0, IDENTIFIER125_tree);
				}
				DebugLocation(534, 9);
				PushFollow(Follow._formalParameters_in_methodDeclaration2022);
				formalParameters126=formalParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameters126.Tree);
				DebugLocation(535, 9);
				// Java.g:535:9: ( '[' ']' )*
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, false);
					int LA46_0 = input.LA(1);

					if ((LA46_0==LBRACKET))
					{
						alt46 = 1;
					}


					} finally { DebugExitDecision(46); }
					switch ( alt46 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:535:10: '[' ']'
						{
						DebugLocation(535, 10);
						char_literal127=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_methodDeclaration2033); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal127_tree = (object)adaptor.Create(char_literal127);
						adaptor.AddChild(root_0, char_literal127_tree);
						}
						DebugLocation(535, 14);
						char_literal128=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_methodDeclaration2035); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal128_tree = (object)adaptor.Create(char_literal128);
						adaptor.AddChild(root_0, char_literal128_tree);
						}

						}
						break;

					default:
						goto loop46;
					}
				}

				loop46:
					;

				} finally { DebugExitSubRule(46); }

				DebugLocation(537, 9);
				// Java.g:537:9: ( 'throws' qualifiedNameList )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==THROWS))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:537:10: 'throws' qualifiedNameList
					{
					DebugLocation(537, 10);
					string_literal129=(IToken)Match(input,THROWS,Follow._THROWS_in_methodDeclaration2057); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal129_tree = (object)adaptor.Create(string_literal129);
					adaptor.AddChild(root_0, string_literal129_tree);
					}
					DebugLocation(537, 19);
					PushFollow(Follow._qualifiedNameList_in_methodDeclaration2059);
					qualifiedNameList130=qualifiedNameList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameList130.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(539, 9);
				// Java.g:539:9: ( block | ';' )
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==LBRACE))
				{
					alt48 = 1;
				}
				else if ((LA48_0==SEMI))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:540:13: block
					{
					DebugLocation(540, 13);
					PushFollow(Follow._block_in_methodDeclaration2114);
					block131=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block131.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:541:13: ';'
					{
					DebugLocation(541, 13);
					char_literal132=(IToken)Match(input,SEMI,Follow._SEMI_in_methodDeclaration2128); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal132_tree = (object)adaptor.Create(char_literal132);
					adaptor.AddChild(root_0, char_literal132_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("methodDeclaration", 26);
			LeaveRule("methodDeclaration", 26);
			LeaveRule_methodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 26, methodDeclaration_StartIndex); }

		}
		DebugLocation(543, 4);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return retval;

	}
	// $ANTLR end "methodDeclaration"

	partial void EnterRule_fieldDeclaration();
	partial void LeaveRule_fieldDeclaration();

	// $ANTLR start "fieldDeclaration"
	// Java.g:546:1: fieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' ;
	[GrammarRule("fieldDeclaration")]
	private AstParserRuleReturnScope<object, IToken> fieldDeclaration()
	{
		EnterRule_fieldDeclaration();
		EnterRule("fieldDeclaration", 27);
		TraceIn("fieldDeclaration", 27);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int fieldDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal136 = default(IToken);
		IToken char_literal138 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers133 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type134 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator135 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator137 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal136_tree = default(object);
		object char_literal138_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldDeclaration");
		DebugLocation(546, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// Java.g:547:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' )
			DebugEnterAlt(1);
			// Java.g:547:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(547, 9);
			PushFollow(Follow._modifiers_in_fieldDeclaration2160);
			modifiers133=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers133.Tree);
			DebugLocation(548, 9);
			PushFollow(Follow._type_in_fieldDeclaration2170);
			type134=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type134.Tree);
			DebugLocation(549, 9);
			PushFollow(Follow._variableDeclarator_in_fieldDeclaration2180);
			variableDeclarator135=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator135.Tree);
			DebugLocation(550, 9);
			// Java.g:550:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==COMMA))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:550:10: ',' variableDeclarator
					{
					DebugLocation(550, 10);
					char_literal136=(IToken)Match(input,COMMA,Follow._COMMA_in_fieldDeclaration2191); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal136_tree = (object)adaptor.Create(char_literal136);
					adaptor.AddChild(root_0, char_literal136_tree);
					}
					DebugLocation(550, 14);
					PushFollow(Follow._variableDeclarator_in_fieldDeclaration2193);
					variableDeclarator137=variableDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator137.Tree);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }

			DebugLocation(552, 9);
			char_literal138=(IToken)Match(input,SEMI,Follow._SEMI_in_fieldDeclaration2214); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal138_tree = (object)adaptor.Create(char_literal138);
			adaptor.AddChild(root_0, char_literal138_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldDeclaration", 27);
			LeaveRule("fieldDeclaration", 27);
			LeaveRule_fieldDeclaration();
			if (state.backtracking > 0) { Memoize(input, 27, fieldDeclaration_StartIndex); }

		}
		DebugLocation(553, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldDeclaration"); }
		return retval;

	}
	// $ANTLR end "fieldDeclaration"

	partial void EnterRule_variableDeclarator();
	partial void LeaveRule_variableDeclarator();

	// $ANTLR start "variableDeclarator"
	// Java.g:555:1: variableDeclarator : IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? ;
	[GrammarRule("variableDeclarator")]
	private AstParserRuleReturnScope<object, IToken> variableDeclarator()
	{
		EnterRule_variableDeclarator();
		EnterRule("variableDeclarator", 28);
		TraceIn("variableDeclarator", 28);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableDeclarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER139 = default(IToken);
		IToken char_literal140 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal142 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableInitializer143 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER139_tree = default(object);
		object char_literal140_tree = default(object);
		object char_literal141_tree = default(object);
		object char_literal142_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableDeclarator");
		DebugLocation(555, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// Java.g:556:5: ( IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? )
			DebugEnterAlt(1);
			// Java.g:556:9: IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(556, 9);
			IDENTIFIER139=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_variableDeclarator2234); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER139_tree = (object)adaptor.Create(IDENTIFIER139);
			adaptor.AddChild(root_0, IDENTIFIER139_tree);
			}
			DebugLocation(557, 9);
			// Java.g:557:9: ( '[' ']' )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==LBRACKET))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:557:10: '[' ']'
					{
					DebugLocation(557, 10);
					char_literal140=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_variableDeclarator2245); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal140_tree = (object)adaptor.Create(char_literal140);
					adaptor.AddChild(root_0, char_literal140_tree);
					}
					DebugLocation(557, 14);
					char_literal141=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_variableDeclarator2247); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal141_tree = (object)adaptor.Create(char_literal141);
					adaptor.AddChild(root_0, char_literal141_tree);
					}

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(559, 9);
			// Java.g:559:9: ( '=' variableInitializer )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==EQ))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:559:10: '=' variableInitializer
				{
				DebugLocation(559, 10);
				char_literal142=(IToken)Match(input,EQ,Follow._EQ_in_variableDeclarator2269); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal142_tree = (object)adaptor.Create(char_literal142);
				adaptor.AddChild(root_0, char_literal142_tree);
				}
				DebugLocation(559, 14);
				PushFollow(Follow._variableInitializer_in_variableDeclarator2271);
				variableInitializer143=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableInitializer143.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarator", 28);
			LeaveRule("variableDeclarator", 28);
			LeaveRule_variableDeclarator();
			if (state.backtracking > 0) { Memoize(input, 28, variableDeclarator_StartIndex); }

		}
		DebugLocation(561, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarator"); }
		return retval;

	}
	// $ANTLR end "variableDeclarator"

	partial void EnterRule_interfaceBodyDeclaration();
	partial void LeaveRule_interfaceBodyDeclaration();

	// $ANTLR start "interfaceBodyDeclaration"
	// Java.g:566:1: interfaceBodyDeclaration : ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' );
	[GrammarRule("interfaceBodyDeclaration")]
	private AstParserRuleReturnScope<object, IToken> interfaceBodyDeclaration()
	{
		EnterRule_interfaceBodyDeclaration();
		EnterRule("interfaceBodyDeclaration", 29);
		TraceIn("interfaceBodyDeclaration", 29);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceBodyDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal148 = default(IToken);
		AstParserRuleReturnScope<object, IToken> interfaceFieldDeclaration144 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceMethodDeclaration145 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceDeclaration146 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classDeclaration147 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal148_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceBodyDeclaration");
		DebugLocation(566, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// Java.g:567:5: ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' )
			int alt53=5;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA53_1 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA53_3 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA53_4 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA53_5 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA53_6 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA53_7 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA53_8 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA53_9 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA53_10 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA53_11 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA53_12 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA53_13 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA53_14 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
			case VOID:
				{
				alt53 = 2;
				}
				break;
			case INTERFACE:
				{
				alt53 = 3;
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt53 = 4;
				}
				break;
			case SEMI:
				{
				alt53 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:568:9: interfaceFieldDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(568, 9);
				PushFollow(Follow._interfaceFieldDeclaration_in_interfaceBodyDeclaration2310);
				interfaceFieldDeclaration144=interfaceFieldDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceFieldDeclaration144.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:569:9: interfaceMethodDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(569, 9);
				PushFollow(Follow._interfaceMethodDeclaration_in_interfaceBodyDeclaration2320);
				interfaceMethodDeclaration145=interfaceMethodDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceMethodDeclaration145.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:570:9: interfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(570, 9);
				PushFollow(Follow._interfaceDeclaration_in_interfaceBodyDeclaration2330);
				interfaceDeclaration146=interfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDeclaration146.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:571:9: classDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(571, 9);
				PushFollow(Follow._classDeclaration_in_interfaceBodyDeclaration2340);
				classDeclaration147=classDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDeclaration147.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:572:9: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(572, 9);
				char_literal148=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceBodyDeclaration2350); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal148_tree = (object)adaptor.Create(char_literal148);
				adaptor.AddChild(root_0, char_literal148_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceBodyDeclaration", 29);
			LeaveRule("interfaceBodyDeclaration", 29);
			LeaveRule_interfaceBodyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 29, interfaceBodyDeclaration_StartIndex); }

		}
		DebugLocation(573, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBodyDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceBodyDeclaration"

	partial void EnterRule_interfaceMethodDeclaration();
	partial void LeaveRule_interfaceMethodDeclaration();

	// $ANTLR start "interfaceMethodDeclaration"
	// Java.g:575:1: interfaceMethodDeclaration : modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' ;
	[GrammarRule("interfaceMethodDeclaration")]
	private AstParserRuleReturnScope<object, IToken> interfaceMethodDeclaration()
	{
		EnterRule_interfaceMethodDeclaration();
		EnterRule("interfaceMethodDeclaration", 30);
		TraceIn("interfaceMethodDeclaration", 30);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceMethodDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal152 = default(IToken);
		IToken IDENTIFIER153 = default(IToken);
		IToken char_literal155 = default(IToken);
		IToken char_literal156 = default(IToken);
		IToken string_literal157 = default(IToken);
		IToken char_literal159 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers149 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters150 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type151 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> formalParameters154 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedNameList158 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal152_tree = default(object);
		object IDENTIFIER153_tree = default(object);
		object char_literal155_tree = default(object);
		object char_literal156_tree = default(object);
		object string_literal157_tree = default(object);
		object char_literal159_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceMethodDeclaration");
		DebugLocation(575, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// Java.g:576:5: ( modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' )
			DebugEnterAlt(1);
			// Java.g:576:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(576, 9);
			PushFollow(Follow._modifiers_in_interfaceMethodDeclaration2370);
			modifiers149=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers149.Tree);
			DebugLocation(577, 9);
			// Java.g:577:9: ( typeParameters )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==LT))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:577:10: typeParameters
				{
				DebugLocation(577, 10);
				PushFollow(Follow._typeParameters_in_interfaceMethodDeclaration2381);
				typeParameters150=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters150.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(579, 9);
			// Java.g:579:9: ( type | 'void' )
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==BOOLEAN||LA55_0==BYTE||LA55_0==CHAR||LA55_0==DOUBLE||LA55_0==FLOAT||LA55_0==IDENTIFIER||LA55_0==INT||LA55_0==LONG||LA55_0==SHORT))
			{
				alt55 = 1;
			}
			else if ((LA55_0==VOID))
			{
				alt55 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:579:10: type
				{
				DebugLocation(579, 10);
				PushFollow(Follow._type_in_interfaceMethodDeclaration2403);
				type151=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type151.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:580:10: 'void'
				{
				DebugLocation(580, 10);
				string_literal152=(IToken)Match(input,VOID,Follow._VOID_in_interfaceMethodDeclaration2414); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal152_tree = (object)adaptor.Create(string_literal152);
				adaptor.AddChild(root_0, string_literal152_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(582, 9);
			IDENTIFIER153=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_interfaceMethodDeclaration2434); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER153_tree = (object)adaptor.Create(IDENTIFIER153);
			adaptor.AddChild(root_0, IDENTIFIER153_tree);
			}
			DebugLocation(583, 9);
			PushFollow(Follow._formalParameters_in_interfaceMethodDeclaration2444);
			formalParameters154=formalParameters();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameters154.Tree);
			DebugLocation(584, 9);
			// Java.g:584:9: ( '[' ']' )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==LBRACKET))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:584:10: '[' ']'
					{
					DebugLocation(584, 10);
					char_literal155=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_interfaceMethodDeclaration2455); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal155_tree = (object)adaptor.Create(char_literal155);
					adaptor.AddChild(root_0, char_literal155_tree);
					}
					DebugLocation(584, 14);
					char_literal156=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_interfaceMethodDeclaration2457); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal156_tree = (object)adaptor.Create(char_literal156);
					adaptor.AddChild(root_0, char_literal156_tree);
					}

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(586, 9);
			// Java.g:586:9: ( 'throws' qualifiedNameList )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==THROWS))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:586:10: 'throws' qualifiedNameList
				{
				DebugLocation(586, 10);
				string_literal157=(IToken)Match(input,THROWS,Follow._THROWS_in_interfaceMethodDeclaration2479); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal157_tree = (object)adaptor.Create(string_literal157);
				adaptor.AddChild(root_0, string_literal157_tree);
				}
				DebugLocation(586, 19);
				PushFollow(Follow._qualifiedNameList_in_interfaceMethodDeclaration2481);
				qualifiedNameList158=qualifiedNameList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameList158.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(587, 12);
			char_literal159=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceMethodDeclaration2494); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal159_tree = (object)adaptor.Create(char_literal159);
			adaptor.AddChild(root_0, char_literal159_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceMethodDeclaration", 30);
			LeaveRule("interfaceMethodDeclaration", 30);
			LeaveRule_interfaceMethodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 30, interfaceMethodDeclaration_StartIndex); }

		}
		DebugLocation(588, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceMethodDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceMethodDeclaration"

	partial void EnterRule_interfaceFieldDeclaration();
	partial void LeaveRule_interfaceFieldDeclaration();

	// $ANTLR start "interfaceFieldDeclaration"
	// Java.g:595:1: interfaceFieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' ;
	[GrammarRule("interfaceFieldDeclaration")]
	private AstParserRuleReturnScope<object, IToken> interfaceFieldDeclaration()
	{
		EnterRule_interfaceFieldDeclaration();
		EnterRule("interfaceFieldDeclaration", 31);
		TraceIn("interfaceFieldDeclaration", 31);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceFieldDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal163 = default(IToken);
		IToken char_literal165 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers160 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type161 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator162 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator164 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal163_tree = default(object);
		object char_literal165_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclaration");
		DebugLocation(595, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// Java.g:596:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' )
			DebugEnterAlt(1);
			// Java.g:596:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(596, 9);
			PushFollow(Follow._modifiers_in_interfaceFieldDeclaration2516);
			modifiers160=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers160.Tree);
			DebugLocation(596, 19);
			PushFollow(Follow._type_in_interfaceFieldDeclaration2518);
			type161=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type161.Tree);
			DebugLocation(596, 24);
			PushFollow(Follow._variableDeclarator_in_interfaceFieldDeclaration2520);
			variableDeclarator162=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator162.Tree);
			DebugLocation(597, 9);
			// Java.g:597:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==COMMA))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:597:10: ',' variableDeclarator
					{
					DebugLocation(597, 10);
					char_literal163=(IToken)Match(input,COMMA,Follow._COMMA_in_interfaceFieldDeclaration2531); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal163_tree = (object)adaptor.Create(char_literal163);
					adaptor.AddChild(root_0, char_literal163_tree);
					}
					DebugLocation(597, 14);
					PushFollow(Follow._variableDeclarator_in_interfaceFieldDeclaration2533);
					variableDeclarator164=variableDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator164.Tree);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }

			DebugLocation(599, 9);
			char_literal165=(IToken)Match(input,SEMI,Follow._SEMI_in_interfaceFieldDeclaration2554); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal165_tree = (object)adaptor.Create(char_literal165);
			adaptor.AddChild(root_0, char_literal165_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclaration", 31);
			LeaveRule("interfaceFieldDeclaration", 31);
			LeaveRule_interfaceFieldDeclaration();
			if (state.backtracking > 0) { Memoize(input, 31, interfaceFieldDeclaration_StartIndex); }

		}
		DebugLocation(600, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclaration"

	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// Java.g:603:1: type : ( classOrInterfaceType ( '[' ']' )* | primitiveType ( '[' ']' )* );
	[GrammarRule("type")]
	private AstParserRuleReturnScope<object, IToken> type()
	{
		EnterRule_type();
		EnterRule("type", 32);
		TraceIn("type", 32);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal167 = default(IToken);
		IToken char_literal168 = default(IToken);
		IToken char_literal170 = default(IToken);
		IToken char_literal171 = default(IToken);
		AstParserRuleReturnScope<object, IToken> classOrInterfaceType166 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primitiveType169 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal167_tree = default(object);
		object char_literal168_tree = default(object);
		object char_literal170_tree = default(object);
		object char_literal171_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(603, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// Java.g:604:5: ( classOrInterfaceType ( '[' ']' )* | primitiveType ( '[' ']' )* )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==IDENTIFIER))
			{
				alt61 = 1;
			}
			else if ((LA61_0==BOOLEAN||LA61_0==BYTE||LA61_0==CHAR||LA61_0==DOUBLE||LA61_0==FLOAT||LA61_0==INT||LA61_0==LONG||LA61_0==SHORT))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:604:9: classOrInterfaceType ( '[' ']' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(604, 9);
				PushFollow(Follow._classOrInterfaceType_in_type2575);
				classOrInterfaceType166=classOrInterfaceType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceType166.Tree);
				DebugLocation(605, 9);
				// Java.g:605:9: ( '[' ']' )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_0 = input.LA(1);

					if ((LA59_0==LBRACKET))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:605:10: '[' ']'
						{
						DebugLocation(605, 10);
						char_literal167=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_type2586); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal167_tree = (object)adaptor.Create(char_literal167);
						adaptor.AddChild(root_0, char_literal167_tree);
						}
						DebugLocation(605, 14);
						char_literal168=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_type2588); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal168_tree = (object)adaptor.Create(char_literal168);
						adaptor.AddChild(root_0, char_literal168_tree);
						}

						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:607:9: primitiveType ( '[' ']' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(607, 9);
				PushFollow(Follow._primitiveType_in_type2609);
				primitiveType169=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType169.Tree);
				DebugLocation(608, 9);
				// Java.g:608:9: ( '[' ']' )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					int LA60_0 = input.LA(1);

					if ((LA60_0==LBRACKET))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:608:10: '[' ']'
						{
						DebugLocation(608, 10);
						char_literal170=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_type2620); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal170_tree = (object)adaptor.Create(char_literal170);
						adaptor.AddChild(root_0, char_literal170_tree);
						}
						DebugLocation(608, 14);
						char_literal171=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_type2622); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal171_tree = (object)adaptor.Create(char_literal171);
						adaptor.AddChild(root_0, char_literal171_tree);
						}

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 32);
			LeaveRule("type", 32);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 32, type_StartIndex); }

		}
		DebugLocation(610, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_classOrInterfaceType();
	partial void LeaveRule_classOrInterfaceType();

	// $ANTLR start "classOrInterfaceType"
	// Java.g:613:1: classOrInterfaceType : IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* ;
	[GrammarRule("classOrInterfaceType")]
	private AstParserRuleReturnScope<object, IToken> classOrInterfaceType()
	{
		EnterRule_classOrInterfaceType();
		EnterRule("classOrInterfaceType", 33);
		TraceIn("classOrInterfaceType", 33);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classOrInterfaceType_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER172 = default(IToken);
		IToken char_literal174 = default(IToken);
		IToken IDENTIFIER175 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeArguments173 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeArguments176 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER172_tree = default(object);
		object char_literal174_tree = default(object);
		object IDENTIFIER175_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classOrInterfaceType");
		DebugLocation(613, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// Java.g:614:5: ( IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* )
			DebugEnterAlt(1);
			// Java.g:614:9: IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(614, 9);
			IDENTIFIER172=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceType2654); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER172_tree = (object)adaptor.Create(IDENTIFIER172);
			adaptor.AddChild(root_0, IDENTIFIER172_tree);
			}
			DebugLocation(615, 9);
			// Java.g:615:9: ( typeArguments )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==LT))
			{
				int LA62_1 = input.LA(2);

				if ((LA62_1==BOOLEAN||LA62_1==BYTE||LA62_1==CHAR||LA62_1==DOUBLE||LA62_1==FLOAT||LA62_1==IDENTIFIER||LA62_1==INT||LA62_1==LONG||LA62_1==QUES||LA62_1==SHORT))
				{
					alt62 = 1;
				}
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:615:10: typeArguments
				{
				DebugLocation(615, 10);
				PushFollow(Follow._typeArguments_in_classOrInterfaceType2665);
				typeArguments173=typeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments173.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(617, 9);
			// Java.g:617:9: ( '.' IDENTIFIER ( typeArguments )? )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==DOT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:617:10: '.' IDENTIFIER ( typeArguments )?
					{
					DebugLocation(617, 10);
					char_literal174=(IToken)Match(input,DOT,Follow._DOT_in_classOrInterfaceType2687); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal174_tree = (object)adaptor.Create(char_literal174);
					adaptor.AddChild(root_0, char_literal174_tree);
					}
					DebugLocation(617, 14);
					IDENTIFIER175=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceType2689); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER175_tree = (object)adaptor.Create(IDENTIFIER175);
					adaptor.AddChild(root_0, IDENTIFIER175_tree);
					}
					DebugLocation(618, 13);
					// Java.g:618:13: ( typeArguments )?
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==LT))
					{
						int LA63_1 = input.LA(2);

						if ((LA63_1==BOOLEAN||LA63_1==BYTE||LA63_1==CHAR||LA63_1==DOUBLE||LA63_1==FLOAT||LA63_1==IDENTIFIER||LA63_1==INT||LA63_1==LONG||LA63_1==QUES||LA63_1==SHORT))
						{
							alt63 = 1;
						}
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:618:14: typeArguments
						{
						DebugLocation(618, 14);
						PushFollow(Follow._typeArguments_in_classOrInterfaceType2704);
						typeArguments176=typeArguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments176.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(63); }


					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classOrInterfaceType", 33);
			LeaveRule("classOrInterfaceType", 33);
			LeaveRule_classOrInterfaceType();
			if (state.backtracking > 0) { Memoize(input, 33, classOrInterfaceType_StartIndex); }

		}
		DebugLocation(621, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceType"); }
		return retval;

	}
	// $ANTLR end "classOrInterfaceType"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();

	// $ANTLR start "primitiveType"
	// Java.g:623:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
	[GrammarRule("primitiveType")]
	private AstParserRuleReturnScope<object, IToken> primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 34);
		TraceIn("primitiveType", 34);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set177 = default(IToken);

		object set177_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(623, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// Java.g:624:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
			DebugEnterAlt(1);
			// Java.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(624, 5);

			set177=(IToken)input.LT(1);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set177));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 34);
			LeaveRule("primitiveType", 34);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 34, primitiveType_StartIndex); }

		}
		DebugLocation(632, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_typeArguments();
	partial void LeaveRule_typeArguments();

	// $ANTLR start "typeArguments"
	// Java.g:634:1: typeArguments : '<' typeArgument ( ',' typeArgument )* '>' ;
	[GrammarRule("typeArguments")]
	private AstParserRuleReturnScope<object, IToken> typeArguments()
	{
		EnterRule_typeArguments();
		EnterRule("typeArguments", 35);
		TraceIn("typeArguments", 35);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeArguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal178 = default(IToken);
		IToken char_literal180 = default(IToken);
		IToken char_literal182 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeArgument179 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeArgument181 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal178_tree = default(object);
		object char_literal180_tree = default(object);
		object char_literal182_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeArguments");
		DebugLocation(634, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// Java.g:635:5: ( '<' typeArgument ( ',' typeArgument )* '>' )
			DebugEnterAlt(1);
			// Java.g:635:9: '<' typeArgument ( ',' typeArgument )* '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(635, 9);
			char_literal178=(IToken)Match(input,LT,Follow._LT_in_typeArguments2841); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal178_tree = (object)adaptor.Create(char_literal178);
			adaptor.AddChild(root_0, char_literal178_tree);
			}
			DebugLocation(635, 13);
			PushFollow(Follow._typeArgument_in_typeArguments2843);
			typeArgument179=typeArgument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeArgument179.Tree);
			DebugLocation(636, 9);
			// Java.g:636:9: ( ',' typeArgument )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==COMMA))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:636:10: ',' typeArgument
					{
					DebugLocation(636, 10);
					char_literal180=(IToken)Match(input,COMMA,Follow._COMMA_in_typeArguments2854); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal180_tree = (object)adaptor.Create(char_literal180);
					adaptor.AddChild(root_0, char_literal180_tree);
					}
					DebugLocation(636, 14);
					PushFollow(Follow._typeArgument_in_typeArguments2856);
					typeArgument181=typeArgument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeArgument181.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(638, 9);
			char_literal182=(IToken)Match(input,GT,Follow._GT_in_typeArguments2878); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal182_tree = (object)adaptor.Create(char_literal182);
			adaptor.AddChild(root_0, char_literal182_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeArguments", 35);
			LeaveRule("typeArguments", 35);
			LeaveRule_typeArguments();
			if (state.backtracking > 0) { Memoize(input, 35, typeArguments_StartIndex); }

		}
		DebugLocation(639, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArguments"); }
		return retval;

	}
	// $ANTLR end "typeArguments"

	partial void EnterRule_typeArgument();
	partial void LeaveRule_typeArgument();

	// $ANTLR start "typeArgument"
	// Java.g:641:1: typeArgument : ( type | '?' ( ( 'extends' | 'super' ) type )? );
	[GrammarRule("typeArgument")]
	private AstParserRuleReturnScope<object, IToken> typeArgument()
	{
		EnterRule_typeArgument();
		EnterRule("typeArgument", 36);
		TraceIn("typeArgument", 36);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeArgument_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal184 = default(IToken);
		IToken set185 = default(IToken);
		AstParserRuleReturnScope<object, IToken> type183 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type186 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal184_tree = default(object);
		object set185_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeArgument");
		DebugLocation(641, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// Java.g:642:5: ( type | '?' ( ( 'extends' | 'super' ) type )? )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==BOOLEAN||LA67_0==BYTE||LA67_0==CHAR||LA67_0==DOUBLE||LA67_0==FLOAT||LA67_0==IDENTIFIER||LA67_0==INT||LA67_0==LONG||LA67_0==SHORT))
			{
				alt67 = 1;
			}
			else if ((LA67_0==QUES))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:642:9: type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(642, 9);
				PushFollow(Follow._type_in_typeArgument2898);
				type183=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type183.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:643:9: '?' ( ( 'extends' | 'super' ) type )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(643, 9);
				char_literal184=(IToken)Match(input,QUES,Follow._QUES_in_typeArgument2908); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal184_tree = (object)adaptor.Create(char_literal184);
				adaptor.AddChild(root_0, char_literal184_tree);
				}
				DebugLocation(644, 9);
				// Java.g:644:9: ( ( 'extends' | 'super' ) type )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==EXTENDS||LA66_0==SUPER))
				{
					alt66 = 1;
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:645:13: ( 'extends' | 'super' ) type
					{
					DebugLocation(645, 13);

					set185=(IToken)input.LT(1);
					if (input.LA(1)==EXTENDS||input.LA(1)==SUPER)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set185));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(648, 13);
					PushFollow(Follow._type_in_typeArgument2976);
					type186=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type186.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(66); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeArgument", 36);
			LeaveRule("typeArgument", 36);
			LeaveRule_typeArgument();
			if (state.backtracking > 0) { Memoize(input, 36, typeArgument_StartIndex); }

		}
		DebugLocation(650, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArgument"); }
		return retval;

	}
	// $ANTLR end "typeArgument"

	partial void EnterRule_qualifiedNameList();
	partial void LeaveRule_qualifiedNameList();

	// $ANTLR start "qualifiedNameList"
	// Java.g:652:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
	[GrammarRule("qualifiedNameList")]
	private AstParserRuleReturnScope<object, IToken> qualifiedNameList()
	{
		EnterRule_qualifiedNameList();
		EnterRule("qualifiedNameList", 37);
		TraceIn("qualifiedNameList", 37);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedNameList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal188 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName187 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> qualifiedName189 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal188_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedNameList");
		DebugLocation(652, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// Java.g:653:5: ( qualifiedName ( ',' qualifiedName )* )
			DebugEnterAlt(1);
			// Java.g:653:9: qualifiedName ( ',' qualifiedName )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(653, 9);
			PushFollow(Follow._qualifiedName_in_qualifiedNameList3007);
			qualifiedName187=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName187.Tree);
			DebugLocation(654, 9);
			// Java.g:654:9: ( ',' qualifiedName )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if ((LA68_0==COMMA))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:654:10: ',' qualifiedName
					{
					DebugLocation(654, 10);
					char_literal188=(IToken)Match(input,COMMA,Follow._COMMA_in_qualifiedNameList3018); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal188_tree = (object)adaptor.Create(char_literal188);
					adaptor.AddChild(root_0, char_literal188_tree);
					}
					DebugLocation(654, 14);
					PushFollow(Follow._qualifiedName_in_qualifiedNameList3020);
					qualifiedName189=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName189.Tree);

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedNameList", 37);
			LeaveRule("qualifiedNameList", 37);
			LeaveRule_qualifiedNameList();
			if (state.backtracking > 0) { Memoize(input, 37, qualifiedNameList_StartIndex); }

		}
		DebugLocation(656, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedNameList"); }
		return retval;

	}
	// $ANTLR end "qualifiedNameList"

	partial void EnterRule_formalParameters();
	partial void LeaveRule_formalParameters();

	// $ANTLR start "formalParameters"
	// Java.g:658:1: formalParameters : '(' ( formalParameterDecls )? ')' ;
	[GrammarRule("formalParameters")]
	private AstParserRuleReturnScope<object, IToken> formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 38);
		TraceIn("formalParameters", 38);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameters_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal190 = default(IToken);
		IToken char_literal192 = default(IToken);
		AstParserRuleReturnScope<object, IToken> formalParameterDecls191 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal190_tree = default(object);
		object char_literal192_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(658, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// Java.g:659:5: ( '(' ( formalParameterDecls )? ')' )
			DebugEnterAlt(1);
			// Java.g:659:9: '(' ( formalParameterDecls )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(659, 9);
			char_literal190=(IToken)Match(input,LPAREN,Follow._LPAREN_in_formalParameters3051); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal190_tree = (object)adaptor.Create(char_literal190);
			adaptor.AddChild(root_0, char_literal190_tree);
			}
			DebugLocation(660, 9);
			// Java.g:660:9: ( formalParameterDecls )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==BOOLEAN||LA69_0==BYTE||LA69_0==CHAR||LA69_0==DOUBLE||LA69_0==FINAL||LA69_0==FLOAT||LA69_0==IDENTIFIER||LA69_0==INT||LA69_0==LONG||LA69_0==MONKEYS_AT||LA69_0==SHORT))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:660:10: formalParameterDecls
				{
				DebugLocation(660, 10);
				PushFollow(Follow._formalParameterDecls_in_formalParameters3062);
				formalParameterDecls191=formalParameterDecls();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameterDecls191.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(662, 9);
			char_literal192=(IToken)Match(input,RPAREN,Follow._RPAREN_in_formalParameters3084); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal192_tree = (object)adaptor.Create(char_literal192);
			adaptor.AddChild(root_0, char_literal192_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameters", 38);
			LeaveRule("formalParameters", 38);
			LeaveRule_formalParameters();
			if (state.backtracking > 0) { Memoize(input, 38, formalParameters_StartIndex); }

		}
		DebugLocation(663, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return retval;

	}
	// $ANTLR end "formalParameters"

	partial void EnterRule_formalParameterDecls();
	partial void LeaveRule_formalParameterDecls();

	// $ANTLR start "formalParameterDecls"
	// Java.g:665:1: formalParameterDecls : ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl );
	[GrammarRule("formalParameterDecls")]
	private AstParserRuleReturnScope<object, IToken> formalParameterDecls()
	{
		EnterRule_formalParameterDecls();
		EnterRule("formalParameterDecls", 39);
		TraceIn("formalParameterDecls", 39);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameterDecls_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal195 = default(IToken);
		IToken char_literal198 = default(IToken);
		AstParserRuleReturnScope<object, IToken> ellipsisParameterDecl193 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> normalParameterDecl194 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> normalParameterDecl196 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> normalParameterDecl197 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> ellipsisParameterDecl199 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal195_tree = default(object);
		object char_literal198_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formalParameterDecls");
		DebugLocation(665, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// Java.g:666:5: ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl )
			int alt72=3;
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA72_1 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MONKEYS_AT:
				{
				int LA72_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA72_3 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA72_4 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:666:9: ellipsisParameterDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(666, 9);
				PushFollow(Follow._ellipsisParameterDecl_in_formalParameterDecls3104);
				ellipsisParameterDecl193=ellipsisParameterDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ellipsisParameterDecl193.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:667:9: normalParameterDecl ( ',' normalParameterDecl )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(667, 9);
				PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3114);
				normalParameterDecl194=normalParameterDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalParameterDecl194.Tree);
				DebugLocation(668, 9);
				// Java.g:668:9: ( ',' normalParameterDecl )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_0 = input.LA(1);

					if ((LA70_0==COMMA))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:668:10: ',' normalParameterDecl
						{
						DebugLocation(668, 10);
						char_literal195=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterDecls3125); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal195_tree = (object)adaptor.Create(char_literal195);
						adaptor.AddChild(root_0, char_literal195_tree);
						}
						DebugLocation(668, 14);
						PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3127);
						normalParameterDecl196=normalParameterDecl();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, normalParameterDecl196.Tree);

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:670:9: ( normalParameterDecl ',' )+ ellipsisParameterDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(670, 9);
				// Java.g:670:9: ( normalParameterDecl ',' )+
				int cnt71=0;
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, false);
					switch (input.LA(1))
					{
					case FINAL:
						{
						int LA71_1 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					case MONKEYS_AT:
						{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA71_3 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					case BOOLEAN:
					case BYTE:
					case CHAR:
					case DOUBLE:
					case FLOAT:
					case INT:
					case LONG:
					case SHORT:
						{
						int LA71_4 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(71); }
					switch (alt71)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:670:10: normalParameterDecl ','
						{
						DebugLocation(670, 10);
						PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3149);
						normalParameterDecl197=normalParameterDecl();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, normalParameterDecl197.Tree);
						DebugLocation(671, 9);
						char_literal198=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterDecls3159); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal198_tree = (object)adaptor.Create(char_literal198);
						adaptor.AddChild(root_0, char_literal198_tree);
						}

						}
						break;

					default:
						if (cnt71 >= 1)
							goto loop71;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee71 = new EarlyExitException( 71, input );
						DebugRecognitionException(eee71);
						throw eee71;
					}
					cnt71++;
				}
				loop71:
					;

				} finally { DebugExitSubRule(71); }

				DebugLocation(673, 9);
				PushFollow(Follow._ellipsisParameterDecl_in_formalParameterDecls3181);
				ellipsisParameterDecl199=ellipsisParameterDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ellipsisParameterDecl199.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterDecls", 39);
			LeaveRule("formalParameterDecls", 39);
			LeaveRule_formalParameterDecls();
			if (state.backtracking > 0) { Memoize(input, 39, formalParameterDecls_StartIndex); }

		}
		DebugLocation(674, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterDecls"); }
		return retval;

	}
	// $ANTLR end "formalParameterDecls"

	partial void EnterRule_normalParameterDecl();
	partial void LeaveRule_normalParameterDecl();

	// $ANTLR start "normalParameterDecl"
	// Java.g:676:1: normalParameterDecl : variableModifiers type IDENTIFIER ( '[' ']' )* ;
	[GrammarRule("normalParameterDecl")]
	private AstParserRuleReturnScope<object, IToken> normalParameterDecl()
	{
		EnterRule_normalParameterDecl();
		EnterRule("normalParameterDecl", 40);
		TraceIn("normalParameterDecl", 40);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int normalParameterDecl_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER202 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken char_literal204 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers200 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type201 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER202_tree = default(object);
		object char_literal203_tree = default(object);
		object char_literal204_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "normalParameterDecl");
		DebugLocation(676, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// Java.g:677:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* )
			DebugEnterAlt(1);
			// Java.g:677:9: variableModifiers type IDENTIFIER ( '[' ']' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(677, 9);
			PushFollow(Follow._variableModifiers_in_normalParameterDecl3201);
			variableModifiers200=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers200.Tree);
			DebugLocation(677, 27);
			PushFollow(Follow._type_in_normalParameterDecl3203);
			type201=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type201.Tree);
			DebugLocation(677, 32);
			IDENTIFIER202=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalParameterDecl3205); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER202_tree = (object)adaptor.Create(IDENTIFIER202);
			adaptor.AddChild(root_0, IDENTIFIER202_tree);
			}
			DebugLocation(678, 9);
			// Java.g:678:9: ( '[' ']' )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==LBRACKET))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:678:10: '[' ']'
					{
					DebugLocation(678, 10);
					char_literal203=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_normalParameterDecl3216); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal203_tree = (object)adaptor.Create(char_literal203);
					adaptor.AddChild(root_0, char_literal203_tree);
					}
					DebugLocation(678, 14);
					char_literal204=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_normalParameterDecl3218); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal204_tree = (object)adaptor.Create(char_literal204);
					adaptor.AddChild(root_0, char_literal204_tree);
					}

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("normalParameterDecl", 40);
			LeaveRule("normalParameterDecl", 40);
			LeaveRule_normalParameterDecl();
			if (state.backtracking > 0) { Memoize(input, 40, normalParameterDecl_StartIndex); }

		}
		DebugLocation(680, 4);
		} finally { DebugExitRule(GrammarFileName, "normalParameterDecl"); }
		return retval;

	}
	// $ANTLR end "normalParameterDecl"

	partial void EnterRule_ellipsisParameterDecl();
	partial void LeaveRule_ellipsisParameterDecl();

	// $ANTLR start "ellipsisParameterDecl"
	// Java.g:682:1: ellipsisParameterDecl : variableModifiers type '...' IDENTIFIER ;
	[GrammarRule("ellipsisParameterDecl")]
	private AstParserRuleReturnScope<object, IToken> ellipsisParameterDecl()
	{
		EnterRule_ellipsisParameterDecl();
		EnterRule("ellipsisParameterDecl", 41);
		TraceIn("ellipsisParameterDecl", 41);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ellipsisParameterDecl_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal207 = default(IToken);
		IToken IDENTIFIER208 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers205 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type206 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal207_tree = default(object);
		object IDENTIFIER208_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ellipsisParameterDecl");
		DebugLocation(682, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// Java.g:683:5: ( variableModifiers type '...' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:683:9: variableModifiers type '...' IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(683, 9);
			PushFollow(Follow._variableModifiers_in_ellipsisParameterDecl3249);
			variableModifiers205=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers205.Tree);
			DebugLocation(684, 9);
			PushFollow(Follow._type_in_ellipsisParameterDecl3259);
			type206=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type206.Tree);
			DebugLocation(684, 15);
			string_literal207=(IToken)Match(input,ELLIPSIS,Follow._ELLIPSIS_in_ellipsisParameterDecl3262); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal207_tree = (object)adaptor.Create(string_literal207);
			adaptor.AddChild(root_0, string_literal207_tree);
			}
			DebugLocation(685, 9);
			IDENTIFIER208=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_ellipsisParameterDecl3272); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER208_tree = (object)adaptor.Create(IDENTIFIER208);
			adaptor.AddChild(root_0, IDENTIFIER208_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ellipsisParameterDecl", 41);
			LeaveRule("ellipsisParameterDecl", 41);
			LeaveRule_ellipsisParameterDecl();
			if (state.backtracking > 0) { Memoize(input, 41, ellipsisParameterDecl_StartIndex); }

		}
		DebugLocation(686, 4);
		} finally { DebugExitRule(GrammarFileName, "ellipsisParameterDecl"); }
		return retval;

	}
	// $ANTLR end "ellipsisParameterDecl"

	partial void EnterRule_explicitConstructorInvocation();
	partial void LeaveRule_explicitConstructorInvocation();

	// $ANTLR start "explicitConstructorInvocation"
	// Java.g:689:1: explicitConstructorInvocation : ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' );
	[GrammarRule("explicitConstructorInvocation")]
	private AstParserRuleReturnScope<object, IToken> explicitConstructorInvocation()
	{
		EnterRule_explicitConstructorInvocation();
		EnterRule("explicitConstructorInvocation", 42);
		TraceIn("explicitConstructorInvocation", 42);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int explicitConstructorInvocation_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set210 = default(IToken);
		IToken char_literal212 = default(IToken);
		IToken char_literal214 = default(IToken);
		IToken string_literal216 = default(IToken);
		IToken char_literal218 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments209 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments211 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primary213 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments215 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments217 = default(AstParserRuleReturnScope<object, IToken>);

		object set210_tree = default(object);
		object char_literal212_tree = default(object);
		object char_literal214_tree = default(object);
		object string_literal216_tree = default(object);
		object char_literal218_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "explicitConstructorInvocation");
		DebugLocation(689, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// Java.g:690:5: ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			switch (input.LA(1))
			{
			case LT:
				{
				alt76 = 1;
				}
				break;
			case THIS:
				{
				int LA76_2 = input.LA(2);

				if ((EvaluatePredicate(synpred103_Java_fragment)))
				{
					alt76 = 1;
				}
				else if ((true))
				{
					alt76 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 76, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case TRUE:
			case VOID:
				{
				alt76 = 2;
				}
				break;
			case SUPER:
				{
				int LA76_4 = input.LA(2);

				if ((EvaluatePredicate(synpred103_Java_fragment)))
				{
					alt76 = 1;
				}
				else if ((true))
				{
					alt76 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 76, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:690:9: ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(690, 9);
				// Java.g:690:9: ( nonWildcardTypeArguments )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==LT))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:690:10: nonWildcardTypeArguments
					{
					DebugLocation(690, 10);
					PushFollow(Follow._nonWildcardTypeArguments_in_explicitConstructorInvocation3294);
					nonWildcardTypeArguments209=nonWildcardTypeArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments209.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(692, 9);

				set210=(IToken)input.LT(1);
				if (input.LA(1)==SUPER||input.LA(1)==THIS)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set210));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(695, 9);
				PushFollow(Follow._arguments_in_explicitConstructorInvocation3352);
				arguments211=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments211.Tree);
				DebugLocation(695, 19);
				char_literal212=(IToken)Match(input,SEMI,Follow._SEMI_in_explicitConstructorInvocation3354); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal212_tree = (object)adaptor.Create(char_literal212);
				adaptor.AddChild(root_0, char_literal212_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:697:9: primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(697, 9);
				PushFollow(Follow._primary_in_explicitConstructorInvocation3365);
				primary213=primary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary213.Tree);
				DebugLocation(698, 9);
				char_literal214=(IToken)Match(input,DOT,Follow._DOT_in_explicitConstructorInvocation3375); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal214_tree = (object)adaptor.Create(char_literal214);
				adaptor.AddChild(root_0, char_literal214_tree);
				}
				DebugLocation(699, 9);
				// Java.g:699:9: ( nonWildcardTypeArguments )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==LT))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:699:10: nonWildcardTypeArguments
					{
					DebugLocation(699, 10);
					PushFollow(Follow._nonWildcardTypeArguments_in_explicitConstructorInvocation3386);
					nonWildcardTypeArguments215=nonWildcardTypeArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments215.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(75); }

				DebugLocation(701, 9);
				string_literal216=(IToken)Match(input,SUPER,Follow._SUPER_in_explicitConstructorInvocation3407); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal216_tree = (object)adaptor.Create(string_literal216);
				adaptor.AddChild(root_0, string_literal216_tree);
				}
				DebugLocation(702, 9);
				PushFollow(Follow._arguments_in_explicitConstructorInvocation3417);
				arguments217=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments217.Tree);
				DebugLocation(702, 19);
				char_literal218=(IToken)Match(input,SEMI,Follow._SEMI_in_explicitConstructorInvocation3419); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal218_tree = (object)adaptor.Create(char_literal218);
				adaptor.AddChild(root_0, char_literal218_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicitConstructorInvocation", 42);
			LeaveRule("explicitConstructorInvocation", 42);
			LeaveRule_explicitConstructorInvocation();
			if (state.backtracking > 0) { Memoize(input, 42, explicitConstructorInvocation_StartIndex); }

		}
		DebugLocation(703, 4);
		} finally { DebugExitRule(GrammarFileName, "explicitConstructorInvocation"); }
		return retval;

	}
	// $ANTLR end "explicitConstructorInvocation"

	partial void EnterRule_qualifiedName();
	partial void LeaveRule_qualifiedName();

	// $ANTLR start "qualifiedName"
	// Java.g:705:1: qualifiedName : IDENTIFIER ( '.' IDENTIFIER )* ;
	[GrammarRule("qualifiedName")]
	private AstParserRuleReturnScope<object, IToken> qualifiedName()
	{
		EnterRule_qualifiedName();
		EnterRule("qualifiedName", 43);
		TraceIn("qualifiedName", 43);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int qualifiedName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER219 = default(IToken);
		IToken char_literal220 = default(IToken);
		IToken IDENTIFIER221 = default(IToken);

		object IDENTIFIER219_tree = default(object);
		object char_literal220_tree = default(object);
		object IDENTIFIER221_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedName");
		DebugLocation(705, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// Java.g:706:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
			DebugEnterAlt(1);
			// Java.g:706:9: IDENTIFIER ( '.' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(706, 9);
			IDENTIFIER219=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedName3439); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER219_tree = (object)adaptor.Create(IDENTIFIER219);
			adaptor.AddChild(root_0, IDENTIFIER219_tree);
			}
			DebugLocation(707, 9);
			// Java.g:707:9: ( '.' IDENTIFIER )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==DOT))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:707:10: '.' IDENTIFIER
					{
					DebugLocation(707, 10);
					char_literal220=(IToken)Match(input,DOT,Follow._DOT_in_qualifiedName3450); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal220_tree = (object)adaptor.Create(char_literal220);
					adaptor.AddChild(root_0, char_literal220_tree);
					}
					DebugLocation(707, 14);
					IDENTIFIER221=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedName3452); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER221_tree = (object)adaptor.Create(IDENTIFIER221);
					adaptor.AddChild(root_0, IDENTIFIER221_tree);
					}

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedName", 43);
			LeaveRule("qualifiedName", 43);
			LeaveRule_qualifiedName();
			if (state.backtracking > 0) { Memoize(input, 43, qualifiedName_StartIndex); }

		}
		DebugLocation(709, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedName"); }
		return retval;

	}
	// $ANTLR end "qualifiedName"

	partial void EnterRule_annotations();
	partial void LeaveRule_annotations();

	// $ANTLR start "annotations"
	// Java.g:711:1: annotations : ( annotation )+ ;
	[GrammarRule("annotations")]
	private AstParserRuleReturnScope<object, IToken> annotations()
	{
		EnterRule_annotations();
		EnterRule("annotations", 44);
		TraceIn("annotations", 44);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotations_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> annotation222 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "annotations");
		DebugLocation(711, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// Java.g:712:5: ( ( annotation )+ )
			DebugEnterAlt(1);
			// Java.g:712:9: ( annotation )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(712, 9);
			// Java.g:712:9: ( annotation )+
			int cnt78=0;
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==MONKEYS_AT))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:712:10: annotation
					{
					DebugLocation(712, 10);
					PushFollow(Follow._annotation_in_annotations3484);
					annotation222=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotation222.Tree);

					}
					break;

				default:
					if (cnt78 >= 1)
						goto loop78;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee78 = new EarlyExitException( 78, input );
					DebugRecognitionException(eee78);
					throw eee78;
				}
				cnt78++;
			}
			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotations", 44);
			LeaveRule("annotations", 44);
			LeaveRule_annotations();
			if (state.backtracking > 0) { Memoize(input, 44, annotations_StartIndex); }

		}
		DebugLocation(714, 4);
		} finally { DebugExitRule(GrammarFileName, "annotations"); }
		return retval;

	}
	// $ANTLR end "annotations"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();

	// $ANTLR start "annotation"
	// Java.g:720:1: annotation : '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? ;
	[GrammarRule("annotation")]
	private AstParserRuleReturnScope<object, IToken> annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 45);
		TraceIn("annotation", 45);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotation_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal223 = default(IToken);
		IToken char_literal225 = default(IToken);
		IToken char_literal228 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qualifiedName224 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValuePairs226 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValue227 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal223_tree = default(object);
		object char_literal225_tree = default(object);
		object char_literal228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(720, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// Java.g:721:5: ( '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? )
			DebugEnterAlt(1);
			// Java.g:721:9: '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(721, 9);
			char_literal223=(IToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotation3517); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal223_tree = (object)adaptor.Create(char_literal223);
			adaptor.AddChild(root_0, char_literal223_tree);
			}
			DebugLocation(721, 13);
			PushFollow(Follow._qualifiedName_in_annotation3519);
			qualifiedName224=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName224.Tree);
			DebugLocation(722, 9);
			// Java.g:722:9: ( '(' ( elementValuePairs | elementValue )? ')' )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==LPAREN))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:722:13: '(' ( elementValuePairs | elementValue )? ')'
				{
				DebugLocation(722, 13);
				char_literal225=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotation3533); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal225_tree = (object)adaptor.Create(char_literal225);
				adaptor.AddChild(root_0, char_literal225_tree);
				}
				DebugLocation(723, 19);
				// Java.g:723:19: ( elementValuePairs | elementValue )?
				int alt79=3;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==IDENTIFIER))
				{
					int LA79_1 = input.LA(2);

					if ((LA79_1==EQ))
					{
						alt79 = 1;
					}
					else if (((LA79_1>=AMP && LA79_1<=AMPAMP)||(LA79_1>=BANGEQ && LA79_1<=BARBAR)||LA79_1==CARET||LA79_1==DOT||LA79_1==EQEQ||LA79_1==GT||LA79_1==INSTANCEOF||LA79_1==LBRACKET||(LA79_1>=LPAREN && LA79_1<=LT)||LA79_1==PERCENT||LA79_1==PLUS||LA79_1==PLUSPLUS||LA79_1==QUES||LA79_1==RPAREN||LA79_1==SLASH||LA79_1==STAR||LA79_1==SUB||LA79_1==SUBSUB))
					{
						alt79 = 2;
					}
				}
				else if ((LA79_0==BANG||LA79_0==BOOLEAN||LA79_0==BYTE||(LA79_0>=CHAR && LA79_0<=CHARLITERAL)||(LA79_0>=DOUBLE && LA79_0<=DOUBLELITERAL)||LA79_0==FALSE||(LA79_0>=FLOAT && LA79_0<=FLOATLITERAL)||LA79_0==INT||LA79_0==INTLITERAL||LA79_0==LBRACE||(LA79_0>=LONG && LA79_0<=LPAREN)||LA79_0==MONKEYS_AT||(LA79_0>=NEW && LA79_0<=NULL)||LA79_0==PLUS||LA79_0==PLUSPLUS||LA79_0==SHORT||(LA79_0>=STRINGLITERAL && LA79_0<=SUB)||(LA79_0>=SUBSUB && LA79_0<=SUPER)||LA79_0==THIS||LA79_0==TILDE||LA79_0==TRUE||LA79_0==VOID))
				{
					alt79 = 2;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:723:23: elementValuePairs
					{
					DebugLocation(723, 23);
					PushFollow(Follow._elementValuePairs_in_annotation3560);
					elementValuePairs226=elementValuePairs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, elementValuePairs226.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:724:23: elementValue
					{
					DebugLocation(724, 23);
					PushFollow(Follow._elementValue_in_annotation3584);
					elementValue227=elementValue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue227.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(79); }

				DebugLocation(726, 13);
				char_literal228=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotation3620); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal228_tree = (object)adaptor.Create(char_literal228);
				adaptor.AddChild(root_0, char_literal228_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotation", 45);
			LeaveRule("annotation", 45);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 45, annotation_StartIndex); }

		}
		DebugLocation(728, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return retval;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_elementValuePairs();
	partial void LeaveRule_elementValuePairs();

	// $ANTLR start "elementValuePairs"
	// Java.g:730:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
	[GrammarRule("elementValuePairs")]
	private AstParserRuleReturnScope<object, IToken> elementValuePairs()
	{
		EnterRule_elementValuePairs();
		EnterRule("elementValuePairs", 46);
		TraceIn("elementValuePairs", 46);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int elementValuePairs_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal230 = default(IToken);
		AstParserRuleReturnScope<object, IToken> elementValuePair229 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValuePair231 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal230_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "elementValuePairs");
		DebugLocation(730, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// Java.g:731:5: ( elementValuePair ( ',' elementValuePair )* )
			DebugEnterAlt(1);
			// Java.g:731:9: elementValuePair ( ',' elementValuePair )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(731, 9);
			PushFollow(Follow._elementValuePair_in_elementValuePairs3652);
			elementValuePair229=elementValuePair();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, elementValuePair229.Tree);
			DebugLocation(732, 9);
			// Java.g:732:9: ( ',' elementValuePair )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==COMMA))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:732:10: ',' elementValuePair
					{
					DebugLocation(732, 10);
					char_literal230=(IToken)Match(input,COMMA,Follow._COMMA_in_elementValuePairs3663); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal230_tree = (object)adaptor.Create(char_literal230);
					adaptor.AddChild(root_0, char_literal230_tree);
					}
					DebugLocation(732, 14);
					PushFollow(Follow._elementValuePair_in_elementValuePairs3665);
					elementValuePair231=elementValuePair();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, elementValuePair231.Tree);

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValuePairs", 46);
			LeaveRule("elementValuePairs", 46);
			LeaveRule_elementValuePairs();
			if (state.backtracking > 0) { Memoize(input, 46, elementValuePairs_StartIndex); }

		}
		DebugLocation(734, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValuePairs"); }
		return retval;

	}
	// $ANTLR end "elementValuePairs"

	partial void EnterRule_elementValuePair();
	partial void LeaveRule_elementValuePair();

	// $ANTLR start "elementValuePair"
	// Java.g:736:1: elementValuePair : IDENTIFIER '=' elementValue ;
	[GrammarRule("elementValuePair")]
	private AstParserRuleReturnScope<object, IToken> elementValuePair()
	{
		EnterRule_elementValuePair();
		EnterRule("elementValuePair", 47);
		TraceIn("elementValuePair", 47);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int elementValuePair_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER232 = default(IToken);
		IToken char_literal233 = default(IToken);
		AstParserRuleReturnScope<object, IToken> elementValue234 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER232_tree = default(object);
		object char_literal233_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "elementValuePair");
		DebugLocation(736, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// Java.g:737:5: ( IDENTIFIER '=' elementValue )
			DebugEnterAlt(1);
			// Java.g:737:9: IDENTIFIER '=' elementValue
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(737, 9);
			IDENTIFIER232=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_elementValuePair3696); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER232_tree = (object)adaptor.Create(IDENTIFIER232);
			adaptor.AddChild(root_0, IDENTIFIER232_tree);
			}
			DebugLocation(737, 20);
			char_literal233=(IToken)Match(input,EQ,Follow._EQ_in_elementValuePair3698); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal233_tree = (object)adaptor.Create(char_literal233);
			adaptor.AddChild(root_0, char_literal233_tree);
			}
			DebugLocation(737, 24);
			PushFollow(Follow._elementValue_in_elementValuePair3700);
			elementValue234=elementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue234.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValuePair", 47);
			LeaveRule("elementValuePair", 47);
			LeaveRule_elementValuePair();
			if (state.backtracking > 0) { Memoize(input, 47, elementValuePair_StartIndex); }

		}
		DebugLocation(738, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValuePair"); }
		return retval;

	}
	// $ANTLR end "elementValuePair"

	partial void EnterRule_elementValue();
	partial void LeaveRule_elementValue();

	// $ANTLR start "elementValue"
	// Java.g:740:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
	[GrammarRule("elementValue")]
	private AstParserRuleReturnScope<object, IToken> elementValue()
	{
		EnterRule_elementValue();
		EnterRule("elementValue", 48);
		TraceIn("elementValue", 48);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int elementValue_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> conditionalExpression235 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> annotation236 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValueArrayInitializer237 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "elementValue");
		DebugLocation(740, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// Java.g:741:5: ( conditionalExpression | annotation | elementValueArrayInitializer )
			int alt82=3;
			try { DebugEnterDecision(82, false);
			switch (input.LA(1))
			{
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case SHORT:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt82 = 1;
				}
				break;
			case MONKEYS_AT:
				{
				alt82 = 2;
				}
				break;
			case LBRACE:
				{
				alt82 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:741:9: conditionalExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(741, 9);
				PushFollow(Follow._conditionalExpression_in_elementValue3720);
				conditionalExpression235=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression235.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:742:9: annotation
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(742, 9);
				PushFollow(Follow._annotation_in_elementValue3730);
				annotation236=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation236.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:743:9: elementValueArrayInitializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(743, 9);
				PushFollow(Follow._elementValueArrayInitializer_in_elementValue3740);
				elementValueArrayInitializer237=elementValueArrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementValueArrayInitializer237.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValue", 48);
			LeaveRule("elementValue", 48);
			LeaveRule_elementValue();
			if (state.backtracking > 0) { Memoize(input, 48, elementValue_StartIndex); }

		}
		DebugLocation(744, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValue"); }
		return retval;

	}
	// $ANTLR end "elementValue"

	partial void EnterRule_elementValueArrayInitializer();
	partial void LeaveRule_elementValueArrayInitializer();

	// $ANTLR start "elementValueArrayInitializer"
	// Java.g:746:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
	[GrammarRule("elementValueArrayInitializer")]
	private AstParserRuleReturnScope<object, IToken> elementValueArrayInitializer()
	{
		EnterRule_elementValueArrayInitializer();
		EnterRule("elementValueArrayInitializer", 49);
		TraceIn("elementValueArrayInitializer", 49);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int elementValueArrayInitializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal238 = default(IToken);
		IToken char_literal240 = default(IToken);
		IToken char_literal242 = default(IToken);
		IToken char_literal243 = default(IToken);
		AstParserRuleReturnScope<object, IToken> elementValue239 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValue241 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal238_tree = default(object);
		object char_literal240_tree = default(object);
		object char_literal242_tree = default(object);
		object char_literal243_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "elementValueArrayInitializer");
		DebugLocation(746, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// Java.g:747:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// Java.g:747:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(747, 9);
			char_literal238=(IToken)Match(input,LBRACE,Follow._LBRACE_in_elementValueArrayInitializer3760); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal238_tree = (object)adaptor.Create(char_literal238);
			adaptor.AddChild(root_0, char_literal238_tree);
			}
			DebugLocation(748, 9);
			// Java.g:748:9: ( elementValue ( ',' elementValue )* )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==BANG||LA84_0==BOOLEAN||LA84_0==BYTE||(LA84_0>=CHAR && LA84_0<=CHARLITERAL)||(LA84_0>=DOUBLE && LA84_0<=DOUBLELITERAL)||LA84_0==FALSE||(LA84_0>=FLOAT && LA84_0<=FLOATLITERAL)||LA84_0==IDENTIFIER||LA84_0==INT||LA84_0==INTLITERAL||LA84_0==LBRACE||(LA84_0>=LONG && LA84_0<=LPAREN)||LA84_0==MONKEYS_AT||(LA84_0>=NEW && LA84_0<=NULL)||LA84_0==PLUS||LA84_0==PLUSPLUS||LA84_0==SHORT||(LA84_0>=STRINGLITERAL && LA84_0<=SUB)||(LA84_0>=SUBSUB && LA84_0<=SUPER)||LA84_0==THIS||LA84_0==TILDE||LA84_0==TRUE||LA84_0==VOID))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:748:10: elementValue ( ',' elementValue )*
				{
				DebugLocation(748, 10);
				PushFollow(Follow._elementValue_in_elementValueArrayInitializer3771);
				elementValue239=elementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue239.Tree);
				DebugLocation(749, 13);
				// Java.g:749:13: ( ',' elementValue )*
				try { DebugEnterSubRule(83);
				while (true)
				{
					int alt83=2;
					try { DebugEnterDecision(83, false);
					int LA83_0 = input.LA(1);

					if ((LA83_0==COMMA))
					{
						int LA83_1 = input.LA(2);

						if ((LA83_1==BANG||LA83_1==BOOLEAN||LA83_1==BYTE||(LA83_1>=CHAR && LA83_1<=CHARLITERAL)||(LA83_1>=DOUBLE && LA83_1<=DOUBLELITERAL)||LA83_1==FALSE||(LA83_1>=FLOAT && LA83_1<=FLOATLITERAL)||LA83_1==IDENTIFIER||LA83_1==INT||LA83_1==INTLITERAL||LA83_1==LBRACE||(LA83_1>=LONG && LA83_1<=LPAREN)||LA83_1==MONKEYS_AT||(LA83_1>=NEW && LA83_1<=NULL)||LA83_1==PLUS||LA83_1==PLUSPLUS||LA83_1==SHORT||(LA83_1>=STRINGLITERAL && LA83_1<=SUB)||(LA83_1>=SUBSUB && LA83_1<=SUPER)||LA83_1==THIS||LA83_1==TILDE||LA83_1==TRUE||LA83_1==VOID))
						{
							alt83 = 1;
						}


					}


					} finally { DebugExitDecision(83); }
					switch ( alt83 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:749:14: ',' elementValue
						{
						DebugLocation(749, 14);
						char_literal240=(IToken)Match(input,COMMA,Follow._COMMA_in_elementValueArrayInitializer3786); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal240_tree = (object)adaptor.Create(char_literal240);
						adaptor.AddChild(root_0, char_literal240_tree);
						}
						DebugLocation(749, 18);
						PushFollow(Follow._elementValue_in_elementValueArrayInitializer3788);
						elementValue241=elementValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue241.Tree);

						}
						break;

					default:
						goto loop83;
					}
				}

				loop83:
					;

				} finally { DebugExitSubRule(83); }


				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(751, 12);
			// Java.g:751:12: ( ',' )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==COMMA))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:751:13: ','
				{
				DebugLocation(751, 13);
				char_literal242=(IToken)Match(input,COMMA,Follow._COMMA_in_elementValueArrayInitializer3817); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal242_tree = (object)adaptor.Create(char_literal242);
				adaptor.AddChild(root_0, char_literal242_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(751, 19);
			char_literal243=(IToken)Match(input,RBRACE,Follow._RBRACE_in_elementValueArrayInitializer3821); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal243_tree = (object)adaptor.Create(char_literal243);
			adaptor.AddChild(root_0, char_literal243_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValueArrayInitializer", 49);
			LeaveRule("elementValueArrayInitializer", 49);
			LeaveRule_elementValueArrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 49, elementValueArrayInitializer_StartIndex); }

		}
		DebugLocation(752, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValueArrayInitializer"); }
		return retval;

	}
	// $ANTLR end "elementValueArrayInitializer"

	partial void EnterRule_annotationTypeDeclaration();
	partial void LeaveRule_annotationTypeDeclaration();

	// $ANTLR start "annotationTypeDeclaration"
	// Java.g:758:1: annotationTypeDeclaration : modifiers '@' 'interface' IDENTIFIER annotationTypeBody ;
	[GrammarRule("annotationTypeDeclaration")]
	private AstParserRuleReturnScope<object, IToken> annotationTypeDeclaration()
	{
		EnterRule_annotationTypeDeclaration();
		EnterRule("annotationTypeDeclaration", 50);
		TraceIn("annotationTypeDeclaration", 50);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationTypeDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal245 = default(IToken);
		IToken string_literal246 = default(IToken);
		IToken IDENTIFIER247 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers244 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> annotationTypeBody248 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal245_tree = default(object);
		object string_literal246_tree = default(object);
		object IDENTIFIER247_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotationTypeDeclaration");
		DebugLocation(758, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// Java.g:759:5: ( modifiers '@' 'interface' IDENTIFIER annotationTypeBody )
			DebugEnterAlt(1);
			// Java.g:759:9: modifiers '@' 'interface' IDENTIFIER annotationTypeBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(759, 9);
			PushFollow(Follow._modifiers_in_annotationTypeDeclaration3844);
			modifiers244=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers244.Tree);
			DebugLocation(759, 19);
			char_literal245=(IToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotationTypeDeclaration3846); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal245_tree = (object)adaptor.Create(char_literal245);
			adaptor.AddChild(root_0, char_literal245_tree);
			}
			DebugLocation(760, 9);
			string_literal246=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_annotationTypeDeclaration3856); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal246_tree = (object)adaptor.Create(string_literal246);
			adaptor.AddChild(root_0, string_literal246_tree);
			}
			DebugLocation(761, 9);
			IDENTIFIER247=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationTypeDeclaration3866); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER247_tree = (object)adaptor.Create(IDENTIFIER247);
			adaptor.AddChild(root_0, IDENTIFIER247_tree);
			}
			DebugLocation(762, 9);
			PushFollow(Follow._annotationTypeBody_in_annotationTypeDeclaration3876);
			annotationTypeBody248=annotationTypeBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeBody248.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeDeclaration", 50);
			LeaveRule("annotationTypeDeclaration", 50);
			LeaveRule_annotationTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 50, annotationTypeDeclaration_StartIndex); }

		}
		DebugLocation(763, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationTypeDeclaration"

	partial void EnterRule_annotationTypeBody();
	partial void LeaveRule_annotationTypeBody();

	// $ANTLR start "annotationTypeBody"
	// Java.g:766:1: annotationTypeBody : '{' ( annotationTypeElementDeclaration )* '}' ;
	[GrammarRule("annotationTypeBody")]
	private AstParserRuleReturnScope<object, IToken> annotationTypeBody()
	{
		EnterRule_annotationTypeBody();
		EnterRule("annotationTypeBody", 51);
		TraceIn("annotationTypeBody", 51);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationTypeBody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal249 = default(IToken);
		IToken char_literal251 = default(IToken);
		AstParserRuleReturnScope<object, IToken> annotationTypeElementDeclaration250 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal249_tree = default(object);
		object char_literal251_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotationTypeBody");
		DebugLocation(766, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// Java.g:767:5: ( '{' ( annotationTypeElementDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:767:9: '{' ( annotationTypeElementDeclaration )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(767, 9);
			char_literal249=(IToken)Match(input,LBRACE,Follow._LBRACE_in_annotationTypeBody3897); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal249_tree = (object)adaptor.Create(char_literal249);
			adaptor.AddChild(root_0, char_literal249_tree);
			}
			DebugLocation(768, 9);
			// Java.g:768:9: ( annotationTypeElementDeclaration )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==ABSTRACT||LA86_0==BOOLEAN||LA86_0==BYTE||LA86_0==CHAR||LA86_0==CLASS||LA86_0==DOUBLE||LA86_0==ENUM||LA86_0==FINAL||LA86_0==FLOAT||LA86_0==IDENTIFIER||(LA86_0>=INT && LA86_0<=INTERFACE)||LA86_0==LONG||LA86_0==LT||(LA86_0>=MONKEYS_AT && LA86_0<=NATIVE)||(LA86_0>=PRIVATE && LA86_0<=PUBLIC)||(LA86_0>=SEMI && LA86_0<=SHORT)||(LA86_0>=STATIC && LA86_0<=STRICTFP)||LA86_0==SYNCHRONIZED||LA86_0==TRANSIENT||(LA86_0>=VOID && LA86_0<=VOLATILE)))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:768:10: annotationTypeElementDeclaration
					{
					DebugLocation(768, 10);
					PushFollow(Follow._annotationTypeElementDeclaration_in_annotationTypeBody3909);
					annotationTypeElementDeclaration250=annotationTypeElementDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeElementDeclaration250.Tree);

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }

			DebugLocation(770, 9);
			char_literal251=(IToken)Match(input,RBRACE,Follow._RBRACE_in_annotationTypeBody3931); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal251_tree = (object)adaptor.Create(char_literal251);
			adaptor.AddChild(root_0, char_literal251_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeBody", 51);
			LeaveRule("annotationTypeBody", 51);
			LeaveRule_annotationTypeBody();
			if (state.backtracking > 0) { Memoize(input, 51, annotationTypeBody_StartIndex); }

		}
		DebugLocation(771, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeBody"); }
		return retval;

	}
	// $ANTLR end "annotationTypeBody"

	partial void EnterRule_annotationTypeElementDeclaration();
	partial void LeaveRule_annotationTypeElementDeclaration();

	// $ANTLR start "annotationTypeElementDeclaration"
	// Java.g:776:1: annotationTypeElementDeclaration : ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' );
	[GrammarRule("annotationTypeElementDeclaration")]
	private AstParserRuleReturnScope<object, IToken> annotationTypeElementDeclaration()
	{
		EnterRule_annotationTypeElementDeclaration();
		EnterRule("annotationTypeElementDeclaration", 52);
		TraceIn("annotationTypeElementDeclaration", 52);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationTypeElementDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal258 = default(IToken);
		AstParserRuleReturnScope<object, IToken> annotationMethodDeclaration252 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceFieldDeclaration253 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> normalClassDeclaration254 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> normalInterfaceDeclaration255 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumDeclaration256 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> annotationTypeDeclaration257 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal258_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotationTypeElementDeclaration");
		DebugLocation(776, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// Java.g:777:5: ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' )
			int alt87=7;
			try { DebugEnterDecision(87, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA87_1 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA87_3 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA87_4 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA87_5 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA87_6 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA87_7 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA87_8 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA87_9 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA87_10 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA87_11 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA87_12 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA87_13 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA87_14 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				alt87 = 3;
				}
				break;
			case INTERFACE:
				{
				alt87 = 4;
				}
				break;
			case ENUM:
				{
				alt87 = 5;
				}
				break;
			case SEMI:
				{
				alt87 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:777:9: annotationMethodDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(777, 9);
				PushFollow(Follow._annotationMethodDeclaration_in_annotationTypeElementDeclaration3953);
				annotationMethodDeclaration252=annotationMethodDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationMethodDeclaration252.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:778:9: interfaceFieldDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(778, 9);
				PushFollow(Follow._interfaceFieldDeclaration_in_annotationTypeElementDeclaration3963);
				interfaceFieldDeclaration253=interfaceFieldDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceFieldDeclaration253.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:779:9: normalClassDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(779, 9);
				PushFollow(Follow._normalClassDeclaration_in_annotationTypeElementDeclaration3973);
				normalClassDeclaration254=normalClassDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalClassDeclaration254.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:780:9: normalInterfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(780, 9);
				PushFollow(Follow._normalInterfaceDeclaration_in_annotationTypeElementDeclaration3983);
				normalInterfaceDeclaration255=normalInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalInterfaceDeclaration255.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:781:9: enumDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(781, 9);
				PushFollow(Follow._enumDeclaration_in_annotationTypeElementDeclaration3993);
				enumDeclaration256=enumDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumDeclaration256.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:782:9: annotationTypeDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(782, 9);
				PushFollow(Follow._annotationTypeDeclaration_in_annotationTypeElementDeclaration4003);
				annotationTypeDeclaration257=annotationTypeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeDeclaration257.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:783:9: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(783, 9);
				char_literal258=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationTypeElementDeclaration4013); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal258_tree = (object)adaptor.Create(char_literal258);
				adaptor.AddChild(root_0, char_literal258_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeElementDeclaration", 52);
			LeaveRule("annotationTypeElementDeclaration", 52);
			LeaveRule_annotationTypeElementDeclaration();
			if (state.backtracking > 0) { Memoize(input, 52, annotationTypeElementDeclaration_StartIndex); }

		}
		DebugLocation(784, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeElementDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationTypeElementDeclaration"

	partial void EnterRule_annotationMethodDeclaration();
	partial void LeaveRule_annotationMethodDeclaration();

	// $ANTLR start "annotationMethodDeclaration"
	// Java.g:786:1: annotationMethodDeclaration : modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' ;
	[GrammarRule("annotationMethodDeclaration")]
	private AstParserRuleReturnScope<object, IToken> annotationMethodDeclaration()
	{
		EnterRule_annotationMethodDeclaration();
		EnterRule("annotationMethodDeclaration", 53);
		TraceIn("annotationMethodDeclaration", 53);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationMethodDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER261 = default(IToken);
		IToken char_literal262 = default(IToken);
		IToken char_literal263 = default(IToken);
		IToken string_literal264 = default(IToken);
		IToken char_literal266 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers259 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type260 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> elementValue265 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER261_tree = default(object);
		object char_literal262_tree = default(object);
		object char_literal263_tree = default(object);
		object string_literal264_tree = default(object);
		object char_literal266_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotationMethodDeclaration");
		DebugLocation(786, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// Java.g:787:5: ( modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' )
			DebugEnterAlt(1);
			// Java.g:787:9: modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(787, 9);
			PushFollow(Follow._modifiers_in_annotationMethodDeclaration4033);
			modifiers259=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers259.Tree);
			DebugLocation(787, 19);
			PushFollow(Follow._type_in_annotationMethodDeclaration4035);
			type260=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type260.Tree);
			DebugLocation(787, 24);
			IDENTIFIER261=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationMethodDeclaration4037); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER261_tree = (object)adaptor.Create(IDENTIFIER261);
			adaptor.AddChild(root_0, IDENTIFIER261_tree);
			}
			DebugLocation(788, 9);
			char_literal262=(IToken)Match(input,LPAREN,Follow._LPAREN_in_annotationMethodDeclaration4047); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal262_tree = (object)adaptor.Create(char_literal262);
			adaptor.AddChild(root_0, char_literal262_tree);
			}
			DebugLocation(788, 13);
			char_literal263=(IToken)Match(input,RPAREN,Follow._RPAREN_in_annotationMethodDeclaration4049); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal263_tree = (object)adaptor.Create(char_literal263);
			adaptor.AddChild(root_0, char_literal263_tree);
			}
			DebugLocation(788, 17);
			// Java.g:788:17: ( 'default' elementValue )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			int LA88_0 = input.LA(1);

			if ((LA88_0==DEFAULT))
			{
				alt88 = 1;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:788:18: 'default' elementValue
				{
				DebugLocation(788, 18);
				string_literal264=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_annotationMethodDeclaration4052); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal264_tree = (object)adaptor.Create(string_literal264);
				adaptor.AddChild(root_0, string_literal264_tree);
				}
				DebugLocation(788, 28);
				PushFollow(Follow._elementValue_in_annotationMethodDeclaration4054);
				elementValue265=elementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue265.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(88); }

			DebugLocation(790, 9);
			char_literal266=(IToken)Match(input,SEMI,Follow._SEMI_in_annotationMethodDeclaration4083); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal266_tree = (object)adaptor.Create(char_literal266);
			adaptor.AddChild(root_0, char_literal266_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationMethodDeclaration", 53);
			LeaveRule("annotationMethodDeclaration", 53);
			LeaveRule_annotationMethodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 53, annotationMethodDeclaration_StartIndex); }

		}
		DebugLocation(791, 8);
		} finally { DebugExitRule(GrammarFileName, "annotationMethodDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationMethodDeclaration"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// Java.g:793:1: block : '{' ( blockStatement )* '}' ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<object, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 54);
		TraceIn("block", 54);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int block_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal267 = default(IToken);
		IToken char_literal269 = default(IToken);
		AstParserRuleReturnScope<object, IToken> blockStatement268 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal267_tree = default(object);
		object char_literal269_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(793, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// Java.g:794:5: ( '{' ( blockStatement )* '}' )
			DebugEnterAlt(1);
			// Java.g:794:9: '{' ( blockStatement )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(794, 9);
			char_literal267=(IToken)Match(input,LBRACE,Follow._LBRACE_in_block4107); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal267_tree = (object)adaptor.Create(char_literal267);
			adaptor.AddChild(root_0, char_literal267_tree);
			}
			DebugLocation(795, 9);
			// Java.g:795:9: ( blockStatement )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==ABSTRACT||(LA89_0>=ASSERT && LA89_0<=BANG)||(LA89_0>=BOOLEAN && LA89_0<=BYTE)||(LA89_0>=CHAR && LA89_0<=CLASS)||LA89_0==CONTINUE||LA89_0==DO||(LA89_0>=DOUBLE && LA89_0<=DOUBLELITERAL)||LA89_0==ENUM||(LA89_0>=FALSE && LA89_0<=FINAL)||(LA89_0>=FLOAT && LA89_0<=FOR)||(LA89_0>=IDENTIFIER && LA89_0<=IF)||(LA89_0>=INT && LA89_0<=INTLITERAL)||LA89_0==LBRACE||(LA89_0>=LONG && LA89_0<=LT)||(LA89_0>=MONKEYS_AT && LA89_0<=NULL)||LA89_0==PLUS||(LA89_0>=PLUSPLUS && LA89_0<=PUBLIC)||LA89_0==RETURN||(LA89_0>=SEMI && LA89_0<=SHORT)||(LA89_0>=STATIC && LA89_0<=SUB)||(LA89_0>=SUBSUB && LA89_0<=SYNCHRONIZED)||(LA89_0>=THIS && LA89_0<=THROW)||(LA89_0>=TILDE && LA89_0<=WHILE)))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:795:10: blockStatement
					{
					DebugLocation(795, 10);
					PushFollow(Follow._blockStatement_in_block4118);
					blockStatement268=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement268.Tree);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(797, 9);
			char_literal269=(IToken)Match(input,RBRACE,Follow._RBRACE_in_block4139); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal269_tree = (object)adaptor.Create(char_literal269);
			adaptor.AddChild(root_0, char_literal269_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 54);
			LeaveRule("block", 54);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 54, block_StartIndex); }

		}
		DebugLocation(798, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();

	// $ANTLR start "blockStatement"
	// Java.g:824:1: blockStatement : ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement );
	[GrammarRule("blockStatement")]
	private AstParserRuleReturnScope<object, IToken> blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 55);
		TraceIn("blockStatement", 55);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int blockStatement_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> localVariableDeclarationStatement270 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classOrInterfaceDeclaration271 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement272 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(824, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// Java.g:825:5: ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement )
			int alt90=3;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA90_1 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MONKEYS_AT:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA90_3 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA90_4 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case INTERFACE:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case TRANSIENT:
			case VOLATILE:
				{
				alt90 = 2;
				}
				break;
			case SYNCHRONIZED:
				{
				int LA90_11 = input.LA(2);

				if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ASSERT:
			case BANG:
			case BREAK:
			case CHARLITERAL:
			case CONTINUE:
			case DO:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case FOR:
			case IF:
			case INTLITERAL:
			case LBRACE:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case RETURN:
			case SEMI:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case SWITCH:
			case THIS:
			case THROW:
			case TILDE:
			case TRUE:
			case TRY:
			case VOID:
			case WHILE:
				{
				alt90 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:825:9: localVariableDeclarationStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(825, 9);
				PushFollow(Follow._localVariableDeclarationStatement_in_blockStatement4161);
				localVariableDeclarationStatement270=localVariableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclarationStatement270.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:826:9: classOrInterfaceDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(826, 9);
				PushFollow(Follow._classOrInterfaceDeclaration_in_blockStatement4171);
				classOrInterfaceDeclaration271=classOrInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceDeclaration271.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:827:9: statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(827, 9);
				PushFollow(Follow._statement_in_blockStatement4181);
				statement272=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement272.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blockStatement", 55);
			LeaveRule("blockStatement", 55);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 55, blockStatement_StartIndex); }

		}
		DebugLocation(828, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return retval;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_localVariableDeclarationStatement();
	partial void LeaveRule_localVariableDeclarationStatement();

	// $ANTLR start "localVariableDeclarationStatement"
	// Java.g:831:1: localVariableDeclarationStatement : localVariableDeclaration ';' ;
	[GrammarRule("localVariableDeclarationStatement")]
	private AstParserRuleReturnScope<object, IToken> localVariableDeclarationStatement()
	{
		EnterRule_localVariableDeclarationStatement();
		EnterRule("localVariableDeclarationStatement", 56);
		TraceIn("localVariableDeclarationStatement", 56);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localVariableDeclarationStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal274 = default(IToken);
		AstParserRuleReturnScope<object, IToken> localVariableDeclaration273 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal274_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "localVariableDeclarationStatement");
		DebugLocation(831, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// Java.g:832:5: ( localVariableDeclaration ';' )
			DebugEnterAlt(1);
			// Java.g:832:9: localVariableDeclaration ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(832, 9);
			PushFollow(Follow._localVariableDeclaration_in_localVariableDeclarationStatement4202);
			localVariableDeclaration273=localVariableDeclaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclaration273.Tree);
			DebugLocation(833, 9);
			char_literal274=(IToken)Match(input,SEMI,Follow._SEMI_in_localVariableDeclarationStatement4212); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal274_tree = (object)adaptor.Create(char_literal274);
			adaptor.AddChild(root_0, char_literal274_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclarationStatement", 56);
			LeaveRule("localVariableDeclarationStatement", 56);
			LeaveRule_localVariableDeclarationStatement();
			if (state.backtracking > 0) { Memoize(input, 56, localVariableDeclarationStatement_StartIndex); }

		}
		DebugLocation(834, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclarationStatement"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();

	// $ANTLR start "localVariableDeclaration"
	// Java.g:836:1: localVariableDeclaration : variableModifiers type variableDeclarator ( ',' variableDeclarator )* ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<object, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 57);
		TraceIn("localVariableDeclaration", 57);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localVariableDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal278 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers275 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type276 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator277 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableDeclarator279 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal278_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(836, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// Java.g:837:5: ( variableModifiers type variableDeclarator ( ',' variableDeclarator )* )
			DebugEnterAlt(1);
			// Java.g:837:9: variableModifiers type variableDeclarator ( ',' variableDeclarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(837, 9);
			PushFollow(Follow._variableModifiers_in_localVariableDeclaration4232);
			variableModifiers275=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers275.Tree);
			DebugLocation(837, 27);
			PushFollow(Follow._type_in_localVariableDeclaration4234);
			type276=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type276.Tree);
			DebugLocation(838, 9);
			PushFollow(Follow._variableDeclarator_in_localVariableDeclaration4244);
			variableDeclarator277=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator277.Tree);
			DebugLocation(839, 9);
			// Java.g:839:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==COMMA))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:839:10: ',' variableDeclarator
					{
					DebugLocation(839, 10);
					char_literal278=(IToken)Match(input,COMMA,Follow._COMMA_in_localVariableDeclaration4255); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal278_tree = (object)adaptor.Create(char_literal278);
					adaptor.AddChild(root_0, char_literal278_tree);
					}
					DebugLocation(839, 14);
					PushFollow(Follow._variableDeclarator_in_localVariableDeclaration4257);
					variableDeclarator279=variableDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator279.Tree);

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 57);
			LeaveRule("localVariableDeclaration", 57);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 57, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(841, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// Java.g:843:1: statement : ( block | ( 'assert' ) expression ( ':' expression )? ';' | 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( 'else' statement )? | forstatement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | 'return' ( expression )? ';' | 'throw' expression ';' | 'break' ( IDENTIFIER )? ';' | 'continue' ( IDENTIFIER )? ';' | expression ';' | IDENTIFIER ':' statement | ';' );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<object, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 58);
		TraceIn("statement", 58);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal281 = default(IToken);
		IToken char_literal283 = default(IToken);
		IToken char_literal285 = default(IToken);
		IToken string_literal286 = default(IToken);
		IToken char_literal288 = default(IToken);
		IToken char_literal290 = default(IToken);
		IToken string_literal291 = default(IToken);
		IToken string_literal294 = default(IToken);
		IToken string_literal297 = default(IToken);
		IToken string_literal300 = default(IToken);
		IToken string_literal302 = default(IToken);
		IToken char_literal304 = default(IToken);
		IToken string_literal306 = default(IToken);
		IToken char_literal308 = default(IToken);
		IToken char_literal310 = default(IToken);
		IToken string_literal311 = default(IToken);
		IToken string_literal314 = default(IToken);
		IToken char_literal316 = default(IToken);
		IToken string_literal317 = default(IToken);
		IToken char_literal319 = default(IToken);
		IToken string_literal320 = default(IToken);
		IToken IDENTIFIER321 = default(IToken);
		IToken char_literal322 = default(IToken);
		IToken string_literal323 = default(IToken);
		IToken IDENTIFIER324 = default(IToken);
		IToken char_literal325 = default(IToken);
		IToken char_literal327 = default(IToken);
		IToken IDENTIFIER328 = default(IToken);
		IToken char_literal329 = default(IToken);
		IToken char_literal331 = default(IToken);
		AstParserRuleReturnScope<object, IToken> block280 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression282 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression284 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression287 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression289 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parExpression292 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement293 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement295 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forstatement296 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parExpression298 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement299 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement301 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parExpression303 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> trystatement305 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parExpression307 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> switchBlockStatementGroups309 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parExpression312 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block313 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression315 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression318 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression326 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement330 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal281_tree = default(object);
		object char_literal283_tree = default(object);
		object char_literal285_tree = default(object);
		object string_literal286_tree = default(object);
		object char_literal288_tree = default(object);
		object char_literal290_tree = default(object);
		object string_literal291_tree = default(object);
		object string_literal294_tree = default(object);
		object string_literal297_tree = default(object);
		object string_literal300_tree = default(object);
		object string_literal302_tree = default(object);
		object char_literal304_tree = default(object);
		object string_literal306_tree = default(object);
		object char_literal308_tree = default(object);
		object char_literal310_tree = default(object);
		object string_literal311_tree = default(object);
		object string_literal314_tree = default(object);
		object char_literal316_tree = default(object);
		object string_literal317_tree = default(object);
		object char_literal319_tree = default(object);
		object string_literal320_tree = default(object);
		object IDENTIFIER321_tree = default(object);
		object char_literal322_tree = default(object);
		object string_literal323_tree = default(object);
		object IDENTIFIER324_tree = default(object);
		object char_literal325_tree = default(object);
		object char_literal327_tree = default(object);
		object IDENTIFIER328_tree = default(object);
		object char_literal329_tree = default(object);
		object char_literal331_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(843, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// Java.g:844:5: ( block | ( 'assert' ) expression ( ':' expression )? ';' | 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( 'else' statement )? | forstatement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | 'return' ( expression )? ';' | 'throw' expression ';' | 'break' ( IDENTIFIER )? ';' | 'continue' ( IDENTIFIER )? ';' | expression ';' | IDENTIFIER ':' statement | ';' )
			int alt98=17;
			try { DebugEnterDecision(98, false);
			switch (input.LA(1))
			{
			case LBRACE:
				{
				alt98 = 1;
				}
				break;
			case ASSERT:
				{
				int LA98_2 = input.LA(2);

				if ((EvaluatePredicate(synpred130_Java_fragment)))
				{
					alt98 = 2;
				}
				else if ((EvaluatePredicate(synpred132_Java_fragment)))
				{
					alt98 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				alt98 = 4;
				}
				break;
			case FOR:
				{
				alt98 = 5;
				}
				break;
			case WHILE:
				{
				alt98 = 6;
				}
				break;
			case DO:
				{
				alt98 = 7;
				}
				break;
			case TRY:
				{
				alt98 = 8;
				}
				break;
			case SWITCH:
				{
				alt98 = 9;
				}
				break;
			case SYNCHRONIZED:
				{
				alt98 = 10;
				}
				break;
			case RETURN:
				{
				alt98 = 11;
				}
				break;
			case THROW:
				{
				alt98 = 12;
				}
				break;
			case BREAK:
				{
				alt98 = 13;
				}
				break;
			case CONTINUE:
				{
				alt98 = 14;
				}
				break;
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case SHORT:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt98 = 15;
				}
				break;
			case IDENTIFIER:
				{
				int LA98_22 = input.LA(2);

				if ((EvaluatePredicate(synpred148_Java_fragment)))
				{
					alt98 = 15;
				}
				else if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt98 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 22, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SEMI:
				{
				alt98 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:844:9: block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(844, 9);
				PushFollow(Follow._block_in_statement4288);
				block280=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block280.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:846:9: ( 'assert' ) expression ( ':' expression )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(846, 9);
				// Java.g:846:9: ( 'assert' )
				DebugEnterAlt(1);
				// Java.g:846:10: 'assert'
				{
				DebugLocation(846, 10);
				string_literal281=(IToken)Match(input,ASSERT,Follow._ASSERT_in_statement4312); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal281_tree = (object)adaptor.Create(string_literal281);
				adaptor.AddChild(root_0, string_literal281_tree);
				}

				}

				DebugLocation(848, 9);
				PushFollow(Follow._expression_in_statement4332);
				expression282=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression282.Tree);
				DebugLocation(848, 20);
				// Java.g:848:20: ( ':' expression )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==COLON))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:848:21: ':' expression
					{
					DebugLocation(848, 21);
					char_literal283=(IToken)Match(input,COLON,Follow._COLON_in_statement4335); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal283_tree = (object)adaptor.Create(char_literal283);
					adaptor.AddChild(root_0, char_literal283_tree);
					}
					DebugLocation(848, 25);
					PushFollow(Follow._expression_in_statement4337);
					expression284=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression284.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(92); }

				DebugLocation(848, 38);
				char_literal285=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4341); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal285_tree = (object)adaptor.Create(char_literal285);
				adaptor.AddChild(root_0, char_literal285_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:849:9: 'assert' expression ( ':' expression )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(849, 9);
				string_literal286=(IToken)Match(input,ASSERT,Follow._ASSERT_in_statement4351); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal286_tree = (object)adaptor.Create(string_literal286);
				adaptor.AddChild(root_0, string_literal286_tree);
				}
				DebugLocation(849, 19);
				PushFollow(Follow._expression_in_statement4354);
				expression287=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression287.Tree);
				DebugLocation(849, 30);
				// Java.g:849:30: ( ':' expression )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==COLON))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:849:31: ':' expression
					{
					DebugLocation(849, 31);
					char_literal288=(IToken)Match(input,COLON,Follow._COLON_in_statement4357); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal288_tree = (object)adaptor.Create(char_literal288);
					adaptor.AddChild(root_0, char_literal288_tree);
					}
					DebugLocation(849, 35);
					PushFollow(Follow._expression_in_statement4359);
					expression289=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression289.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(849, 48);
				char_literal290=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4363); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal290_tree = (object)adaptor.Create(char_literal290);
				adaptor.AddChild(root_0, char_literal290_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:850:9: 'if' parExpression statement ( 'else' statement )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(850, 9);
				string_literal291=(IToken)Match(input,IF,Follow._IF_in_statement4385); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal291_tree = (object)adaptor.Create(string_literal291);
				adaptor.AddChild(root_0, string_literal291_tree);
				}
				DebugLocation(850, 14);
				PushFollow(Follow._parExpression_in_statement4387);
				parExpression292=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression292.Tree);
				DebugLocation(850, 28);
				PushFollow(Follow._statement_in_statement4389);
				statement293=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement293.Tree);
				DebugLocation(850, 38);
				// Java.g:850:38: ( 'else' statement )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==ELSE))
				{
					int LA94_1 = input.LA(2);

					if ((EvaluatePredicate(synpred133_Java_fragment)))
					{
						alt94 = 1;
					}
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:850:39: 'else' statement
					{
					DebugLocation(850, 39);
					string_literal294=(IToken)Match(input,ELSE,Follow._ELSE_in_statement4392); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal294_tree = (object)adaptor.Create(string_literal294);
					adaptor.AddChild(root_0, string_literal294_tree);
					}
					DebugLocation(850, 46);
					PushFollow(Follow._statement_in_statement4394);
					statement295=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement295.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(94); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:851:9: forstatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(851, 9);
				PushFollow(Follow._forstatement_in_statement4416);
				forstatement296=forstatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forstatement296.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:852:9: 'while' parExpression statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(852, 9);
				string_literal297=(IToken)Match(input,WHILE,Follow._WHILE_in_statement4426); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal297_tree = (object)adaptor.Create(string_literal297);
				adaptor.AddChild(root_0, string_literal297_tree);
				}
				DebugLocation(852, 17);
				PushFollow(Follow._parExpression_in_statement4428);
				parExpression298=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression298.Tree);
				DebugLocation(852, 31);
				PushFollow(Follow._statement_in_statement4430);
				statement299=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement299.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:853:9: 'do' statement 'while' parExpression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(853, 9);
				string_literal300=(IToken)Match(input,DO,Follow._DO_in_statement4440); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal300_tree = (object)adaptor.Create(string_literal300);
				adaptor.AddChild(root_0, string_literal300_tree);
				}
				DebugLocation(853, 14);
				PushFollow(Follow._statement_in_statement4442);
				statement301=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement301.Tree);
				DebugLocation(853, 24);
				string_literal302=(IToken)Match(input,WHILE,Follow._WHILE_in_statement4444); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal302_tree = (object)adaptor.Create(string_literal302);
				adaptor.AddChild(root_0, string_literal302_tree);
				}
				DebugLocation(853, 32);
				PushFollow(Follow._parExpression_in_statement4446);
				parExpression303=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression303.Tree);
				DebugLocation(853, 46);
				char_literal304=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4448); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal304_tree = (object)adaptor.Create(char_literal304);
				adaptor.AddChild(root_0, char_literal304_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:854:9: trystatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(854, 9);
				PushFollow(Follow._trystatement_in_statement4458);
				trystatement305=trystatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, trystatement305.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:855:9: 'switch' parExpression '{' switchBlockStatementGroups '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(855, 9);
				string_literal306=(IToken)Match(input,SWITCH,Follow._SWITCH_in_statement4468); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal306_tree = (object)adaptor.Create(string_literal306);
				adaptor.AddChild(root_0, string_literal306_tree);
				}
				DebugLocation(855, 18);
				PushFollow(Follow._parExpression_in_statement4470);
				parExpression307=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression307.Tree);
				DebugLocation(855, 32);
				char_literal308=(IToken)Match(input,LBRACE,Follow._LBRACE_in_statement4472); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal308_tree = (object)adaptor.Create(char_literal308);
				adaptor.AddChild(root_0, char_literal308_tree);
				}
				DebugLocation(855, 36);
				PushFollow(Follow._switchBlockStatementGroups_in_statement4474);
				switchBlockStatementGroups309=switchBlockStatementGroups();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switchBlockStatementGroups309.Tree);
				DebugLocation(855, 63);
				char_literal310=(IToken)Match(input,RBRACE,Follow._RBRACE_in_statement4476); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal310_tree = (object)adaptor.Create(char_literal310);
				adaptor.AddChild(root_0, char_literal310_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:856:9: 'synchronized' parExpression block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(856, 9);
				string_literal311=(IToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement4486); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal311_tree = (object)adaptor.Create(string_literal311);
				adaptor.AddChild(root_0, string_literal311_tree);
				}
				DebugLocation(856, 24);
				PushFollow(Follow._parExpression_in_statement4488);
				parExpression312=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression312.Tree);
				DebugLocation(856, 38);
				PushFollow(Follow._block_in_statement4490);
				block313=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block313.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:857:9: 'return' ( expression )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(857, 9);
				string_literal314=(IToken)Match(input,RETURN,Follow._RETURN_in_statement4500); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal314_tree = (object)adaptor.Create(string_literal314);
				adaptor.AddChild(root_0, string_literal314_tree);
				}
				DebugLocation(857, 18);
				// Java.g:857:18: ( expression )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_0 = input.LA(1);

				if ((LA95_0==BANG||LA95_0==BOOLEAN||LA95_0==BYTE||(LA95_0>=CHAR && LA95_0<=CHARLITERAL)||(LA95_0>=DOUBLE && LA95_0<=DOUBLELITERAL)||LA95_0==FALSE||(LA95_0>=FLOAT && LA95_0<=FLOATLITERAL)||LA95_0==IDENTIFIER||LA95_0==INT||LA95_0==INTLITERAL||(LA95_0>=LONG && LA95_0<=LPAREN)||(LA95_0>=NEW && LA95_0<=NULL)||LA95_0==PLUS||LA95_0==PLUSPLUS||LA95_0==SHORT||(LA95_0>=STRINGLITERAL && LA95_0<=SUB)||(LA95_0>=SUBSUB && LA95_0<=SUPER)||LA95_0==THIS||LA95_0==TILDE||LA95_0==TRUE||LA95_0==VOID))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:857:19: expression
					{
					DebugLocation(857, 19);
					PushFollow(Follow._expression_in_statement4503);
					expression315=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression315.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(857, 33);
				char_literal316=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4508); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal316_tree = (object)adaptor.Create(char_literal316);
				adaptor.AddChild(root_0, char_literal316_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Java.g:858:9: 'throw' expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(858, 9);
				string_literal317=(IToken)Match(input,THROW,Follow._THROW_in_statement4518); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal317_tree = (object)adaptor.Create(string_literal317);
				adaptor.AddChild(root_0, string_literal317_tree);
				}
				DebugLocation(858, 17);
				PushFollow(Follow._expression_in_statement4520);
				expression318=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression318.Tree);
				DebugLocation(858, 28);
				char_literal319=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4522); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal319_tree = (object)adaptor.Create(char_literal319);
				adaptor.AddChild(root_0, char_literal319_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Java.g:859:9: 'break' ( IDENTIFIER )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(859, 9);
				string_literal320=(IToken)Match(input,BREAK,Follow._BREAK_in_statement4532); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal320_tree = (object)adaptor.Create(string_literal320);
				adaptor.AddChild(root_0, string_literal320_tree);
				}
				DebugLocation(860, 13);
				// Java.g:860:13: ( IDENTIFIER )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==IDENTIFIER))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:860:14: IDENTIFIER
					{
					DebugLocation(860, 14);
					IDENTIFIER321=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4547); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER321_tree = (object)adaptor.Create(IDENTIFIER321);
					adaptor.AddChild(root_0, IDENTIFIER321_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(861, 16);
				char_literal322=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4564); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal322_tree = (object)adaptor.Create(char_literal322);
				adaptor.AddChild(root_0, char_literal322_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Java.g:862:9: 'continue' ( IDENTIFIER )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(862, 9);
				string_literal323=(IToken)Match(input,CONTINUE,Follow._CONTINUE_in_statement4574); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal323_tree = (object)adaptor.Create(string_literal323);
				adaptor.AddChild(root_0, string_literal323_tree);
				}
				DebugLocation(863, 13);
				// Java.g:863:13: ( IDENTIFIER )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==IDENTIFIER))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:863:14: IDENTIFIER
					{
					DebugLocation(863, 14);
					IDENTIFIER324=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4589); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER324_tree = (object)adaptor.Create(IDENTIFIER324);
					adaptor.AddChild(root_0, IDENTIFIER324_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(864, 16);
				char_literal325=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4606); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal325_tree = (object)adaptor.Create(char_literal325);
				adaptor.AddChild(root_0, char_literal325_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Java.g:865:9: expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(865, 9);
				PushFollow(Follow._expression_in_statement4616);
				expression326=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression326.Tree);
				DebugLocation(865, 21);
				char_literal327=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4619); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal327_tree = (object)adaptor.Create(char_literal327);
				adaptor.AddChild(root_0, char_literal327_tree);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Java.g:866:9: IDENTIFIER ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(866, 9);
				IDENTIFIER328=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4634); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER328_tree = (object)adaptor.Create(IDENTIFIER328);
				adaptor.AddChild(root_0, IDENTIFIER328_tree);
				}
				DebugLocation(866, 20);
				char_literal329=(IToken)Match(input,COLON,Follow._COLON_in_statement4636); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal329_tree = (object)adaptor.Create(char_literal329);
				adaptor.AddChild(root_0, char_literal329_tree);
				}
				DebugLocation(866, 24);
				PushFollow(Follow._statement_in_statement4638);
				statement330=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement330.Tree);

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Java.g:867:9: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(867, 9);
				char_literal331=(IToken)Match(input,SEMI,Follow._SEMI_in_statement4648); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal331_tree = (object)adaptor.Create(char_literal331);
				adaptor.AddChild(root_0, char_literal331_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 58);
			LeaveRule("statement", 58);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 58, statement_StartIndex); }

		}
		DebugLocation(869, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_switchBlockStatementGroups();
	partial void LeaveRule_switchBlockStatementGroups();

	// $ANTLR start "switchBlockStatementGroups"
	// Java.g:871:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
	[GrammarRule("switchBlockStatementGroups")]
	private AstParserRuleReturnScope<object, IToken> switchBlockStatementGroups()
	{
		EnterRule_switchBlockStatementGroups();
		EnterRule("switchBlockStatementGroups", 59);
		TraceIn("switchBlockStatementGroups", 59);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchBlockStatementGroups_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> switchBlockStatementGroup332 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchBlockStatementGroups");
		DebugLocation(871, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// Java.g:872:5: ( ( switchBlockStatementGroup )* )
			DebugEnterAlt(1);
			// Java.g:872:9: ( switchBlockStatementGroup )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(872, 9);
			// Java.g:872:9: ( switchBlockStatementGroup )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==CASE||LA99_0==DEFAULT))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:872:10: switchBlockStatementGroup
					{
					DebugLocation(872, 10);
					PushFollow(Follow._switchBlockStatementGroup_in_switchBlockStatementGroups4670);
					switchBlockStatementGroup332=switchBlockStatementGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switchBlockStatementGroup332.Tree);

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchBlockStatementGroups", 59);
			LeaveRule("switchBlockStatementGroups", 59);
			LeaveRule_switchBlockStatementGroups();
			if (state.backtracking > 0) { Memoize(input, 59, switchBlockStatementGroups_StartIndex); }

		}
		DebugLocation(873, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockStatementGroups"); }
		return retval;

	}
	// $ANTLR end "switchBlockStatementGroups"

	partial void EnterRule_switchBlockStatementGroup();
	partial void LeaveRule_switchBlockStatementGroup();

	// $ANTLR start "switchBlockStatementGroup"
	// Java.g:875:1: switchBlockStatementGroup : switchLabel ( blockStatement )* ;
	[GrammarRule("switchBlockStatementGroup")]
	private AstParserRuleReturnScope<object, IToken> switchBlockStatementGroup()
	{
		EnterRule_switchBlockStatementGroup();
		EnterRule("switchBlockStatementGroup", 60);
		TraceIn("switchBlockStatementGroup", 60);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchBlockStatementGroup_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> switchLabel333 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> blockStatement334 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchBlockStatementGroup");
		DebugLocation(875, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// Java.g:876:5: ( switchLabel ( blockStatement )* )
			DebugEnterAlt(1);
			// Java.g:877:9: switchLabel ( blockStatement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(877, 9);
			PushFollow(Follow._switchLabel_in_switchBlockStatementGroup4699);
			switchLabel333=switchLabel();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, switchLabel333.Tree);
			DebugLocation(878, 9);
			// Java.g:878:9: ( blockStatement )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==ABSTRACT||(LA100_0>=ASSERT && LA100_0<=BANG)||(LA100_0>=BOOLEAN && LA100_0<=BYTE)||(LA100_0>=CHAR && LA100_0<=CLASS)||LA100_0==CONTINUE||LA100_0==DO||(LA100_0>=DOUBLE && LA100_0<=DOUBLELITERAL)||LA100_0==ENUM||(LA100_0>=FALSE && LA100_0<=FINAL)||(LA100_0>=FLOAT && LA100_0<=FOR)||(LA100_0>=IDENTIFIER && LA100_0<=IF)||(LA100_0>=INT && LA100_0<=INTLITERAL)||LA100_0==LBRACE||(LA100_0>=LONG && LA100_0<=LT)||(LA100_0>=MONKEYS_AT && LA100_0<=NULL)||LA100_0==PLUS||(LA100_0>=PLUSPLUS && LA100_0<=PUBLIC)||LA100_0==RETURN||(LA100_0>=SEMI && LA100_0<=SHORT)||(LA100_0>=STATIC && LA100_0<=SUB)||(LA100_0>=SUBSUB && LA100_0<=SYNCHRONIZED)||(LA100_0>=THIS && LA100_0<=THROW)||(LA100_0>=TILDE && LA100_0<=WHILE)))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:878:10: blockStatement
					{
					DebugLocation(878, 10);
					PushFollow(Follow._blockStatement_in_switchBlockStatementGroup4710);
					blockStatement334=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement334.Tree);

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchBlockStatementGroup", 60);
			LeaveRule("switchBlockStatementGroup", 60);
			LeaveRule_switchBlockStatementGroup();
			if (state.backtracking > 0) { Memoize(input, 60, switchBlockStatementGroup_StartIndex); }

		}
		DebugLocation(880, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockStatementGroup"); }
		return retval;

	}
	// $ANTLR end "switchBlockStatementGroup"

	partial void EnterRule_switchLabel();
	partial void LeaveRule_switchLabel();

	// $ANTLR start "switchLabel"
	// Java.g:882:1: switchLabel : ( 'case' expression ':' | 'default' ':' );
	[GrammarRule("switchLabel")]
	private AstParserRuleReturnScope<object, IToken> switchLabel()
	{
		EnterRule_switchLabel();
		EnterRule("switchLabel", 61);
		TraceIn("switchLabel", 61);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int switchLabel_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal335 = default(IToken);
		IToken char_literal337 = default(IToken);
		IToken string_literal338 = default(IToken);
		IToken char_literal339 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression336 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal335_tree = default(object);
		object char_literal337_tree = default(object);
		object string_literal338_tree = default(object);
		object char_literal339_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "switchLabel");
		DebugLocation(882, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// Java.g:883:5: ( 'case' expression ':' | 'default' ':' )
			int alt101=2;
			try { DebugEnterDecision(101, false);
			int LA101_0 = input.LA(1);

			if ((LA101_0==CASE))
			{
				alt101 = 1;
			}
			else if ((LA101_0==DEFAULT))
			{
				alt101 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:883:9: 'case' expression ':'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(883, 9);
				string_literal335=(IToken)Match(input,CASE,Follow._CASE_in_switchLabel4741); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal335_tree = (object)adaptor.Create(string_literal335);
				adaptor.AddChild(root_0, string_literal335_tree);
				}
				DebugLocation(883, 16);
				PushFollow(Follow._expression_in_switchLabel4743);
				expression336=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression336.Tree);
				DebugLocation(883, 27);
				char_literal337=(IToken)Match(input,COLON,Follow._COLON_in_switchLabel4745); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal337_tree = (object)adaptor.Create(char_literal337);
				adaptor.AddChild(root_0, char_literal337_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:884:9: 'default' ':'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(884, 9);
				string_literal338=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_switchLabel4755); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal338_tree = (object)adaptor.Create(string_literal338);
				adaptor.AddChild(root_0, string_literal338_tree);
				}
				DebugLocation(884, 19);
				char_literal339=(IToken)Match(input,COLON,Follow._COLON_in_switchLabel4757); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal339_tree = (object)adaptor.Create(char_literal339);
				adaptor.AddChild(root_0, char_literal339_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchLabel", 61);
			LeaveRule("switchLabel", 61);
			LeaveRule_switchLabel();
			if (state.backtracking > 0) { Memoize(input, 61, switchLabel_StartIndex); }

		}
		DebugLocation(885, 4);
		} finally { DebugExitRule(GrammarFileName, "switchLabel"); }
		return retval;

	}
	// $ANTLR end "switchLabel"

	partial void EnterRule_trystatement();
	partial void LeaveRule_trystatement();

	// $ANTLR start "trystatement"
	// Java.g:888:1: trystatement : ( 'try' block ( catches 'finally' block | catches | 'finally' block ) | tryWithResourcesStatement );
	[GrammarRule("trystatement")]
	private AstParserRuleReturnScope<object, IToken> trystatement()
	{
		EnterRule_trystatement();
		EnterRule("trystatement", 62);
		TraceIn("trystatement", 62);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int trystatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal340 = default(IToken);
		IToken string_literal343 = default(IToken);
		IToken string_literal346 = default(IToken);
		AstParserRuleReturnScope<object, IToken> block341 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catches342 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block344 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catches345 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block347 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> tryWithResourcesStatement348 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal340_tree = default(object);
		object string_literal343_tree = default(object);
		object string_literal346_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "trystatement");
		DebugLocation(888, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// Java.g:889:5: ( 'try' block ( catches 'finally' block | catches | 'finally' block ) | tryWithResourcesStatement )
			int alt103=2;
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==TRY))
			{
				int LA103_1 = input.LA(2);

				if ((LA103_1==LBRACE))
				{
					alt103 = 1;
				}
				else if ((LA103_1==LPAREN))
				{
					alt103 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:889:9: 'try' block ( catches 'finally' block | catches | 'finally' block )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(889, 9);
				string_literal340=(IToken)Match(input,TRY,Follow._TRY_in_trystatement4778); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal340_tree = (object)adaptor.Create(string_literal340);
				adaptor.AddChild(root_0, string_literal340_tree);
				}
				DebugLocation(889, 15);
				PushFollow(Follow._block_in_trystatement4780);
				block341=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block341.Tree);
				DebugLocation(890, 9);
				// Java.g:890:9: ( catches 'finally' block | catches | 'finally' block )
				int alt102=3;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==CATCH))
				{
					int LA102_1 = input.LA(2);

					if ((EvaluatePredicate(synpred153_Java_fragment)))
					{
						alt102 = 1;
					}
					else if ((EvaluatePredicate(synpred154_Java_fragment)))
					{
						alt102 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 102, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA102_0==FINALLY))
				{
					alt102 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:890:13: catches 'finally' block
					{
					DebugLocation(890, 13);
					PushFollow(Follow._catches_in_trystatement4794);
					catches342=catches();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, catches342.Tree);
					DebugLocation(890, 21);
					string_literal343=(IToken)Match(input,FINALLY,Follow._FINALLY_in_trystatement4796); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal343_tree = (object)adaptor.Create(string_literal343);
					adaptor.AddChild(root_0, string_literal343_tree);
					}
					DebugLocation(890, 31);
					PushFollow(Follow._block_in_trystatement4798);
					block344=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block344.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:891:13: catches
					{
					DebugLocation(891, 13);
					PushFollow(Follow._catches_in_trystatement4812);
					catches345=catches();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, catches345.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:892:13: 'finally' block
					{
					DebugLocation(892, 13);
					string_literal346=(IToken)Match(input,FINALLY,Follow._FINALLY_in_trystatement4826); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal346_tree = (object)adaptor.Create(string_literal346);
					adaptor.AddChild(root_0, string_literal346_tree);
					}
					DebugLocation(892, 23);
					PushFollow(Follow._block_in_trystatement4828);
					block347=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block347.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(102); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:894:9: tryWithResourcesStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(894, 9);
				PushFollow(Follow._tryWithResourcesStatement_in_trystatement4848);
				tryWithResourcesStatement348=tryWithResourcesStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tryWithResourcesStatement348.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("trystatement", 62);
			LeaveRule("trystatement", 62);
			LeaveRule_trystatement();
			if (state.backtracking > 0) { Memoize(input, 62, trystatement_StartIndex); }

		}
		DebugLocation(895, 5);
		} finally { DebugExitRule(GrammarFileName, "trystatement"); }
		return retval;

	}
	// $ANTLR end "trystatement"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();

	// $ANTLR start "catches"
	// Java.g:897:1: catches : catchClause ( catchClause )* ;
	[GrammarRule("catches")]
	private AstParserRuleReturnScope<object, IToken> catches()
	{
		EnterRule_catches();
		EnterRule("catches", 63);
		TraceIn("catches", 63);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catches_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> catchClause349 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catchClause350 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(897, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// Java.g:898:5: ( catchClause ( catchClause )* )
			DebugEnterAlt(1);
			// Java.g:898:9: catchClause ( catchClause )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(898, 9);
			PushFollow(Follow._catchClause_in_catches4869);
			catchClause349=catchClause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, catchClause349.Tree);
			DebugLocation(899, 9);
			// Java.g:899:9: ( catchClause )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==CATCH))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:899:10: catchClause
					{
					DebugLocation(899, 10);
					PushFollow(Follow._catchClause_in_catches4880);
					catchClause350=catchClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, catchClause350.Tree);

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catches", 63);
			LeaveRule("catches", 63);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 63, catches_StartIndex); }

		}
		DebugLocation(901, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return retval;

	}
	// $ANTLR end "catches"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();

	// $ANTLR start "catchClause"
	// Java.g:903:1: catchClause : 'catch' '(' formalParameter ')' block ;
	[GrammarRule("catchClause")]
	private AstParserRuleReturnScope<object, IToken> catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 64);
		TraceIn("catchClause", 64);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catchClause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal351 = default(IToken);
		IToken char_literal352 = default(IToken);
		IToken char_literal354 = default(IToken);
		AstParserRuleReturnScope<object, IToken> formalParameter353 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block355 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal351_tree = default(object);
		object char_literal352_tree = default(object);
		object char_literal354_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(903, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// Java.g:904:5: ( 'catch' '(' formalParameter ')' block )
			DebugEnterAlt(1);
			// Java.g:904:9: 'catch' '(' formalParameter ')' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(904, 9);
			string_literal351=(IToken)Match(input,CATCH,Follow._CATCH_in_catchClause4911); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal351_tree = (object)adaptor.Create(string_literal351);
			adaptor.AddChild(root_0, string_literal351_tree);
			}
			DebugLocation(904, 17);
			char_literal352=(IToken)Match(input,LPAREN,Follow._LPAREN_in_catchClause4913); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal352_tree = (object)adaptor.Create(char_literal352);
			adaptor.AddChild(root_0, char_literal352_tree);
			}
			DebugLocation(904, 21);
			PushFollow(Follow._formalParameter_in_catchClause4915);
			formalParameter353=formalParameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameter353.Tree);
			DebugLocation(905, 9);
			char_literal354=(IToken)Match(input,RPAREN,Follow._RPAREN_in_catchClause4925); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal354_tree = (object)adaptor.Create(char_literal354);
			adaptor.AddChild(root_0, char_literal354_tree);
			}
			DebugLocation(905, 13);
			PushFollow(Follow._block_in_catchClause4927);
			block355=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block355.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 64);
			LeaveRule("catchClause", 64);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 64, catchClause_StartIndex); }

		}
		DebugLocation(906, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_formalParameter();
	partial void LeaveRule_formalParameter();

	// $ANTLR start "formalParameter"
	// Java.g:908:1: formalParameter : ( variableModifiers catchType IDENTIFIER ( '[' ']' )* | catchType IDENTIFIER ( '[' ']' )* );
	[GrammarRule("formalParameter")]
	private AstParserRuleReturnScope<object, IToken> formalParameter()
	{
		EnterRule_formalParameter();
		EnterRule("formalParameter", 65);
		TraceIn("formalParameter", 65);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int formalParameter_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER358 = default(IToken);
		IToken char_literal359 = default(IToken);
		IToken char_literal360 = default(IToken);
		IToken IDENTIFIER362 = default(IToken);
		IToken char_literal363 = default(IToken);
		IToken char_literal364 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers356 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catchType357 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catchType361 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER358_tree = default(object);
		object char_literal359_tree = default(object);
		object char_literal360_tree = default(object);
		object IDENTIFIER362_tree = default(object);
		object char_literal363_tree = default(object);
		object char_literal364_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formalParameter");
		DebugLocation(908, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// Java.g:909:5: ( variableModifiers catchType IDENTIFIER ( '[' ']' )* | catchType IDENTIFIER ( '[' ']' )* )
			int alt107=2;
			try { DebugEnterDecision(107, false);
			switch (input.LA(1))
			{
			case FINAL:
			case MONKEYS_AT:
				{
				alt107 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA107_3 = input.LA(2);

				if ((EvaluatePredicate(synpred158_Java_fragment)))
				{
					alt107 = 1;
				}
				else if ((true))
				{
					alt107 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA107_4 = input.LA(2);

				if ((EvaluatePredicate(synpred158_Java_fragment)))
				{
					alt107 = 1;
				}
				else if ((true))
				{
					alt107 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:909:9: variableModifiers catchType IDENTIFIER ( '[' ']' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(909, 9);
				PushFollow(Follow._variableModifiers_in_formalParameter4948);
				variableModifiers356=variableModifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers356.Tree);
				DebugLocation(909, 27);
				PushFollow(Follow._catchType_in_formalParameter4950);
				catchType357=catchType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catchType357.Tree);
				DebugLocation(909, 37);
				IDENTIFIER358=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_formalParameter4952); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER358_tree = (object)adaptor.Create(IDENTIFIER358);
				adaptor.AddChild(root_0, IDENTIFIER358_tree);
				}
				DebugLocation(910, 9);
				// Java.g:910:9: ( '[' ']' )*
				try { DebugEnterSubRule(105);
				while (true)
				{
					int alt105=2;
					try { DebugEnterDecision(105, false);
					int LA105_0 = input.LA(1);

					if ((LA105_0==LBRACKET))
					{
						alt105 = 1;
					}


					} finally { DebugExitDecision(105); }
					switch ( alt105 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:910:10: '[' ']'
						{
						DebugLocation(910, 10);
						char_literal359=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_formalParameter4963); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal359_tree = (object)adaptor.Create(char_literal359);
						adaptor.AddChild(root_0, char_literal359_tree);
						}
						DebugLocation(910, 14);
						char_literal360=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_formalParameter4965); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal360_tree = (object)adaptor.Create(char_literal360);
						adaptor.AddChild(root_0, char_literal360_tree);
						}

						}
						break;

					default:
						goto loop105;
					}
				}

				loop105:
					;

				} finally { DebugExitSubRule(105); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:912:9: catchType IDENTIFIER ( '[' ']' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(912, 9);
				PushFollow(Follow._catchType_in_formalParameter4986);
				catchType361=catchType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catchType361.Tree);
				DebugLocation(912, 19);
				IDENTIFIER362=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_formalParameter4988); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER362_tree = (object)adaptor.Create(IDENTIFIER362);
				adaptor.AddChild(root_0, IDENTIFIER362_tree);
				}
				DebugLocation(913, 9);
				// Java.g:913:9: ( '[' ']' )*
				try { DebugEnterSubRule(106);
				while (true)
				{
					int alt106=2;
					try { DebugEnterDecision(106, false);
					int LA106_0 = input.LA(1);

					if ((LA106_0==LBRACKET))
					{
						alt106 = 1;
					}


					} finally { DebugExitDecision(106); }
					switch ( alt106 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:913:10: '[' ']'
						{
						DebugLocation(913, 10);
						char_literal363=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_formalParameter4999); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal363_tree = (object)adaptor.Create(char_literal363);
						adaptor.AddChild(root_0, char_literal363_tree);
						}
						DebugLocation(913, 14);
						char_literal364=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_formalParameter5001); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal364_tree = (object)adaptor.Create(char_literal364);
						adaptor.AddChild(root_0, char_literal364_tree);
						}

						}
						break;

					default:
						goto loop106;
					}
				}

				loop106:
					;

				} finally { DebugExitSubRule(106); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameter", 65);
			LeaveRule("formalParameter", 65);
			LeaveRule_formalParameter();
			if (state.backtracking > 0) { Memoize(input, 65, formalParameter_StartIndex); }

		}
		DebugLocation(915, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameter"); }
		return retval;

	}
	// $ANTLR end "formalParameter"

	partial void EnterRule_catchType();
	partial void LeaveRule_catchType();

	// $ANTLR start "catchType"
	// Java.g:917:1: catchType : type ( '|' type )* ;
	[GrammarRule("catchType")]
	private AstParserRuleReturnScope<object, IToken> catchType()
	{
		EnterRule_catchType();
		EnterRule("catchType", 66);
		TraceIn("catchType", 66);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int catchType_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal366 = default(IToken);
		AstParserRuleReturnScope<object, IToken> type365 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type367 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal366_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "catchType");
		DebugLocation(917, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// Java.g:918:5: ( type ( '|' type )* )
			DebugEnterAlt(1);
			// Java.g:918:9: type ( '|' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(918, 9);
			PushFollow(Follow._type_in_catchType5031);
			type365=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type365.Tree);
			DebugLocation(919, 9);
			// Java.g:919:9: ( '|' type )*
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, false);
				int LA108_0 = input.LA(1);

				if ((LA108_0==BAR))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch ( alt108 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:919:10: '|' type
					{
					DebugLocation(919, 10);
					char_literal366=(IToken)Match(input,BAR,Follow._BAR_in_catchType5042); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal366_tree = (object)adaptor.Create(char_literal366);
					adaptor.AddChild(root_0, char_literal366_tree);
					}
					DebugLocation(919, 14);
					PushFollow(Follow._type_in_catchType5044);
					type367=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type367.Tree);

					}
					break;

				default:
					goto loop108;
				}
			}

			loop108:
				;

			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchType", 66);
			LeaveRule("catchType", 66);
			LeaveRule_catchType();
			if (state.backtracking > 0) { Memoize(input, 66, catchType_StartIndex); }

		}
		DebugLocation(921, 4);
		} finally { DebugExitRule(GrammarFileName, "catchType"); }
		return retval;

	}
	// $ANTLR end "catchType"

	partial void EnterRule_tryWithResourcesStatement();
	partial void LeaveRule_tryWithResourcesStatement();

	// $ANTLR start "tryWithResourcesStatement"
	// Java.g:923:1: tryWithResourcesStatement : 'try' resourceSpecification ( block catches 'finally' block | block 'filly' block | block catches | block ) ;
	[GrammarRule("tryWithResourcesStatement")]
	private AstParserRuleReturnScope<object, IToken> tryWithResourcesStatement()
	{
		EnterRule_tryWithResourcesStatement();
		EnterRule("tryWithResourcesStatement", 67);
		TraceIn("tryWithResourcesStatement", 67);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int tryWithResourcesStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal368 = default(IToken);
		IToken string_literal372 = default(IToken);
		IToken string_literal375 = default(IToken);
		AstParserRuleReturnScope<object, IToken> resourceSpecification369 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block370 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catches371 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block373 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block374 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block376 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block377 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> catches378 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block379 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal368_tree = default(object);
		object string_literal372_tree = default(object);
		object string_literal375_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tryWithResourcesStatement");
		DebugLocation(923, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// Java.g:924:5: ( 'try' resourceSpecification ( block catches 'finally' block | block 'filly' block | block catches | block ) )
			DebugEnterAlt(1);
			// Java.g:924:10: 'try' resourceSpecification ( block catches 'finally' block | block 'filly' block | block catches | block )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(924, 10);
			string_literal368=(IToken)Match(input,TRY,Follow._TRY_in_tryWithResourcesStatement5075); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal368_tree = (object)adaptor.Create(string_literal368);
			adaptor.AddChild(root_0, string_literal368_tree);
			}
			DebugLocation(924, 16);
			PushFollow(Follow._resourceSpecification_in_tryWithResourcesStatement5077);
			resourceSpecification369=resourceSpecification();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, resourceSpecification369.Tree);
			DebugLocation(925, 10);
			// Java.g:925:10: ( block catches 'finally' block | block 'filly' block | block catches | block )
			int alt109=4;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			int LA109_0 = input.LA(1);

			if ((LA109_0==LBRACE))
			{
				int LA109_1 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt109 = 1;
				}
				else if ((EvaluatePredicate(synpred162_Java_fragment)))
				{
					alt109 = 2;
				}
				else if ((EvaluatePredicate(synpred163_Java_fragment)))
				{
					alt109 = 3;
				}
				else if ((true))
				{
					alt109 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 109, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 109, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:925:14: block catches 'finally' block
				{
				DebugLocation(925, 14);
				PushFollow(Follow._block_in_tryWithResourcesStatement5092);
				block370=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block370.Tree);
				DebugLocation(925, 20);
				PushFollow(Follow._catches_in_tryWithResourcesStatement5094);
				catches371=catches();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catches371.Tree);
				DebugLocation(925, 28);
				string_literal372=(IToken)Match(input,FINALLY,Follow._FINALLY_in_tryWithResourcesStatement5096); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal372_tree = (object)adaptor.Create(string_literal372);
				adaptor.AddChild(root_0, string_literal372_tree);
				}
				DebugLocation(925, 38);
				PushFollow(Follow._block_in_tryWithResourcesStatement5098);
				block373=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block373.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:926:14: block 'filly' block
				{
				DebugLocation(926, 14);
				PushFollow(Follow._block_in_tryWithResourcesStatement5113);
				block374=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block374.Tree);
				DebugLocation(926, 20);
				string_literal375=(IToken)Match(input,119,Follow._119_in_tryWithResourcesStatement5115); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal375_tree = (object)adaptor.Create(string_literal375);
				adaptor.AddChild(root_0, string_literal375_tree);
				}
				DebugLocation(926, 28);
				PushFollow(Follow._block_in_tryWithResourcesStatement5117);
				block376=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block376.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:927:14: block catches
				{
				DebugLocation(927, 14);
				PushFollow(Follow._block_in_tryWithResourcesStatement5132);
				block377=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block377.Tree);
				DebugLocation(927, 20);
				PushFollow(Follow._catches_in_tryWithResourcesStatement5134);
				catches378=catches();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catches378.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:928:14: block
				{
				DebugLocation(928, 14);
				PushFollow(Follow._block_in_tryWithResourcesStatement5149);
				block379=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block379.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryWithResourcesStatement", 67);
			LeaveRule("tryWithResourcesStatement", 67);
			LeaveRule_tryWithResourcesStatement();
			if (state.backtracking > 0) { Memoize(input, 67, tryWithResourcesStatement_StartIndex); }

		}
		DebugLocation(930, 4);
		} finally { DebugExitRule(GrammarFileName, "tryWithResourcesStatement"); }
		return retval;

	}
	// $ANTLR end "tryWithResourcesStatement"

	partial void EnterRule_resourceSpecification();
	partial void LeaveRule_resourceSpecification();

	// $ANTLR start "resourceSpecification"
	// Java.g:932:1: resourceSpecification : '(' resources ( ';' ')' | ')' ) ;
	[GrammarRule("resourceSpecification")]
	private AstParserRuleReturnScope<object, IToken> resourceSpecification()
	{
		EnterRule_resourceSpecification();
		EnterRule("resourceSpecification", 68);
		TraceIn("resourceSpecification", 68);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int resourceSpecification_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal380 = default(IToken);
		IToken char_literal382 = default(IToken);
		IToken char_literal383 = default(IToken);
		IToken char_literal384 = default(IToken);
		AstParserRuleReturnScope<object, IToken> resources381 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal380_tree = default(object);
		object char_literal382_tree = default(object);
		object char_literal383_tree = default(object);
		object char_literal384_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "resourceSpecification");
		DebugLocation(932, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// Java.g:933:5: ( '(' resources ( ';' ')' | ')' ) )
			DebugEnterAlt(1);
			// Java.g:933:10: '(' resources ( ';' ')' | ')' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(933, 10);
			char_literal380=(IToken)Match(input,LPAREN,Follow._LPAREN_in_resourceSpecification5180); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal380_tree = (object)adaptor.Create(char_literal380);
			adaptor.AddChild(root_0, char_literal380_tree);
			}
			DebugLocation(933, 14);
			PushFollow(Follow._resources_in_resourceSpecification5182);
			resources381=resources();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, resources381.Tree);
			DebugLocation(934, 11);
			// Java.g:934:11: ( ';' ')' | ')' )
			int alt110=2;
			try { DebugEnterSubRule(110);
			try { DebugEnterDecision(110, false);
			int LA110_0 = input.LA(1);

			if ((LA110_0==SEMI))
			{
				alt110 = 1;
			}
			else if ((LA110_0==RPAREN))
			{
				alt110 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:934:14: ';' ')'
				{
				DebugLocation(934, 14);
				char_literal382=(IToken)Match(input,SEMI,Follow._SEMI_in_resourceSpecification5197); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal382_tree = (object)adaptor.Create(char_literal382);
				adaptor.AddChild(root_0, char_literal382_tree);
				}
				DebugLocation(934, 18);
				char_literal383=(IToken)Match(input,RPAREN,Follow._RPAREN_in_resourceSpecification5199); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal383_tree = (object)adaptor.Create(char_literal383);
				adaptor.AddChild(root_0, char_literal383_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:935:15: ')'
				{
				DebugLocation(935, 15);
				char_literal384=(IToken)Match(input,RPAREN,Follow._RPAREN_in_resourceSpecification5215); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal384_tree = (object)adaptor.Create(char_literal384);
				adaptor.AddChild(root_0, char_literal384_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(110); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("resourceSpecification", 68);
			LeaveRule("resourceSpecification", 68);
			LeaveRule_resourceSpecification();
			if (state.backtracking > 0) { Memoize(input, 68, resourceSpecification_StartIndex); }

		}
		DebugLocation(937, 4);
		} finally { DebugExitRule(GrammarFileName, "resourceSpecification"); }
		return retval;

	}
	// $ANTLR end "resourceSpecification"

	partial void EnterRule_resources();
	partial void LeaveRule_resources();

	// $ANTLR start "resources"
	// Java.g:939:1: resources : ( resource | resource ( ';' resource )* );
	[GrammarRule("resources")]
	private AstParserRuleReturnScope<object, IToken> resources()
	{
		EnterRule_resources();
		EnterRule("resources", 69);
		TraceIn("resources", 69);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int resources_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal387 = default(IToken);
		AstParserRuleReturnScope<object, IToken> resource385 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> resource386 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> resource388 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal387_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "resources");
		DebugLocation(939, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// Java.g:940:5: ( resource | resource ( ';' resource )* )
			int alt112=2;
			try { DebugEnterDecision(112, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA112_1 = input.LA(2);

				if ((EvaluatePredicate(synpred165_Java_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 112, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MONKEYS_AT:
				{
				int LA112_2 = input.LA(2);

				if ((EvaluatePredicate(synpred165_Java_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 112, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA112_3 = input.LA(2);

				if ((EvaluatePredicate(synpred165_Java_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 112, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA112_4 = input.LA(2);

				if ((EvaluatePredicate(synpred165_Java_fragment)))
				{
					alt112 = 1;
				}
				else if ((true))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 112, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:940:10: resource
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(940, 10);
				PushFollow(Follow._resource_in_resources5247);
				resource385=resource();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, resource385.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:941:10: resource ( ';' resource )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(941, 10);
				PushFollow(Follow._resource_in_resources5258);
				resource386=resource();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, resource386.Tree);
				DebugLocation(942, 10);
				// Java.g:942:10: ( ';' resource )*
				try { DebugEnterSubRule(111);
				while (true)
				{
					int alt111=2;
					try { DebugEnterDecision(111, false);
					int LA111_0 = input.LA(1);

					if ((LA111_0==SEMI))
					{
						int LA111_1 = input.LA(2);

						if ((LA111_1==BOOLEAN||LA111_1==BYTE||LA111_1==CHAR||LA111_1==DOUBLE||LA111_1==FINAL||LA111_1==FLOAT||LA111_1==IDENTIFIER||LA111_1==INT||LA111_1==LONG||LA111_1==MONKEYS_AT||LA111_1==SHORT))
						{
							alt111 = 1;
						}


					}


					} finally { DebugExitDecision(111); }
					switch ( alt111 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:942:14: ';' resource
						{
						DebugLocation(942, 14);
						char_literal387=(IToken)Match(input,SEMI,Follow._SEMI_in_resources5274); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal387_tree = (object)adaptor.Create(char_literal387);
						adaptor.AddChild(root_0, char_literal387_tree);
						}
						DebugLocation(942, 18);
						PushFollow(Follow._resource_in_resources5276);
						resource388=resource();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, resource388.Tree);

						}
						break;

					default:
						goto loop111;
					}
				}

				loop111:
					;

				} finally { DebugExitSubRule(111); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("resources", 69);
			LeaveRule("resources", 69);
			LeaveRule_resources();
			if (state.backtracking > 0) { Memoize(input, 69, resources_StartIndex); }

		}
		DebugLocation(944, 4);
		} finally { DebugExitRule(GrammarFileName, "resources"); }
		return retval;

	}
	// $ANTLR end "resources"

	partial void EnterRule_resource();
	partial void LeaveRule_resource();

	// $ANTLR start "resource"
	// Java.g:946:1: resource : ( variableModifiers type IDENTIFIER | type IDENTIFIER ) ( '[' ']' )* '=' expression ;
	[GrammarRule("resource")]
	private AstParserRuleReturnScope<object, IToken> resource()
	{
		EnterRule_resource();
		EnterRule("resource", 70);
		TraceIn("resource", 70);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int resource_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER391 = default(IToken);
		IToken IDENTIFIER393 = default(IToken);
		IToken char_literal394 = default(IToken);
		IToken char_literal395 = default(IToken);
		IToken char_literal396 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers389 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type390 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type392 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression397 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER391_tree = default(object);
		object IDENTIFIER393_tree = default(object);
		object char_literal394_tree = default(object);
		object char_literal395_tree = default(object);
		object char_literal396_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "resource");
		DebugLocation(946, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// Java.g:947:5: ( ( variableModifiers type IDENTIFIER | type IDENTIFIER ) ( '[' ']' )* '=' expression )
			DebugEnterAlt(1);
			// Java.g:947:10: ( variableModifiers type IDENTIFIER | type IDENTIFIER ) ( '[' ']' )* '=' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(947, 10);
			// Java.g:947:10: ( variableModifiers type IDENTIFIER | type IDENTIFIER )
			int alt113=2;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, false);
			switch (input.LA(1))
			{
			case FINAL:
			case MONKEYS_AT:
				{
				alt113 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA113_3 = input.LA(2);

				if ((EvaluatePredicate(synpred167_Java_fragment)))
				{
					alt113 = 1;
				}
				else if ((true))
				{
					alt113 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 113, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA113_4 = input.LA(2);

				if ((EvaluatePredicate(synpred167_Java_fragment)))
				{
					alt113 = 1;
				}
				else if ((true))
				{
					alt113 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 113, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 113, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:947:14: variableModifiers type IDENTIFIER
				{
				DebugLocation(947, 14);
				PushFollow(Follow._variableModifiers_in_resource5312);
				variableModifiers389=variableModifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers389.Tree);
				DebugLocation(947, 32);
				PushFollow(Follow._type_in_resource5314);
				type390=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type390.Tree);
				DebugLocation(947, 37);
				IDENTIFIER391=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_resource5316); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER391_tree = (object)adaptor.Create(IDENTIFIER391);
				adaptor.AddChild(root_0, IDENTIFIER391_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:948:14: type IDENTIFIER
				{
				DebugLocation(948, 14);
				PushFollow(Follow._type_in_resource5331);
				type392=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type392.Tree);
				DebugLocation(948, 19);
				IDENTIFIER393=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_resource5333); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER393_tree = (object)adaptor.Create(IDENTIFIER393);
				adaptor.AddChild(root_0, IDENTIFIER393_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(113); }

			DebugLocation(950, 10);
			// Java.g:950:10: ( '[' ']' )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==LBRACKET))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:950:14: '[' ']'
					{
					DebugLocation(950, 14);
					char_literal394=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_resource5359); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal394_tree = (object)adaptor.Create(char_literal394);
					adaptor.AddChild(root_0, char_literal394_tree);
					}
					DebugLocation(950, 18);
					char_literal395=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_resource5361); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal395_tree = (object)adaptor.Create(char_literal395);
					adaptor.AddChild(root_0, char_literal395_tree);
					}

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }

			DebugLocation(952, 10);
			char_literal396=(IToken)Match(input,EQ,Follow._EQ_in_resource5384); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal396_tree = (object)adaptor.Create(char_literal396);
			adaptor.AddChild(root_0, char_literal396_tree);
			}
			DebugLocation(952, 14);
			PushFollow(Follow._expression_in_resource5386);
			expression397=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression397.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("resource", 70);
			LeaveRule("resource", 70);
			LeaveRule_resource();
			if (state.backtracking > 0) { Memoize(input, 70, resource_StartIndex); }

		}
		DebugLocation(953, 4);
		} finally { DebugExitRule(GrammarFileName, "resource"); }
		return retval;

	}
	// $ANTLR end "resource"

	partial void EnterRule_forstatement();
	partial void LeaveRule_forstatement();

	// $ANTLR start "forstatement"
	// Java.g:955:1: forstatement : ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement );
	[GrammarRule("forstatement")]
	private AstParserRuleReturnScope<object, IToken> forstatement()
	{
		EnterRule_forstatement();
		EnterRule("forstatement", 71);
		TraceIn("forstatement", 71);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forstatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal398 = default(IToken);
		IToken char_literal399 = default(IToken);
		IToken IDENTIFIER402 = default(IToken);
		IToken char_literal403 = default(IToken);
		IToken char_literal405 = default(IToken);
		IToken string_literal407 = default(IToken);
		IToken char_literal408 = default(IToken);
		IToken char_literal410 = default(IToken);
		IToken char_literal412 = default(IToken);
		IToken char_literal414 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers400 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type401 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression404 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement406 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forInit409 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression411 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expressionList413 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement415 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal398_tree = default(object);
		object char_literal399_tree = default(object);
		object IDENTIFIER402_tree = default(object);
		object char_literal403_tree = default(object);
		object char_literal405_tree = default(object);
		object string_literal407_tree = default(object);
		object char_literal408_tree = default(object);
		object char_literal410_tree = default(object);
		object char_literal412_tree = default(object);
		object char_literal414_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forstatement");
		DebugLocation(955, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// Java.g:956:5: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement )
			int alt118=2;
			try { DebugEnterDecision(118, false);
			int LA118_0 = input.LA(1);

			if ((LA118_0==FOR))
			{
				int LA118_1 = input.LA(2);

				if ((EvaluatePredicate(synpred169_Java_fragment)))
				{
					alt118 = 1;
				}
				else if ((true))
				{
					alt118 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 118, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 118, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:958:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(958, 9);
				string_literal398=(IToken)Match(input,FOR,Follow._FOR_in_forstatement5425); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal398_tree = (object)adaptor.Create(string_literal398);
				adaptor.AddChild(root_0, string_literal398_tree);
				}
				DebugLocation(958, 15);
				char_literal399=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forstatement5427); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal399_tree = (object)adaptor.Create(char_literal399);
				adaptor.AddChild(root_0, char_literal399_tree);
				}
				DebugLocation(958, 19);
				PushFollow(Follow._variableModifiers_in_forstatement5429);
				variableModifiers400=variableModifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers400.Tree);
				DebugLocation(958, 37);
				PushFollow(Follow._type_in_forstatement5431);
				type401=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type401.Tree);
				DebugLocation(958, 42);
				IDENTIFIER402=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_forstatement5433); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER402_tree = (object)adaptor.Create(IDENTIFIER402);
				adaptor.AddChild(root_0, IDENTIFIER402_tree);
				}
				DebugLocation(958, 53);
				char_literal403=(IToken)Match(input,COLON,Follow._COLON_in_forstatement5435); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal403_tree = (object)adaptor.Create(char_literal403);
				adaptor.AddChild(root_0, char_literal403_tree);
				}
				DebugLocation(959, 9);
				PushFollow(Follow._expression_in_forstatement5446);
				expression404=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression404.Tree);
				DebugLocation(959, 20);
				char_literal405=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forstatement5448); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal405_tree = (object)adaptor.Create(char_literal405);
				adaptor.AddChild(root_0, char_literal405_tree);
				}
				DebugLocation(959, 24);
				PushFollow(Follow._statement_in_forstatement5450);
				statement406=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement406.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:962:9: 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(962, 9);
				string_literal407=(IToken)Match(input,FOR,Follow._FOR_in_forstatement5482); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal407_tree = (object)adaptor.Create(string_literal407);
				adaptor.AddChild(root_0, string_literal407_tree);
				}
				DebugLocation(962, 15);
				char_literal408=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forstatement5484); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal408_tree = (object)adaptor.Create(char_literal408);
				adaptor.AddChild(root_0, char_literal408_tree);
				}
				DebugLocation(963, 17);
				// Java.g:963:17: ( forInit )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==BANG||LA115_0==BOOLEAN||LA115_0==BYTE||(LA115_0>=CHAR && LA115_0<=CHARLITERAL)||(LA115_0>=DOUBLE && LA115_0<=DOUBLELITERAL)||(LA115_0>=FALSE && LA115_0<=FINAL)||(LA115_0>=FLOAT && LA115_0<=FLOATLITERAL)||LA115_0==IDENTIFIER||LA115_0==INT||LA115_0==INTLITERAL||(LA115_0>=LONG && LA115_0<=LPAREN)||LA115_0==MONKEYS_AT||(LA115_0>=NEW && LA115_0<=NULL)||LA115_0==PLUS||LA115_0==PLUSPLUS||LA115_0==SHORT||(LA115_0>=STRINGLITERAL && LA115_0<=SUB)||(LA115_0>=SUBSUB && LA115_0<=SUPER)||LA115_0==THIS||LA115_0==TILDE||LA115_0==TRUE||LA115_0==VOID))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:963:18: forInit
					{
					DebugLocation(963, 18);
					PushFollow(Follow._forInit_in_forstatement5504);
					forInit409=forInit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, forInit409.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(964, 20);
				char_literal410=(IToken)Match(input,SEMI,Follow._SEMI_in_forstatement5525); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal410_tree = (object)adaptor.Create(char_literal410);
				adaptor.AddChild(root_0, char_literal410_tree);
				}
				DebugLocation(965, 17);
				// Java.g:965:17: ( expression )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==BANG||LA116_0==BOOLEAN||LA116_0==BYTE||(LA116_0>=CHAR && LA116_0<=CHARLITERAL)||(LA116_0>=DOUBLE && LA116_0<=DOUBLELITERAL)||LA116_0==FALSE||(LA116_0>=FLOAT && LA116_0<=FLOATLITERAL)||LA116_0==IDENTIFIER||LA116_0==INT||LA116_0==INTLITERAL||(LA116_0>=LONG && LA116_0<=LPAREN)||(LA116_0>=NEW && LA116_0<=NULL)||LA116_0==PLUS||LA116_0==PLUSPLUS||LA116_0==SHORT||(LA116_0>=STRINGLITERAL && LA116_0<=SUB)||(LA116_0>=SUBSUB && LA116_0<=SUPER)||LA116_0==THIS||LA116_0==TILDE||LA116_0==TRUE||LA116_0==VOID))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:965:18: expression
					{
					DebugLocation(965, 18);
					PushFollow(Follow._expression_in_forstatement5545);
					expression411=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression411.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(966, 20);
				char_literal412=(IToken)Match(input,SEMI,Follow._SEMI_in_forstatement5566); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal412_tree = (object)adaptor.Create(char_literal412);
				adaptor.AddChild(root_0, char_literal412_tree);
				}
				DebugLocation(967, 17);
				// Java.g:967:17: ( expressionList )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==BANG||LA117_0==BOOLEAN||LA117_0==BYTE||(LA117_0>=CHAR && LA117_0<=CHARLITERAL)||(LA117_0>=DOUBLE && LA117_0<=DOUBLELITERAL)||LA117_0==FALSE||(LA117_0>=FLOAT && LA117_0<=FLOATLITERAL)||LA117_0==IDENTIFIER||LA117_0==INT||LA117_0==INTLITERAL||(LA117_0>=LONG && LA117_0<=LPAREN)||(LA117_0>=NEW && LA117_0<=NULL)||LA117_0==PLUS||LA117_0==PLUSPLUS||LA117_0==SHORT||(LA117_0>=STRINGLITERAL && LA117_0<=SUB)||(LA117_0>=SUBSUB && LA117_0<=SUPER)||LA117_0==THIS||LA117_0==TILDE||LA117_0==TRUE||LA117_0==VOID))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:967:18: expressionList
					{
					DebugLocation(967, 18);
					PushFollow(Follow._expressionList_in_forstatement5586);
					expressionList413=expressionList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expressionList413.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(968, 20);
				char_literal414=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forstatement5607); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal414_tree = (object)adaptor.Create(char_literal414);
				adaptor.AddChild(root_0, char_literal414_tree);
				}
				DebugLocation(968, 24);
				PushFollow(Follow._statement_in_forstatement5609);
				statement415=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement415.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forstatement", 71);
			LeaveRule("forstatement", 71);
			LeaveRule_forstatement();
			if (state.backtracking > 0) { Memoize(input, 71, forstatement_StartIndex); }

		}
		DebugLocation(969, 4);
		} finally { DebugExitRule(GrammarFileName, "forstatement"); }
		return retval;

	}
	// $ANTLR end "forstatement"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();

	// $ANTLR start "forInit"
	// Java.g:971:1: forInit : ( localVariableDeclaration | expressionList );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<object, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 72);
		TraceIn("forInit", 72);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> localVariableDeclaration416 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expressionList417 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(971, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// Java.g:972:5: ( localVariableDeclaration | expressionList )
			int alt119=2;
			try { DebugEnterDecision(119, false);
			switch (input.LA(1))
			{
			case FINAL:
			case MONKEYS_AT:
				{
				alt119 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA119_3 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Java_fragment)))
				{
					alt119 = 1;
				}
				else if ((true))
				{
					alt119 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA119_4 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Java_fragment)))
				{
					alt119 = 1;
				}
				else if ((true))
				{
					alt119 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BANG:
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt119 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:972:9: localVariableDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(972, 9);
				PushFollow(Follow._localVariableDeclaration_in_forInit5629);
				localVariableDeclaration416=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclaration416.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:973:9: expressionList
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(973, 9);
				PushFollow(Follow._expressionList_in_forInit5639);
				expressionList417=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionList417.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 72);
			LeaveRule("forInit", 72);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 72, forInit_StartIndex); }

		}
		DebugLocation(974, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_parExpression();
	partial void LeaveRule_parExpression();

	// $ANTLR start "parExpression"
	// Java.g:976:1: parExpression : '(' expression ')' ;
	[GrammarRule("parExpression")]
	private AstParserRuleReturnScope<object, IToken> parExpression()
	{
		EnterRule_parExpression();
		EnterRule("parExpression", 73);
		TraceIn("parExpression", 73);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int parExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal418 = default(IToken);
		IToken char_literal420 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression419 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal418_tree = default(object);
		object char_literal420_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parExpression");
		DebugLocation(976, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// Java.g:977:5: ( '(' expression ')' )
			DebugEnterAlt(1);
			// Java.g:977:9: '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(977, 9);
			char_literal418=(IToken)Match(input,LPAREN,Follow._LPAREN_in_parExpression5659); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal418_tree = (object)adaptor.Create(char_literal418);
			adaptor.AddChild(root_0, char_literal418_tree);
			}
			DebugLocation(977, 13);
			PushFollow(Follow._expression_in_parExpression5661);
			expression419=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression419.Tree);
			DebugLocation(977, 24);
			char_literal420=(IToken)Match(input,RPAREN,Follow._RPAREN_in_parExpression5663); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal420_tree = (object)adaptor.Create(char_literal420);
			adaptor.AddChild(root_0, char_literal420_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parExpression", 73);
			LeaveRule("parExpression", 73);
			LeaveRule_parExpression();
			if (state.backtracking > 0) { Memoize(input, 73, parExpression_StartIndex); }

		}
		DebugLocation(978, 4);
		} finally { DebugExitRule(GrammarFileName, "parExpression"); }
		return retval;

	}
	// $ANTLR end "parExpression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();

	// $ANTLR start "expressionList"
	// Java.g:980:1: expressionList : expression ( ',' expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<object, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 74);
		TraceIn("expressionList", 74);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expressionList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal422 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression421 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression423 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal422_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(980, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// Java.g:981:5: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// Java.g:981:9: expression ( ',' expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(981, 9);
			PushFollow(Follow._expression_in_expressionList5683);
			expression421=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression421.Tree);
			DebugLocation(982, 9);
			// Java.g:982:9: ( ',' expression )*
			try { DebugEnterSubRule(120);
			while (true)
			{
				int alt120=2;
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==COMMA))
				{
					alt120 = 1;
				}


				} finally { DebugExitDecision(120); }
				switch ( alt120 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:982:10: ',' expression
					{
					DebugLocation(982, 10);
					char_literal422=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList5694); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal422_tree = (object)adaptor.Create(char_literal422);
					adaptor.AddChild(root_0, char_literal422_tree);
					}
					DebugLocation(982, 14);
					PushFollow(Follow._expression_in_expressionList5696);
					expression423=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression423.Tree);

					}
					break;

				default:
					goto loop120;
				}
			}

			loop120:
				;

			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 74);
			LeaveRule("expressionList", 74);
			LeaveRule_expressionList();
			if (state.backtracking > 0) { Memoize(input, 74, expressionList_StartIndex); }

		}
		DebugLocation(984, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// Java.g:987:1: expression : conditionalExpression ( assignmentOperator expression )? ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 75);
		TraceIn("expression", 75);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> conditionalExpression424 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignmentOperator425 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression426 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(987, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// Java.g:988:5: ( conditionalExpression ( assignmentOperator expression )? )
			DebugEnterAlt(1);
			// Java.g:988:9: conditionalExpression ( assignmentOperator expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(988, 9);
			PushFollow(Follow._conditionalExpression_in_expression5728);
			conditionalExpression424=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression424.Tree);
			DebugLocation(989, 9);
			// Java.g:989:9: ( assignmentOperator expression )?
			int alt121=2;
			try { DebugEnterSubRule(121);
			try { DebugEnterDecision(121, false);
			int LA121_0 = input.LA(1);

			if ((LA121_0==AMPEQ||LA121_0==BAREQ||LA121_0==CARETEQ||LA121_0==EQ||LA121_0==GT||LA121_0==LT||LA121_0==PERCENTEQ||LA121_0==PLUSEQ||LA121_0==SLASHEQ||LA121_0==STAREQ||LA121_0==SUBEQ))
			{
				alt121 = 1;
			}
			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:989:10: assignmentOperator expression
				{
				DebugLocation(989, 10);
				PushFollow(Follow._assignmentOperator_in_expression5739);
				assignmentOperator425=assignmentOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentOperator425.Tree);
				DebugLocation(989, 29);
				PushFollow(Follow._expression_in_expression5741);
				expression426=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression426.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(121); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 75);
			LeaveRule("expression", 75);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 75, expression_StartIndex); }

		}
		DebugLocation(991, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();

	// $ANTLR start "assignmentOperator"
	// Java.g:994:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' );
	[GrammarRule("assignmentOperator")]
	private AstParserRuleReturnScope<object, IToken> assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 76);
		TraceIn("assignmentOperator", 76);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignmentOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal427 = default(IToken);
		IToken string_literal428 = default(IToken);
		IToken string_literal429 = default(IToken);
		IToken string_literal430 = default(IToken);
		IToken string_literal431 = default(IToken);
		IToken string_literal432 = default(IToken);
		IToken string_literal433 = default(IToken);
		IToken string_literal434 = default(IToken);
		IToken string_literal435 = default(IToken);
		IToken char_literal436 = default(IToken);
		IToken char_literal437 = default(IToken);
		IToken char_literal438 = default(IToken);
		IToken char_literal439 = default(IToken);
		IToken char_literal440 = default(IToken);
		IToken char_literal441 = default(IToken);
		IToken char_literal442 = default(IToken);
		IToken char_literal443 = default(IToken);
		IToken char_literal444 = default(IToken);
		IToken char_literal445 = default(IToken);

		object char_literal427_tree = default(object);
		object string_literal428_tree = default(object);
		object string_literal429_tree = default(object);
		object string_literal430_tree = default(object);
		object string_literal431_tree = default(object);
		object string_literal432_tree = default(object);
		object string_literal433_tree = default(object);
		object string_literal434_tree = default(object);
		object string_literal435_tree = default(object);
		object char_literal436_tree = default(object);
		object char_literal437_tree = default(object);
		object char_literal438_tree = default(object);
		object char_literal439_tree = default(object);
		object char_literal440_tree = default(object);
		object char_literal441_tree = default(object);
		object char_literal442_tree = default(object);
		object char_literal443_tree = default(object);
		object char_literal444_tree = default(object);
		object char_literal445_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(994, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// Java.g:995:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' )
			int alt122=12;
			try { DebugEnterDecision(122, false);
			switch (input.LA(1))
			{
			case EQ:
				{
				alt122 = 1;
				}
				break;
			case PLUSEQ:
				{
				alt122 = 2;
				}
				break;
			case SUBEQ:
				{
				alt122 = 3;
				}
				break;
			case STAREQ:
				{
				alt122 = 4;
				}
				break;
			case SLASHEQ:
				{
				alt122 = 5;
				}
				break;
			case AMPEQ:
				{
				alt122 = 6;
				}
				break;
			case BAREQ:
				{
				alt122 = 7;
				}
				break;
			case CARETEQ:
				{
				alt122 = 8;
				}
				break;
			case PERCENTEQ:
				{
				alt122 = 9;
				}
				break;
			case LT:
				{
				alt122 = 10;
				}
				break;
			case GT:
				{
				int LA122_11 = input.LA(2);

				if ((LA122_11==GT))
				{
					int LA122_12 = input.LA(3);

					if ((LA122_12==GT))
					{
						alt122 = 11;
					}
					else if ((LA122_12==EQ))
					{
						alt122 = 12;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 122, 12, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 122, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:995:9: '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(995, 9);
				char_literal427=(IToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5773); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal427_tree = (object)adaptor.Create(char_literal427);
				adaptor.AddChild(root_0, char_literal427_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:996:9: '+='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(996, 9);
				string_literal428=(IToken)Match(input,PLUSEQ,Follow._PLUSEQ_in_assignmentOperator5783); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal428_tree = (object)adaptor.Create(string_literal428);
				adaptor.AddChild(root_0, string_literal428_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:997:9: '-='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(997, 9);
				string_literal429=(IToken)Match(input,SUBEQ,Follow._SUBEQ_in_assignmentOperator5793); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal429_tree = (object)adaptor.Create(string_literal429);
				adaptor.AddChild(root_0, string_literal429_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:998:9: '*='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(998, 9);
				string_literal430=(IToken)Match(input,STAREQ,Follow._STAREQ_in_assignmentOperator5803); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal430_tree = (object)adaptor.Create(string_literal430);
				adaptor.AddChild(root_0, string_literal430_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:999:9: '/='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(999, 9);
				string_literal431=(IToken)Match(input,SLASHEQ,Follow._SLASHEQ_in_assignmentOperator5813); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal431_tree = (object)adaptor.Create(string_literal431);
				adaptor.AddChild(root_0, string_literal431_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1000:9: '&='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1000, 9);
				string_literal432=(IToken)Match(input,AMPEQ,Follow._AMPEQ_in_assignmentOperator5823); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal432_tree = (object)adaptor.Create(string_literal432);
				adaptor.AddChild(root_0, string_literal432_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1001:9: '|='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1001, 9);
				string_literal433=(IToken)Match(input,BAREQ,Follow._BAREQ_in_assignmentOperator5833); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal433_tree = (object)adaptor.Create(string_literal433);
				adaptor.AddChild(root_0, string_literal433_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1002:9: '^='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1002, 9);
				string_literal434=(IToken)Match(input,CARETEQ,Follow._CARETEQ_in_assignmentOperator5843); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal434_tree = (object)adaptor.Create(string_literal434);
				adaptor.AddChild(root_0, string_literal434_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:1003:9: '%='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1003, 9);
				string_literal435=(IToken)Match(input,PERCENTEQ,Follow._PERCENTEQ_in_assignmentOperator5853); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal435_tree = (object)adaptor.Create(string_literal435);
				adaptor.AddChild(root_0, string_literal435_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:1004:10: '<' '<' '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1004, 10);
				char_literal436=(IToken)Match(input,LT,Follow._LT_in_assignmentOperator5864); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal436_tree = (object)adaptor.Create(char_literal436);
				adaptor.AddChild(root_0, char_literal436_tree);
				}
				DebugLocation(1004, 14);
				char_literal437=(IToken)Match(input,LT,Follow._LT_in_assignmentOperator5866); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal437_tree = (object)adaptor.Create(char_literal437);
				adaptor.AddChild(root_0, char_literal437_tree);
				}
				DebugLocation(1004, 18);
				char_literal438=(IToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5868); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal438_tree = (object)adaptor.Create(char_literal438);
				adaptor.AddChild(root_0, char_literal438_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:1005:10: '>' '>' '>' '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1005, 10);
				char_literal439=(IToken)Match(input,GT,Follow._GT_in_assignmentOperator5879); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal439_tree = (object)adaptor.Create(char_literal439);
				adaptor.AddChild(root_0, char_literal439_tree);
				}
				DebugLocation(1005, 14);
				char_literal440=(IToken)Match(input,GT,Follow._GT_in_assignmentOperator5881); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal440_tree = (object)adaptor.Create(char_literal440);
				adaptor.AddChild(root_0, char_literal440_tree);
				}
				DebugLocation(1005, 18);
				char_literal441=(IToken)Match(input,GT,Follow._GT_in_assignmentOperator5883); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal441_tree = (object)adaptor.Create(char_literal441);
				adaptor.AddChild(root_0, char_literal441_tree);
				}
				DebugLocation(1005, 22);
				char_literal442=(IToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5885); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal442_tree = (object)adaptor.Create(char_literal442);
				adaptor.AddChild(root_0, char_literal442_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Java.g:1006:10: '>' '>' '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1006, 10);
				char_literal443=(IToken)Match(input,GT,Follow._GT_in_assignmentOperator5896); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal443_tree = (object)adaptor.Create(char_literal443);
				adaptor.AddChild(root_0, char_literal443_tree);
				}
				DebugLocation(1006, 14);
				char_literal444=(IToken)Match(input,GT,Follow._GT_in_assignmentOperator5898); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal444_tree = (object)adaptor.Create(char_literal444);
				adaptor.AddChild(root_0, char_literal444_tree);
				}
				DebugLocation(1006, 18);
				char_literal445=(IToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5900); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal445_tree = (object)adaptor.Create(char_literal445);
				adaptor.AddChild(root_0, char_literal445_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentOperator", 76);
			LeaveRule("assignmentOperator", 76);
			LeaveRule_assignmentOperator();
			if (state.backtracking > 0) { Memoize(input, 76, assignmentOperator_StartIndex); }

		}
		DebugLocation(1007, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return retval;

	}
	// $ANTLR end "assignmentOperator"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// Java.g:1010:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' conditionalExpression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<object, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 77);
		TraceIn("conditionalExpression", 77);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal447 = default(IToken);
		IToken char_literal449 = default(IToken);
		AstParserRuleReturnScope<object, IToken> conditionalOrExpression446 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression448 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditionalExpression450 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal447_tree = default(object);
		object char_literal449_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(1010, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// Java.g:1011:5: ( conditionalOrExpression ( '?' expression ':' conditionalExpression )? )
			DebugEnterAlt(1);
			// Java.g:1011:9: conditionalOrExpression ( '?' expression ':' conditionalExpression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1011, 9);
			PushFollow(Follow._conditionalOrExpression_in_conditionalExpression5921);
			conditionalOrExpression446=conditionalOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalOrExpression446.Tree);
			DebugLocation(1012, 9);
			// Java.g:1012:9: ( '?' expression ':' conditionalExpression )?
			int alt123=2;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, false);
			int LA123_0 = input.LA(1);

			if ((LA123_0==QUES))
			{
				alt123 = 1;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1012:10: '?' expression ':' conditionalExpression
				{
				DebugLocation(1012, 10);
				char_literal447=(IToken)Match(input,QUES,Follow._QUES_in_conditionalExpression5932); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal447_tree = (object)adaptor.Create(char_literal447);
				adaptor.AddChild(root_0, char_literal447_tree);
				}
				DebugLocation(1012, 14);
				PushFollow(Follow._expression_in_conditionalExpression5934);
				expression448=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression448.Tree);
				DebugLocation(1012, 25);
				char_literal449=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression5936); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal449_tree = (object)adaptor.Create(char_literal449);
				adaptor.AddChild(root_0, char_literal449_tree);
				}
				DebugLocation(1012, 29);
				PushFollow(Follow._conditionalExpression_in_conditionalExpression5938);
				conditionalExpression450=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression450.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 77);
			LeaveRule("conditionalExpression", 77);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 77, conditionalExpression_StartIndex); }

		}
		DebugLocation(1014, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalOrExpression();
	partial void LeaveRule_conditionalOrExpression();

	// $ANTLR start "conditionalOrExpression"
	// Java.g:1016:1: conditionalOrExpression : conditionalAndExpression ( '||' conditionalAndExpression )* ;
	[GrammarRule("conditionalOrExpression")]
	private AstParserRuleReturnScope<object, IToken> conditionalOrExpression()
	{
		EnterRule_conditionalOrExpression();
		EnterRule("conditionalOrExpression", 78);
		TraceIn("conditionalOrExpression", 78);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalOrExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal452 = default(IToken);
		AstParserRuleReturnScope<object, IToken> conditionalAndExpression451 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditionalAndExpression453 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal452_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditionalOrExpression");
		DebugLocation(1016, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// Java.g:1017:5: ( conditionalAndExpression ( '||' conditionalAndExpression )* )
			DebugEnterAlt(1);
			// Java.g:1017:9: conditionalAndExpression ( '||' conditionalAndExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1017, 9);
			PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression5969);
			conditionalAndExpression451=conditionalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalAndExpression451.Tree);
			DebugLocation(1018, 9);
			// Java.g:1018:9: ( '||' conditionalAndExpression )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==BARBAR))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1018:10: '||' conditionalAndExpression
					{
					DebugLocation(1018, 10);
					string_literal452=(IToken)Match(input,BARBAR,Follow._BARBAR_in_conditionalOrExpression5980); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal452_tree = (object)adaptor.Create(string_literal452);
					adaptor.AddChild(root_0, string_literal452_tree);
					}
					DebugLocation(1018, 15);
					PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression5982);
					conditionalAndExpression453=conditionalAndExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalAndExpression453.Tree);

					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalOrExpression", 78);
			LeaveRule("conditionalOrExpression", 78);
			LeaveRule_conditionalOrExpression();
			if (state.backtracking > 0) { Memoize(input, 78, conditionalOrExpression_StartIndex); }

		}
		DebugLocation(1020, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalOrExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalOrExpression"

	partial void EnterRule_conditionalAndExpression();
	partial void LeaveRule_conditionalAndExpression();

	// $ANTLR start "conditionalAndExpression"
	// Java.g:1022:1: conditionalAndExpression : inclusiveOrExpression ( '&&' inclusiveOrExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private AstParserRuleReturnScope<object, IToken> conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 79);
		TraceIn("conditionalAndExpression", 79);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditionalAndExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal455 = default(IToken);
		AstParserRuleReturnScope<object, IToken> inclusiveOrExpression454 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> inclusiveOrExpression456 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal455_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(1022, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// Java.g:1023:5: ( inclusiveOrExpression ( '&&' inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:1023:9: inclusiveOrExpression ( '&&' inclusiveOrExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1023, 9);
			PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression6013);
			inclusiveOrExpression454=inclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression454.Tree);
			DebugLocation(1024, 9);
			// Java.g:1024:9: ( '&&' inclusiveOrExpression )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==AMPAMP))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1024:10: '&&' inclusiveOrExpression
					{
					DebugLocation(1024, 10);
					string_literal455=(IToken)Match(input,AMPAMP,Follow._AMPAMP_in_conditionalAndExpression6024); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal455_tree = (object)adaptor.Create(string_literal455);
					adaptor.AddChild(root_0, string_literal455_tree);
					}
					DebugLocation(1024, 15);
					PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression6026);
					inclusiveOrExpression456=inclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression456.Tree);

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalAndExpression", 79);
			LeaveRule("conditionalAndExpression", 79);
			LeaveRule_conditionalAndExpression();
			if (state.backtracking > 0) { Memoize(input, 79, conditionalAndExpression_StartIndex); }

		}
		DebugLocation(1026, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();

	// $ANTLR start "inclusiveOrExpression"
	// Java.g:1028:1: inclusiveOrExpression : exclusiveOrExpression ( '|' exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<object, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 80);
		TraceIn("inclusiveOrExpression", 80);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int inclusiveOrExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal458 = default(IToken);
		AstParserRuleReturnScope<object, IToken> exclusiveOrExpression457 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> exclusiveOrExpression459 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal458_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(1028, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// Java.g:1029:5: ( exclusiveOrExpression ( '|' exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:1029:9: exclusiveOrExpression ( '|' exclusiveOrExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1029, 9);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression6057);
			exclusiveOrExpression457=exclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression457.Tree);
			DebugLocation(1030, 9);
			// Java.g:1030:9: ( '|' exclusiveOrExpression )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==BAR))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1030:10: '|' exclusiveOrExpression
					{
					DebugLocation(1030, 10);
					char_literal458=(IToken)Match(input,BAR,Follow._BAR_in_inclusiveOrExpression6068); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal458_tree = (object)adaptor.Create(char_literal458);
					adaptor.AddChild(root_0, char_literal458_tree);
					}
					DebugLocation(1030, 14);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression6070);
					exclusiveOrExpression459=exclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression459.Tree);

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 80);
			LeaveRule("inclusiveOrExpression", 80);
			LeaveRule_inclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 80, inclusiveOrExpression_StartIndex); }

		}
		DebugLocation(1032, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();

	// $ANTLR start "exclusiveOrExpression"
	// Java.g:1034:1: exclusiveOrExpression : andExpression ( '^' andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<object, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 81);
		TraceIn("exclusiveOrExpression", 81);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int exclusiveOrExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal461 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andExpression460 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andExpression462 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal461_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(1034, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// Java.g:1035:5: ( andExpression ( '^' andExpression )* )
			DebugEnterAlt(1);
			// Java.g:1035:9: andExpression ( '^' andExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1035, 9);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression6101);
			andExpression460=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression460.Tree);
			DebugLocation(1036, 9);
			// Java.g:1036:9: ( '^' andExpression )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==CARET))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1036:10: '^' andExpression
					{
					DebugLocation(1036, 10);
					char_literal461=(IToken)Match(input,CARET,Follow._CARET_in_exclusiveOrExpression6112); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal461_tree = (object)adaptor.Create(char_literal461);
					adaptor.AddChild(root_0, char_literal461_tree);
					}
					DebugLocation(1036, 14);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression6114);
					andExpression462=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression462.Tree);

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 81);
			LeaveRule("exclusiveOrExpression", 81);
			LeaveRule_exclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 81, exclusiveOrExpression_StartIndex); }

		}
		DebugLocation(1038, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();

	// $ANTLR start "andExpression"
	// Java.g:1040:1: andExpression : equalityExpression ( '&' equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<object, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 82);
		TraceIn("andExpression", 82);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int andExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal464 = default(IToken);
		AstParserRuleReturnScope<object, IToken> equalityExpression463 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> equalityExpression465 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal464_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(1040, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// Java.g:1041:5: ( equalityExpression ( '&' equalityExpression )* )
			DebugEnterAlt(1);
			// Java.g:1041:9: equalityExpression ( '&' equalityExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1041, 9);
			PushFollow(Follow._equalityExpression_in_andExpression6145);
			equalityExpression463=equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression463.Tree);
			DebugLocation(1042, 9);
			// Java.g:1042:9: ( '&' equalityExpression )*
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==AMP))
				{
					alt128 = 1;
				}


				} finally { DebugExitDecision(128); }
				switch ( alt128 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1042:10: '&' equalityExpression
					{
					DebugLocation(1042, 10);
					char_literal464=(IToken)Match(input,AMP,Follow._AMP_in_andExpression6156); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal464_tree = (object)adaptor.Create(char_literal464);
					adaptor.AddChild(root_0, char_literal464_tree);
					}
					DebugLocation(1042, 14);
					PushFollow(Follow._equalityExpression_in_andExpression6158);
					equalityExpression465=equalityExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression465.Tree);

					}
					break;

				default:
					goto loop128;
				}
			}

			loop128:
				;

			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 82);
			LeaveRule("andExpression", 82);
			LeaveRule_andExpression();
			if (state.backtracking > 0) { Memoize(input, 82, andExpression_StartIndex); }

		}
		DebugLocation(1044, 4);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// Java.g:1046:1: equalityExpression : instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<object, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 83);
		TraceIn("equalityExpression", 83);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set467 = default(IToken);
		AstParserRuleReturnScope<object, IToken> instanceOfExpression466 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> instanceOfExpression468 = default(AstParserRuleReturnScope<object, IToken>);

		object set467_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(1046, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// Java.g:1047:5: ( instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* )
			DebugEnterAlt(1);
			// Java.g:1047:9: instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1047, 9);
			PushFollow(Follow._instanceOfExpression_in_equalityExpression6189);
			instanceOfExpression466=instanceOfExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression466.Tree);
			DebugLocation(1048, 9);
			// Java.g:1048:9: ( ( '==' | '!=' ) instanceOfExpression )*
			try { DebugEnterSubRule(129);
			while (true)
			{
				int alt129=2;
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==BANGEQ||LA129_0==EQEQ))
				{
					alt129 = 1;
				}


				} finally { DebugExitDecision(129); }
				switch ( alt129 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1049:13: ( '==' | '!=' ) instanceOfExpression
					{
					DebugLocation(1049, 13);

					set467=(IToken)input.LT(1);
					if (input.LA(1)==BANGEQ||input.LA(1)==EQEQ)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set467));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1052, 13);
					PushFollow(Follow._instanceOfExpression_in_equalityExpression6266);
					instanceOfExpression468=instanceOfExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression468.Tree);

					}
					break;

				default:
					goto loop129;
				}
			}

			loop129:
				;

			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 83);
			LeaveRule("equalityExpression", 83);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 83, equalityExpression_StartIndex); }

		}
		DebugLocation(1054, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_instanceOfExpression();
	partial void LeaveRule_instanceOfExpression();

	// $ANTLR start "instanceOfExpression"
	// Java.g:1056:1: instanceOfExpression : relationalExpression ( 'instanceof' type )? ;
	[GrammarRule("instanceOfExpression")]
	private AstParserRuleReturnScope<object, IToken> instanceOfExpression()
	{
		EnterRule_instanceOfExpression();
		EnterRule("instanceOfExpression", 84);
		TraceIn("instanceOfExpression", 84);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int instanceOfExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal470 = default(IToken);
		AstParserRuleReturnScope<object, IToken> relationalExpression469 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type471 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal470_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "instanceOfExpression");
		DebugLocation(1056, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// Java.g:1057:5: ( relationalExpression ( 'instanceof' type )? )
			DebugEnterAlt(1);
			// Java.g:1057:9: relationalExpression ( 'instanceof' type )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1057, 9);
			PushFollow(Follow._relationalExpression_in_instanceOfExpression6297);
			relationalExpression469=relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression469.Tree);
			DebugLocation(1058, 9);
			// Java.g:1058:9: ( 'instanceof' type )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			int LA130_0 = input.LA(1);

			if ((LA130_0==INSTANCEOF))
			{
				alt130 = 1;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1058:10: 'instanceof' type
				{
				DebugLocation(1058, 10);
				string_literal470=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_instanceOfExpression6308); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal470_tree = (object)adaptor.Create(string_literal470);
				adaptor.AddChild(root_0, string_literal470_tree);
				}
				DebugLocation(1058, 23);
				PushFollow(Follow._type_in_instanceOfExpression6310);
				type471=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type471.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(130); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOfExpression", 84);
			LeaveRule("instanceOfExpression", 84);
			LeaveRule_instanceOfExpression();
			if (state.backtracking > 0) { Memoize(input, 84, instanceOfExpression_StartIndex); }

		}
		DebugLocation(1060, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOfExpression"); }
		return retval;

	}
	// $ANTLR end "instanceOfExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// Java.g:1062:1: relationalExpression : shiftExpression ( relationalOp shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<object, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 85);
		TraceIn("relationalExpression", 85);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalExpression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> shiftExpression472 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> relationalOp473 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> shiftExpression474 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(1062, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// Java.g:1063:5: ( shiftExpression ( relationalOp shiftExpression )* )
			DebugEnterAlt(1);
			// Java.g:1063:9: shiftExpression ( relationalOp shiftExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1063, 9);
			PushFollow(Follow._shiftExpression_in_relationalExpression6341);
			shiftExpression472=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression472.Tree);
			DebugLocation(1064, 9);
			// Java.g:1064:9: ( relationalOp shiftExpression )*
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==LT))
				{
					int LA131_2 = input.LA(2);

					if ((LA131_2==BANG||LA131_2==BOOLEAN||LA131_2==BYTE||(LA131_2>=CHAR && LA131_2<=CHARLITERAL)||(LA131_2>=DOUBLE && LA131_2<=DOUBLELITERAL)||LA131_2==EQ||LA131_2==FALSE||(LA131_2>=FLOAT && LA131_2<=FLOATLITERAL)||LA131_2==IDENTIFIER||LA131_2==INT||LA131_2==INTLITERAL||(LA131_2>=LONG && LA131_2<=LPAREN)||(LA131_2>=NEW && LA131_2<=NULL)||LA131_2==PLUS||LA131_2==PLUSPLUS||LA131_2==SHORT||(LA131_2>=STRINGLITERAL && LA131_2<=SUB)||(LA131_2>=SUBSUB && LA131_2<=SUPER)||LA131_2==THIS||LA131_2==TILDE||LA131_2==TRUE||LA131_2==VOID))
					{
						alt131 = 1;
					}


				}
				else if ((LA131_0==GT))
				{
					int LA131_3 = input.LA(2);

					if ((LA131_3==BANG||LA131_3==BOOLEAN||LA131_3==BYTE||(LA131_3>=CHAR && LA131_3<=CHARLITERAL)||(LA131_3>=DOUBLE && LA131_3<=DOUBLELITERAL)||LA131_3==EQ||LA131_3==FALSE||(LA131_3>=FLOAT && LA131_3<=FLOATLITERAL)||LA131_3==IDENTIFIER||LA131_3==INT||LA131_3==INTLITERAL||(LA131_3>=LONG && LA131_3<=LPAREN)||(LA131_3>=NEW && LA131_3<=NULL)||LA131_3==PLUS||LA131_3==PLUSPLUS||LA131_3==SHORT||(LA131_3>=STRINGLITERAL && LA131_3<=SUB)||(LA131_3>=SUBSUB && LA131_3<=SUPER)||LA131_3==THIS||LA131_3==TILDE||LA131_3==TRUE||LA131_3==VOID))
					{
						alt131 = 1;
					}


				}


				} finally { DebugExitDecision(131); }
				switch ( alt131 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1064:10: relationalOp shiftExpression
					{
					DebugLocation(1064, 10);
					PushFollow(Follow._relationalOp_in_relationalExpression6352);
					relationalOp473=relationalOp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relationalOp473.Tree);
					DebugLocation(1064, 23);
					PushFollow(Follow._shiftExpression_in_relationalExpression6354);
					shiftExpression474=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression474.Tree);

					}
					break;

				default:
					goto loop131;
				}
			}

			loop131:
				;

			} finally { DebugExitSubRule(131); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 85);
			LeaveRule("relationalExpression", 85);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 85, relationalExpression_StartIndex); }

		}
		DebugLocation(1066, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_relationalOp();
	partial void LeaveRule_relationalOp();

	// $ANTLR start "relationalOp"
	// Java.g:1068:1: relationalOp : ( '<' '=' | '>' '=' | '<' | '>' );
	[GrammarRule("relationalOp")]
	private AstParserRuleReturnScope<object, IToken> relationalOp()
	{
		EnterRule_relationalOp();
		EnterRule("relationalOp", 86);
		TraceIn("relationalOp", 86);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int relationalOp_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal475 = default(IToken);
		IToken char_literal476 = default(IToken);
		IToken char_literal477 = default(IToken);
		IToken char_literal478 = default(IToken);
		IToken char_literal479 = default(IToken);
		IToken char_literal480 = default(IToken);

		object char_literal475_tree = default(object);
		object char_literal476_tree = default(object);
		object char_literal477_tree = default(object);
		object char_literal478_tree = default(object);
		object char_literal479_tree = default(object);
		object char_literal480_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relationalOp");
		DebugLocation(1068, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// Java.g:1069:5: ( '<' '=' | '>' '=' | '<' | '>' )
			int alt132=4;
			try { DebugEnterDecision(132, false);
			int LA132_0 = input.LA(1);

			if ((LA132_0==LT))
			{
				int LA132_1 = input.LA(2);

				if ((LA132_1==EQ))
				{
					alt132 = 1;
				}
				else if ((LA132_1==BANG||LA132_1==BOOLEAN||LA132_1==BYTE||(LA132_1>=CHAR && LA132_1<=CHARLITERAL)||(LA132_1>=DOUBLE && LA132_1<=DOUBLELITERAL)||LA132_1==FALSE||(LA132_1>=FLOAT && LA132_1<=FLOATLITERAL)||LA132_1==IDENTIFIER||LA132_1==INT||LA132_1==INTLITERAL||(LA132_1>=LONG && LA132_1<=LPAREN)||(LA132_1>=NEW && LA132_1<=NULL)||LA132_1==PLUS||LA132_1==PLUSPLUS||LA132_1==SHORT||(LA132_1>=STRINGLITERAL && LA132_1<=SUB)||(LA132_1>=SUBSUB && LA132_1<=SUPER)||LA132_1==THIS||LA132_1==TILDE||LA132_1==TRUE||LA132_1==VOID))
				{
					alt132 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 132, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA132_0==GT))
			{
				int LA132_2 = input.LA(2);

				if ((LA132_2==EQ))
				{
					alt132 = 2;
				}
				else if ((LA132_2==BANG||LA132_2==BOOLEAN||LA132_2==BYTE||(LA132_2>=CHAR && LA132_2<=CHARLITERAL)||(LA132_2>=DOUBLE && LA132_2<=DOUBLELITERAL)||LA132_2==FALSE||(LA132_2>=FLOAT && LA132_2<=FLOATLITERAL)||LA132_2==IDENTIFIER||LA132_2==INT||LA132_2==INTLITERAL||(LA132_2>=LONG && LA132_2<=LPAREN)||(LA132_2>=NEW && LA132_2<=NULL)||LA132_2==PLUS||LA132_2==PLUSPLUS||LA132_2==SHORT||(LA132_2>=STRINGLITERAL && LA132_2<=SUB)||(LA132_2>=SUBSUB && LA132_2<=SUPER)||LA132_2==THIS||LA132_2==TILDE||LA132_2==TRUE||LA132_2==VOID))
				{
					alt132 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 132, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 132, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1069:10: '<' '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1069, 10);
				char_literal475=(IToken)Match(input,LT,Follow._LT_in_relationalOp6386); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal475_tree = (object)adaptor.Create(char_literal475);
				adaptor.AddChild(root_0, char_literal475_tree);
				}
				DebugLocation(1069, 14);
				char_literal476=(IToken)Match(input,EQ,Follow._EQ_in_relationalOp6388); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal476_tree = (object)adaptor.Create(char_literal476);
				adaptor.AddChild(root_0, char_literal476_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1070:10: '>' '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1070, 10);
				char_literal477=(IToken)Match(input,GT,Follow._GT_in_relationalOp6399); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal477_tree = (object)adaptor.Create(char_literal477);
				adaptor.AddChild(root_0, char_literal477_tree);
				}
				DebugLocation(1070, 14);
				char_literal478=(IToken)Match(input,EQ,Follow._EQ_in_relationalOp6401); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal478_tree = (object)adaptor.Create(char_literal478);
				adaptor.AddChild(root_0, char_literal478_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1071:9: '<'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1071, 9);
				char_literal479=(IToken)Match(input,LT,Follow._LT_in_relationalOp6411); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal479_tree = (object)adaptor.Create(char_literal479);
				adaptor.AddChild(root_0, char_literal479_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1072:9: '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1072, 9);
				char_literal480=(IToken)Match(input,GT,Follow._GT_in_relationalOp6421); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal480_tree = (object)adaptor.Create(char_literal480);
				adaptor.AddChild(root_0, char_literal480_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalOp", 86);
			LeaveRule("relationalOp", 86);
			LeaveRule_relationalOp();
			if (state.backtracking > 0) { Memoize(input, 86, relationalOp_StartIndex); }

		}
		DebugLocation(1073, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalOp"); }
		return retval;

	}
	// $ANTLR end "relationalOp"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// Java.g:1075:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<object, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 87);
		TraceIn("shiftExpression", 87);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shiftExpression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> additiveExpression481 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> shiftOp482 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> additiveExpression483 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(1075, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// Java.g:1076:5: ( additiveExpression ( shiftOp additiveExpression )* )
			DebugEnterAlt(1);
			// Java.g:1076:9: additiveExpression ( shiftOp additiveExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1076, 9);
			PushFollow(Follow._additiveExpression_in_shiftExpression6441);
			additiveExpression481=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression481.Tree);
			DebugLocation(1077, 9);
			// Java.g:1077:9: ( shiftOp additiveExpression )*
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_0 = input.LA(1);

				if ((LA133_0==LT))
				{
					int LA133_1 = input.LA(2);

					if ((LA133_1==LT))
					{
						int LA133_4 = input.LA(3);

						if ((LA133_4==BANG||LA133_4==BOOLEAN||LA133_4==BYTE||(LA133_4>=CHAR && LA133_4<=CHARLITERAL)||(LA133_4>=DOUBLE && LA133_4<=DOUBLELITERAL)||LA133_4==FALSE||(LA133_4>=FLOAT && LA133_4<=FLOATLITERAL)||LA133_4==IDENTIFIER||LA133_4==INT||LA133_4==INTLITERAL||(LA133_4>=LONG && LA133_4<=LPAREN)||(LA133_4>=NEW && LA133_4<=NULL)||LA133_4==PLUS||LA133_4==PLUSPLUS||LA133_4==SHORT||(LA133_4>=STRINGLITERAL && LA133_4<=SUB)||(LA133_4>=SUBSUB && LA133_4<=SUPER)||LA133_4==THIS||LA133_4==TILDE||LA133_4==TRUE||LA133_4==VOID))
						{
							alt133 = 1;
						}


					}


				}
				else if ((LA133_0==GT))
				{
					int LA133_2 = input.LA(2);

					if ((LA133_2==GT))
					{
						int LA133_5 = input.LA(3);

						if ((LA133_5==GT))
						{
							int LA133_7 = input.LA(4);

							if ((LA133_7==BANG||LA133_7==BOOLEAN||LA133_7==BYTE||(LA133_7>=CHAR && LA133_7<=CHARLITERAL)||(LA133_7>=DOUBLE && LA133_7<=DOUBLELITERAL)||LA133_7==FALSE||(LA133_7>=FLOAT && LA133_7<=FLOATLITERAL)||LA133_7==IDENTIFIER||LA133_7==INT||LA133_7==INTLITERAL||(LA133_7>=LONG && LA133_7<=LPAREN)||(LA133_7>=NEW && LA133_7<=NULL)||LA133_7==PLUS||LA133_7==PLUSPLUS||LA133_7==SHORT||(LA133_7>=STRINGLITERAL && LA133_7<=SUB)||(LA133_7>=SUBSUB && LA133_7<=SUPER)||LA133_7==THIS||LA133_7==TILDE||LA133_7==TRUE||LA133_7==VOID))
							{
								alt133 = 1;
							}


						}
						else if ((LA133_5==BANG||LA133_5==BOOLEAN||LA133_5==BYTE||(LA133_5>=CHAR && LA133_5<=CHARLITERAL)||(LA133_5>=DOUBLE && LA133_5<=DOUBLELITERAL)||LA133_5==FALSE||(LA133_5>=FLOAT && LA133_5<=FLOATLITERAL)||LA133_5==IDENTIFIER||LA133_5==INT||LA133_5==INTLITERAL||(LA133_5>=LONG && LA133_5<=LPAREN)||(LA133_5>=NEW && LA133_5<=NULL)||LA133_5==PLUS||LA133_5==PLUSPLUS||LA133_5==SHORT||(LA133_5>=STRINGLITERAL && LA133_5<=SUB)||(LA133_5>=SUBSUB && LA133_5<=SUPER)||LA133_5==THIS||LA133_5==TILDE||LA133_5==TRUE||LA133_5==VOID))
						{
							alt133 = 1;
						}


					}


				}


				} finally { DebugExitDecision(133); }
				switch ( alt133 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1077:10: shiftOp additiveExpression
					{
					DebugLocation(1077, 10);
					PushFollow(Follow._shiftOp_in_shiftExpression6452);
					shiftOp482=shiftOp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftOp482.Tree);
					DebugLocation(1077, 18);
					PushFollow(Follow._additiveExpression_in_shiftExpression6454);
					additiveExpression483=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression483.Tree);

					}
					break;

				default:
					goto loop133;
				}
			}

			loop133:
				;

			} finally { DebugExitSubRule(133); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 87);
			LeaveRule("shiftExpression", 87);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 87, shiftExpression_StartIndex); }

		}
		DebugLocation(1079, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_shiftOp();
	partial void LeaveRule_shiftOp();

	// $ANTLR start "shiftOp"
	// Java.g:1082:1: shiftOp : ( '<' '<' | '>' '>' '>' | '>' '>' );
	[GrammarRule("shiftOp")]
	private AstParserRuleReturnScope<object, IToken> shiftOp()
	{
		EnterRule_shiftOp();
		EnterRule("shiftOp", 88);
		TraceIn("shiftOp", 88);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shiftOp_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal484 = default(IToken);
		IToken char_literal485 = default(IToken);
		IToken char_literal486 = default(IToken);
		IToken char_literal487 = default(IToken);
		IToken char_literal488 = default(IToken);
		IToken char_literal489 = default(IToken);
		IToken char_literal490 = default(IToken);

		object char_literal484_tree = default(object);
		object char_literal485_tree = default(object);
		object char_literal486_tree = default(object);
		object char_literal487_tree = default(object);
		object char_literal488_tree = default(object);
		object char_literal489_tree = default(object);
		object char_literal490_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shiftOp");
		DebugLocation(1082, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// Java.g:1083:5: ( '<' '<' | '>' '>' '>' | '>' '>' )
			int alt134=3;
			try { DebugEnterDecision(134, false);
			int LA134_0 = input.LA(1);

			if ((LA134_0==LT))
			{
				alt134 = 1;
			}
			else if ((LA134_0==GT))
			{
				int LA134_2 = input.LA(2);

				if ((LA134_2==GT))
				{
					int LA134_3 = input.LA(3);

					if ((LA134_3==GT))
					{
						alt134 = 2;
					}
					else if ((LA134_3==BANG||LA134_3==BOOLEAN||LA134_3==BYTE||(LA134_3>=CHAR && LA134_3<=CHARLITERAL)||(LA134_3>=DOUBLE && LA134_3<=DOUBLELITERAL)||LA134_3==FALSE||(LA134_3>=FLOAT && LA134_3<=FLOATLITERAL)||LA134_3==IDENTIFIER||LA134_3==INT||LA134_3==INTLITERAL||(LA134_3>=LONG && LA134_3<=LPAREN)||(LA134_3>=NEW && LA134_3<=NULL)||LA134_3==PLUS||LA134_3==PLUSPLUS||LA134_3==SHORT||(LA134_3>=STRINGLITERAL && LA134_3<=SUB)||(LA134_3>=SUBSUB && LA134_3<=SUPER)||LA134_3==THIS||LA134_3==TILDE||LA134_3==TRUE||LA134_3==VOID))
					{
						alt134 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 134, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 134, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 134, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1083:10: '<' '<'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1083, 10);
				char_literal484=(IToken)Match(input,LT,Follow._LT_in_shiftOp6487); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal484_tree = (object)adaptor.Create(char_literal484);
				adaptor.AddChild(root_0, char_literal484_tree);
				}
				DebugLocation(1083, 14);
				char_literal485=(IToken)Match(input,LT,Follow._LT_in_shiftOp6489); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal485_tree = (object)adaptor.Create(char_literal485);
				adaptor.AddChild(root_0, char_literal485_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1084:10: '>' '>' '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1084, 10);
				char_literal486=(IToken)Match(input,GT,Follow._GT_in_shiftOp6500); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal486_tree = (object)adaptor.Create(char_literal486);
				adaptor.AddChild(root_0, char_literal486_tree);
				}
				DebugLocation(1084, 14);
				char_literal487=(IToken)Match(input,GT,Follow._GT_in_shiftOp6502); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal487_tree = (object)adaptor.Create(char_literal487);
				adaptor.AddChild(root_0, char_literal487_tree);
				}
				DebugLocation(1084, 18);
				char_literal488=(IToken)Match(input,GT,Follow._GT_in_shiftOp6504); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal488_tree = (object)adaptor.Create(char_literal488);
				adaptor.AddChild(root_0, char_literal488_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1085:10: '>' '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1085, 10);
				char_literal489=(IToken)Match(input,GT,Follow._GT_in_shiftOp6515); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal489_tree = (object)adaptor.Create(char_literal489);
				adaptor.AddChild(root_0, char_literal489_tree);
				}
				DebugLocation(1085, 14);
				char_literal490=(IToken)Match(input,GT,Follow._GT_in_shiftOp6517); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal490_tree = (object)adaptor.Create(char_literal490);
				adaptor.AddChild(root_0, char_literal490_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftOp", 88);
			LeaveRule("shiftOp", 88);
			LeaveRule_shiftOp();
			if (state.backtracking > 0) { Memoize(input, 88, shiftOp_StartIndex); }

		}
		DebugLocation(1086, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftOp"); }
		return retval;

	}
	// $ANTLR end "shiftOp"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// Java.g:1089:1: additiveExpression : multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<object, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 89);
		TraceIn("additiveExpression", 89);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int additiveExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set492 = default(IToken);
		AstParserRuleReturnScope<object, IToken> multiplicativeExpression491 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> multiplicativeExpression493 = default(AstParserRuleReturnScope<object, IToken>);

		object set492_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(1089, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// Java.g:1090:5: ( multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// Java.g:1090:9: multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1090, 9);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression6538);
			multiplicativeExpression491=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression491.Tree);
			DebugLocation(1091, 9);
			// Java.g:1091:9: ( ( '+' | '-' ) multiplicativeExpression )*
			try { DebugEnterSubRule(135);
			while (true)
			{
				int alt135=2;
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==PLUS||LA135_0==SUB))
				{
					alt135 = 1;
				}


				} finally { DebugExitDecision(135); }
				switch ( alt135 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1092:13: ( '+' | '-' ) multiplicativeExpression
					{
					DebugLocation(1092, 13);

					set492=(IToken)input.LT(1);
					if (input.LA(1)==PLUS||input.LA(1)==SUB)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set492));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1095, 13);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression6615);
					multiplicativeExpression493=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression493.Tree);

					}
					break;

				default:
					goto loop135;
				}
			}

			loop135:
				;

			} finally { DebugExitSubRule(135); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 89);
			LeaveRule("additiveExpression", 89);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 89, additiveExpression_StartIndex); }

		}
		DebugLocation(1097, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// Java.g:1099:1: multiplicativeExpression : unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<object, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 90);
		TraceIn("multiplicativeExpression", 90);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int multiplicativeExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set495 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unaryExpression494 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression496 = default(AstParserRuleReturnScope<object, IToken>);

		object set495_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(1099, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// Java.g:1100:5: ( unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* )
			DebugEnterAlt(1);
			// Java.g:1101:9: unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1101, 9);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression6653);
			unaryExpression494=unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression494.Tree);
			DebugLocation(1102, 9);
			// Java.g:1102:9: ( ( '*' | '/' | '%' ) unaryExpression )*
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==PERCENT||LA136_0==SLASH||LA136_0==STAR))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch ( alt136 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1103:13: ( '*' | '/' | '%' ) unaryExpression
					{
					DebugLocation(1103, 13);

					set495=(IToken)input.LT(1);
					if (input.LA(1)==PERCENT||input.LA(1)==SLASH||input.LA(1)==STAR)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set495));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1107, 13);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression6748);
					unaryExpression496=unaryExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression496.Tree);

					}
					break;

				default:
					goto loop136;
				}
			}

			loop136:
				;

			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 90);
			LeaveRule("multiplicativeExpression", 90);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 90, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(1109, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// Java.g:1115:1: unaryExpression : ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<object, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 91);
		TraceIn("unaryExpression", 91);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal497 = default(IToken);
		IToken char_literal499 = default(IToken);
		IToken string_literal501 = default(IToken);
		IToken string_literal503 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unaryExpression498 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression500 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression502 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression504 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpressionNotPlusMinus505 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal497_tree = default(object);
		object char_literal499_tree = default(object);
		object string_literal501_tree = default(object);
		object string_literal503_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(1115, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// Java.g:1116:5: ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus )
			int alt137=5;
			try { DebugEnterDecision(137, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt137 = 1;
				}
				break;
			case SUB:
				{
				alt137 = 2;
				}
				break;
			case PLUSPLUS:
				{
				alt137 = 3;
				}
				break;
			case SUBSUB:
				{
				alt137 = 4;
				}
				break;
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt137 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1116:9: '+' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1116, 9);
				char_literal497=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression6781); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal497_tree = (object)adaptor.Create(char_literal497);
				adaptor.AddChild(root_0, char_literal497_tree);
				}
				DebugLocation(1116, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6784);
				unaryExpression498=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression498.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1117:9: '-' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1117, 9);
				char_literal499=(IToken)Match(input,SUB,Follow._SUB_in_unaryExpression6794); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal499_tree = (object)adaptor.Create(char_literal499);
				adaptor.AddChild(root_0, char_literal499_tree);
				}
				DebugLocation(1117, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpression6796);
				unaryExpression500=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression500.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1118:9: '++' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1118, 9);
				string_literal501=(IToken)Match(input,PLUSPLUS,Follow._PLUSPLUS_in_unaryExpression6806); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal501_tree = (object)adaptor.Create(string_literal501);
				adaptor.AddChild(root_0, string_literal501_tree);
				}
				DebugLocation(1118, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6808);
				unaryExpression502=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression502.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1119:9: '--' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1119, 9);
				string_literal503=(IToken)Match(input,SUBSUB,Follow._SUBSUB_in_unaryExpression6818); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal503_tree = (object)adaptor.Create(string_literal503);
				adaptor.AddChild(root_0, string_literal503_tree);
				}
				DebugLocation(1119, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6820);
				unaryExpression504=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression504.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1120:9: unaryExpressionNotPlusMinus
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1120, 9);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_unaryExpression6830);
				unaryExpressionNotPlusMinus505=unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus505.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 91);
			LeaveRule("unaryExpression", 91);
			LeaveRule_unaryExpression();
			if (state.backtracking > 0) { Memoize(input, 91, unaryExpression_StartIndex); }

		}
		DebugLocation(1121, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_unaryExpressionNotPlusMinus();
	partial void LeaveRule_unaryExpressionNotPlusMinus();

	// $ANTLR start "unaryExpressionNotPlusMinus"
	// Java.g:1123:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );
	[GrammarRule("unaryExpressionNotPlusMinus")]
	private AstParserRuleReturnScope<object, IToken> unaryExpressionNotPlusMinus()
	{
		EnterRule_unaryExpressionNotPlusMinus();
		EnterRule("unaryExpressionNotPlusMinus", 92);
		TraceIn("unaryExpressionNotPlusMinus", 92);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int unaryExpressionNotPlusMinus_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal506 = default(IToken);
		IToken char_literal508 = default(IToken);
		IToken set513 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unaryExpression507 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression509 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> castExpression510 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primary511 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> selector512 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal506_tree = default(object);
		object char_literal508_tree = default(object);
		object set513_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unaryExpressionNotPlusMinus");
		DebugLocation(1123, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// Java.g:1124:5: ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? )
			int alt140=4;
			try { DebugEnterDecision(140, false);
			switch (input.LA(1))
			{
			case TILDE:
				{
				alt140 = 1;
				}
				break;
			case BANG:
				{
				alt140 = 2;
				}
				break;
			case LPAREN:
				{
				int LA140_3 = input.LA(2);

				if ((EvaluatePredicate(synpred214_Java_fragment)))
				{
					alt140 = 3;
				}
				else if ((true))
				{
					alt140 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 140, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt140 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 140, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1124:9: '~' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1124, 9);
				char_literal506=(IToken)Match(input,TILDE,Follow._TILDE_in_unaryExpressionNotPlusMinus6850); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal506_tree = (object)adaptor.Create(char_literal506);
				adaptor.AddChild(root_0, char_literal506_tree);
				}
				DebugLocation(1124, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus6852);
				unaryExpression507=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression507.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1125:9: '!' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1125, 9);
				char_literal508=(IToken)Match(input,BANG,Follow._BANG_in_unaryExpressionNotPlusMinus6862); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal508_tree = (object)adaptor.Create(char_literal508);
				adaptor.AddChild(root_0, char_literal508_tree);
				}
				DebugLocation(1125, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus6864);
				unaryExpression509=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression509.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1126:9: castExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1126, 9);
				PushFollow(Follow._castExpression_in_unaryExpressionNotPlusMinus6874);
				castExpression510=castExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, castExpression510.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1127:9: primary ( selector )* ( '++' | '--' )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1127, 9);
				PushFollow(Follow._primary_in_unaryExpressionNotPlusMinus6884);
				primary511=primary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary511.Tree);
				DebugLocation(1128, 9);
				// Java.g:1128:9: ( selector )*
				try { DebugEnterSubRule(138);
				while (true)
				{
					int alt138=2;
					try { DebugEnterDecision(138, false);
					int LA138_0 = input.LA(1);

					if ((LA138_0==DOT||LA138_0==LBRACKET))
					{
						alt138 = 1;
					}


					} finally { DebugExitDecision(138); }
					switch ( alt138 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1128:10: selector
						{
						DebugLocation(1128, 10);
						PushFollow(Follow._selector_in_unaryExpressionNotPlusMinus6895);
						selector512=selector();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, selector512.Tree);

						}
						break;

					default:
						goto loop138;
					}
				}

				loop138:
					;

				} finally { DebugExitSubRule(138); }

				DebugLocation(1130, 9);
				// Java.g:1130:9: ( '++' | '--' )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==PLUSPLUS||LA139_0==SUBSUB))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:
					{
					DebugLocation(1130, 9);

					set513=(IToken)input.LT(1);
					if (input.LA(1)==PLUSPLUS||input.LA(1)==SUBSUB)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set513));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(139); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpressionNotPlusMinus", 92);
			LeaveRule("unaryExpressionNotPlusMinus", 92);
			LeaveRule_unaryExpressionNotPlusMinus();
			if (state.backtracking > 0) { Memoize(input, 92, unaryExpressionNotPlusMinus_StartIndex); }

		}
		DebugLocation(1133, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionNotPlusMinus"); }
		return retval;

	}
	// $ANTLR end "unaryExpressionNotPlusMinus"

	partial void EnterRule_castExpression();
	partial void LeaveRule_castExpression();

	// $ANTLR start "castExpression"
	// Java.g:1135:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus );
	[GrammarRule("castExpression")]
	private AstParserRuleReturnScope<object, IToken> castExpression()
	{
		EnterRule_castExpression();
		EnterRule("castExpression", 93);
		TraceIn("castExpression", 93);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int castExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal514 = default(IToken);
		IToken char_literal516 = default(IToken);
		IToken char_literal518 = default(IToken);
		IToken char_literal520 = default(IToken);
		AstParserRuleReturnScope<object, IToken> primitiveType515 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpression517 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type519 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unaryExpressionNotPlusMinus521 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal514_tree = default(object);
		object char_literal516_tree = default(object);
		object char_literal518_tree = default(object);
		object char_literal520_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "castExpression");
		DebugLocation(1135, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// Java.g:1136:5: ( '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus )
			int alt141=2;
			try { DebugEnterDecision(141, false);
			int LA141_0 = input.LA(1);

			if ((LA141_0==LPAREN))
			{
				int LA141_1 = input.LA(2);

				if ((EvaluatePredicate(synpred218_Java_fragment)))
				{
					alt141 = 1;
				}
				else if ((true))
				{
					alt141 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 141, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 141, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(141); }
			switch (alt141)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1136:9: '(' primitiveType ')' unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1136, 9);
				char_literal514=(IToken)Match(input,LPAREN,Follow._LPAREN_in_castExpression6965); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal514_tree = (object)adaptor.Create(char_literal514);
				adaptor.AddChild(root_0, char_literal514_tree);
				}
				DebugLocation(1136, 13);
				PushFollow(Follow._primitiveType_in_castExpression6967);
				primitiveType515=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType515.Tree);
				DebugLocation(1136, 27);
				char_literal516=(IToken)Match(input,RPAREN,Follow._RPAREN_in_castExpression6969); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal516_tree = (object)adaptor.Create(char_literal516);
				adaptor.AddChild(root_0, char_literal516_tree);
				}
				DebugLocation(1136, 31);
				PushFollow(Follow._unaryExpression_in_castExpression6971);
				unaryExpression517=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression517.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1137:9: '(' type ')' unaryExpressionNotPlusMinus
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1137, 9);
				char_literal518=(IToken)Match(input,LPAREN,Follow._LPAREN_in_castExpression6981); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal518_tree = (object)adaptor.Create(char_literal518);
				adaptor.AddChild(root_0, char_literal518_tree);
				}
				DebugLocation(1137, 13);
				PushFollow(Follow._type_in_castExpression6983);
				type519=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type519.Tree);
				DebugLocation(1137, 18);
				char_literal520=(IToken)Match(input,RPAREN,Follow._RPAREN_in_castExpression6985); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal520_tree = (object)adaptor.Create(char_literal520);
				adaptor.AddChild(root_0, char_literal520_tree);
				}
				DebugLocation(1137, 22);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_castExpression6987);
				unaryExpressionNotPlusMinus521=unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus521.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("castExpression", 93);
			LeaveRule("castExpression", 93);
			LeaveRule_castExpression();
			if (state.backtracking > 0) { Memoize(input, 93, castExpression_StartIndex); }

		}
		DebugLocation(1138, 4);
		} finally { DebugExitRule(GrammarFileName, "castExpression"); }
		return retval;

	}
	// $ANTLR end "castExpression"

	partial void EnterRule_primary();
	partial void LeaveRule_primary();

	// $ANTLR start "primary"
	// Java.g:1143:1: primary : ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );
	[GrammarRule("primary")]
	private AstParserRuleReturnScope<object, IToken> primary()
	{
		EnterRule_primary();
		EnterRule("primary", 94);
		TraceIn("primary", 94);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int primary_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal523 = default(IToken);
		IToken char_literal524 = default(IToken);
		IToken IDENTIFIER525 = default(IToken);
		IToken IDENTIFIER527 = default(IToken);
		IToken char_literal528 = default(IToken);
		IToken IDENTIFIER529 = default(IToken);
		IToken string_literal531 = default(IToken);
		IToken char_literal536 = default(IToken);
		IToken char_literal537 = default(IToken);
		IToken char_literal538 = default(IToken);
		IToken string_literal539 = default(IToken);
		IToken string_literal540 = default(IToken);
		IToken char_literal541 = default(IToken);
		IToken string_literal542 = default(IToken);
		AstParserRuleReturnScope<object, IToken> parExpression522 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> identifierSuffix526 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> identifierSuffix530 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> superSuffix532 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> literal533 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> creator534 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primitiveType535 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal523_tree = default(object);
		object char_literal524_tree = default(object);
		object IDENTIFIER525_tree = default(object);
		object IDENTIFIER527_tree = default(object);
		object char_literal528_tree = default(object);
		object IDENTIFIER529_tree = default(object);
		object string_literal531_tree = default(object);
		object char_literal536_tree = default(object);
		object char_literal537_tree = default(object);
		object char_literal538_tree = default(object);
		object string_literal539_tree = default(object);
		object string_literal540_tree = default(object);
		object char_literal541_tree = default(object);
		object string_literal542_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary");
		DebugLocation(1143, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// Java.g:1144:5: ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' )
			int alt147=8;
			try { DebugEnterDecision(147, false);
			switch (input.LA(1))
			{
			case LPAREN:
				{
				alt147 = 1;
				}
				break;
			case THIS:
				{
				alt147 = 2;
				}
				break;
			case IDENTIFIER:
				{
				alt147 = 3;
				}
				break;
			case SUPER:
				{
				alt147 = 4;
				}
				break;
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case NULL:
			case STRINGLITERAL:
			case TRUE:
				{
				alt147 = 5;
				}
				break;
			case NEW:
				{
				alt147 = 6;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt147 = 7;
				}
				break;
			case VOID:
				{
				alt147 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 147, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1144:9: parExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1144, 9);
				PushFollow(Follow._parExpression_in_primary7009);
				parExpression522=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression522.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1145:9: 'this' ( '.' IDENTIFIER )* ( identifierSuffix )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1145, 9);
				string_literal523=(IToken)Match(input,THIS,Follow._THIS_in_primary7031); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal523_tree = (object)adaptor.Create(string_literal523);
				adaptor.AddChild(root_0, string_literal523_tree);
				}
				DebugLocation(1146, 9);
				// Java.g:1146:9: ( '.' IDENTIFIER )*
				try { DebugEnterSubRule(142);
				while (true)
				{
					int alt142=2;
					try { DebugEnterDecision(142, false);
					int LA142_0 = input.LA(1);

					if ((LA142_0==DOT))
					{
						int LA142_2 = input.LA(2);

						if ((LA142_2==IDENTIFIER))
						{
							int LA142_3 = input.LA(3);

							if ((EvaluatePredicate(synpred220_Java_fragment)))
							{
								alt142 = 1;
							}


						}


					}


					} finally { DebugExitDecision(142); }
					switch ( alt142 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1146:10: '.' IDENTIFIER
						{
						DebugLocation(1146, 10);
						char_literal524=(IToken)Match(input,DOT,Follow._DOT_in_primary7042); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal524_tree = (object)adaptor.Create(char_literal524);
						adaptor.AddChild(root_0, char_literal524_tree);
						}
						DebugLocation(1146, 14);
						IDENTIFIER525=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary7044); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER525_tree = (object)adaptor.Create(IDENTIFIER525);
						adaptor.AddChild(root_0, IDENTIFIER525_tree);
						}

						}
						break;

					default:
						goto loop142;
					}
				}

				loop142:
					;

				} finally { DebugExitSubRule(142); }

				DebugLocation(1148, 9);
				// Java.g:1148:9: ( identifierSuffix )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, false);
				switch (input.LA(1))
				{
				case LBRACKET:
					{
					int LA143_1 = input.LA(2);

					if ((EvaluatePredicate(synpred221_Java_fragment)))
					{
						alt143 = 1;
					}
					}
					break;
				case LPAREN:
					{
					alt143 = 1;
					}
					break;
				case DOT:
					{
					int LA143_3 = input.LA(2);

					if ((EvaluatePredicate(synpred221_Java_fragment)))
					{
						alt143 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1148:10: identifierSuffix
					{
					DebugLocation(1148, 10);
					PushFollow(Follow._identifierSuffix_in_primary7066);
					identifierSuffix526=identifierSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifierSuffix526.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(143); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1150:9: IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1150, 9);
				IDENTIFIER527=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary7087); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER527_tree = (object)adaptor.Create(IDENTIFIER527);
				adaptor.AddChild(root_0, IDENTIFIER527_tree);
				}
				DebugLocation(1151, 9);
				// Java.g:1151:9: ( '.' IDENTIFIER )*
				try { DebugEnterSubRule(144);
				while (true)
				{
					int alt144=2;
					try { DebugEnterDecision(144, false);
					int LA144_0 = input.LA(1);

					if ((LA144_0==DOT))
					{
						int LA144_2 = input.LA(2);

						if ((LA144_2==IDENTIFIER))
						{
							int LA144_3 = input.LA(3);

							if ((EvaluatePredicate(synpred223_Java_fragment)))
							{
								alt144 = 1;
							}


						}


					}


					} finally { DebugExitDecision(144); }
					switch ( alt144 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1151:10: '.' IDENTIFIER
						{
						DebugLocation(1151, 10);
						char_literal528=(IToken)Match(input,DOT,Follow._DOT_in_primary7098); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal528_tree = (object)adaptor.Create(char_literal528);
						adaptor.AddChild(root_0, char_literal528_tree);
						}
						DebugLocation(1151, 14);
						IDENTIFIER529=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary7100); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER529_tree = (object)adaptor.Create(IDENTIFIER529);
						adaptor.AddChild(root_0, IDENTIFIER529_tree);
						}

						}
						break;

					default:
						goto loop144;
					}
				}

				loop144:
					;

				} finally { DebugExitSubRule(144); }

				DebugLocation(1153, 9);
				// Java.g:1153:9: ( identifierSuffix )?
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, false);
				switch (input.LA(1))
				{
				case LBRACKET:
					{
					int LA145_1 = input.LA(2);

					if ((EvaluatePredicate(synpred224_Java_fragment)))
					{
						alt145 = 1;
					}
					}
					break;
				case LPAREN:
					{
					alt145 = 1;
					}
					break;
				case DOT:
					{
					int LA145_3 = input.LA(2);

					if ((EvaluatePredicate(synpred224_Java_fragment)))
					{
						alt145 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1153:10: identifierSuffix
					{
					DebugLocation(1153, 10);
					PushFollow(Follow._identifierSuffix_in_primary7122);
					identifierSuffix530=identifierSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifierSuffix530.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(145); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1155:9: 'super' superSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1155, 9);
				string_literal531=(IToken)Match(input,SUPER,Follow._SUPER_in_primary7143); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal531_tree = (object)adaptor.Create(string_literal531);
				adaptor.AddChild(root_0, string_literal531_tree);
				}
				DebugLocation(1156, 9);
				PushFollow(Follow._superSuffix_in_primary7153);
				superSuffix532=superSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, superSuffix532.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1157:9: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1157, 9);
				PushFollow(Follow._literal_in_primary7163);
				literal533=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal533.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1158:9: creator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1158, 9);
				PushFollow(Follow._creator_in_primary7173);
				creator534=creator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, creator534.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1159:9: primitiveType ( '[' ']' )* '.' 'class'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1159, 9);
				PushFollow(Follow._primitiveType_in_primary7183);
				primitiveType535=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType535.Tree);
				DebugLocation(1160, 9);
				// Java.g:1160:9: ( '[' ']' )*
				try { DebugEnterSubRule(146);
				while (true)
				{
					int alt146=2;
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==LBRACKET))
					{
						alt146 = 1;
					}


					} finally { DebugExitDecision(146); }
					switch ( alt146 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1160:10: '[' ']'
						{
						DebugLocation(1160, 10);
						char_literal536=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_primary7194); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal536_tree = (object)adaptor.Create(char_literal536);
						adaptor.AddChild(root_0, char_literal536_tree);
						}
						DebugLocation(1160, 14);
						char_literal537=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_primary7196); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal537_tree = (object)adaptor.Create(char_literal537);
						adaptor.AddChild(root_0, char_literal537_tree);
						}

						}
						break;

					default:
						goto loop146;
					}
				}

				loop146:
					;

				} finally { DebugExitSubRule(146); }

				DebugLocation(1162, 9);
				char_literal538=(IToken)Match(input,DOT,Follow._DOT_in_primary7217); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal538_tree = (object)adaptor.Create(char_literal538);
				adaptor.AddChild(root_0, char_literal538_tree);
				}
				DebugLocation(1162, 13);
				string_literal539=(IToken)Match(input,CLASS,Follow._CLASS_in_primary7219); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal539_tree = (object)adaptor.Create(string_literal539);
				adaptor.AddChild(root_0, string_literal539_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1163:9: 'void' '.' 'class'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1163, 9);
				string_literal540=(IToken)Match(input,VOID,Follow._VOID_in_primary7229); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal540_tree = (object)adaptor.Create(string_literal540);
				adaptor.AddChild(root_0, string_literal540_tree);
				}
				DebugLocation(1163, 16);
				char_literal541=(IToken)Match(input,DOT,Follow._DOT_in_primary7231); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal541_tree = (object)adaptor.Create(char_literal541);
				adaptor.AddChild(root_0, char_literal541_tree);
				}
				DebugLocation(1163, 20);
				string_literal542=(IToken)Match(input,CLASS,Follow._CLASS_in_primary7233); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal542_tree = (object)adaptor.Create(string_literal542);
				adaptor.AddChild(root_0, string_literal542_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary", 94);
			LeaveRule("primary", 94);
			LeaveRule_primary();
			if (state.backtracking > 0) { Memoize(input, 94, primary_StartIndex); }

		}
		DebugLocation(1164, 4);
		} finally { DebugExitRule(GrammarFileName, "primary"); }
		return retval;

	}
	// $ANTLR end "primary"

	partial void EnterRule_superSuffix();
	partial void LeaveRule_superSuffix();

	// $ANTLR start "superSuffix"
	// Java.g:1167:1: superSuffix : ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? );
	[GrammarRule("superSuffix")]
	private AstParserRuleReturnScope<object, IToken> superSuffix()
	{
		EnterRule_superSuffix();
		EnterRule("superSuffix", 95);
		TraceIn("superSuffix", 95);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int superSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal544 = default(IToken);
		IToken IDENTIFIER546 = default(IToken);
		AstParserRuleReturnScope<object, IToken> arguments543 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeArguments545 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments547 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal544_tree = default(object);
		object IDENTIFIER546_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "superSuffix");
		DebugLocation(1167, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// Java.g:1168:5: ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? )
			int alt150=2;
			try { DebugEnterDecision(150, false);
			int LA150_0 = input.LA(1);

			if ((LA150_0==LPAREN))
			{
				alt150 = 1;
			}
			else if ((LA150_0==DOT))
			{
				alt150 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 150, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1168:9: arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1168, 9);
				PushFollow(Follow._arguments_in_superSuffix7259);
				arguments543=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments543.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1169:9: '.' ( typeArguments )? IDENTIFIER ( arguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1169, 9);
				char_literal544=(IToken)Match(input,DOT,Follow._DOT_in_superSuffix7269); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal544_tree = (object)adaptor.Create(char_literal544);
				adaptor.AddChild(root_0, char_literal544_tree);
				}
				DebugLocation(1169, 13);
				// Java.g:1169:13: ( typeArguments )?
				int alt148=2;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, false);
				int LA148_0 = input.LA(1);

				if ((LA148_0==LT))
				{
					alt148 = 1;
				}
				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1169:14: typeArguments
					{
					DebugLocation(1169, 14);
					PushFollow(Follow._typeArguments_in_superSuffix7272);
					typeArguments545=typeArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments545.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(148); }

				DebugLocation(1171, 9);
				IDENTIFIER546=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_superSuffix7293); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER546_tree = (object)adaptor.Create(IDENTIFIER546);
				adaptor.AddChild(root_0, IDENTIFIER546_tree);
				}
				DebugLocation(1172, 9);
				// Java.g:1172:9: ( arguments )?
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, false);
				int LA149_0 = input.LA(1);

				if ((LA149_0==LPAREN))
				{
					alt149 = 1;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1172:10: arguments
					{
					DebugLocation(1172, 10);
					PushFollow(Follow._arguments_in_superSuffix7304);
					arguments547=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments547.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(149); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("superSuffix", 95);
			LeaveRule("superSuffix", 95);
			LeaveRule_superSuffix();
			if (state.backtracking > 0) { Memoize(input, 95, superSuffix_StartIndex); }

		}
		DebugLocation(1174, 4);
		} finally { DebugExitRule(GrammarFileName, "superSuffix"); }
		return retval;

	}
	// $ANTLR end "superSuffix"

	partial void EnterRule_identifierSuffix();
	partial void LeaveRule_identifierSuffix();

	// $ANTLR start "identifierSuffix"
	// Java.g:1177:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator );
	[GrammarRule("identifierSuffix")]
	private AstParserRuleReturnScope<object, IToken> identifierSuffix()
	{
		EnterRule_identifierSuffix();
		EnterRule("identifierSuffix", 96);
		TraceIn("identifierSuffix", 96);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int identifierSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal548 = default(IToken);
		IToken char_literal549 = default(IToken);
		IToken char_literal550 = default(IToken);
		IToken string_literal551 = default(IToken);
		IToken char_literal552 = default(IToken);
		IToken char_literal554 = default(IToken);
		IToken char_literal556 = default(IToken);
		IToken string_literal557 = default(IToken);
		IToken char_literal558 = default(IToken);
		IToken IDENTIFIER560 = default(IToken);
		IToken char_literal562 = default(IToken);
		IToken string_literal563 = default(IToken);
		IToken char_literal564 = default(IToken);
		IToken string_literal565 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression553 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments555 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments559 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments561 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments566 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> innerCreator567 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal548_tree = default(object);
		object char_literal549_tree = default(object);
		object char_literal550_tree = default(object);
		object string_literal551_tree = default(object);
		object char_literal552_tree = default(object);
		object char_literal554_tree = default(object);
		object char_literal556_tree = default(object);
		object string_literal557_tree = default(object);
		object char_literal558_tree = default(object);
		object IDENTIFIER560_tree = default(object);
		object char_literal562_tree = default(object);
		object string_literal563_tree = default(object);
		object char_literal564_tree = default(object);
		object string_literal565_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifierSuffix");
		DebugLocation(1177, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// Java.g:1178:5: ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator )
			int alt153=8;
			try { DebugEnterDecision(153, false);
			switch (input.LA(1))
			{
			case LBRACKET:
				{
				int LA153_1 = input.LA(2);

				if ((LA153_1==RBRACKET))
				{
					alt153 = 1;
				}
				else if ((LA153_1==BANG||LA153_1==BOOLEAN||LA153_1==BYTE||(LA153_1>=CHAR && LA153_1<=CHARLITERAL)||(LA153_1>=DOUBLE && LA153_1<=DOUBLELITERAL)||LA153_1==FALSE||(LA153_1>=FLOAT && LA153_1<=FLOATLITERAL)||LA153_1==IDENTIFIER||LA153_1==INT||LA153_1==INTLITERAL||(LA153_1>=LONG && LA153_1<=LPAREN)||(LA153_1>=NEW && LA153_1<=NULL)||LA153_1==PLUS||LA153_1==PLUSPLUS||LA153_1==SHORT||(LA153_1>=STRINGLITERAL && LA153_1<=SUB)||(LA153_1>=SUBSUB && LA153_1<=SUPER)||LA153_1==THIS||LA153_1==TILDE||LA153_1==TRUE||LA153_1==VOID))
				{
					alt153 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 153, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LPAREN:
				{
				alt153 = 3;
				}
				break;
			case DOT:
				{
				switch (input.LA(2))
				{
				case CLASS:
					{
					alt153 = 4;
					}
					break;
				case THIS:
					{
					alt153 = 6;
					}
					break;
				case SUPER:
					{
					alt153 = 7;
					}
					break;
				case NEW:
					{
					alt153 = 8;
					}
					break;
				case LT:
					{
					alt153 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 153, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 153, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1178:9: ( '[' ']' )+ '.' 'class'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1178, 9);
				// Java.g:1178:9: ( '[' ']' )+
				int cnt151=0;
				try { DebugEnterSubRule(151);
				while (true)
				{
					int alt151=2;
					try { DebugEnterDecision(151, false);
					int LA151_0 = input.LA(1);

					if ((LA151_0==LBRACKET))
					{
						alt151 = 1;
					}


					} finally { DebugExitDecision(151); }
					switch (alt151)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1178:10: '[' ']'
						{
						DebugLocation(1178, 10);
						char_literal548=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_identifierSuffix7337); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal548_tree = (object)adaptor.Create(char_literal548);
						adaptor.AddChild(root_0, char_literal548_tree);
						}
						DebugLocation(1178, 14);
						char_literal549=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_identifierSuffix7339); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal549_tree = (object)adaptor.Create(char_literal549);
						adaptor.AddChild(root_0, char_literal549_tree);
						}

						}
						break;

					default:
						if (cnt151 >= 1)
							goto loop151;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee151 = new EarlyExitException( 151, input );
						DebugRecognitionException(eee151);
						throw eee151;
					}
					cnt151++;
				}
				loop151:
					;

				} finally { DebugExitSubRule(151); }

				DebugLocation(1180, 9);
				char_literal550=(IToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7360); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal550_tree = (object)adaptor.Create(char_literal550);
				adaptor.AddChild(root_0, char_literal550_tree);
				}
				DebugLocation(1180, 13);
				string_literal551=(IToken)Match(input,CLASS,Follow._CLASS_in_identifierSuffix7362); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal551_tree = (object)adaptor.Create(string_literal551);
				adaptor.AddChild(root_0, string_literal551_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1181:9: ( '[' expression ']' )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1181, 9);
				// Java.g:1181:9: ( '[' expression ']' )+
				int cnt152=0;
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==LBRACKET))
					{
						int LA152_2 = input.LA(2);

						if ((EvaluatePredicate(synpred236_Java_fragment)))
						{
							alt152 = 1;
						}


					}


					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1181:10: '[' expression ']'
						{
						DebugLocation(1181, 10);
						char_literal552=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_identifierSuffix7373); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal552_tree = (object)adaptor.Create(char_literal552);
						adaptor.AddChild(root_0, char_literal552_tree);
						}
						DebugLocation(1181, 14);
						PushFollow(Follow._expression_in_identifierSuffix7375);
						expression553=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression553.Tree);
						DebugLocation(1181, 25);
						char_literal554=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_identifierSuffix7377); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal554_tree = (object)adaptor.Create(char_literal554);
						adaptor.AddChild(root_0, char_literal554_tree);
						}

						}
						break;

					default:
						if (cnt152 >= 1)
							goto loop152;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee152 = new EarlyExitException( 152, input );
						DebugRecognitionException(eee152);
						throw eee152;
					}
					cnt152++;
				}
				loop152:
					;

				} finally { DebugExitSubRule(152); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1183:9: arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1183, 9);
				PushFollow(Follow._arguments_in_identifierSuffix7398);
				arguments555=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments555.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1184:9: '.' 'class'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1184, 9);
				char_literal556=(IToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7408); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal556_tree = (object)adaptor.Create(char_literal556);
				adaptor.AddChild(root_0, char_literal556_tree);
				}
				DebugLocation(1184, 13);
				string_literal557=(IToken)Match(input,CLASS,Follow._CLASS_in_identifierSuffix7410); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal557_tree = (object)adaptor.Create(string_literal557);
				adaptor.AddChild(root_0, string_literal557_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1185:9: '.' nonWildcardTypeArguments IDENTIFIER arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1185, 9);
				char_literal558=(IToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7420); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal558_tree = (object)adaptor.Create(char_literal558);
				adaptor.AddChild(root_0, char_literal558_tree);
				}
				DebugLocation(1185, 13);
				PushFollow(Follow._nonWildcardTypeArguments_in_identifierSuffix7422);
				nonWildcardTypeArguments559=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments559.Tree);
				DebugLocation(1185, 38);
				IDENTIFIER560=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifierSuffix7424); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER560_tree = (object)adaptor.Create(IDENTIFIER560);
				adaptor.AddChild(root_0, IDENTIFIER560_tree);
				}
				DebugLocation(1185, 49);
				PushFollow(Follow._arguments_in_identifierSuffix7426);
				arguments561=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments561.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1186:9: '.' 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1186, 9);
				char_literal562=(IToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7436); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal562_tree = (object)adaptor.Create(char_literal562);
				adaptor.AddChild(root_0, char_literal562_tree);
				}
				DebugLocation(1186, 13);
				string_literal563=(IToken)Match(input,THIS,Follow._THIS_in_identifierSuffix7438); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal563_tree = (object)adaptor.Create(string_literal563);
				adaptor.AddChild(root_0, string_literal563_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1187:9: '.' 'super' arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1187, 9);
				char_literal564=(IToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7448); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal564_tree = (object)adaptor.Create(char_literal564);
				adaptor.AddChild(root_0, char_literal564_tree);
				}
				DebugLocation(1187, 13);
				string_literal565=(IToken)Match(input,SUPER,Follow._SUPER_in_identifierSuffix7450); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal565_tree = (object)adaptor.Create(string_literal565);
				adaptor.AddChild(root_0, string_literal565_tree);
				}
				DebugLocation(1187, 21);
				PushFollow(Follow._arguments_in_identifierSuffix7452);
				arguments566=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments566.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1188:9: innerCreator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1188, 9);
				PushFollow(Follow._innerCreator_in_identifierSuffix7462);
				innerCreator567=innerCreator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, innerCreator567.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifierSuffix", 96);
			LeaveRule("identifierSuffix", 96);
			LeaveRule_identifierSuffix();
			if (state.backtracking > 0) { Memoize(input, 96, identifierSuffix_StartIndex); }

		}
		DebugLocation(1189, 4);
		} finally { DebugExitRule(GrammarFileName, "identifierSuffix"); }
		return retval;

	}
	// $ANTLR end "identifierSuffix"

	partial void EnterRule_selector();
	partial void LeaveRule_selector();

	// $ANTLR start "selector"
	// Java.g:1192:1: selector : ( '.' IDENTIFIER ( arguments )? | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' );
	[GrammarRule("selector")]
	private AstParserRuleReturnScope<object, IToken> selector()
	{
		EnterRule_selector();
		EnterRule("selector", 97);
		TraceIn("selector", 97);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int selector_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal568 = default(IToken);
		IToken IDENTIFIER569 = default(IToken);
		IToken char_literal571 = default(IToken);
		IToken IDENTIFIER573 = default(IToken);
		IToken char_literal575 = default(IToken);
		IToken string_literal576 = default(IToken);
		IToken char_literal577 = default(IToken);
		IToken string_literal578 = default(IToken);
		IToken char_literal581 = default(IToken);
		IToken char_literal583 = default(IToken);
		AstParserRuleReturnScope<object, IToken> arguments570 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments572 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arguments574 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> superSuffix579 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> innerCreator580 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression582 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal568_tree = default(object);
		object IDENTIFIER569_tree = default(object);
		object char_literal571_tree = default(object);
		object IDENTIFIER573_tree = default(object);
		object char_literal575_tree = default(object);
		object string_literal576_tree = default(object);
		object char_literal577_tree = default(object);
		object string_literal578_tree = default(object);
		object char_literal581_tree = default(object);
		object char_literal583_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "selector");
		DebugLocation(1192, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }

			// Java.g:1193:5: ( '.' IDENTIFIER ( arguments )? | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' )
			int alt155=6;
			try { DebugEnterDecision(155, false);
			int LA155_0 = input.LA(1);

			if ((LA155_0==DOT))
			{
				switch (input.LA(2))
				{
				case IDENTIFIER:
					{
					alt155 = 1;
					}
					break;
				case THIS:
					{
					alt155 = 3;
					}
					break;
				case SUPER:
					{
					alt155 = 4;
					}
					break;
				case NEW:
					{
					alt155 = 5;
					}
					break;
				case LT:
					{
					alt155 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 155, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA155_0==LBRACKET))
			{
				alt155 = 6;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 155, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1193:9: '.' IDENTIFIER ( arguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1193, 9);
				char_literal568=(IToken)Match(input,DOT,Follow._DOT_in_selector7484); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal568_tree = (object)adaptor.Create(char_literal568);
				adaptor.AddChild(root_0, char_literal568_tree);
				}
				DebugLocation(1193, 13);
				IDENTIFIER569=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_selector7486); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER569_tree = (object)adaptor.Create(IDENTIFIER569);
				adaptor.AddChild(root_0, IDENTIFIER569_tree);
				}
				DebugLocation(1193, 24);
				// Java.g:1193:24: ( arguments )?
				int alt154=2;
				try { DebugEnterSubRule(154);
				try { DebugEnterDecision(154, false);
				int LA154_0 = input.LA(1);

				if ((LA154_0==LPAREN))
				{
					alt154 = 1;
				}
				} finally { DebugExitDecision(154); }
				switch (alt154)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1193:24: arguments
					{
					DebugLocation(1193, 24);
					PushFollow(Follow._arguments_in_selector7488);
					arguments570=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments570.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(154); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1194:9: '.' nonWildcardTypeArguments IDENTIFIER arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1194, 9);
				char_literal571=(IToken)Match(input,DOT,Follow._DOT_in_selector7499); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal571_tree = (object)adaptor.Create(char_literal571);
				adaptor.AddChild(root_0, char_literal571_tree);
				}
				DebugLocation(1194, 13);
				PushFollow(Follow._nonWildcardTypeArguments_in_selector7501);
				nonWildcardTypeArguments572=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments572.Tree);
				DebugLocation(1194, 38);
				IDENTIFIER573=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_selector7503); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER573_tree = (object)adaptor.Create(IDENTIFIER573);
				adaptor.AddChild(root_0, IDENTIFIER573_tree);
				}
				DebugLocation(1194, 49);
				PushFollow(Follow._arguments_in_selector7505);
				arguments574=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments574.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1195:9: '.' 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1195, 9);
				char_literal575=(IToken)Match(input,DOT,Follow._DOT_in_selector7516); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal575_tree = (object)adaptor.Create(char_literal575);
				adaptor.AddChild(root_0, char_literal575_tree);
				}
				DebugLocation(1195, 13);
				string_literal576=(IToken)Match(input,THIS,Follow._THIS_in_selector7518); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal576_tree = (object)adaptor.Create(string_literal576);
				adaptor.AddChild(root_0, string_literal576_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1196:9: '.' 'super' superSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1196, 9);
				char_literal577=(IToken)Match(input,DOT,Follow._DOT_in_selector7528); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal577_tree = (object)adaptor.Create(char_literal577);
				adaptor.AddChild(root_0, char_literal577_tree);
				}
				DebugLocation(1196, 13);
				string_literal578=(IToken)Match(input,SUPER,Follow._SUPER_in_selector7530); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal578_tree = (object)adaptor.Create(string_literal578);
				adaptor.AddChild(root_0, string_literal578_tree);
				}
				DebugLocation(1197, 9);
				PushFollow(Follow._superSuffix_in_selector7540);
				superSuffix579=superSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, superSuffix579.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1198:9: innerCreator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1198, 9);
				PushFollow(Follow._innerCreator_in_selector7550);
				innerCreator580=innerCreator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, innerCreator580.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1199:9: '[' expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1199, 9);
				char_literal581=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_selector7560); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal581_tree = (object)adaptor.Create(char_literal581);
				adaptor.AddChild(root_0, char_literal581_tree);
				}
				DebugLocation(1199, 13);
				PushFollow(Follow._expression_in_selector7562);
				expression582=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression582.Tree);
				DebugLocation(1199, 24);
				char_literal583=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_selector7564); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal583_tree = (object)adaptor.Create(char_literal583);
				adaptor.AddChild(root_0, char_literal583_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector", 97);
			LeaveRule("selector", 97);
			LeaveRule_selector();
			if (state.backtracking > 0) { Memoize(input, 97, selector_StartIndex); }

		}
		DebugLocation(1200, 4);
		} finally { DebugExitRule(GrammarFileName, "selector"); }
		return retval;

	}
	// $ANTLR end "selector"

	partial void EnterRule_creator();
	partial void LeaveRule_creator();

	// $ANTLR start "creator"
	// Java.g:1202:1: creator : ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator );
	[GrammarRule("creator")]
	private AstParserRuleReturnScope<object, IToken> creator()
	{
		EnterRule_creator();
		EnterRule("creator", 98);
		TraceIn("creator", 98);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int creator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal584 = default(IToken);
		IToken string_literal588 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments585 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classOrInterfaceType586 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classCreatorRest587 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classOrInterfaceType589 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classCreatorRest590 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayCreator591 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal584_tree = default(object);
		object string_literal588_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "creator");
		DebugLocation(1202, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }

			// Java.g:1203:5: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator )
			int alt156=3;
			try { DebugEnterDecision(156, false);
			int LA156_0 = input.LA(1);

			if ((LA156_0==NEW))
			{
				int LA156_1 = input.LA(2);

				if ((EvaluatePredicate(synpred249_Java_fragment)))
				{
					alt156 = 1;
				}
				else if ((EvaluatePredicate(synpred250_Java_fragment)))
				{
					alt156 = 2;
				}
				else if ((true))
				{
					alt156 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 156, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 156, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1203:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1203, 9);
				string_literal584=(IToken)Match(input,NEW,Follow._NEW_in_creator7584); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal584_tree = (object)adaptor.Create(string_literal584);
				adaptor.AddChild(root_0, string_literal584_tree);
				}
				DebugLocation(1203, 15);
				PushFollow(Follow._nonWildcardTypeArguments_in_creator7586);
				nonWildcardTypeArguments585=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments585.Tree);
				DebugLocation(1203, 40);
				PushFollow(Follow._classOrInterfaceType_in_creator7588);
				classOrInterfaceType586=classOrInterfaceType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceType586.Tree);
				DebugLocation(1203, 61);
				PushFollow(Follow._classCreatorRest_in_creator7590);
				classCreatorRest587=classCreatorRest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classCreatorRest587.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1204:9: 'new' classOrInterfaceType classCreatorRest
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1204, 9);
				string_literal588=(IToken)Match(input,NEW,Follow._NEW_in_creator7600); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal588_tree = (object)adaptor.Create(string_literal588);
				adaptor.AddChild(root_0, string_literal588_tree);
				}
				DebugLocation(1204, 15);
				PushFollow(Follow._classOrInterfaceType_in_creator7602);
				classOrInterfaceType589=classOrInterfaceType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceType589.Tree);
				DebugLocation(1204, 36);
				PushFollow(Follow._classCreatorRest_in_creator7604);
				classCreatorRest590=classCreatorRest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classCreatorRest590.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1205:9: arrayCreator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1205, 9);
				PushFollow(Follow._arrayCreator_in_creator7614);
				arrayCreator591=arrayCreator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayCreator591.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("creator", 98);
			LeaveRule("creator", 98);
			LeaveRule_creator();
			if (state.backtracking > 0) { Memoize(input, 98, creator_StartIndex); }

		}
		DebugLocation(1206, 4);
		} finally { DebugExitRule(GrammarFileName, "creator"); }
		return retval;

	}
	// $ANTLR end "creator"

	partial void EnterRule_arrayCreator();
	partial void LeaveRule_arrayCreator();

	// $ANTLR start "arrayCreator"
	// Java.g:1208:1: arrayCreator : ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* );
	[GrammarRule("arrayCreator")]
	private AstParserRuleReturnScope<object, IToken> arrayCreator()
	{
		EnterRule_arrayCreator();
		EnterRule("arrayCreator", 99);
		TraceIn("arrayCreator", 99);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayCreator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal592 = default(IToken);
		IToken char_literal594 = default(IToken);
		IToken char_literal595 = default(IToken);
		IToken char_literal596 = default(IToken);
		IToken char_literal597 = default(IToken);
		IToken string_literal599 = default(IToken);
		IToken char_literal601 = default(IToken);
		IToken char_literal603 = default(IToken);
		IToken char_literal604 = default(IToken);
		IToken char_literal606 = default(IToken);
		IToken char_literal607 = default(IToken);
		IToken char_literal608 = default(IToken);
		AstParserRuleReturnScope<object, IToken> createdName593 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayInitializer598 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> createdName600 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression602 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression605 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal592_tree = default(object);
		object char_literal594_tree = default(object);
		object char_literal595_tree = default(object);
		object char_literal596_tree = default(object);
		object char_literal597_tree = default(object);
		object string_literal599_tree = default(object);
		object char_literal601_tree = default(object);
		object char_literal603_tree = default(object);
		object char_literal604_tree = default(object);
		object char_literal606_tree = default(object);
		object char_literal607_tree = default(object);
		object char_literal608_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayCreator");
		DebugLocation(1208, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }

			// Java.g:1209:5: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* )
			int alt160=2;
			try { DebugEnterDecision(160, false);
			int LA160_0 = input.LA(1);

			if ((LA160_0==NEW))
			{
				int LA160_1 = input.LA(2);

				if ((EvaluatePredicate(synpred252_Java_fragment)))
				{
					alt160 = 1;
				}
				else if ((true))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 160, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1209:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1209, 9);
				string_literal592=(IToken)Match(input,NEW,Follow._NEW_in_arrayCreator7634); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal592_tree = (object)adaptor.Create(string_literal592);
				adaptor.AddChild(root_0, string_literal592_tree);
				}
				DebugLocation(1209, 15);
				PushFollow(Follow._createdName_in_arrayCreator7636);
				createdName593=createdName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createdName593.Tree);
				DebugLocation(1210, 9);
				char_literal594=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7646); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal594_tree = (object)adaptor.Create(char_literal594);
				adaptor.AddChild(root_0, char_literal594_tree);
				}
				DebugLocation(1210, 13);
				char_literal595=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7648); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal595_tree = (object)adaptor.Create(char_literal595);
				adaptor.AddChild(root_0, char_literal595_tree);
				}
				DebugLocation(1211, 9);
				// Java.g:1211:9: ( '[' ']' )*
				try { DebugEnterSubRule(157);
				while (true)
				{
					int alt157=2;
					try { DebugEnterDecision(157, false);
					int LA157_0 = input.LA(1);

					if ((LA157_0==LBRACKET))
					{
						alt157 = 1;
					}


					} finally { DebugExitDecision(157); }
					switch ( alt157 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1211:10: '[' ']'
						{
						DebugLocation(1211, 10);
						char_literal596=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7659); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal596_tree = (object)adaptor.Create(char_literal596);
						adaptor.AddChild(root_0, char_literal596_tree);
						}
						DebugLocation(1211, 14);
						char_literal597=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7661); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal597_tree = (object)adaptor.Create(char_literal597);
						adaptor.AddChild(root_0, char_literal597_tree);
						}

						}
						break;

					default:
						goto loop157;
					}
				}

				loop157:
					;

				} finally { DebugExitSubRule(157); }

				DebugLocation(1213, 9);
				PushFollow(Follow._arrayInitializer_in_arrayCreator7682);
				arrayInitializer598=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer598.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1215:9: 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1215, 9);
				string_literal599=(IToken)Match(input,NEW,Follow._NEW_in_arrayCreator7693); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal599_tree = (object)adaptor.Create(string_literal599);
				adaptor.AddChild(root_0, string_literal599_tree);
				}
				DebugLocation(1215, 15);
				PushFollow(Follow._createdName_in_arrayCreator7695);
				createdName600=createdName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createdName600.Tree);
				DebugLocation(1216, 9);
				char_literal601=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7705); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal601_tree = (object)adaptor.Create(char_literal601);
				adaptor.AddChild(root_0, char_literal601_tree);
				}
				DebugLocation(1216, 13);
				PushFollow(Follow._expression_in_arrayCreator7707);
				expression602=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression602.Tree);
				DebugLocation(1217, 9);
				char_literal603=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7717); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal603_tree = (object)adaptor.Create(char_literal603);
				adaptor.AddChild(root_0, char_literal603_tree);
				}
				DebugLocation(1218, 9);
				// Java.g:1218:9: ( '[' expression ']' )*
				try { DebugEnterSubRule(158);
				while (true)
				{
					int alt158=2;
					try { DebugEnterDecision(158, false);
					int LA158_0 = input.LA(1);

					if ((LA158_0==LBRACKET))
					{
						int LA158_1 = input.LA(2);

						if ((EvaluatePredicate(synpred253_Java_fragment)))
						{
							alt158 = 1;
						}


					}


					} finally { DebugExitDecision(158); }
					switch ( alt158 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1218:13: '[' expression ']'
						{
						DebugLocation(1218, 13);
						char_literal604=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7731); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal604_tree = (object)adaptor.Create(char_literal604);
						adaptor.AddChild(root_0, char_literal604_tree);
						}
						DebugLocation(1218, 17);
						PushFollow(Follow._expression_in_arrayCreator7733);
						expression605=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression605.Tree);
						DebugLocation(1219, 13);
						char_literal606=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7747); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal606_tree = (object)adaptor.Create(char_literal606);
						adaptor.AddChild(root_0, char_literal606_tree);
						}

						}
						break;

					default:
						goto loop158;
					}
				}

				loop158:
					;

				} finally { DebugExitSubRule(158); }

				DebugLocation(1221, 9);
				// Java.g:1221:9: ( '[' ']' )*
				try { DebugEnterSubRule(159);
				while (true)
				{
					int alt159=2;
					try { DebugEnterDecision(159, false);
					int LA159_0 = input.LA(1);

					if ((LA159_0==LBRACKET))
					{
						int LA159_2 = input.LA(2);

						if ((LA159_2==RBRACKET))
						{
							alt159 = 1;
						}


					}


					} finally { DebugExitDecision(159); }
					switch ( alt159 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1221:10: '[' ']'
						{
						DebugLocation(1221, 10);
						char_literal607=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7769); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal607_tree = (object)adaptor.Create(char_literal607);
						adaptor.AddChild(root_0, char_literal607_tree);
						}
						DebugLocation(1221, 14);
						char_literal608=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7771); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal608_tree = (object)adaptor.Create(char_literal608);
						adaptor.AddChild(root_0, char_literal608_tree);
						}

						}
						break;

					default:
						goto loop159;
					}
				}

				loop159:
					;

				} finally { DebugExitSubRule(159); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayCreator", 99);
			LeaveRule("arrayCreator", 99);
			LeaveRule_arrayCreator();
			if (state.backtracking > 0) { Memoize(input, 99, arrayCreator_StartIndex); }

		}
		DebugLocation(1223, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayCreator"); }
		return retval;

	}
	// $ANTLR end "arrayCreator"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();

	// $ANTLR start "variableInitializer"
	// Java.g:1225:1: variableInitializer : ( arrayInitializer | expression );
	[GrammarRule("variableInitializer")]
	private AstParserRuleReturnScope<object, IToken> variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 100);
		TraceIn("variableInitializer", 100);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variableInitializer_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> arrayInitializer609 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression610 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(1225, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }

			// Java.g:1226:5: ( arrayInitializer | expression )
			int alt161=2;
			try { DebugEnterDecision(161, false);
			int LA161_0 = input.LA(1);

			if ((LA161_0==LBRACE))
			{
				alt161 = 1;
			}
			else if ((LA161_0==BANG||LA161_0==BOOLEAN||LA161_0==BYTE||(LA161_0>=CHAR && LA161_0<=CHARLITERAL)||(LA161_0>=DOUBLE && LA161_0<=DOUBLELITERAL)||LA161_0==FALSE||(LA161_0>=FLOAT && LA161_0<=FLOATLITERAL)||LA161_0==IDENTIFIER||LA161_0==INT||LA161_0==INTLITERAL||(LA161_0>=LONG && LA161_0<=LPAREN)||(LA161_0>=NEW && LA161_0<=NULL)||LA161_0==PLUS||LA161_0==PLUSPLUS||LA161_0==SHORT||(LA161_0>=STRINGLITERAL && LA161_0<=SUB)||(LA161_0>=SUBSUB && LA161_0<=SUPER)||LA161_0==THIS||LA161_0==TILDE||LA161_0==TRUE||LA161_0==VOID))
			{
				alt161 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 161, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1226:9: arrayInitializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1226, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer7802);
				arrayInitializer609=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer609.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1227:9: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1227, 9);
				PushFollow(Follow._expression_in_variableInitializer7812);
				expression610=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression610.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableInitializer", 100);
			LeaveRule("variableInitializer", 100);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 100, variableInitializer_StartIndex); }

		}
		DebugLocation(1228, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return retval;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();

	// $ANTLR start "arrayInitializer"
	// Java.g:1230:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' ;
	[GrammarRule("arrayInitializer")]
	private AstParserRuleReturnScope<object, IToken> arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 101);
		TraceIn("arrayInitializer", 101);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayInitializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal611 = default(IToken);
		IToken char_literal613 = default(IToken);
		IToken char_literal615 = default(IToken);
		IToken char_literal616 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableInitializer612 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variableInitializer614 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal611_tree = default(object);
		object char_literal613_tree = default(object);
		object char_literal615_tree = default(object);
		object char_literal616_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(1230, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }

			// Java.g:1231:5: ( '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// Java.g:1231:9: '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1231, 9);
			char_literal611=(IToken)Match(input,LBRACE,Follow._LBRACE_in_arrayInitializer7832); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal611_tree = (object)adaptor.Create(char_literal611);
			adaptor.AddChild(root_0, char_literal611_tree);
			}
			DebugLocation(1232, 13);
			// Java.g:1232:13: ( variableInitializer ( ',' variableInitializer )* )?
			int alt163=2;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, false);
			int LA163_0 = input.LA(1);

			if ((LA163_0==BANG||LA163_0==BOOLEAN||LA163_0==BYTE||(LA163_0>=CHAR && LA163_0<=CHARLITERAL)||(LA163_0>=DOUBLE && LA163_0<=DOUBLELITERAL)||LA163_0==FALSE||(LA163_0>=FLOAT && LA163_0<=FLOATLITERAL)||LA163_0==IDENTIFIER||LA163_0==INT||LA163_0==INTLITERAL||LA163_0==LBRACE||(LA163_0>=LONG && LA163_0<=LPAREN)||(LA163_0>=NEW && LA163_0<=NULL)||LA163_0==PLUS||LA163_0==PLUSPLUS||LA163_0==SHORT||(LA163_0>=STRINGLITERAL && LA163_0<=SUB)||(LA163_0>=SUBSUB && LA163_0<=SUPER)||LA163_0==THIS||LA163_0==TILDE||LA163_0==TRUE||LA163_0==VOID))
			{
				alt163 = 1;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1232:14: variableInitializer ( ',' variableInitializer )*
				{
				DebugLocation(1232, 14);
				PushFollow(Follow._variableInitializer_in_arrayInitializer7848);
				variableInitializer612=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableInitializer612.Tree);
				DebugLocation(1233, 17);
				// Java.g:1233:17: ( ',' variableInitializer )*
				try { DebugEnterSubRule(162);
				while (true)
				{
					int alt162=2;
					try { DebugEnterDecision(162, false);
					int LA162_0 = input.LA(1);

					if ((LA162_0==COMMA))
					{
						int LA162_1 = input.LA(2);

						if ((LA162_1==BANG||LA162_1==BOOLEAN||LA162_1==BYTE||(LA162_1>=CHAR && LA162_1<=CHARLITERAL)||(LA162_1>=DOUBLE && LA162_1<=DOUBLELITERAL)||LA162_1==FALSE||(LA162_1>=FLOAT && LA162_1<=FLOATLITERAL)||LA162_1==IDENTIFIER||LA162_1==INT||LA162_1==INTLITERAL||LA162_1==LBRACE||(LA162_1>=LONG && LA162_1<=LPAREN)||(LA162_1>=NEW && LA162_1<=NULL)||LA162_1==PLUS||LA162_1==PLUSPLUS||LA162_1==SHORT||(LA162_1>=STRINGLITERAL && LA162_1<=SUB)||(LA162_1>=SUBSUB && LA162_1<=SUPER)||LA162_1==THIS||LA162_1==TILDE||LA162_1==TRUE||LA162_1==VOID))
						{
							alt162 = 1;
						}


					}


					} finally { DebugExitDecision(162); }
					switch ( alt162 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1233:18: ',' variableInitializer
						{
						DebugLocation(1233, 18);
						char_literal613=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer7867); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal613_tree = (object)adaptor.Create(char_literal613);
						adaptor.AddChild(root_0, char_literal613_tree);
						}
						DebugLocation(1233, 22);
						PushFollow(Follow._variableInitializer_in_arrayInitializer7869);
						variableInitializer614=variableInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, variableInitializer614.Tree);

						}
						break;

					default:
						goto loop162;
					}
				}

				loop162:
					;

				} finally { DebugExitSubRule(162); }


				}
				break;

			}
			} finally { DebugExitSubRule(163); }

			DebugLocation(1236, 13);
			// Java.g:1236:13: ( ',' )?
			int alt164=2;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, false);
			int LA164_0 = input.LA(1);

			if ((LA164_0==COMMA))
			{
				alt164 = 1;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1236:14: ','
				{
				DebugLocation(1236, 14);
				char_literal615=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer7919); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal615_tree = (object)adaptor.Create(char_literal615);
				adaptor.AddChild(root_0, char_literal615_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(164); }

			DebugLocation(1237, 9);
			char_literal616=(IToken)Match(input,RBRACE,Follow._RBRACE_in_arrayInitializer7932); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal616_tree = (object)adaptor.Create(char_literal616);
			adaptor.AddChild(root_0, char_literal616_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayInitializer", 101);
			LeaveRule("arrayInitializer", 101);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 101, arrayInitializer_StartIndex); }

		}
		DebugLocation(1238, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return retval;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_createdName();
	partial void LeaveRule_createdName();

	// $ANTLR start "createdName"
	// Java.g:1241:1: createdName : ( classOrInterfaceType | primitiveType );
	[GrammarRule("createdName")]
	private AstParserRuleReturnScope<object, IToken> createdName()
	{
		EnterRule_createdName();
		EnterRule("createdName", 102);
		TraceIn("createdName", 102);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int createdName_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> classOrInterfaceType617 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primitiveType618 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "createdName");
		DebugLocation(1241, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }

			// Java.g:1242:5: ( classOrInterfaceType | primitiveType )
			int alt165=2;
			try { DebugEnterDecision(165, false);
			int LA165_0 = input.LA(1);

			if ((LA165_0==IDENTIFIER))
			{
				alt165 = 1;
			}
			else if ((LA165_0==BOOLEAN||LA165_0==BYTE||LA165_0==CHAR||LA165_0==DOUBLE||LA165_0==FLOAT||LA165_0==INT||LA165_0==LONG||LA165_0==SHORT))
			{
				alt165 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 165, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(165); }
			switch (alt165)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1242:9: classOrInterfaceType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1242, 9);
				PushFollow(Follow._classOrInterfaceType_in_createdName7966);
				classOrInterfaceType617=classOrInterfaceType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceType617.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1243:9: primitiveType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1243, 9);
				PushFollow(Follow._primitiveType_in_createdName7976);
				primitiveType618=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType618.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createdName", 102);
			LeaveRule("createdName", 102);
			LeaveRule_createdName();
			if (state.backtracking > 0) { Memoize(input, 102, createdName_StartIndex); }

		}
		DebugLocation(1244, 4);
		} finally { DebugExitRule(GrammarFileName, "createdName"); }
		return retval;

	}
	// $ANTLR end "createdName"

	partial void EnterRule_innerCreator();
	partial void LeaveRule_innerCreator();

	// $ANTLR start "innerCreator"
	// Java.g:1246:1: innerCreator : '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest ;
	[GrammarRule("innerCreator")]
	private AstParserRuleReturnScope<object, IToken> innerCreator()
	{
		EnterRule_innerCreator();
		EnterRule("innerCreator", 103);
		TraceIn("innerCreator", 103);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int innerCreator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal619 = default(IToken);
		IToken string_literal620 = default(IToken);
		IToken IDENTIFIER622 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments621 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeArguments623 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classCreatorRest624 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal619_tree = default(object);
		object string_literal620_tree = default(object);
		object IDENTIFIER622_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "innerCreator");
		DebugLocation(1246, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }

			// Java.g:1247:5: ( '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1247:9: '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1247, 9);
			char_literal619=(IToken)Match(input,DOT,Follow._DOT_in_innerCreator7997); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal619_tree = (object)adaptor.Create(char_literal619);
			adaptor.AddChild(root_0, char_literal619_tree);
			}
			DebugLocation(1247, 13);
			string_literal620=(IToken)Match(input,NEW,Follow._NEW_in_innerCreator7999); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal620_tree = (object)adaptor.Create(string_literal620);
			adaptor.AddChild(root_0, string_literal620_tree);
			}
			DebugLocation(1248, 9);
			// Java.g:1248:9: ( nonWildcardTypeArguments )?
			int alt166=2;
			try { DebugEnterSubRule(166);
			try { DebugEnterDecision(166, false);
			int LA166_0 = input.LA(1);

			if ((LA166_0==LT))
			{
				alt166 = 1;
			}
			} finally { DebugExitDecision(166); }
			switch (alt166)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1248:10: nonWildcardTypeArguments
				{
				DebugLocation(1248, 10);
				PushFollow(Follow._nonWildcardTypeArguments_in_innerCreator8010);
				nonWildcardTypeArguments621=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments621.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(166); }

			DebugLocation(1250, 9);
			IDENTIFIER622=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_innerCreator8031); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER622_tree = (object)adaptor.Create(IDENTIFIER622);
			adaptor.AddChild(root_0, IDENTIFIER622_tree);
			}
			DebugLocation(1251, 9);
			// Java.g:1251:9: ( typeArguments )?
			int alt167=2;
			try { DebugEnterSubRule(167);
			try { DebugEnterDecision(167, false);
			int LA167_0 = input.LA(1);

			if ((LA167_0==LT))
			{
				alt167 = 1;
			}
			} finally { DebugExitDecision(167); }
			switch (alt167)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1251:10: typeArguments
				{
				DebugLocation(1251, 10);
				PushFollow(Follow._typeArguments_in_innerCreator8042);
				typeArguments623=typeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments623.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(167); }

			DebugLocation(1253, 9);
			PushFollow(Follow._classCreatorRest_in_innerCreator8063);
			classCreatorRest624=classCreatorRest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, classCreatorRest624.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerCreator", 103);
			LeaveRule("innerCreator", 103);
			LeaveRule_innerCreator();
			if (state.backtracking > 0) { Memoize(input, 103, innerCreator_StartIndex); }

		}
		DebugLocation(1254, 4);
		} finally { DebugExitRule(GrammarFileName, "innerCreator"); }
		return retval;

	}
	// $ANTLR end "innerCreator"

	partial void EnterRule_classCreatorRest();
	partial void LeaveRule_classCreatorRest();

	// $ANTLR start "classCreatorRest"
	// Java.g:1257:1: classCreatorRest : arguments ( classBody )? ;
	[GrammarRule("classCreatorRest")]
	private AstParserRuleReturnScope<object, IToken> classCreatorRest()
	{
		EnterRule_classCreatorRest();
		EnterRule("classCreatorRest", 104);
		TraceIn("classCreatorRest", 104);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classCreatorRest_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> arguments625 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classBody626 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "classCreatorRest");
		DebugLocation(1257, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }

			// Java.g:1258:5: ( arguments ( classBody )? )
			DebugEnterAlt(1);
			// Java.g:1258:9: arguments ( classBody )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1258, 9);
			PushFollow(Follow._arguments_in_classCreatorRest8084);
			arguments625=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, arguments625.Tree);
			DebugLocation(1259, 9);
			// Java.g:1259:9: ( classBody )?
			int alt168=2;
			try { DebugEnterSubRule(168);
			try { DebugEnterDecision(168, false);
			int LA168_0 = input.LA(1);

			if ((LA168_0==LBRACE))
			{
				alt168 = 1;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1259:10: classBody
				{
				DebugLocation(1259, 10);
				PushFollow(Follow._classBody_in_classCreatorRest8095);
				classBody626=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classBody626.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(168); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classCreatorRest", 104);
			LeaveRule("classCreatorRest", 104);
			LeaveRule_classCreatorRest();
			if (state.backtracking > 0) { Memoize(input, 104, classCreatorRest_StartIndex); }

		}
		DebugLocation(1261, 4);
		} finally { DebugExitRule(GrammarFileName, "classCreatorRest"); }
		return retval;

	}
	// $ANTLR end "classCreatorRest"

	partial void EnterRule_nonWildcardTypeArguments();
	partial void LeaveRule_nonWildcardTypeArguments();

	// $ANTLR start "nonWildcardTypeArguments"
	// Java.g:1264:1: nonWildcardTypeArguments : '<' typeList '>' ;
	[GrammarRule("nonWildcardTypeArguments")]
	private AstParserRuleReturnScope<object, IToken> nonWildcardTypeArguments()
	{
		EnterRule_nonWildcardTypeArguments();
		EnterRule("nonWildcardTypeArguments", 105);
		TraceIn("nonWildcardTypeArguments", 105);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int nonWildcardTypeArguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal627 = default(IToken);
		IToken char_literal629 = default(IToken);
		AstParserRuleReturnScope<object, IToken> typeList628 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal627_tree = default(object);
		object char_literal629_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "nonWildcardTypeArguments");
		DebugLocation(1264, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }

			// Java.g:1265:5: ( '<' typeList '>' )
			DebugEnterAlt(1);
			// Java.g:1265:9: '<' typeList '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1265, 9);
			char_literal627=(IToken)Match(input,LT,Follow._LT_in_nonWildcardTypeArguments8127); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal627_tree = (object)adaptor.Create(char_literal627);
			adaptor.AddChild(root_0, char_literal627_tree);
			}
			DebugLocation(1265, 13);
			PushFollow(Follow._typeList_in_nonWildcardTypeArguments8129);
			typeList628=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeList628.Tree);
			DebugLocation(1266, 9);
			char_literal629=(IToken)Match(input,GT,Follow._GT_in_nonWildcardTypeArguments8139); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal629_tree = (object)adaptor.Create(char_literal629);
			adaptor.AddChild(root_0, char_literal629_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nonWildcardTypeArguments", 105);
			LeaveRule("nonWildcardTypeArguments", 105);
			LeaveRule_nonWildcardTypeArguments();
			if (state.backtracking > 0) { Memoize(input, 105, nonWildcardTypeArguments_StartIndex); }

		}
		DebugLocation(1267, 4);
		} finally { DebugExitRule(GrammarFileName, "nonWildcardTypeArguments"); }
		return retval;

	}
	// $ANTLR end "nonWildcardTypeArguments"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// Java.g:1269:1: arguments : '(' ( expressionList )? ')' ;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<object, IToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 106);
		TraceIn("arguments", 106);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal630 = default(IToken);
		IToken char_literal632 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expressionList631 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal630_tree = default(object);
		object char_literal632_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(1269, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }

			// Java.g:1270:5: ( '(' ( expressionList )? ')' )
			DebugEnterAlt(1);
			// Java.g:1270:9: '(' ( expressionList )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1270, 9);
			char_literal630=(IToken)Match(input,LPAREN,Follow._LPAREN_in_arguments8159); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal630_tree = (object)adaptor.Create(char_literal630);
			adaptor.AddChild(root_0, char_literal630_tree);
			}
			DebugLocation(1270, 13);
			// Java.g:1270:13: ( expressionList )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, false);
			int LA169_0 = input.LA(1);

			if ((LA169_0==BANG||LA169_0==BOOLEAN||LA169_0==BYTE||(LA169_0>=CHAR && LA169_0<=CHARLITERAL)||(LA169_0>=DOUBLE && LA169_0<=DOUBLELITERAL)||LA169_0==FALSE||(LA169_0>=FLOAT && LA169_0<=FLOATLITERAL)||LA169_0==IDENTIFIER||LA169_0==INT||LA169_0==INTLITERAL||(LA169_0>=LONG && LA169_0<=LPAREN)||(LA169_0>=NEW && LA169_0<=NULL)||LA169_0==PLUS||LA169_0==PLUSPLUS||LA169_0==SHORT||(LA169_0>=STRINGLITERAL && LA169_0<=SUB)||(LA169_0>=SUBSUB && LA169_0<=SUPER)||LA169_0==THIS||LA169_0==TILDE||LA169_0==TRUE||LA169_0==VOID))
			{
				alt169 = 1;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1270:14: expressionList
				{
				DebugLocation(1270, 14);
				PushFollow(Follow._expressionList_in_arguments8162);
				expressionList631=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionList631.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(169); }

			DebugLocation(1271, 12);
			char_literal632=(IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments8175); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal632_tree = (object)adaptor.Create(char_literal632);
			adaptor.AddChild(root_0, char_literal632_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 106);
			LeaveRule("arguments", 106);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 106, arguments_StartIndex); }

		}
		DebugLocation(1272, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_intLiteral();
	partial void LeaveRule_intLiteral();

	// $ANTLR start "intLiteral"
	// Java.g:1274:1: intLiteral : INTLITERAL ;
	[GrammarRule("intLiteral")]
	private AstParserRuleReturnScope<object, IToken> intLiteral()
	{
		EnterRule_intLiteral();
		EnterRule("intLiteral", 107);
		TraceIn("intLiteral", 107);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int intLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken INTLITERAL633 = default(IToken);

		object INTLITERAL633_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "intLiteral");
		DebugLocation(1274, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }

			// Java.g:1275:5: ( INTLITERAL )
			DebugEnterAlt(1);
			// Java.g:1275:7: INTLITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1275, 7);
			INTLITERAL633=(IToken)Match(input,INTLITERAL,Follow._INTLITERAL_in_intLiteral8192); if (state.failed) return retval;
			if (state.backtracking == 0) {
			INTLITERAL633_tree = (object)adaptor.Create(INTLITERAL633);
			adaptor.AddChild(root_0, INTLITERAL633_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("intLiteral", 107);
			LeaveRule("intLiteral", 107);
			LeaveRule_intLiteral();
			if (state.backtracking > 0) { Memoize(input, 107, intLiteral_StartIndex); }

		}
		DebugLocation(1276, 4);
		} finally { DebugExitRule(GrammarFileName, "intLiteral"); }
		return retval;

	}
	// $ANTLR end "intLiteral"

	partial void EnterRule_longLiteral();
	partial void LeaveRule_longLiteral();

	// $ANTLR start "longLiteral"
	// Java.g:1278:1: longLiteral : LONGLITERAL ;
	[GrammarRule("longLiteral")]
	private AstParserRuleReturnScope<object, IToken> longLiteral()
	{
		EnterRule_longLiteral();
		EnterRule("longLiteral", 108);
		TraceIn("longLiteral", 108);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int longLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LONGLITERAL634 = default(IToken);

		object LONGLITERAL634_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "longLiteral");
		DebugLocation(1278, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }

			// Java.g:1279:5: ( LONGLITERAL )
			DebugEnterAlt(1);
			// Java.g:1279:7: LONGLITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1279, 7);
			LONGLITERAL634=(IToken)Match(input,LONGLITERAL,Follow._LONGLITERAL_in_longLiteral8209); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LONGLITERAL634_tree = (object)adaptor.Create(LONGLITERAL634);
			adaptor.AddChild(root_0, LONGLITERAL634_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("longLiteral", 108);
			LeaveRule("longLiteral", 108);
			LeaveRule_longLiteral();
			if (state.backtracking > 0) { Memoize(input, 108, longLiteral_StartIndex); }

		}
		DebugLocation(1280, 4);
		} finally { DebugExitRule(GrammarFileName, "longLiteral"); }
		return retval;

	}
	// $ANTLR end "longLiteral"

	partial void EnterRule_floatLiteral();
	partial void LeaveRule_floatLiteral();

	// $ANTLR start "floatLiteral"
	// Java.g:1282:1: floatLiteral : FLOATLITERAL ;
	[GrammarRule("floatLiteral")]
	private AstParserRuleReturnScope<object, IToken> floatLiteral()
	{
		EnterRule_floatLiteral();
		EnterRule("floatLiteral", 109);
		TraceIn("floatLiteral", 109);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int floatLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken FLOATLITERAL635 = default(IToken);

		object FLOATLITERAL635_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "floatLiteral");
		DebugLocation(1282, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }

			// Java.g:1283:5: ( FLOATLITERAL )
			DebugEnterAlt(1);
			// Java.g:1283:7: FLOATLITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1283, 7);
			FLOATLITERAL635=(IToken)Match(input,FLOATLITERAL,Follow._FLOATLITERAL_in_floatLiteral8226); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FLOATLITERAL635_tree = (object)adaptor.Create(FLOATLITERAL635);
			adaptor.AddChild(root_0, FLOATLITERAL635_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("floatLiteral", 109);
			LeaveRule("floatLiteral", 109);
			LeaveRule_floatLiteral();
			if (state.backtracking > 0) { Memoize(input, 109, floatLiteral_StartIndex); }

		}
		DebugLocation(1284, 4);
		} finally { DebugExitRule(GrammarFileName, "floatLiteral"); }
		return retval;

	}
	// $ANTLR end "floatLiteral"

	partial void EnterRule_doubleLiteral();
	partial void LeaveRule_doubleLiteral();

	// $ANTLR start "doubleLiteral"
	// Java.g:1286:1: doubleLiteral : DOUBLELITERAL ;
	[GrammarRule("doubleLiteral")]
	private AstParserRuleReturnScope<object, IToken> doubleLiteral()
	{
		EnterRule_doubleLiteral();
		EnterRule("doubleLiteral", 110);
		TraceIn("doubleLiteral", 110);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int doubleLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken DOUBLELITERAL636 = default(IToken);

		object DOUBLELITERAL636_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "doubleLiteral");
		DebugLocation(1286, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }

			// Java.g:1287:5: ( DOUBLELITERAL )
			DebugEnterAlt(1);
			// Java.g:1287:7: DOUBLELITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1287, 7);
			DOUBLELITERAL636=(IToken)Match(input,DOUBLELITERAL,Follow._DOUBLELITERAL_in_doubleLiteral8243); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOUBLELITERAL636_tree = (object)adaptor.Create(DOUBLELITERAL636);
			adaptor.AddChild(root_0, DOUBLELITERAL636_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("doubleLiteral", 110);
			LeaveRule("doubleLiteral", 110);
			LeaveRule_doubleLiteral();
			if (state.backtracking > 0) { Memoize(input, 110, doubleLiteral_StartIndex); }

		}
		DebugLocation(1288, 4);
		} finally { DebugExitRule(GrammarFileName, "doubleLiteral"); }
		return retval;

	}
	// $ANTLR end "doubleLiteral"

	partial void EnterRule_charLiteral();
	partial void LeaveRule_charLiteral();

	// $ANTLR start "charLiteral"
	// Java.g:1290:1: charLiteral : CHARLITERAL ;
	[GrammarRule("charLiteral")]
	private AstParserRuleReturnScope<object, IToken> charLiteral()
	{
		EnterRule_charLiteral();
		EnterRule("charLiteral", 111);
		TraceIn("charLiteral", 111);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int charLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken CHARLITERAL637 = default(IToken);

		object CHARLITERAL637_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "charLiteral");
		DebugLocation(1290, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 111)) { return retval; }

			// Java.g:1291:5: ( CHARLITERAL )
			DebugEnterAlt(1);
			// Java.g:1291:7: CHARLITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1291, 7);
			CHARLITERAL637=(IToken)Match(input,CHARLITERAL,Follow._CHARLITERAL_in_charLiteral8260); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHARLITERAL637_tree = (object)adaptor.Create(CHARLITERAL637);
			adaptor.AddChild(root_0, CHARLITERAL637_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("charLiteral", 111);
			LeaveRule("charLiteral", 111);
			LeaveRule_charLiteral();
			if (state.backtracking > 0) { Memoize(input, 111, charLiteral_StartIndex); }

		}
		DebugLocation(1292, 4);
		} finally { DebugExitRule(GrammarFileName, "charLiteral"); }
		return retval;

	}
	// $ANTLR end "charLiteral"

	partial void EnterRule_stringLiteral();
	partial void LeaveRule_stringLiteral();

	// $ANTLR start "stringLiteral"
	// Java.g:1294:1: stringLiteral : STRINGLITERAL ;
	[GrammarRule("stringLiteral")]
	private AstParserRuleReturnScope<object, IToken> stringLiteral()
	{
		EnterRule_stringLiteral();
		EnterRule("stringLiteral", 112);
		TraceIn("stringLiteral", 112);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stringLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken STRINGLITERAL638 = default(IToken);

		object STRINGLITERAL638_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "stringLiteral");
		DebugLocation(1294, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 112)) { return retval; }

			// Java.g:1295:5: ( STRINGLITERAL )
			DebugEnterAlt(1);
			// Java.g:1295:7: STRINGLITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1295, 7);
			STRINGLITERAL638=(IToken)Match(input,STRINGLITERAL,Follow._STRINGLITERAL_in_stringLiteral8277); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRINGLITERAL638_tree = (object)adaptor.Create(STRINGLITERAL638);
			adaptor.AddChild(root_0, STRINGLITERAL638_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stringLiteral", 112);
			LeaveRule("stringLiteral", 112);
			LeaveRule_stringLiteral();
			if (state.backtracking > 0) { Memoize(input, 112, stringLiteral_StartIndex); }

		}
		DebugLocation(1296, 4);
		} finally { DebugExitRule(GrammarFileName, "stringLiteral"); }
		return retval;

	}
	// $ANTLR end "stringLiteral"

	partial void EnterRule_trueLiteral();
	partial void LeaveRule_trueLiteral();

	// $ANTLR start "trueLiteral"
	// Java.g:1298:1: trueLiteral : TRUE ;
	[GrammarRule("trueLiteral")]
	private AstParserRuleReturnScope<object, IToken> trueLiteral()
	{
		EnterRule_trueLiteral();
		EnterRule("trueLiteral", 113);
		TraceIn("trueLiteral", 113);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int trueLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken TRUE639 = default(IToken);

		object TRUE639_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "trueLiteral");
		DebugLocation(1298, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 113)) { return retval; }

			// Java.g:1299:5: ( TRUE )
			DebugEnterAlt(1);
			// Java.g:1299:7: TRUE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1299, 7);
			TRUE639=(IToken)Match(input,TRUE,Follow._TRUE_in_trueLiteral8294); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TRUE639_tree = (object)adaptor.Create(TRUE639);
			adaptor.AddChild(root_0, TRUE639_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("trueLiteral", 113);
			LeaveRule("trueLiteral", 113);
			LeaveRule_trueLiteral();
			if (state.backtracking > 0) { Memoize(input, 113, trueLiteral_StartIndex); }

		}
		DebugLocation(1300, 4);
		} finally { DebugExitRule(GrammarFileName, "trueLiteral"); }
		return retval;

	}
	// $ANTLR end "trueLiteral"

	partial void EnterRule_falseLiteral();
	partial void LeaveRule_falseLiteral();

	// $ANTLR start "falseLiteral"
	// Java.g:1302:1: falseLiteral : FALSE ;
	[GrammarRule("falseLiteral")]
	private AstParserRuleReturnScope<object, IToken> falseLiteral()
	{
		EnterRule_falseLiteral();
		EnterRule("falseLiteral", 114);
		TraceIn("falseLiteral", 114);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int falseLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken FALSE640 = default(IToken);

		object FALSE640_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "falseLiteral");
		DebugLocation(1302, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 114)) { return retval; }

			// Java.g:1303:5: ( FALSE )
			DebugEnterAlt(1);
			// Java.g:1303:7: FALSE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1303, 7);
			FALSE640=(IToken)Match(input,FALSE,Follow._FALSE_in_falseLiteral8311); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FALSE640_tree = (object)adaptor.Create(FALSE640);
			adaptor.AddChild(root_0, FALSE640_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("falseLiteral", 114);
			LeaveRule("falseLiteral", 114);
			LeaveRule_falseLiteral();
			if (state.backtracking > 0) { Memoize(input, 114, falseLiteral_StartIndex); }

		}
		DebugLocation(1304, 4);
		} finally { DebugExitRule(GrammarFileName, "falseLiteral"); }
		return retval;

	}
	// $ANTLR end "falseLiteral"

	partial void EnterRule_nullLiteral();
	partial void LeaveRule_nullLiteral();

	// $ANTLR start "nullLiteral"
	// Java.g:1306:1: nullLiteral : NULL ;
	[GrammarRule("nullLiteral")]
	private AstParserRuleReturnScope<object, IToken> nullLiteral()
	{
		EnterRule_nullLiteral();
		EnterRule("nullLiteral", 115);
		TraceIn("nullLiteral", 115);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int nullLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken NULL641 = default(IToken);

		object NULL641_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "nullLiteral");
		DebugLocation(1306, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 115)) { return retval; }

			// Java.g:1307:5: ( NULL )
			DebugEnterAlt(1);
			// Java.g:1307:7: NULL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1307, 7);
			NULL641=(IToken)Match(input,NULL,Follow._NULL_in_nullLiteral8328); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULL641_tree = (object)adaptor.Create(NULL641);
			adaptor.AddChild(root_0, NULL641_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nullLiteral", 115);
			LeaveRule("nullLiteral", 115);
			LeaveRule_nullLiteral();
			if (state.backtracking > 0) { Memoize(input, 115, nullLiteral_StartIndex); }

		}
		DebugLocation(1308, 4);
		} finally { DebugExitRule(GrammarFileName, "nullLiteral"); }
		return retval;

	}
	// $ANTLR end "nullLiteral"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// Java.g:1310:1: literal : ( intLiteral | longLiteral | floatLiteral | doubleLiteral | charLiteral | stringLiteral | trueLiteral | falseLiteral | nullLiteral );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<object, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 116);
		TraceIn("literal", 116);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int literal_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> intLiteral642 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> longLiteral643 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> floatLiteral644 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> doubleLiteral645 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> charLiteral646 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> stringLiteral647 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> trueLiteral648 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> falseLiteral649 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> nullLiteral650 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1310, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 116)) { return retval; }

			// Java.g:1311:5: ( intLiteral | longLiteral | floatLiteral | doubleLiteral | charLiteral | stringLiteral | trueLiteral | falseLiteral | nullLiteral )
			int alt170=9;
			try { DebugEnterDecision(170, false);
			switch (input.LA(1))
			{
			case INTLITERAL:
				{
				alt170 = 1;
				}
				break;
			case LONGLITERAL:
				{
				alt170 = 2;
				}
				break;
			case FLOATLITERAL:
				{
				alt170 = 3;
				}
				break;
			case DOUBLELITERAL:
				{
				alt170 = 4;
				}
				break;
			case CHARLITERAL:
				{
				alt170 = 5;
				}
				break;
			case STRINGLITERAL:
				{
				alt170 = 6;
				}
				break;
			case TRUE:
				{
				alt170 = 7;
				}
				break;
			case FALSE:
				{
				alt170 = 8;
				}
				break;
			case NULL:
				{
				alt170 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 170, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1311:9: intLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1311, 9);
				PushFollow(Follow._intLiteral_in_literal8348);
				intLiteral642=intLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, intLiteral642.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1312:9: longLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1312, 9);
				PushFollow(Follow._longLiteral_in_literal8358);
				longLiteral643=longLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, longLiteral643.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1313:9: floatLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1313, 9);
				PushFollow(Follow._floatLiteral_in_literal8368);
				floatLiteral644=floatLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, floatLiteral644.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1314:9: doubleLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1314, 9);
				PushFollow(Follow._doubleLiteral_in_literal8378);
				doubleLiteral645=doubleLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, doubleLiteral645.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1315:9: charLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1315, 9);
				PushFollow(Follow._charLiteral_in_literal8388);
				charLiteral646=charLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, charLiteral646.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1316:9: stringLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1316, 9);
				PushFollow(Follow._stringLiteral_in_literal8398);
				stringLiteral647=stringLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stringLiteral647.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1317:9: trueLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1317, 9);
				PushFollow(Follow._trueLiteral_in_literal8408);
				trueLiteral648=trueLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, trueLiteral648.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1318:9: falseLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1318, 9);
				PushFollow(Follow._falseLiteral_in_literal8418);
				falseLiteral649=falseLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, falseLiteral649.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:1319:9: nullLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1319, 9);
				PushFollow(Follow._nullLiteral_in_literal8428);
				nullLiteral650=nullLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nullLiteral650.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 116);
			LeaveRule("literal", 116);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 116, literal_StartIndex); }

		}
		DebugLocation(1320, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_classHeader();
	partial void LeaveRule_classHeader();

	// $ANTLR start "classHeader"
	// Java.g:1326:1: classHeader : modifiers 'class' IDENTIFIER ;
	[GrammarRule("classHeader")]
	private AstParserRuleReturnScope<object, IToken> classHeader()
	{
		EnterRule_classHeader();
		EnterRule("classHeader", 117);
		TraceIn("classHeader", 117);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal652 = default(IToken);
		IToken IDENTIFIER653 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers651 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal652_tree = default(object);
		object IDENTIFIER653_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classHeader");
		DebugLocation(1326, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 117)) { return retval; }

			// Java.g:1327:5: ( modifiers 'class' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1327:9: modifiers 'class' IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1327, 9);
			PushFollow(Follow._modifiers_in_classHeader8452);
			modifiers651=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers651.Tree);
			DebugLocation(1327, 19);
			string_literal652=(IToken)Match(input,CLASS,Follow._CLASS_in_classHeader8454); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal652_tree = (object)adaptor.Create(string_literal652);
			adaptor.AddChild(root_0, string_literal652_tree);
			}
			DebugLocation(1327, 27);
			IDENTIFIER653=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classHeader8456); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER653_tree = (object)adaptor.Create(IDENTIFIER653);
			adaptor.AddChild(root_0, IDENTIFIER653_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classHeader", 117);
			LeaveRule("classHeader", 117);
			LeaveRule_classHeader();
			if (state.backtracking > 0) { Memoize(input, 117, classHeader_StartIndex); }

		}
		DebugLocation(1328, 4);
		} finally { DebugExitRule(GrammarFileName, "classHeader"); }
		return retval;

	}
	// $ANTLR end "classHeader"

	partial void EnterRule_enumHeader();
	partial void LeaveRule_enumHeader();

	// $ANTLR start "enumHeader"
	// Java.g:1330:1: enumHeader : modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER ;
	[GrammarRule("enumHeader")]
	private AstParserRuleReturnScope<object, IToken> enumHeader()
	{
		EnterRule_enumHeader();
		EnterRule("enumHeader", 118);
		TraceIn("enumHeader", 118);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enumHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set655 = default(IToken);
		IToken IDENTIFIER656 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers654 = default(AstParserRuleReturnScope<object, IToken>);

		object set655_tree = default(object);
		object IDENTIFIER656_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumHeader");
		DebugLocation(1330, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 118)) { return retval; }

			// Java.g:1331:5: ( modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1331:9: modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1331, 9);
			PushFollow(Follow._modifiers_in_enumHeader8476);
			modifiers654=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers654.Tree);
			DebugLocation(1331, 19);

			set655=(IToken)input.LT(1);
			if (input.LA(1)==ENUM||input.LA(1)==IDENTIFIER)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set655));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(1331, 39);
			IDENTIFIER656=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumHeader8484); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER656_tree = (object)adaptor.Create(IDENTIFIER656);
			adaptor.AddChild(root_0, IDENTIFIER656_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumHeader", 118);
			LeaveRule("enumHeader", 118);
			LeaveRule_enumHeader();
			if (state.backtracking > 0) { Memoize(input, 118, enumHeader_StartIndex); }

		}
		DebugLocation(1332, 4);
		} finally { DebugExitRule(GrammarFileName, "enumHeader"); }
		return retval;

	}
	// $ANTLR end "enumHeader"

	partial void EnterRule_interfaceHeader();
	partial void LeaveRule_interfaceHeader();

	// $ANTLR start "interfaceHeader"
	// Java.g:1334:1: interfaceHeader : modifiers 'interface' IDENTIFIER ;
	[GrammarRule("interfaceHeader")]
	private AstParserRuleReturnScope<object, IToken> interfaceHeader()
	{
		EnterRule_interfaceHeader();
		EnterRule("interfaceHeader", 119);
		TraceIn("interfaceHeader", 119);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal658 = default(IToken);
		IToken IDENTIFIER659 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers657 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal658_tree = default(object);
		object IDENTIFIER659_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceHeader");
		DebugLocation(1334, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 119)) { return retval; }

			// Java.g:1335:5: ( modifiers 'interface' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1335:9: modifiers 'interface' IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1335, 9);
			PushFollow(Follow._modifiers_in_interfaceHeader8504);
			modifiers657=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers657.Tree);
			DebugLocation(1335, 19);
			string_literal658=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_interfaceHeader8506); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal658_tree = (object)adaptor.Create(string_literal658);
			adaptor.AddChild(root_0, string_literal658_tree);
			}
			DebugLocation(1335, 31);
			IDENTIFIER659=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_interfaceHeader8508); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER659_tree = (object)adaptor.Create(IDENTIFIER659);
			adaptor.AddChild(root_0, IDENTIFIER659_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceHeader", 119);
			LeaveRule("interfaceHeader", 119);
			LeaveRule_interfaceHeader();
			if (state.backtracking > 0) { Memoize(input, 119, interfaceHeader_StartIndex); }

		}
		DebugLocation(1336, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceHeader"); }
		return retval;

	}
	// $ANTLR end "interfaceHeader"

	partial void EnterRule_annotationHeader();
	partial void LeaveRule_annotationHeader();

	// $ANTLR start "annotationHeader"
	// Java.g:1338:1: annotationHeader : modifiers '@' 'interface' IDENTIFIER ;
	[GrammarRule("annotationHeader")]
	private AstParserRuleReturnScope<object, IToken> annotationHeader()
	{
		EnterRule_annotationHeader();
		EnterRule("annotationHeader", 120);
		TraceIn("annotationHeader", 120);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int annotationHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal661 = default(IToken);
		IToken string_literal662 = default(IToken);
		IToken IDENTIFIER663 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers660 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal661_tree = default(object);
		object string_literal662_tree = default(object);
		object IDENTIFIER663_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "annotationHeader");
		DebugLocation(1338, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 120)) { return retval; }

			// Java.g:1339:5: ( modifiers '@' 'interface' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1339:9: modifiers '@' 'interface' IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1339, 9);
			PushFollow(Follow._modifiers_in_annotationHeader8528);
			modifiers660=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers660.Tree);
			DebugLocation(1339, 19);
			char_literal661=(IToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotationHeader8530); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal661_tree = (object)adaptor.Create(char_literal661);
			adaptor.AddChild(root_0, char_literal661_tree);
			}
			DebugLocation(1339, 23);
			string_literal662=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_annotationHeader8532); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal662_tree = (object)adaptor.Create(string_literal662);
			adaptor.AddChild(root_0, string_literal662_tree);
			}
			DebugLocation(1339, 35);
			IDENTIFIER663=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationHeader8534); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER663_tree = (object)adaptor.Create(IDENTIFIER663);
			adaptor.AddChild(root_0, IDENTIFIER663_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationHeader", 120);
			LeaveRule("annotationHeader", 120);
			LeaveRule_annotationHeader();
			if (state.backtracking > 0) { Memoize(input, 120, annotationHeader_StartIndex); }

		}
		DebugLocation(1340, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationHeader"); }
		return retval;

	}
	// $ANTLR end "annotationHeader"

	partial void EnterRule_typeHeader();
	partial void LeaveRule_typeHeader();

	// $ANTLR start "typeHeader"
	// Java.g:1342:1: typeHeader : modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER ;
	[GrammarRule("typeHeader")]
	private AstParserRuleReturnScope<object, IToken> typeHeader()
	{
		EnterRule_typeHeader();
		EnterRule("typeHeader", 121);
		TraceIn("typeHeader", 121);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int typeHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal665 = default(IToken);
		IToken string_literal666 = default(IToken);
		IToken char_literal667 = default(IToken);
		IToken string_literal668 = default(IToken);
		IToken IDENTIFIER669 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers664 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal665_tree = default(object);
		object string_literal666_tree = default(object);
		object char_literal667_tree = default(object);
		object string_literal668_tree = default(object);
		object IDENTIFIER669_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeHeader");
		DebugLocation(1342, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 121)) { return retval; }

			// Java.g:1343:5: ( modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1343:9: modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1343, 9);
			PushFollow(Follow._modifiers_in_typeHeader8554);
			modifiers664=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers664.Tree);
			DebugLocation(1343, 19);
			// Java.g:1343:19: ( 'class' | 'enum' | ( ( '@' )? 'interface' ) )
			int alt172=3;
			try { DebugEnterSubRule(172);
			try { DebugEnterDecision(172, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt172 = 1;
				}
				break;
			case ENUM:
				{
				alt172 = 2;
				}
				break;
			case INTERFACE:
			case MONKEYS_AT:
				{
				alt172 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 172, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(172); }
			switch (alt172)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1343:20: 'class'
				{
				DebugLocation(1343, 20);
				string_literal665=(IToken)Match(input,CLASS,Follow._CLASS_in_typeHeader8557); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal665_tree = (object)adaptor.Create(string_literal665);
				adaptor.AddChild(root_0, string_literal665_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1343:28: 'enum'
				{
				DebugLocation(1343, 28);
				string_literal666=(IToken)Match(input,ENUM,Follow._ENUM_in_typeHeader8559); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal666_tree = (object)adaptor.Create(string_literal666);
				adaptor.AddChild(root_0, string_literal666_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1343:35: ( ( '@' )? 'interface' )
				{
				DebugLocation(1343, 35);
				// Java.g:1343:35: ( ( '@' )? 'interface' )
				DebugEnterAlt(1);
				// Java.g:1343:36: ( '@' )? 'interface'
				{
				DebugLocation(1343, 36);
				// Java.g:1343:36: ( '@' )?
				int alt171=2;
				try { DebugEnterSubRule(171);
				try { DebugEnterDecision(171, false);
				int LA171_0 = input.LA(1);

				if ((LA171_0==MONKEYS_AT))
				{
					alt171 = 1;
				}
				} finally { DebugExitDecision(171); }
				switch (alt171)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1343:36: '@'
					{
					DebugLocation(1343, 36);
					char_literal667=(IToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_typeHeader8562); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal667_tree = (object)adaptor.Create(char_literal667);
					adaptor.AddChild(root_0, char_literal667_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(171); }

				DebugLocation(1343, 42);
				string_literal668=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_typeHeader8566); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal668_tree = (object)adaptor.Create(string_literal668);
				adaptor.AddChild(root_0, string_literal668_tree);
				}

				}


				}
				break;

			}
			} finally { DebugExitSubRule(172); }

			DebugLocation(1343, 56);
			IDENTIFIER669=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_typeHeader8570); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER669_tree = (object)adaptor.Create(IDENTIFIER669);
			adaptor.AddChild(root_0, IDENTIFIER669_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeHeader", 121);
			LeaveRule("typeHeader", 121);
			LeaveRule_typeHeader();
			if (state.backtracking > 0) { Memoize(input, 121, typeHeader_StartIndex); }

		}
		DebugLocation(1344, 4);
		} finally { DebugExitRule(GrammarFileName, "typeHeader"); }
		return retval;

	}
	// $ANTLR end "typeHeader"

	partial void EnterRule_methodHeader();
	partial void LeaveRule_methodHeader();

	// $ANTLR start "methodHeader"
	// Java.g:1346:1: methodHeader : modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' ;
	[GrammarRule("methodHeader")]
	private AstParserRuleReturnScope<object, IToken> methodHeader()
	{
		EnterRule_methodHeader();
		EnterRule("methodHeader", 122);
		TraceIn("methodHeader", 122);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int methodHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal673 = default(IToken);
		IToken IDENTIFIER674 = default(IToken);
		IToken char_literal675 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers670 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> typeParameters671 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type672 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal673_tree = default(object);
		object IDENTIFIER674_tree = default(object);
		object char_literal675_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "methodHeader");
		DebugLocation(1346, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 122)) { return retval; }

			// Java.g:1347:5: ( modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' )
			DebugEnterAlt(1);
			// Java.g:1347:9: modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '('
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1347, 9);
			PushFollow(Follow._modifiers_in_methodHeader8590);
			modifiers670=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers670.Tree);
			DebugLocation(1347, 19);
			// Java.g:1347:19: ( typeParameters )?
			int alt173=2;
			try { DebugEnterSubRule(173);
			try { DebugEnterDecision(173, false);
			int LA173_0 = input.LA(1);

			if ((LA173_0==LT))
			{
				alt173 = 1;
			}
			} finally { DebugExitDecision(173); }
			switch (alt173)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1347:19: typeParameters
				{
				DebugLocation(1347, 19);
				PushFollow(Follow._typeParameters_in_methodHeader8592);
				typeParameters671=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters671.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(173); }

			DebugLocation(1347, 35);
			// Java.g:1347:35: ( type | 'void' )?
			int alt174=3;
			try { DebugEnterSubRule(174);
			try { DebugEnterDecision(174, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA174_1 = input.LA(2);

				if ((LA174_1==DOT||LA174_1==IDENTIFIER||LA174_1==LBRACKET||LA174_1==LT))
				{
					alt174 = 1;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt174 = 1;
				}
				break;
			case VOID:
				{
				alt174 = 2;
				}
				break;
			}

			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1347:36: type
				{
				DebugLocation(1347, 36);
				PushFollow(Follow._type_in_methodHeader8596);
				type672=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type672.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1347:41: 'void'
				{
				DebugLocation(1347, 41);
				string_literal673=(IToken)Match(input,VOID,Follow._VOID_in_methodHeader8598); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal673_tree = (object)adaptor.Create(string_literal673);
				adaptor.AddChild(root_0, string_literal673_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(174); }

			DebugLocation(1347, 50);
			IDENTIFIER674=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodHeader8602); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER674_tree = (object)adaptor.Create(IDENTIFIER674);
			adaptor.AddChild(root_0, IDENTIFIER674_tree);
			}
			DebugLocation(1347, 61);
			char_literal675=(IToken)Match(input,LPAREN,Follow._LPAREN_in_methodHeader8604); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal675_tree = (object)adaptor.Create(char_literal675);
			adaptor.AddChild(root_0, char_literal675_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("methodHeader", 122);
			LeaveRule("methodHeader", 122);
			LeaveRule_methodHeader();
			if (state.backtracking > 0) { Memoize(input, 122, methodHeader_StartIndex); }

		}
		DebugLocation(1348, 4);
		} finally { DebugExitRule(GrammarFileName, "methodHeader"); }
		return retval;

	}
	// $ANTLR end "methodHeader"

	partial void EnterRule_fieldHeader();
	partial void LeaveRule_fieldHeader();

	// $ANTLR start "fieldHeader"
	// Java.g:1350:1: fieldHeader : modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
	[GrammarRule("fieldHeader")]
	private AstParserRuleReturnScope<object, IToken> fieldHeader()
	{
		EnterRule_fieldHeader();
		EnterRule("fieldHeader", 123);
		TraceIn("fieldHeader", 123);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int fieldHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER678 = default(IToken);
		IToken char_literal679 = default(IToken);
		IToken char_literal680 = default(IToken);
		IToken set681 = default(IToken);
		AstParserRuleReturnScope<object, IToken> modifiers676 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type677 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER678_tree = default(object);
		object char_literal679_tree = default(object);
		object char_literal680_tree = default(object);
		object set681_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldHeader");
		DebugLocation(1350, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 123)) { return retval; }

			// Java.g:1351:5: ( modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
			DebugEnterAlt(1);
			// Java.g:1351:9: modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1351, 9);
			PushFollow(Follow._modifiers_in_fieldHeader8624);
			modifiers676=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers676.Tree);
			DebugLocation(1351, 19);
			PushFollow(Follow._type_in_fieldHeader8626);
			type677=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type677.Tree);
			DebugLocation(1351, 24);
			IDENTIFIER678=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_fieldHeader8628); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER678_tree = (object)adaptor.Create(IDENTIFIER678);
			adaptor.AddChild(root_0, IDENTIFIER678_tree);
			}
			DebugLocation(1351, 35);
			// Java.g:1351:35: ( '[' ']' )*
			try { DebugEnterSubRule(175);
			while (true)
			{
				int alt175=2;
				try { DebugEnterDecision(175, false);
				int LA175_0 = input.LA(1);

				if ((LA175_0==LBRACKET))
				{
					alt175 = 1;
				}


				} finally { DebugExitDecision(175); }
				switch ( alt175 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1351:36: '[' ']'
					{
					DebugLocation(1351, 36);
					char_literal679=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_fieldHeader8631); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal679_tree = (object)adaptor.Create(char_literal679);
					adaptor.AddChild(root_0, char_literal679_tree);
					}
					DebugLocation(1351, 39);
					char_literal680=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_fieldHeader8632); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal680_tree = (object)adaptor.Create(char_literal680);
					adaptor.AddChild(root_0, char_literal680_tree);
					}

					}
					break;

				default:
					goto loop175;
				}
			}

			loop175:
				;

			} finally { DebugExitSubRule(175); }

			DebugLocation(1351, 45);

			set681=(IToken)input.LT(1);
			if (input.LA(1)==COMMA||input.LA(1)==EQ||input.LA(1)==SEMI)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set681));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldHeader", 123);
			LeaveRule("fieldHeader", 123);
			LeaveRule_fieldHeader();
			if (state.backtracking > 0) { Memoize(input, 123, fieldHeader_StartIndex); }

		}
		DebugLocation(1352, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldHeader"); }
		return retval;

	}
	// $ANTLR end "fieldHeader"

	partial void EnterRule_localVariableHeader();
	partial void LeaveRule_localVariableHeader();

	// $ANTLR start "localVariableHeader"
	// Java.g:1354:1: localVariableHeader : variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
	[GrammarRule("localVariableHeader")]
	private AstParserRuleReturnScope<object, IToken> localVariableHeader()
	{
		EnterRule_localVariableHeader();
		EnterRule("localVariableHeader", 124);
		TraceIn("localVariableHeader", 124);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int localVariableHeader_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER684 = default(IToken);
		IToken char_literal685 = default(IToken);
		IToken char_literal686 = default(IToken);
		IToken set687 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variableModifiers682 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type683 = default(AstParserRuleReturnScope<object, IToken>);

		object IDENTIFIER684_tree = default(object);
		object char_literal685_tree = default(object);
		object char_literal686_tree = default(object);
		object set687_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "localVariableHeader");
		DebugLocation(1354, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 124)) { return retval; }

			// Java.g:1355:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
			DebugEnterAlt(1);
			// Java.g:1355:9: variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1355, 9);
			PushFollow(Follow._variableModifiers_in_localVariableHeader8662);
			variableModifiers682=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers682.Tree);
			DebugLocation(1355, 27);
			PushFollow(Follow._type_in_localVariableHeader8664);
			type683=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type683.Tree);
			DebugLocation(1355, 32);
			IDENTIFIER684=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_localVariableHeader8666); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER684_tree = (object)adaptor.Create(IDENTIFIER684);
			adaptor.AddChild(root_0, IDENTIFIER684_tree);
			}
			DebugLocation(1355, 43);
			// Java.g:1355:43: ( '[' ']' )*
			try { DebugEnterSubRule(176);
			while (true)
			{
				int alt176=2;
				try { DebugEnterDecision(176, false);
				int LA176_0 = input.LA(1);

				if ((LA176_0==LBRACKET))
				{
					alt176 = 1;
				}


				} finally { DebugExitDecision(176); }
				switch ( alt176 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1355:44: '[' ']'
					{
					DebugLocation(1355, 44);
					char_literal685=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_localVariableHeader8669); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal685_tree = (object)adaptor.Create(char_literal685);
					adaptor.AddChild(root_0, char_literal685_tree);
					}
					DebugLocation(1355, 47);
					char_literal686=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_localVariableHeader8670); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal686_tree = (object)adaptor.Create(char_literal686);
					adaptor.AddChild(root_0, char_literal686_tree);
					}

					}
					break;

				default:
					goto loop176;
				}
			}

			loop176:
				;

			} finally { DebugExitSubRule(176); }

			DebugLocation(1355, 53);

			set687=(IToken)input.LT(1);
			if (input.LA(1)==COMMA||input.LA(1)==EQ||input.LA(1)==SEMI)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set687));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableHeader", 124);
			LeaveRule("localVariableHeader", 124);
			LeaveRule_localVariableHeader();
			if (state.backtracking > 0) { Memoize(input, 124, localVariableHeader_StartIndex); }

		}
		DebugLocation(1356, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableHeader"); }
		return retval;

	}
	// $ANTLR end "localVariableHeader"

	partial void EnterRule_synpred2_Java_fragment();
	partial void LeaveRule_synpred2_Java_fragment();

	// $ANTLR start synpred2_Java
	public void synpred2_Java_fragment()
	{
		EnterRule_synpred2_Java_fragment();
		EnterRule("synpred2_Java_fragment", 126);
		TraceIn("synpred2_Java_fragment", 126);
		try
		{
			// Java.g:299:13: ( ( annotations )? packageDeclaration )
			DebugEnterAlt(1);
			// Java.g:299:13: ( annotations )? packageDeclaration
			{
			DebugLocation(299, 13);
			// Java.g:299:13: ( annotations )?
			int alt177=2;
			try { DebugEnterSubRule(177);
			try { DebugEnterDecision(177, false);
			int LA177_0 = input.LA(1);

			if ((LA177_0==MONKEYS_AT))
			{
				alt177 = 1;
			}
			} finally { DebugExitDecision(177); }
			switch (alt177)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:299:14: annotations
				{
				DebugLocation(299, 14);
				PushFollow(Follow._annotations_in_synpred2_Java100);
				annotations();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(177); }

			DebugLocation(301, 13);
			PushFollow(Follow._packageDeclaration_in_synpred2_Java129);
			packageDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Java_fragment", 126);
			LeaveRule("synpred2_Java_fragment", 126);
			LeaveRule_synpred2_Java_fragment();
		}
	}
	// $ANTLR end synpred2_Java

	partial void EnterRule_synpred12_Java_fragment();
	partial void LeaveRule_synpred12_Java_fragment();

	// $ANTLR start synpred12_Java
	public void synpred12_Java_fragment()
	{
		EnterRule_synpred12_Java_fragment();
		EnterRule("synpred12_Java_fragment", 136);
		TraceIn("synpred12_Java_fragment", 136);
		try
		{
			// Java.g:343:10: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:343:10: classDeclaration
			{
			DebugLocation(343, 10);
			PushFollow(Follow._classDeclaration_in_synpred12_Java487);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_Java_fragment", 136);
			LeaveRule("synpred12_Java_fragment", 136);
			LeaveRule_synpred12_Java_fragment();
		}
	}
	// $ANTLR end synpred12_Java

	partial void EnterRule_synpred27_Java_fragment();
	partial void LeaveRule_synpred27_Java_fragment();

	// $ANTLR start synpred27_Java
	public void synpred27_Java_fragment()
	{
		EnterRule_synpred27_Java_fragment();
		EnterRule("synpred27_Java_fragment", 151);
		TraceIn("synpred27_Java_fragment", 151);
		try
		{
			// Java.g:374:9: ( normalClassDeclaration )
			DebugEnterAlt(1);
			// Java.g:374:9: normalClassDeclaration
			{
			DebugLocation(374, 9);
			PushFollow(Follow._normalClassDeclaration_in_synpred27_Java724);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_Java_fragment", 151);
			LeaveRule("synpred27_Java_fragment", 151);
			LeaveRule_synpred27_Java_fragment();
		}
	}
	// $ANTLR end synpred27_Java

	partial void EnterRule_synpred43_Java_fragment();
	partial void LeaveRule_synpred43_Java_fragment();

	// $ANTLR start synpred43_Java
	public void synpred43_Java_fragment()
	{
		EnterRule_synpred43_Java_fragment();
		EnterRule("synpred43_Java_fragment", 167);
		TraceIn("synpred43_Java_fragment", 167);
		try
		{
			// Java.g:462:9: ( normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:462:9: normalInterfaceDeclaration
			{
			DebugLocation(462, 9);
			PushFollow(Follow._normalInterfaceDeclaration_in_synpred43_Java1403);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred43_Java_fragment", 167);
			LeaveRule("synpred43_Java_fragment", 167);
			LeaveRule_synpred43_Java_fragment();
		}
	}
	// $ANTLR end synpred43_Java

	partial void EnterRule_synpred52_Java_fragment();
	partial void LeaveRule_synpred52_Java_fragment();

	// $ANTLR start synpred52_Java
	public void synpred52_Java_fragment()
	{
		EnterRule_synpred52_Java_fragment();
		EnterRule("synpred52_Java_fragment", 176);
		TraceIn("synpred52_Java_fragment", 176);
		try
		{
			// Java.g:504:10: ( fieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:504:10: fieldDeclaration
			{
			DebugLocation(504, 10);
			PushFollow(Follow._fieldDeclaration_in_synpred52_Java1733);
			fieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred52_Java_fragment", 176);
			LeaveRule("synpred52_Java_fragment", 176);
			LeaveRule_synpred52_Java_fragment();
		}
	}
	// $ANTLR end synpred52_Java

	partial void EnterRule_synpred53_Java_fragment();
	partial void LeaveRule_synpred53_Java_fragment();

	// $ANTLR start synpred53_Java
	public void synpred53_Java_fragment()
	{
		EnterRule_synpred53_Java_fragment();
		EnterRule("synpred53_Java_fragment", 177);
		TraceIn("synpred53_Java_fragment", 177);
		try
		{
			// Java.g:505:10: ( methodDeclaration )
			DebugEnterAlt(1);
			// Java.g:505:10: methodDeclaration
			{
			DebugLocation(505, 10);
			PushFollow(Follow._methodDeclaration_in_synpred53_Java1744);
			methodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_Java_fragment", 177);
			LeaveRule("synpred53_Java_fragment", 177);
			LeaveRule_synpred53_Java_fragment();
		}
	}
	// $ANTLR end synpred53_Java

	partial void EnterRule_synpred54_Java_fragment();
	partial void LeaveRule_synpred54_Java_fragment();

	// $ANTLR start synpred54_Java
	public void synpred54_Java_fragment()
	{
		EnterRule_synpred54_Java_fragment();
		EnterRule("synpred54_Java_fragment", 178);
		TraceIn("synpred54_Java_fragment", 178);
		try
		{
			// Java.g:506:10: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:506:10: classDeclaration
			{
			DebugLocation(506, 10);
			PushFollow(Follow._classDeclaration_in_synpred54_Java1755);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_Java_fragment", 178);
			LeaveRule("synpred54_Java_fragment", 178);
			LeaveRule_synpred54_Java_fragment();
		}
	}
	// $ANTLR end synpred54_Java

	partial void EnterRule_synpred57_Java_fragment();
	partial void LeaveRule_synpred57_Java_fragment();

	// $ANTLR start synpred57_Java
	public void synpred57_Java_fragment()
	{
		EnterRule_synpred57_Java_fragment();
		EnterRule("synpred57_Java_fragment", 181);
		TraceIn("synpred57_Java_fragment", 181);
		try
		{
			// Java.g:522:10: ( explicitConstructorInvocation )
			DebugEnterAlt(1);
			// Java.g:522:10: explicitConstructorInvocation
			{
			DebugLocation(522, 10);
			PushFollow(Follow._explicitConstructorInvocation_in_synpred57_Java1892);
			explicitConstructorInvocation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred57_Java_fragment", 181);
			LeaveRule("synpred57_Java_fragment", 181);
			LeaveRule_synpred57_Java_fragment();
		}
	}
	// $ANTLR end synpred57_Java

	partial void EnterRule_synpred59_Java_fragment();
	partial void LeaveRule_synpred59_Java_fragment();

	// $ANTLR start synpred59_Java
	public void synpred59_Java_fragment()
	{
		EnterRule_synpred59_Java_fragment();
		EnterRule("synpred59_Java_fragment", 183);
		TraceIn("synpred59_Java_fragment", 183);
		try
		{
			// Java.g:514:10: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' )
			DebugEnterAlt(1);
			// Java.g:514:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
			{
			DebugLocation(514, 10);
			PushFollow(Follow._modifiers_in_synpred59_Java1804);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(515, 9);
			// Java.g:515:9: ( typeParameters )?
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			int LA180_0 = input.LA(1);

			if ((LA180_0==LT))
			{
				alt180 = 1;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:515:10: typeParameters
				{
				DebugLocation(515, 10);
				PushFollow(Follow._typeParameters_in_synpred59_Java1815);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(180); }

			DebugLocation(517, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred59_Java1836); if (state.failed) return;
			DebugLocation(518, 9);
			PushFollow(Follow._formalParameters_in_synpred59_Java1846);
			formalParameters();
			PopFollow();
			if (state.failed) return;
			DebugLocation(519, 9);
			// Java.g:519:9: ( 'throws' qualifiedNameList )?
			int alt181=2;
			try { DebugEnterSubRule(181);
			try { DebugEnterDecision(181, false);
			int LA181_0 = input.LA(1);

			if ((LA181_0==THROWS))
			{
				alt181 = 1;
			}
			} finally { DebugExitDecision(181); }
			switch (alt181)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:519:10: 'throws' qualifiedNameList
				{
				DebugLocation(519, 10);
				Match(input,THROWS,Follow._THROWS_in_synpred59_Java1857); if (state.failed) return;
				DebugLocation(519, 19);
				PushFollow(Follow._qualifiedNameList_in_synpred59_Java1859);
				qualifiedNameList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(181); }

			DebugLocation(521, 9);
			Match(input,LBRACE,Follow._LBRACE_in_synpred59_Java1880); if (state.failed) return;
			DebugLocation(522, 9);
			// Java.g:522:9: ( explicitConstructorInvocation )?
			int alt182=2;
			try { DebugEnterSubRule(182);
			try { DebugEnterDecision(182, false);
			switch (input.LA(1))
			{
			case LT:
				{
				alt182 = 1;
				}
				break;
			case THIS:
				{
				int LA182_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case LPAREN:
				{
				int LA182_3 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case SUPER:
				{
				int LA182_4 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA182_5 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case INTLITERAL:
				{
				int LA182_6 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case LONGLITERAL:
				{
				int LA182_7 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case FLOATLITERAL:
				{
				int LA182_8 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case DOUBLELITERAL:
				{
				int LA182_9 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case CHARLITERAL:
				{
				int LA182_10 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case STRINGLITERAL:
				{
				int LA182_11 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case TRUE:
				{
				int LA182_12 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case FALSE:
				{
				int LA182_13 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case NULL:
				{
				int LA182_14 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case NEW:
				{
				int LA182_15 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA182_16 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			case VOID:
				{
				int LA182_17 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt182 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(182); }
			switch (alt182)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:522:10: explicitConstructorInvocation
				{
				DebugLocation(522, 10);
				PushFollow(Follow._explicitConstructorInvocation_in_synpred59_Java1892);
				explicitConstructorInvocation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(182); }

			DebugLocation(524, 9);
			// Java.g:524:9: ( blockStatement )*
			try { DebugEnterSubRule(183);
			while (true)
			{
				int alt183=2;
				try { DebugEnterDecision(183, false);
				int LA183_0 = input.LA(1);

				if ((LA183_0==ABSTRACT||(LA183_0>=ASSERT && LA183_0<=BANG)||(LA183_0>=BOOLEAN && LA183_0<=BYTE)||(LA183_0>=CHAR && LA183_0<=CLASS)||LA183_0==CONTINUE||LA183_0==DO||(LA183_0>=DOUBLE && LA183_0<=DOUBLELITERAL)||LA183_0==ENUM||(LA183_0>=FALSE && LA183_0<=FINAL)||(LA183_0>=FLOAT && LA183_0<=FOR)||(LA183_0>=IDENTIFIER && LA183_0<=IF)||(LA183_0>=INT && LA183_0<=INTLITERAL)||LA183_0==LBRACE||(LA183_0>=LONG && LA183_0<=LT)||(LA183_0>=MONKEYS_AT && LA183_0<=NULL)||LA183_0==PLUS||(LA183_0>=PLUSPLUS && LA183_0<=PUBLIC)||LA183_0==RETURN||(LA183_0>=SEMI && LA183_0<=SHORT)||(LA183_0>=STATIC && LA183_0<=SUB)||(LA183_0>=SUBSUB && LA183_0<=SYNCHRONIZED)||(LA183_0>=THIS && LA183_0<=THROW)||(LA183_0>=TILDE && LA183_0<=WHILE)))
				{
					alt183 = 1;
				}


				} finally { DebugExitDecision(183); }
				switch ( alt183 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:524:10: blockStatement
					{
					DebugLocation(524, 10);
					PushFollow(Follow._blockStatement_in_synpred59_Java1914);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop183;
				}
			}

			loop183:
				;

			} finally { DebugExitSubRule(183); }

			DebugLocation(526, 9);
			Match(input,RBRACE,Follow._RBRACE_in_synpred59_Java1935); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_Java_fragment", 183);
			LeaveRule("synpred59_Java_fragment", 183);
			LeaveRule_synpred59_Java_fragment();
		}
	}
	// $ANTLR end synpred59_Java

	partial void EnterRule_synpred68_Java_fragment();
	partial void LeaveRule_synpred68_Java_fragment();

	// $ANTLR start synpred68_Java
	public void synpred68_Java_fragment()
	{
		EnterRule_synpred68_Java_fragment();
		EnterRule("synpred68_Java_fragment", 192);
		TraceIn("synpred68_Java_fragment", 192);
		try
		{
			// Java.g:568:9: ( interfaceFieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:568:9: interfaceFieldDeclaration
			{
			DebugLocation(568, 9);
			PushFollow(Follow._interfaceFieldDeclaration_in_synpred68_Java2310);
			interfaceFieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_Java_fragment", 192);
			LeaveRule("synpred68_Java_fragment", 192);
			LeaveRule_synpred68_Java_fragment();
		}
	}
	// $ANTLR end synpred68_Java

	partial void EnterRule_synpred69_Java_fragment();
	partial void LeaveRule_synpred69_Java_fragment();

	// $ANTLR start synpred69_Java
	public void synpred69_Java_fragment()
	{
		EnterRule_synpred69_Java_fragment();
		EnterRule("synpred69_Java_fragment", 193);
		TraceIn("synpred69_Java_fragment", 193);
		try
		{
			// Java.g:569:9: ( interfaceMethodDeclaration )
			DebugEnterAlt(1);
			// Java.g:569:9: interfaceMethodDeclaration
			{
			DebugLocation(569, 9);
			PushFollow(Follow._interfaceMethodDeclaration_in_synpred69_Java2320);
			interfaceMethodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred69_Java_fragment", 193);
			LeaveRule("synpred69_Java_fragment", 193);
			LeaveRule_synpred69_Java_fragment();
		}
	}
	// $ANTLR end synpred69_Java

	partial void EnterRule_synpred70_Java_fragment();
	partial void LeaveRule_synpred70_Java_fragment();

	// $ANTLR start synpred70_Java
	public void synpred70_Java_fragment()
	{
		EnterRule_synpred70_Java_fragment();
		EnterRule("synpred70_Java_fragment", 194);
		TraceIn("synpred70_Java_fragment", 194);
		try
		{
			// Java.g:570:9: ( interfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:570:9: interfaceDeclaration
			{
			DebugLocation(570, 9);
			PushFollow(Follow._interfaceDeclaration_in_synpred70_Java2330);
			interfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred70_Java_fragment", 194);
			LeaveRule("synpred70_Java_fragment", 194);
			LeaveRule_synpred70_Java_fragment();
		}
	}
	// $ANTLR end synpred70_Java

	partial void EnterRule_synpred71_Java_fragment();
	partial void LeaveRule_synpred71_Java_fragment();

	// $ANTLR start synpred71_Java
	public void synpred71_Java_fragment()
	{
		EnterRule_synpred71_Java_fragment();
		EnterRule("synpred71_Java_fragment", 195);
		TraceIn("synpred71_Java_fragment", 195);
		try
		{
			// Java.g:571:9: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:571:9: classDeclaration
			{
			DebugLocation(571, 9);
			PushFollow(Follow._classDeclaration_in_synpred71_Java2340);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred71_Java_fragment", 195);
			LeaveRule("synpred71_Java_fragment", 195);
			LeaveRule_synpred71_Java_fragment();
		}
	}
	// $ANTLR end synpred71_Java

	partial void EnterRule_synpred96_Java_fragment();
	partial void LeaveRule_synpred96_Java_fragment();

	// $ANTLR start synpred96_Java
	public void synpred96_Java_fragment()
	{
		EnterRule_synpred96_Java_fragment();
		EnterRule("synpred96_Java_fragment", 220);
		TraceIn("synpred96_Java_fragment", 220);
		try
		{
			// Java.g:666:9: ( ellipsisParameterDecl )
			DebugEnterAlt(1);
			// Java.g:666:9: ellipsisParameterDecl
			{
			DebugLocation(666, 9);
			PushFollow(Follow._ellipsisParameterDecl_in_synpred96_Java3104);
			ellipsisParameterDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred96_Java_fragment", 220);
			LeaveRule("synpred96_Java_fragment", 220);
			LeaveRule_synpred96_Java_fragment();
		}
	}
	// $ANTLR end synpred96_Java

	partial void EnterRule_synpred98_Java_fragment();
	partial void LeaveRule_synpred98_Java_fragment();

	// $ANTLR start synpred98_Java
	public void synpred98_Java_fragment()
	{
		EnterRule_synpred98_Java_fragment();
		EnterRule("synpred98_Java_fragment", 222);
		TraceIn("synpred98_Java_fragment", 222);
		try
		{
			// Java.g:667:9: ( normalParameterDecl ( ',' normalParameterDecl )* )
			DebugEnterAlt(1);
			// Java.g:667:9: normalParameterDecl ( ',' normalParameterDecl )*
			{
			DebugLocation(667, 9);
			PushFollow(Follow._normalParameterDecl_in_synpred98_Java3114);
			normalParameterDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(668, 9);
			// Java.g:668:9: ( ',' normalParameterDecl )*
			try { DebugEnterSubRule(186);
			while (true)
			{
				int alt186=2;
				try { DebugEnterDecision(186, false);
				int LA186_0 = input.LA(1);

				if ((LA186_0==COMMA))
				{
					alt186 = 1;
				}


				} finally { DebugExitDecision(186); }
				switch ( alt186 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:668:10: ',' normalParameterDecl
					{
					DebugLocation(668, 10);
					Match(input,COMMA,Follow._COMMA_in_synpred98_Java3125); if (state.failed) return;
					DebugLocation(668, 14);
					PushFollow(Follow._normalParameterDecl_in_synpred98_Java3127);
					normalParameterDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop186;
				}
			}

			loop186:
				;

			} finally { DebugExitSubRule(186); }


			}

		}
		finally
		{
			TraceOut("synpred98_Java_fragment", 222);
			LeaveRule("synpred98_Java_fragment", 222);
			LeaveRule_synpred98_Java_fragment();
		}
	}
	// $ANTLR end synpred98_Java

	partial void EnterRule_synpred99_Java_fragment();
	partial void LeaveRule_synpred99_Java_fragment();

	// $ANTLR start synpred99_Java
	public void synpred99_Java_fragment()
	{
		EnterRule_synpred99_Java_fragment();
		EnterRule("synpred99_Java_fragment", 223);
		TraceIn("synpred99_Java_fragment", 223);
		try
		{
			// Java.g:670:10: ( normalParameterDecl ',' )
			DebugEnterAlt(1);
			// Java.g:670:10: normalParameterDecl ','
			{
			DebugLocation(670, 10);
			PushFollow(Follow._normalParameterDecl_in_synpred99_Java3149);
			normalParameterDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(671, 9);
			Match(input,COMMA,Follow._COMMA_in_synpred99_Java3159); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Java_fragment", 223);
			LeaveRule("synpred99_Java_fragment", 223);
			LeaveRule_synpred99_Java_fragment();
		}
	}
	// $ANTLR end synpred99_Java

	partial void EnterRule_synpred103_Java_fragment();
	partial void LeaveRule_synpred103_Java_fragment();

	// $ANTLR start synpred103_Java
	public void synpred103_Java_fragment()
	{
		EnterRule_synpred103_Java_fragment();
		EnterRule("synpred103_Java_fragment", 227);
		TraceIn("synpred103_Java_fragment", 227);
		try
		{
			// Java.g:690:9: ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' )
			DebugEnterAlt(1);
			// Java.g:690:9: ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';'
			{
			DebugLocation(690, 9);
			// Java.g:690:9: ( nonWildcardTypeArguments )?
			int alt187=2;
			try { DebugEnterSubRule(187);
			try { DebugEnterDecision(187, false);
			int LA187_0 = input.LA(1);

			if ((LA187_0==LT))
			{
				alt187 = 1;
			}
			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:690:10: nonWildcardTypeArguments
				{
				DebugLocation(690, 10);
				PushFollow(Follow._nonWildcardTypeArguments_in_synpred103_Java3294);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(187); }

			DebugLocation(692, 9);
			if (input.LA(1)==SUPER||input.LA(1)==THIS)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(695, 9);
			PushFollow(Follow._arguments_in_synpred103_Java3352);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(695, 19);
			Match(input,SEMI,Follow._SEMI_in_synpred103_Java3354); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred103_Java_fragment", 227);
			LeaveRule("synpred103_Java_fragment", 227);
			LeaveRule_synpred103_Java_fragment();
		}
	}
	// $ANTLR end synpred103_Java

	partial void EnterRule_synpred117_Java_fragment();
	partial void LeaveRule_synpred117_Java_fragment();

	// $ANTLR start synpred117_Java
	public void synpred117_Java_fragment()
	{
		EnterRule_synpred117_Java_fragment();
		EnterRule("synpred117_Java_fragment", 241);
		TraceIn("synpred117_Java_fragment", 241);
		try
		{
			// Java.g:777:9: ( annotationMethodDeclaration )
			DebugEnterAlt(1);
			// Java.g:777:9: annotationMethodDeclaration
			{
			DebugLocation(777, 9);
			PushFollow(Follow._annotationMethodDeclaration_in_synpred117_Java3953);
			annotationMethodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred117_Java_fragment", 241);
			LeaveRule("synpred117_Java_fragment", 241);
			LeaveRule_synpred117_Java_fragment();
		}
	}
	// $ANTLR end synpred117_Java

	partial void EnterRule_synpred118_Java_fragment();
	partial void LeaveRule_synpred118_Java_fragment();

	// $ANTLR start synpred118_Java
	public void synpred118_Java_fragment()
	{
		EnterRule_synpred118_Java_fragment();
		EnterRule("synpred118_Java_fragment", 242);
		TraceIn("synpred118_Java_fragment", 242);
		try
		{
			// Java.g:778:9: ( interfaceFieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:778:9: interfaceFieldDeclaration
			{
			DebugLocation(778, 9);
			PushFollow(Follow._interfaceFieldDeclaration_in_synpred118_Java3963);
			interfaceFieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred118_Java_fragment", 242);
			LeaveRule("synpred118_Java_fragment", 242);
			LeaveRule_synpred118_Java_fragment();
		}
	}
	// $ANTLR end synpred118_Java

	partial void EnterRule_synpred119_Java_fragment();
	partial void LeaveRule_synpred119_Java_fragment();

	// $ANTLR start synpred119_Java
	public void synpred119_Java_fragment()
	{
		EnterRule_synpred119_Java_fragment();
		EnterRule("synpred119_Java_fragment", 243);
		TraceIn("synpred119_Java_fragment", 243);
		try
		{
			// Java.g:779:9: ( normalClassDeclaration )
			DebugEnterAlt(1);
			// Java.g:779:9: normalClassDeclaration
			{
			DebugLocation(779, 9);
			PushFollow(Follow._normalClassDeclaration_in_synpred119_Java3973);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred119_Java_fragment", 243);
			LeaveRule("synpred119_Java_fragment", 243);
			LeaveRule_synpred119_Java_fragment();
		}
	}
	// $ANTLR end synpred119_Java

	partial void EnterRule_synpred120_Java_fragment();
	partial void LeaveRule_synpred120_Java_fragment();

	// $ANTLR start synpred120_Java
	public void synpred120_Java_fragment()
	{
		EnterRule_synpred120_Java_fragment();
		EnterRule("synpred120_Java_fragment", 244);
		TraceIn("synpred120_Java_fragment", 244);
		try
		{
			// Java.g:780:9: ( normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:780:9: normalInterfaceDeclaration
			{
			DebugLocation(780, 9);
			PushFollow(Follow._normalInterfaceDeclaration_in_synpred120_Java3983);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred120_Java_fragment", 244);
			LeaveRule("synpred120_Java_fragment", 244);
			LeaveRule_synpred120_Java_fragment();
		}
	}
	// $ANTLR end synpred120_Java

	partial void EnterRule_synpred121_Java_fragment();
	partial void LeaveRule_synpred121_Java_fragment();

	// $ANTLR start synpred121_Java
	public void synpred121_Java_fragment()
	{
		EnterRule_synpred121_Java_fragment();
		EnterRule("synpred121_Java_fragment", 245);
		TraceIn("synpred121_Java_fragment", 245);
		try
		{
			// Java.g:781:9: ( enumDeclaration )
			DebugEnterAlt(1);
			// Java.g:781:9: enumDeclaration
			{
			DebugLocation(781, 9);
			PushFollow(Follow._enumDeclaration_in_synpred121_Java3993);
			enumDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_Java_fragment", 245);
			LeaveRule("synpred121_Java_fragment", 245);
			LeaveRule_synpred121_Java_fragment();
		}
	}
	// $ANTLR end synpred121_Java

	partial void EnterRule_synpred122_Java_fragment();
	partial void LeaveRule_synpred122_Java_fragment();

	// $ANTLR start synpred122_Java
	public void synpred122_Java_fragment()
	{
		EnterRule_synpred122_Java_fragment();
		EnterRule("synpred122_Java_fragment", 246);
		TraceIn("synpred122_Java_fragment", 246);
		try
		{
			// Java.g:782:9: ( annotationTypeDeclaration )
			DebugEnterAlt(1);
			// Java.g:782:9: annotationTypeDeclaration
			{
			DebugLocation(782, 9);
			PushFollow(Follow._annotationTypeDeclaration_in_synpred122_Java4003);
			annotationTypeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred122_Java_fragment", 246);
			LeaveRule("synpred122_Java_fragment", 246);
			LeaveRule_synpred122_Java_fragment();
		}
	}
	// $ANTLR end synpred122_Java

	partial void EnterRule_synpred125_Java_fragment();
	partial void LeaveRule_synpred125_Java_fragment();

	// $ANTLR start synpred125_Java
	public void synpred125_Java_fragment()
	{
		EnterRule_synpred125_Java_fragment();
		EnterRule("synpred125_Java_fragment", 249);
		TraceIn("synpred125_Java_fragment", 249);
		try
		{
			// Java.g:825:9: ( localVariableDeclarationStatement )
			DebugEnterAlt(1);
			// Java.g:825:9: localVariableDeclarationStatement
			{
			DebugLocation(825, 9);
			PushFollow(Follow._localVariableDeclarationStatement_in_synpred125_Java4161);
			localVariableDeclarationStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred125_Java_fragment", 249);
			LeaveRule("synpred125_Java_fragment", 249);
			LeaveRule_synpred125_Java_fragment();
		}
	}
	// $ANTLR end synpred125_Java

	partial void EnterRule_synpred126_Java_fragment();
	partial void LeaveRule_synpred126_Java_fragment();

	// $ANTLR start synpred126_Java
	public void synpred126_Java_fragment()
	{
		EnterRule_synpred126_Java_fragment();
		EnterRule("synpred126_Java_fragment", 250);
		TraceIn("synpred126_Java_fragment", 250);
		try
		{
			// Java.g:826:9: ( classOrInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:826:9: classOrInterfaceDeclaration
			{
			DebugLocation(826, 9);
			PushFollow(Follow._classOrInterfaceDeclaration_in_synpred126_Java4171);
			classOrInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred126_Java_fragment", 250);
			LeaveRule("synpred126_Java_fragment", 250);
			LeaveRule_synpred126_Java_fragment();
		}
	}
	// $ANTLR end synpred126_Java

	partial void EnterRule_synpred130_Java_fragment();
	partial void LeaveRule_synpred130_Java_fragment();

	// $ANTLR start synpred130_Java
	public void synpred130_Java_fragment()
	{
		EnterRule_synpred130_Java_fragment();
		EnterRule("synpred130_Java_fragment", 254);
		TraceIn("synpred130_Java_fragment", 254);
		try
		{
			// Java.g:846:9: ( ( 'assert' ) expression ( ':' expression )? ';' )
			DebugEnterAlt(1);
			// Java.g:846:9: ( 'assert' ) expression ( ':' expression )? ';'
			{
			DebugLocation(846, 9);
			// Java.g:846:9: ( 'assert' )
			DebugEnterAlt(1);
			// Java.g:846:10: 'assert'
			{
			DebugLocation(846, 10);
			Match(input,ASSERT,Follow._ASSERT_in_synpred130_Java4312); if (state.failed) return;

			}

			DebugLocation(848, 9);
			PushFollow(Follow._expression_in_synpred130_Java4332);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(848, 20);
			// Java.g:848:20: ( ':' expression )?
			int alt190=2;
			try { DebugEnterSubRule(190);
			try { DebugEnterDecision(190, false);
			int LA190_0 = input.LA(1);

			if ((LA190_0==COLON))
			{
				alt190 = 1;
			}
			} finally { DebugExitDecision(190); }
			switch (alt190)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:848:21: ':' expression
				{
				DebugLocation(848, 21);
				Match(input,COLON,Follow._COLON_in_synpred130_Java4335); if (state.failed) return;
				DebugLocation(848, 25);
				PushFollow(Follow._expression_in_synpred130_Java4337);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(190); }

			DebugLocation(848, 38);
			Match(input,SEMI,Follow._SEMI_in_synpred130_Java4341); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred130_Java_fragment", 254);
			LeaveRule("synpred130_Java_fragment", 254);
			LeaveRule_synpred130_Java_fragment();
		}
	}
	// $ANTLR end synpred130_Java

	partial void EnterRule_synpred132_Java_fragment();
	partial void LeaveRule_synpred132_Java_fragment();

	// $ANTLR start synpred132_Java
	public void synpred132_Java_fragment()
	{
		EnterRule_synpred132_Java_fragment();
		EnterRule("synpred132_Java_fragment", 256);
		TraceIn("synpred132_Java_fragment", 256);
		try
		{
			// Java.g:849:9: ( 'assert' expression ( ':' expression )? ';' )
			DebugEnterAlt(1);
			// Java.g:849:9: 'assert' expression ( ':' expression )? ';'
			{
			DebugLocation(849, 9);
			Match(input,ASSERT,Follow._ASSERT_in_synpred132_Java4351); if (state.failed) return;
			DebugLocation(849, 19);
			PushFollow(Follow._expression_in_synpred132_Java4354);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(849, 30);
			// Java.g:849:30: ( ':' expression )?
			int alt191=2;
			try { DebugEnterSubRule(191);
			try { DebugEnterDecision(191, false);
			int LA191_0 = input.LA(1);

			if ((LA191_0==COLON))
			{
				alt191 = 1;
			}
			} finally { DebugExitDecision(191); }
			switch (alt191)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:849:31: ':' expression
				{
				DebugLocation(849, 31);
				Match(input,COLON,Follow._COLON_in_synpred132_Java4357); if (state.failed) return;
				DebugLocation(849, 35);
				PushFollow(Follow._expression_in_synpred132_Java4359);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(191); }

			DebugLocation(849, 48);
			Match(input,SEMI,Follow._SEMI_in_synpred132_Java4363); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred132_Java_fragment", 256);
			LeaveRule("synpred132_Java_fragment", 256);
			LeaveRule_synpred132_Java_fragment();
		}
	}
	// $ANTLR end synpred132_Java

	partial void EnterRule_synpred133_Java_fragment();
	partial void LeaveRule_synpred133_Java_fragment();

	// $ANTLR start synpred133_Java
	public void synpred133_Java_fragment()
	{
		EnterRule_synpred133_Java_fragment();
		EnterRule("synpred133_Java_fragment", 257);
		TraceIn("synpred133_Java_fragment", 257);
		try
		{
			// Java.g:850:39: ( 'else' statement )
			DebugEnterAlt(1);
			// Java.g:850:39: 'else' statement
			{
			DebugLocation(850, 39);
			Match(input,ELSE,Follow._ELSE_in_synpred133_Java4392); if (state.failed) return;
			DebugLocation(850, 46);
			PushFollow(Follow._statement_in_synpred133_Java4394);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred133_Java_fragment", 257);
			LeaveRule("synpred133_Java_fragment", 257);
			LeaveRule_synpred133_Java_fragment();
		}
	}
	// $ANTLR end synpred133_Java

	partial void EnterRule_synpred148_Java_fragment();
	partial void LeaveRule_synpred148_Java_fragment();

	// $ANTLR start synpred148_Java
	public void synpred148_Java_fragment()
	{
		EnterRule_synpred148_Java_fragment();
		EnterRule("synpred148_Java_fragment", 272);
		TraceIn("synpred148_Java_fragment", 272);
		try
		{
			// Java.g:865:9: ( expression ';' )
			DebugEnterAlt(1);
			// Java.g:865:9: expression ';'
			{
			DebugLocation(865, 9);
			PushFollow(Follow._expression_in_synpred148_Java4616);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(865, 21);
			Match(input,SEMI,Follow._SEMI_in_synpred148_Java4619); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred148_Java_fragment", 272);
			LeaveRule("synpred148_Java_fragment", 272);
			LeaveRule_synpred148_Java_fragment();
		}
	}
	// $ANTLR end synpred148_Java

	partial void EnterRule_synpred149_Java_fragment();
	partial void LeaveRule_synpred149_Java_fragment();

	// $ANTLR start synpred149_Java
	public void synpred149_Java_fragment()
	{
		EnterRule_synpred149_Java_fragment();
		EnterRule("synpred149_Java_fragment", 273);
		TraceIn("synpred149_Java_fragment", 273);
		try
		{
			// Java.g:866:9: ( IDENTIFIER ':' statement )
			DebugEnterAlt(1);
			// Java.g:866:9: IDENTIFIER ':' statement
			{
			DebugLocation(866, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred149_Java4634); if (state.failed) return;
			DebugLocation(866, 20);
			Match(input,COLON,Follow._COLON_in_synpred149_Java4636); if (state.failed) return;
			DebugLocation(866, 24);
			PushFollow(Follow._statement_in_synpred149_Java4638);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred149_Java_fragment", 273);
			LeaveRule("synpred149_Java_fragment", 273);
			LeaveRule_synpred149_Java_fragment();
		}
	}
	// $ANTLR end synpred149_Java

	partial void EnterRule_synpred153_Java_fragment();
	partial void LeaveRule_synpred153_Java_fragment();

	// $ANTLR start synpred153_Java
	public void synpred153_Java_fragment()
	{
		EnterRule_synpred153_Java_fragment();
		EnterRule("synpred153_Java_fragment", 277);
		TraceIn("synpred153_Java_fragment", 277);
		try
		{
			// Java.g:890:13: ( catches 'finally' block )
			DebugEnterAlt(1);
			// Java.g:890:13: catches 'finally' block
			{
			DebugLocation(890, 13);
			PushFollow(Follow._catches_in_synpred153_Java4794);
			catches();
			PopFollow();
			if (state.failed) return;
			DebugLocation(890, 21);
			Match(input,FINALLY,Follow._FINALLY_in_synpred153_Java4796); if (state.failed) return;
			DebugLocation(890, 31);
			PushFollow(Follow._block_in_synpred153_Java4798);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred153_Java_fragment", 277);
			LeaveRule("synpred153_Java_fragment", 277);
			LeaveRule_synpred153_Java_fragment();
		}
	}
	// $ANTLR end synpred153_Java

	partial void EnterRule_synpred154_Java_fragment();
	partial void LeaveRule_synpred154_Java_fragment();

	// $ANTLR start synpred154_Java
	public void synpred154_Java_fragment()
	{
		EnterRule_synpred154_Java_fragment();
		EnterRule("synpred154_Java_fragment", 278);
		TraceIn("synpred154_Java_fragment", 278);
		try
		{
			// Java.g:891:13: ( catches )
			DebugEnterAlt(1);
			// Java.g:891:13: catches
			{
			DebugLocation(891, 13);
			PushFollow(Follow._catches_in_synpred154_Java4812);
			catches();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred154_Java_fragment", 278);
			LeaveRule("synpred154_Java_fragment", 278);
			LeaveRule_synpred154_Java_fragment();
		}
	}
	// $ANTLR end synpred154_Java

	partial void EnterRule_synpred158_Java_fragment();
	partial void LeaveRule_synpred158_Java_fragment();

	// $ANTLR start synpred158_Java
	public void synpred158_Java_fragment()
	{
		EnterRule_synpred158_Java_fragment();
		EnterRule("synpred158_Java_fragment", 282);
		TraceIn("synpred158_Java_fragment", 282);
		try
		{
			// Java.g:909:9: ( variableModifiers catchType IDENTIFIER ( '[' ']' )* )
			DebugEnterAlt(1);
			// Java.g:909:9: variableModifiers catchType IDENTIFIER ( '[' ']' )*
			{
			DebugLocation(909, 9);
			PushFollow(Follow._variableModifiers_in_synpred158_Java4948);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(909, 27);
			PushFollow(Follow._catchType_in_synpred158_Java4950);
			catchType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(909, 37);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred158_Java4952); if (state.failed) return;
			DebugLocation(910, 9);
			// Java.g:910:9: ( '[' ']' )*
			try { DebugEnterSubRule(197);
			while (true)
			{
				int alt197=2;
				try { DebugEnterDecision(197, false);
				int LA197_0 = input.LA(1);

				if ((LA197_0==LBRACKET))
				{
					alt197 = 1;
				}


				} finally { DebugExitDecision(197); }
				switch ( alt197 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:910:10: '[' ']'
					{
					DebugLocation(910, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_synpred158_Java4963); if (state.failed) return;
					DebugLocation(910, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_synpred158_Java4965); if (state.failed) return;

					}
					break;

				default:
					goto loop197;
				}
			}

			loop197:
				;

			} finally { DebugExitSubRule(197); }


			}

		}
		finally
		{
			TraceOut("synpred158_Java_fragment", 282);
			LeaveRule("synpred158_Java_fragment", 282);
			LeaveRule_synpred158_Java_fragment();
		}
	}
	// $ANTLR end synpred158_Java

	partial void EnterRule_synpred161_Java_fragment();
	partial void LeaveRule_synpred161_Java_fragment();

	// $ANTLR start synpred161_Java
	public void synpred161_Java_fragment()
	{
		EnterRule_synpred161_Java_fragment();
		EnterRule("synpred161_Java_fragment", 285);
		TraceIn("synpred161_Java_fragment", 285);
		try
		{
			// Java.g:925:14: ( block catches 'finally' block )
			DebugEnterAlt(1);
			// Java.g:925:14: block catches 'finally' block
			{
			DebugLocation(925, 14);
			PushFollow(Follow._block_in_synpred161_Java5092);
			block();
			PopFollow();
			if (state.failed) return;
			DebugLocation(925, 20);
			PushFollow(Follow._catches_in_synpred161_Java5094);
			catches();
			PopFollow();
			if (state.failed) return;
			DebugLocation(925, 28);
			Match(input,FINALLY,Follow._FINALLY_in_synpred161_Java5096); if (state.failed) return;
			DebugLocation(925, 38);
			PushFollow(Follow._block_in_synpred161_Java5098);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred161_Java_fragment", 285);
			LeaveRule("synpred161_Java_fragment", 285);
			LeaveRule_synpred161_Java_fragment();
		}
	}
	// $ANTLR end synpred161_Java

	partial void EnterRule_synpred162_Java_fragment();
	partial void LeaveRule_synpred162_Java_fragment();

	// $ANTLR start synpred162_Java
	public void synpred162_Java_fragment()
	{
		EnterRule_synpred162_Java_fragment();
		EnterRule("synpred162_Java_fragment", 286);
		TraceIn("synpred162_Java_fragment", 286);
		try
		{
			// Java.g:926:14: ( block 'filly' block )
			DebugEnterAlt(1);
			// Java.g:926:14: block 'filly' block
			{
			DebugLocation(926, 14);
			PushFollow(Follow._block_in_synpred162_Java5113);
			block();
			PopFollow();
			if (state.failed) return;
			DebugLocation(926, 20);
			Match(input,119,Follow._119_in_synpred162_Java5115); if (state.failed) return;
			DebugLocation(926, 28);
			PushFollow(Follow._block_in_synpred162_Java5117);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred162_Java_fragment", 286);
			LeaveRule("synpred162_Java_fragment", 286);
			LeaveRule_synpred162_Java_fragment();
		}
	}
	// $ANTLR end synpred162_Java

	partial void EnterRule_synpred163_Java_fragment();
	partial void LeaveRule_synpred163_Java_fragment();

	// $ANTLR start synpred163_Java
	public void synpred163_Java_fragment()
	{
		EnterRule_synpred163_Java_fragment();
		EnterRule("synpred163_Java_fragment", 287);
		TraceIn("synpred163_Java_fragment", 287);
		try
		{
			// Java.g:927:14: ( block catches )
			DebugEnterAlt(1);
			// Java.g:927:14: block catches
			{
			DebugLocation(927, 14);
			PushFollow(Follow._block_in_synpred163_Java5132);
			block();
			PopFollow();
			if (state.failed) return;
			DebugLocation(927, 20);
			PushFollow(Follow._catches_in_synpred163_Java5134);
			catches();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred163_Java_fragment", 287);
			LeaveRule("synpred163_Java_fragment", 287);
			LeaveRule_synpred163_Java_fragment();
		}
	}
	// $ANTLR end synpred163_Java

	partial void EnterRule_synpred165_Java_fragment();
	partial void LeaveRule_synpred165_Java_fragment();

	// $ANTLR start synpred165_Java
	public void synpred165_Java_fragment()
	{
		EnterRule_synpred165_Java_fragment();
		EnterRule("synpred165_Java_fragment", 289);
		TraceIn("synpred165_Java_fragment", 289);
		try
		{
			// Java.g:940:10: ( resource )
			DebugEnterAlt(1);
			// Java.g:940:10: resource
			{
			DebugLocation(940, 10);
			PushFollow(Follow._resource_in_synpred165_Java5247);
			resource();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred165_Java_fragment", 289);
			LeaveRule("synpred165_Java_fragment", 289);
			LeaveRule_synpred165_Java_fragment();
		}
	}
	// $ANTLR end synpred165_Java

	partial void EnterRule_synpred167_Java_fragment();
	partial void LeaveRule_synpred167_Java_fragment();

	// $ANTLR start synpred167_Java
	public void synpred167_Java_fragment()
	{
		EnterRule_synpred167_Java_fragment();
		EnterRule("synpred167_Java_fragment", 291);
		TraceIn("synpred167_Java_fragment", 291);
		try
		{
			// Java.g:947:14: ( variableModifiers type IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:947:14: variableModifiers type IDENTIFIER
			{
			DebugLocation(947, 14);
			PushFollow(Follow._variableModifiers_in_synpred167_Java5312);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(947, 32);
			PushFollow(Follow._type_in_synpred167_Java5314);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(947, 37);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred167_Java5316); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred167_Java_fragment", 291);
			LeaveRule("synpred167_Java_fragment", 291);
			LeaveRule_synpred167_Java_fragment();
		}
	}
	// $ANTLR end synpred167_Java

	partial void EnterRule_synpred169_Java_fragment();
	partial void LeaveRule_synpred169_Java_fragment();

	// $ANTLR start synpred169_Java
	public void synpred169_Java_fragment()
	{
		EnterRule_synpred169_Java_fragment();
		EnterRule("synpred169_Java_fragment", 293);
		TraceIn("synpred169_Java_fragment", 293);
		try
		{
			// Java.g:958:9: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement )
			DebugEnterAlt(1);
			// Java.g:958:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
			{
			DebugLocation(958, 9);
			Match(input,FOR,Follow._FOR_in_synpred169_Java5425); if (state.failed) return;
			DebugLocation(958, 15);
			Match(input,LPAREN,Follow._LPAREN_in_synpred169_Java5427); if (state.failed) return;
			DebugLocation(958, 19);
			PushFollow(Follow._variableModifiers_in_synpred169_Java5429);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(958, 37);
			PushFollow(Follow._type_in_synpred169_Java5431);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(958, 42);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred169_Java5433); if (state.failed) return;
			DebugLocation(958, 53);
			Match(input,COLON,Follow._COLON_in_synpred169_Java5435); if (state.failed) return;
			DebugLocation(959, 9);
			PushFollow(Follow._expression_in_synpred169_Java5446);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(959, 20);
			Match(input,RPAREN,Follow._RPAREN_in_synpred169_Java5448); if (state.failed) return;
			DebugLocation(959, 24);
			PushFollow(Follow._statement_in_synpred169_Java5450);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred169_Java_fragment", 293);
			LeaveRule("synpred169_Java_fragment", 293);
			LeaveRule_synpred169_Java_fragment();
		}
	}
	// $ANTLR end synpred169_Java

	partial void EnterRule_synpred173_Java_fragment();
	partial void LeaveRule_synpred173_Java_fragment();

	// $ANTLR start synpred173_Java
	public void synpred173_Java_fragment()
	{
		EnterRule_synpred173_Java_fragment();
		EnterRule("synpred173_Java_fragment", 297);
		TraceIn("synpred173_Java_fragment", 297);
		try
		{
			// Java.g:972:9: ( localVariableDeclaration )
			DebugEnterAlt(1);
			// Java.g:972:9: localVariableDeclaration
			{
			DebugLocation(972, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred173_Java5629);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred173_Java_fragment", 297);
			LeaveRule("synpred173_Java_fragment", 297);
			LeaveRule_synpred173_Java_fragment();
		}
	}
	// $ANTLR end synpred173_Java

	partial void EnterRule_synpred214_Java_fragment();
	partial void LeaveRule_synpred214_Java_fragment();

	// $ANTLR start synpred214_Java
	public void synpred214_Java_fragment()
	{
		EnterRule_synpred214_Java_fragment();
		EnterRule("synpred214_Java_fragment", 338);
		TraceIn("synpred214_Java_fragment", 338);
		try
		{
			// Java.g:1126:9: ( castExpression )
			DebugEnterAlt(1);
			// Java.g:1126:9: castExpression
			{
			DebugLocation(1126, 9);
			PushFollow(Follow._castExpression_in_synpred214_Java6874);
			castExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred214_Java_fragment", 338);
			LeaveRule("synpred214_Java_fragment", 338);
			LeaveRule_synpred214_Java_fragment();
		}
	}
	// $ANTLR end synpred214_Java

	partial void EnterRule_synpred218_Java_fragment();
	partial void LeaveRule_synpred218_Java_fragment();

	// $ANTLR start synpred218_Java
	public void synpred218_Java_fragment()
	{
		EnterRule_synpred218_Java_fragment();
		EnterRule("synpred218_Java_fragment", 342);
		TraceIn("synpred218_Java_fragment", 342);
		try
		{
			// Java.g:1136:9: ( '(' primitiveType ')' unaryExpression )
			DebugEnterAlt(1);
			// Java.g:1136:9: '(' primitiveType ')' unaryExpression
			{
			DebugLocation(1136, 9);
			Match(input,LPAREN,Follow._LPAREN_in_synpred218_Java6965); if (state.failed) return;
			DebugLocation(1136, 13);
			PushFollow(Follow._primitiveType_in_synpred218_Java6967);
			primitiveType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1136, 27);
			Match(input,RPAREN,Follow._RPAREN_in_synpred218_Java6969); if (state.failed) return;
			DebugLocation(1136, 31);
			PushFollow(Follow._unaryExpression_in_synpred218_Java6971);
			unaryExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred218_Java_fragment", 342);
			LeaveRule("synpred218_Java_fragment", 342);
			LeaveRule_synpred218_Java_fragment();
		}
	}
	// $ANTLR end synpred218_Java

	partial void EnterRule_synpred220_Java_fragment();
	partial void LeaveRule_synpred220_Java_fragment();

	// $ANTLR start synpred220_Java
	public void synpred220_Java_fragment()
	{
		EnterRule_synpred220_Java_fragment();
		EnterRule("synpred220_Java_fragment", 344);
		TraceIn("synpred220_Java_fragment", 344);
		try
		{
			// Java.g:1146:10: ( '.' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1146:10: '.' IDENTIFIER
			{
			DebugLocation(1146, 10);
			Match(input,DOT,Follow._DOT_in_synpred220_Java7042); if (state.failed) return;
			DebugLocation(1146, 14);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred220_Java7044); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred220_Java_fragment", 344);
			LeaveRule("synpred220_Java_fragment", 344);
			LeaveRule_synpred220_Java_fragment();
		}
	}
	// $ANTLR end synpred220_Java

	partial void EnterRule_synpred221_Java_fragment();
	partial void LeaveRule_synpred221_Java_fragment();

	// $ANTLR start synpred221_Java
	public void synpred221_Java_fragment()
	{
		EnterRule_synpred221_Java_fragment();
		EnterRule("synpred221_Java_fragment", 345);
		TraceIn("synpred221_Java_fragment", 345);
		try
		{
			// Java.g:1148:10: ( identifierSuffix )
			DebugEnterAlt(1);
			// Java.g:1148:10: identifierSuffix
			{
			DebugLocation(1148, 10);
			PushFollow(Follow._identifierSuffix_in_synpred221_Java7066);
			identifierSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred221_Java_fragment", 345);
			LeaveRule("synpred221_Java_fragment", 345);
			LeaveRule_synpred221_Java_fragment();
		}
	}
	// $ANTLR end synpred221_Java

	partial void EnterRule_synpred223_Java_fragment();
	partial void LeaveRule_synpred223_Java_fragment();

	// $ANTLR start synpred223_Java
	public void synpred223_Java_fragment()
	{
		EnterRule_synpred223_Java_fragment();
		EnterRule("synpred223_Java_fragment", 347);
		TraceIn("synpred223_Java_fragment", 347);
		try
		{
			// Java.g:1151:10: ( '.' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1151:10: '.' IDENTIFIER
			{
			DebugLocation(1151, 10);
			Match(input,DOT,Follow._DOT_in_synpred223_Java7098); if (state.failed) return;
			DebugLocation(1151, 14);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred223_Java7100); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred223_Java_fragment", 347);
			LeaveRule("synpred223_Java_fragment", 347);
			LeaveRule_synpred223_Java_fragment();
		}
	}
	// $ANTLR end synpred223_Java

	partial void EnterRule_synpred224_Java_fragment();
	partial void LeaveRule_synpred224_Java_fragment();

	// $ANTLR start synpred224_Java
	public void synpred224_Java_fragment()
	{
		EnterRule_synpred224_Java_fragment();
		EnterRule("synpred224_Java_fragment", 348);
		TraceIn("synpred224_Java_fragment", 348);
		try
		{
			// Java.g:1153:10: ( identifierSuffix )
			DebugEnterAlt(1);
			// Java.g:1153:10: identifierSuffix
			{
			DebugLocation(1153, 10);
			PushFollow(Follow._identifierSuffix_in_synpred224_Java7122);
			identifierSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred224_Java_fragment", 348);
			LeaveRule("synpred224_Java_fragment", 348);
			LeaveRule_synpred224_Java_fragment();
		}
	}
	// $ANTLR end synpred224_Java

	partial void EnterRule_synpred236_Java_fragment();
	partial void LeaveRule_synpred236_Java_fragment();

	// $ANTLR start synpred236_Java
	public void synpred236_Java_fragment()
	{
		EnterRule_synpred236_Java_fragment();
		EnterRule("synpred236_Java_fragment", 360);
		TraceIn("synpred236_Java_fragment", 360);
		try
		{
			// Java.g:1181:10: ( '[' expression ']' )
			DebugEnterAlt(1);
			// Java.g:1181:10: '[' expression ']'
			{
			DebugLocation(1181, 10);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred236_Java7373); if (state.failed) return;
			DebugLocation(1181, 14);
			PushFollow(Follow._expression_in_synpred236_Java7375);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1181, 25);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred236_Java7377); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred236_Java_fragment", 360);
			LeaveRule("synpred236_Java_fragment", 360);
			LeaveRule_synpred236_Java_fragment();
		}
	}
	// $ANTLR end synpred236_Java

	partial void EnterRule_synpred249_Java_fragment();
	partial void LeaveRule_synpred249_Java_fragment();

	// $ANTLR start synpred249_Java
	public void synpred249_Java_fragment()
	{
		EnterRule_synpred249_Java_fragment();
		EnterRule("synpred249_Java_fragment", 373);
		TraceIn("synpred249_Java_fragment", 373);
		try
		{
			// Java.g:1203:9: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1203:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
			{
			DebugLocation(1203, 9);
			Match(input,NEW,Follow._NEW_in_synpred249_Java7584); if (state.failed) return;
			DebugLocation(1203, 15);
			PushFollow(Follow._nonWildcardTypeArguments_in_synpred249_Java7586);
			nonWildcardTypeArguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1203, 40);
			PushFollow(Follow._classOrInterfaceType_in_synpred249_Java7588);
			classOrInterfaceType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1203, 61);
			PushFollow(Follow._classCreatorRest_in_synpred249_Java7590);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred249_Java_fragment", 373);
			LeaveRule("synpred249_Java_fragment", 373);
			LeaveRule_synpred249_Java_fragment();
		}
	}
	// $ANTLR end synpred249_Java

	partial void EnterRule_synpred250_Java_fragment();
	partial void LeaveRule_synpred250_Java_fragment();

	// $ANTLR start synpred250_Java
	public void synpred250_Java_fragment()
	{
		EnterRule_synpred250_Java_fragment();
		EnterRule("synpred250_Java_fragment", 374);
		TraceIn("synpred250_Java_fragment", 374);
		try
		{
			// Java.g:1204:9: ( 'new' classOrInterfaceType classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1204:9: 'new' classOrInterfaceType classCreatorRest
			{
			DebugLocation(1204, 9);
			Match(input,NEW,Follow._NEW_in_synpred250_Java7600); if (state.failed) return;
			DebugLocation(1204, 15);
			PushFollow(Follow._classOrInterfaceType_in_synpred250_Java7602);
			classOrInterfaceType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1204, 36);
			PushFollow(Follow._classCreatorRest_in_synpred250_Java7604);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred250_Java_fragment", 374);
			LeaveRule("synpred250_Java_fragment", 374);
			LeaveRule_synpred250_Java_fragment();
		}
	}
	// $ANTLR end synpred250_Java

	partial void EnterRule_synpred252_Java_fragment();
	partial void LeaveRule_synpred252_Java_fragment();

	// $ANTLR start synpred252_Java
	public void synpred252_Java_fragment()
	{
		EnterRule_synpred252_Java_fragment();
		EnterRule("synpred252_Java_fragment", 376);
		TraceIn("synpred252_Java_fragment", 376);
		try
		{
			// Java.g:1209:9: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer )
			DebugEnterAlt(1);
			// Java.g:1209:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
			{
			DebugLocation(1209, 9);
			Match(input,NEW,Follow._NEW_in_synpred252_Java7634); if (state.failed) return;
			DebugLocation(1209, 15);
			PushFollow(Follow._createdName_in_synpred252_Java7636);
			createdName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1210, 9);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred252_Java7646); if (state.failed) return;
			DebugLocation(1210, 13);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred252_Java7648); if (state.failed) return;
			DebugLocation(1211, 9);
			// Java.g:1211:9: ( '[' ']' )*
			try { DebugEnterSubRule(206);
			while (true)
			{
				int alt206=2;
				try { DebugEnterDecision(206, false);
				int LA206_0 = input.LA(1);

				if ((LA206_0==LBRACKET))
				{
					alt206 = 1;
				}


				} finally { DebugExitDecision(206); }
				switch ( alt206 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1211:10: '[' ']'
					{
					DebugLocation(1211, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_synpred252_Java7659); if (state.failed) return;
					DebugLocation(1211, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_synpred252_Java7661); if (state.failed) return;

					}
					break;

				default:
					goto loop206;
				}
			}

			loop206:
				;

			} finally { DebugExitSubRule(206); }

			DebugLocation(1213, 9);
			PushFollow(Follow._arrayInitializer_in_synpred252_Java7682);
			arrayInitializer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred252_Java_fragment", 376);
			LeaveRule("synpred252_Java_fragment", 376);
			LeaveRule_synpred252_Java_fragment();
		}
	}
	// $ANTLR end synpred252_Java

	partial void EnterRule_synpred253_Java_fragment();
	partial void LeaveRule_synpred253_Java_fragment();

	// $ANTLR start synpred253_Java
	public void synpred253_Java_fragment()
	{
		EnterRule_synpred253_Java_fragment();
		EnterRule("synpred253_Java_fragment", 377);
		TraceIn("synpred253_Java_fragment", 377);
		try
		{
			// Java.g:1218:13: ( '[' expression ']' )
			DebugEnterAlt(1);
			// Java.g:1218:13: '[' expression ']'
			{
			DebugLocation(1218, 13);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred253_Java7731); if (state.failed) return;
			DebugLocation(1218, 17);
			PushFollow(Follow._expression_in_synpred253_Java7733);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1219, 13);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred253_Java7747); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred253_Java_fragment", 377);
			LeaveRule("synpred253_Java_fragment", 377);
			LeaveRule_synpred253_Java_fragment();
		}
	}
	// $ANTLR end synpred253_Java
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _annotations_in_compilationUnit100 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _packageDeclaration_in_compilationUnit129 = new BitSet(new ulong[]{0x1200102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _importDeclaration_in_compilationUnit151 = new BitSet(new ulong[]{0x1200102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _typeDeclaration_in_compilationUnit173 = new BitSet(new ulong[]{0x1000102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration204 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_packageDeclaration206 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_packageDeclaration216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration237 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration249 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration270 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_importDeclaration272 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _STAR_in_importDeclaration274 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_importDeclaration284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration301 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration313 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration334 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_importDeclaration345 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration347 = new BitSet(new ulong[]{0x80000000UL,0x10000000UL});
		public static readonly BitSet _DOT_in_importDeclaration369 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _STAR_in_importDeclaration371 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_importDeclaration392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedImportName412 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_qualifiedImportName423 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedImportName425 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_typeDeclaration456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_typeDeclaration466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_classOrInterfaceDeclaration487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_classOrInterfaceDeclaration497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_modifiers532 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PUBLIC_in_modifiers542 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PROTECTED_in_modifiers552 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PRIVATE_in_modifiers562 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _STATIC_in_modifiers572 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _ABSTRACT_in_modifiers582 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _FINAL_in_modifiers592 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _NATIVE_in_modifiers602 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifiers612 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _TRANSIENT_in_modifiers622 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _VOLATILE_in_modifiers632 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _STRICTFP_in_modifiers642 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _FINAL_in_variableModifiers674 = new BitSet(new ulong[]{0x100000000002UL,0x200UL});
		public static readonly BitSet _annotation_in_variableModifiers688 = new BitSet(new ulong[]{0x100000000002UL,0x200UL});
		public static readonly BitSet _normalClassDeclaration_in_classDeclaration724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_classDeclaration734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_normalClassDeclaration754 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_normalClassDeclaration757 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalClassDeclaration759 = new BitSet(new ulong[]{0x100010000000000UL,0x82UL});
		public static readonly BitSet _typeParameters_in_normalClassDeclaration770 = new BitSet(new ulong[]{0x100010000000000UL,0x2UL});
		public static readonly BitSet _EXTENDS_in_normalClassDeclaration792 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_normalClassDeclaration794 = new BitSet(new ulong[]{0x100000000000000UL,0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_normalClassDeclaration816 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_normalClassDeclaration818 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _classBody_in_normalClassDeclaration851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_typeParameters872 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _typeParameter_in_typeParameters886 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _COMMA_in_typeParameters901 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _typeParameter_in_typeParameters903 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _GT_in_typeParameters928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_typeParameter948 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _EXTENDS_in_typeParameter959 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeBound_in_typeParameter961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeBound993 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AMP_in_typeBound1004 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeBound1006 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _modifiers_in_enumDeclaration1038 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ENUM_in_enumDeclaration1050 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumDeclaration1071 = new BitSet(new ulong[]{0x100000000000000UL,0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_enumDeclaration1082 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_enumDeclaration1084 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _enumBody_in_enumDeclaration1105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_enumBody1130 = new BitSet(new ulong[]{0x40000002000000UL,0x11000200UL});
		public static readonly BitSet _enumConstants_in_enumBody1141 = new BitSet(new ulong[]{0x2000000UL,0x11000000UL});
		public static readonly BitSet _COMMA_in_enumBody1163 = new BitSet(new ulong[]{0x0UL,0x11000000UL});
		public static readonly BitSet _enumBodyDeclarations_in_enumBody1176 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_enumBody1198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumConstant_in_enumConstants1218 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_enumConstants1229 = new BitSet(new ulong[]{0x40000000000000UL,0x200UL});
		public static readonly BitSet _enumConstant_in_enumConstants1231 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _annotations_in_enumConstant1265 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumConstant1286 = new BitSet(new ulong[]{0x2UL,0x42UL});
		public static readonly BitSet _arguments_in_enumConstant1297 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _classBody_in_enumConstant1319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_enumBodyDeclarations1360 = new BitSet(new ulong[]{0x1840502100A14012UL,0x19040C30700692UL});
		public static readonly BitSet _classBodyDeclaration_in_enumBodyDeclarations1372 = new BitSet(new ulong[]{0x1840502100A14012UL,0x19040C30700692UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_interfaceDeclaration1403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_interfaceDeclaration1413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_normalInterfaceDeclaration1437 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_normalInterfaceDeclaration1439 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalInterfaceDeclaration1441 = new BitSet(new ulong[]{0x10000000000UL,0x82UL});
		public static readonly BitSet _typeParameters_in_normalInterfaceDeclaration1452 = new BitSet(new ulong[]{0x10000000000UL,0x2UL});
		public static readonly BitSet _EXTENDS_in_normalInterfaceDeclaration1474 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_normalInterfaceDeclaration1476 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _interfaceBody_in_normalInterfaceDeclaration1497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeList1517 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_typeList1528 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeList1530 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _LBRACE_in_classBody1561 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700692UL});
		public static readonly BitSet _classBodyDeclaration_in_classBody1573 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700692UL});
		public static readonly BitSet _RBRACE_in_classBody1595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_interfaceBody1615 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700690UL});
		public static readonly BitSet _interfaceBodyDeclaration_in_interfaceBody1627 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700690UL});
		public static readonly BitSet _RBRACE_in_interfaceBody1649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classBodyDeclaration1669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_classBodyDeclaration1680 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_classBodyDeclaration1702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberDecl_in_classBodyDeclaration1712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_memberDecl1733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclaration_in_memberDecl1744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_memberDecl1755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_memberDecl1766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDeclaration1804 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeParameters_in_methodDeclaration1815 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodDeclaration1836 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration1846 = new BitSet(new ulong[]{0x0UL,0x400000000002UL});
		public static readonly BitSet _THROWS_in_methodDeclaration1857 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_methodDeclaration1859 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_methodDeclaration1880 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1EF2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_methodDeclaration1892 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_methodDeclaration1914 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_methodDeclaration1935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDeclaration1945 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_methodDeclaration1956 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_methodDeclaration1978 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_methodDeclaration1992 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodDeclaration2012 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration2022 = new BitSet(new ulong[]{0x0UL,0x400010000006UL});
		public static readonly BitSet _LBRACKET_in_methodDeclaration2033 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_methodDeclaration2035 = new BitSet(new ulong[]{0x0UL,0x400010000006UL});
		public static readonly BitSet _THROWS_in_methodDeclaration2057 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_methodDeclaration2059 = new BitSet(new ulong[]{0x0UL,0x10000002UL});
		public static readonly BitSet _block_in_methodDeclaration2114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_methodDeclaration2128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_fieldDeclaration2160 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_fieldDeclaration2170 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_fieldDeclaration2180 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _COMMA_in_fieldDeclaration2191 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_fieldDeclaration2193 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_fieldDeclaration2214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_variableDeclarator2234 = new BitSet(new ulong[]{0x4000000002UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_variableDeclarator2245 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_variableDeclarator2247 = new BitSet(new ulong[]{0x4000000002UL,0x4UL});
		public static readonly BitSet _EQ_in_variableDeclarator2269 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1872UL});
		public static readonly BitSet _variableInitializer_in_variableDeclarator2271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_interfaceBodyDeclaration2310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceMethodDeclaration_in_interfaceBodyDeclaration2320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_interfaceBodyDeclaration2330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_interfaceBodyDeclaration2340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_interfaceBodyDeclaration2350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceMethodDeclaration2370 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_interfaceMethodDeclaration2381 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_interfaceMethodDeclaration2403 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_interfaceMethodDeclaration2414 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_interfaceMethodDeclaration2434 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_interfaceMethodDeclaration2444 = new BitSet(new ulong[]{0x0UL,0x400010000004UL});
		public static readonly BitSet _LBRACKET_in_interfaceMethodDeclaration2455 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_interfaceMethodDeclaration2457 = new BitSet(new ulong[]{0x0UL,0x400010000004UL});
		public static readonly BitSet _THROWS_in_interfaceMethodDeclaration2479 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_interfaceMethodDeclaration2481 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_interfaceMethodDeclaration2494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceFieldDeclaration2516 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_interfaceFieldDeclaration2518 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_interfaceFieldDeclaration2520 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _COMMA_in_interfaceFieldDeclaration2531 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_interfaceFieldDeclaration2533 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_interfaceFieldDeclaration2554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceType_in_type2575 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_type2586 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_type2588 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _primitiveType_in_type2609 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_type2620 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_type2622 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceType2654 = new BitSet(new ulong[]{0x80000002UL,0x80UL});
		public static readonly BitSet _typeArguments_in_classOrInterfaceType2665 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_classOrInterfaceType2687 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceType2689 = new BitSet(new ulong[]{0x80000002UL,0x80UL});
		public static readonly BitSet _typeArguments_in_classOrInterfaceType2704 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _LT_in_typeArguments2841 = new BitSet(new ulong[]{0x840400100214000UL,0x20800010UL});
		public static readonly BitSet _typeArgument_in_typeArguments2843 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _COMMA_in_typeArguments2854 = new BitSet(new ulong[]{0x840400100214000UL,0x20800010UL});
		public static readonly BitSet _typeArgument_in_typeArguments2856 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _GT_in_typeArguments2878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeArgument2898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUES_in_typeArgument2908 = new BitSet(new ulong[]{0x10000000002UL,0x10000000000UL});
		public static readonly BitSet _set_in_typeArgument2932 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeArgument2976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameList3007 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_qualifiedNameList3018 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameList3020 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _LPAREN_in_formalParameters3051 = new BitSet(new ulong[]{0x840500100214000UL,0x28000210UL});
		public static readonly BitSet _formalParameterDecls_in_formalParameters3062 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_formalParameters3084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ellipsisParameterDecl_in_formalParameterDecls3104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3114 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_formalParameterDecls3125 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3127 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3149 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _COMMA_in_formalParameterDecls3159 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _ellipsisParameterDecl_in_formalParameterDecls3181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_normalParameterDecl3201 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_normalParameterDecl3203 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalParameterDecl3205 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_normalParameterDecl3216 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_normalParameterDecl3218 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _variableModifiers_in_ellipsisParameterDecl3249 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_ellipsisParameterDecl3259 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ELLIPSIS_in_ellipsisParameterDecl3262 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_ellipsisParameterDecl3272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_explicitConstructorInvocation3294 = new BitSet(new ulong[]{0x0UL,0x110000000000UL});
		public static readonly BitSet _set_in_explicitConstructorInvocation3320 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_explicitConstructorInvocation3352 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_explicitConstructorInvocation3354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_explicitConstructorInvocation3365 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_explicitConstructorInvocation3375 = new BitSet(new ulong[]{0x0UL,0x10000000080UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_explicitConstructorInvocation3386 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_explicitConstructorInvocation3407 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_explicitConstructorInvocation3417 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_explicitConstructorInvocation3419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedName3439 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_qualifiedName3450 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedName3452 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _annotation_in_annotations3484 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotation3517 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_annotation3519 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _LPAREN_in_annotation3533 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1A72UL});
		public static readonly BitSet _elementValuePairs_in_annotation3560 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _elementValue_in_annotation3584 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_annotation3620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementValuePair_in_elementValuePairs3652 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_elementValuePairs3663 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _elementValuePair_in_elementValuePairs3665 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _IDENTIFIER_in_elementValuePair3696 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_elementValuePair3698 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_elementValuePair3700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_elementValue3720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_elementValue3730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementValueArrayInitializer_in_elementValue3740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_elementValueArrayInitializer3760 = new BitSet(new ulong[]{0x2840C80302614200UL,0xA91B0210A1A72UL});
		public static readonly BitSet _elementValue_in_elementValueArrayInitializer3771 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_elementValueArrayInitializer3786 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_elementValueArrayInitializer3788 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_elementValueArrayInitializer3817 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_elementValueArrayInitializer3821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationTypeDeclaration3844 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotationTypeDeclaration3846 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_annotationTypeDeclaration3856 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationTypeDeclaration3866 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _annotationTypeBody_in_annotationTypeDeclaration3876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_annotationTypeBody3897 = new BitSet(new ulong[]{0x1840502100A14010UL,0x11040C31700610UL});
		public static readonly BitSet _annotationTypeElementDeclaration_in_annotationTypeBody3909 = new BitSet(new ulong[]{0x1840502100A14010UL,0x11040C31700610UL});
		public static readonly BitSet _RBRACE_in_annotationTypeBody3931 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationMethodDeclaration_in_annotationTypeElementDeclaration3953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_annotationTypeElementDeclaration3963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_annotationTypeElementDeclaration3973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_annotationTypeElementDeclaration3983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_annotationTypeElementDeclaration3993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_annotationTypeElementDeclaration4003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_annotationTypeElementDeclaration4013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationMethodDeclaration4033 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_annotationMethodDeclaration4035 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationMethodDeclaration4037 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_annotationMethodDeclaration4047 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_annotationMethodDeclaration4049 = new BitSet(new ulong[]{0x20000000UL,0x10000000UL});
		public static readonly BitSet _DEFAULT_in_annotationMethodDeclaration4052 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_annotationMethodDeclaration4054 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_annotationMethodDeclaration4083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_block4107 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_block4118 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_block4139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclarationStatement_in_blockStatement4161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_blockStatement4171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement4181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_localVariableDeclarationStatement4202 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_localVariableDeclarationStatement4212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_localVariableDeclaration4232 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_localVariableDeclaration4234 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_localVariableDeclaration4244 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_localVariableDeclaration4255 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_localVariableDeclaration4257 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _block_in_statement4288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement4312 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4332 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_statement4335 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4337 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement4351 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4354 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_statement4357 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4359 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_statement4385 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4387 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4389 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _ELSE_in_statement4392 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forstatement_in_statement4416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_statement4426 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4428 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_statement4440 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4442 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _WHILE_in_statement4444 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4446 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _trystatement_in_statement4458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_statement4468 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4470 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_statement4472 = new BitSet(new ulong[]{0x20080000UL,0x1000000UL});
		public static readonly BitSet _switchBlockStatementGroups_in_statement4474 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_statement4476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement4486 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4488 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_statement4490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_statement4500 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0300A1870UL});
		public static readonly BitSet _expression_in_statement4503 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_statement4518 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4520 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_statement4532 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _IDENTIFIER_in_statement4547 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_statement4574 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _IDENTIFIER_in_statement4589 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement4616 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_statement4634 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_statement4636 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement4648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchBlockStatementGroup_in_switchBlockStatementGroups4670 = new BitSet(new ulong[]{0x20080002UL});
		public static readonly BitSet _switchLabel_in_switchBlockStatementGroup4699 = new BitSet(new ulong[]{0x38C1D82350E1C312UL,0x3FB7BC347A1E72UL});
		public static readonly BitSet _blockStatement_in_switchBlockStatementGroup4710 = new BitSet(new ulong[]{0x38C1D82350E1C312UL,0x3FB7BC347A1E72UL});
		public static readonly BitSet _CASE_in_switchLabel4741 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_switchLabel4743 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchLabel4745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_switchLabel4755 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchLabel4757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_trystatement4778 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4780 = new BitSet(new ulong[]{0x200000100000UL});
		public static readonly BitSet _catches_in_trystatement4794 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _FINALLY_in_trystatement4796 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_trystatement4812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_trystatement4826 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryWithResourcesStatement_in_trystatement4848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_catches4869 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _catchClause_in_catches4880 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _CATCH_in_catchClause4911 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_catchClause4913 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _formalParameter_in_catchClause4915 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_catchClause4925 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_catchClause4927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_formalParameter4948 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _catchType_in_formalParameter4950 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_formalParameter4952 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_formalParameter4963 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_formalParameter4965 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _catchType_in_formalParameter4986 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_formalParameter4988 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_formalParameter4999 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_formalParameter5001 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _type_in_catchType5031 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _BAR_in_catchType5042 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_catchType5044 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _TRY_in_tryWithResourcesStatement5075 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _resourceSpecification_in_tryWithResourcesStatement5077 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_tryWithResourcesStatement5092 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _catches_in_tryWithResourcesStatement5094 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _FINALLY_in_tryWithResourcesStatement5096 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_tryWithResourcesStatement5098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_tryWithResourcesStatement5113 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_tryWithResourcesStatement5115 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_tryWithResourcesStatement5117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_tryWithResourcesStatement5132 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _catches_in_tryWithResourcesStatement5134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_tryWithResourcesStatement5149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_resourceSpecification5180 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _resources_in_resourceSpecification5182 = new BitSet(new ulong[]{0x0UL,0x18000000UL});
		public static readonly BitSet _SEMI_in_resourceSpecification5197 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_resourceSpecification5199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RPAREN_in_resourceSpecification5215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _resource_in_resources5247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _resource_in_resources5258 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_resources5274 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _resource_in_resources5276 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _variableModifiers_in_resource5312 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_resource5314 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_resource5316 = new BitSet(new ulong[]{0x4000000000UL,0x4UL});
		public static readonly BitSet _type_in_resource5331 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_resource5333 = new BitSet(new ulong[]{0x4000000000UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_resource5359 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_resource5361 = new BitSet(new ulong[]{0x4000000000UL,0x4UL});
		public static readonly BitSet _EQ_in_resource5384 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_resource5386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forstatement5425 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_forstatement5427 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _variableModifiers_in_forstatement5429 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_forstatement5431 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_forstatement5433 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_forstatement5435 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_forstatement5446 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_forstatement5448 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_forstatement5450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forstatement5482 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_forstatement5484 = new BitSet(new ulong[]{0x2840D80300614200UL,0xA91B0300A1A70UL});
		public static readonly BitSet _forInit_in_forstatement5504 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_forstatement5525 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0300A1870UL});
		public static readonly BitSet _expression_in_forstatement5545 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_forstatement5566 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1870UL});
		public static readonly BitSet _expressionList_in_forstatement5586 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_forstatement5607 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_forstatement5609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit5629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInit5639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parExpression5659 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_parExpression5661 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_parExpression5663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList5683 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_expressionList5694 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_expressionList5696 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _conditionalExpression_in_expression5728 = new BitSet(new ulong[]{0x8004000042082UL,0x4280050080UL});
		public static readonly BitSet _assignmentOperator_in_expression5739 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_expression5741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQ_in_assignmentOperator5773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUSEQ_in_assignmentOperator5783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBEQ_in_assignmentOperator5793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STAREQ_in_assignmentOperator5803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SLASHEQ_in_assignmentOperator5813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AMPEQ_in_assignmentOperator5823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BAREQ_in_assignmentOperator5833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CARETEQ_in_assignmentOperator5843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PERCENTEQ_in_assignmentOperator5853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_assignmentOperator5864 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LT_in_assignmentOperator5866 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignmentOperator5879 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5881 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5883 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignmentOperator5896 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5898 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalOrExpression_in_conditionalExpression5921 = new BitSet(new ulong[]{0x2UL,0x800000UL});
		public static readonly BitSet _QUES_in_conditionalExpression5932 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_conditionalExpression5934 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression5936 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _conditionalExpression_in_conditionalExpression5938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression5969 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _BARBAR_in_conditionalOrExpression5980 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression5982 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression6013 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _AMPAMP_in_conditionalAndExpression6024 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression6026 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression6057 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _BAR_in_inclusiveOrExpression6068 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression6070 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression6101 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _CARET_in_exclusiveOrExpression6112 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression6114 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _equalityExpression_in_andExpression6145 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AMP_in_andExpression6156 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _equalityExpression_in_andExpression6158 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression6189 = new BitSet(new ulong[]{0x8000000402UL});
		public static readonly BitSet _set_in_equalityExpression6216 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression6266 = new BitSet(new ulong[]{0x8000000402UL});
		public static readonly BitSet _relationalExpression_in_instanceOfExpression6297 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _INSTANCEOF_in_instanceOfExpression6308 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_instanceOfExpression6310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression6341 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _relationalOp_in_relationalExpression6352 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression6354 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _LT_in_relationalOp6386 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_relationalOp6388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOp6399 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_relationalOp6401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_relationalOp6411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOp6421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression6441 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _shiftOp_in_shiftExpression6452 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression6454 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _LT_in_shiftOp6487 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LT_in_shiftOp6489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_shiftOp6500 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6502 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_shiftOp6515 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression6538 = new BitSet(new ulong[]{0x2UL,0x2000020000UL});
		public static readonly BitSet _set_in_additiveExpression6565 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression6615 = new BitSet(new ulong[]{0x2UL,0x2000020000UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression6653 = new BitSet(new ulong[]{0x2UL,0x140008000UL});
		public static readonly BitSet _set_in_multiplicativeExpression6680 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression6748 = new BitSet(new ulong[]{0x2UL,0x140008000UL});
		public static readonly BitSet _PLUS_in_unaryExpression6781 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUB_in_unaryExpression6794 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUSPLUS_in_unaryExpression6806 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBSUB_in_unaryExpression6818 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_unaryExpression6830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TILDE_in_unaryExpressionNotPlusMinus6850 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus6852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BANG_in_unaryExpressionNotPlusMinus6862 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus6864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_unaryExpressionNotPlusMinus6874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_unaryExpressionNotPlusMinus6884 = new BitSet(new ulong[]{0x80000002UL,0x8000080004UL});
		public static readonly BitSet _selector_in_unaryExpressionNotPlusMinus6895 = new BitSet(new ulong[]{0x80000002UL,0x8000080004UL});
		public static readonly BitSet _LPAREN_in_castExpression6965 = new BitSet(new ulong[]{0x800400100214000UL,0x20000010UL});
		public static readonly BitSet _primitiveType_in_castExpression6967 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_castExpression6969 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_castExpression6971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_castExpression6981 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_castExpression6983 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_castExpression6985 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA911020001870UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_castExpression6987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parExpression_in_primary7009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primary7031 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _DOT_in_primary7042 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primary7044 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _identifierSuffix_in_primary7066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_primary7087 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _DOT_in_primary7098 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primary7100 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _identifierSuffix_in_primary7122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primary7143 = new BitSet(new ulong[]{0x80000000UL,0x40UL});
		public static readonly BitSet _superSuffix_in_primary7153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primary7163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _creator_in_primary7173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_primary7183 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_primary7194 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_primary7196 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _DOT_in_primary7217 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_primary7219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_primary7229 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_primary7231 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_primary7233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_superSuffix7259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_superSuffix7269 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeArguments_in_superSuffix7272 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_superSuffix7293 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _arguments_in_superSuffix7304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_identifierSuffix7337 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_identifierSuffix7339 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _DOT_in_identifierSuffix7360 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_identifierSuffix7362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_identifierSuffix7373 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_identifierSuffix7375 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_identifierSuffix7377 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _arguments_in_identifierSuffix7398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7408 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_identifierSuffix7410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7420 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_identifierSuffix7422 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_identifierSuffix7424 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_identifierSuffix7426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7436 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _THIS_in_identifierSuffix7438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7448 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_identifierSuffix7450 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_identifierSuffix7452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerCreator_in_identifierSuffix7462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7484 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_selector7486 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _arguments_in_selector7488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7499 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_selector7501 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_selector7503 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_selector7505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7516 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _THIS_in_selector7518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7528 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_selector7530 = new BitSet(new ulong[]{0x80000000UL,0x40UL});
		public static readonly BitSet _superSuffix_in_selector7540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerCreator_in_selector7550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_selector7560 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_selector7562 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_selector7564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_creator7584 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_creator7586 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_creator7588 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_creator7590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_creator7600 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_creator7602 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_creator7604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayCreator_in_creator7614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_arrayCreator7634 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_arrayCreator7636 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7646 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7648 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7659 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7661 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _arrayInitializer_in_arrayCreator7682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_arrayCreator7693 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_arrayCreator7695 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7705 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_arrayCreator7707 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7717 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7731 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_arrayCreator7733 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7747 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7769 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7771 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer7802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer7812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_arrayInitializer7832 = new BitSet(new ulong[]{0x2840C80302614200UL,0xA91B0210A1872UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer7848 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer7867 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1872UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer7869 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer7919 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_arrayInitializer7932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceType_in_createdName7966 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_createdName7976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_innerCreator7997 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _NEW_in_innerCreator7999 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_innerCreator8010 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_innerCreator8031 = new BitSet(new ulong[]{0x0UL,0xC0UL});
		public static readonly BitSet _typeArguments_in_innerCreator8042 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_innerCreator8063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_classCreatorRest8084 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _classBody_in_classCreatorRest8095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_nonWildcardTypeArguments8127 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_nonWildcardTypeArguments8129 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_nonWildcardTypeArguments8139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments8159 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1870UL});
		public static readonly BitSet _expressionList_in_arguments8162 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_arguments8175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTLITERAL_in_intLiteral8192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LONGLITERAL_in_longLiteral8209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOATLITERAL_in_floatLiteral8226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLELITERAL_in_doubleLiteral8243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARLITERAL_in_charLiteral8260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRINGLITERAL_in_stringLiteral8277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_trueLiteral8294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_falseLiteral8311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_nullLiteral8328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _intLiteral_in_literal8348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _longLiteral_in_literal8358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _floatLiteral_in_literal8368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doubleLiteral_in_literal8378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _charLiteral_in_literal8388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stringLiteral_in_literal8398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _trueLiteral_in_literal8408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _falseLiteral_in_literal8418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullLiteral_in_literal8428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_classHeader8452 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_classHeader8454 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_classHeader8456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_enumHeader8476 = new BitSet(new ulong[]{0x40002000000000UL});
		public static readonly BitSet _set_in_enumHeader8478 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumHeader8484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceHeader8504 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_interfaceHeader8506 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_interfaceHeader8508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationHeader8528 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotationHeader8530 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_annotationHeader8532 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationHeader8534 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_typeHeader8554 = new BitSet(new ulong[]{0x1000002000800000UL,0x200UL});
		public static readonly BitSet _CLASS_in_typeHeader8557 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _ENUM_in_typeHeader8559 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _MONKEYS_AT_in_typeHeader8562 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_typeHeader8566 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_typeHeader8570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodHeader8590 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_methodHeader8592 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_methodHeader8596 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_methodHeader8598 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodHeader8602 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_methodHeader8604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_fieldHeader8624 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_fieldHeader8626 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_fieldHeader8628 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _LBRACKET_in_fieldHeader8631 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_fieldHeader8632 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _set_in_fieldHeader8636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_localVariableHeader8662 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_localVariableHeader8664 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_localVariableHeader8666 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _LBRACKET_in_localVariableHeader8669 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_localVariableHeader8670 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _set_in_localVariableHeader8674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotations_in_synpred2_Java100 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _packageDeclaration_in_synpred2_Java129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred12_Java487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_synpred27_Java724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_synpred43_Java1403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_synpred52_Java1733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclaration_in_synpred53_Java1744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred54_Java1755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_synpred57_Java1892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred59_Java1804 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeParameters_in_synpred59_Java1815 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred59_Java1836 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_synpred59_Java1846 = new BitSet(new ulong[]{0x0UL,0x400000000002UL});
		public static readonly BitSet _THROWS_in_synpred59_Java1857 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_synpred59_Java1859 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_synpred59_Java1880 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1EF2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_synpred59_Java1892 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_synpred59_Java1914 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_synpred59_Java1935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_synpred68_Java2310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceMethodDeclaration_in_synpred69_Java2320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_synpred70_Java2330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred71_Java2340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ellipsisParameterDecl_in_synpred96_Java3104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalParameterDecl_in_synpred98_Java3114 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_synpred98_Java3125 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _normalParameterDecl_in_synpred98_Java3127 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _normalParameterDecl_in_synpred99_Java3149 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _COMMA_in_synpred99_Java3159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_synpred103_Java3294 = new BitSet(new ulong[]{0x0UL,0x110000000000UL});
		public static readonly BitSet _set_in_synpred103_Java3320 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_synpred103_Java3352 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred103_Java3354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationMethodDeclaration_in_synpred117_Java3953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_synpred118_Java3963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_synpred119_Java3973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_synpred120_Java3983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_synpred121_Java3993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_synpred122_Java4003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclarationStatement_in_synpred125_Java4161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_synpred126_Java4171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_synpred130_Java4312 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred130_Java4332 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_synpred130_Java4335 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred130_Java4337 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred130_Java4341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_synpred132_Java4351 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred132_Java4354 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_synpred132_Java4357 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred132_Java4359 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred132_Java4363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_synpred133_Java4392 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred133_Java4394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred148_Java4616 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred148_Java4619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_synpred149_Java4634 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_synpred149_Java4636 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred149_Java4638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_synpred153_Java4794 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _FINALLY_in_synpred153_Java4796 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_synpred153_Java4798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_synpred154_Java4812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_synpred158_Java4948 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _catchType_in_synpred158_Java4950 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred158_Java4952 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_synpred158_Java4963 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred158_Java4965 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _block_in_synpred161_Java5092 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _catches_in_synpred161_Java5094 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _FINALLY_in_synpred161_Java5096 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_synpred161_Java5098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_synpred162_Java5113 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_synpred162_Java5115 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_synpred162_Java5117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_synpred163_Java5132 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _catches_in_synpred163_Java5134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _resource_in_synpred165_Java5247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_synpred167_Java5312 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_synpred167_Java5314 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred167_Java5316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_synpred169_Java5425 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_synpred169_Java5427 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _variableModifiers_in_synpred169_Java5429 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_synpred169_Java5431 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred169_Java5433 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_synpred169_Java5435 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred169_Java5446 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_synpred169_Java5448 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred169_Java5450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred173_Java5629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_synpred214_Java6874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred218_Java6965 = new BitSet(new ulong[]{0x800400100214000UL,0x20000010UL});
		public static readonly BitSet _primitiveType_in_synpred218_Java6967 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_synpred218_Java6969 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_synpred218_Java6971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred220_Java7042 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred220_Java7044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierSuffix_in_synpred221_Java7066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred223_Java7098 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred223_Java7100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierSuffix_in_synpred224_Java7122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_synpred236_Java7373 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred236_Java7375 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred236_Java7377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred249_Java7584 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_synpred249_Java7586 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_synpred249_Java7588 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_synpred249_Java7590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred250_Java7600 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_synpred250_Java7602 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_synpred250_Java7604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred252_Java7634 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_synpred252_Java7636 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_synpred252_Java7646 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred252_Java7648 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _LBRACKET_in_synpred252_Java7659 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred252_Java7661 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _arrayInitializer_in_synpred252_Java7682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_synpred253_Java7731 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred253_Java7733 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred253_Java7747 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
