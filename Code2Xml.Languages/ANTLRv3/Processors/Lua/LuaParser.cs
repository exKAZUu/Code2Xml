using Code2Xml.Languages.ANTLRv3.Core;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g 2014-01-04 00:15:45

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Code2Xml.Languages.ANTLRv3.Processors.Lua 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class LuaParser : Antlr.Runtime.Parser, ICustomizedAntlr3Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARSTRING", "COMMENT", "DecimalEscape", "Digit", "EscapeSequence", "ExponentPart", "FLOAT", "HEX", "HEX_FLOAT", "HexDigit", "HexEscape", "HexExponentPart", "INT", "LINE_COMMENT", "LONGSTRING", "NAME", "NEWLINE", "NORMALSTRING", "SHEBANG", "WS", "'!'", "'#'", "'%'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'..'", "'...'", "'/'", "':'", "'::'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'['", "'\\n'", "'\\r'", "']'", "'^'", "'and'", "'break'", "'do'", "'else'", "'elseif'", "'end'", "'false'", "'for'", "'function'", "'goto'", "'if'", "'in'", "'local'", "'nil'", "'not'", "'or'", "'repeat'", "'return'", "'then'", "'true'", "'until'", "'while'", "'{'", "'}'", "'~='"
	};
	public const int EOF=-1;
	public const int CHARSTRING=4;
	public const int COMMENT=5;
	public const int DecimalEscape=6;
	public const int Digit=7;
	public const int EscapeSequence=8;
	public const int ExponentPart=9;
	public const int FLOAT=10;
	public const int HEX=11;
	public const int HEX_FLOAT=12;
	public const int HexDigit=13;
	public const int HexEscape=14;
	public const int HexExponentPart=15;
	public const int INT=16;
	public const int LINE_COMMENT=17;
	public const int LONGSTRING=18;
	public const int NAME=19;
	public const int NEWLINE=20;
	public const int NORMALSTRING=21;
	public const int SHEBANG=22;
	public const int WS=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;

	public LuaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LuaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[112+1];


		Antlr3AstBuilder treeAdaptor = default(Antlr3AstBuilder);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new Antlr3AstBuilder();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref Antlr3AstBuilder adaptor);

	private Antlr3AstBuilder adaptor;

	public Antlr3AstBuilder TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LuaParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_chunk();
	partial void LeaveRule_chunk();
	// $ANTLR start "chunk"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:56:1: public chunk : ( shebang )? block ;
	[GrammarRule("chunk")]
	public Antlr3AstNode chunk()
	{
		EnterRule_chunk();
		EnterRule("chunk", 1);
		var retval = new Antlr3AstNode("chunk");
		
		retval.Start = (IToken)input.LT(1);
		int chunk_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode shebang1 = default(Antlr3AstNode);
		Antlr3AstNode block2 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "chunk");
		DebugLocation(56, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:57:5: ( ( shebang )? block )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:57:7: ( shebang )? block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(57, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:57:7: ( shebang )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==25))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:57:7: shebang
				{
				DebugLocation(57, 7);
				PushFollow(Follow._shebang_in_chunk77);
				shebang1=shebang();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, shebang1.Tree, shebang1, "shebang1", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(57, 16);
			PushFollow(Follow._block_in_chunk80);
			block2=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block2.Tree, block2, "block2", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chunk", 1);
			LeaveRule("chunk", 1);
			LeaveRule_chunk();
			if (state.backtracking > 0) { Memoize(input, 1, chunk_StartIndex); }

		}
		DebugLocation(58, 4);
		} finally { DebugExitRule(GrammarFileName, "chunk"); }
		return retval;

	}
	// $ANTLR end "chunk"

	partial void EnterRule_shebang();
	partial void LeaveRule_shebang();
	// $ANTLR start "shebang"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:60:1: shebang : '#' '!' (~ ( '\\n' | '\\r' ) )* ( '\\n' | '\\r' ) ;
	[GrammarRule("shebang")]
	private Antlr3AstNode shebang()
	{
		EnterRule_shebang();
		EnterRule("shebang", 2);
		var retval = new Antlr3AstNode("shebang");
		
		retval.Start = (IToken)input.LT(1);
		int shebang_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal3 = default(IToken);
		IToken char_literal4 = default(IToken);
		IToken set5 = default(IToken);
		IToken set6 = default(IToken);

		object char_literal3_tree = default(object);
		object char_literal4_tree = default(object);
		object set5_tree = default(object);
		object set6_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shebang");
		DebugLocation(60, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:61:2: ( '#' '!' (~ ( '\\n' | '\\r' ) )* ( '\\n' | '\\r' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:61:4: '#' '!' (~ ( '\\n' | '\\r' ) )* ( '\\n' | '\\r' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(61, 4);
			char_literal3=(IToken)Match(input,25,Follow._25_in_shebang94); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal3_tree = (object)adaptor.Create(char_literal3, "char_literal3", retval);
			adaptor.AddChild(root_0, char_literal3_tree);
			}
			DebugLocation(61, 8);
			char_literal4=(IToken)Match(input,24,Follow._24_in_shebang96); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal4_tree = (object)adaptor.Create(char_literal4, "char_literal4", retval);
			adaptor.AddChild(root_0, char_literal4_tree);
			}
			DebugLocation(61, 12);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:61:12: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>=CHARSTRING && LA2_1<=46)||(LA2_1>=49 && LA2_1<=75)))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(61, 12);

					set5=(IToken)input.LT(1);
					if ((input.LA(1)>=CHARSTRING && input.LA(1)<=46)||(input.LA(1)>=49 && input.LA(1)<=75))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set5, "set5", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(61, 26);

			set6=(IToken)input.LT(1);
			if ((input.LA(1)>=47 && input.LA(1)<=48))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set6, "set6", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shebang", 2);
			LeaveRule("shebang", 2);
			LeaveRule_shebang();
			if (state.backtracking > 0) { Memoize(input, 2, shebang_StartIndex); }

		}
		DebugLocation(61, 36);
		} finally { DebugExitRule(GrammarFileName, "shebang"); }
		return retval;

	}
	// $ANTLR end "shebang"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:63:1: block : ( stat )* ( retstat )? ;
	[GrammarRule("block")]
	private Antlr3AstNode block()
	{
		EnterRule_block();
		EnterRule("block", 3);
		var retval = new Antlr3AstNode("block");
		
		retval.Start = (IToken)input.LT(1);
		int block_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode stat7 = default(Antlr3AstNode);
		Antlr3AstNode retstat8 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(63, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:64:5: ( ( stat )* ( retstat )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:64:7: ( stat )* ( retstat )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(64, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:64:7: ( stat )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==NAME||LA3_1==27||(LA3_1>=38 && LA3_1<=39)||(LA3_1>=52 && LA3_1<=53)||(LA3_1>=58 && LA3_1<=61)||LA3_1==63||LA3_1==67||LA3_1==72))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:64:7: stat
					{
					DebugLocation(64, 7);
					PushFollow(Follow._stat_in_block122);
					stat7=stat();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, stat7.Tree, stat7, "stat7", retval);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(64, 13);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:64:13: ( retstat )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==68))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:64:13: retstat
				{
				DebugLocation(64, 13);
				PushFollow(Follow._retstat_in_block125);
				retstat8=retstat();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, retstat8.Tree, retstat8, "retstat8", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 3);
			LeaveRule("block", 3);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 3, block_StartIndex); }

		}
		DebugLocation(65, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_stat();
	partial void LeaveRule_stat();
	// $ANTLR start "stat"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:67:1: stat : ( ';' | varlist '=' explist | functioncall | label | 'break' | 'goto' NAME | 'do' block 'end' | 'while' exp 'do' block 'end' | 'repeat' block 'until' exp | 'if' exp 'then' block ( 'elseif' exp 'then' block )* ( 'else' block )? 'end' | 'for' NAME '=' exp ',' exp ( ',' exp )? 'do' block 'end' | 'for' namelist 'in' explist 'do' block 'end' | 'function' funcname funcbody | 'local' 'function' NAME funcbody | 'local' namelist ( '=' explist )? );
	[GrammarRule("stat")]
	private Antlr3AstNode stat()
	{
		EnterRule_stat();
		EnterRule("stat", 4);
		var retval = new Antlr3AstNode("stat");
		
		retval.Start = (IToken)input.LT(1);
		int stat_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal9 = default(IToken);
		IToken char_literal11 = default(IToken);
		IToken string_literal15 = default(IToken);
		IToken string_literal16 = default(IToken);
		IToken NAME17 = default(IToken);
		IToken string_literal18 = default(IToken);
		IToken string_literal20 = default(IToken);
		IToken string_literal21 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken string_literal25 = default(IToken);
		IToken string_literal26 = default(IToken);
		IToken string_literal28 = default(IToken);
		IToken string_literal30 = default(IToken);
		IToken string_literal32 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken string_literal36 = default(IToken);
		IToken string_literal38 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken string_literal41 = default(IToken);
		IToken NAME42 = default(IToken);
		IToken char_literal43 = default(IToken);
		IToken char_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		IToken string_literal49 = default(IToken);
		IToken string_literal51 = default(IToken);
		IToken string_literal52 = default(IToken);
		IToken string_literal54 = default(IToken);
		IToken string_literal56 = default(IToken);
		IToken string_literal58 = default(IToken);
		IToken string_literal59 = default(IToken);
		IToken string_literal62 = default(IToken);
		IToken string_literal63 = default(IToken);
		IToken NAME64 = default(IToken);
		IToken string_literal66 = default(IToken);
		IToken char_literal68 = default(IToken);
		Antlr3AstNode varlist10 = default(Antlr3AstNode);
		Antlr3AstNode explist12 = default(Antlr3AstNode);
		Antlr3AstNode functioncall13 = default(Antlr3AstNode);
		Antlr3AstNode label14 = default(Antlr3AstNode);
		Antlr3AstNode block19 = default(Antlr3AstNode);
		Antlr3AstNode exp22 = default(Antlr3AstNode);
		Antlr3AstNode block24 = default(Antlr3AstNode);
		Antlr3AstNode block27 = default(Antlr3AstNode);
		Antlr3AstNode exp29 = default(Antlr3AstNode);
		Antlr3AstNode exp31 = default(Antlr3AstNode);
		Antlr3AstNode block33 = default(Antlr3AstNode);
		Antlr3AstNode exp35 = default(Antlr3AstNode);
		Antlr3AstNode block37 = default(Antlr3AstNode);
		Antlr3AstNode block39 = default(Antlr3AstNode);
		Antlr3AstNode exp44 = default(Antlr3AstNode);
		Antlr3AstNode exp46 = default(Antlr3AstNode);
		Antlr3AstNode exp48 = default(Antlr3AstNode);
		Antlr3AstNode block50 = default(Antlr3AstNode);
		Antlr3AstNode namelist53 = default(Antlr3AstNode);
		Antlr3AstNode explist55 = default(Antlr3AstNode);
		Antlr3AstNode block57 = default(Antlr3AstNode);
		Antlr3AstNode funcname60 = default(Antlr3AstNode);
		Antlr3AstNode funcbody61 = default(Antlr3AstNode);
		Antlr3AstNode funcbody65 = default(Antlr3AstNode);
		Antlr3AstNode namelist67 = default(Antlr3AstNode);
		Antlr3AstNode explist69 = default(Antlr3AstNode);

		object char_literal9_tree = default(object);
		object char_literal11_tree = default(object);
		object string_literal15_tree = default(object);
		object string_literal16_tree = default(object);
		object NAME17_tree = default(object);
		object string_literal18_tree = default(object);
		object string_literal20_tree = default(object);
		object string_literal21_tree = default(object);
		object string_literal23_tree = default(object);
		object string_literal25_tree = default(object);
		object string_literal26_tree = default(object);
		object string_literal28_tree = default(object);
		object string_literal30_tree = default(object);
		object string_literal32_tree = default(object);
		object string_literal34_tree = default(object);
		object string_literal36_tree = default(object);
		object string_literal38_tree = default(object);
		object string_literal40_tree = default(object);
		object string_literal41_tree = default(object);
		object NAME42_tree = default(object);
		object char_literal43_tree = default(object);
		object char_literal45_tree = default(object);
		object char_literal47_tree = default(object);
		object string_literal49_tree = default(object);
		object string_literal51_tree = default(object);
		object string_literal52_tree = default(object);
		object string_literal54_tree = default(object);
		object string_literal56_tree = default(object);
		object string_literal58_tree = default(object);
		object string_literal59_tree = default(object);
		object string_literal62_tree = default(object);
		object string_literal63_tree = default(object);
		object NAME64_tree = default(object);
		object string_literal66_tree = default(object);
		object char_literal68_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "stat");
		DebugLocation(67, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:68:5: ( ';' | varlist '=' explist | functioncall | label | 'break' | 'goto' NAME | 'do' block 'end' | 'while' exp 'do' block 'end' | 'repeat' block 'until' exp | 'if' exp 'then' block ( 'elseif' exp 'then' block )* ( 'else' block )? 'end' | 'for' NAME '=' exp ',' exp ( ',' exp )? 'do' block 'end' | 'for' namelist 'in' explist 'do' block 'end' | 'function' funcname funcbody | 'local' 'function' NAME funcbody | 'local' namelist ( '=' explist )? )
			int alt9=15;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 39:
				{
				alt9 = 1;
				}
				break;
			case NAME:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_Lua_fragment)))
				{
					alt9 = 2;
				}
				else if ((EvaluatePredicate(synpred10_Lua_fragment)))
				{
					alt9 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 27:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_Lua_fragment)))
				{
					alt9 = 2;
				}
				else if ((EvaluatePredicate(synpred10_Lua_fragment)))
				{
					alt9 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 38:
				{
				alt9 = 4;
				}
				break;
			case 52:
				{
				alt9 = 5;
				}
				break;
			case 60:
				{
				alt9 = 6;
				}
				break;
			case 53:
				{
				alt9 = 7;
				}
				break;
			case 72:
				{
				alt9 = 8;
				}
				break;
			case 67:
				{
				alt9 = 9;
				}
				break;
			case 61:
				{
				alt9 = 10;
				}
				break;
			case 58:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred21_Lua_fragment)))
				{
					alt9 = 11;
				}
				else if ((EvaluatePredicate(synpred22_Lua_fragment)))
				{
					alt9 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 59:
				{
				alt9 = 13;
				}
				break;
			case 63:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred24_Lua_fragment)))
				{
					alt9 = 14;
				}
				else if ((true))
				{
					alt9 = 15;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:68:7: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(68, 7);
				char_literal9=(IToken)Match(input,39,Follow._39_in_stat143); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal9_tree = (object)adaptor.Create(char_literal9, "char_literal9", retval);
				adaptor.AddChild(root_0, char_literal9_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:69:7: varlist '=' explist
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(69, 7);
				PushFollow(Follow._varlist_in_stat151);
				varlist10=varlist();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, varlist10.Tree, varlist10, "varlist10", retval);
				DebugLocation(69, 15);
				char_literal11=(IToken)Match(input,42,Follow._42_in_stat153); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal11_tree = (object)adaptor.Create(char_literal11, "char_literal11", retval);
				adaptor.AddChild(root_0, char_literal11_tree);
				}
				DebugLocation(69, 19);
				PushFollow(Follow._explist_in_stat155);
				explist12=explist();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, explist12.Tree, explist12, "explist12", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:70:7: functioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(70, 7);
				PushFollow(Follow._functioncall_in_stat163);
				functioncall13=functioncall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functioncall13.Tree, functioncall13, "functioncall13", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:71:7: label
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(71, 7);
				PushFollow(Follow._label_in_stat171);
				label14=label();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, label14.Tree, label14, "label14", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:72:7: 'break'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(72, 7);
				string_literal15=(IToken)Match(input,52,Follow._52_in_stat179); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal15_tree = (object)adaptor.Create(string_literal15, "string_literal15", retval);
				adaptor.AddChild(root_0, string_literal15_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:73:7: 'goto' NAME
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(73, 7);
				string_literal16=(IToken)Match(input,60,Follow._60_in_stat187); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal16_tree = (object)adaptor.Create(string_literal16, "string_literal16", retval);
				adaptor.AddChild(root_0, string_literal16_tree);
				}
				DebugLocation(73, 14);
				NAME17=(IToken)Match(input,NAME,Follow._NAME_in_stat189); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME17_tree = (object)adaptor.Create(NAME17, "NAME17", retval);
				adaptor.AddChild(root_0, NAME17_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:74:7: 'do' block 'end'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(74, 7);
				string_literal18=(IToken)Match(input,53,Follow._53_in_stat197); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal18_tree = (object)adaptor.Create(string_literal18, "string_literal18", retval);
				adaptor.AddChild(root_0, string_literal18_tree);
				}
				DebugLocation(74, 12);
				PushFollow(Follow._block_in_stat199);
				block19=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block19.Tree, block19, "block19", retval);
				DebugLocation(74, 18);
				string_literal20=(IToken)Match(input,56,Follow._56_in_stat201); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal20_tree = (object)adaptor.Create(string_literal20, "string_literal20", retval);
				adaptor.AddChild(root_0, string_literal20_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:75:7: 'while' exp 'do' block 'end'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(75, 7);
				string_literal21=(IToken)Match(input,72,Follow._72_in_stat209); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal21_tree = (object)adaptor.Create(string_literal21, "string_literal21", retval);
				adaptor.AddChild(root_0, string_literal21_tree);
				}
				DebugLocation(75, 15);
				PushFollow(Follow._exp_in_stat211);
				exp22=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp22.Tree, exp22, "exp22", retval);
				DebugLocation(75, 19);
				string_literal23=(IToken)Match(input,53,Follow._53_in_stat213); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal23_tree = (object)adaptor.Create(string_literal23, "string_literal23", retval);
				adaptor.AddChild(root_0, string_literal23_tree);
				}
				DebugLocation(75, 24);
				PushFollow(Follow._block_in_stat215);
				block24=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block24.Tree, block24, "block24", retval);
				DebugLocation(75, 30);
				string_literal25=(IToken)Match(input,56,Follow._56_in_stat217); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal25_tree = (object)adaptor.Create(string_literal25, "string_literal25", retval);
				adaptor.AddChild(root_0, string_literal25_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:76:7: 'repeat' block 'until' exp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(76, 7);
				string_literal26=(IToken)Match(input,67,Follow._67_in_stat225); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal26_tree = (object)adaptor.Create(string_literal26, "string_literal26", retval);
				adaptor.AddChild(root_0, string_literal26_tree);
				}
				DebugLocation(76, 16);
				PushFollow(Follow._block_in_stat227);
				block27=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block27.Tree, block27, "block27", retval);
				DebugLocation(76, 22);
				string_literal28=(IToken)Match(input,71,Follow._71_in_stat229); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal28_tree = (object)adaptor.Create(string_literal28, "string_literal28", retval);
				adaptor.AddChild(root_0, string_literal28_tree);
				}
				DebugLocation(76, 30);
				PushFollow(Follow._exp_in_stat231);
				exp29=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp29.Tree, exp29, "exp29", retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:77:7: 'if' exp 'then' block ( 'elseif' exp 'then' block )* ( 'else' block )? 'end'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(77, 7);
				string_literal30=(IToken)Match(input,61,Follow._61_in_stat239); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal30_tree = (object)adaptor.Create(string_literal30, "string_literal30", retval);
				adaptor.AddChild(root_0, string_literal30_tree);
				}
				DebugLocation(77, 12);
				PushFollow(Follow._exp_in_stat241);
				exp31=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp31.Tree, exp31, "exp31", retval);
				DebugLocation(77, 16);
				string_literal32=(IToken)Match(input,69,Follow._69_in_stat243); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal32_tree = (object)adaptor.Create(string_literal32, "string_literal32", retval);
				adaptor.AddChild(root_0, string_literal32_tree);
				}
				DebugLocation(77, 23);
				PushFollow(Follow._block_in_stat245);
				block33=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block33.Tree, block33, "block33", retval);
				DebugLocation(77, 29);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:77:29: ( 'elseif' exp 'then' block )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if ((LA5_1==55))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:77:30: 'elseif' exp 'then' block
						{
						DebugLocation(77, 30);
						string_literal34=(IToken)Match(input,55,Follow._55_in_stat248); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal34_tree = (object)adaptor.Create(string_literal34, "string_literal34", retval);
						adaptor.AddChild(root_0, string_literal34_tree);
						}
						DebugLocation(77, 39);
						PushFollow(Follow._exp_in_stat250);
						exp35=exp();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, exp35.Tree, exp35, "exp35", retval);
						DebugLocation(77, 43);
						string_literal36=(IToken)Match(input,69,Follow._69_in_stat252); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal36_tree = (object)adaptor.Create(string_literal36, "string_literal36", retval);
						adaptor.AddChild(root_0, string_literal36_tree);
						}
						DebugLocation(77, 50);
						PushFollow(Follow._block_in_stat254);
						block37=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, block37.Tree, block37, "block37", retval);

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(77, 58);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:77:58: ( 'else' block )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==54))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:77:59: 'else' block
					{
					DebugLocation(77, 59);
					string_literal38=(IToken)Match(input,54,Follow._54_in_stat259); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal38_tree = (object)adaptor.Create(string_literal38, "string_literal38", retval);
					adaptor.AddChild(root_0, string_literal38_tree);
					}
					DebugLocation(77, 66);
					PushFollow(Follow._block_in_stat261);
					block39=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block39.Tree, block39, "block39", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(77, 74);
				string_literal40=(IToken)Match(input,56,Follow._56_in_stat265); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal40_tree = (object)adaptor.Create(string_literal40, "string_literal40", retval);
				adaptor.AddChild(root_0, string_literal40_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:78:7: 'for' NAME '=' exp ',' exp ( ',' exp )? 'do' block 'end'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 7);
				string_literal41=(IToken)Match(input,58,Follow._58_in_stat273); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal41_tree = (object)adaptor.Create(string_literal41, "string_literal41", retval);
				adaptor.AddChild(root_0, string_literal41_tree);
				}
				DebugLocation(78, 13);
				NAME42=(IToken)Match(input,NAME,Follow._NAME_in_stat275); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME42_tree = (object)adaptor.Create(NAME42, "NAME42", retval);
				adaptor.AddChild(root_0, NAME42_tree);
				}
				DebugLocation(78, 18);
				char_literal43=(IToken)Match(input,42,Follow._42_in_stat277); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal43_tree = (object)adaptor.Create(char_literal43, "char_literal43", retval);
				adaptor.AddChild(root_0, char_literal43_tree);
				}
				DebugLocation(78, 22);
				PushFollow(Follow._exp_in_stat279);
				exp44=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp44.Tree, exp44, "exp44", retval);
				DebugLocation(78, 26);
				char_literal45=(IToken)Match(input,31,Follow._31_in_stat281); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal45_tree = (object)adaptor.Create(char_literal45, "char_literal45", retval);
				adaptor.AddChild(root_0, char_literal45_tree);
				}
				DebugLocation(78, 30);
				PushFollow(Follow._exp_in_stat283);
				exp46=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp46.Tree, exp46, "exp46", retval);
				DebugLocation(78, 34);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:78:34: ( ',' exp )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==31))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:78:35: ',' exp
					{
					DebugLocation(78, 35);
					char_literal47=(IToken)Match(input,31,Follow._31_in_stat286); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal47_tree = (object)adaptor.Create(char_literal47, "char_literal47", retval);
					adaptor.AddChild(root_0, char_literal47_tree);
					}
					DebugLocation(78, 39);
					PushFollow(Follow._exp_in_stat288);
					exp48=exp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exp48.Tree, exp48, "exp48", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(78, 45);
				string_literal49=(IToken)Match(input,53,Follow._53_in_stat292); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal49_tree = (object)adaptor.Create(string_literal49, "string_literal49", retval);
				adaptor.AddChild(root_0, string_literal49_tree);
				}
				DebugLocation(78, 50);
				PushFollow(Follow._block_in_stat294);
				block50=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block50.Tree, block50, "block50", retval);
				DebugLocation(78, 56);
				string_literal51=(IToken)Match(input,56,Follow._56_in_stat296); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal51_tree = (object)adaptor.Create(string_literal51, "string_literal51", retval);
				adaptor.AddChild(root_0, string_literal51_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:79:7: 'for' namelist 'in' explist 'do' block 'end'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(79, 7);
				string_literal52=(IToken)Match(input,58,Follow._58_in_stat304); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal52_tree = (object)adaptor.Create(string_literal52, "string_literal52", retval);
				adaptor.AddChild(root_0, string_literal52_tree);
				}
				DebugLocation(79, 13);
				PushFollow(Follow._namelist_in_stat306);
				namelist53=namelist();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namelist53.Tree, namelist53, "namelist53", retval);
				DebugLocation(79, 22);
				string_literal54=(IToken)Match(input,62,Follow._62_in_stat308); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal54_tree = (object)adaptor.Create(string_literal54, "string_literal54", retval);
				adaptor.AddChild(root_0, string_literal54_tree);
				}
				DebugLocation(79, 27);
				PushFollow(Follow._explist_in_stat310);
				explist55=explist();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, explist55.Tree, explist55, "explist55", retval);
				DebugLocation(79, 35);
				string_literal56=(IToken)Match(input,53,Follow._53_in_stat312); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal56_tree = (object)adaptor.Create(string_literal56, "string_literal56", retval);
				adaptor.AddChild(root_0, string_literal56_tree);
				}
				DebugLocation(79, 40);
				PushFollow(Follow._block_in_stat314);
				block57=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block57.Tree, block57, "block57", retval);
				DebugLocation(79, 46);
				string_literal58=(IToken)Match(input,56,Follow._56_in_stat316); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal58_tree = (object)adaptor.Create(string_literal58, "string_literal58", retval);
				adaptor.AddChild(root_0, string_literal58_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:80:7: 'function' funcname funcbody
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(80, 7);
				string_literal59=(IToken)Match(input,59,Follow._59_in_stat324); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal59_tree = (object)adaptor.Create(string_literal59, "string_literal59", retval);
				adaptor.AddChild(root_0, string_literal59_tree);
				}
				DebugLocation(80, 18);
				PushFollow(Follow._funcname_in_stat326);
				funcname60=funcname();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, funcname60.Tree, funcname60, "funcname60", retval);
				DebugLocation(80, 27);
				PushFollow(Follow._funcbody_in_stat328);
				funcbody61=funcbody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, funcbody61.Tree, funcbody61, "funcbody61", retval);

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:81:7: 'local' 'function' NAME funcbody
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(81, 7);
				string_literal62=(IToken)Match(input,63,Follow._63_in_stat336); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal62_tree = (object)adaptor.Create(string_literal62, "string_literal62", retval);
				adaptor.AddChild(root_0, string_literal62_tree);
				}
				DebugLocation(81, 15);
				string_literal63=(IToken)Match(input,59,Follow._59_in_stat338); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal63_tree = (object)adaptor.Create(string_literal63, "string_literal63", retval);
				adaptor.AddChild(root_0, string_literal63_tree);
				}
				DebugLocation(81, 26);
				NAME64=(IToken)Match(input,NAME,Follow._NAME_in_stat340); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME64_tree = (object)adaptor.Create(NAME64, "NAME64", retval);
				adaptor.AddChild(root_0, NAME64_tree);
				}
				DebugLocation(81, 31);
				PushFollow(Follow._funcbody_in_stat342);
				funcbody65=funcbody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, funcbody65.Tree, funcbody65, "funcbody65", retval);

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:82:7: 'local' namelist ( '=' explist )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(82, 7);
				string_literal66=(IToken)Match(input,63,Follow._63_in_stat350); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal66_tree = (object)adaptor.Create(string_literal66, "string_literal66", retval);
				adaptor.AddChild(root_0, string_literal66_tree);
				}
				DebugLocation(82, 15);
				PushFollow(Follow._namelist_in_stat352);
				namelist67=namelist();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namelist67.Tree, namelist67, "namelist67", retval);
				DebugLocation(82, 24);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:82:24: ( '=' explist )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==42))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:82:25: '=' explist
					{
					DebugLocation(82, 25);
					char_literal68=(IToken)Match(input,42,Follow._42_in_stat355); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal68_tree = (object)adaptor.Create(char_literal68, "char_literal68", retval);
					adaptor.AddChild(root_0, char_literal68_tree);
					}
					DebugLocation(82, 29);
					PushFollow(Follow._explist_in_stat357);
					explist69=explist();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explist69.Tree, explist69, "explist69", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stat", 4);
			LeaveRule("stat", 4);
			LeaveRule_stat();
			if (state.backtracking > 0) { Memoize(input, 4, stat_StartIndex); }

		}
		DebugLocation(83, 4);
		} finally { DebugExitRule(GrammarFileName, "stat"); }
		return retval;

	}
	// $ANTLR end "stat"

	partial void EnterRule_retstat();
	partial void LeaveRule_retstat();
	// $ANTLR start "retstat"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:85:1: retstat : 'return' ( explist )? ( ';' )? ;
	[GrammarRule("retstat")]
	private Antlr3AstNode retstat()
	{
		EnterRule_retstat();
		EnterRule("retstat", 5);
		var retval = new Antlr3AstNode("retstat");
		
		retval.Start = (IToken)input.LT(1);
		int retstat_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal70 = default(IToken);
		IToken char_literal72 = default(IToken);
		Antlr3AstNode explist71 = default(Antlr3AstNode);

		object string_literal70_tree = default(object);
		object char_literal72_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "retstat");
		DebugLocation(85, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:86:5: ( 'return' ( explist )? ( ';' )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:86:7: 'return' ( explist )? ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(86, 7);
			string_literal70=(IToken)Match(input,68,Follow._68_in_retstat376); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal70_tree = (object)adaptor.Create(string_literal70, "string_literal70", retval);
			adaptor.AddChild(root_0, string_literal70_tree);
			}
			DebugLocation(86, 16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:86:16: ( explist )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==CHARSTRING||(LA10_1>=FLOAT && LA10_1<=HEX_FLOAT)||LA10_1==INT||(LA10_1>=LONGSTRING && LA10_1<=NAME)||LA10_1==NORMALSTRING||LA10_1==25||LA10_1==27||LA10_1==32||LA10_1==35||LA10_1==57||LA10_1==59||(LA10_1>=64 && LA10_1<=65)||LA10_1==70||LA10_1==73))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:86:16: explist
				{
				DebugLocation(86, 16);
				PushFollow(Follow._explist_in_retstat378);
				explist71=explist();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, explist71.Tree, explist71, "explist71", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(86, 25);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:86:25: ( ';' )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==39))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:86:25: ';'
				{
				DebugLocation(86, 25);
				char_literal72=(IToken)Match(input,39,Follow._39_in_retstat381); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal72_tree = (object)adaptor.Create(char_literal72, "char_literal72", retval);
				adaptor.AddChild(root_0, char_literal72_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("retstat", 5);
			LeaveRule("retstat", 5);
			LeaveRule_retstat();
			if (state.backtracking > 0) { Memoize(input, 5, retstat_StartIndex); }

		}
		DebugLocation(87, 4);
		} finally { DebugExitRule(GrammarFileName, "retstat"); }
		return retval;

	}
	// $ANTLR end "retstat"

	partial void EnterRule_label();
	partial void LeaveRule_label();
	// $ANTLR start "label"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:89:1: label : '::' NAME '::' ;
	[GrammarRule("label")]
	private Antlr3AstNode label()
	{
		EnterRule_label();
		EnterRule("label", 6);
		var retval = new Antlr3AstNode("label");
		
		retval.Start = (IToken)input.LT(1);
		int label_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal73 = default(IToken);
		IToken NAME74 = default(IToken);
		IToken string_literal75 = default(IToken);

		object string_literal73_tree = default(object);
		object NAME74_tree = default(object);
		object string_literal75_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "label");
		DebugLocation(89, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:90:5: ( '::' NAME '::' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:90:7: '::' NAME '::'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(90, 7);
			string_literal73=(IToken)Match(input,38,Follow._38_in_label399); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal73_tree = (object)adaptor.Create(string_literal73, "string_literal73", retval);
			adaptor.AddChild(root_0, string_literal73_tree);
			}
			DebugLocation(90, 12);
			NAME74=(IToken)Match(input,NAME,Follow._NAME_in_label401); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NAME74_tree = (object)adaptor.Create(NAME74, "NAME74", retval);
			adaptor.AddChild(root_0, NAME74_tree);
			}
			DebugLocation(90, 17);
			string_literal75=(IToken)Match(input,38,Follow._38_in_label403); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal75_tree = (object)adaptor.Create(string_literal75, "string_literal75", retval);
			adaptor.AddChild(root_0, string_literal75_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("label", 6);
			LeaveRule("label", 6);
			LeaveRule_label();
			if (state.backtracking > 0) { Memoize(input, 6, label_StartIndex); }

		}
		DebugLocation(91, 4);
		} finally { DebugExitRule(GrammarFileName, "label"); }
		return retval;

	}
	// $ANTLR end "label"

	partial void EnterRule_funcname();
	partial void LeaveRule_funcname();
	// $ANTLR start "funcname"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:93:1: funcname : NAME ( '.' NAME )* ( ':' NAME )? ;
	[GrammarRule("funcname")]
	private Antlr3AstNode funcname()
	{
		EnterRule_funcname();
		EnterRule("funcname", 7);
		var retval = new Antlr3AstNode("funcname");
		
		retval.Start = (IToken)input.LT(1);
		int funcname_StartIndex = input.Index;

		object root_0 = default(object);

		IToken NAME76 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken NAME78 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken NAME80 = default(IToken);

		object NAME76_tree = default(object);
		object char_literal77_tree = default(object);
		object NAME78_tree = default(object);
		object char_literal79_tree = default(object);
		object NAME80_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "funcname");
		DebugLocation(93, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:94:5: ( NAME ( '.' NAME )* ( ':' NAME )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:94:7: NAME ( '.' NAME )* ( ':' NAME )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(94, 7);
			NAME76=(IToken)Match(input,NAME,Follow._NAME_in_funcname420); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NAME76_tree = (object)adaptor.Create(NAME76, "NAME76", retval);
			adaptor.AddChild(root_0, NAME76_tree);
			}
			DebugLocation(94, 12);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:94:12: ( '.' NAME )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==33))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:94:13: '.' NAME
					{
					DebugLocation(94, 13);
					char_literal77=(IToken)Match(input,33,Follow._33_in_funcname423); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal77_tree = (object)adaptor.Create(char_literal77, "char_literal77", retval);
					adaptor.AddChild(root_0, char_literal77_tree);
					}
					DebugLocation(94, 17);
					NAME78=(IToken)Match(input,NAME,Follow._NAME_in_funcname425); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NAME78_tree = (object)adaptor.Create(NAME78, "NAME78", retval);
					adaptor.AddChild(root_0, NAME78_tree);
					}

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(94, 24);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:94:24: ( ':' NAME )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==37))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:94:25: ':' NAME
				{
				DebugLocation(94, 25);
				char_literal79=(IToken)Match(input,37,Follow._37_in_funcname430); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal79_tree = (object)adaptor.Create(char_literal79, "char_literal79", retval);
				adaptor.AddChild(root_0, char_literal79_tree);
				}
				DebugLocation(94, 29);
				NAME80=(IToken)Match(input,NAME,Follow._NAME_in_funcname432); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME80_tree = (object)adaptor.Create(NAME80, "NAME80", retval);
				adaptor.AddChild(root_0, NAME80_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("funcname", 7);
			LeaveRule("funcname", 7);
			LeaveRule_funcname();
			if (state.backtracking > 0) { Memoize(input, 7, funcname_StartIndex); }

		}
		DebugLocation(95, 4);
		} finally { DebugExitRule(GrammarFileName, "funcname"); }
		return retval;

	}
	// $ANTLR end "funcname"

	partial void EnterRule_varlist();
	partial void LeaveRule_varlist();
	// $ANTLR start "varlist"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:97:1: varlist : var ( ',' var )* ;
	[GrammarRule("varlist")]
	private Antlr3AstNode varlist()
	{
		EnterRule_varlist();
		EnterRule("varlist", 8);
		var retval = new Antlr3AstNode("varlist");
		
		retval.Start = (IToken)input.LT(1);
		int varlist_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal82 = default(IToken);
		Antlr3AstNode var81 = default(Antlr3AstNode);
		Antlr3AstNode var83 = default(Antlr3AstNode);

		object char_literal82_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "varlist");
		DebugLocation(97, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:98:5: ( var ( ',' var )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:98:7: var ( ',' var )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(98, 7);
			PushFollow(Follow._var_in_varlist451);
			var81=var();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, var81.Tree, var81, "var81", retval);
			DebugLocation(98, 11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:98:11: ( ',' var )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==31))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:98:12: ',' var
					{
					DebugLocation(98, 12);
					char_literal82=(IToken)Match(input,31,Follow._31_in_varlist454); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal82_tree = (object)adaptor.Create(char_literal82, "char_literal82", retval);
					adaptor.AddChild(root_0, char_literal82_tree);
					}
					DebugLocation(98, 16);
					PushFollow(Follow._var_in_varlist456);
					var83=var();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, var83.Tree, var83, "var83", retval);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("varlist", 8);
			LeaveRule("varlist", 8);
			LeaveRule_varlist();
			if (state.backtracking > 0) { Memoize(input, 8, varlist_StartIndex); }

		}
		DebugLocation(99, 4);
		} finally { DebugExitRule(GrammarFileName, "varlist"); }
		return retval;

	}
	// $ANTLR end "varlist"

	partial void EnterRule_namelist();
	partial void LeaveRule_namelist();
	// $ANTLR start "namelist"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:101:1: namelist : NAME ( ',' NAME )* ;
	[GrammarRule("namelist")]
	private Antlr3AstNode namelist()
	{
		EnterRule_namelist();
		EnterRule("namelist", 9);
		var retval = new Antlr3AstNode("namelist");
		
		retval.Start = (IToken)input.LT(1);
		int namelist_StartIndex = input.Index;

		object root_0 = default(object);

		IToken NAME84 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken NAME86 = default(IToken);

		object NAME84_tree = default(object);
		object char_literal85_tree = default(object);
		object NAME86_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namelist");
		DebugLocation(101, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:102:5: ( NAME ( ',' NAME )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:102:7: NAME ( ',' NAME )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(102, 7);
			NAME84=(IToken)Match(input,NAME,Follow._NAME_in_namelist475); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NAME84_tree = (object)adaptor.Create(NAME84, "NAME84", retval);
			adaptor.AddChild(root_0, NAME84_tree);
			}
			DebugLocation(102, 12);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:102:12: ( ',' NAME )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==31))
				{
					int LA15_2 = input.LA(2);

					if ((LA15_2==NAME))
					{
						alt15 = 1;
					}


				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:102:13: ',' NAME
					{
					DebugLocation(102, 13);
					char_literal85=(IToken)Match(input,31,Follow._31_in_namelist478); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal85_tree = (object)adaptor.Create(char_literal85, "char_literal85", retval);
					adaptor.AddChild(root_0, char_literal85_tree);
					}
					DebugLocation(102, 17);
					NAME86=(IToken)Match(input,NAME,Follow._NAME_in_namelist480); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NAME86_tree = (object)adaptor.Create(NAME86, "NAME86", retval);
					adaptor.AddChild(root_0, NAME86_tree);
					}

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namelist", 9);
			LeaveRule("namelist", 9);
			LeaveRule_namelist();
			if (state.backtracking > 0) { Memoize(input, 9, namelist_StartIndex); }

		}
		DebugLocation(103, 4);
		} finally { DebugExitRule(GrammarFileName, "namelist"); }
		return retval;

	}
	// $ANTLR end "namelist"

	partial void EnterRule_explist();
	partial void LeaveRule_explist();
	// $ANTLR start "explist"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:105:1: explist : exp ( ',' exp )* ;
	[GrammarRule("explist")]
	private Antlr3AstNode explist()
	{
		EnterRule_explist();
		EnterRule("explist", 10);
		var retval = new Antlr3AstNode("explist");
		
		retval.Start = (IToken)input.LT(1);
		int explist_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal88 = default(IToken);
		Antlr3AstNode exp87 = default(Antlr3AstNode);
		Antlr3AstNode exp89 = default(Antlr3AstNode);

		object char_literal88_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "explist");
		DebugLocation(105, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:106:5: ( exp ( ',' exp )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:106:7: exp ( ',' exp )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(106, 7);
			PushFollow(Follow._exp_in_explist499);
			exp87=exp();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exp87.Tree, exp87, "exp87", retval);
			DebugLocation(106, 11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:106:11: ( ',' exp )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==31))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:106:12: ',' exp
					{
					DebugLocation(106, 12);
					char_literal88=(IToken)Match(input,31,Follow._31_in_explist502); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal88_tree = (object)adaptor.Create(char_literal88, "char_literal88", retval);
					adaptor.AddChild(root_0, char_literal88_tree);
					}
					DebugLocation(106, 16);
					PushFollow(Follow._exp_in_explist504);
					exp89=exp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exp89.Tree, exp89, "exp89", retval);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explist", 10);
			LeaveRule("explist", 10);
			LeaveRule_explist();
			if (state.backtracking > 0) { Memoize(input, 10, explist_StartIndex); }

		}
		DebugLocation(107, 4);
		} finally { DebugExitRule(GrammarFileName, "explist"); }
		return retval;

	}
	// $ANTLR end "explist"

	partial void EnterRule_exp();
	partial void LeaveRule_exp();
	// $ANTLR start "exp"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:109:1: exp : ( 'nil' | 'false' | 'true' | number | string | '...' | functiondef | prefixexp | tableconstructor | unop exp ) ( binop exp )* ;
	[GrammarRule("exp")]
	private Antlr3AstNode exp()
	{
		EnterRule_exp();
		EnterRule("exp", 11);
		var retval = new Antlr3AstNode("exp");
		
		retval.Start = (IToken)input.LT(1);
		int exp_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal90 = default(IToken);
		IToken string_literal91 = default(IToken);
		IToken string_literal92 = default(IToken);
		IToken string_literal95 = default(IToken);
		Antlr3AstNode number93 = default(Antlr3AstNode);
		Antlr3AstNode string94 = default(Antlr3AstNode);
		Antlr3AstNode functiondef96 = default(Antlr3AstNode);
		Antlr3AstNode prefixexp97 = default(Antlr3AstNode);
		Antlr3AstNode tableconstructor98 = default(Antlr3AstNode);
		Antlr3AstNode unop99 = default(Antlr3AstNode);
		Antlr3AstNode exp100 = default(Antlr3AstNode);
		Antlr3AstNode binop101 = default(Antlr3AstNode);
		Antlr3AstNode exp102 = default(Antlr3AstNode);

		object string_literal90_tree = default(object);
		object string_literal91_tree = default(object);
		object string_literal92_tree = default(object);
		object string_literal95_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exp");
		DebugLocation(109, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:5: ( ( 'nil' | 'false' | 'true' | number | string | '...' | functiondef | prefixexp | tableconstructor | unop exp ) ( binop exp )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:7: ( 'nil' | 'false' | 'true' | number | string | '...' | functiondef | prefixexp | tableconstructor | unop exp ) ( binop exp )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(110, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:7: ( 'nil' | 'false' | 'true' | number | string | '...' | functiondef | prefixexp | tableconstructor | unop exp )
			int alt17=10;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case 64:
				{
				alt17 = 1;
				}
				break;
			case 57:
				{
				alt17 = 2;
				}
				break;
			case 70:
				{
				alt17 = 3;
				}
				break;
			case FLOAT:
			case HEX:
			case HEX_FLOAT:
			case INT:
				{
				alt17 = 4;
				}
				break;
			case CHARSTRING:
			case LONGSTRING:
			case NORMALSTRING:
				{
				alt17 = 5;
				}
				break;
			case 35:
				{
				alt17 = 6;
				}
				break;
			case 59:
				{
				alt17 = 7;
				}
				break;
			case NAME:
			case 27:
				{
				alt17 = 8;
				}
				break;
			case 73:
				{
				alt17 = 9;
				}
				break;
			case 25:
			case 32:
			case 65:
				{
				alt17 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:8: 'nil'
				{
				DebugLocation(110, 8);
				string_literal90=(IToken)Match(input,64,Follow._64_in_exp524); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal90_tree = (object)adaptor.Create(string_literal90, "string_literal90", retval);
				adaptor.AddChild(root_0, string_literal90_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:16: 'false'
				{
				DebugLocation(110, 16);
				string_literal91=(IToken)Match(input,57,Follow._57_in_exp528); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal91_tree = (object)adaptor.Create(string_literal91, "string_literal91", retval);
				adaptor.AddChild(root_0, string_literal91_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:26: 'true'
				{
				DebugLocation(110, 26);
				string_literal92=(IToken)Match(input,70,Follow._70_in_exp532); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal92_tree = (object)adaptor.Create(string_literal92, "string_literal92", retval);
				adaptor.AddChild(root_0, string_literal92_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:35: number
				{
				DebugLocation(110, 35);
				PushFollow(Follow._number_in_exp536);
				number93=number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, number93.Tree, number93, "number93", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:44: string
				{
				DebugLocation(110, 44);
				PushFollow(Follow._string_in_exp540);
				string94=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string94.Tree, string94, "string94", retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:53: '...'
				{
				DebugLocation(110, 53);
				string_literal95=(IToken)Match(input,35,Follow._35_in_exp544); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal95_tree = (object)adaptor.Create(string_literal95, "string_literal95", retval);
				adaptor.AddChild(root_0, string_literal95_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:61: functiondef
				{
				DebugLocation(110, 61);
				PushFollow(Follow._functiondef_in_exp548);
				functiondef96=functiondef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functiondef96.Tree, functiondef96, "functiondef96", retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:111:7: prefixexp
				{
				DebugLocation(111, 7);
				PushFollow(Follow._prefixexp_in_exp556);
				prefixexp97=prefixexp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, prefixexp97.Tree, prefixexp97, "prefixexp97", retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:111:19: tableconstructor
				{
				DebugLocation(111, 19);
				PushFollow(Follow._tableconstructor_in_exp560);
				tableconstructor98=tableconstructor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableconstructor98.Tree, tableconstructor98, "tableconstructor98", retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:111:38: unop exp
				{
				DebugLocation(111, 38);
				PushFollow(Follow._unop_in_exp564);
				unop99=unop();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unop99.Tree, unop99, "unop99", retval);
				DebugLocation(111, 43);
				PushFollow(Follow._exp_in_exp566);
				exp100=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp100.Tree, exp100, "exp100", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(111, 48);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:111:48: ( binop exp )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==26||(LA18_1>=29 && LA18_1<=30)||LA18_1==32||LA18_1==34||LA18_1==36||(LA18_1>=40 && LA18_1<=41)||(LA18_1>=43 && LA18_1<=45)||(LA18_1>=50 && LA18_1<=51)||LA18_1==66||LA18_1==75))
				{
					int LA18_2 = input.LA(2);

					if ((EvaluatePredicate(synpred42_Lua_fragment)))
					{
						alt18 = 1;
					}


				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:111:49: binop exp
					{
					DebugLocation(111, 49);
					PushFollow(Follow._binop_in_exp570);
					binop101=binop();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, binop101.Tree, binop101, "binop101", retval);
					DebugLocation(111, 55);
					PushFollow(Follow._exp_in_exp572);
					exp102=exp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exp102.Tree, exp102, "exp102", retval);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exp", 11);
			LeaveRule("exp", 11);
			LeaveRule_exp();
			if (state.backtracking > 0) { Memoize(input, 11, exp_StartIndex); }

		}
		DebugLocation(112, 1);
		} finally { DebugExitRule(GrammarFileName, "exp"); }
		return retval;

	}
	// $ANTLR end "exp"

	partial void EnterRule_var();
	partial void LeaveRule_var();
	// $ANTLR start "var"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:114:1: var : ( NAME | '(' exp ')' varSuffix ) ( varSuffix )* ;
	[GrammarRule("var")]
	private Antlr3AstNode var()
	{
		EnterRule_var();
		EnterRule("var", 12);
		var retval = new Antlr3AstNode("var");
		
		retval.Start = (IToken)input.LT(1);
		int var_StartIndex = input.Index;

		object root_0 = default(object);

		IToken NAME103 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken char_literal106 = default(IToken);
		Antlr3AstNode exp105 = default(Antlr3AstNode);
		Antlr3AstNode varSuffix107 = default(Antlr3AstNode);
		Antlr3AstNode varSuffix108 = default(Antlr3AstNode);

		object NAME103_tree = default(object);
		object char_literal104_tree = default(object);
		object char_literal106_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "var");
		DebugLocation(114, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:115:5: ( ( NAME | '(' exp ')' varSuffix ) ( varSuffix )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:115:7: ( NAME | '(' exp ')' varSuffix ) ( varSuffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(115, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:115:7: ( NAME | '(' exp ')' varSuffix )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==NAME))
			{
				alt19 = 1;
			}
			else if ((LA19_1==27))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:115:8: NAME
				{
				DebugLocation(115, 8);
				NAME103=(IToken)Match(input,NAME,Follow._NAME_in_var589); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME103_tree = (object)adaptor.Create(NAME103, "NAME103", retval);
				adaptor.AddChild(root_0, NAME103_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:115:15: '(' exp ')' varSuffix
				{
				DebugLocation(115, 15);
				char_literal104=(IToken)Match(input,27,Follow._27_in_var593); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal104_tree = (object)adaptor.Create(char_literal104, "char_literal104", retval);
				adaptor.AddChild(root_0, char_literal104_tree);
				}
				DebugLocation(115, 19);
				PushFollow(Follow._exp_in_var595);
				exp105=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp105.Tree, exp105, "exp105", retval);
				DebugLocation(115, 23);
				char_literal106=(IToken)Match(input,28,Follow._28_in_var597); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal106_tree = (object)adaptor.Create(char_literal106, "char_literal106", retval);
				adaptor.AddChild(root_0, char_literal106_tree);
				}
				DebugLocation(115, 27);
				PushFollow(Follow._varSuffix_in_var599);
				varSuffix107=varSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, varSuffix107.Tree, varSuffix107, "varSuffix107", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(115, 38);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:115:38: ( varSuffix )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				switch (input.LA(1))
				{
				case 37:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred44_Lua_fragment)))
					{
						alt20 = 1;
					}


					}
					break;
				case 27:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred44_Lua_fragment)))
					{
						alt20 = 1;
					}


					}
					break;
				case 73:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred44_Lua_fragment)))
					{
						alt20 = 1;
					}


					}
					break;
				case CHARSTRING:
				case LONGSTRING:
				case NORMALSTRING:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred44_Lua_fragment)))
					{
						alt20 = 1;
					}


					}
					break;
				case 33:
				case 46:
					{
					alt20 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:115:38: varSuffix
					{
					DebugLocation(115, 38);
					PushFollow(Follow._varSuffix_in_var602);
					varSuffix108=varSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, varSuffix108.Tree, varSuffix108, "varSuffix108", retval);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("var", 12);
			LeaveRule("var", 12);
			LeaveRule_var();
			if (state.backtracking > 0) { Memoize(input, 12, var_StartIndex); }

		}
		DebugLocation(116, 4);
		} finally { DebugExitRule(GrammarFileName, "var"); }
		return retval;

	}
	// $ANTLR end "var"

	partial void EnterRule_prefixexp();
	partial void LeaveRule_prefixexp();
	// $ANTLR start "prefixexp"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:118:1: prefixexp : varOrExp ( nameAndArgs )* ;
	[GrammarRule("prefixexp")]
	private Antlr3AstNode prefixexp()
	{
		EnterRule_prefixexp();
		EnterRule("prefixexp", 13);
		var retval = new Antlr3AstNode("prefixexp");
		
		retval.Start = (IToken)input.LT(1);
		int prefixexp_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode varOrExp109 = default(Antlr3AstNode);
		Antlr3AstNode nameAndArgs110 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "prefixexp");
		DebugLocation(118, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:5: ( varOrExp ( nameAndArgs )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:7: varOrExp ( nameAndArgs )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(119, 7);
			PushFollow(Follow._varOrExp_in_prefixexp620);
			varOrExp109=varOrExp();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, varOrExp109.Tree, varOrExp109, "varOrExp109", retval);
			DebugLocation(119, 16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:16: ( nameAndArgs )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==27))
				{
					int LA21_2 = input.LA(2);

					if ((EvaluatePredicate(synpred45_Lua_fragment)))
					{
						alt21 = 1;
					}


				}
				else if ((LA21_1==CHARSTRING||LA21_1==LONGSTRING||LA21_1==NORMALSTRING||LA21_1==37||LA21_1==73))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:16: nameAndArgs
					{
					DebugLocation(119, 16);
					PushFollow(Follow._nameAndArgs_in_prefixexp622);
					nameAndArgs110=nameAndArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nameAndArgs110.Tree, nameAndArgs110, "nameAndArgs110", retval);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefixexp", 13);
			LeaveRule("prefixexp", 13);
			LeaveRule_prefixexp();
			if (state.backtracking > 0) { Memoize(input, 13, prefixexp_StartIndex); }

		}
		DebugLocation(120, 4);
		} finally { DebugExitRule(GrammarFileName, "prefixexp"); }
		return retval;

	}
	// $ANTLR end "prefixexp"

	partial void EnterRule_functioncall();
	partial void LeaveRule_functioncall();
	// $ANTLR start "functioncall"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:122:1: functioncall : varOrExp ( nameAndArgs )+ ;
	[GrammarRule("functioncall")]
	private Antlr3AstNode functioncall()
	{
		EnterRule_functioncall();
		EnterRule("functioncall", 14);
		var retval = new Antlr3AstNode("functioncall");
		
		retval.Start = (IToken)input.LT(1);
		int functioncall_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode varOrExp111 = default(Antlr3AstNode);
		Antlr3AstNode nameAndArgs112 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "functioncall");
		DebugLocation(122, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:5: ( varOrExp ( nameAndArgs )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:7: varOrExp ( nameAndArgs )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(123, 7);
			PushFollow(Follow._varOrExp_in_functioncall640);
			varOrExp111=varOrExp();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, varOrExp111.Tree, varOrExp111, "varOrExp111", retval);
			DebugLocation(123, 16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:16: ( nameAndArgs )+
			int cnt22=0;
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==27))
				{
					int LA22_2 = input.LA(2);

					if ((EvaluatePredicate(synpred46_Lua_fragment)))
					{
						alt22 = 1;
					}


				}
				else if ((LA22_1==CHARSTRING||LA22_1==LONGSTRING||LA22_1==NORMALSTRING||LA22_1==37||LA22_1==73))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:16: nameAndArgs
					{
					DebugLocation(123, 16);
					PushFollow(Follow._nameAndArgs_in_functioncall642);
					nameAndArgs112=nameAndArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nameAndArgs112.Tree, nameAndArgs112, "nameAndArgs112", retval);

					}
					break;

				default:
					if (cnt22 >= 1)
						goto loop22;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee22 = new EarlyExitException( 22, input );
					DebugRecognitionException(eee22);
					throw eee22;
				}
				cnt22++;
			}
			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall", 14);
			LeaveRule("functioncall", 14);
			LeaveRule_functioncall();
			if (state.backtracking > 0) { Memoize(input, 14, functioncall_StartIndex); }

		}
		DebugLocation(124, 4);
		} finally { DebugExitRule(GrammarFileName, "functioncall"); }
		return retval;

	}
	// $ANTLR end "functioncall"

	partial void EnterRule_varOrExp();
	partial void LeaveRule_varOrExp();
	// $ANTLR start "varOrExp"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:126:1: varOrExp : ( var | '(' exp ')' );
	[GrammarRule("varOrExp")]
	private Antlr3AstNode varOrExp()
	{
		EnterRule_varOrExp();
		EnterRule("varOrExp", 15);
		var retval = new Antlr3AstNode("varOrExp");
		
		retval.Start = (IToken)input.LT(1);
		int varOrExp_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal114 = default(IToken);
		IToken char_literal116 = default(IToken);
		Antlr3AstNode var113 = default(Antlr3AstNode);
		Antlr3AstNode exp115 = default(Antlr3AstNode);

		object char_literal114_tree = default(object);
		object char_literal116_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "varOrExp");
		DebugLocation(126, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:5: ( var | '(' exp ')' )
			int alt23=2;
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==NAME))
			{
				alt23 = 1;
			}
			else if ((LA23_1==27))
			{
				int LA23_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Lua_fragment)))
				{
					alt23 = 1;
				}
				else if ((true))
				{
					alt23 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:7: var
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(127, 7);
				PushFollow(Follow._var_in_varOrExp660);
				var113=var();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, var113.Tree, var113, "var113", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:13: '(' exp ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(127, 13);
				char_literal114=(IToken)Match(input,27,Follow._27_in_varOrExp664); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal114_tree = (object)adaptor.Create(char_literal114, "char_literal114", retval);
				adaptor.AddChild(root_0, char_literal114_tree);
				}
				DebugLocation(127, 17);
				PushFollow(Follow._exp_in_varOrExp666);
				exp115=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp115.Tree, exp115, "exp115", retval);
				DebugLocation(127, 21);
				char_literal116=(IToken)Match(input,28,Follow._28_in_varOrExp668); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal116_tree = (object)adaptor.Create(char_literal116, "char_literal116", retval);
				adaptor.AddChild(root_0, char_literal116_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("varOrExp", 15);
			LeaveRule("varOrExp", 15);
			LeaveRule_varOrExp();
			if (state.backtracking > 0) { Memoize(input, 15, varOrExp_StartIndex); }

		}
		DebugLocation(128, 4);
		} finally { DebugExitRule(GrammarFileName, "varOrExp"); }
		return retval;

	}
	// $ANTLR end "varOrExp"

	partial void EnterRule_nameAndArgs();
	partial void LeaveRule_nameAndArgs();
	// $ANTLR start "nameAndArgs"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:130:1: nameAndArgs : ( ':' NAME )? args ;
	[GrammarRule("nameAndArgs")]
	private Antlr3AstNode nameAndArgs()
	{
		EnterRule_nameAndArgs();
		EnterRule("nameAndArgs", 16);
		var retval = new Antlr3AstNode("nameAndArgs");
		
		retval.Start = (IToken)input.LT(1);
		int nameAndArgs_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal117 = default(IToken);
		IToken NAME118 = default(IToken);
		Antlr3AstNode args119 = default(Antlr3AstNode);

		object char_literal117_tree = default(object);
		object NAME118_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "nameAndArgs");
		DebugLocation(130, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:131:5: ( ( ':' NAME )? args )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:131:7: ( ':' NAME )? args
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(131, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:131:7: ( ':' NAME )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==37))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:131:8: ':' NAME
				{
				DebugLocation(131, 8);
				char_literal117=(IToken)Match(input,37,Follow._37_in_nameAndArgs686); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal117_tree = (object)adaptor.Create(char_literal117, "char_literal117", retval);
				adaptor.AddChild(root_0, char_literal117_tree);
				}
				DebugLocation(131, 12);
				NAME118=(IToken)Match(input,NAME,Follow._NAME_in_nameAndArgs688); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME118_tree = (object)adaptor.Create(NAME118, "NAME118", retval);
				adaptor.AddChild(root_0, NAME118_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(131, 19);
			PushFollow(Follow._args_in_nameAndArgs692);
			args119=args();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, args119.Tree, args119, "args119", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nameAndArgs", 16);
			LeaveRule("nameAndArgs", 16);
			LeaveRule_nameAndArgs();
			if (state.backtracking > 0) { Memoize(input, 16, nameAndArgs_StartIndex); }

		}
		DebugLocation(132, 4);
		} finally { DebugExitRule(GrammarFileName, "nameAndArgs"); }
		return retval;

	}
	// $ANTLR end "nameAndArgs"

	partial void EnterRule_varSuffix();
	partial void LeaveRule_varSuffix();
	// $ANTLR start "varSuffix"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:134:1: varSuffix : ( nameAndArgs )* ( '[' exp ']' | '.' NAME ) ;
	[GrammarRule("varSuffix")]
	private Antlr3AstNode varSuffix()
	{
		EnterRule_varSuffix();
		EnterRule("varSuffix", 17);
		var retval = new Antlr3AstNode("varSuffix");
		
		retval.Start = (IToken)input.LT(1);
		int varSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal121 = default(IToken);
		IToken char_literal123 = default(IToken);
		IToken char_literal124 = default(IToken);
		IToken NAME125 = default(IToken);
		Antlr3AstNode nameAndArgs120 = default(Antlr3AstNode);
		Antlr3AstNode exp122 = default(Antlr3AstNode);

		object char_literal121_tree = default(object);
		object char_literal123_tree = default(object);
		object char_literal124_tree = default(object);
		object NAME125_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "varSuffix");
		DebugLocation(134, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:135:5: ( ( nameAndArgs )* ( '[' exp ']' | '.' NAME ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:135:7: ( nameAndArgs )* ( '[' exp ']' | '.' NAME )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(135, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:135:7: ( nameAndArgs )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==CHARSTRING||LA25_1==LONGSTRING||LA25_1==NORMALSTRING||LA25_1==27||LA25_1==37||LA25_1==73))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:135:7: nameAndArgs
					{
					DebugLocation(135, 7);
					PushFollow(Follow._nameAndArgs_in_varSuffix709);
					nameAndArgs120=nameAndArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nameAndArgs120.Tree, nameAndArgs120, "nameAndArgs120", retval);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(135, 20);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:135:20: ( '[' exp ']' | '.' NAME )
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==46))
			{
				alt26 = 1;
			}
			else if ((LA26_1==33))
			{
				alt26 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:135:21: '[' exp ']'
				{
				DebugLocation(135, 21);
				char_literal121=(IToken)Match(input,46,Follow._46_in_varSuffix713); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal121_tree = (object)adaptor.Create(char_literal121, "char_literal121", retval);
				adaptor.AddChild(root_0, char_literal121_tree);
				}
				DebugLocation(135, 25);
				PushFollow(Follow._exp_in_varSuffix715);
				exp122=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp122.Tree, exp122, "exp122", retval);
				DebugLocation(135, 29);
				char_literal123=(IToken)Match(input,49,Follow._49_in_varSuffix717); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal123_tree = (object)adaptor.Create(char_literal123, "char_literal123", retval);
				adaptor.AddChild(root_0, char_literal123_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:135:35: '.' NAME
				{
				DebugLocation(135, 35);
				char_literal124=(IToken)Match(input,33,Follow._33_in_varSuffix721); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal124_tree = (object)adaptor.Create(char_literal124, "char_literal124", retval);
				adaptor.AddChild(root_0, char_literal124_tree);
				}
				DebugLocation(135, 39);
				NAME125=(IToken)Match(input,NAME,Follow._NAME_in_varSuffix723); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME125_tree = (object)adaptor.Create(NAME125, "NAME125", retval);
				adaptor.AddChild(root_0, NAME125_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("varSuffix", 17);
			LeaveRule("varSuffix", 17);
			LeaveRule_varSuffix();
			if (state.backtracking > 0) { Memoize(input, 17, varSuffix_StartIndex); }

		}
		DebugLocation(136, 4);
		} finally { DebugExitRule(GrammarFileName, "varSuffix"); }
		return retval;

	}
	// $ANTLR end "varSuffix"

	partial void EnterRule_args();
	partial void LeaveRule_args();
	// $ANTLR start "args"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:152:1: args : ( '(' ( explist )? ')' | tableconstructor | string );
	[GrammarRule("args")]
	private Antlr3AstNode args()
	{
		EnterRule_args();
		EnterRule("args", 18);
		var retval = new Antlr3AstNode("args");
		
		retval.Start = (IToken)input.LT(1);
		int args_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal126 = default(IToken);
		IToken char_literal128 = default(IToken);
		Antlr3AstNode explist127 = default(Antlr3AstNode);
		Antlr3AstNode tableconstructor129 = default(Antlr3AstNode);
		Antlr3AstNode string130 = default(Antlr3AstNode);

		object char_literal126_tree = default(object);
		object char_literal128_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "args");
		DebugLocation(152, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:153:5: ( '(' ( explist )? ')' | tableconstructor | string )
			int alt28=3;
			try { DebugEnterDecision(28, false);
			switch (input.LA(1))
			{
			case 27:
				{
				alt28 = 1;
				}
				break;
			case 73:
				{
				alt28 = 2;
				}
				break;
			case CHARSTRING:
			case LONGSTRING:
			case NORMALSTRING:
				{
				alt28 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:153:7: '(' ( explist )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(153, 7);
				char_literal126=(IToken)Match(input,27,Follow._27_in_args744); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal126_tree = (object)adaptor.Create(char_literal126, "char_literal126", retval);
				adaptor.AddChild(root_0, char_literal126_tree);
				}
				DebugLocation(153, 11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:153:11: ( explist )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==CHARSTRING||(LA27_1>=FLOAT && LA27_1<=HEX_FLOAT)||LA27_1==INT||(LA27_1>=LONGSTRING && LA27_1<=NAME)||LA27_1==NORMALSTRING||LA27_1==25||LA27_1==27||LA27_1==32||LA27_1==35||LA27_1==57||LA27_1==59||(LA27_1>=64 && LA27_1<=65)||LA27_1==70||LA27_1==73))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:153:11: explist
					{
					DebugLocation(153, 11);
					PushFollow(Follow._explist_in_args746);
					explist127=explist();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explist127.Tree, explist127, "explist127", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(153, 20);
				char_literal128=(IToken)Match(input,28,Follow._28_in_args749); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal128_tree = (object)adaptor.Create(char_literal128, "char_literal128", retval);
				adaptor.AddChild(root_0, char_literal128_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:153:26: tableconstructor
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(153, 26);
				PushFollow(Follow._tableconstructor_in_args753);
				tableconstructor129=tableconstructor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableconstructor129.Tree, tableconstructor129, "tableconstructor129", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:153:45: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(153, 45);
				PushFollow(Follow._string_in_args757);
				string130=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string130.Tree, string130, "string130", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args", 18);
			LeaveRule("args", 18);
			LeaveRule_args();
			if (state.backtracking > 0) { Memoize(input, 18, args_StartIndex); }

		}
		DebugLocation(154, 4);
		} finally { DebugExitRule(GrammarFileName, "args"); }
		return retval;

	}
	// $ANTLR end "args"

	partial void EnterRule_functiondef();
	partial void LeaveRule_functiondef();
	// $ANTLR start "functiondef"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:156:1: functiondef : 'function' funcbody ;
	[GrammarRule("functiondef")]
	private Antlr3AstNode functiondef()
	{
		EnterRule_functiondef();
		EnterRule("functiondef", 19);
		var retval = new Antlr3AstNode("functiondef");
		
		retval.Start = (IToken)input.LT(1);
		int functiondef_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal131 = default(IToken);
		Antlr3AstNode funcbody132 = default(Antlr3AstNode);

		object string_literal131_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functiondef");
		DebugLocation(156, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:157:5: ( 'function' funcbody )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:157:7: 'function' funcbody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(157, 7);
			string_literal131=(IToken)Match(input,59,Follow._59_in_functiondef774); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal131_tree = (object)adaptor.Create(string_literal131, "string_literal131", retval);
			adaptor.AddChild(root_0, string_literal131_tree);
			}
			DebugLocation(157, 18);
			PushFollow(Follow._funcbody_in_functiondef776);
			funcbody132=funcbody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, funcbody132.Tree, funcbody132, "funcbody132", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functiondef", 19);
			LeaveRule("functiondef", 19);
			LeaveRule_functiondef();
			if (state.backtracking > 0) { Memoize(input, 19, functiondef_StartIndex); }

		}
		DebugLocation(158, 4);
		} finally { DebugExitRule(GrammarFileName, "functiondef"); }
		return retval;

	}
	// $ANTLR end "functiondef"

	partial void EnterRule_funcbody();
	partial void LeaveRule_funcbody();
	// $ANTLR start "funcbody"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:160:1: funcbody : '(' ( parlist )? ')' block 'end' ;
	[GrammarRule("funcbody")]
	private Antlr3AstNode funcbody()
	{
		EnterRule_funcbody();
		EnterRule("funcbody", 20);
		var retval = new Antlr3AstNode("funcbody");
		
		retval.Start = (IToken)input.LT(1);
		int funcbody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal133 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken string_literal137 = default(IToken);
		Antlr3AstNode parlist134 = default(Antlr3AstNode);
		Antlr3AstNode block136 = default(Antlr3AstNode);

		object char_literal133_tree = default(object);
		object char_literal135_tree = default(object);
		object string_literal137_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "funcbody");
		DebugLocation(160, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:161:5: ( '(' ( parlist )? ')' block 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:161:7: '(' ( parlist )? ')' block 'end'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(161, 7);
			char_literal133=(IToken)Match(input,27,Follow._27_in_funcbody793); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal133_tree = (object)adaptor.Create(char_literal133, "char_literal133", retval);
			adaptor.AddChild(root_0, char_literal133_tree);
			}
			DebugLocation(161, 11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:161:11: ( parlist )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==NAME||LA29_1==35))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:161:11: parlist
				{
				DebugLocation(161, 11);
				PushFollow(Follow._parlist_in_funcbody795);
				parlist134=parlist();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parlist134.Tree, parlist134, "parlist134", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(161, 20);
			char_literal135=(IToken)Match(input,28,Follow._28_in_funcbody798); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal135_tree = (object)adaptor.Create(char_literal135, "char_literal135", retval);
			adaptor.AddChild(root_0, char_literal135_tree);
			}
			DebugLocation(161, 24);
			PushFollow(Follow._block_in_funcbody800);
			block136=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block136.Tree, block136, "block136", retval);
			DebugLocation(161, 30);
			string_literal137=(IToken)Match(input,56,Follow._56_in_funcbody802); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal137_tree = (object)adaptor.Create(string_literal137, "string_literal137", retval);
			adaptor.AddChild(root_0, string_literal137_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("funcbody", 20);
			LeaveRule("funcbody", 20);
			LeaveRule_funcbody();
			if (state.backtracking > 0) { Memoize(input, 20, funcbody_StartIndex); }

		}
		DebugLocation(162, 4);
		} finally { DebugExitRule(GrammarFileName, "funcbody"); }
		return retval;

	}
	// $ANTLR end "funcbody"

	partial void EnterRule_parlist();
	partial void LeaveRule_parlist();
	// $ANTLR start "parlist"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:164:1: parlist : ( namelist ( ',' '...' )? | '...' );
	[GrammarRule("parlist")]
	private Antlr3AstNode parlist()
	{
		EnterRule_parlist();
		EnterRule("parlist", 21);
		var retval = new Antlr3AstNode("parlist");
		
		retval.Start = (IToken)input.LT(1);
		int parlist_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal139 = default(IToken);
		IToken string_literal140 = default(IToken);
		IToken string_literal141 = default(IToken);
		Antlr3AstNode namelist138 = default(Antlr3AstNode);

		object char_literal139_tree = default(object);
		object string_literal140_tree = default(object);
		object string_literal141_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parlist");
		DebugLocation(164, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:165:5: ( namelist ( ',' '...' )? | '...' )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==NAME))
			{
				alt31 = 1;
			}
			else if ((LA31_1==35))
			{
				alt31 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:165:7: namelist ( ',' '...' )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(165, 7);
				PushFollow(Follow._namelist_in_parlist819);
				namelist138=namelist();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namelist138.Tree, namelist138, "namelist138", retval);
				DebugLocation(165, 16);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:165:16: ( ',' '...' )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==31))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:165:17: ',' '...'
					{
					DebugLocation(165, 17);
					char_literal139=(IToken)Match(input,31,Follow._31_in_parlist822); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal139_tree = (object)adaptor.Create(char_literal139, "char_literal139", retval);
					adaptor.AddChild(root_0, char_literal139_tree);
					}
					DebugLocation(165, 21);
					string_literal140=(IToken)Match(input,35,Follow._35_in_parlist824); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal140_tree = (object)adaptor.Create(string_literal140, "string_literal140", retval);
					adaptor.AddChild(root_0, string_literal140_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(30); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:165:31: '...'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(165, 31);
				string_literal141=(IToken)Match(input,35,Follow._35_in_parlist830); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal141_tree = (object)adaptor.Create(string_literal141, "string_literal141", retval);
				adaptor.AddChild(root_0, string_literal141_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parlist", 21);
			LeaveRule("parlist", 21);
			LeaveRule_parlist();
			if (state.backtracking > 0) { Memoize(input, 21, parlist_StartIndex); }

		}
		DebugLocation(166, 4);
		} finally { DebugExitRule(GrammarFileName, "parlist"); }
		return retval;

	}
	// $ANTLR end "parlist"

	partial void EnterRule_tableconstructor();
	partial void LeaveRule_tableconstructor();
	// $ANTLR start "tableconstructor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:168:1: tableconstructor : '{' ( fieldlist )? '}' ;
	[GrammarRule("tableconstructor")]
	private Antlr3AstNode tableconstructor()
	{
		EnterRule_tableconstructor();
		EnterRule("tableconstructor", 22);
		var retval = new Antlr3AstNode("tableconstructor");
		
		retval.Start = (IToken)input.LT(1);
		int tableconstructor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal142 = default(IToken);
		IToken char_literal144 = default(IToken);
		Antlr3AstNode fieldlist143 = default(Antlr3AstNode);

		object char_literal142_tree = default(object);
		object char_literal144_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tableconstructor");
		DebugLocation(168, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:169:5: ( '{' ( fieldlist )? '}' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:169:7: '{' ( fieldlist )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(169, 7);
			char_literal142=(IToken)Match(input,73,Follow._73_in_tableconstructor847); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal142_tree = (object)adaptor.Create(char_literal142, "char_literal142", retval);
			adaptor.AddChild(root_0, char_literal142_tree);
			}
			DebugLocation(169, 11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:169:11: ( fieldlist )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==CHARSTRING||(LA32_1>=FLOAT && LA32_1<=HEX_FLOAT)||LA32_1==INT||(LA32_1>=LONGSTRING && LA32_1<=NAME)||LA32_1==NORMALSTRING||LA32_1==25||LA32_1==27||LA32_1==32||LA32_1==35||LA32_1==46||LA32_1==57||LA32_1==59||(LA32_1>=64 && LA32_1<=65)||LA32_1==70||LA32_1==73))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:169:11: fieldlist
				{
				DebugLocation(169, 11);
				PushFollow(Follow._fieldlist_in_tableconstructor849);
				fieldlist143=fieldlist();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fieldlist143.Tree, fieldlist143, "fieldlist143", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(169, 22);
			char_literal144=(IToken)Match(input,74,Follow._74_in_tableconstructor852); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal144_tree = (object)adaptor.Create(char_literal144, "char_literal144", retval);
			adaptor.AddChild(root_0, char_literal144_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableconstructor", 22);
			LeaveRule("tableconstructor", 22);
			LeaveRule_tableconstructor();
			if (state.backtracking > 0) { Memoize(input, 22, tableconstructor_StartIndex); }

		}
		DebugLocation(170, 4);
		} finally { DebugExitRule(GrammarFileName, "tableconstructor"); }
		return retval;

	}
	// $ANTLR end "tableconstructor"

	partial void EnterRule_fieldlist();
	partial void LeaveRule_fieldlist();
	// $ANTLR start "fieldlist"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:172:1: fieldlist : field ( fieldsep field )* ( fieldsep )? ;
	[GrammarRule("fieldlist")]
	private Antlr3AstNode fieldlist()
	{
		EnterRule_fieldlist();
		EnterRule("fieldlist", 23);
		var retval = new Antlr3AstNode("fieldlist");
		
		retval.Start = (IToken)input.LT(1);
		int fieldlist_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode field145 = default(Antlr3AstNode);
		Antlr3AstNode fieldsep146 = default(Antlr3AstNode);
		Antlr3AstNode field147 = default(Antlr3AstNode);
		Antlr3AstNode fieldsep148 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "fieldlist");
		DebugLocation(172, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:173:5: ( field ( fieldsep field )* ( fieldsep )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:173:7: field ( fieldsep field )* ( fieldsep )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(173, 7);
			PushFollow(Follow._field_in_fieldlist869);
			field145=field();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, field145.Tree, field145, "field145", retval);
			DebugLocation(173, 13);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:173:13: ( fieldsep field )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==31||LA33_1==39))
				{
					int LA33_2 = input.LA(2);

					if ((LA33_2==CHARSTRING||(LA33_2>=FLOAT && LA33_2<=HEX_FLOAT)||LA33_2==INT||(LA33_2>=LONGSTRING && LA33_2<=NAME)||LA33_2==NORMALSTRING||LA33_2==25||LA33_2==27||LA33_2==32||LA33_2==35||LA33_2==46||LA33_2==57||LA33_2==59||(LA33_2>=64 && LA33_2<=65)||LA33_2==70||LA33_2==73))
					{
						alt33 = 1;
					}


				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:173:14: fieldsep field
					{
					DebugLocation(173, 14);
					PushFollow(Follow._fieldsep_in_fieldlist872);
					fieldsep146=fieldsep();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fieldsep146.Tree, fieldsep146, "fieldsep146", retval);
					DebugLocation(173, 23);
					PushFollow(Follow._field_in_fieldlist874);
					field147=field();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, field147.Tree, field147, "field147", retval);

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }

			DebugLocation(173, 31);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:173:31: ( fieldsep )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1==31||LA34_1==39))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:173:31: fieldsep
				{
				DebugLocation(173, 31);
				PushFollow(Follow._fieldsep_in_fieldlist878);
				fieldsep148=fieldsep();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fieldsep148.Tree, fieldsep148, "fieldsep148", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldlist", 23);
			LeaveRule("fieldlist", 23);
			LeaveRule_fieldlist();
			if (state.backtracking > 0) { Memoize(input, 23, fieldlist_StartIndex); }

		}
		DebugLocation(174, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldlist"); }
		return retval;

	}
	// $ANTLR end "fieldlist"

	partial void EnterRule_field();
	partial void LeaveRule_field();
	// $ANTLR start "field"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:176:1: field : ( '[' exp ']' '=' exp | NAME '=' exp | exp );
	[GrammarRule("field")]
	private Antlr3AstNode field()
	{
		EnterRule_field();
		EnterRule("field", 24);
		var retval = new Antlr3AstNode("field");
		
		retval.Start = (IToken)input.LT(1);
		int field_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal149 = default(IToken);
		IToken char_literal151 = default(IToken);
		IToken char_literal152 = default(IToken);
		IToken NAME154 = default(IToken);
		IToken char_literal155 = default(IToken);
		Antlr3AstNode exp150 = default(Antlr3AstNode);
		Antlr3AstNode exp153 = default(Antlr3AstNode);
		Antlr3AstNode exp156 = default(Antlr3AstNode);
		Antlr3AstNode exp157 = default(Antlr3AstNode);

		object char_literal149_tree = default(object);
		object char_literal151_tree = default(object);
		object char_literal152_tree = default(object);
		object NAME154_tree = default(object);
		object char_literal155_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "field");
		DebugLocation(176, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:177:5: ( '[' exp ']' '=' exp | NAME '=' exp | exp )
			int alt35=3;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case 46:
				{
				alt35 = 1;
				}
				break;
			case NAME:
				{
				int LA35_2 = input.LA(2);

				if ((LA35_2==42))
				{
					alt35 = 2;
				}
				else if ((LA35_2==EOF||LA35_2==CHARSTRING||LA35_2==LONGSTRING||LA35_2==NORMALSTRING||(LA35_2>=26 && LA35_2<=27)||(LA35_2>=29 && LA35_2<=34)||(LA35_2>=36 && LA35_2<=37)||(LA35_2>=39 && LA35_2<=41)||(LA35_2>=43 && LA35_2<=46)||(LA35_2>=50 && LA35_2<=51)||LA35_2==66||(LA35_2>=73 && LA35_2<=75)))
				{
					alt35 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARSTRING:
			case FLOAT:
			case HEX:
			case HEX_FLOAT:
			case INT:
			case LONGSTRING:
			case NORMALSTRING:
			case 25:
			case 27:
			case 32:
			case 35:
			case 57:
			case 59:
			case 64:
			case 65:
			case 70:
			case 73:
				{
				alt35 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:177:7: '[' exp ']' '=' exp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(177, 7);
				char_literal149=(IToken)Match(input,46,Follow._46_in_field896); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal149_tree = (object)adaptor.Create(char_literal149, "char_literal149", retval);
				adaptor.AddChild(root_0, char_literal149_tree);
				}
				DebugLocation(177, 11);
				PushFollow(Follow._exp_in_field898);
				exp150=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp150.Tree, exp150, "exp150", retval);
				DebugLocation(177, 15);
				char_literal151=(IToken)Match(input,49,Follow._49_in_field900); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal151_tree = (object)adaptor.Create(char_literal151, "char_literal151", retval);
				adaptor.AddChild(root_0, char_literal151_tree);
				}
				DebugLocation(177, 19);
				char_literal152=(IToken)Match(input,42,Follow._42_in_field902); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal152_tree = (object)adaptor.Create(char_literal152, "char_literal152", retval);
				adaptor.AddChild(root_0, char_literal152_tree);
				}
				DebugLocation(177, 23);
				PushFollow(Follow._exp_in_field904);
				exp153=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp153.Tree, exp153, "exp153", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:177:29: NAME '=' exp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(177, 29);
				NAME154=(IToken)Match(input,NAME,Follow._NAME_in_field908); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME154_tree = (object)adaptor.Create(NAME154, "NAME154", retval);
				adaptor.AddChild(root_0, NAME154_tree);
				}
				DebugLocation(177, 34);
				char_literal155=(IToken)Match(input,42,Follow._42_in_field910); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal155_tree = (object)adaptor.Create(char_literal155, "char_literal155", retval);
				adaptor.AddChild(root_0, char_literal155_tree);
				}
				DebugLocation(177, 38);
				PushFollow(Follow._exp_in_field912);
				exp156=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp156.Tree, exp156, "exp156", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:177:44: exp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(177, 44);
				PushFollow(Follow._exp_in_field916);
				exp157=exp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exp157.Tree, exp157, "exp157", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("field", 24);
			LeaveRule("field", 24);
			LeaveRule_field();
			if (state.backtracking > 0) { Memoize(input, 24, field_StartIndex); }

		}
		DebugLocation(178, 4);
		} finally { DebugExitRule(GrammarFileName, "field"); }
		return retval;

	}
	// $ANTLR end "field"

	partial void EnterRule_fieldsep();
	partial void LeaveRule_fieldsep();
	// $ANTLR start "fieldsep"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:180:1: fieldsep : ( ',' | ';' );
	[GrammarRule("fieldsep")]
	private Antlr3AstNode fieldsep()
	{
		EnterRule_fieldsep();
		EnterRule("fieldsep", 25);
		var retval = new Antlr3AstNode("fieldsep");
		
		retval.Start = (IToken)input.LT(1);
		int fieldsep_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set158 = default(IToken);

		object set158_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldsep");
		DebugLocation(180, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:181:5: ( ',' | ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(181, 5);

			set158=(IToken)input.LT(1);
			if (input.LA(1)==31||input.LA(1)==39)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set158, "set158", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldsep", 25);
			LeaveRule("fieldsep", 25);
			LeaveRule_fieldsep();
			if (state.backtracking > 0) { Memoize(input, 25, fieldsep_StartIndex); }

		}
		DebugLocation(182, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldsep"); }
		return retval;

	}
	// $ANTLR end "fieldsep"

	partial void EnterRule_binop();
	partial void LeaveRule_binop();
	// $ANTLR start "binop"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:184:1: binop : ( '+' | '-' | '*' | '/' | '^' | '%' | '..' | '<' | '<=' | '>' | '>=' | '==' | '~=' | 'and' | 'or' );
	[GrammarRule("binop")]
	private Antlr3AstNode binop()
	{
		EnterRule_binop();
		EnterRule("binop", 26);
		var retval = new Antlr3AstNode("binop");
		
		retval.Start = (IToken)input.LT(1);
		int binop_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set159 = default(IToken);

		object set159_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "binop");
		DebugLocation(184, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:185:5: ( '+' | '-' | '*' | '/' | '^' | '%' | '..' | '<' | '<=' | '>' | '>=' | '==' | '~=' | 'and' | 'or' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(185, 5);

			set159=(IToken)input.LT(1);
			if (input.LA(1)==26||(input.LA(1)>=29 && input.LA(1)<=30)||input.LA(1)==32||input.LA(1)==34||input.LA(1)==36||(input.LA(1)>=40 && input.LA(1)<=41)||(input.LA(1)>=43 && input.LA(1)<=45)||(input.LA(1)>=50 && input.LA(1)<=51)||input.LA(1)==66||input.LA(1)==75)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set159, "set159", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("binop", 26);
			LeaveRule("binop", 26);
			LeaveRule_binop();
			if (state.backtracking > 0) { Memoize(input, 26, binop_StartIndex); }

		}
		DebugLocation(188, 4);
		} finally { DebugExitRule(GrammarFileName, "binop"); }
		return retval;

	}
	// $ANTLR end "binop"

	partial void EnterRule_unop();
	partial void LeaveRule_unop();
	// $ANTLR start "unop"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:190:1: unop : ( '-' | 'not' | '#' );
	[GrammarRule("unop")]
	private Antlr3AstNode unop()
	{
		EnterRule_unop();
		EnterRule("unop", 27);
		var retval = new Antlr3AstNode("unop");
		
		retval.Start = (IToken)input.LT(1);
		int unop_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set160 = default(IToken);

		object set160_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unop");
		DebugLocation(190, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:191:5: ( '-' | 'not' | '#' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(191, 5);

			set160=(IToken)input.LT(1);
			if (input.LA(1)==25||input.LA(1)==32||input.LA(1)==65)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set160, "set160", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unop", 27);
			LeaveRule("unop", 27);
			LeaveRule_unop();
			if (state.backtracking > 0) { Memoize(input, 27, unop_StartIndex); }

		}
		DebugLocation(192, 4);
		} finally { DebugExitRule(GrammarFileName, "unop"); }
		return retval;

	}
	// $ANTLR end "unop"

	partial void EnterRule_number();
	partial void LeaveRule_number();
	// $ANTLR start "number"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:194:1: number : ( INT | HEX | FLOAT | HEX_FLOAT );
	[GrammarRule("number")]
	private Antlr3AstNode number()
	{
		EnterRule_number();
		EnterRule("number", 28);
		var retval = new Antlr3AstNode("number");
		
		retval.Start = (IToken)input.LT(1);
		int number_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set161 = default(IToken);

		object set161_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(194, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:195:5: ( INT | HEX | FLOAT | HEX_FLOAT )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(195, 5);

			set161=(IToken)input.LT(1);
			if ((input.LA(1)>=FLOAT && input.LA(1)<=HEX_FLOAT)||input.LA(1)==INT)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set161, "set161", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("number", 28);
			LeaveRule("number", 28);
			LeaveRule_number();
			if (state.backtracking > 0) { Memoize(input, 28, number_StartIndex); }

		}
		DebugLocation(196, 4);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"

	partial void EnterRule_string();
	partial void LeaveRule_string();
	// $ANTLR start "string"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:198:1: string : ( NORMALSTRING | CHARSTRING | LONGSTRING );
	[GrammarRule("string")]
	private Antlr3AstNode @string()
	{
		EnterRule_string();
		EnterRule("string", 29);
		var retval = new Antlr3AstNode("string");
		
		retval.Start = (IToken)input.LT(1);
		int string_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set162 = default(IToken);

		object set162_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(198, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:199:5: ( NORMALSTRING | CHARSTRING | LONGSTRING )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(199, 5);

			set162=(IToken)input.LT(1);
			if (input.LA(1)==CHARSTRING||input.LA(1)==LONGSTRING||input.LA(1)==NORMALSTRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set162, "set162", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 29);
			LeaveRule("string", 29);
			LeaveRule_string();
			if (state.backtracking > 0) { Memoize(input, 29, string_StartIndex); }

		}
		DebugLocation(200, 4);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"

	partial void EnterRule_synpred9_Lua_fragment();
	partial void LeaveRule_synpred9_Lua_fragment();

	// $ANTLR start synpred9_Lua
	private void synpred9_Lua_fragment()
	{
		EnterRule_synpred9_Lua_fragment();
		EnterRule("synpred9_Lua_fragment", 38);
		var retval = new Antlr3AstNode("synpred9_Lua_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:69:7: ( varlist '=' explist )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:69:7: varlist '=' explist
			{
			DebugLocation(69, 7);
			PushFollow(Follow._varlist_in_synpred9_Lua151);
			varlist();
			PopFollow();
			if (state.failed) return;
			DebugLocation(69, 15);
			Match(input,42,Follow._42_in_synpred9_Lua153); if (state.failed) return;
			DebugLocation(69, 19);
			PushFollow(Follow._explist_in_synpred9_Lua155);
			explist();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_Lua_fragment", 38);
			LeaveRule("synpred9_Lua_fragment", 38);
			LeaveRule_synpred9_Lua_fragment();
		}
	}
	// $ANTLR end synpred9_Lua

	partial void EnterRule_synpred10_Lua_fragment();
	partial void LeaveRule_synpred10_Lua_fragment();

	// $ANTLR start synpred10_Lua
	private void synpred10_Lua_fragment()
	{
		EnterRule_synpred10_Lua_fragment();
		EnterRule("synpred10_Lua_fragment", 39);
		var retval = new Antlr3AstNode("synpred10_Lua_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:70:7: ( functioncall )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:70:7: functioncall
			{
			DebugLocation(70, 7);
			PushFollow(Follow._functioncall_in_synpred10_Lua163);
			functioncall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_Lua_fragment", 39);
			LeaveRule("synpred10_Lua_fragment", 39);
			LeaveRule_synpred10_Lua_fragment();
		}
	}
	// $ANTLR end synpred10_Lua

	partial void EnterRule_synpred21_Lua_fragment();
	partial void LeaveRule_synpred21_Lua_fragment();

	// $ANTLR start synpred21_Lua
	private void synpred21_Lua_fragment()
	{
		EnterRule_synpred21_Lua_fragment();
		EnterRule("synpred21_Lua_fragment", 50);
		var retval = new Antlr3AstNode("synpred21_Lua_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:78:7: ( 'for' NAME '=' exp ',' exp ( ',' exp )? 'do' block 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:78:7: 'for' NAME '=' exp ',' exp ( ',' exp )? 'do' block 'end'
			{
			DebugLocation(78, 7);
			Match(input,58,Follow._58_in_synpred21_Lua273); if (state.failed) return;
			DebugLocation(78, 13);
			Match(input,NAME,Follow._NAME_in_synpred21_Lua275); if (state.failed) return;
			DebugLocation(78, 18);
			Match(input,42,Follow._42_in_synpred21_Lua277); if (state.failed) return;
			DebugLocation(78, 22);
			PushFollow(Follow._exp_in_synpred21_Lua279);
			exp();
			PopFollow();
			if (state.failed) return;
			DebugLocation(78, 26);
			Match(input,31,Follow._31_in_synpred21_Lua281); if (state.failed) return;
			DebugLocation(78, 30);
			PushFollow(Follow._exp_in_synpred21_Lua283);
			exp();
			PopFollow();
			if (state.failed) return;
			DebugLocation(78, 34);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:78:34: ( ',' exp )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==31))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:78:35: ',' exp
				{
				DebugLocation(78, 35);
				Match(input,31,Follow._31_in_synpred21_Lua286); if (state.failed) return;
				DebugLocation(78, 39);
				PushFollow(Follow._exp_in_synpred21_Lua288);
				exp();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(78, 45);
			Match(input,53,Follow._53_in_synpred21_Lua292); if (state.failed) return;
			DebugLocation(78, 50);
			PushFollow(Follow._block_in_synpred21_Lua294);
			block();
			PopFollow();
			if (state.failed) return;
			DebugLocation(78, 56);
			Match(input,56,Follow._56_in_synpred21_Lua296); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred21_Lua_fragment", 50);
			LeaveRule("synpred21_Lua_fragment", 50);
			LeaveRule_synpred21_Lua_fragment();
		}
	}
	// $ANTLR end synpred21_Lua

	partial void EnterRule_synpred22_Lua_fragment();
	partial void LeaveRule_synpred22_Lua_fragment();

	// $ANTLR start synpred22_Lua
	private void synpred22_Lua_fragment()
	{
		EnterRule_synpred22_Lua_fragment();
		EnterRule("synpred22_Lua_fragment", 51);
		var retval = new Antlr3AstNode("synpred22_Lua_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:79:7: ( 'for' namelist 'in' explist 'do' block 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:79:7: 'for' namelist 'in' explist 'do' block 'end'
			{
			DebugLocation(79, 7);
			Match(input,58,Follow._58_in_synpred22_Lua304); if (state.failed) return;
			DebugLocation(79, 13);
			PushFollow(Follow._namelist_in_synpred22_Lua306);
			namelist();
			PopFollow();
			if (state.failed) return;
			DebugLocation(79, 22);
			Match(input,62,Follow._62_in_synpred22_Lua308); if (state.failed) return;
			DebugLocation(79, 27);
			PushFollow(Follow._explist_in_synpred22_Lua310);
			explist();
			PopFollow();
			if (state.failed) return;
			DebugLocation(79, 35);
			Match(input,53,Follow._53_in_synpred22_Lua312); if (state.failed) return;
			DebugLocation(79, 40);
			PushFollow(Follow._block_in_synpred22_Lua314);
			block();
			PopFollow();
			if (state.failed) return;
			DebugLocation(79, 46);
			Match(input,56,Follow._56_in_synpred22_Lua316); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred22_Lua_fragment", 51);
			LeaveRule("synpred22_Lua_fragment", 51);
			LeaveRule_synpred22_Lua_fragment();
		}
	}
	// $ANTLR end synpred22_Lua

	partial void EnterRule_synpred24_Lua_fragment();
	partial void LeaveRule_synpred24_Lua_fragment();

	// $ANTLR start synpred24_Lua
	private void synpred24_Lua_fragment()
	{
		EnterRule_synpred24_Lua_fragment();
		EnterRule("synpred24_Lua_fragment", 53);
		var retval = new Antlr3AstNode("synpred24_Lua_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:81:7: ( 'local' 'function' NAME funcbody )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:81:7: 'local' 'function' NAME funcbody
			{
			DebugLocation(81, 7);
			Match(input,63,Follow._63_in_synpred24_Lua336); if (state.failed) return;
			DebugLocation(81, 15);
			Match(input,59,Follow._59_in_synpred24_Lua338); if (state.failed) return;
			DebugLocation(81, 26);
			Match(input,NAME,Follow._NAME_in_synpred24_Lua340); if (state.failed) return;
			DebugLocation(81, 31);
			PushFollow(Follow._funcbody_in_synpred24_Lua342);
			funcbody();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred24_Lua_fragment", 53);
			LeaveRule("synpred24_Lua_fragment", 53);
			LeaveRule_synpred24_Lua_fragment();
		}
	}
	// $ANTLR end synpred24_Lua

	partial void EnterRule_synpred42_Lua_fragment();
	partial void LeaveRule_synpred42_Lua_fragment();

	// $ANTLR start synpred42_Lua
	private void synpred42_Lua_fragment()
	{
		EnterRule_synpred42_Lua_fragment();
		EnterRule("synpred42_Lua_fragment", 71);
		var retval = new Antlr3AstNode("synpred42_Lua_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:111:49: ( binop exp )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:111:49: binop exp
			{
			DebugLocation(111, 49);
			PushFollow(Follow._binop_in_synpred42_Lua570);
			binop();
			PopFollow();
			if (state.failed) return;
			DebugLocation(111, 55);
			PushFollow(Follow._exp_in_synpred42_Lua572);
			exp();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred42_Lua_fragment", 71);
			LeaveRule("synpred42_Lua_fragment", 71);
			LeaveRule_synpred42_Lua_fragment();
		}
	}
	// $ANTLR end synpred42_Lua

	partial void EnterRule_synpred44_Lua_fragment();
	partial void LeaveRule_synpred44_Lua_fragment();

	// $ANTLR start synpred44_Lua
	private void synpred44_Lua_fragment()
	{
		EnterRule_synpred44_Lua_fragment();
		EnterRule("synpred44_Lua_fragment", 73);
		var retval = new Antlr3AstNode("synpred44_Lua_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:115:38: ( varSuffix )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:115:38: varSuffix
			{
			DebugLocation(115, 38);
			PushFollow(Follow._varSuffix_in_synpred44_Lua602);
			varSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred44_Lua_fragment", 73);
			LeaveRule("synpred44_Lua_fragment", 73);
			LeaveRule_synpred44_Lua_fragment();
		}
	}
	// $ANTLR end synpred44_Lua

	partial void EnterRule_synpred45_Lua_fragment();
	partial void LeaveRule_synpred45_Lua_fragment();

	// $ANTLR start synpred45_Lua
	private void synpred45_Lua_fragment()
	{
		EnterRule_synpred45_Lua_fragment();
		EnterRule("synpred45_Lua_fragment", 74);
		var retval = new Antlr3AstNode("synpred45_Lua_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:16: ( nameAndArgs )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:16: nameAndArgs
			{
			DebugLocation(119, 16);
			PushFollow(Follow._nameAndArgs_in_synpred45_Lua622);
			nameAndArgs();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred45_Lua_fragment", 74);
			LeaveRule("synpred45_Lua_fragment", 74);
			LeaveRule_synpred45_Lua_fragment();
		}
	}
	// $ANTLR end synpred45_Lua

	partial void EnterRule_synpred46_Lua_fragment();
	partial void LeaveRule_synpred46_Lua_fragment();

	// $ANTLR start synpred46_Lua
	private void synpred46_Lua_fragment()
	{
		EnterRule_synpred46_Lua_fragment();
		EnterRule("synpred46_Lua_fragment", 75);
		var retval = new Antlr3AstNode("synpred46_Lua_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:16: ( nameAndArgs )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:16: nameAndArgs
			{
			DebugLocation(123, 16);
			PushFollow(Follow._nameAndArgs_in_synpred46_Lua642);
			nameAndArgs();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred46_Lua_fragment", 75);
			LeaveRule("synpred46_Lua_fragment", 75);
			LeaveRule_synpred46_Lua_fragment();
		}
	}
	// $ANTLR end synpred46_Lua

	partial void EnterRule_synpred47_Lua_fragment();
	partial void LeaveRule_synpred47_Lua_fragment();

	// $ANTLR start synpred47_Lua
	private void synpred47_Lua_fragment()
	{
		EnterRule_synpred47_Lua_fragment();
		EnterRule("synpred47_Lua_fragment", 76);
		var retval = new Antlr3AstNode("synpred47_Lua_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:7: ( var )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:7: var
			{
			DebugLocation(127, 7);
			PushFollow(Follow._var_in_synpred47_Lua660);
			var();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred47_Lua_fragment", 76);
			LeaveRule("synpred47_Lua_fragment", 76);
			LeaveRule_synpred47_Lua_fragment();
		}
	}
	// $ANTLR end synpred47_Lua
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _shebang_in_chunk77 = new BitSet(new ulong[]{0xBC3000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_chunk80 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _25_in_shebang94 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_shebang96 = new BitSet(new ulong[]{0xFFFFFFFFFFFFFFF0UL,0xFFFUL});
		public static readonly BitSet _set_in_shebang106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stat_in_block122 = new BitSet(new ulong[]{0xBC3000C008080002UL,0x118UL});
		public static readonly BitSet _retstat_in_block125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_stat143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varlist_in_stat151 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_stat153 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _explist_in_stat155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_stat163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _label_in_stat171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_stat179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _60_in_stat187 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_stat189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_stat197 = new BitSet(new ulong[]{0xBD3000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_stat199 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_stat201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_stat209 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_stat211 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _53_in_stat213 = new BitSet(new ulong[]{0xBD3000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_stat215 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_stat217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_stat225 = new BitSet(new ulong[]{0xBC3000C008080000UL,0x198UL});
		public static readonly BitSet _block_in_stat227 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stat229 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_stat231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_stat239 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_stat241 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_stat243 = new BitSet(new ulong[]{0xBDF000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_stat245 = new BitSet(new ulong[]{0x1C0000000000000UL});
		public static readonly BitSet _55_in_stat248 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_stat250 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_stat252 = new BitSet(new ulong[]{0xBDF000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_stat254 = new BitSet(new ulong[]{0x1C0000000000000UL});
		public static readonly BitSet _54_in_stat259 = new BitSet(new ulong[]{0xBD3000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_stat261 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_stat265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_stat273 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_stat275 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_stat277 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_stat279 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_stat281 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_stat283 = new BitSet(new ulong[]{0x20000080000000UL});
		public static readonly BitSet _31_in_stat286 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_stat288 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _53_in_stat292 = new BitSet(new ulong[]{0xBD3000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_stat294 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_stat296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_stat304 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _namelist_in_stat306 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_stat308 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _explist_in_stat310 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _53_in_stat312 = new BitSet(new ulong[]{0xBD3000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_stat314 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_stat316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_stat324 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _funcname_in_stat326 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _funcbody_in_stat328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_stat336 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_stat338 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_stat340 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _funcbody_in_stat342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_stat350 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _namelist_in_stat352 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _42_in_stat355 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _explist_in_stat357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_retstat376 = new BitSet(new ulong[]{0xA0000890A2D1C12UL,0x243UL});
		public static readonly BitSet _explist_in_retstat378 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _39_in_retstat381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _38_in_label399 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_label401 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _38_in_label403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_funcname420 = new BitSet(new ulong[]{0x2200000002UL});
		public static readonly BitSet _33_in_funcname423 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_funcname425 = new BitSet(new ulong[]{0x2200000002UL});
		public static readonly BitSet _37_in_funcname430 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_funcname432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _var_in_varlist451 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _31_in_varlist454 = new BitSet(new ulong[]{0x8080000UL});
		public static readonly BitSet _var_in_varlist456 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _NAME_in_namelist475 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _31_in_namelist478 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_namelist480 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _exp_in_explist499 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _31_in_explist502 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_explist504 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _64_in_exp524 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _57_in_exp528 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _70_in_exp532 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _number_in_exp536 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _string_in_exp540 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _35_in_exp544 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _functiondef_in_exp548 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _prefixexp_in_exp556 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _tableconstructor_in_exp560 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _unop_in_exp564 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_exp566 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _binop_in_exp570 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_exp572 = new BitSet(new ulong[]{0xC3B1564000002UL,0x804UL});
		public static readonly BitSet _NAME_in_var589 = new BitSet(new ulong[]{0x402208240012UL,0x200UL});
		public static readonly BitSet _27_in_var593 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_var595 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_var597 = new BitSet(new ulong[]{0x402208240010UL,0x200UL});
		public static readonly BitSet _varSuffix_in_var599 = new BitSet(new ulong[]{0x402208240012UL,0x200UL});
		public static readonly BitSet _varSuffix_in_var602 = new BitSet(new ulong[]{0x402208240012UL,0x200UL});
		public static readonly BitSet _varOrExp_in_prefixexp620 = new BitSet(new ulong[]{0x2008240012UL,0x200UL});
		public static readonly BitSet _nameAndArgs_in_prefixexp622 = new BitSet(new ulong[]{0x2008240012UL,0x200UL});
		public static readonly BitSet _varOrExp_in_functioncall640 = new BitSet(new ulong[]{0x2008240010UL,0x200UL});
		public static readonly BitSet _nameAndArgs_in_functioncall642 = new BitSet(new ulong[]{0x2008240012UL,0x200UL});
		public static readonly BitSet _var_in_varOrExp660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_varOrExp664 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_varOrExp666 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_varOrExp668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _37_in_nameAndArgs686 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_nameAndArgs688 = new BitSet(new ulong[]{0x8240010UL,0x200UL});
		public static readonly BitSet _args_in_nameAndArgs692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameAndArgs_in_varSuffix709 = new BitSet(new ulong[]{0x402208240010UL,0x200UL});
		public static readonly BitSet _46_in_varSuffix713 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_varSuffix715 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _49_in_varSuffix717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _33_in_varSuffix721 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_varSuffix723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_args744 = new BitSet(new ulong[]{0xA0000091A2D1C10UL,0x243UL});
		public static readonly BitSet _explist_in_args746 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_args749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableconstructor_in_args753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_args757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_functiondef774 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _funcbody_in_functiondef776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_funcbody793 = new BitSet(new ulong[]{0x810080000UL});
		public static readonly BitSet _parlist_in_funcbody795 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_funcbody798 = new BitSet(new ulong[]{0xBD3000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_funcbody800 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_funcbody802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namelist_in_parlist819 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _31_in_parlist822 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_parlist824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_parlist830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_tableconstructor847 = new BitSet(new ulong[]{0xA0040090A2D1C10UL,0x643UL});
		public static readonly BitSet _fieldlist_in_tableconstructor849 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_tableconstructor852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _field_in_fieldlist869 = new BitSet(new ulong[]{0x8080000002UL});
		public static readonly BitSet _fieldsep_in_fieldlist872 = new BitSet(new ulong[]{0xA0040090A2D1C10UL,0x243UL});
		public static readonly BitSet _field_in_fieldlist874 = new BitSet(new ulong[]{0x8080000002UL});
		public static readonly BitSet _fieldsep_in_fieldlist878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_field896 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_field898 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _49_in_field900 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_field902 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_field904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_field908 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_field910 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_field912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exp_in_field916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varlist_in_synpred9_Lua151 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_synpred9_Lua153 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _explist_in_synpred9_Lua155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_synpred10_Lua163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_synpred21_Lua273 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_synpred21_Lua275 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_synpred21_Lua277 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_synpred21_Lua279 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred21_Lua281 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_synpred21_Lua283 = new BitSet(new ulong[]{0x20000080000000UL});
		public static readonly BitSet _31_in_synpred21_Lua286 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_synpred21_Lua288 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _53_in_synpred21_Lua292 = new BitSet(new ulong[]{0xBD3000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_synpred21_Lua294 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_synpred21_Lua296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_synpred22_Lua304 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _namelist_in_synpred22_Lua306 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_synpred22_Lua308 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _explist_in_synpred22_Lua310 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _53_in_synpred22_Lua312 = new BitSet(new ulong[]{0xBD3000C008080000UL,0x118UL});
		public static readonly BitSet _block_in_synpred22_Lua314 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_synpred22_Lua316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_synpred24_Lua336 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_synpred24_Lua338 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NAME_in_synpred24_Lua340 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _funcbody_in_synpred24_Lua342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _binop_in_synpred42_Lua570 = new BitSet(new ulong[]{0xA0000090A2D1C10UL,0x243UL});
		public static readonly BitSet _exp_in_synpred42_Lua572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varSuffix_in_synpred44_Lua602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameAndArgs_in_synpred45_Lua622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameAndArgs_in_synpred46_Lua642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _var_in_synpred47_Lua660 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Code2Xml.Languages.ANTLRv3.Processors.Lua 
