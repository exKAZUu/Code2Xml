using Code2Xml.Languages.ANTLRv3.Core;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g 2013-11-10 19:35:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Code2Xml.Languages.ANTLRv3.Processors.Lua 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class LuaLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int CHARSTRING=4;
	public const int COMMENT=5;
	public const int EXP=6;
	public const int EscapeSequence=7;
	public const int FLOAT=8;
	public const int HEX=9;
	public const int HexDigit=10;
	public const int INT=11;
	public const int LINE_COMMENT=12;
	public const int LONGSTRING=13;
	public const int NAME=14;
	public const int NEWLINE=15;
	public const int NORMALSTRING=16;
	public const int OctalEscape=17;
	public const int UnicodeEscape=18;
	public const int WS=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;

	// delegates
	// delegators

	public LuaLexer()
	{
		OnCreated();
	}

	public LuaLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public LuaLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__20();
	partial void LeaveRule_T__20();

	// $ANTLR start "T__20"
	[GrammarRule("T__20")]
	private void mT__20()
	{
		EnterRule_T__20();
		EnterRule("T__20", 1);
		TraceIn("T__20", 1);
		try
		{
			int _type = T__20;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:9:7: ( '#' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:9:9: '#'
			{
			DebugLocation(9, 9);
			Match('#'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__20", 1);
			LeaveRule("T__20", 1);
			LeaveRule_T__20();
		}
	}
	// $ANTLR end "T__20"

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 2);
		TraceIn("T__21", 2);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:10:7: ( '%' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:10:9: '%'
			{
			DebugLocation(10, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 2);
			LeaveRule("T__21", 2);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 3);
		TraceIn("T__22", 3);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:11:7: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:11:9: '('
			{
			DebugLocation(11, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 3);
			LeaveRule("T__22", 3);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 4);
		TraceIn("T__23", 4);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:12:7: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:12:9: ')'
			{
			DebugLocation(12, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 4);
			LeaveRule("T__23", 4);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 5);
		TraceIn("T__24", 5);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:13:7: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:13:9: '*'
			{
			DebugLocation(13, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 5);
			LeaveRule("T__24", 5);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 6);
		TraceIn("T__25", 6);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:14:7: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:14:9: '+'
			{
			DebugLocation(14, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 6);
			LeaveRule("T__25", 6);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 7);
		TraceIn("T__26", 7);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:15:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:15:9: ','
			{
			DebugLocation(15, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 7);
			LeaveRule("T__26", 7);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 8);
		TraceIn("T__27", 8);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:16:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:16:9: '-'
			{
			DebugLocation(16, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 8);
			LeaveRule("T__27", 8);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 9);
		TraceIn("T__28", 9);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:17:7: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:17:9: '.'
			{
			DebugLocation(17, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 9);
			LeaveRule("T__28", 9);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 10);
		TraceIn("T__29", 10);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:18:7: ( '..' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:18:9: '..'
			{
			DebugLocation(18, 9);
			Match(".."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 10);
			LeaveRule("T__29", 10);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 11);
		TraceIn("T__30", 11);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:19:7: ( '...' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:19:9: '...'
			{
			DebugLocation(19, 9);
			Match("..."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 11);
			LeaveRule("T__30", 11);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 12);
		TraceIn("T__31", 12);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:20:7: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:20:9: '/'
			{
			DebugLocation(20, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 12);
			LeaveRule("T__31", 12);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 13);
		TraceIn("T__32", 13);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:21:7: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:21:9: ':'
			{
			DebugLocation(21, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 13);
			LeaveRule("T__32", 13);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 14);
		TraceIn("T__33", 14);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:22:7: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:22:9: ';'
			{
			DebugLocation(22, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 14);
			LeaveRule("T__33", 14);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 15);
		TraceIn("T__34", 15);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:23:7: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:23:9: '<'
			{
			DebugLocation(23, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 15);
			LeaveRule("T__34", 15);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 16);
		TraceIn("T__35", 16);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:24:7: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:24:9: '<='
			{
			DebugLocation(24, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 16);
			LeaveRule("T__35", 16);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 17);
		TraceIn("T__36", 17);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:25:7: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:25:9: '='
			{
			DebugLocation(25, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 17);
			LeaveRule("T__36", 17);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 18);
		TraceIn("T__37", 18);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:26:7: ( '==' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:26:9: '=='
			{
			DebugLocation(26, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 18);
			LeaveRule("T__37", 18);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 19);
		TraceIn("T__38", 19);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:27:7: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:27:9: '>'
			{
			DebugLocation(27, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 19);
			LeaveRule("T__38", 19);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 20);
		TraceIn("T__39", 20);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:28:7: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:28:9: '>='
			{
			DebugLocation(28, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 20);
			LeaveRule("T__39", 20);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 21);
		TraceIn("T__40", 21);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:29:7: ( '[' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:29:9: '['
			{
			DebugLocation(29, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 21);
			LeaveRule("T__40", 21);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 22);
		TraceIn("T__41", 22);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:30:7: ( ']' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:30:9: ']'
			{
			DebugLocation(30, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 22);
			LeaveRule("T__41", 22);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 23);
		TraceIn("T__42", 23);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:31:7: ( '^' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:31:9: '^'
			{
			DebugLocation(31, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 23);
			LeaveRule("T__42", 23);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 24);
		TraceIn("T__43", 24);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:32:7: ( 'and' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:32:9: 'and'
			{
			DebugLocation(32, 9);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 24);
			LeaveRule("T__43", 24);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 25);
		TraceIn("T__44", 25);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:33:7: ( 'break' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:33:9: 'break'
			{
			DebugLocation(33, 9);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 25);
			LeaveRule("T__44", 25);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 26);
		TraceIn("T__45", 26);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:34:7: ( 'do' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:34:9: 'do'
			{
			DebugLocation(34, 9);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 26);
			LeaveRule("T__45", 26);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 27);
		TraceIn("T__46", 27);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:35:7: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:35:9: 'else'
			{
			DebugLocation(35, 9);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 27);
			LeaveRule("T__46", 27);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 28);
		TraceIn("T__47", 28);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:36:7: ( 'elseif' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:36:9: 'elseif'
			{
			DebugLocation(36, 9);
			Match("elseif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 28);
			LeaveRule("T__47", 28);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 29);
		TraceIn("T__48", 29);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:37:7: ( 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:37:9: 'end'
			{
			DebugLocation(37, 9);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 29);
			LeaveRule("T__48", 29);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 30);
		TraceIn("T__49", 30);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:38:7: ( 'false' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:38:9: 'false'
			{
			DebugLocation(38, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 30);
			LeaveRule("T__49", 30);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 31);
		TraceIn("T__50", 31);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:39:7: ( 'for' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:39:9: 'for'
			{
			DebugLocation(39, 9);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 31);
			LeaveRule("T__50", 31);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 32);
		TraceIn("T__51", 32);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:40:7: ( 'function' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:40:9: 'function'
			{
			DebugLocation(40, 9);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 32);
			LeaveRule("T__51", 32);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 33);
		TraceIn("T__52", 33);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:41:7: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:41:9: 'if'
			{
			DebugLocation(41, 9);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 33);
			LeaveRule("T__52", 33);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_T__53();
	partial void LeaveRule_T__53();

	// $ANTLR start "T__53"
	[GrammarRule("T__53")]
	private void mT__53()
	{
		EnterRule_T__53();
		EnterRule("T__53", 34);
		TraceIn("T__53", 34);
		try
		{
			int _type = T__53;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:42:7: ( 'in' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:42:9: 'in'
			{
			DebugLocation(42, 9);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__53", 34);
			LeaveRule("T__53", 34);
			LeaveRule_T__53();
		}
	}
	// $ANTLR end "T__53"

	partial void EnterRule_T__54();
	partial void LeaveRule_T__54();

	// $ANTLR start "T__54"
	[GrammarRule("T__54")]
	private void mT__54()
	{
		EnterRule_T__54();
		EnterRule("T__54", 35);
		TraceIn("T__54", 35);
		try
		{
			int _type = T__54;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:43:7: ( 'local' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:43:9: 'local'
			{
			DebugLocation(43, 9);
			Match("local"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__54", 35);
			LeaveRule("T__54", 35);
			LeaveRule_T__54();
		}
	}
	// $ANTLR end "T__54"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 36);
		TraceIn("T__55", 36);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:44:7: ( 'nil' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:44:9: 'nil'
			{
			DebugLocation(44, 9);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 36);
			LeaveRule("T__55", 36);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 37);
		TraceIn("T__56", 37);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:45:7: ( 'not' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:45:9: 'not'
			{
			DebugLocation(45, 9);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 37);
			LeaveRule("T__56", 37);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_T__57();
	partial void LeaveRule_T__57();

	// $ANTLR start "T__57"
	[GrammarRule("T__57")]
	private void mT__57()
	{
		EnterRule_T__57();
		EnterRule("T__57", 38);
		TraceIn("T__57", 38);
		try
		{
			int _type = T__57;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:46:7: ( 'or' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:46:9: 'or'
			{
			DebugLocation(46, 9);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__57", 38);
			LeaveRule("T__57", 38);
			LeaveRule_T__57();
		}
	}
	// $ANTLR end "T__57"

	partial void EnterRule_T__58();
	partial void LeaveRule_T__58();

	// $ANTLR start "T__58"
	[GrammarRule("T__58")]
	private void mT__58()
	{
		EnterRule_T__58();
		EnterRule("T__58", 39);
		TraceIn("T__58", 39);
		try
		{
			int _type = T__58;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:47:7: ( 'repeat' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:47:9: 'repeat'
			{
			DebugLocation(47, 9);
			Match("repeat"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__58", 39);
			LeaveRule("T__58", 39);
			LeaveRule_T__58();
		}
	}
	// $ANTLR end "T__58"

	partial void EnterRule_T__59();
	partial void LeaveRule_T__59();

	// $ANTLR start "T__59"
	[GrammarRule("T__59")]
	private void mT__59()
	{
		EnterRule_T__59();
		EnterRule("T__59", 40);
		TraceIn("T__59", 40);
		try
		{
			int _type = T__59;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:48:7: ( 'return' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:48:9: 'return'
			{
			DebugLocation(48, 9);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__59", 40);
			LeaveRule("T__59", 40);
			LeaveRule_T__59();
		}
	}
	// $ANTLR end "T__59"

	partial void EnterRule_T__60();
	partial void LeaveRule_T__60();

	// $ANTLR start "T__60"
	[GrammarRule("T__60")]
	private void mT__60()
	{
		EnterRule_T__60();
		EnterRule("T__60", 41);
		TraceIn("T__60", 41);
		try
		{
			int _type = T__60;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:49:7: ( 'then' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:49:9: 'then'
			{
			DebugLocation(49, 9);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__60", 41);
			LeaveRule("T__60", 41);
			LeaveRule_T__60();
		}
	}
	// $ANTLR end "T__60"

	partial void EnterRule_T__61();
	partial void LeaveRule_T__61();

	// $ANTLR start "T__61"
	[GrammarRule("T__61")]
	private void mT__61()
	{
		EnterRule_T__61();
		EnterRule("T__61", 42);
		TraceIn("T__61", 42);
		try
		{
			int _type = T__61;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:50:7: ( 'true' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:50:9: 'true'
			{
			DebugLocation(50, 9);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__61", 42);
			LeaveRule("T__61", 42);
			LeaveRule_T__61();
		}
	}
	// $ANTLR end "T__61"

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 43);
		TraceIn("T__62", 43);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:51:7: ( 'until' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:51:9: 'until'
			{
			DebugLocation(51, 9);
			Match("until"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 43);
			LeaveRule("T__62", 43);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 44);
		TraceIn("T__63", 44);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:52:7: ( 'while' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:52:9: 'while'
			{
			DebugLocation(52, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 44);
			LeaveRule("T__63", 44);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 45);
		TraceIn("T__64", 45);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:53:7: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:53:9: '{'
			{
			DebugLocation(53, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 45);
			LeaveRule("T__64", 45);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_T__65();
	partial void LeaveRule_T__65();

	// $ANTLR start "T__65"
	[GrammarRule("T__65")]
	private void mT__65()
	{
		EnterRule_T__65();
		EnterRule("T__65", 46);
		TraceIn("T__65", 46);
		try
		{
			int _type = T__65;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:54:7: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:54:9: '}'
			{
			DebugLocation(54, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__65", 46);
			LeaveRule("T__65", 46);
			LeaveRule_T__65();
		}
	}
	// $ANTLR end "T__65"

	partial void EnterRule_T__66();
	partial void LeaveRule_T__66();

	// $ANTLR start "T__66"
	[GrammarRule("T__66")]
	private void mT__66()
	{
		EnterRule_T__66();
		EnterRule("T__66", 47);
		TraceIn("T__66", 47);
		try
		{
			int _type = T__66;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:55:7: ( '~=' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:55:9: '~='
			{
			DebugLocation(55, 9);
			Match("~="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__66", 47);
			LeaveRule("T__66", 47);
			LeaveRule_T__66();
		}
	}
	// $ANTLR end "T__66"

	partial void EnterRule_NAME();
	partial void LeaveRule_NAME();

	// $ANTLR start "NAME"
	[GrammarRule("NAME")]
	private void mNAME()
	{
		EnterRule_NAME();
		EnterRule("NAME", 48);
		TraceIn("NAME", 48);
		try
		{
			int _type = NAME;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:105:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( options {greedy=true; } : 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:105:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( options {greedy=true; } : 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			{
			DebugLocation(105, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(105, 30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:105:30: ( options {greedy=true; } : 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=5;
				try { DebugEnterDecision(1, false);
				switch (input.LA(1))
				{
				case 'a':
				case 'b':
				case 'c':
				case 'd':
				case 'e':
				case 'f':
				case 'g':
				case 'h':
				case 'i':
				case 'j':
				case 'k':
				case 'l':
				case 'm':
				case 'n':
				case 'o':
				case 'p':
				case 'q':
				case 'r':
				case 's':
				case 't':
				case 'u':
				case 'v':
				case 'w':
				case 'x':
				case 'y':
				case 'z':
					{
					alt1 = 1;
					}
					break;
				case 'A':
				case 'B':
				case 'C':
				case 'D':
				case 'E':
				case 'F':
				case 'G':
				case 'H':
				case 'I':
				case 'J':
				case 'K':
				case 'L':
				case 'M':
				case 'N':
				case 'O':
				case 'P':
				case 'Q':
				case 'R':
				case 'S':
				case 'T':
				case 'U':
				case 'V':
				case 'W':
				case 'X':
				case 'Y':
				case 'Z':
					{
					alt1 = 2;
					}
					break;
				case '_':
					{
					alt1 = 3;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					{
					alt1 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:105:54: 'a' .. 'z'
					{
					DebugLocation(105, 57);
					MatchRange('a','z'); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:105:63: 'A' .. 'Z'
					{
					DebugLocation(105, 66);
					MatchRange('A','Z'); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:105:72: '_'
					{
					DebugLocation(105, 72);
					Match('_'); 

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:105:76: '0' .. '9'
					{
					DebugLocation(105, 79);
					MatchRange('0','9'); 

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAME", 48);
			LeaveRule("NAME", 48);
			LeaveRule_NAME();
		}
	}
	// $ANTLR end "NAME"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 49);
		TraceIn("INT", 49);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:108:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:108:7: ( '0' .. '9' )+
			{
			DebugLocation(108, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:108:7: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='0' && LA2_1<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(108, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 49);
			LeaveRule("INT", 49);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 50);
		TraceIn("FLOAT", 50);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:8: ( INT '.' INT )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:110:9: INT '.' INT
			{
			DebugLocation(110, 9);
			mINT(); 
			DebugLocation(110, 13);
			Match('.'); 
			DebugLocation(110, 17);
			mINT(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 50);
			LeaveRule("FLOAT", 50);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_EXP();
	partial void LeaveRule_EXP();

	// $ANTLR start "EXP"
	[GrammarRule("EXP")]
	private void mEXP()
	{
		EnterRule_EXP();
		EnterRule("EXP", 51);
		TraceIn("EXP", 51);
		try
		{
			int _type = EXP;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:112:5: ( ( INT | FLOAT ) ( 'E' | 'e' ) ( '-' )? INT )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:112:7: ( INT | FLOAT ) ( 'E' | 'e' ) ( '-' )? INT
			{
			DebugLocation(112, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:112:7: ( INT | FLOAT )
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			try
			{
				alt3 = dfa3.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:112:8: INT
				{
				DebugLocation(112, 8);
				mINT(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:112:13: FLOAT
				{
				DebugLocation(112, 13);
				mFLOAT(); 

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(112, 20);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(112, 30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:112:30: ( '-' )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1=='-'))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:112:31: '-'
				{
				DebugLocation(112, 31);
				Match('-'); 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(112, 37);
			mINT(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXP", 51);
			LeaveRule("EXP", 51);
			LeaveRule_EXP();
		}
	}
	// $ANTLR end "EXP"

	partial void EnterRule_HEX();
	partial void LeaveRule_HEX();

	// $ANTLR start "HEX"
	[GrammarRule("HEX")]
	private void mHEX()
	{
		EnterRule_HEX();
		EnterRule("HEX", 52);
		TraceIn("HEX", 52);
		try
		{
			int _type = HEX;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:114:5: ( '0x' ( '0' .. '9' | 'a' .. 'f' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:114:6: '0x' ( '0' .. '9' | 'a' .. 'f' )+
			{
			DebugLocation(114, 6);
			Match("0x"); 

			DebugLocation(114, 11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:114:11: ( '0' .. '9' | 'a' .. 'f' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if (((LA5_1>='0' && LA5_1<='9')||(LA5_1>='a' && LA5_1<='f')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(114, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HEX", 52);
			LeaveRule("HEX", 52);
			LeaveRule_HEX();
		}
	}
	// $ANTLR end "HEX"

	partial void EnterRule_NORMALSTRING();
	partial void LeaveRule_NORMALSTRING();

	// $ANTLR start "NORMALSTRING"
	[GrammarRule("NORMALSTRING")]
	private void mNORMALSTRING()
	{
		EnterRule_NORMALSTRING();
		EnterRule("NORMALSTRING", 53);
		TraceIn("NORMALSTRING", 53);
		try
		{
			int _type = NORMALSTRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:5: ( '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:8: '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(119, 8);
			Match('\"'); 
			DebugLocation(119, 12);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:12: ( EscapeSequence |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=3;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='\\'))
				{
					alt6 = 1;
				}
				else if (((LA6_1>='\u0000' && LA6_1<='!')||(LA6_1>='#' && LA6_1<='[')||(LA6_1>=']' && LA6_1<='\uFFFF')))
				{
					alt6 = 2;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:14: EscapeSequence
					{
					DebugLocation(119, 14);
					mEscapeSequence(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:119:31: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(119, 31);
					input.Consume();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(119, 46);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NORMALSTRING", 53);
			LeaveRule("NORMALSTRING", 53);
			LeaveRule_NORMALSTRING();
		}
	}
	// $ANTLR end "NORMALSTRING"

	partial void EnterRule_CHARSTRING();
	partial void LeaveRule_CHARSTRING();

	// $ANTLR start "CHARSTRING"
	[GrammarRule("CHARSTRING")]
	private void mCHARSTRING()
	{
		EnterRule_CHARSTRING();
		EnterRule("CHARSTRING", 54);
		TraceIn("CHARSTRING", 54);
		try
		{
			int _type = CHARSTRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:4: ( '\\'' ( EscapeSequence |~ ( '\\'' | '\\\\' ) )* '\\'' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:6: '\\'' ( EscapeSequence |~ ( '\\'' | '\\\\' ) )* '\\''
			{
			DebugLocation(123, 6);
			Match('\''); 
			DebugLocation(123, 11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:11: ( EscapeSequence |~ ( '\\'' | '\\\\' ) )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=3;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1=='\\'))
				{
					alt7 = 1;
				}
				else if (((LA7_1>='\u0000' && LA7_1<='&')||(LA7_1>='(' && LA7_1<='[')||(LA7_1>=']' && LA7_1<='\uFFFF')))
				{
					alt7 = 2;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:13: EscapeSequence
					{
					DebugLocation(123, 13);
					mEscapeSequence(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:123:30: ~ ( '\\'' | '\\\\' )
					{
					DebugLocation(123, 30);
					input.Consume();


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(123, 46);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHARSTRING", 54);
			LeaveRule("CHARSTRING", 54);
			LeaveRule_CHARSTRING();
		}
	}
	// $ANTLR end "CHARSTRING"

	partial void EnterRule_LONGSTRING();
	partial void LeaveRule_LONGSTRING();

	// $ANTLR start "LONGSTRING"
	[GrammarRule("LONGSTRING")]
	private void mLONGSTRING()
	{
		EnterRule_LONGSTRING();
		EnterRule("LONGSTRING", 55);
		TraceIn("LONGSTRING", 55);
		try
		{
			int _type = LONGSTRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:5: ( '[' ( '=' )* '[' ( EscapeSequence |~ ( '\\\\' | ']' ) )* ']' ( '=' )* ']' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:7: '[' ( '=' )* '[' ( EscapeSequence |~ ( '\\\\' | ']' ) )* ']' ( '=' )* ']'
			{
			DebugLocation(127, 7);
			Match('['); 
			DebugLocation(127, 10);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:10: ( '=' )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1=='='))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:11: '='
					{
					DebugLocation(127, 11);
					Match('='); 

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(127, 16);
			Match('['); 
			DebugLocation(127, 20);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:20: ( EscapeSequence |~ ( '\\\\' | ']' ) )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=3;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1=='\\'))
				{
					alt9 = 1;
				}
				else if (((LA9_1>='\u0000' && LA9_1<='[')||(LA9_1>='^' && LA9_1<='\uFFFF')))
				{
					alt9 = 2;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:22: EscapeSequence
					{
					DebugLocation(127, 22);
					mEscapeSequence(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:39: ~ ( '\\\\' | ']' )
					{
					DebugLocation(127, 39);
					input.Consume();


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(127, 54);
			Match(']'); 
			DebugLocation(127, 57);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:57: ( '=' )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1=='='))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:127:58: '='
					{
					DebugLocation(127, 58);
					Match('='); 

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(127, 63);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LONGSTRING", 55);
			LeaveRule("LONGSTRING", 55);
			LeaveRule_LONGSTRING();
		}
	}
	// $ANTLR end "LONGSTRING"

	partial void EnterRule_EscapeSequence();
	partial void LeaveRule_EscapeSequence();

	// $ANTLR start "EscapeSequence"
	[GrammarRule("EscapeSequence")]
	private void mEscapeSequence()
	{
		EnterRule_EscapeSequence();
		EnterRule("EscapeSequence", 56);
		TraceIn("EscapeSequence", 56);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:133:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UnicodeEscape | OctalEscape )
			int alt11=3;
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt11 = 1;
					}
					break;
				case 'u':
					{
					alt11 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt11 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 11, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:133:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(133, 9);
				Match('\\'); 
				DebugLocation(133, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:134:9: UnicodeEscape
				{
				DebugLocation(134, 9);
				mUnicodeEscape(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:135:9: OctalEscape
				{
				DebugLocation(135, 9);
				mOctalEscape(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("EscapeSequence", 56);
			LeaveRule("EscapeSequence", 56);
			LeaveRule_EscapeSequence();
		}
	}
	// $ANTLR end "EscapeSequence"

	partial void EnterRule_OctalEscape();
	partial void LeaveRule_OctalEscape();

	// $ANTLR start "OctalEscape"
	[GrammarRule("OctalEscape")]
	private void mOctalEscape()
	{
		EnterRule_OctalEscape();
		EnterRule("OctalEscape", 57);
		TraceIn("OctalEscape", 57);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:140:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1=='\\'))
			{
				int LA12_2 = input.LA(2);

				if (((LA12_2>='0' && LA12_2<='3')))
				{
					int LA12_3 = input.LA(3);

					if (((LA12_3>='0' && LA12_3<='7')))
					{
						int LA12_4 = input.LA(4);

						if (((LA12_4>='0' && LA12_4<='7')))
						{
							alt12 = 1;
						}
						else
						{
							alt12 = 2;
						}
					}
					else
					{
						alt12 = 3;
					}
				}
				else if (((LA12_2>='4' && LA12_2<='7')))
				{
					int LA12_3 = input.LA(3);

					if (((LA12_3>='0' && LA12_3<='7')))
					{
						alt12 = 2;
					}
					else
					{
						alt12 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:140:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(140, 9);
				Match('\\'); 
				DebugLocation(140, 14);
				input.Consume();

				DebugLocation(140, 25);
				input.Consume();

				DebugLocation(140, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:141:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(141, 9);
				Match('\\'); 
				DebugLocation(141, 14);
				input.Consume();

				DebugLocation(141, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:142:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(142, 9);
				Match('\\'); 
				DebugLocation(142, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OctalEscape", 57);
			LeaveRule("OctalEscape", 57);
			LeaveRule_OctalEscape();
		}
	}
	// $ANTLR end "OctalEscape"

	partial void EnterRule_UnicodeEscape();
	partial void LeaveRule_UnicodeEscape();

	// $ANTLR start "UnicodeEscape"
	[GrammarRule("UnicodeEscape")]
	private void mUnicodeEscape()
	{
		EnterRule_UnicodeEscape();
		EnterRule("UnicodeEscape", 58);
		TraceIn("UnicodeEscape", 58);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:147:5: ( '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:147:9: '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit
			{
			DebugLocation(147, 9);
			Match('\\'); 
			DebugLocation(147, 14);
			Match('u'); 
			DebugLocation(147, 18);
			mHexDigit(); 
			DebugLocation(147, 27);
			mHexDigit(); 
			DebugLocation(147, 36);
			mHexDigit(); 
			DebugLocation(147, 45);
			mHexDigit(); 

			}

		}
		finally
		{
			TraceOut("UnicodeEscape", 58);
			LeaveRule("UnicodeEscape", 58);
			LeaveRule_UnicodeEscape();
		}
	}
	// $ANTLR end "UnicodeEscape"

	partial void EnterRule_HexDigit();
	partial void LeaveRule_HexDigit();

	// $ANTLR start "HexDigit"
	[GrammarRule("HexDigit")]
	private void mHexDigit()
	{
		EnterRule_HexDigit();
		EnterRule("HexDigit", 59);
		TraceIn("HexDigit", 59);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:151:10: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
			{
			DebugLocation(151, 10);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HexDigit", 59);
			LeaveRule("HexDigit", 59);
			LeaveRule_HexDigit();
		}
	}
	// $ANTLR end "HexDigit"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 60);
		TraceIn("COMMENT", 60);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:154:5: ( '--[[' ( options {greedy=false; } : . )* ']]' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:154:9: '--[[' ( options {greedy=false; } : . )* ']]'
			{
			DebugLocation(154, 9);
			Match("--[["); 

			DebugLocation(154, 16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:154:16: ( options {greedy=false; } : . )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==']'))
				{
					int LA13_2 = input.LA(2);

					if ((LA13_2==']'))
					{
						alt13 = 2;
					}
					else if (((LA13_2>='\u0000' && LA13_2<='\\')||(LA13_2>='^' && LA13_2<='\uFFFF')))
					{
						alt13 = 1;
					}


				}
				else if (((LA13_1>='\u0000' && LA13_1<='\\')||(LA13_1>='^' && LA13_1<='\uFFFF')))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:154:44: .
					{
					DebugLocation(154, 44);
					MatchAny(); 

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(154, 49);
			Match("]]"); 

			DebugLocation(154, 54);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 60);
			LeaveRule("COMMENT", 60);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 61);
		TraceIn("LINE_COMMENT", 61);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:158:5: ( '--' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:158:7: '--' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
			{
			DebugLocation(158, 7);
			Match("--"); 

			DebugLocation(158, 12);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:158:12: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if (((LA14_1>='\u0000' && LA14_1<='\t')||(LA14_1>='\u000B' && LA14_1<='\f')||(LA14_1>='\u000E' && LA14_1<='\uFFFF')))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(158, 12);
					input.Consume();


					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(158, 26);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:158:26: ( '\\r' )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1=='\r'))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:158:26: '\\r'
				{
				DebugLocation(158, 26);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(158, 32);
			Match('\n'); 
			DebugLocation(158, 37);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 61);
			LeaveRule("LINE_COMMENT", 61);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 62);
		TraceIn("WS", 62);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:161:5: ( ( ' ' | '\\t' | '\\u000C' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:161:8: ( ' ' | '\\t' | '\\u000C' )
			{
			DebugLocation(161, 8);
			if (input.LA(1)=='\t'||input.LA(1)=='\f'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(161, 28);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 62);
			LeaveRule("WS", 62);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 63);
		TraceIn("NEWLINE", 63);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:164:9: ( ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:164:11: ( '\\r' )? '\\n'
			{
			DebugLocation(164, 11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:164:11: ( '\\r' )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1=='\r'))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:164:12: '\\r'
				{
				DebugLocation(164, 12);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(164, 19);
			Match('\n'); 
			DebugLocation(164, 24);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 63);
			LeaveRule("NEWLINE", 63);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	public override void mTokens()
	{
		// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:8: ( T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | NAME | INT | FLOAT | EXP | HEX | NORMALSTRING | CHARSTRING | LONGSTRING | COMMENT | LINE_COMMENT | WS | NEWLINE )
		int alt17=59;
		try { DebugEnterDecision(17, false);
		try
		{
			alt17 = dfa17.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(17); }
		switch (alt17)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:10: T__20
			{
			DebugLocation(1, 10);
			mT__20(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:16: T__21
			{
			DebugLocation(1, 16);
			mT__21(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:22: T__22
			{
			DebugLocation(1, 22);
			mT__22(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:28: T__23
			{
			DebugLocation(1, 28);
			mT__23(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:34: T__24
			{
			DebugLocation(1, 34);
			mT__24(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:40: T__25
			{
			DebugLocation(1, 40);
			mT__25(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:46: T__26
			{
			DebugLocation(1, 46);
			mT__26(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:52: T__27
			{
			DebugLocation(1, 52);
			mT__27(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:58: T__28
			{
			DebugLocation(1, 58);
			mT__28(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:64: T__29
			{
			DebugLocation(1, 64);
			mT__29(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:70: T__30
			{
			DebugLocation(1, 70);
			mT__30(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:76: T__31
			{
			DebugLocation(1, 76);
			mT__31(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:82: T__32
			{
			DebugLocation(1, 82);
			mT__32(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:88: T__33
			{
			DebugLocation(1, 88);
			mT__33(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:94: T__34
			{
			DebugLocation(1, 94);
			mT__34(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:100: T__35
			{
			DebugLocation(1, 100);
			mT__35(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:106: T__36
			{
			DebugLocation(1, 106);
			mT__36(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:112: T__37
			{
			DebugLocation(1, 112);
			mT__37(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:118: T__38
			{
			DebugLocation(1, 118);
			mT__38(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:124: T__39
			{
			DebugLocation(1, 124);
			mT__39(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:130: T__40
			{
			DebugLocation(1, 130);
			mT__40(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:136: T__41
			{
			DebugLocation(1, 136);
			mT__41(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:142: T__42
			{
			DebugLocation(1, 142);
			mT__42(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:148: T__43
			{
			DebugLocation(1, 148);
			mT__43(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:154: T__44
			{
			DebugLocation(1, 154);
			mT__44(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:160: T__45
			{
			DebugLocation(1, 160);
			mT__45(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:166: T__46
			{
			DebugLocation(1, 166);
			mT__46(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:172: T__47
			{
			DebugLocation(1, 172);
			mT__47(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:178: T__48
			{
			DebugLocation(1, 178);
			mT__48(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:184: T__49
			{
			DebugLocation(1, 184);
			mT__49(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:190: T__50
			{
			DebugLocation(1, 190);
			mT__50(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:196: T__51
			{
			DebugLocation(1, 196);
			mT__51(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:202: T__52
			{
			DebugLocation(1, 202);
			mT__52(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:208: T__53
			{
			DebugLocation(1, 208);
			mT__53(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:214: T__54
			{
			DebugLocation(1, 214);
			mT__54(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:220: T__55
			{
			DebugLocation(1, 220);
			mT__55(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:226: T__56
			{
			DebugLocation(1, 226);
			mT__56(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:232: T__57
			{
			DebugLocation(1, 232);
			mT__57(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:238: T__58
			{
			DebugLocation(1, 238);
			mT__58(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:244: T__59
			{
			DebugLocation(1, 244);
			mT__59(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:250: T__60
			{
			DebugLocation(1, 250);
			mT__60(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:256: T__61
			{
			DebugLocation(1, 256);
			mT__61(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:262: T__62
			{
			DebugLocation(1, 262);
			mT__62(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:268: T__63
			{
			DebugLocation(1, 268);
			mT__63(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:274: T__64
			{
			DebugLocation(1, 274);
			mT__64(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:280: T__65
			{
			DebugLocation(1, 280);
			mT__65(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:286: T__66
			{
			DebugLocation(1, 286);
			mT__66(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:292: NAME
			{
			DebugLocation(1, 292);
			mNAME(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:297: INT
			{
			DebugLocation(1, 297);
			mINT(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:301: FLOAT
			{
			DebugLocation(1, 301);
			mFLOAT(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:307: EXP
			{
			DebugLocation(1, 307);
			mEXP(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:311: HEX
			{
			DebugLocation(1, 311);
			mHEX(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:315: NORMALSTRING
			{
			DebugLocation(1, 315);
			mNORMALSTRING(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:328: CHARSTRING
			{
			DebugLocation(1, 328);
			mCHARSTRING(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:339: LONGSTRING
			{
			DebugLocation(1, 339);
			mLONGSTRING(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:350: COMMENT
			{
			DebugLocation(1, 350);
			mCOMMENT(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:358: LINE_COMMENT
			{
			DebugLocation(1, 358);
			mLINE_COMMENT(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:371: WS
			{
			DebugLocation(1, 371);
			mWS(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:374: NEWLINE
			{
			DebugLocation(1, 374);
			mNEWLINE(); 

			}
			break;

		}

	}


	#region DFA
	DFA3 dfa3;
	DFA17 dfa17;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3(this);
		dfa17 = new DFA17(this, SpecialStateTransition17);
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x4\xFFFF";
		private const string DFA3_minS =
			"\x1\x30\x1\x2E\x2\xFFFF";
		private const string DFA3_maxS =
			"\x1\x39\x1\x65\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x2\x1F\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "112:7: ( INT | FLOAT )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA17 : DFA
	{
		private const string DFA17_eotS =
			"\x8\xFFFF\x1\x2B\x1\x2D\x3\xFFFF\x1\x2F\x1\x31\x1\x33\x1\x34\x2\xFFFF"+
			"\xD\x23\x4\xFFFF\x2\x4A\x6\xFFFF\x1\x50\x9\xFFFF\x2\x23\x1\x53\x5\x23"+
			"\x1\x59\x1\x5A\x3\x23\x1\x5E\x5\x23\x8\xFFFF\x1\x67\x1\x23\x1\xFFFF\x1"+
			"\x23\x1\x6A\x1\x23\x1\x6C\x1\x23\x2\xFFFF\x1\x23\x1\x6F\x1\x70\x1\xFFFF"+
			"\x6\x23\x1\x77\x2\xFFFF\x1\x23\x1\x7E\x1\xFFFF\x1\x23\x1\xFFFF\x2\x23"+
			"\x2\xFFFF\x2\x23\x1\x84\x1\x85\x2\x23\x3\xFFFF\x1\x4E\x1\xFFFF\x1\x8B"+
			"\x1\x23\x1\xFFFF\x1\x8D\x1\x23\x1\x8F\x2\x23\x2\xFFFF\x1\x92\x1\x93\x1"+
			"\x89\x3\xFFFF\x1\x94\x1\xFFFF\x1\x23\x1\xFFFF\x1\x96\x1\x97\x3\xFFFF"+
			"\x1\x23\x2\xFFFF\x1\x99\x1\xFFFF";
		private const string DFA17_eofS =
			"\x9A\xFFFF";
		private const string DFA17_minS =
			"\x1\x9\x7\xFFFF\x1\x2D\x1\x2E\x3\xFFFF\x4\x3D\x2\xFFFF\x1\x6E\x1\x72"+
			"\x1\x6F\x1\x6C\x1\x61\x1\x66\x1\x6F\x1\x69\x1\x72\x1\x65\x1\x68\x1\x6E"+
			"\x1\x68\x4\xFFFF\x2\x2E\x4\xFFFF\x1\x0\x1\xFFFF\x1\x2E\x9\xFFFF\x1\x64"+
			"\x1\x65\x1\x30\x1\x73\x1\x64\x1\x6C\x1\x72\x1\x6E\x2\x30\x1\x63\x1\x6C"+
			"\x1\x74\x1\x30\x1\x70\x1\x65\x1\x75\x1\x74\x1\x69\x2\xFFFF\x1\x30\x1"+
			"\xFFFF\x1\x0\x3\xFFFF\x1\x30\x1\x61\x1\xFFFF\x1\x65\x1\x30\x1\x73\x1"+
			"\x30\x1\x63\x2\xFFFF\x1\x61\x2\x30\x1\xFFFF\x1\x65\x1\x75\x1\x6E\x1\x65"+
			"\x1\x69\x1\x6C\x1\x30\x1\x0\x1\xFFFF\x1\x6B\x1\x30\x1\xFFFF\x1\x65\x1"+
			"\xFFFF\x1\x74\x1\x6C\x2\xFFFF\x1\x61\x1\x72\x2\x30\x1\x6C\x1\x65\x1\xFFFF"+
			"\x4\x0\x1\x30\x1\x66\x1\xFFFF\x1\x30\x1\x69\x1\x30\x1\x74\x1\x6E\x2\xFFFF"+
			"\x2\x30\x1\x0\x1\xFFFF\x1\x0\x1\xFFFF\x1\x30\x1\xFFFF\x1\x6F\x1\xFFFF"+
			"\x2\x30\x3\xFFFF\x1\x6E\x2\xFFFF\x1\x30\x1\xFFFF";
		private const string DFA17_maxS =
			"\x1\x7E\x7\xFFFF\x1\x2D\x1\x2E\x3\xFFFF\x3\x3D\x1\x5B\x2\xFFFF\x1\x6E"+
			"\x1\x72\x1\x6F\x1\x6E\x1\x75\x1\x6E\x2\x6F\x1\x72\x1\x65\x1\x72\x1\x6E"+
			"\x1\x68\x4\xFFFF\x1\x78\x1\x65\x4\xFFFF\x1\xFFFF\x1\xFFFF\x1\x2E\x9\xFFFF"+
			"\x1\x64\x1\x65\x1\x7A\x1\x73\x1\x64\x1\x6C\x1\x72\x1\x6E\x2\x7A\x1\x63"+
			"\x1\x6C\x1\x74\x1\x7A\x1\x74\x1\x65\x1\x75\x1\x74\x1\x69\x2\xFFFF\x1"+
			"\x39\x1\xFFFF\x1\xFFFF\x3\xFFFF\x1\x7A\x1\x61\x1\xFFFF\x1\x65\x1\x7A"+
			"\x1\x73\x1\x7A\x1\x63\x2\xFFFF\x1\x61\x2\x7A\x1\xFFFF\x1\x65\x1\x75\x1"+
			"\x6E\x1\x65\x1\x69\x1\x6C\x1\x65\x1\xFFFF\x1\xFFFF\x1\x6B\x1\x7A\x1\xFFFF"+
			"\x1\x65\x1\xFFFF\x1\x74\x1\x6C\x2\xFFFF\x1\x61\x1\x72\x2\x7A\x1\x6C\x1"+
			"\x65\x1\xFFFF\x4\xFFFF\x1\x7A\x1\x66\x1\xFFFF\x1\x7A\x1\x69\x1\x7A\x1"+
			"\x74\x1\x6E\x2\xFFFF\x2\x7A\x1\xFFFF\x1\xFFFF\x1\xFFFF\x1\xFFFF\x1\x7A"+
			"\x1\xFFFF\x1\x6F\x1\xFFFF\x2\x7A\x3\xFFFF\x1\x6E\x2\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA17_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x2\xFFFF\x1\xC\x1"+
			"\xD\x1\xE\x4\xFFFF\x1\x16\x1\x17\xD\xFFFF\x1\x2D\x1\x2E\x1\x2F\x1\x30"+
			"\x2\xFFFF\x1\x35\x1\x36\x1\x3A\x1\x3B\x1\xFFFF\x1\x8\x1\xFFFF\x1\x9\x1"+
			"\x10\x1\xF\x1\x12\x1\x11\x1\x14\x1\x13\x1\x15\x1\x37\x13\xFFFF\x1\x34"+
			"\x1\x31\x1\xFFFF\x1\x33\x1\xFFFF\x1\x39\x1\xB\x1\xA\x2\xFFFF\x1\x1A\x5"+
			"\xFFFF\x1\x21\x1\x22\x3\xFFFF\x1\x26\x8\xFFFF\x1\x18\x2\xFFFF\x1\x1D"+
			"\x1\xFFFF\x1\x1F\x2\xFFFF\x1\x24\x1\x25\x6\xFFFF\x1\x32\x6\xFFFF\x1\x1B"+
			"\x5\xFFFF\x1\x29\x1\x2A\x3\xFFFF\x1\x38\x1\xFFFF\x1\x19\x1\xFFFF\x1\x1E"+
			"\x1\xFFFF\x1\x23\x2\xFFFF\x1\x2B\x1\x2C\x1\x1C\x1\xFFFF\x1\x27\x1\x28"+
			"\x1\xFFFF\x1\x20";
		private const string DFA17_specialS =
			"\x2A\xFFFF\x1\x0\x22\xFFFF\x1\x1\x18\xFFFF\x1\x2\x11\xFFFF\x1\x3\x1\x4"+
			"\x1\x5\x1\x6\xC\xFFFF\x1\x7\x1\xFFFF\x1\x8\xF\xFFFF}>";
		private static readonly string[] DFA17_transitionS =
			{
				"\x1\x28\x1\x29\x1\xFFFF\x1\x28\x1\x29\x12\xFFFF\x1\x28\x1\xFFFF\x1\x26"+
				"\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x27\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7"+
				"\x1\x8\x1\x9\x1\xA\x1\x24\x9\x25\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x2\xFFFF"+
				"\x1A\x23\x1\x10\x1\xFFFF\x1\x11\x1\x12\x1\x23\x1\xFFFF\x1\x13\x1\x14"+
				"\x1\x23\x1\x15\x1\x16\x1\x17\x2\x23\x1\x18\x2\x23\x1\x19\x1\x23\x1\x1A"+
				"\x1\x1B\x2\x23\x1\x1C\x1\x23\x1\x1D\x1\x1E\x1\x23\x1\x1F\x3\x23\x1\x20"+
				"\x1\xFFFF\x1\x21\x1\x22",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2A",
				"\x1\x2C",
				"",
				"",
				"",
				"\x1\x2E",
				"\x1\x30",
				"\x1\x32",
				"\x1\x35\x1D\xFFFF\x1\x35",
				"",
				"",
				"\x1\x36",
				"\x1\x37",
				"\x1\x38",
				"\x1\x39\x1\xFFFF\x1\x3A",
				"\x1\x3B\xD\xFFFF\x1\x3C\x5\xFFFF\x1\x3D",
				"\x1\x3E\x7\xFFFF\x1\x3F",
				"\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x42",
				"\x1\x43",
				"\x1\x44",
				"\x1\x45\x9\xFFFF\x1\x46",
				"\x1\x47",
				"\x1\x48",
				"",
				"",
				"",
				"",
				"\x1\x4B\x1\xFFFF\xA\x25\xB\xFFFF\x1\x4C\x1F\xFFFF\x1\x4C\x12\xFFFF\x1"+
				"\x49",
				"\x1\x4B\x1\xFFFF\xA\x25\xB\xFFFF\x1\x4C\x1F\xFFFF\x1\x4C",
				"",
				"",
				"",
				"",
				"\x5B\x4E\x1\x4D\xFFA4\x4E",
				"",
				"\x1\x4F",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x51",
				"\x1\x52",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"\x1\x57",
				"\x1\x58",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\x1\x5F\x3\xFFFF\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64",
				"",
				"",
				"\xA\x65",
				"",
				"\x5B\x4E\x1\x66\xFFA4\x4E",
				"",
				"",
				"",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\x1\x68",
				"",
				"\x1\x69",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\x1\x6B",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\x1\x6D",
				"",
				"",
				"\x1\x6E",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"",
				"\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\x1\x74",
				"\x1\x75",
				"\x1\x76",
				"\xA\x65\xB\xFFFF\x1\x4C\x1F\xFFFF\x1\x4C",
				"\xA\x7B\x1\x7A\x2\x7B\x1\x79\x4F\x7B\x1\x78\xFFA2\x7B",
				"",
				"\x1\x7C",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x8\x23\x1\x7D\x11"+
				"\x23",
				"",
				"\x1\x7F",
				"",
				"\x1\x80",
				"\x1\x81",
				"",
				"",
				"\x1\x82",
				"\x1\x83",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\x1\x86",
				"\x1\x87",
				"",
				"\xA\x7B\x1\x7A\x2\x7B\x1\x79\x4F\x7B\x1\x88\xFFA2\x7B",
				"\xA\x89\x1\x7A\xFFF5\x89",
				"\x0\x89",
				"\xA\x7B\x1\x7A\x2\x7B\x1\x79\x4F\x7B\x1\x8A\xFFA2\x7B",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\x1\x8C",
				"",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\x1\x8E",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\x1\x90",
				"\x1\x91",
				"",
				"",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\xA\x7B\x1\x7A\x2\x7B\x1\x79\x4F\x7B\x1\x88\xFFA2\x7B",
				"",
				"\xA\x7B\x1\x7A\x2\x7B\x1\x79\x4F\x7B\x1\x88\xFFA2\x7B",
				"",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"",
				"\x1\x95",
				"",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				"",
				"",
				"",
				"\x1\x98",
				"",
				"",
				"\xA\x23\x7\xFFFF\x1A\x23\x4\xFFFF\x1\x23\x1\xFFFF\x1A\x23",
				""
			};

		private static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
		private static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
		private static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
		private static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
		private static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
		private static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
		private static readonly short[][] DFA17_transition;

		static DFA17()
		{
			int numStates = DFA17_transitionS.Length;
			DFA17_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA17_transition[i] = DFA.UnpackEncodedString(DFA17_transitionS[i]);
			}
		}

		public DFA17( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 17;
			this.eot = DFA17_eot;
			this.eof = DFA17_eof;
			this.min = DFA17_min;
			this.max = DFA17_max;
			this.accept = DFA17_accept;
			this.special = DFA17_special;
			this.transition = DFA17_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | NAME | INT | FLOAT | EXP | HEX | NORMALSTRING | CHARSTRING | LONGSTRING | COMMENT | LINE_COMMENT | WS | NEWLINE );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition17(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		s = -1;
		int LA17_1 = input.LA(1);
		int index17_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				if ((LA17_1=='[')) {s = 77;}

				else if (((LA17_1>='\u0000' && LA17_1<='Z')||(LA17_1>='\\' && LA17_1<='\uFFFF'))) {s = 78;}

				break;
			}
		case 1:
			{
				if ((LA17_1=='[')) {s = 102;}

				else if (((LA17_1>='\u0000' && LA17_1<='Z')||(LA17_1>='\\' && LA17_1<='\uFFFF'))) {s = 78;}

				break;
			}
		case 2:
			{
				if ((LA17_1==']')) {s = 120;}

				else if ((LA17_1=='\r')) {s = 121;}

				else if ((LA17_1=='\n')) {s = 122;}

				else if (((LA17_1>='\u0000' && LA17_1<='\t')||(LA17_1>='\u000B' && LA17_1<='\f')||(LA17_1>='\u000E' && LA17_1<='\\')||(LA17_1>='^' && LA17_1<='\uFFFF'))) {s = 123;}

				break;
			}
		case 3:
			{
				if ((LA17_1==']')) {s = 136;}

				else if ((LA17_1=='\r')) {s = 121;}

				else if ((LA17_1=='\n')) {s = 122;}

				else if (((LA17_1>='\u0000' && LA17_1<='\t')||(LA17_1>='\u000B' && LA17_1<='\f')||(LA17_1>='\u000E' && LA17_1<='\\')||(LA17_1>='^' && LA17_1<='\uFFFF'))) {s = 123;}

				break;
			}
		case 4:
			{
				if (((LA17_1>='\u0000' && LA17_1<='\t')||(LA17_1>='\u000B' && LA17_1<='\uFFFF'))) {s = 137;}

				else if ((LA17_1=='\n')) {s = 122;}

				break;
			}
		case 5:
			{
				if (((LA17_1>='\u0000' && LA17_1<='\uFFFF'))) {s = 137;}

				else s = 78;

				break;
			}
		case 6:
			{
				if ((LA17_1==']')) {s = 138;}

				else if ((LA17_1=='\r')) {s = 121;}

				else if ((LA17_1=='\n')) {s = 122;}

				else if (((LA17_1>='\u0000' && LA17_1<='\t')||(LA17_1>='\u000B' && LA17_1<='\f')||(LA17_1>='\u000E' && LA17_1<='\\')||(LA17_1>='^' && LA17_1<='\uFFFF'))) {s = 123;}

				break;
			}
		case 7:
			{
				if ((LA17_1==']')) {s = 136;}

				else if ((LA17_1=='\r')) {s = 121;}

				else if ((LA17_1=='\n')) {s = 122;}

				else if (((LA17_1>='\u0000' && LA17_1<='\t')||(LA17_1>='\u000B' && LA17_1<='\f')||(LA17_1>='\u000E' && LA17_1<='\\')||(LA17_1>='^' && LA17_1<='\uFFFF'))) {s = 123;}

				else s = 137;

				break;
			}
		case 8:
			{
				if ((LA17_1==']')) {s = 136;}

				else if ((LA17_1=='\r')) {s = 121;}

				else if ((LA17_1=='\n')) {s = 122;}

				else if (((LA17_1>='\u0000' && LA17_1<='\t')||(LA17_1>='\u000B' && LA17_1<='\f')||(LA17_1>='\u000E' && LA17_1<='\\')||(LA17_1>='^' && LA17_1<='\uFFFF'))) {s = 123;}

				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		NoViableAltException nvae = new NoViableAltException(dfa.Description, 17, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion

}

} // namespace  Code2Xml.Languages.ANTLRv3.Processors.Lua 
