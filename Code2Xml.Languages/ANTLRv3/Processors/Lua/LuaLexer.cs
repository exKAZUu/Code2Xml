using Code2Xml.Languages.ANTLRv3.Core;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g 2014-02-26 17:33:49

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Code2Xml.Languages.ANTLRv3.Processors.Lua 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class LuaLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int CHARSTRING=4;
	public const int COMMENT=5;
	public const int DecimalEscape=6;
	public const int Digit=7;
	public const int EscapeSequence=8;
	public const int ExponentPart=9;
	public const int FLOAT=10;
	public const int HEX=11;
	public const int HEX_FLOAT=12;
	public const int HexDigit=13;
	public const int HexEscape=14;
	public const int HexExponentPart=15;
	public const int INT=16;
	public const int LINE_COMMENT=17;
	public const int LONGSTRING=18;
	public const int NAME=19;
	public const int NORMALSTRING=20;
	public const int SHEBANG=21;
	public const int WS=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;

	// delegates
	// delegators

	public LuaLexer()
	{
		OnCreated();
	}

	public LuaLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public LuaLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 1);
		TraceIn("T__23", 1);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:9:7: ( '#' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:9:9: '#'
			{
			DebugLocation(9, 9);
			Match('#'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 1);
			LeaveRule("T__23", 1);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 2);
		TraceIn("T__24", 2);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:10:7: ( '%' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:10:9: '%'
			{
			DebugLocation(10, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 2);
			LeaveRule("T__24", 2);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 3);
		TraceIn("T__25", 3);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:11:7: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:11:9: '('
			{
			DebugLocation(11, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 3);
			LeaveRule("T__25", 3);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 4);
		TraceIn("T__26", 4);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:12:7: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:12:9: ')'
			{
			DebugLocation(12, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 4);
			LeaveRule("T__26", 4);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 5);
		TraceIn("T__27", 5);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:13:7: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:13:9: '*'
			{
			DebugLocation(13, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 5);
			LeaveRule("T__27", 5);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 6);
		TraceIn("T__28", 6);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:14:7: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:14:9: '+'
			{
			DebugLocation(14, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 6);
			LeaveRule("T__28", 6);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 7);
		TraceIn("T__29", 7);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:15:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:15:9: ','
			{
			DebugLocation(15, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 7);
			LeaveRule("T__29", 7);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 8);
		TraceIn("T__30", 8);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:16:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:16:9: '-'
			{
			DebugLocation(16, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 8);
			LeaveRule("T__30", 8);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 9);
		TraceIn("T__31", 9);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:17:7: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:17:9: '.'
			{
			DebugLocation(17, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 9);
			LeaveRule("T__31", 9);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 10);
		TraceIn("T__32", 10);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:18:7: ( '..' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:18:9: '..'
			{
			DebugLocation(18, 9);
			Match(".."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 10);
			LeaveRule("T__32", 10);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 11);
		TraceIn("T__33", 11);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:19:7: ( '...' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:19:9: '...'
			{
			DebugLocation(19, 9);
			Match("..."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 11);
			LeaveRule("T__33", 11);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 12);
		TraceIn("T__34", 12);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:20:7: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:20:9: '/'
			{
			DebugLocation(20, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 12);
			LeaveRule("T__34", 12);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 13);
		TraceIn("T__35", 13);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:21:7: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:21:9: ':'
			{
			DebugLocation(21, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 13);
			LeaveRule("T__35", 13);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 14);
		TraceIn("T__36", 14);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:22:7: ( '::' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:22:9: '::'
			{
			DebugLocation(22, 9);
			Match("::"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 14);
			LeaveRule("T__36", 14);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 15);
		TraceIn("T__37", 15);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:23:7: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:23:9: ';'
			{
			DebugLocation(23, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 15);
			LeaveRule("T__37", 15);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 16);
		TraceIn("T__38", 16);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:24:7: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:24:9: '<'
			{
			DebugLocation(24, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 16);
			LeaveRule("T__38", 16);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 17);
		TraceIn("T__39", 17);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:25:7: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:25:9: '<='
			{
			DebugLocation(25, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 17);
			LeaveRule("T__39", 17);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 18);
		TraceIn("T__40", 18);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:26:7: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:26:9: '='
			{
			DebugLocation(26, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 18);
			LeaveRule("T__40", 18);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 19);
		TraceIn("T__41", 19);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:27:7: ( '==' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:27:9: '=='
			{
			DebugLocation(27, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 19);
			LeaveRule("T__41", 19);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 20);
		TraceIn("T__42", 20);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:28:7: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:28:9: '>'
			{
			DebugLocation(28, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 20);
			LeaveRule("T__42", 20);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 21);
		TraceIn("T__43", 21);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:29:7: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:29:9: '>='
			{
			DebugLocation(29, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 21);
			LeaveRule("T__43", 21);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 22);
		TraceIn("T__44", 22);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:30:7: ( '[' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:30:9: '['
			{
			DebugLocation(30, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 22);
			LeaveRule("T__44", 22);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 23);
		TraceIn("T__45", 23);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:31:7: ( ']' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:31:9: ']'
			{
			DebugLocation(31, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 23);
			LeaveRule("T__45", 23);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 24);
		TraceIn("T__46", 24);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:32:7: ( '^' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:32:9: '^'
			{
			DebugLocation(32, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 24);
			LeaveRule("T__46", 24);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 25);
		TraceIn("T__47", 25);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:33:7: ( 'and' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:33:9: 'and'
			{
			DebugLocation(33, 9);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 25);
			LeaveRule("T__47", 25);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 26);
		TraceIn("T__48", 26);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:34:7: ( 'break' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:34:9: 'break'
			{
			DebugLocation(34, 9);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 26);
			LeaveRule("T__48", 26);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 27);
		TraceIn("T__49", 27);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:35:7: ( 'do' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:35:9: 'do'
			{
			DebugLocation(35, 9);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 27);
			LeaveRule("T__49", 27);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 28);
		TraceIn("T__50", 28);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:36:7: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:36:9: 'else'
			{
			DebugLocation(36, 9);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 28);
			LeaveRule("T__50", 28);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 29);
		TraceIn("T__51", 29);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:37:7: ( 'elseif' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:37:9: 'elseif'
			{
			DebugLocation(37, 9);
			Match("elseif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 29);
			LeaveRule("T__51", 29);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 30);
		TraceIn("T__52", 30);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:38:7: ( 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:38:9: 'end'
			{
			DebugLocation(38, 9);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 30);
			LeaveRule("T__52", 30);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_T__53();
	partial void LeaveRule_T__53();

	// $ANTLR start "T__53"
	[GrammarRule("T__53")]
	private void mT__53()
	{
		EnterRule_T__53();
		EnterRule("T__53", 31);
		TraceIn("T__53", 31);
		try
		{
			int _type = T__53;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:39:7: ( 'false' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:39:9: 'false'
			{
			DebugLocation(39, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__53", 31);
			LeaveRule("T__53", 31);
			LeaveRule_T__53();
		}
	}
	// $ANTLR end "T__53"

	partial void EnterRule_T__54();
	partial void LeaveRule_T__54();

	// $ANTLR start "T__54"
	[GrammarRule("T__54")]
	private void mT__54()
	{
		EnterRule_T__54();
		EnterRule("T__54", 32);
		TraceIn("T__54", 32);
		try
		{
			int _type = T__54;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:40:7: ( 'for' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:40:9: 'for'
			{
			DebugLocation(40, 9);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__54", 32);
			LeaveRule("T__54", 32);
			LeaveRule_T__54();
		}
	}
	// $ANTLR end "T__54"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 33);
		TraceIn("T__55", 33);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:41:7: ( 'function' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:41:9: 'function'
			{
			DebugLocation(41, 9);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 33);
			LeaveRule("T__55", 33);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 34);
		TraceIn("T__56", 34);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:42:7: ( 'goto' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:42:9: 'goto'
			{
			DebugLocation(42, 9);
			Match("goto"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 34);
			LeaveRule("T__56", 34);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_T__57();
	partial void LeaveRule_T__57();

	// $ANTLR start "T__57"
	[GrammarRule("T__57")]
	private void mT__57()
	{
		EnterRule_T__57();
		EnterRule("T__57", 35);
		TraceIn("T__57", 35);
		try
		{
			int _type = T__57;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:43:7: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:43:9: 'if'
			{
			DebugLocation(43, 9);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__57", 35);
			LeaveRule("T__57", 35);
			LeaveRule_T__57();
		}
	}
	// $ANTLR end "T__57"

	partial void EnterRule_T__58();
	partial void LeaveRule_T__58();

	// $ANTLR start "T__58"
	[GrammarRule("T__58")]
	private void mT__58()
	{
		EnterRule_T__58();
		EnterRule("T__58", 36);
		TraceIn("T__58", 36);
		try
		{
			int _type = T__58;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:44:7: ( 'in' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:44:9: 'in'
			{
			DebugLocation(44, 9);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__58", 36);
			LeaveRule("T__58", 36);
			LeaveRule_T__58();
		}
	}
	// $ANTLR end "T__58"

	partial void EnterRule_T__59();
	partial void LeaveRule_T__59();

	// $ANTLR start "T__59"
	[GrammarRule("T__59")]
	private void mT__59()
	{
		EnterRule_T__59();
		EnterRule("T__59", 37);
		TraceIn("T__59", 37);
		try
		{
			int _type = T__59;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:45:7: ( 'local' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:45:9: 'local'
			{
			DebugLocation(45, 9);
			Match("local"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__59", 37);
			LeaveRule("T__59", 37);
			LeaveRule_T__59();
		}
	}
	// $ANTLR end "T__59"

	partial void EnterRule_T__60();
	partial void LeaveRule_T__60();

	// $ANTLR start "T__60"
	[GrammarRule("T__60")]
	private void mT__60()
	{
		EnterRule_T__60();
		EnterRule("T__60", 38);
		TraceIn("T__60", 38);
		try
		{
			int _type = T__60;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:46:7: ( 'nil' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:46:9: 'nil'
			{
			DebugLocation(46, 9);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__60", 38);
			LeaveRule("T__60", 38);
			LeaveRule_T__60();
		}
	}
	// $ANTLR end "T__60"

	partial void EnterRule_T__61();
	partial void LeaveRule_T__61();

	// $ANTLR start "T__61"
	[GrammarRule("T__61")]
	private void mT__61()
	{
		EnterRule_T__61();
		EnterRule("T__61", 39);
		TraceIn("T__61", 39);
		try
		{
			int _type = T__61;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:47:7: ( 'not' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:47:9: 'not'
			{
			DebugLocation(47, 9);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__61", 39);
			LeaveRule("T__61", 39);
			LeaveRule_T__61();
		}
	}
	// $ANTLR end "T__61"

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 40);
		TraceIn("T__62", 40);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:48:7: ( 'or' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:48:9: 'or'
			{
			DebugLocation(48, 9);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 40);
			LeaveRule("T__62", 40);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 41);
		TraceIn("T__63", 41);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:49:7: ( 'repeat' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:49:9: 'repeat'
			{
			DebugLocation(49, 9);
			Match("repeat"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 41);
			LeaveRule("T__63", 41);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 42);
		TraceIn("T__64", 42);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:50:7: ( 'return' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:50:9: 'return'
			{
			DebugLocation(50, 9);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 42);
			LeaveRule("T__64", 42);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_T__65();
	partial void LeaveRule_T__65();

	// $ANTLR start "T__65"
	[GrammarRule("T__65")]
	private void mT__65()
	{
		EnterRule_T__65();
		EnterRule("T__65", 43);
		TraceIn("T__65", 43);
		try
		{
			int _type = T__65;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:51:7: ( 'then' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:51:9: 'then'
			{
			DebugLocation(51, 9);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__65", 43);
			LeaveRule("T__65", 43);
			LeaveRule_T__65();
		}
	}
	// $ANTLR end "T__65"

	partial void EnterRule_T__66();
	partial void LeaveRule_T__66();

	// $ANTLR start "T__66"
	[GrammarRule("T__66")]
	private void mT__66()
	{
		EnterRule_T__66();
		EnterRule("T__66", 44);
		TraceIn("T__66", 44);
		try
		{
			int _type = T__66;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:52:7: ( 'true' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:52:9: 'true'
			{
			DebugLocation(52, 9);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__66", 44);
			LeaveRule("T__66", 44);
			LeaveRule_T__66();
		}
	}
	// $ANTLR end "T__66"

	partial void EnterRule_T__67();
	partial void LeaveRule_T__67();

	// $ANTLR start "T__67"
	[GrammarRule("T__67")]
	private void mT__67()
	{
		EnterRule_T__67();
		EnterRule("T__67", 45);
		TraceIn("T__67", 45);
		try
		{
			int _type = T__67;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:53:7: ( 'until' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:53:9: 'until'
			{
			DebugLocation(53, 9);
			Match("until"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__67", 45);
			LeaveRule("T__67", 45);
			LeaveRule_T__67();
		}
	}
	// $ANTLR end "T__67"

	partial void EnterRule_T__68();
	partial void LeaveRule_T__68();

	// $ANTLR start "T__68"
	[GrammarRule("T__68")]
	private void mT__68()
	{
		EnterRule_T__68();
		EnterRule("T__68", 46);
		TraceIn("T__68", 46);
		try
		{
			int _type = T__68;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:54:7: ( 'while' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:54:9: 'while'
			{
			DebugLocation(54, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__68", 46);
			LeaveRule("T__68", 46);
			LeaveRule_T__68();
		}
	}
	// $ANTLR end "T__68"

	partial void EnterRule_T__69();
	partial void LeaveRule_T__69();

	// $ANTLR start "T__69"
	[GrammarRule("T__69")]
	private void mT__69()
	{
		EnterRule_T__69();
		EnterRule("T__69", 47);
		TraceIn("T__69", 47);
		try
		{
			int _type = T__69;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:55:7: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:55:9: '{'
			{
			DebugLocation(55, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__69", 47);
			LeaveRule("T__69", 47);
			LeaveRule_T__69();
		}
	}
	// $ANTLR end "T__69"

	partial void EnterRule_T__70();
	partial void LeaveRule_T__70();

	// $ANTLR start "T__70"
	[GrammarRule("T__70")]
	private void mT__70()
	{
		EnterRule_T__70();
		EnterRule("T__70", 48);
		TraceIn("T__70", 48);
		try
		{
			int _type = T__70;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:56:7: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:56:9: '}'
			{
			DebugLocation(56, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__70", 48);
			LeaveRule("T__70", 48);
			LeaveRule_T__70();
		}
	}
	// $ANTLR end "T__70"

	partial void EnterRule_T__71();
	partial void LeaveRule_T__71();

	// $ANTLR start "T__71"
	[GrammarRule("T__71")]
	private void mT__71()
	{
		EnterRule_T__71();
		EnterRule("T__71", 49);
		TraceIn("T__71", 49);
		try
		{
			int _type = T__71;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:57:7: ( '~=' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:57:9: '~='
			{
			DebugLocation(57, 9);
			Match("~="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__71", 49);
			LeaveRule("T__71", 49);
			LeaveRule_T__71();
		}
	}
	// $ANTLR end "T__71"

	partial void EnterRule_NAME();
	partial void LeaveRule_NAME();

	// $ANTLR start "NAME"
	[GrammarRule("NAME")]
	private void mNAME()
	{
		EnterRule_NAME();
		EnterRule("NAME", 50);
		TraceIn("NAME", 50);
		try
		{
			int _type = NAME;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:204:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:204:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			{
			DebugLocation(204, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(204, 30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:204:30: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='Z')||LA1_1=='_'||(LA1_1>='a' && LA1_1<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(204, 30);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAME", 50);
			LeaveRule("NAME", 50);
			LeaveRule_NAME();
		}
	}
	// $ANTLR end "NAME"

	partial void EnterRule_NORMALSTRING();
	partial void LeaveRule_NORMALSTRING();

	// $ANTLR start "NORMALSTRING"
	[GrammarRule("NORMALSTRING")]
	private void mNORMALSTRING()
	{
		EnterRule_NORMALSTRING();
		EnterRule("NORMALSTRING", 51);
		TraceIn("NORMALSTRING", 51);
		try
		{
			int _type = NORMALSTRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:208:5: ( '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:208:7: '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(208, 7);
			Match('\"'); 
			DebugLocation(208, 11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:208:11: ( EscapeSequence |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=3;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1=='\\'))
				{
					alt2 = 1;
				}
				else if (((LA2_1>='\u0000' && LA2_1<='!')||(LA2_1>='#' && LA2_1<='[')||(LA2_1>=']' && LA2_1<='\uFFFF')))
				{
					alt2 = 2;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:208:13: EscapeSequence
					{
					DebugLocation(208, 13);
					mEscapeSequence(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:208:30: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(208, 30);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(208, 45);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NORMALSTRING", 51);
			LeaveRule("NORMALSTRING", 51);
			LeaveRule_NORMALSTRING();
		}
	}
	// $ANTLR end "NORMALSTRING"

	partial void EnterRule_CHARSTRING();
	partial void LeaveRule_CHARSTRING();

	// $ANTLR start "CHARSTRING"
	[GrammarRule("CHARSTRING")]
	private void mCHARSTRING()
	{
		EnterRule_CHARSTRING();
		EnterRule("CHARSTRING", 52);
		TraceIn("CHARSTRING", 52);
		try
		{
			int _type = CHARSTRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:212:5: ( '\\'' ( EscapeSequence |~ ( '\\'' | '\\\\' ) )* '\\'' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:212:7: '\\'' ( EscapeSequence |~ ( '\\'' | '\\\\' ) )* '\\''
			{
			DebugLocation(212, 7);
			Match('\''); 
			DebugLocation(212, 12);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:212:12: ( EscapeSequence |~ ( '\\'' | '\\\\' ) )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=3;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1=='\\'))
				{
					alt3 = 1;
				}
				else if (((LA3_1>='\u0000' && LA3_1<='&')||(LA3_1>='(' && LA3_1<='[')||(LA3_1>=']' && LA3_1<='\uFFFF')))
				{
					alt3 = 2;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:212:14: EscapeSequence
					{
					DebugLocation(212, 14);
					mEscapeSequence(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:212:31: ~ ( '\\'' | '\\\\' )
					{
					DebugLocation(212, 31);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(212, 47);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHARSTRING", 52);
			LeaveRule("CHARSTRING", 52);
			LeaveRule_CHARSTRING();
		}
	}
	// $ANTLR end "CHARSTRING"

	partial void EnterRule_LONGSTRING();
	partial void LeaveRule_LONGSTRING();

	// $ANTLR start "LONGSTRING"
	[GrammarRule("LONGSTRING")]
	private void mLONGSTRING()
	{
		EnterRule_LONGSTRING();
		EnterRule("LONGSTRING", 53);
		TraceIn("LONGSTRING", 53);
		try
		{
			int _type = LONGSTRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:217:5: ( '[[' ( options {greedy=false; } : . )* ']]' | '[=[' ( options {greedy=false; } : . )* ']=]' | '[==[' ( options {greedy=false; } : . )* ']==]' | '[===[' ( options {greedy=false; } : . )* ']===]' | '[====[' ( options {greedy=false; } : . )* ']====]' | '[=====[' ( options {greedy=false; } : . )* ']=====]' | '[======[' ( options {greedy=false; } : . )* ']======]' | '[=======[' ( options {greedy=false; } : . )* ']=======]' | '[========[' ( options {greedy=false; } : . )* ']========]' | '[=========[' ( options {greedy=false; } : . )* ']=========]' | '[==========[' ( options {greedy=false; } : . )* ']==========]' )
			int alt15=11;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1=='['))
			{
				int LA15_2 = input.LA(2);

				if ((LA15_2=='['))
				{
					alt15 = 1;
				}
				else if ((LA15_2=='='))
				{
					int LA15_3 = input.LA(3);

					if ((LA15_3=='['))
					{
						alt15 = 2;
					}
					else if ((LA15_3=='='))
					{
						int LA15_4 = input.LA(4);

						if ((LA15_4=='['))
						{
							alt15 = 3;
						}
						else if ((LA15_4=='='))
						{
							int LA15_5 = input.LA(5);

							if ((LA15_5=='['))
							{
								alt15 = 4;
							}
							else if ((LA15_5=='='))
							{
								int LA15_6 = input.LA(6);

								if ((LA15_6=='['))
								{
									alt15 = 5;
								}
								else if ((LA15_6=='='))
								{
									int LA15_7 = input.LA(7);

									if ((LA15_7=='['))
									{
										alt15 = 6;
									}
									else if ((LA15_7=='='))
									{
										int LA15_8 = input.LA(8);

										if ((LA15_8=='['))
										{
											alt15 = 7;
										}
										else if ((LA15_8=='='))
										{
											int LA15_9 = input.LA(9);

											if ((LA15_9=='['))
											{
												alt15 = 8;
											}
											else if ((LA15_9=='='))
											{
												int LA15_10 = input.LA(10);

												if ((LA15_10=='['))
												{
													alt15 = 9;
												}
												else if ((LA15_10=='='))
												{
													int LA15_11 = input.LA(11);

													if ((LA15_11=='['))
													{
														alt15 = 10;
													}
													else if ((LA15_11=='='))
													{
														alt15 = 11;
													}
													else
													{
														NoViableAltException nvae = new NoViableAltException("", 15, 19, input, 11);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 15, 17, input, 10);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 15, 15, input, 9);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 15, 13, input, 8);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 15, 11, input, 7);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 15, 9, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 15, 7, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 15, 5, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:217:7: '[[' ( options {greedy=false; } : . )* ']]'
				{
				DebugLocation(217, 7);
				Match("[["); 

				DebugLocation(217, 12);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:217:12: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_1 = input.LA(1);

					if ((LA4_1==']'))
					{
						int LA4_2 = input.LA(2);

						if ((LA4_2==']'))
						{
							alt4 = 2;
						}
						else if (((LA4_2>='\u0000' && LA4_2<='\\')||(LA4_2>='^' && LA4_2<='\uFFFF')))
						{
							alt4 = 1;
						}


					}
					else if (((LA4_1>='\u0000' && LA4_1<='\\')||(LA4_1>='^' && LA4_1<='\uFFFF')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:217:40: .
						{
						DebugLocation(217, 40);
						MatchAny(); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(217, 45);
				Match("]]"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:218:7: '[=[' ( options {greedy=false; } : . )* ']=]'
				{
				DebugLocation(218, 7);
				Match("[=["); 

				DebugLocation(218, 13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:218:13: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if ((LA5_1==']'))
					{
						int LA5_2 = input.LA(2);

						if ((LA5_2=='='))
						{
							int LA5_3 = input.LA(3);

							if ((LA5_3==']'))
							{
								alt5 = 2;
							}
							else if (((LA5_3>='\u0000' && LA5_3<='\\')||(LA5_3>='^' && LA5_3<='\uFFFF')))
							{
								alt5 = 1;
							}


						}
						else if (((LA5_2>='\u0000' && LA5_2<='<')||(LA5_2>='>' && LA5_2<='\uFFFF')))
						{
							alt5 = 1;
						}


					}
					else if (((LA5_1>='\u0000' && LA5_1<='\\')||(LA5_1>='^' && LA5_1<='\uFFFF')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:218:41: .
						{
						DebugLocation(218, 41);
						MatchAny(); 

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(218, 46);
				Match("]=]"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:219:7: '[==[' ( options {greedy=false; } : . )* ']==]'
				{
				DebugLocation(219, 7);
				Match("[==["); 

				DebugLocation(219, 14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:219:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if ((LA6_1==']'))
					{
						int LA6_2 = input.LA(2);

						if ((LA6_2=='='))
						{
							int LA6_3 = input.LA(3);

							if ((LA6_3=='='))
							{
								int LA6_4 = input.LA(4);

								if ((LA6_4==']'))
								{
									alt6 = 2;
								}
								else if (((LA6_4>='\u0000' && LA6_4<='\\')||(LA6_4>='^' && LA6_4<='\uFFFF')))
								{
									alt6 = 1;
								}


							}
							else if (((LA6_3>='\u0000' && LA6_3<='<')||(LA6_3>='>' && LA6_3<='\uFFFF')))
							{
								alt6 = 1;
							}


						}
						else if (((LA6_2>='\u0000' && LA6_2<='<')||(LA6_2>='>' && LA6_2<='\uFFFF')))
						{
							alt6 = 1;
						}


					}
					else if (((LA6_1>='\u0000' && LA6_1<='\\')||(LA6_1>='^' && LA6_1<='\uFFFF')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:219:42: .
						{
						DebugLocation(219, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(219, 47);
				Match("]==]"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:220:7: '[===[' ( options {greedy=false; } : . )* ']===]'
				{
				DebugLocation(220, 7);
				Match("[===["); 

				DebugLocation(220, 15);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:220:15: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1==']'))
					{
						int LA7_2 = input.LA(2);

						if ((LA7_2=='='))
						{
							int LA7_3 = input.LA(3);

							if ((LA7_3=='='))
							{
								int LA7_4 = input.LA(4);

								if ((LA7_4=='='))
								{
									int LA7_5 = input.LA(5);

									if ((LA7_5==']'))
									{
										alt7 = 2;
									}
									else if (((LA7_5>='\u0000' && LA7_5<='\\')||(LA7_5>='^' && LA7_5<='\uFFFF')))
									{
										alt7 = 1;
									}


								}
								else if (((LA7_4>='\u0000' && LA7_4<='<')||(LA7_4>='>' && LA7_4<='\uFFFF')))
								{
									alt7 = 1;
								}


							}
							else if (((LA7_3>='\u0000' && LA7_3<='<')||(LA7_3>='>' && LA7_3<='\uFFFF')))
							{
								alt7 = 1;
							}


						}
						else if (((LA7_2>='\u0000' && LA7_2<='<')||(LA7_2>='>' && LA7_2<='\uFFFF')))
						{
							alt7 = 1;
						}


					}
					else if (((LA7_1>='\u0000' && LA7_1<='\\')||(LA7_1>='^' && LA7_1<='\uFFFF')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:220:43: .
						{
						DebugLocation(220, 43);
						MatchAny(); 

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(220, 48);
				Match("]===]"); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:221:7: '[====[' ( options {greedy=false; } : . )* ']====]'
				{
				DebugLocation(221, 7);
				Match("[====["); 

				DebugLocation(221, 16);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:221:16: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_1 = input.LA(1);

					if ((LA8_1==']'))
					{
						int LA8_2 = input.LA(2);

						if ((LA8_2=='='))
						{
							int LA8_3 = input.LA(3);

							if ((LA8_3=='='))
							{
								int LA8_4 = input.LA(4);

								if ((LA8_4=='='))
								{
									int LA8_5 = input.LA(5);

									if ((LA8_5=='='))
									{
										int LA8_6 = input.LA(6);

										if ((LA8_6==']'))
										{
											alt8 = 2;
										}
										else if (((LA8_6>='\u0000' && LA8_6<='\\')||(LA8_6>='^' && LA8_6<='\uFFFF')))
										{
											alt8 = 1;
										}


									}
									else if (((LA8_5>='\u0000' && LA8_5<='<')||(LA8_5>='>' && LA8_5<='\uFFFF')))
									{
										alt8 = 1;
									}


								}
								else if (((LA8_4>='\u0000' && LA8_4<='<')||(LA8_4>='>' && LA8_4<='\uFFFF')))
								{
									alt8 = 1;
								}


							}
							else if (((LA8_3>='\u0000' && LA8_3<='<')||(LA8_3>='>' && LA8_3<='\uFFFF')))
							{
								alt8 = 1;
							}


						}
						else if (((LA8_2>='\u0000' && LA8_2<='<')||(LA8_2>='>' && LA8_2<='\uFFFF')))
						{
							alt8 = 1;
						}


					}
					else if (((LA8_1>='\u0000' && LA8_1<='\\')||(LA8_1>='^' && LA8_1<='\uFFFF')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:221:44: .
						{
						DebugLocation(221, 44);
						MatchAny(); 

						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(221, 49);
				Match("]====]"); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:222:7: '[=====[' ( options {greedy=false; } : . )* ']=====]'
				{
				DebugLocation(222, 7);
				Match("[=====["); 

				DebugLocation(222, 17);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:222:17: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if ((LA9_1==']'))
					{
						int LA9_2 = input.LA(2);

						if ((LA9_2=='='))
						{
							int LA9_3 = input.LA(3);

							if ((LA9_3=='='))
							{
								int LA9_4 = input.LA(4);

								if ((LA9_4=='='))
								{
									int LA9_5 = input.LA(5);

									if ((LA9_5=='='))
									{
										int LA9_6 = input.LA(6);

										if ((LA9_6=='='))
										{
											int LA9_7 = input.LA(7);

											if ((LA9_7==']'))
											{
												alt9 = 2;
											}
											else if (((LA9_7>='\u0000' && LA9_7<='\\')||(LA9_7>='^' && LA9_7<='\uFFFF')))
											{
												alt9 = 1;
											}


										}
										else if (((LA9_6>='\u0000' && LA9_6<='<')||(LA9_6>='>' && LA9_6<='\uFFFF')))
										{
											alt9 = 1;
										}


									}
									else if (((LA9_5>='\u0000' && LA9_5<='<')||(LA9_5>='>' && LA9_5<='\uFFFF')))
									{
										alt9 = 1;
									}


								}
								else if (((LA9_4>='\u0000' && LA9_4<='<')||(LA9_4>='>' && LA9_4<='\uFFFF')))
								{
									alt9 = 1;
								}


							}
							else if (((LA9_3>='\u0000' && LA9_3<='<')||(LA9_3>='>' && LA9_3<='\uFFFF')))
							{
								alt9 = 1;
							}


						}
						else if (((LA9_2>='\u0000' && LA9_2<='<')||(LA9_2>='>' && LA9_2<='\uFFFF')))
						{
							alt9 = 1;
						}


					}
					else if (((LA9_1>='\u0000' && LA9_1<='\\')||(LA9_1>='^' && LA9_1<='\uFFFF')))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch ( alt9 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:222:45: .
						{
						DebugLocation(222, 45);
						MatchAny(); 

						}
						break;

					default:
						goto loop9;
					}
				}

				loop9:
					;

				} finally { DebugExitSubRule(9); }

				DebugLocation(222, 50);
				Match("]=====]"); 


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:223:7: '[======[' ( options {greedy=false; } : . )* ']======]'
				{
				DebugLocation(223, 7);
				Match("[======["); 

				DebugLocation(223, 18);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:223:18: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_1 = input.LA(1);

					if ((LA10_1==']'))
					{
						int LA10_2 = input.LA(2);

						if ((LA10_2=='='))
						{
							int LA10_3 = input.LA(3);

							if ((LA10_3=='='))
							{
								int LA10_4 = input.LA(4);

								if ((LA10_4=='='))
								{
									int LA10_5 = input.LA(5);

									if ((LA10_5=='='))
									{
										int LA10_6 = input.LA(6);

										if ((LA10_6=='='))
										{
											int LA10_7 = input.LA(7);

											if ((LA10_7=='='))
											{
												int LA10_8 = input.LA(8);

												if ((LA10_8==']'))
												{
													alt10 = 2;
												}
												else if (((LA10_8>='\u0000' && LA10_8<='\\')||(LA10_8>='^' && LA10_8<='\uFFFF')))
												{
													alt10 = 1;
												}


											}
											else if (((LA10_7>='\u0000' && LA10_7<='<')||(LA10_7>='>' && LA10_7<='\uFFFF')))
											{
												alt10 = 1;
											}


										}
										else if (((LA10_6>='\u0000' && LA10_6<='<')||(LA10_6>='>' && LA10_6<='\uFFFF')))
										{
											alt10 = 1;
										}


									}
									else if (((LA10_5>='\u0000' && LA10_5<='<')||(LA10_5>='>' && LA10_5<='\uFFFF')))
									{
										alt10 = 1;
									}


								}
								else if (((LA10_4>='\u0000' && LA10_4<='<')||(LA10_4>='>' && LA10_4<='\uFFFF')))
								{
									alt10 = 1;
								}


							}
							else if (((LA10_3>='\u0000' && LA10_3<='<')||(LA10_3>='>' && LA10_3<='\uFFFF')))
							{
								alt10 = 1;
							}


						}
						else if (((LA10_2>='\u0000' && LA10_2<='<')||(LA10_2>='>' && LA10_2<='\uFFFF')))
						{
							alt10 = 1;
						}


					}
					else if (((LA10_1>='\u0000' && LA10_1<='\\')||(LA10_1>='^' && LA10_1<='\uFFFF')))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:223:46: .
						{
						DebugLocation(223, 46);
						MatchAny(); 

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }

				DebugLocation(223, 51);
				Match("]======]"); 


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:224:7: '[=======[' ( options {greedy=false; } : . )* ']=======]'
				{
				DebugLocation(224, 7);
				Match("[=======["); 

				DebugLocation(224, 19);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:224:19: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_1 = input.LA(1);

					if ((LA11_1==']'))
					{
						int LA11_2 = input.LA(2);

						if ((LA11_2=='='))
						{
							int LA11_3 = input.LA(3);

							if ((LA11_3=='='))
							{
								int LA11_4 = input.LA(4);

								if ((LA11_4=='='))
								{
									int LA11_5 = input.LA(5);

									if ((LA11_5=='='))
									{
										int LA11_6 = input.LA(6);

										if ((LA11_6=='='))
										{
											int LA11_7 = input.LA(7);

											if ((LA11_7=='='))
											{
												int LA11_8 = input.LA(8);

												if ((LA11_8=='='))
												{
													int LA11_9 = input.LA(9);

													if ((LA11_9==']'))
													{
														alt11 = 2;
													}
													else if (((LA11_9>='\u0000' && LA11_9<='\\')||(LA11_9>='^' && LA11_9<='\uFFFF')))
													{
														alt11 = 1;
													}


												}
												else if (((LA11_8>='\u0000' && LA11_8<='<')||(LA11_8>='>' && LA11_8<='\uFFFF')))
												{
													alt11 = 1;
												}


											}
											else if (((LA11_7>='\u0000' && LA11_7<='<')||(LA11_7>='>' && LA11_7<='\uFFFF')))
											{
												alt11 = 1;
											}


										}
										else if (((LA11_6>='\u0000' && LA11_6<='<')||(LA11_6>='>' && LA11_6<='\uFFFF')))
										{
											alt11 = 1;
										}


									}
									else if (((LA11_5>='\u0000' && LA11_5<='<')||(LA11_5>='>' && LA11_5<='\uFFFF')))
									{
										alt11 = 1;
									}


								}
								else if (((LA11_4>='\u0000' && LA11_4<='<')||(LA11_4>='>' && LA11_4<='\uFFFF')))
								{
									alt11 = 1;
								}


							}
							else if (((LA11_3>='\u0000' && LA11_3<='<')||(LA11_3>='>' && LA11_3<='\uFFFF')))
							{
								alt11 = 1;
							}


						}
						else if (((LA11_2>='\u0000' && LA11_2<='<')||(LA11_2>='>' && LA11_2<='\uFFFF')))
						{
							alt11 = 1;
						}


					}
					else if (((LA11_1>='\u0000' && LA11_1<='\\')||(LA11_1>='^' && LA11_1<='\uFFFF')))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch ( alt11 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:224:47: .
						{
						DebugLocation(224, 47);
						MatchAny(); 

						}
						break;

					default:
						goto loop11;
					}
				}

				loop11:
					;

				} finally { DebugExitSubRule(11); }

				DebugLocation(224, 52);
				Match("]=======]"); 


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:225:7: '[========[' ( options {greedy=false; } : . )* ']========]'
				{
				DebugLocation(225, 7);
				Match("[========["); 

				DebugLocation(225, 20);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:225:20: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_1 = input.LA(1);

					if ((LA12_1==']'))
					{
						int LA12_2 = input.LA(2);

						if ((LA12_2=='='))
						{
							int LA12_3 = input.LA(3);

							if ((LA12_3=='='))
							{
								int LA12_4 = input.LA(4);

								if ((LA12_4=='='))
								{
									int LA12_5 = input.LA(5);

									if ((LA12_5=='='))
									{
										int LA12_6 = input.LA(6);

										if ((LA12_6=='='))
										{
											int LA12_7 = input.LA(7);

											if ((LA12_7=='='))
											{
												int LA12_8 = input.LA(8);

												if ((LA12_8=='='))
												{
													int LA12_9 = input.LA(9);

													if ((LA12_9=='='))
													{
														int LA12_10 = input.LA(10);

														if ((LA12_10==']'))
														{
															alt12 = 2;
														}
														else if (((LA12_10>='\u0000' && LA12_10<='\\')||(LA12_10>='^' && LA12_10<='\uFFFF')))
														{
															alt12 = 1;
														}


													}
													else if (((LA12_9>='\u0000' && LA12_9<='<')||(LA12_9>='>' && LA12_9<='\uFFFF')))
													{
														alt12 = 1;
													}


												}
												else if (((LA12_8>='\u0000' && LA12_8<='<')||(LA12_8>='>' && LA12_8<='\uFFFF')))
												{
													alt12 = 1;
												}


											}
											else if (((LA12_7>='\u0000' && LA12_7<='<')||(LA12_7>='>' && LA12_7<='\uFFFF')))
											{
												alt12 = 1;
											}


										}
										else if (((LA12_6>='\u0000' && LA12_6<='<')||(LA12_6>='>' && LA12_6<='\uFFFF')))
										{
											alt12 = 1;
										}


									}
									else if (((LA12_5>='\u0000' && LA12_5<='<')||(LA12_5>='>' && LA12_5<='\uFFFF')))
									{
										alt12 = 1;
									}


								}
								else if (((LA12_4>='\u0000' && LA12_4<='<')||(LA12_4>='>' && LA12_4<='\uFFFF')))
								{
									alt12 = 1;
								}


							}
							else if (((LA12_3>='\u0000' && LA12_3<='<')||(LA12_3>='>' && LA12_3<='\uFFFF')))
							{
								alt12 = 1;
							}


						}
						else if (((LA12_2>='\u0000' && LA12_2<='<')||(LA12_2>='>' && LA12_2<='\uFFFF')))
						{
							alt12 = 1;
						}


					}
					else if (((LA12_1>='\u0000' && LA12_1<='\\')||(LA12_1>='^' && LA12_1<='\uFFFF')))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:225:48: .
						{
						DebugLocation(225, 48);
						MatchAny(); 

						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }

				DebugLocation(225, 53);
				Match("]========]"); 


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:226:7: '[=========[' ( options {greedy=false; } : . )* ']=========]'
				{
				DebugLocation(226, 7);
				Match("[=========["); 

				DebugLocation(226, 21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:226:21: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1==']'))
					{
						int LA13_2 = input.LA(2);

						if ((LA13_2=='='))
						{
							int LA13_3 = input.LA(3);

							if ((LA13_3=='='))
							{
								int LA13_4 = input.LA(4);

								if ((LA13_4=='='))
								{
									int LA13_5 = input.LA(5);

									if ((LA13_5=='='))
									{
										int LA13_6 = input.LA(6);

										if ((LA13_6=='='))
										{
											int LA13_7 = input.LA(7);

											if ((LA13_7=='='))
											{
												int LA13_8 = input.LA(8);

												if ((LA13_8=='='))
												{
													int LA13_9 = input.LA(9);

													if ((LA13_9=='='))
													{
														int LA13_10 = input.LA(10);

														if ((LA13_10=='='))
														{
															int LA13_11 = input.LA(11);

															if ((LA13_11==']'))
															{
																alt13 = 2;
															}
															else if (((LA13_11>='\u0000' && LA13_11<='\\')||(LA13_11>='^' && LA13_11<='\uFFFF')))
															{
																alt13 = 1;
															}


														}
														else if (((LA13_10>='\u0000' && LA13_10<='<')||(LA13_10>='>' && LA13_10<='\uFFFF')))
														{
															alt13 = 1;
														}


													}
													else if (((LA13_9>='\u0000' && LA13_9<='<')||(LA13_9>='>' && LA13_9<='\uFFFF')))
													{
														alt13 = 1;
													}


												}
												else if (((LA13_8>='\u0000' && LA13_8<='<')||(LA13_8>='>' && LA13_8<='\uFFFF')))
												{
													alt13 = 1;
												}


											}
											else if (((LA13_7>='\u0000' && LA13_7<='<')||(LA13_7>='>' && LA13_7<='\uFFFF')))
											{
												alt13 = 1;
											}


										}
										else if (((LA13_6>='\u0000' && LA13_6<='<')||(LA13_6>='>' && LA13_6<='\uFFFF')))
										{
											alt13 = 1;
										}


									}
									else if (((LA13_5>='\u0000' && LA13_5<='<')||(LA13_5>='>' && LA13_5<='\uFFFF')))
									{
										alt13 = 1;
									}


								}
								else if (((LA13_4>='\u0000' && LA13_4<='<')||(LA13_4>='>' && LA13_4<='\uFFFF')))
								{
									alt13 = 1;
								}


							}
							else if (((LA13_3>='\u0000' && LA13_3<='<')||(LA13_3>='>' && LA13_3<='\uFFFF')))
							{
								alt13 = 1;
							}


						}
						else if (((LA13_2>='\u0000' && LA13_2<='<')||(LA13_2>='>' && LA13_2<='\uFFFF')))
						{
							alt13 = 1;
						}


					}
					else if (((LA13_1>='\u0000' && LA13_1<='\\')||(LA13_1>='^' && LA13_1<='\uFFFF')))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:226:49: .
						{
						DebugLocation(226, 49);
						MatchAny(); 

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }

				DebugLocation(226, 54);
				Match("]=========]"); 


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:227:7: '[==========[' ( options {greedy=false; } : . )* ']==========]'
				{
				DebugLocation(227, 7);
				Match("[==========["); 

				DebugLocation(227, 22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:227:22: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_1 = input.LA(1);

					if ((LA14_1==']'))
					{
						int LA14_2 = input.LA(2);

						if ((LA14_2=='='))
						{
							int LA14_3 = input.LA(3);

							if ((LA14_3=='='))
							{
								int LA14_4 = input.LA(4);

								if ((LA14_4=='='))
								{
									int LA14_5 = input.LA(5);

									if ((LA14_5=='='))
									{
										int LA14_6 = input.LA(6);

										if ((LA14_6=='='))
										{
											int LA14_7 = input.LA(7);

											if ((LA14_7=='='))
											{
												int LA14_8 = input.LA(8);

												if ((LA14_8=='='))
												{
													int LA14_9 = input.LA(9);

													if ((LA14_9=='='))
													{
														int LA14_10 = input.LA(10);

														if ((LA14_10=='='))
														{
															int LA14_11 = input.LA(11);

															if ((LA14_11=='='))
															{
																int LA14_12 = input.LA(12);

																if ((LA14_12==']'))
																{
																	alt14 = 2;
																}
																else if (((LA14_12>='\u0000' && LA14_12<='\\')||(LA14_12>='^' && LA14_12<='\uFFFF')))
																{
																	alt14 = 1;
																}


															}
															else if (((LA14_11>='\u0000' && LA14_11<='<')||(LA14_11>='>' && LA14_11<='\uFFFF')))
															{
																alt14 = 1;
															}


														}
														else if (((LA14_10>='\u0000' && LA14_10<='<')||(LA14_10>='>' && LA14_10<='\uFFFF')))
														{
															alt14 = 1;
														}


													}
													else if (((LA14_9>='\u0000' && LA14_9<='<')||(LA14_9>='>' && LA14_9<='\uFFFF')))
													{
														alt14 = 1;
													}


												}
												else if (((LA14_8>='\u0000' && LA14_8<='<')||(LA14_8>='>' && LA14_8<='\uFFFF')))
												{
													alt14 = 1;
												}


											}
											else if (((LA14_7>='\u0000' && LA14_7<='<')||(LA14_7>='>' && LA14_7<='\uFFFF')))
											{
												alt14 = 1;
											}


										}
										else if (((LA14_6>='\u0000' && LA14_6<='<')||(LA14_6>='>' && LA14_6<='\uFFFF')))
										{
											alt14 = 1;
										}


									}
									else if (((LA14_5>='\u0000' && LA14_5<='<')||(LA14_5>='>' && LA14_5<='\uFFFF')))
									{
										alt14 = 1;
									}


								}
								else if (((LA14_4>='\u0000' && LA14_4<='<')||(LA14_4>='>' && LA14_4<='\uFFFF')))
								{
									alt14 = 1;
								}


							}
							else if (((LA14_3>='\u0000' && LA14_3<='<')||(LA14_3>='>' && LA14_3<='\uFFFF')))
							{
								alt14 = 1;
							}


						}
						else if (((LA14_2>='\u0000' && LA14_2<='<')||(LA14_2>='>' && LA14_2<='\uFFFF')))
						{
							alt14 = 1;
						}


					}
					else if (((LA14_1>='\u0000' && LA14_1<='\\')||(LA14_1>='^' && LA14_1<='\uFFFF')))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch ( alt14 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:227:50: .
						{
						DebugLocation(227, 50);
						MatchAny(); 

						}
						break;

					default:
						goto loop14;
					}
				}

				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(227, 55);
				Match("]==========]"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LONGSTRING", 53);
			LeaveRule("LONGSTRING", 53);
			LeaveRule_LONGSTRING();
		}
	}
	// $ANTLR end "LONGSTRING"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 54);
		TraceIn("INT", 54);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:231:5: ( ( Digit )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:231:7: ( Digit )+
			{
			DebugLocation(231, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:231:7: ( Digit )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if (((LA16_1>='0' && LA16_1<='9')))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(231, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 54);
			LeaveRule("INT", 54);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_HEX();
	partial void LeaveRule_HEX();

	// $ANTLR start "HEX"
	[GrammarRule("HEX")]
	private void mHEX()
	{
		EnterRule_HEX();
		EnterRule("HEX", 55);
		TraceIn("HEX", 55);
		try
		{
			int _type = HEX;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:235:5: ( '0' ( 'x' | 'X' ) ( HexDigit )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:235:7: '0' ( 'x' | 'X' ) ( HexDigit )+
			{
			DebugLocation(235, 7);
			Match('0'); 
			DebugLocation(235, 11);
			if (input.LA(1)=='X'||input.LA(1)=='x')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(235, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:235:21: ( HexDigit )+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if (((LA17_1>='0' && LA17_1<='9')||(LA17_1>='A' && LA17_1<='F')||(LA17_1>='a' && LA17_1<='f')))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(235, 21);
					input.Consume();


					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HEX", 55);
			LeaveRule("HEX", 55);
			LeaveRule_HEX();
		}
	}
	// $ANTLR end "HEX"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 56);
		TraceIn("FLOAT", 56);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:239:5: ( ( Digit )+ '.' ( Digit )* ( ExponentPart )? | '.' ( Digit )+ ( ExponentPart )? | ( Digit )+ ExponentPart )
			int alt24=3;
			try { DebugEnterDecision(24, false);
			try
			{
				alt24 = dfa24.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:239:7: ( Digit )+ '.' ( Digit )* ( ExponentPart )?
				{
				DebugLocation(239, 7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:239:7: ( Digit )+
				int cnt18=0;
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_1 = input.LA(1);

					if (((LA18_1>='0' && LA18_1<='9')))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
						{
						DebugLocation(239, 7);
						input.Consume();


						}
						break;

					default:
						if (cnt18 >= 1)
							goto loop18;

						EarlyExitException eee18 = new EarlyExitException( 18, input );
						DebugRecognitionException(eee18);
						throw eee18;
					}
					cnt18++;
				}
				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(239, 14);
				Match('.'); 
				DebugLocation(239, 18);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:239:18: ( Digit )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_1 = input.LA(1);

					if (((LA19_1>='0' && LA19_1<='9')))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
						{
						DebugLocation(239, 18);
						input.Consume();


						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(239, 25);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:239:25: ( ExponentPart )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1=='E'||LA20_1=='e'))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:239:25: ExponentPart
					{
					DebugLocation(239, 25);
					mExponentPart(); 

					}
					break;

				}
				} finally { DebugExitSubRule(20); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:240:7: '.' ( Digit )+ ( ExponentPart )?
				{
				DebugLocation(240, 7);
				Match('.'); 
				DebugLocation(240, 11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:240:11: ( Digit )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_1 = input.LA(1);

					if (((LA21_1>='0' && LA21_1<='9')))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
						{
						DebugLocation(240, 11);
						input.Consume();


						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(240, 18);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:240:18: ( ExponentPart )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1=='E'||LA22_1=='e'))
				{
					alt22 = 1;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:240:18: ExponentPart
					{
					DebugLocation(240, 18);
					mExponentPart(); 

					}
					break;

				}
				} finally { DebugExitSubRule(22); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:241:7: ( Digit )+ ExponentPart
				{
				DebugLocation(241, 7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:241:7: ( Digit )+
				int cnt23=0;
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_1 = input.LA(1);

					if (((LA23_1>='0' && LA23_1<='9')))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch (alt23)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
						{
						DebugLocation(241, 7);
						input.Consume();


						}
						break;

					default:
						if (cnt23 >= 1)
							goto loop23;

						EarlyExitException eee23 = new EarlyExitException( 23, input );
						DebugRecognitionException(eee23);
						throw eee23;
					}
					cnt23++;
				}
				loop23:
					;

				} finally { DebugExitSubRule(23); }

				DebugLocation(241, 14);
				mExponentPart(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 56);
			LeaveRule("FLOAT", 56);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_HEX_FLOAT();
	partial void LeaveRule_HEX_FLOAT();

	// $ANTLR start "HEX_FLOAT"
	[GrammarRule("HEX_FLOAT")]
	private void mHEX_FLOAT()
	{
		EnterRule_HEX_FLOAT();
		EnterRule("HEX_FLOAT", 57);
		TraceIn("HEX_FLOAT", 57);
		try
		{
			int _type = HEX_FLOAT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:245:5: ( '0' ( 'x' | 'X' ) ( HexDigit )+ '.' ( HexDigit )* ( HexExponentPart )? | '0' ( 'x' | 'X' ) '.' ( HexDigit )+ ( HexExponentPart )? | '0' ( 'x' | 'X' ) ( HexDigit )+ HexExponentPart )
			int alt31=3;
			try { DebugEnterDecision(31, false);
			try
			{
				alt31 = dfa31.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:245:7: '0' ( 'x' | 'X' ) ( HexDigit )+ '.' ( HexDigit )* ( HexExponentPart )?
				{
				DebugLocation(245, 7);
				Match('0'); 
				DebugLocation(245, 11);
				input.Consume();

				DebugLocation(245, 21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:245:21: ( HexDigit )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_1 = input.LA(1);

					if (((LA25_1>='0' && LA25_1<='9')||(LA25_1>='A' && LA25_1<='F')||(LA25_1>='a' && LA25_1<='f')))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
						{
						DebugLocation(245, 21);
						input.Consume();


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(245, 31);
				Match('.'); 
				DebugLocation(245, 35);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:245:35: ( HexDigit )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_1 = input.LA(1);

					if (((LA26_1>='0' && LA26_1<='9')||(LA26_1>='A' && LA26_1<='F')||(LA26_1>='a' && LA26_1<='f')))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
						{
						DebugLocation(245, 35);
						input.Consume();


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(245, 45);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:245:45: ( HexExponentPart )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1=='P'||LA27_1=='p'))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:245:45: HexExponentPart
					{
					DebugLocation(245, 45);
					mHexExponentPart(); 

					}
					break;

				}
				} finally { DebugExitSubRule(27); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:246:7: '0' ( 'x' | 'X' ) '.' ( HexDigit )+ ( HexExponentPart )?
				{
				DebugLocation(246, 7);
				Match('0'); 
				DebugLocation(246, 11);
				input.Consume();

				DebugLocation(246, 21);
				Match('.'); 
				DebugLocation(246, 25);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:246:25: ( HexDigit )+
				int cnt28=0;
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_1 = input.LA(1);

					if (((LA28_1>='0' && LA28_1<='9')||(LA28_1>='A' && LA28_1<='F')||(LA28_1>='a' && LA28_1<='f')))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
						{
						DebugLocation(246, 25);
						input.Consume();


						}
						break;

					default:
						if (cnt28 >= 1)
							goto loop28;

						EarlyExitException eee28 = new EarlyExitException( 28, input );
						DebugRecognitionException(eee28);
						throw eee28;
					}
					cnt28++;
				}
				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(246, 35);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:246:35: ( HexExponentPart )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1=='P'||LA29_1=='p'))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:246:35: HexExponentPart
					{
					DebugLocation(246, 35);
					mHexExponentPart(); 

					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:247:7: '0' ( 'x' | 'X' ) ( HexDigit )+ HexExponentPart
				{
				DebugLocation(247, 7);
				Match('0'); 
				DebugLocation(247, 11);
				input.Consume();

				DebugLocation(247, 21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:247:21: ( HexDigit )+
				int cnt30=0;
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_1 = input.LA(1);

					if (((LA30_1>='0' && LA30_1<='9')||(LA30_1>='A' && LA30_1<='F')||(LA30_1>='a' && LA30_1<='f')))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
						{
						DebugLocation(247, 21);
						input.Consume();


						}
						break;

					default:
						if (cnt30 >= 1)
							goto loop30;

						EarlyExitException eee30 = new EarlyExitException( 30, input );
						DebugRecognitionException(eee30);
						throw eee30;
					}
					cnt30++;
				}
				loop30:
					;

				} finally { DebugExitSubRule(30); }

				DebugLocation(247, 31);
				mHexExponentPart(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HEX_FLOAT", 57);
			LeaveRule("HEX_FLOAT", 57);
			LeaveRule_HEX_FLOAT();
		}
	}
	// $ANTLR end "HEX_FLOAT"

	partial void EnterRule_ExponentPart();
	partial void LeaveRule_ExponentPart();

	// $ANTLR start "ExponentPart"
	[GrammarRule("ExponentPart")]
	private void mExponentPart()
	{
		EnterRule_ExponentPart();
		EnterRule("ExponentPart", 58);
		TraceIn("ExponentPart", 58);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:253:5: ( ( 'e' | 'E' ) ( '+' | '-' )? ( Digit )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:253:7: ( 'e' | 'E' ) ( '+' | '-' )? ( Digit )+
			{
			DebugLocation(253, 7);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(253, 17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:253:17: ( '+' | '-' )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1=='+'||LA32_1=='-'))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
				{
				DebugLocation(253, 17);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(253, 28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:253:28: ( Digit )+
			int cnt33=0;
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if (((LA33_1>='0' && LA33_1<='9')))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(253, 28);
					input.Consume();


					}
					break;

				default:
					if (cnt33 >= 1)
						goto loop33;

					EarlyExitException eee33 = new EarlyExitException( 33, input );
					DebugRecognitionException(eee33);
					throw eee33;
				}
				cnt33++;
			}
			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

		}
		finally
		{
			TraceOut("ExponentPart", 58);
			LeaveRule("ExponentPart", 58);
			LeaveRule_ExponentPart();
		}
	}
	// $ANTLR end "ExponentPart"

	partial void EnterRule_HexExponentPart();
	partial void LeaveRule_HexExponentPart();

	// $ANTLR start "HexExponentPart"
	[GrammarRule("HexExponentPart")]
	private void mHexExponentPart()
	{
		EnterRule_HexExponentPart();
		EnterRule("HexExponentPart", 59);
		TraceIn("HexExponentPart", 59);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:258:5: ( ( 'p' | 'P' ) ( '+' | '-' )? ( Digit )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:258:7: ( 'p' | 'P' ) ( '+' | '-' )? ( Digit )+
			{
			DebugLocation(258, 7);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(258, 17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:258:17: ( '+' | '-' )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1=='+'||LA34_1=='-'))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
				{
				DebugLocation(258, 17);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(258, 28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:258:28: ( Digit )+
			int cnt35=0;
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if (((LA35_1>='0' && LA35_1<='9')))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(258, 28);
					input.Consume();


					}
					break;

				default:
					if (cnt35 >= 1)
						goto loop35;

					EarlyExitException eee35 = new EarlyExitException( 35, input );
					DebugRecognitionException(eee35);
					throw eee35;
				}
				cnt35++;
			}
			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

		}
		finally
		{
			TraceOut("HexExponentPart", 59);
			LeaveRule("HexExponentPart", 59);
			LeaveRule_HexExponentPart();
		}
	}
	// $ANTLR end "HexExponentPart"

	partial void EnterRule_EscapeSequence();
	partial void LeaveRule_EscapeSequence();

	// $ANTLR start "EscapeSequence"
	[GrammarRule("EscapeSequence")]
	private void mEscapeSequence()
	{
		EnterRule_EscapeSequence();
		EnterRule("EscapeSequence", 60);
		TraceIn("EscapeSequence", 60);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:263:5: ( '\\\\' ( 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | 'z' | '\\\"' | '\\'' | '\\\\' ) | '\\\\' ( '\\r' )? '\\n' | DecimalEscape | HexEscape )
			int alt37=4;
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'a':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
				case 'v':
				case 'z':
					{
					alt37 = 1;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					{
					alt37 = 3;
					}
					break;
				case 'x':
					{
					alt37 = 4;
					}
					break;
				case '\n':
				case '\r':
					{
					alt37 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 37, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:263:7: '\\\\' ( 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | 'z' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(263, 7);
				Match('\\'); 
				DebugLocation(263, 12);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:264:4: '\\\\' ( '\\r' )? '\\n'
				{
				DebugLocation(264, 4);
				Match('\\'); 
				DebugLocation(264, 9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:264:9: ( '\\r' )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1=='\r'))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:264:9: '\\r'
					{
					DebugLocation(264, 9);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(36); }

				DebugLocation(264, 15);
				Match('\n'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:265:7: DecimalEscape
				{
				DebugLocation(265, 7);
				mDecimalEscape(); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:266:7: HexEscape
				{
				DebugLocation(266, 7);
				mHexEscape(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("EscapeSequence", 60);
			LeaveRule("EscapeSequence", 60);
			LeaveRule_EscapeSequence();
		}
	}
	// $ANTLR end "EscapeSequence"

	partial void EnterRule_DecimalEscape();
	partial void LeaveRule_DecimalEscape();

	// $ANTLR start "DecimalEscape"
	[GrammarRule("DecimalEscape")]
	private void mDecimalEscape()
	{
		EnterRule_DecimalEscape();
		EnterRule("DecimalEscape", 61);
		TraceIn("DecimalEscape", 61);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:271:5: ( '\\\\' Digit | '\\\\' Digit Digit | '\\\\' '0' .. '2' Digit Digit )
			int alt38=3;
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1=='\\'))
			{
				int LA38_2 = input.LA(2);

				if (((LA38_2>='0' && LA38_2<='2')))
				{
					int LA38_3 = input.LA(3);

					if (((LA38_3>='0' && LA38_3<='9')))
					{
						int LA38_4 = input.LA(4);

						if (((LA38_4>='0' && LA38_4<='9')))
						{
							alt38 = 3;
						}
						else
						{
							alt38 = 2;
						}
					}
					else
					{
						alt38 = 1;
					}
				}
				else if (((LA38_2>='3' && LA38_2<='9')))
				{
					int LA38_3 = input.LA(3);

					if (((LA38_3>='0' && LA38_3<='9')))
					{
						alt38 = 2;
					}
					else
					{
						alt38 = 1;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 38, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:271:7: '\\\\' Digit
				{
				DebugLocation(271, 7);
				Match('\\'); 
				DebugLocation(271, 12);
				mDigit(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:272:7: '\\\\' Digit Digit
				{
				DebugLocation(272, 7);
				Match('\\'); 
				DebugLocation(272, 12);
				mDigit(); 
				DebugLocation(272, 18);
				mDigit(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:273:7: '\\\\' '0' .. '2' Digit Digit
				{
				DebugLocation(273, 7);
				Match('\\'); 
				DebugLocation(273, 15);
				MatchRange('0','2'); 
				DebugLocation(273, 21);
				mDigit(); 
				DebugLocation(273, 27);
				mDigit(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("DecimalEscape", 61);
			LeaveRule("DecimalEscape", 61);
			LeaveRule_DecimalEscape();
		}
	}
	// $ANTLR end "DecimalEscape"

	partial void EnterRule_HexEscape();
	partial void LeaveRule_HexEscape();

	// $ANTLR start "HexEscape"
	[GrammarRule("HexEscape")]
	private void mHexEscape()
	{
		EnterRule_HexEscape();
		EnterRule("HexEscape", 62);
		TraceIn("HexEscape", 62);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:278:5: ( '\\\\' 'x' HexDigit HexDigit )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:278:7: '\\\\' 'x' HexDigit HexDigit
			{
			DebugLocation(278, 7);
			Match('\\'); 
			DebugLocation(278, 12);
			Match('x'); 
			DebugLocation(278, 16);
			mHexDigit(); 
			DebugLocation(278, 25);
			mHexDigit(); 

			}

		}
		finally
		{
			TraceOut("HexEscape", 62);
			LeaveRule("HexEscape", 62);
			LeaveRule_HexEscape();
		}
	}
	// $ANTLR end "HexEscape"

	partial void EnterRule_Digit();
	partial void LeaveRule_Digit();

	// $ANTLR start "Digit"
	[GrammarRule("Digit")]
	private void mDigit()
	{
		EnterRule_Digit();
		EnterRule("Digit", 63);
		TraceIn("Digit", 63);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:283:5: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
			{
			DebugLocation(283, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("Digit", 63);
			LeaveRule("Digit", 63);
			LeaveRule_Digit();
		}
	}
	// $ANTLR end "Digit"

	partial void EnterRule_HexDigit();
	partial void LeaveRule_HexDigit();

	// $ANTLR start "HexDigit"
	[GrammarRule("HexDigit")]
	private void mHexDigit()
	{
		EnterRule_HexDigit();
		EnterRule("HexDigit", 64);
		TraceIn("HexDigit", 64);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:288:5: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
			{
			DebugLocation(288, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HexDigit", 64);
			LeaveRule("HexDigit", 64);
			LeaveRule_HexDigit();
		}
	}
	// $ANTLR end "HexDigit"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 65);
		TraceIn("COMMENT", 65);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:291:5: ( '--' ( '[[' ( options {greedy=false; } : . )* ']]' | '[=[' ( options {greedy=false; } : . )* ']=]' | '[==[' ( options {greedy=false; } : . )* ']==]' | '[===[' ( options {greedy=false; } : . )* ']===]' | '[====[' ( options {greedy=false; } : . )* ']====]' | '[=====[' ( options {greedy=false; } : . )* ']=====]' | '[======[' ( options {greedy=false; } : . )* ']======]' | '[=======[' ( options {greedy=false; } : . )* ']=======]' | '[========[' ( options {greedy=false; } : . )* ']========]' | '[=========[' ( options {greedy=false; } : . )* ']=========]' | '[==========[' ( options {greedy=false; } : . )* ']==========]' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:291:7: '--' ( '[[' ( options {greedy=false; } : . )* ']]' | '[=[' ( options {greedy=false; } : . )* ']=]' | '[==[' ( options {greedy=false; } : . )* ']==]' | '[===[' ( options {greedy=false; } : . )* ']===]' | '[====[' ( options {greedy=false; } : . )* ']====]' | '[=====[' ( options {greedy=false; } : . )* ']=====]' | '[======[' ( options {greedy=false; } : . )* ']======]' | '[=======[' ( options {greedy=false; } : . )* ']=======]' | '[========[' ( options {greedy=false; } : . )* ']========]' | '[=========[' ( options {greedy=false; } : . )* ']=========]' | '[==========[' ( options {greedy=false; } : . )* ']==========]' )
			{
			DebugLocation(291, 7);
			Match("--"); 

			DebugLocation(292, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:292:2: ( '[[' ( options {greedy=false; } : . )* ']]' | '[=[' ( options {greedy=false; } : . )* ']=]' | '[==[' ( options {greedy=false; } : . )* ']==]' | '[===[' ( options {greedy=false; } : . )* ']===]' | '[====[' ( options {greedy=false; } : . )* ']====]' | '[=====[' ( options {greedy=false; } : . )* ']=====]' | '[======[' ( options {greedy=false; } : . )* ']======]' | '[=======[' ( options {greedy=false; } : . )* ']=======]' | '[========[' ( options {greedy=false; } : . )* ']========]' | '[=========[' ( options {greedy=false; } : . )* ']=========]' | '[==========[' ( options {greedy=false; } : . )* ']==========]' )
			int alt50=11;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1=='['))
			{
				int LA50_2 = input.LA(2);

				if ((LA50_2=='['))
				{
					alt50 = 1;
				}
				else if ((LA50_2=='='))
				{
					int LA50_3 = input.LA(3);

					if ((LA50_3=='['))
					{
						alt50 = 2;
					}
					else if ((LA50_3=='='))
					{
						int LA50_4 = input.LA(4);

						if ((LA50_4=='['))
						{
							alt50 = 3;
						}
						else if ((LA50_4=='='))
						{
							int LA50_5 = input.LA(5);

							if ((LA50_5=='['))
							{
								alt50 = 4;
							}
							else if ((LA50_5=='='))
							{
								int LA50_6 = input.LA(6);

								if ((LA50_6=='['))
								{
									alt50 = 5;
								}
								else if ((LA50_6=='='))
								{
									int LA50_7 = input.LA(7);

									if ((LA50_7=='['))
									{
										alt50 = 6;
									}
									else if ((LA50_7=='='))
									{
										int LA50_8 = input.LA(8);

										if ((LA50_8=='['))
										{
											alt50 = 7;
										}
										else if ((LA50_8=='='))
										{
											int LA50_9 = input.LA(9);

											if ((LA50_9=='['))
											{
												alt50 = 8;
											}
											else if ((LA50_9=='='))
											{
												int LA50_10 = input.LA(10);

												if ((LA50_10=='['))
												{
													alt50 = 9;
												}
												else if ((LA50_10=='='))
												{
													int LA50_11 = input.LA(11);

													if ((LA50_11=='['))
													{
														alt50 = 10;
													}
													else if ((LA50_11=='='))
													{
														alt50 = 11;
													}
													else
													{
														NoViableAltException nvae = new NoViableAltException("", 50, 19, input, 11);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 50, 17, input, 10);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 50, 15, input, 9);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 50, 13, input, 8);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 50, 11, input, 7);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 50, 9, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 50, 7, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 50, 5, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 50, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 50, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:292:4: '[[' ( options {greedy=false; } : . )* ']]'
				{
				DebugLocation(292, 4);
				Match("[["); 

				DebugLocation(292, 9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:292:9: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					int LA39_1 = input.LA(1);

					if ((LA39_1==']'))
					{
						int LA39_2 = input.LA(2);

						if ((LA39_2==']'))
						{
							alt39 = 2;
						}
						else if (((LA39_2>='\u0000' && LA39_2<='\\')||(LA39_2>='^' && LA39_2<='\uFFFF')))
						{
							alt39 = 1;
						}


					}
					else if (((LA39_1>='\u0000' && LA39_1<='\\')||(LA39_1>='^' && LA39_1<='\uFFFF')))
					{
						alt39 = 1;
					}


					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:292:37: .
						{
						DebugLocation(292, 37);
						MatchAny(); 

						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(292, 42);
				Match("]]"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:293:7: '[=[' ( options {greedy=false; } : . )* ']=]'
				{
				DebugLocation(293, 7);
				Match("[=["); 

				DebugLocation(293, 13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:293:13: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_1 = input.LA(1);

					if ((LA40_1==']'))
					{
						int LA40_2 = input.LA(2);

						if ((LA40_2=='='))
						{
							int LA40_3 = input.LA(3);

							if ((LA40_3==']'))
							{
								alt40 = 2;
							}
							else if (((LA40_3>='\u0000' && LA40_3<='\\')||(LA40_3>='^' && LA40_3<='\uFFFF')))
							{
								alt40 = 1;
							}


						}
						else if (((LA40_2>='\u0000' && LA40_2<='<')||(LA40_2>='>' && LA40_2<='\uFFFF')))
						{
							alt40 = 1;
						}


					}
					else if (((LA40_1>='\u0000' && LA40_1<='\\')||(LA40_1>='^' && LA40_1<='\uFFFF')))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:293:41: .
						{
						DebugLocation(293, 41);
						MatchAny(); 

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(293, 46);
				Match("]=]"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:294:7: '[==[' ( options {greedy=false; } : . )* ']==]'
				{
				DebugLocation(294, 7);
				Match("[==["); 

				DebugLocation(294, 14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:294:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					int LA41_1 = input.LA(1);

					if ((LA41_1==']'))
					{
						int LA41_2 = input.LA(2);

						if ((LA41_2=='='))
						{
							int LA41_3 = input.LA(3);

							if ((LA41_3=='='))
							{
								int LA41_4 = input.LA(4);

								if ((LA41_4==']'))
								{
									alt41 = 2;
								}
								else if (((LA41_4>='\u0000' && LA41_4<='\\')||(LA41_4>='^' && LA41_4<='\uFFFF')))
								{
									alt41 = 1;
								}


							}
							else if (((LA41_3>='\u0000' && LA41_3<='<')||(LA41_3>='>' && LA41_3<='\uFFFF')))
							{
								alt41 = 1;
							}


						}
						else if (((LA41_2>='\u0000' && LA41_2<='<')||(LA41_2>='>' && LA41_2<='\uFFFF')))
						{
							alt41 = 1;
						}


					}
					else if (((LA41_1>='\u0000' && LA41_1<='\\')||(LA41_1>='^' && LA41_1<='\uFFFF')))
					{
						alt41 = 1;
					}


					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:294:42: .
						{
						DebugLocation(294, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(294, 47);
				Match("]==]"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:295:7: '[===[' ( options {greedy=false; } : . )* ']===]'
				{
				DebugLocation(295, 7);
				Match("[===["); 

				DebugLocation(295, 15);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:295:15: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_1 = input.LA(1);

					if ((LA42_1==']'))
					{
						int LA42_2 = input.LA(2);

						if ((LA42_2=='='))
						{
							int LA42_3 = input.LA(3);

							if ((LA42_3=='='))
							{
								int LA42_4 = input.LA(4);

								if ((LA42_4=='='))
								{
									int LA42_5 = input.LA(5);

									if ((LA42_5==']'))
									{
										alt42 = 2;
									}
									else if (((LA42_5>='\u0000' && LA42_5<='\\')||(LA42_5>='^' && LA42_5<='\uFFFF')))
									{
										alt42 = 1;
									}


								}
								else if (((LA42_4>='\u0000' && LA42_4<='<')||(LA42_4>='>' && LA42_4<='\uFFFF')))
								{
									alt42 = 1;
								}


							}
							else if (((LA42_3>='\u0000' && LA42_3<='<')||(LA42_3>='>' && LA42_3<='\uFFFF')))
							{
								alt42 = 1;
							}


						}
						else if (((LA42_2>='\u0000' && LA42_2<='<')||(LA42_2>='>' && LA42_2<='\uFFFF')))
						{
							alt42 = 1;
						}


					}
					else if (((LA42_1>='\u0000' && LA42_1<='\\')||(LA42_1>='^' && LA42_1<='\uFFFF')))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch ( alt42 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:295:43: .
						{
						DebugLocation(295, 43);
						MatchAny(); 

						}
						break;

					default:
						goto loop42;
					}
				}

				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(295, 48);
				Match("]===]"); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:296:7: '[====[' ( options {greedy=false; } : . )* ']====]'
				{
				DebugLocation(296, 7);
				Match("[====["); 

				DebugLocation(296, 16);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:296:16: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_1 = input.LA(1);

					if ((LA43_1==']'))
					{
						int LA43_2 = input.LA(2);

						if ((LA43_2=='='))
						{
							int LA43_3 = input.LA(3);

							if ((LA43_3=='='))
							{
								int LA43_4 = input.LA(4);

								if ((LA43_4=='='))
								{
									int LA43_5 = input.LA(5);

									if ((LA43_5=='='))
									{
										int LA43_6 = input.LA(6);

										if ((LA43_6==']'))
										{
											alt43 = 2;
										}
										else if (((LA43_6>='\u0000' && LA43_6<='\\')||(LA43_6>='^' && LA43_6<='\uFFFF')))
										{
											alt43 = 1;
										}


									}
									else if (((LA43_5>='\u0000' && LA43_5<='<')||(LA43_5>='>' && LA43_5<='\uFFFF')))
									{
										alt43 = 1;
									}


								}
								else if (((LA43_4>='\u0000' && LA43_4<='<')||(LA43_4>='>' && LA43_4<='\uFFFF')))
								{
									alt43 = 1;
								}


							}
							else if (((LA43_3>='\u0000' && LA43_3<='<')||(LA43_3>='>' && LA43_3<='\uFFFF')))
							{
								alt43 = 1;
							}


						}
						else if (((LA43_2>='\u0000' && LA43_2<='<')||(LA43_2>='>' && LA43_2<='\uFFFF')))
						{
							alt43 = 1;
						}


					}
					else if (((LA43_1>='\u0000' && LA43_1<='\\')||(LA43_1>='^' && LA43_1<='\uFFFF')))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:296:44: .
						{
						DebugLocation(296, 44);
						MatchAny(); 

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(296, 49);
				Match("]====]"); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:297:7: '[=====[' ( options {greedy=false; } : . )* ']=====]'
				{
				DebugLocation(297, 7);
				Match("[=====["); 

				DebugLocation(297, 17);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:297:17: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(44);
				while (true)
				{
					int alt44=2;
					try { DebugEnterDecision(44, false);
					int LA44_1 = input.LA(1);

					if ((LA44_1==']'))
					{
						int LA44_2 = input.LA(2);

						if ((LA44_2=='='))
						{
							int LA44_3 = input.LA(3);

							if ((LA44_3=='='))
							{
								int LA44_4 = input.LA(4);

								if ((LA44_4=='='))
								{
									int LA44_5 = input.LA(5);

									if ((LA44_5=='='))
									{
										int LA44_6 = input.LA(6);

										if ((LA44_6=='='))
										{
											int LA44_7 = input.LA(7);

											if ((LA44_7==']'))
											{
												alt44 = 2;
											}
											else if (((LA44_7>='\u0000' && LA44_7<='\\')||(LA44_7>='^' && LA44_7<='\uFFFF')))
											{
												alt44 = 1;
											}


										}
										else if (((LA44_6>='\u0000' && LA44_6<='<')||(LA44_6>='>' && LA44_6<='\uFFFF')))
										{
											alt44 = 1;
										}


									}
									else if (((LA44_5>='\u0000' && LA44_5<='<')||(LA44_5>='>' && LA44_5<='\uFFFF')))
									{
										alt44 = 1;
									}


								}
								else if (((LA44_4>='\u0000' && LA44_4<='<')||(LA44_4>='>' && LA44_4<='\uFFFF')))
								{
									alt44 = 1;
								}


							}
							else if (((LA44_3>='\u0000' && LA44_3<='<')||(LA44_3>='>' && LA44_3<='\uFFFF')))
							{
								alt44 = 1;
							}


						}
						else if (((LA44_2>='\u0000' && LA44_2<='<')||(LA44_2>='>' && LA44_2<='\uFFFF')))
						{
							alt44 = 1;
						}


					}
					else if (((LA44_1>='\u0000' && LA44_1<='\\')||(LA44_1>='^' && LA44_1<='\uFFFF')))
					{
						alt44 = 1;
					}


					} finally { DebugExitDecision(44); }
					switch ( alt44 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:297:45: .
						{
						DebugLocation(297, 45);
						MatchAny(); 

						}
						break;

					default:
						goto loop44;
					}
				}

				loop44:
					;

				} finally { DebugExitSubRule(44); }

				DebugLocation(297, 50);
				Match("]=====]"); 


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:298:7: '[======[' ( options {greedy=false; } : . )* ']======]'
				{
				DebugLocation(298, 7);
				Match("[======["); 

				DebugLocation(298, 18);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:298:18: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_1 = input.LA(1);

					if ((LA45_1==']'))
					{
						int LA45_2 = input.LA(2);

						if ((LA45_2=='='))
						{
							int LA45_3 = input.LA(3);

							if ((LA45_3=='='))
							{
								int LA45_4 = input.LA(4);

								if ((LA45_4=='='))
								{
									int LA45_5 = input.LA(5);

									if ((LA45_5=='='))
									{
										int LA45_6 = input.LA(6);

										if ((LA45_6=='='))
										{
											int LA45_7 = input.LA(7);

											if ((LA45_7=='='))
											{
												int LA45_8 = input.LA(8);

												if ((LA45_8==']'))
												{
													alt45 = 2;
												}
												else if (((LA45_8>='\u0000' && LA45_8<='\\')||(LA45_8>='^' && LA45_8<='\uFFFF')))
												{
													alt45 = 1;
												}


											}
											else if (((LA45_7>='\u0000' && LA45_7<='<')||(LA45_7>='>' && LA45_7<='\uFFFF')))
											{
												alt45 = 1;
											}


										}
										else if (((LA45_6>='\u0000' && LA45_6<='<')||(LA45_6>='>' && LA45_6<='\uFFFF')))
										{
											alt45 = 1;
										}


									}
									else if (((LA45_5>='\u0000' && LA45_5<='<')||(LA45_5>='>' && LA45_5<='\uFFFF')))
									{
										alt45 = 1;
									}


								}
								else if (((LA45_4>='\u0000' && LA45_4<='<')||(LA45_4>='>' && LA45_4<='\uFFFF')))
								{
									alt45 = 1;
								}


							}
							else if (((LA45_3>='\u0000' && LA45_3<='<')||(LA45_3>='>' && LA45_3<='\uFFFF')))
							{
								alt45 = 1;
							}


						}
						else if (((LA45_2>='\u0000' && LA45_2<='<')||(LA45_2>='>' && LA45_2<='\uFFFF')))
						{
							alt45 = 1;
						}


					}
					else if (((LA45_1>='\u0000' && LA45_1<='\\')||(LA45_1>='^' && LA45_1<='\uFFFF')))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:298:46: .
						{
						DebugLocation(298, 46);
						MatchAny(); 

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }

				DebugLocation(298, 51);
				Match("]======]"); 


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:299:7: '[=======[' ( options {greedy=false; } : . )* ']=======]'
				{
				DebugLocation(299, 7);
				Match("[=======["); 

				DebugLocation(299, 19);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:299:19: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, false);
					int LA46_1 = input.LA(1);

					if ((LA46_1==']'))
					{
						int LA46_2 = input.LA(2);

						if ((LA46_2=='='))
						{
							int LA46_3 = input.LA(3);

							if ((LA46_3=='='))
							{
								int LA46_4 = input.LA(4);

								if ((LA46_4=='='))
								{
									int LA46_5 = input.LA(5);

									if ((LA46_5=='='))
									{
										int LA46_6 = input.LA(6);

										if ((LA46_6=='='))
										{
											int LA46_7 = input.LA(7);

											if ((LA46_7=='='))
											{
												int LA46_8 = input.LA(8);

												if ((LA46_8=='='))
												{
													int LA46_9 = input.LA(9);

													if ((LA46_9==']'))
													{
														alt46 = 2;
													}
													else if (((LA46_9>='\u0000' && LA46_9<='\\')||(LA46_9>='^' && LA46_9<='\uFFFF')))
													{
														alt46 = 1;
													}


												}
												else if (((LA46_8>='\u0000' && LA46_8<='<')||(LA46_8>='>' && LA46_8<='\uFFFF')))
												{
													alt46 = 1;
												}


											}
											else if (((LA46_7>='\u0000' && LA46_7<='<')||(LA46_7>='>' && LA46_7<='\uFFFF')))
											{
												alt46 = 1;
											}


										}
										else if (((LA46_6>='\u0000' && LA46_6<='<')||(LA46_6>='>' && LA46_6<='\uFFFF')))
										{
											alt46 = 1;
										}


									}
									else if (((LA46_5>='\u0000' && LA46_5<='<')||(LA46_5>='>' && LA46_5<='\uFFFF')))
									{
										alt46 = 1;
									}


								}
								else if (((LA46_4>='\u0000' && LA46_4<='<')||(LA46_4>='>' && LA46_4<='\uFFFF')))
								{
									alt46 = 1;
								}


							}
							else if (((LA46_3>='\u0000' && LA46_3<='<')||(LA46_3>='>' && LA46_3<='\uFFFF')))
							{
								alt46 = 1;
							}


						}
						else if (((LA46_2>='\u0000' && LA46_2<='<')||(LA46_2>='>' && LA46_2<='\uFFFF')))
						{
							alt46 = 1;
						}


					}
					else if (((LA46_1>='\u0000' && LA46_1<='\\')||(LA46_1>='^' && LA46_1<='\uFFFF')))
					{
						alt46 = 1;
					}


					} finally { DebugExitDecision(46); }
					switch ( alt46 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:299:47: .
						{
						DebugLocation(299, 47);
						MatchAny(); 

						}
						break;

					default:
						goto loop46;
					}
				}

				loop46:
					;

				} finally { DebugExitSubRule(46); }

				DebugLocation(299, 52);
				Match("]=======]"); 


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:300:7: '[========[' ( options {greedy=false; } : . )* ']========]'
				{
				DebugLocation(300, 7);
				Match("[========["); 

				DebugLocation(300, 20);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:300:20: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_1 = input.LA(1);

					if ((LA47_1==']'))
					{
						int LA47_2 = input.LA(2);

						if ((LA47_2=='='))
						{
							int LA47_3 = input.LA(3);

							if ((LA47_3=='='))
							{
								int LA47_4 = input.LA(4);

								if ((LA47_4=='='))
								{
									int LA47_5 = input.LA(5);

									if ((LA47_5=='='))
									{
										int LA47_6 = input.LA(6);

										if ((LA47_6=='='))
										{
											int LA47_7 = input.LA(7);

											if ((LA47_7=='='))
											{
												int LA47_8 = input.LA(8);

												if ((LA47_8=='='))
												{
													int LA47_9 = input.LA(9);

													if ((LA47_9=='='))
													{
														int LA47_10 = input.LA(10);

														if ((LA47_10==']'))
														{
															alt47 = 2;
														}
														else if (((LA47_10>='\u0000' && LA47_10<='\\')||(LA47_10>='^' && LA47_10<='\uFFFF')))
														{
															alt47 = 1;
														}


													}
													else if (((LA47_9>='\u0000' && LA47_9<='<')||(LA47_9>='>' && LA47_9<='\uFFFF')))
													{
														alt47 = 1;
													}


												}
												else if (((LA47_8>='\u0000' && LA47_8<='<')||(LA47_8>='>' && LA47_8<='\uFFFF')))
												{
													alt47 = 1;
												}


											}
											else if (((LA47_7>='\u0000' && LA47_7<='<')||(LA47_7>='>' && LA47_7<='\uFFFF')))
											{
												alt47 = 1;
											}


										}
										else if (((LA47_6>='\u0000' && LA47_6<='<')||(LA47_6>='>' && LA47_6<='\uFFFF')))
										{
											alt47 = 1;
										}


									}
									else if (((LA47_5>='\u0000' && LA47_5<='<')||(LA47_5>='>' && LA47_5<='\uFFFF')))
									{
										alt47 = 1;
									}


								}
								else if (((LA47_4>='\u0000' && LA47_4<='<')||(LA47_4>='>' && LA47_4<='\uFFFF')))
								{
									alt47 = 1;
								}


							}
							else if (((LA47_3>='\u0000' && LA47_3<='<')||(LA47_3>='>' && LA47_3<='\uFFFF')))
							{
								alt47 = 1;
							}


						}
						else if (((LA47_2>='\u0000' && LA47_2<='<')||(LA47_2>='>' && LA47_2<='\uFFFF')))
						{
							alt47 = 1;
						}


					}
					else if (((LA47_1>='\u0000' && LA47_1<='\\')||(LA47_1>='^' && LA47_1<='\uFFFF')))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch ( alt47 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:300:48: .
						{
						DebugLocation(300, 48);
						MatchAny(); 

						}
						break;

					default:
						goto loop47;
					}
				}

				loop47:
					;

				} finally { DebugExitSubRule(47); }

				DebugLocation(300, 53);
				Match("]========]"); 


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:301:7: '[=========[' ( options {greedy=false; } : . )* ']=========]'
				{
				DebugLocation(301, 7);
				Match("[=========["); 

				DebugLocation(301, 21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:301:21: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(48);
				while (true)
				{
					int alt48=2;
					try { DebugEnterDecision(48, false);
					int LA48_1 = input.LA(1);

					if ((LA48_1==']'))
					{
						int LA48_2 = input.LA(2);

						if ((LA48_2=='='))
						{
							int LA48_3 = input.LA(3);

							if ((LA48_3=='='))
							{
								int LA48_4 = input.LA(4);

								if ((LA48_4=='='))
								{
									int LA48_5 = input.LA(5);

									if ((LA48_5=='='))
									{
										int LA48_6 = input.LA(6);

										if ((LA48_6=='='))
										{
											int LA48_7 = input.LA(7);

											if ((LA48_7=='='))
											{
												int LA48_8 = input.LA(8);

												if ((LA48_8=='='))
												{
													int LA48_9 = input.LA(9);

													if ((LA48_9=='='))
													{
														int LA48_10 = input.LA(10);

														if ((LA48_10=='='))
														{
															int LA48_11 = input.LA(11);

															if ((LA48_11==']'))
															{
																alt48 = 2;
															}
															else if (((LA48_11>='\u0000' && LA48_11<='\\')||(LA48_11>='^' && LA48_11<='\uFFFF')))
															{
																alt48 = 1;
															}


														}
														else if (((LA48_10>='\u0000' && LA48_10<='<')||(LA48_10>='>' && LA48_10<='\uFFFF')))
														{
															alt48 = 1;
														}


													}
													else if (((LA48_9>='\u0000' && LA48_9<='<')||(LA48_9>='>' && LA48_9<='\uFFFF')))
													{
														alt48 = 1;
													}


												}
												else if (((LA48_8>='\u0000' && LA48_8<='<')||(LA48_8>='>' && LA48_8<='\uFFFF')))
												{
													alt48 = 1;
												}


											}
											else if (((LA48_7>='\u0000' && LA48_7<='<')||(LA48_7>='>' && LA48_7<='\uFFFF')))
											{
												alt48 = 1;
											}


										}
										else if (((LA48_6>='\u0000' && LA48_6<='<')||(LA48_6>='>' && LA48_6<='\uFFFF')))
										{
											alt48 = 1;
										}


									}
									else if (((LA48_5>='\u0000' && LA48_5<='<')||(LA48_5>='>' && LA48_5<='\uFFFF')))
									{
										alt48 = 1;
									}


								}
								else if (((LA48_4>='\u0000' && LA48_4<='<')||(LA48_4>='>' && LA48_4<='\uFFFF')))
								{
									alt48 = 1;
								}


							}
							else if (((LA48_3>='\u0000' && LA48_3<='<')||(LA48_3>='>' && LA48_3<='\uFFFF')))
							{
								alt48 = 1;
							}


						}
						else if (((LA48_2>='\u0000' && LA48_2<='<')||(LA48_2>='>' && LA48_2<='\uFFFF')))
						{
							alt48 = 1;
						}


					}
					else if (((LA48_1>='\u0000' && LA48_1<='\\')||(LA48_1>='^' && LA48_1<='\uFFFF')))
					{
						alt48 = 1;
					}


					} finally { DebugExitDecision(48); }
					switch ( alt48 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:301:49: .
						{
						DebugLocation(301, 49);
						MatchAny(); 

						}
						break;

					default:
						goto loop48;
					}
				}

				loop48:
					;

				} finally { DebugExitSubRule(48); }

				DebugLocation(301, 54);
				Match("]=========]"); 


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:302:7: '[==========[' ( options {greedy=false; } : . )* ']==========]'
				{
				DebugLocation(302, 7);
				Match("[==========["); 

				DebugLocation(302, 22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:302:22: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(49);
				while (true)
				{
					int alt49=2;
					try { DebugEnterDecision(49, false);
					int LA49_1 = input.LA(1);

					if ((LA49_1==']'))
					{
						int LA49_2 = input.LA(2);

						if ((LA49_2=='='))
						{
							int LA49_3 = input.LA(3);

							if ((LA49_3=='='))
							{
								int LA49_4 = input.LA(4);

								if ((LA49_4=='='))
								{
									int LA49_5 = input.LA(5);

									if ((LA49_5=='='))
									{
										int LA49_6 = input.LA(6);

										if ((LA49_6=='='))
										{
											int LA49_7 = input.LA(7);

											if ((LA49_7=='='))
											{
												int LA49_8 = input.LA(8);

												if ((LA49_8=='='))
												{
													int LA49_9 = input.LA(9);

													if ((LA49_9=='='))
													{
														int LA49_10 = input.LA(10);

														if ((LA49_10=='='))
														{
															int LA49_11 = input.LA(11);

															if ((LA49_11=='='))
															{
																int LA49_12 = input.LA(12);

																if ((LA49_12==']'))
																{
																	alt49 = 2;
																}
																else if (((LA49_12>='\u0000' && LA49_12<='\\')||(LA49_12>='^' && LA49_12<='\uFFFF')))
																{
																	alt49 = 1;
																}


															}
															else if (((LA49_11>='\u0000' && LA49_11<='<')||(LA49_11>='>' && LA49_11<='\uFFFF')))
															{
																alt49 = 1;
															}


														}
														else if (((LA49_10>='\u0000' && LA49_10<='<')||(LA49_10>='>' && LA49_10<='\uFFFF')))
														{
															alt49 = 1;
														}


													}
													else if (((LA49_9>='\u0000' && LA49_9<='<')||(LA49_9>='>' && LA49_9<='\uFFFF')))
													{
														alt49 = 1;
													}


												}
												else if (((LA49_8>='\u0000' && LA49_8<='<')||(LA49_8>='>' && LA49_8<='\uFFFF')))
												{
													alt49 = 1;
												}


											}
											else if (((LA49_7>='\u0000' && LA49_7<='<')||(LA49_7>='>' && LA49_7<='\uFFFF')))
											{
												alt49 = 1;
											}


										}
										else if (((LA49_6>='\u0000' && LA49_6<='<')||(LA49_6>='>' && LA49_6<='\uFFFF')))
										{
											alt49 = 1;
										}


									}
									else if (((LA49_5>='\u0000' && LA49_5<='<')||(LA49_5>='>' && LA49_5<='\uFFFF')))
									{
										alt49 = 1;
									}


								}
								else if (((LA49_4>='\u0000' && LA49_4<='<')||(LA49_4>='>' && LA49_4<='\uFFFF')))
								{
									alt49 = 1;
								}


							}
							else if (((LA49_3>='\u0000' && LA49_3<='<')||(LA49_3>='>' && LA49_3<='\uFFFF')))
							{
								alt49 = 1;
							}


						}
						else if (((LA49_2>='\u0000' && LA49_2<='<')||(LA49_2>='>' && LA49_2<='\uFFFF')))
						{
							alt49 = 1;
						}


					}
					else if (((LA49_1>='\u0000' && LA49_1<='\\')||(LA49_1>='^' && LA49_1<='\uFFFF')))
					{
						alt49 = 1;
					}


					} finally { DebugExitDecision(49); }
					switch ( alt49 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:302:50: .
						{
						DebugLocation(302, 50);
						MatchAny(); 

						}
						break;

					default:
						goto loop49;
					}
				}

				loop49:
					;

				} finally { DebugExitSubRule(49); }

				DebugLocation(302, 55);
				Match("]==========]"); 


				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(303, 2);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 65);
			LeaveRule("COMMENT", 65);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 66);
		TraceIn("LINE_COMMENT", 66);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:307:2: ( '--' (| '[' ( '=' )* | '[' ( '=' )* ~ ( '=' | '[' | '\\r' | '\\n' ) (~ ( '\\r' | '\\n' ) )* |~ ( '[' | '\\r' | '\\n' ) (~ ( '\\r' | '\\n' ) )* ) ( '\\r\\n' | '\\r' | '\\n' | EOF ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:307:4: '--' (| '[' ( '=' )* | '[' ( '=' )* ~ ( '=' | '[' | '\\r' | '\\n' ) (~ ( '\\r' | '\\n' ) )* |~ ( '[' | '\\r' | '\\n' ) (~ ( '\\r' | '\\n' ) )* ) ( '\\r\\n' | '\\r' | '\\n' | EOF )
			{
			DebugLocation(307, 4);
			Match("--"); 

			DebugLocation(308, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:308:2: (| '[' ( '=' )* | '[' ( '=' )* ~ ( '=' | '[' | '\\r' | '\\n' ) (~ ( '\\r' | '\\n' ) )* |~ ( '[' | '\\r' | '\\n' ) (~ ( '\\r' | '\\n' ) )* )
			int alt55=4;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			try
			{
				alt55 = dfa55.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:309:2: 
				{
				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:309:4: '[' ( '=' )*
				{
				DebugLocation(309, 4);
				Match('['); 
				DebugLocation(309, 8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:309:8: ( '=' )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_1 = input.LA(1);

					if ((LA51_1=='='))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:309:8: '='
						{
						DebugLocation(309, 8);
						Match('='); 

						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:310:4: '[' ( '=' )* ~ ( '=' | '[' | '\\r' | '\\n' ) (~ ( '\\r' | '\\n' ) )*
				{
				DebugLocation(310, 4);
				Match('['); 
				DebugLocation(310, 8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:310:8: ( '=' )*
				try { DebugEnterSubRule(52);
				while (true)
				{
					int alt52=2;
					try { DebugEnterDecision(52, false);
					int LA52_1 = input.LA(1);

					if ((LA52_1=='='))
					{
						alt52 = 1;
					}


					} finally { DebugExitDecision(52); }
					switch ( alt52 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:310:8: '='
						{
						DebugLocation(310, 8);
						Match('='); 

						}
						break;

					default:
						goto loop52;
					}
				}

				loop52:
					;

				} finally { DebugExitSubRule(52); }

				DebugLocation(310, 13);
				input.Consume();

				DebugLocation(310, 34);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:310:34: (~ ( '\\r' | '\\n' ) )*
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_1 = input.LA(1);

					if (((LA53_1>='\u0000' && LA53_1<='\t')||(LA53_1>='\u000B' && LA53_1<='\f')||(LA53_1>='\u000E' && LA53_1<='\uFFFF')))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch ( alt53 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
						{
						DebugLocation(310, 34);
						input.Consume();


						}
						break;

					default:
						goto loop53;
					}
				}

				loop53:
					;

				} finally { DebugExitSubRule(53); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:311:4: ~ ( '[' | '\\r' | '\\n' ) (~ ( '\\r' | '\\n' ) )*
				{
				DebugLocation(311, 4);
				input.Consume();

				DebugLocation(311, 21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:311:21: (~ ( '\\r' | '\\n' ) )*
				try { DebugEnterSubRule(54);
				while (true)
				{
					int alt54=2;
					try { DebugEnterDecision(54, false);
					int LA54_1 = input.LA(1);

					if (((LA54_1>='\u0000' && LA54_1<='\t')||(LA54_1>='\u000B' && LA54_1<='\f')||(LA54_1>='\u000E' && LA54_1<='\uFFFF')))
					{
						alt54 = 1;
					}


					} finally { DebugExitDecision(54); }
					switch ( alt54 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
						{
						DebugLocation(311, 21);
						input.Consume();


						}
						break;

					default:
						goto loop54;
					}
				}

				loop54:
					;

				} finally { DebugExitSubRule(54); }


				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(312, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:312:4: ( '\\r\\n' | '\\r' | '\\n' | EOF )
			int alt56=4;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case '\r':
				{
				int LA56_2 = input.LA(2);

				if ((LA56_2=='\n'))
				{
					alt56 = 1;
				}
				else
				{
					alt56 = 2;
				}
				}
				break;
			case '\n':
				{
				alt56 = 3;
				}
				break;
			default:
				alt56=4;
				break;

			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:312:5: '\\r\\n'
				{
				DebugLocation(312, 5);
				Match("\r\n"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:312:12: '\\r'
				{
				DebugLocation(312, 12);
				Match('\r'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:312:17: '\\n'
				{
				DebugLocation(312, 17);
				Match('\n'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:312:22: EOF
				{
				DebugLocation(312, 22);
				Match(EOF); 

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(313, 2);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 66);
			LeaveRule("LINE_COMMENT", 66);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 67);
		TraceIn("WS", 67);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:317:5: ( ( ' ' | '\\t' | '\\r' | '\\n' | '\\u000C' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:317:7: ( ' ' | '\\t' | '\\r' | '\\n' | '\\u000C' )+
			{
			DebugLocation(317, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:317:7: ( ' ' | '\\t' | '\\r' | '\\n' | '\\u000C' )+
			int cnt57=0;
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if (((LA57_1>='\t' && LA57_1<='\n')||(LA57_1>='\f' && LA57_1<='\r')||LA57_1==' '))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(317, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt57 >= 1)
						goto loop57;

					EarlyExitException eee57 = new EarlyExitException( 57, input );
					DebugRecognitionException(eee57);
					throw eee57;
				}
				cnt57++;
			}
			loop57:
				;

			} finally { DebugExitSubRule(57); }

			DebugLocation(317, 38);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 67);
			LeaveRule("WS", 67);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_SHEBANG();
	partial void LeaveRule_SHEBANG();

	// $ANTLR start "SHEBANG"
	[GrammarRule("SHEBANG")]
	private void mSHEBANG()
	{
		EnterRule_SHEBANG();
		EnterRule("SHEBANG", 68);
		TraceIn("SHEBANG", 68);
		try
		{
			int _type = SHEBANG;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:321:2: ( '#' '!' (~ ( '\\n' | '\\r' ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:321:4: '#' '!' (~ ( '\\n' | '\\r' ) )*
			{
			DebugLocation(321, 4);
			Match('#'); 
			DebugLocation(321, 8);
			Match('!'); 
			DebugLocation(321, 12);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:321:12: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if (((LA58_1>='\u0000' && LA58_1<='\t')||(LA58_1>='\u000B' && LA58_1<='\f')||(LA58_1>='\u000E' && LA58_1<='\uFFFF')))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:
					{
					DebugLocation(321, 12);
					input.Consume();


					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }

			DebugLocation(321, 26);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHEBANG", 68);
			LeaveRule("SHEBANG", 68);
			LeaveRule_SHEBANG();
		}
	}
	// $ANTLR end "SHEBANG"

	public override void mTokens()
	{
		// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:8: ( T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | NAME | NORMALSTRING | CHARSTRING | LONGSTRING | INT | HEX | FLOAT | HEX_FLOAT | COMMENT | LINE_COMMENT | WS | SHEBANG )
		int alt59=61;
		try { DebugEnterDecision(59, false);
		try
		{
			alt59 = dfa59.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(59); }
		switch (alt59)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:10: T__23
			{
			DebugLocation(1, 10);
			mT__23(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:16: T__24
			{
			DebugLocation(1, 16);
			mT__24(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:22: T__25
			{
			DebugLocation(1, 22);
			mT__25(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:28: T__26
			{
			DebugLocation(1, 28);
			mT__26(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:34: T__27
			{
			DebugLocation(1, 34);
			mT__27(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:40: T__28
			{
			DebugLocation(1, 40);
			mT__28(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:46: T__29
			{
			DebugLocation(1, 46);
			mT__29(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:52: T__30
			{
			DebugLocation(1, 52);
			mT__30(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:58: T__31
			{
			DebugLocation(1, 58);
			mT__31(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:64: T__32
			{
			DebugLocation(1, 64);
			mT__32(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:70: T__33
			{
			DebugLocation(1, 70);
			mT__33(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:76: T__34
			{
			DebugLocation(1, 76);
			mT__34(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:82: T__35
			{
			DebugLocation(1, 82);
			mT__35(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:88: T__36
			{
			DebugLocation(1, 88);
			mT__36(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:94: T__37
			{
			DebugLocation(1, 94);
			mT__37(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:100: T__38
			{
			DebugLocation(1, 100);
			mT__38(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:106: T__39
			{
			DebugLocation(1, 106);
			mT__39(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:112: T__40
			{
			DebugLocation(1, 112);
			mT__40(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:118: T__41
			{
			DebugLocation(1, 118);
			mT__41(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:124: T__42
			{
			DebugLocation(1, 124);
			mT__42(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:130: T__43
			{
			DebugLocation(1, 130);
			mT__43(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:136: T__44
			{
			DebugLocation(1, 136);
			mT__44(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:142: T__45
			{
			DebugLocation(1, 142);
			mT__45(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:148: T__46
			{
			DebugLocation(1, 148);
			mT__46(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:154: T__47
			{
			DebugLocation(1, 154);
			mT__47(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:160: T__48
			{
			DebugLocation(1, 160);
			mT__48(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:166: T__49
			{
			DebugLocation(1, 166);
			mT__49(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:172: T__50
			{
			DebugLocation(1, 172);
			mT__50(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:178: T__51
			{
			DebugLocation(1, 178);
			mT__51(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:184: T__52
			{
			DebugLocation(1, 184);
			mT__52(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:190: T__53
			{
			DebugLocation(1, 190);
			mT__53(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:196: T__54
			{
			DebugLocation(1, 196);
			mT__54(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:202: T__55
			{
			DebugLocation(1, 202);
			mT__55(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:208: T__56
			{
			DebugLocation(1, 208);
			mT__56(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:214: T__57
			{
			DebugLocation(1, 214);
			mT__57(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:220: T__58
			{
			DebugLocation(1, 220);
			mT__58(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:226: T__59
			{
			DebugLocation(1, 226);
			mT__59(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:232: T__60
			{
			DebugLocation(1, 232);
			mT__60(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:238: T__61
			{
			DebugLocation(1, 238);
			mT__61(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:244: T__62
			{
			DebugLocation(1, 244);
			mT__62(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:250: T__63
			{
			DebugLocation(1, 250);
			mT__63(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:256: T__64
			{
			DebugLocation(1, 256);
			mT__64(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:262: T__65
			{
			DebugLocation(1, 262);
			mT__65(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:268: T__66
			{
			DebugLocation(1, 268);
			mT__66(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:274: T__67
			{
			DebugLocation(1, 274);
			mT__67(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:280: T__68
			{
			DebugLocation(1, 280);
			mT__68(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:286: T__69
			{
			DebugLocation(1, 286);
			mT__69(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:292: T__70
			{
			DebugLocation(1, 292);
			mT__70(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:298: T__71
			{
			DebugLocation(1, 298);
			mT__71(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:304: NAME
			{
			DebugLocation(1, 304);
			mNAME(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:309: NORMALSTRING
			{
			DebugLocation(1, 309);
			mNORMALSTRING(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:322: CHARSTRING
			{
			DebugLocation(1, 322);
			mCHARSTRING(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:333: LONGSTRING
			{
			DebugLocation(1, 333);
			mLONGSTRING(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:344: INT
			{
			DebugLocation(1, 344);
			mINT(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:348: HEX
			{
			DebugLocation(1, 348);
			mHEX(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:352: FLOAT
			{
			DebugLocation(1, 352);
			mFLOAT(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:358: HEX_FLOAT
			{
			DebugLocation(1, 358);
			mHEX_FLOAT(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:368: COMMENT
			{
			DebugLocation(1, 368);
			mCOMMENT(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:376: LINE_COMMENT
			{
			DebugLocation(1, 376);
			mLINE_COMMENT(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:389: WS
			{
			DebugLocation(1, 389);
			mWS(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Lua\\Lua.g:1:392: SHEBANG
			{
			DebugLocation(1, 392);
			mSHEBANG(); 

			}
			break;

		}

	}


	#region DFA
	DFA24 dfa24;
	DFA31 dfa31;
	DFA55 dfa55;
	DFA59 dfa59;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa24 = new DFA24(this);
		dfa31 = new DFA31(this);
		dfa55 = new DFA55(this, SpecialStateTransition55);
		dfa59 = new DFA59(this);
	}

	private class DFA24 : DFA
	{
		private const string DFA24_eotS =
			"\x5\xFFFF";
		private const string DFA24_eofS =
			"\x5\xFFFF";
		private const string DFA24_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA24_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA24_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA24_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA24_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA24_eot = DFA.UnpackEncodedString(DFA24_eotS);
		private static readonly short[] DFA24_eof = DFA.UnpackEncodedString(DFA24_eofS);
		private static readonly char[] DFA24_min = DFA.UnpackEncodedStringToUnsignedChars(DFA24_minS);
		private static readonly char[] DFA24_max = DFA.UnpackEncodedStringToUnsignedChars(DFA24_maxS);
		private static readonly short[] DFA24_accept = DFA.UnpackEncodedString(DFA24_acceptS);
		private static readonly short[] DFA24_special = DFA.UnpackEncodedString(DFA24_specialS);
		private static readonly short[][] DFA24_transition;

		static DFA24()
		{
			int numStates = DFA24_transitionS.Length;
			DFA24_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA24_transition[i] = DFA.UnpackEncodedString(DFA24_transitionS[i]);
			}
		}

		public DFA24( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 24;
			this.eot = DFA24_eot;
			this.eof = DFA24_eof;
			this.min = DFA24_min;
			this.max = DFA24_max;
			this.accept = DFA24_accept;
			this.special = DFA24_special;
			this.transition = DFA24_transition;
		}

		public override string Description { get { return "238:1: FLOAT : ( ( Digit )+ '.' ( Digit )* ( ExponentPart )? | '.' ( Digit )+ ( ExponentPart )? | ( Digit )+ ExponentPart );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA31 : DFA
	{
		private const string DFA31_eotS =
			"\x7\xFFFF";
		private const string DFA31_eofS =
			"\x7\xFFFF";
		private const string DFA31_minS =
			"\x1\x30\x1\x58\x1\x2E\x1\xFFFF\x1\x2E\x2\xFFFF";
		private const string DFA31_maxS =
			"\x1\x30\x1\x78\x1\x66\x1\xFFFF\x1\x70\x2\xFFFF";
		private const string DFA31_acceptS =
			"\x3\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3";
		private const string DFA31_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA31_transitionS =
			{
				"\x1\x1",
				"\x1\x2\x1F\xFFFF\x1\x2",
				"\x1\x3\x1\xFFFF\xA\x4\x7\xFFFF\x6\x4\x1A\xFFFF\x6\x4",
				"",
				"\x1\x5\x1\xFFFF\xA\x4\x7\xFFFF\x6\x4\x9\xFFFF\x1\x6\x10\xFFFF\x6\x4"+
				"\x9\xFFFF\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA31_eot = DFA.UnpackEncodedString(DFA31_eotS);
		private static readonly short[] DFA31_eof = DFA.UnpackEncodedString(DFA31_eofS);
		private static readonly char[] DFA31_min = DFA.UnpackEncodedStringToUnsignedChars(DFA31_minS);
		private static readonly char[] DFA31_max = DFA.UnpackEncodedStringToUnsignedChars(DFA31_maxS);
		private static readonly short[] DFA31_accept = DFA.UnpackEncodedString(DFA31_acceptS);
		private static readonly short[] DFA31_special = DFA.UnpackEncodedString(DFA31_specialS);
		private static readonly short[][] DFA31_transition;

		static DFA31()
		{
			int numStates = DFA31_transitionS.Length;
			DFA31_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA31_transition[i] = DFA.UnpackEncodedString(DFA31_transitionS[i]);
			}
		}

		public DFA31( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 31;
			this.eot = DFA31_eot;
			this.eof = DFA31_eof;
			this.min = DFA31_min;
			this.max = DFA31_max;
			this.accept = DFA31_accept;
			this.special = DFA31_special;
			this.transition = DFA31_transition;
		}

		public override string Description { get { return "244:1: HEX_FLOAT : ( '0' ( 'x' | 'X' ) ( HexDigit )+ '.' ( HexDigit )* ( HexExponentPart )? | '0' ( 'x' | 'X' ) '.' ( HexDigit )+ ( HexExponentPart )? | '0' ( 'x' | 'X' ) ( HexDigit )+ HexExponentPart );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA55 : DFA
	{
		private const string DFA55_eotS =
			"\x1\x1\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF";
		private const string DFA55_eofS =
			"\x7\xFFFF";
		private const string DFA55_minS =
			"\x1\x0\x1\xFFFF\x1\x0\x1\xFFFF\x1\x0\x2\xFFFF";
		private const string DFA55_maxS =
			"\x1\xFFFF\x1\xFFFF\x1\xFFFF\x1\xFFFF\x1\xFFFF\x2\xFFFF";
		private const string DFA55_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\x3";
		private const string DFA55_specialS =
			"\x1\x0\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x2\xFFFF}>";
		private static readonly string[] DFA55_transitionS =
			{
				"\xA\x3\x1\xFFFF\x2\x3\x1\xFFFF\x4D\x3\x1\x2\xFFA4\x3",
				"",
				"\xA\x6\x1\xFFFF\x2\x6\x1\xFFFF\x2F\x6\x1\x4\x1D\x6\x1\xFFFF\xFFA4\x6",
				"",
				"\xA\x6\x1\xFFFF\x2\x6\x1\xFFFF\x2F\x6\x1\x4\x1D\x6\x1\xFFFF\xFFA4\x6",
				"",
				""
			};

		private static readonly short[] DFA55_eot = DFA.UnpackEncodedString(DFA55_eotS);
		private static readonly short[] DFA55_eof = DFA.UnpackEncodedString(DFA55_eofS);
		private static readonly char[] DFA55_min = DFA.UnpackEncodedStringToUnsignedChars(DFA55_minS);
		private static readonly char[] DFA55_max = DFA.UnpackEncodedStringToUnsignedChars(DFA55_maxS);
		private static readonly short[] DFA55_accept = DFA.UnpackEncodedString(DFA55_acceptS);
		private static readonly short[] DFA55_special = DFA.UnpackEncodedString(DFA55_specialS);
		private static readonly short[][] DFA55_transition;

		static DFA55()
		{
			int numStates = DFA55_transitionS.Length;
			DFA55_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA55_transition[i] = DFA.UnpackEncodedString(DFA55_transitionS[i]);
			}
		}

		public DFA55( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 55;
			this.eot = DFA55_eot;
			this.eof = DFA55_eof;
			this.min = DFA55_min;
			this.max = DFA55_max;
			this.accept = DFA55_accept;
			this.special = DFA55_special;
			this.transition = DFA55_transition;
		}

		public override string Description { get { return "308:2: (| '[' ( '=' )* | '[' ( '=' )* ~ ( '=' | '[' | '\\r' | '\\n' ) (~ ( '\\r' | '\\n' ) )* |~ ( '[' | '\\r' | '\\n' ) (~ ( '\\r' | '\\n' ) )* )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition55(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		s = -1;
		int LA55_1 = input.LA(1);
		int index55_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				if ((LA55_1=='[')) {s = 2;}

				else if (((LA55_1>='\u0000' && LA55_1<='\t')||(LA55_1>='\u000B' && LA55_1<='\f')||(LA55_1>='\u000E' && LA55_1<='Z')||(LA55_1>='\\' && LA55_1<='\uFFFF'))) {s = 3;}

				else s = 1;

				break;
			}
		case 1:
			{
				if ((LA55_1=='=')) {s = 4;}

				else if (((LA55_1>='\u0000' && LA55_1<='\t')||(LA55_1>='\u000B' && LA55_1<='\f')||(LA55_1>='\u000E' && LA55_1<='<')||(LA55_1>='>' && LA55_1<='Z')||(LA55_1>='\\' && LA55_1<='\uFFFF'))) {s = 6;}

				else s = 5;

				break;
			}
		case 2:
			{
				if ((LA55_1=='=')) {s = 4;}

				else if (((LA55_1>='\u0000' && LA55_1<='\t')||(LA55_1>='\u000B' && LA55_1<='\f')||(LA55_1>='\u000E' && LA55_1<='<')||(LA55_1>='>' && LA55_1<='Z')||(LA55_1>='\\' && LA55_1<='\uFFFF'))) {s = 6;}

				else s = 5;

				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		NoViableAltException nvae = new NoViableAltException(dfa.Description, 55, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA59 : DFA
	{
		private const string DFA59_eotS =
			"\x1\xFFFF\x1\x2B\x6\xFFFF\x1\x2D\x1\x2F\x1\xFFFF\x1\x32\x1\xFFFF\x1\x34"+
			"\x1\x36\x1\x38\x1\x3A\x2\xFFFF\xE\x24\x6\xFFFF\x2\x50\x3\xFFFF\x1\x52"+
			"\x1\xFFFF\x1\x54\xC\xFFFF\x2\x24\x1\x57\x6\x24\x1\x5E\x1\x5F\x3\x24\x1"+
			"\x63\x5\x24\x2\xFFFF\x1\x52\x3\xFFFF\x1\x6E\x1\x24\x1\xFFFF\x1\x24\x1"+
			"\x71\x1\x24\x1\x73\x2\x24\x2\xFFFF\x1\x24\x1\x77\x1\x78\x1\xFFFF\x6\x24"+
			"\x1\xFFFF\x1\x7F\x1\xFFFF\x1\x52\x1\xFFFF\x1\x24\x1\x83\x1\xFFFF\x1\x24"+
			"\x1\xFFFF\x1\x24\x1\x86\x1\x24\x2\xFFFF\x2\x24\x1\x8A\x1\x8B\x2\x24\x1"+
			"\xFFFF\x1\x52\x1\x8F\x1\x24\x1\xFFFF\x1\x91\x1\x24\x1\xFFFF\x1\x93\x2"+
			"\x24\x2\xFFFF\x1\x96\x1\x97\x1\x52\x1\xFFFF\x1\x99\x1\xFFFF\x1\x24\x1"+
			"\xFFFF\x1\x9B\x1\x9C\x2\xFFFF\x1\x52\x1\xFFFF\x1\x24\x2\xFFFF\x1\x52"+
			"\x1\xA0\x1\x52\x1\xFFFF\x4\x52";
		private const string DFA59_eofS =
			"\xA5\xFFFF";
		private const string DFA59_minS =
			"\x1\x9\x1\x21\x6\xFFFF\x1\x2D\x1\x2E\x1\xFFFF\x1\x3A\x1\xFFFF\x4\x3D"+
			"\x2\xFFFF\x1\x6E\x1\x72\x1\x6F\x1\x6C\x1\x61\x1\x6F\x1\x66\x1\x6F\x1"+
			"\x69\x1\x72\x1\x65\x1\x68\x1\x6E\x1\x68\x6\xFFFF\x2\x2E\x3\xFFFF\x1\x5B"+
			"\x1\xFFFF\x1\x2E\xC\xFFFF\x1\x64\x1\x65\x1\x30\x1\x73\x1\x64\x1\x6C\x1"+
			"\x72\x1\x6E\x1\x74\x2\x30\x1\x63\x1\x6C\x1\x74\x1\x30\x1\x70\x1\x65\x1"+
			"\x75\x1\x74\x1\x69\x1\x2E\x1\xFFFF\x1\x3D\x3\xFFFF\x1\x30\x1\x61\x1\xFFFF"+
			"\x1\x65\x1\x30\x1\x73\x1\x30\x1\x63\x1\x6F\x2\xFFFF\x1\x61\x2\x30\x1"+
			"\xFFFF\x1\x65\x1\x75\x1\x6E\x1\x65\x1\x69\x1\x6C\x1\xFFFF\x1\x2E\x1\xFFFF"+
			"\x1\x3D\x1\xFFFF\x1\x6B\x1\x30\x1\xFFFF\x1\x65\x1\xFFFF\x1\x74\x1\x30"+
			"\x1\x6C\x2\xFFFF\x1\x61\x1\x72\x2\x30\x1\x6C\x1\x65\x1\xFFFF\x1\x3D\x1"+
			"\x30\x1\x66\x1\xFFFF\x1\x30\x1\x69\x1\xFFFF\x1\x30\x1\x74\x1\x6E\x2\xFFFF"+
			"\x2\x30\x1\x3D\x1\xFFFF\x1\x30\x1\xFFFF\x1\x6F\x1\xFFFF\x2\x30\x2\xFFFF"+
			"\x1\x3D\x1\xFFFF\x1\x6E\x2\xFFFF\x1\x3D\x1\x30\x1\x3D\x1\xFFFF\x3\x3D"+
			"\x1\x5B";
		private const string DFA59_maxS =
			"\x1\x7E\x1\x21\x6\xFFFF\x1\x2D\x1\x39\x1\xFFFF\x1\x3A\x1\xFFFF\x3\x3D"+
			"\x1\x5B\x2\xFFFF\x1\x6E\x1\x72\x1\x6F\x1\x6E\x1\x75\x1\x6F\x1\x6E\x2"+
			"\x6F\x1\x72\x1\x65\x1\x72\x1\x6E\x1\x68\x6\xFFFF\x1\x78\x1\x65\x3\xFFFF"+
			"\x1\x5B\x1\xFFFF\x1\x2E\xC\xFFFF\x1\x64\x1\x65\x1\x7A\x1\x73\x1\x64\x1"+
			"\x6C\x1\x72\x1\x6E\x1\x74\x2\x7A\x1\x63\x1\x6C\x1\x74\x1\x7A\x1\x74\x1"+
			"\x65\x1\x75\x1\x74\x1\x69\x1\x66\x1\xFFFF\x1\x5B\x3\xFFFF\x1\x7A\x1\x61"+
			"\x1\xFFFF\x1\x65\x1\x7A\x1\x73\x1\x7A\x1\x63\x1\x6F\x2\xFFFF\x1\x61\x2"+
			"\x7A\x1\xFFFF\x1\x65\x1\x75\x1\x6E\x1\x65\x1\x69\x1\x6C\x1\xFFFF\x1\x70"+
			"\x1\xFFFF\x1\x5B\x1\xFFFF\x1\x6B\x1\x7A\x1\xFFFF\x1\x65\x1\xFFFF\x1\x74"+
			"\x1\x7A\x1\x6C\x2\xFFFF\x1\x61\x1\x72\x2\x7A\x1\x6C\x1\x65\x1\xFFFF\x1"+
			"\x5B\x1\x7A\x1\x66\x1\xFFFF\x1\x7A\x1\x69\x1\xFFFF\x1\x7A\x1\x74\x1\x6E"+
			"\x2\xFFFF\x2\x7A\x1\x5B\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x6F\x1\xFFFF\x2\x7A"+
			"\x2\xFFFF\x1\x5B\x1\xFFFF\x1\x6E\x2\xFFFF\x1\x5B\x1\x7A\x1\x5B\x1\xFFFF"+
			"\x4\x5B";
		private const string DFA59_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x2\xFFFF\x1\xC\x1\xFFFF"+
			"\x1\xF\x4\xFFFF\x1\x17\x1\x18\xE\xFFFF\x1\x2F\x1\x30\x1\x31\x1\x32\x1"+
			"\x33\x1\x34\x2\xFFFF\x1\x3C\x1\x3D\x1\x1\x1\xFFFF\x1\x8\x1\xFFFF\x1\x9"+
			"\x1\x38\x1\xE\x1\xD\x1\x11\x1\x10\x1\x13\x1\x12\x1\x15\x1\x14\x1\x35"+
			"\x1\x16\x15\xFFFF\x1\x36\x1\xFFFF\x1\x3B\x1\xB\x1\xA\x2\xFFFF\x1\x1B"+
			"\x6\xFFFF\x1\x23\x1\x24\x3\xFFFF\x1\x28\x6\xFFFF\x1\x39\x1\xFFFF\x1\x3A"+
			"\x1\xFFFF\x1\x19\x2\xFFFF\x1\x1E\x1\xFFFF\x1\x20\x3\xFFFF\x1\x26\x1\x27"+
			"\x6\xFFFF\x1\x37\x3\xFFFF\x1\x1C\x2\xFFFF\x1\x22\x3\xFFFF\x1\x2B\x1\x2C"+
			"\x3\xFFFF\x1\x1A\x1\xFFFF\x1\x1F\x1\xFFFF\x1\x25\x2\xFFFF\x1\x2D\x1\x2E"+
			"\x1\xFFFF\x1\x1D\x1\xFFFF\x1\x29\x1\x2A\x3\xFFFF\x1\x21\x4\xFFFF";
		private const string DFA59_specialS =
			"\xA5\xFFFF}>";
		private static readonly string[] DFA59_transitionS =
			{
				"\x2\x29\x1\xFFFF\x2\x29\x12\xFFFF\x1\x29\x1\xFFFF\x1\x25\x1\x1\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x26\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1"+
				"\xA\x1\x27\x9\x28\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x2\xFFFF\x1A\x24\x1"+
				"\x10\x1\xFFFF\x1\x11\x1\x12\x1\x24\x1\xFFFF\x1\x13\x1\x14\x1\x24\x1"+
				"\x15\x1\x16\x1\x17\x1\x18\x1\x24\x1\x19\x2\x24\x1\x1A\x1\x24\x1\x1B"+
				"\x1\x1C\x2\x24\x1\x1D\x1\x24\x1\x1E\x1\x1F\x1\x24\x1\x20\x3\x24\x1\x21"+
				"\x1\xFFFF\x1\x22\x1\x23",
				"\x1\x2A",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2C",
				"\x1\x2E\x1\xFFFF\xA\x30",
				"",
				"\x1\x31",
				"",
				"\x1\x33",
				"\x1\x35",
				"\x1\x37",
				"\x1\x39\x1D\xFFFF\x1\x39",
				"",
				"",
				"\x1\x3B",
				"\x1\x3C",
				"\x1\x3D",
				"\x1\x3E\x1\xFFFF\x1\x3F",
				"\x1\x40\xD\xFFFF\x1\x41\x5\xFFFF\x1\x42",
				"\x1\x43",
				"\x1\x44\x7\xFFFF\x1\x45",
				"\x1\x46",
				"\x1\x47\x5\xFFFF\x1\x48",
				"\x1\x49",
				"\x1\x4A",
				"\x1\x4B\x9\xFFFF\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x30\x1\xFFFF\xA\x28\xB\xFFFF\x1\x30\x12\xFFFF\x1\x4F\xC\xFFFF\x1"+
				"\x30\x12\xFFFF\x1\x4F",
				"\x1\x30\x1\xFFFF\xA\x28\xB\xFFFF\x1\x30\x1F\xFFFF\x1\x30",
				"",
				"",
				"",
				"\x1\x51",
				"",
				"\x1\x53",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x55",
				"\x1\x56",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x64\x3\xFFFF\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\x1\x6A\x1\xFFFF\xA\x6B\x7\xFFFF\x6\x6B\x1A\xFFFF\x6\x6B",
				"",
				"\x1\x6D\x1D\xFFFF\x1\x6C",
				"",
				"",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x6F",
				"",
				"\x1\x70",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x72",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x74",
				"\x1\x75",
				"",
				"",
				"\x1\x76",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\x1\x79",
				"\x1\x7A",
				"\x1\x7B",
				"\x1\x7C",
				"\x1\x7D",
				"\x1\x7E",
				"",
				"\x1\x6A\x1\xFFFF\xA\x6B\x7\xFFFF\x6\x6B\x9\xFFFF\x1\x6A\x10\xFFFF\x6"+
				"\x6B\x9\xFFFF\x1\x6A",
				"",
				"\x1\x80\x1D\xFFFF\x1\x6C",
				"",
				"\x1\x81",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x8\x24\x1\x82\x11"+
				"\x24",
				"",
				"\x1\x84",
				"",
				"\x1\x85",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x87",
				"",
				"",
				"\x1\x88",
				"\x1\x89",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x8C",
				"\x1\x8D",
				"",
				"\x1\x8E\x1D\xFFFF\x1\x6C",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x90",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x92",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x94",
				"\x1\x95",
				"",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x98\x1D\xFFFF\x1\x6C",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\x1\x9A",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"",
				"\x1\x9D\x1D\xFFFF\x1\x6C",
				"",
				"\x1\x9E",
				"",
				"",
				"\x1\x9F\x1D\xFFFF\x1\x6C",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\xA1\x1D\xFFFF\x1\x6C",
				"",
				"\x1\xA2\x1D\xFFFF\x1\x6C",
				"\x1\xA3\x1D\xFFFF\x1\x6C",
				"\x1\xA4\x1D\xFFFF\x1\x6C",
				"\x1\x6C"
			};

		private static readonly short[] DFA59_eot = DFA.UnpackEncodedString(DFA59_eotS);
		private static readonly short[] DFA59_eof = DFA.UnpackEncodedString(DFA59_eofS);
		private static readonly char[] DFA59_min = DFA.UnpackEncodedStringToUnsignedChars(DFA59_minS);
		private static readonly char[] DFA59_max = DFA.UnpackEncodedStringToUnsignedChars(DFA59_maxS);
		private static readonly short[] DFA59_accept = DFA.UnpackEncodedString(DFA59_acceptS);
		private static readonly short[] DFA59_special = DFA.UnpackEncodedString(DFA59_specialS);
		private static readonly short[][] DFA59_transition;

		static DFA59()
		{
			int numStates = DFA59_transitionS.Length;
			DFA59_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA59_transition[i] = DFA.UnpackEncodedString(DFA59_transitionS[i]);
			}
		}

		public DFA59( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | NAME | NORMALSTRING | CHARSTRING | LONGSTRING | INT | HEX | FLOAT | HEX_FLOAT | COMMENT | LINE_COMMENT | WS | SHEBANG );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion

}

} // namespace  Code2Xml.Languages.ANTLRv3.Processors.Lua 
