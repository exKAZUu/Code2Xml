using Code2Xml.Languages.ANTLRv3.Core;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g 2013-11-07 21:37:41

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PhpParser : Antlr.Runtime.Parser, ICustomizedAntlr3Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Abstract", "AccessModifier", "Ampersand", "And", "Apply", "Array", "ArrayAssign", "AsignmentOperator", "Asterisk", "Bang", "Block", "BodyString", "BodyStringRest", "BodyStringRestShortTag", "Boolean", "Break", "Case", "Cast", "Class", "ClassDefinition", "ClassMember", "Clone", "CloseCurlyBracket", "CloseRoundBracket", "CloseSquareBracket", "Colon", "Comma", "ComparisionOperator", "Const", "Continue", "DNum", "Decimal", "Default", "Digits", "Do", "Dollar", "Dot", "DoubleQuotedString", "Echo", "Else", "ElseIf", "Empty", "Eol", "EqualityOperator", "Equals", "EscapeCharector", "Exponent_DNum", "Extends", "Field", "For", "ForCondition", "ForInit", "ForUpdate", "Foreach", "Forwardslash", "Function", "Global", "Goto", "HereDoc", "HereDocContents", "Hexadecimal", "If", "IfExpression", "Implements", "IncrementOperator", "InstanceMember", "Instanceof", "Integer", "Interface", "Label", "List", "LogicalAnd", "LogicalOr", "Member", "Method", "Minus", "Modifiers", "MultilineComment", "New", "Octal", "OpenCurlyBracket", "OpenRoundBracket", "OpenSquareBracket", "Or", "Params", "Percent", "Pipe", "Plus", "Postfix", "Prefix", "PrimitiveType", "QuestionMark", "Real", "Reference", "RequireOperator", "Return", "SemiColon", "ShiftOperator", "SingleQuotedString", "SinglelineComment", "Static", "SuppressWarnings", "Switch", "Tilde", "UnixComment", "UnquotedString", "Var", "While", "WhiteSpace", "Xor", "'as'"
	};
	public const int EOF=-1;
	public const int Abstract=4;
	public const int AccessModifier=5;
	public const int Ampersand=6;
	public const int And=7;
	public const int Apply=8;
	public const int Array=9;
	public const int ArrayAssign=10;
	public const int AsignmentOperator=11;
	public const int Asterisk=12;
	public const int Bang=13;
	public const int Block=14;
	public const int BodyString=15;
	public const int BodyStringRest=16;
	public const int BodyStringRestShortTag=17;
	public const int Boolean=18;
	public const int Break=19;
	public const int Case=20;
	public const int Cast=21;
	public const int Class=22;
	public const int ClassDefinition=23;
	public const int ClassMember=24;
	public const int Clone=25;
	public const int CloseCurlyBracket=26;
	public const int CloseRoundBracket=27;
	public const int CloseSquareBracket=28;
	public const int Colon=29;
	public const int Comma=30;
	public const int ComparisionOperator=31;
	public const int Const=32;
	public const int Continue=33;
	public const int DNum=34;
	public const int Decimal=35;
	public const int Default=36;
	public const int Digits=37;
	public const int Do=38;
	public const int Dollar=39;
	public const int Dot=40;
	public const int DoubleQuotedString=41;
	public const int Echo=42;
	public const int Else=43;
	public const int ElseIf=44;
	public const int Empty=45;
	public const int Eol=46;
	public const int EqualityOperator=47;
	public const int Equals=48;
	public const int EscapeCharector=49;
	public const int Exponent_DNum=50;
	public const int Extends=51;
	public const int Field=52;
	public const int For=53;
	public const int ForCondition=54;
	public const int ForInit=55;
	public const int ForUpdate=56;
	public const int Foreach=57;
	public const int Forwardslash=58;
	public const int Function=59;
	public const int Global=60;
	public const int Goto=61;
	public const int HereDoc=62;
	public const int HereDocContents=63;
	public const int Hexadecimal=64;
	public const int If=65;
	public const int IfExpression=66;
	public const int Implements=67;
	public const int IncrementOperator=68;
	public const int InstanceMember=69;
	public const int Instanceof=70;
	public const int Integer=71;
	public const int Interface=72;
	public const int Label=73;
	public const int List=74;
	public const int LogicalAnd=75;
	public const int LogicalOr=76;
	public const int Member=77;
	public const int Method=78;
	public const int Minus=79;
	public const int Modifiers=80;
	public const int MultilineComment=81;
	public const int New=82;
	public const int Octal=83;
	public const int OpenCurlyBracket=84;
	public const int OpenRoundBracket=85;
	public const int OpenSquareBracket=86;
	public const int Or=87;
	public const int Params=88;
	public const int Percent=89;
	public const int Pipe=90;
	public const int Plus=91;
	public const int Postfix=92;
	public const int Prefix=93;
	public const int PrimitiveType=94;
	public const int QuestionMark=95;
	public const int Real=96;
	public const int Reference=97;
	public const int RequireOperator=98;
	public const int Return=99;
	public const int SemiColon=100;
	public const int ShiftOperator=101;
	public const int SingleQuotedString=102;
	public const int SinglelineComment=103;
	public const int Static=104;
	public const int SuppressWarnings=105;
	public const int Switch=106;
	public const int Tilde=107;
	public const int UnixComment=108;
	public const int UnquotedString=109;
	public const int Var=110;
	public const int While=111;
	public const int WhiteSpace=112;
	public const int Xor=113;
	public const int T__114=114;

	public PhpParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public PhpParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[179+1];


		Antlr3AstBuilder treeAdaptor = default(Antlr3AstBuilder);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new Antlr3AstBuilder();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref Antlr3AstBuilder adaptor);

	private Antlr3AstBuilder adaptor;

	public Antlr3AstBuilder TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return PhpParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g"; } }


	    private bool expressionFollowsBodyString = false;


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:162:1: public prog : ( statement )* ;
	[GrammarRule("prog")]
	public Antlr3AstNode prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		var retval = new Antlr3AstNode("prog");
		
		retval.Start = (IToken)input.LT(1);
		int prog_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode statement1 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(162, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:162:6: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:162:8: ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(162, 8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:162:8: ( statement )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==Abstract||LA1_1==Ampersand||LA1_1==Array||LA1_1==Bang||LA1_1==BodyString||(LA1_1>=Boolean && LA1_1<=Break)||LA1_1==Class||LA1_1==Clone||LA1_1==Continue||(LA1_1>=Do && LA1_1<=Dollar)||(LA1_1>=DoubleQuotedString && LA1_1<=Echo)||LA1_1==For||LA1_1==Foreach||(LA1_1>=Function && LA1_1<=HereDoc)||LA1_1==If||LA1_1==IncrementOperator||(LA1_1>=Integer && LA1_1<=Interface)||LA1_1==List||LA1_1==Minus||LA1_1==New||(LA1_1>=OpenCurlyBracket && LA1_1<=OpenRoundBracket)||LA1_1==Real||(LA1_1>=RequireOperator && LA1_1<=Return)||LA1_1==SingleQuotedString||(LA1_1>=Static && LA1_1<=Tilde)||LA1_1==UnquotedString||LA1_1==While))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:162:8: statement
					{
					DebugLocation(162, 8);
					PushFollow(Follow._statement_in_prog913);
					statement1=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement1.Tree, statement1, retval);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
			if (state.backtracking > 0) { Memoize(input, 1, prog_StartIndex); }

		}
		DebugLocation(162, 17);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:164:1: statement : ({...}? => printExpr ';' !| ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | '{' statement '}' | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' !);
	[GrammarRule("statement")]
	private Antlr3AstNode statement()
	{
		EnterRule_statement();
		EnterRule("statement", 2);
		var retval = new Antlr3AstNode("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal3 = default(IToken);
		IToken BodyString6 = default(IToken);
		IToken char_literal7 = default(IToken);
		IToken char_literal9 = default(IToken);
		IToken UnquotedString11 = default(IToken);
		IToken Colon12 = default(IToken);
		IToken char_literal18 = default(IToken);
		Antlr3AstNode printExpr2 = default(Antlr3AstNode);
		Antlr3AstNode printExpr4 = default(Antlr3AstNode);
		Antlr3AstNode simpleStatement5 = default(Antlr3AstNode);
		Antlr3AstNode statement8 = default(Antlr3AstNode);
		Antlr3AstNode bracketedBlock10 = default(Antlr3AstNode);
		Antlr3AstNode statement13 = default(Antlr3AstNode);
		Antlr3AstNode classDefinition14 = default(Antlr3AstNode);
		Antlr3AstNode interfaceDefinition15 = default(Antlr3AstNode);
		Antlr3AstNode complexStatement16 = default(Antlr3AstNode);
		Antlr3AstNode simpleStatement17 = default(Antlr3AstNode);

		object char_literal3_tree = default(object);
		object BodyString6_tree = default(object);
		object char_literal7_tree = default(object);
		object char_literal9_tree = default(object);
		object UnquotedString11_tree = default(object);
		object Colon12_tree = default(object);
		object char_literal18_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(164, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:165:5: ({...}? => printExpr ';' !| ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | '{' statement '}' | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' !)
			int alt5=9;
			try { DebugEnterDecision(5, false);
			try
			{
				alt5 = dfa5.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:165:7: {...}? => printExpr ';' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(165, 7);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
				}
				DebugLocation(165, 40);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString=false;
				}
				DebugLocation(165, 77);
				PushFollow(Follow._printExpr_in_statement931);
				printExpr2=printExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr2.Tree, printExpr2, retval);
				DebugLocation(165, 90);
				char_literal3=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement933); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:7: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(166, 7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:7: ({...}? => ( printExpr )? | ( simpleStatement )? )
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				try
				{
					alt4 = dfa4.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:8: {...}? => ( printExpr )?
					{
					DebugLocation(166, 8);
					if (!((expressionFollowsBodyString)))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
					}
					DebugLocation(166, 42);
					if (state.backtracking == 0)
					{
						expressionFollowsBodyString=false;
					}
					DebugLocation(166, 79);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:79: ( printExpr )?
					int alt2=2;
					try { DebugEnterSubRule(2);
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if ((LA2_1==Ampersand||LA2_1==Array||LA2_1==Bang||LA2_1==Boolean||LA2_1==Clone||LA2_1==Dollar||LA2_1==DoubleQuotedString||LA2_1==HereDoc||LA2_1==IncrementOperator||LA2_1==Integer||LA2_1==List||LA2_1==Minus||LA2_1==New||LA2_1==OpenRoundBracket||LA2_1==Real||LA2_1==SingleQuotedString||LA2_1==SuppressWarnings||LA2_1==Tilde||LA2_1==UnquotedString))
					{
						alt2 = 1;
					}
					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:79: printExpr
						{
						DebugLocation(166, 79);
						PushFollow(Follow._printExpr_in_statement949);
						printExpr4=printExpr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr4.Tree, printExpr4, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(2); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:92: ( simpleStatement )?
					{
					DebugLocation(166, 92);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:92: ( simpleStatement )?
					int alt3=2;
					try { DebugEnterSubRule(3);
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if ((LA3_1==Ampersand||LA3_1==Array||LA3_1==Bang||(LA3_1>=Boolean && LA3_1<=Break)||LA3_1==Clone||LA3_1==Continue||LA3_1==Dollar||(LA3_1>=DoubleQuotedString && LA3_1<=Echo)||(LA3_1>=Global && LA3_1<=HereDoc)||LA3_1==IncrementOperator||LA3_1==Integer||LA3_1==List||LA3_1==Minus||LA3_1==New||LA3_1==OpenRoundBracket||LA3_1==Real||(LA3_1>=RequireOperator && LA3_1<=Return)||LA3_1==SingleQuotedString||(LA3_1>=Static && LA3_1<=SuppressWarnings)||LA3_1==Tilde||LA3_1==UnquotedString))
					{
						alt3 = 1;
					}
					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:92: simpleStatement
						{
						DebugLocation(166, 92);
						PushFollow(Follow._simpleStatement_in_statement954);
						simpleStatement5=simpleStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement5.Tree, simpleStatement5, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(3); }


					}
					break;

				}
				} finally { DebugExitSubRule(4); }

				DebugLocation(166, 110);
				BodyString6=(IToken)Match(input,BodyString,Follow._BodyString_in_statement958); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BodyString6_tree = (object)adaptor.Create(BodyString6, retval);
				adaptor.AddChild(root_0, BodyString6_tree);
				}
				DebugLocation(166, 121);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString = (BodyString6!=null?BodyString6.Text:default(string)).endsWith("<?=");
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:167:7: '{' statement '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(167, 7);
				char_literal7=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_statement968); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal7_tree = (object)adaptor.Create(char_literal7, retval);
				adaptor.AddChild(root_0, char_literal7_tree);
				}
				DebugLocation(167, 11);
				PushFollow(Follow._statement_in_statement970);
				statement8=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement8.Tree, statement8, retval);
				DebugLocation(167, 21);
				char_literal9=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_statement972); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal9_tree = (object)adaptor.Create(char_literal9, retval);
				adaptor.AddChild(root_0, char_literal9_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:7: bracketedBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(168, 7);
				PushFollow(Follow._bracketedBlock_in_statement980);
				bracketedBlock10=bracketedBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock10.Tree, bracketedBlock10, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:169:7: UnquotedString Colon statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(169, 7);
				UnquotedString11=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_statement988); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString11_tree = (object)adaptor.Create(UnquotedString11, retval);
				adaptor.AddChild(root_0, UnquotedString11_tree);
				}
				DebugLocation(169, 22);
				Colon12=(IToken)Match(input,Colon,Follow._Colon_in_statement990); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Colon12_tree = (object)adaptor.Create(Colon12, retval);
				adaptor.AddChild(root_0, Colon12_tree);
				}
				DebugLocation(169, 28);
				PushFollow(Follow._statement_in_statement992);
				statement13=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement13.Tree, statement13, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:170:7: classDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(170, 7);
				PushFollow(Follow._classDefinition_in_statement1000);
				classDefinition14=classDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDefinition14.Tree, classDefinition14, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:171:7: interfaceDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(171, 7);
				PushFollow(Follow._interfaceDefinition_in_statement1008);
				interfaceDefinition15=interfaceDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDefinition15.Tree, interfaceDefinition15, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:7: complexStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(172, 7);
				PushFollow(Follow._complexStatement_in_statement1016);
				complexStatement16=complexStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, complexStatement16.Tree, complexStatement16, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:173:7: simpleStatement ';' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(173, 7);
				PushFollow(Follow._simpleStatement_in_statement1024);
				simpleStatement17=simpleStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement17.Tree, simpleStatement17, retval);
				DebugLocation(173, 26);
				char_literal18=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement1026); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 2);
			LeaveRule("statement", 2);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 2, statement_StartIndex); }

		}
		DebugLocation(174, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_printExpr();
	partial void LeaveRule_printExpr();
	// $ANTLR start "printExpr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:176:1: printExpr : expression ;
	[GrammarRule("printExpr")]
	private Antlr3AstNode printExpr()
	{
		EnterRule_printExpr();
		EnterRule("printExpr", 3);
		var retval = new Antlr3AstNode("printExpr");
		
		retval.Start = (IToken)input.LT(1);
		int printExpr_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode expression19 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "printExpr");
		DebugLocation(176, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:177:5: ( expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:177:7: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(177, 7);
			PushFollow(Follow._expression_in_printExpr1044);
			expression19=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression19.Tree, expression19, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("printExpr", 3);
			LeaveRule("printExpr", 3);
			LeaveRule_printExpr();
			if (state.backtracking > 0) { Memoize(input, 3, printExpr_StartIndex); }

		}
		DebugLocation(178, 4);
		} finally { DebugExitRule(GrammarFileName, "printExpr"); }
		return retval;

	}
	// $ANTLR end "printExpr"

	partial void EnterRule_bracketedBlock();
	partial void LeaveRule_bracketedBlock();
	// $ANTLR start "bracketedBlock"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:180:1: bracketedBlock : '{' (stmts= statement )* '}' ;
	[GrammarRule("bracketedBlock")]
	private Antlr3AstNode bracketedBlock()
	{
		EnterRule_bracketedBlock();
		EnterRule("bracketedBlock", 4);
		var retval = new Antlr3AstNode("bracketedBlock");
		
		retval.Start = (IToken)input.LT(1);
		int bracketedBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal20 = default(IToken);
		IToken char_literal21 = default(IToken);
		Antlr3AstNode stmts = default(Antlr3AstNode);

		object char_literal20_tree = default(object);
		object char_literal21_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bracketedBlock");
		DebugLocation(180, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:181:5: ( '{' (stmts= statement )* '}' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:181:7: '{' (stmts= statement )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(181, 7);
			char_literal20=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_bracketedBlock1061); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal20_tree = (object)adaptor.Create(char_literal20, retval);
			adaptor.AddChild(root_0, char_literal20_tree);
			}
			DebugLocation(181, 16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:181:16: (stmts= statement )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==Abstract||LA6_1==Ampersand||LA6_1==Array||LA6_1==Bang||LA6_1==BodyString||(LA6_1>=Boolean && LA6_1<=Break)||LA6_1==Class||LA6_1==Clone||LA6_1==Continue||(LA6_1>=Do && LA6_1<=Dollar)||(LA6_1>=DoubleQuotedString && LA6_1<=Echo)||LA6_1==For||LA6_1==Foreach||(LA6_1>=Function && LA6_1<=HereDoc)||LA6_1==If||LA6_1==IncrementOperator||(LA6_1>=Integer && LA6_1<=Interface)||LA6_1==List||LA6_1==Minus||LA6_1==New||(LA6_1>=OpenCurlyBracket && LA6_1<=OpenRoundBracket)||LA6_1==Real||(LA6_1>=RequireOperator && LA6_1<=Return)||LA6_1==SingleQuotedString||(LA6_1>=Static && LA6_1<=Tilde)||LA6_1==UnquotedString||LA6_1==While))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:181:16: stmts= statement
					{
					DebugLocation(181, 16);
					PushFollow(Follow._statement_in_bracketedBlock1065);
					stmts=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, stmts.Tree, stmts, retval);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(181, 28);
			char_literal21=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_bracketedBlock1068); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal21_tree = (object)adaptor.Create(char_literal21, retval);
			adaptor.AddChild(root_0, char_literal21_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracketedBlock", 4);
			LeaveRule("bracketedBlock", 4);
			LeaveRule_bracketedBlock();
			if (state.backtracking > 0) { Memoize(input, 4, bracketedBlock_StartIndex); }

		}
		DebugLocation(182, 4);
		} finally { DebugExitRule(GrammarFileName, "bracketedBlock"); }
		return retval;

	}
	// $ANTLR end "bracketedBlock"

	partial void EnterRule_interfaceDefinition();
	partial void LeaveRule_interfaceDefinition();
	// $ANTLR start "interfaceDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:184:1: interfaceDefinition : Interface interfaceName= UnquotedString ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket ;
	[GrammarRule("interfaceDefinition")]
	private Antlr3AstNode interfaceDefinition()
	{
		EnterRule_interfaceDefinition();
		EnterRule("interfaceDefinition", 5);
		var retval = new Antlr3AstNode("interfaceDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken interfaceName = default(IToken);
		IToken Interface22 = default(IToken);
		IToken OpenCurlyBracket24 = default(IToken);
		IToken CloseCurlyBracket26 = default(IToken);
		Antlr3AstNode interfaceExtends23 = default(Antlr3AstNode);
		Antlr3AstNode interfaceMember25 = default(Antlr3AstNode);

		object interfaceName_tree = default(object);
		object Interface22_tree = default(object);
		object OpenCurlyBracket24_tree = default(object);
		object CloseCurlyBracket26_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceDefinition");
		DebugLocation(184, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:185:5: ( Interface interfaceName= UnquotedString ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:185:7: Interface interfaceName= UnquotedString ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(185, 7);
			Interface22=(IToken)Match(input,Interface,Follow._Interface_in_interfaceDefinition1085); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Interface22_tree = (object)adaptor.Create(Interface22, retval);
			adaptor.AddChild(root_0, Interface22_tree);
			}
			DebugLocation(185, 30);
			interfaceName=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_interfaceDefinition1089); if (state.failed) return retval;
			if (state.backtracking == 0) {
			interfaceName_tree = (object)adaptor.Create(interfaceName, retval);
			adaptor.AddChild(root_0, interfaceName_tree);
			}
			DebugLocation(185, 46);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:185:46: ( interfaceExtends )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==Extends))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:185:46: interfaceExtends
				{
				DebugLocation(185, 46);
				PushFollow(Follow._interfaceExtends_in_interfaceDefinition1091);
				interfaceExtends23=interfaceExtends();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceExtends23.Tree, interfaceExtends23, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(186, 9);
			OpenCurlyBracket24=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_interfaceDefinition1102); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenCurlyBracket24_tree = (object)adaptor.Create(OpenCurlyBracket24, retval);
			adaptor.AddChild(root_0, OpenCurlyBracket24_tree);
			}
			DebugLocation(187, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:187:9: ( interfaceMember )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if (((LA8_1>=Abstract && LA8_1<=AccessModifier)||LA8_1==Const||LA8_1==Function||LA8_1==Static))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:187:9: interfaceMember
					{
					DebugLocation(187, 9);
					PushFollow(Follow._interfaceMember_in_interfaceDefinition1112);
					interfaceMember25=interfaceMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceMember25.Tree, interfaceMember25, retval);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(188, 9);
			CloseCurlyBracket26=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_interfaceDefinition1123); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseCurlyBracket26_tree = (object)adaptor.Create(CloseCurlyBracket26, retval);
			adaptor.AddChild(root_0, CloseCurlyBracket26_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceDefinition", 5);
			LeaveRule("interfaceDefinition", 5);
			LeaveRule_interfaceDefinition();
			if (state.backtracking > 0) { Memoize(input, 5, interfaceDefinition_StartIndex); }

		}
		DebugLocation(189, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceDefinition"); }
		return retval;

	}
	// $ANTLR end "interfaceDefinition"

	partial void EnterRule_interfaceExtends();
	partial void LeaveRule_interfaceExtends();
	// $ANTLR start "interfaceExtends"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:191:1: interfaceExtends : Extends UnquotedString ( Comma ! UnquotedString )* ;
	[GrammarRule("interfaceExtends")]
	private Antlr3AstNode interfaceExtends()
	{
		EnterRule_interfaceExtends();
		EnterRule("interfaceExtends", 6);
		var retval = new Antlr3AstNode("interfaceExtends");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceExtends_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Extends27 = default(IToken);
		IToken UnquotedString28 = default(IToken);
		IToken Comma29 = default(IToken);
		IToken UnquotedString30 = default(IToken);

		object Extends27_tree = default(object);
		object UnquotedString28_tree = default(object);
		object Comma29_tree = default(object);
		object UnquotedString30_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceExtends");
		DebugLocation(191, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:192:5: ( Extends UnquotedString ( Comma ! UnquotedString )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:192:7: Extends UnquotedString ( Comma ! UnquotedString )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(192, 7);
			Extends27=(IToken)Match(input,Extends,Follow._Extends_in_interfaceExtends1140); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Extends27_tree = (object)adaptor.Create(Extends27, retval);
			adaptor.AddChild(root_0, Extends27_tree);
			}
			DebugLocation(192, 15);
			UnquotedString28=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_interfaceExtends1142); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UnquotedString28_tree = (object)adaptor.Create(UnquotedString28, retval);
			adaptor.AddChild(root_0, UnquotedString28_tree);
			}
			DebugLocation(192, 30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:192:30: ( Comma ! UnquotedString )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==Comma))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:192:31: Comma ! UnquotedString
					{
					DebugLocation(192, 36);
					Comma29=(IToken)Match(input,Comma,Follow._Comma_in_interfaceExtends1145); if (state.failed) return retval;
					DebugLocation(192, 38);
					UnquotedString30=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_interfaceExtends1148); if (state.failed) return retval;
					if (state.backtracking == 0) {
					UnquotedString30_tree = (object)adaptor.Create(UnquotedString30, retval);
					adaptor.AddChild(root_0, UnquotedString30_tree);
					}

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceExtends", 6);
			LeaveRule("interfaceExtends", 6);
			LeaveRule_interfaceExtends();
			if (state.backtracking > 0) { Memoize(input, 6, interfaceExtends_StartIndex); }

		}
		DebugLocation(193, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtends"); }
		return retval;

	}
	// $ANTLR end "interfaceExtends"

	partial void EnterRule_interfaceMember();
	partial void LeaveRule_interfaceMember();
	// $ANTLR start "interfaceMember"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:194:1: interfaceMember : ( Const UnquotedString ( Equals atom )? ';' | ( fieldModifier )* Function UnquotedString parametersDefinition ';' );
	[GrammarRule("interfaceMember")]
	private Antlr3AstNode interfaceMember()
	{
		EnterRule_interfaceMember();
		EnterRule("interfaceMember", 7);
		var retval = new Antlr3AstNode("interfaceMember");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Const31 = default(IToken);
		IToken UnquotedString32 = default(IToken);
		IToken Equals33 = default(IToken);
		IToken char_literal35 = default(IToken);
		IToken Function37 = default(IToken);
		IToken UnquotedString38 = default(IToken);
		IToken char_literal40 = default(IToken);
		Antlr3AstNode atom34 = default(Antlr3AstNode);
		Antlr3AstNode fieldModifier36 = default(Antlr3AstNode);
		Antlr3AstNode parametersDefinition39 = default(Antlr3AstNode);

		object Const31_tree = default(object);
		object UnquotedString32_tree = default(object);
		object Equals33_tree = default(object);
		object char_literal35_tree = default(object);
		object Function37_tree = default(object);
		object UnquotedString38_tree = default(object);
		object char_literal40_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceMember");
		DebugLocation(194, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:195:5: ( Const UnquotedString ( Equals atom )? ';' | ( fieldModifier )* Function UnquotedString parametersDefinition ';' )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==Const))
			{
				alt12 = 1;
			}
			else if (((LA12_1>=Abstract && LA12_1<=AccessModifier)||LA12_1==Function||LA12_1==Static))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:195:7: Const UnquotedString ( Equals atom )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 7);
				Const31=(IToken)Match(input,Const,Follow._Const_in_interfaceMember1166); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Const31_tree = (object)adaptor.Create(Const31, retval);
				adaptor.AddChild(root_0, Const31_tree);
				}
				DebugLocation(195, 13);
				UnquotedString32=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_interfaceMember1168); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString32_tree = (object)adaptor.Create(UnquotedString32, retval);
				adaptor.AddChild(root_0, UnquotedString32_tree);
				}
				DebugLocation(195, 28);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:195:28: ( Equals atom )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==Equals))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:195:29: Equals atom
					{
					DebugLocation(195, 29);
					Equals33=(IToken)Match(input,Equals,Follow._Equals_in_interfaceMember1171); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Equals33_tree = (object)adaptor.Create(Equals33, retval);
					adaptor.AddChild(root_0, Equals33_tree);
					}
					DebugLocation(195, 36);
					PushFollow(Follow._atom_in_interfaceMember1173);
					atom34=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom34.Tree, atom34, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(195, 43);
				char_literal35=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember1177); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal35_tree = (object)adaptor.Create(char_literal35, retval);
				adaptor.AddChild(root_0, char_literal35_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:196:7: ( fieldModifier )* Function UnquotedString parametersDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(196, 7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:196:7: ( fieldModifier )*
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_1 = input.LA(1);

					if (((LA11_1>=Abstract && LA11_1<=AccessModifier)||LA11_1==Static))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch ( alt11 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:196:7: fieldModifier
						{
						DebugLocation(196, 7);
						PushFollow(Follow._fieldModifier_in_interfaceMember1186);
						fieldModifier36=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier36.Tree, fieldModifier36, retval);

						}
						break;

					default:
						goto loop11;
					}
				}

				loop11:
					;

				} finally { DebugExitSubRule(11); }

				DebugLocation(196, 22);
				Function37=(IToken)Match(input,Function,Follow._Function_in_interfaceMember1189); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function37_tree = (object)adaptor.Create(Function37, retval);
				adaptor.AddChild(root_0, Function37_tree);
				}
				DebugLocation(196, 31);
				UnquotedString38=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_interfaceMember1191); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString38_tree = (object)adaptor.Create(UnquotedString38, retval);
				adaptor.AddChild(root_0, UnquotedString38_tree);
				}
				DebugLocation(196, 46);
				PushFollow(Follow._parametersDefinition_in_interfaceMember1193);
				parametersDefinition39=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition39.Tree, parametersDefinition39, retval);
				DebugLocation(196, 67);
				char_literal40=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember1195); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal40_tree = (object)adaptor.Create(char_literal40, retval);
				adaptor.AddChild(root_0, char_literal40_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceMember", 7);
			LeaveRule("interfaceMember", 7);
			LeaveRule_interfaceMember();
			if (state.backtracking > 0) { Memoize(input, 7, interfaceMember_StartIndex); }

		}
		DebugLocation(197, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceMember"); }
		return retval;

	}
	// $ANTLR end "interfaceMember"

	partial void EnterRule_classDefinition();
	partial void LeaveRule_classDefinition();
	// $ANTLR start "classDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:199:1: classDefinition : ( classModifier )? Class className= UnquotedString ( Extends extendsclass= UnquotedString )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket ;
	[GrammarRule("classDefinition")]
	private Antlr3AstNode classDefinition()
	{
		EnterRule_classDefinition();
		EnterRule("classDefinition", 8);
		var retval = new Antlr3AstNode("classDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int classDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken className = default(IToken);
		IToken extendsclass = default(IToken);
		IToken Class42 = default(IToken);
		IToken Extends43 = default(IToken);
		IToken OpenCurlyBracket45 = default(IToken);
		IToken CloseCurlyBracket47 = default(IToken);
		Antlr3AstNode classModifier41 = default(Antlr3AstNode);
		Antlr3AstNode classImplements44 = default(Antlr3AstNode);
		Antlr3AstNode classMember46 = default(Antlr3AstNode);

		object className_tree = default(object);
		object extendsclass_tree = default(object);
		object Class42_tree = default(object);
		object Extends43_tree = default(object);
		object OpenCurlyBracket45_tree = default(object);
		object CloseCurlyBracket47_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classDefinition");
		DebugLocation(199, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:200:5: ( ( classModifier )? Class className= UnquotedString ( Extends extendsclass= UnquotedString )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:200:9: ( classModifier )? Class className= UnquotedString ( Extends extendsclass= UnquotedString )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(200, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:200:9: ( classModifier )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==Abstract))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:200:9: classModifier
				{
				DebugLocation(200, 9);
				PushFollow(Follow._classModifier_in_classDefinition1214);
				classModifier41=classModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classModifier41.Tree, classModifier41, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(201, 9);
			Class42=(IToken)Match(input,Class,Follow._Class_in_classDefinition1226); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Class42_tree = (object)adaptor.Create(Class42, retval);
			adaptor.AddChild(root_0, Class42_tree);
			}
			DebugLocation(201, 24);
			className=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classDefinition1230); if (state.failed) return retval;
			if (state.backtracking == 0) {
			className_tree = (object)adaptor.Create(className, retval);
			adaptor.AddChild(root_0, className_tree);
			}
			DebugLocation(202, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:202:9: ( Extends extendsclass= UnquotedString )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==Extends))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:202:10: Extends extendsclass= UnquotedString
				{
				DebugLocation(202, 10);
				Extends43=(IToken)Match(input,Extends,Follow._Extends_in_classDefinition1242); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Extends43_tree = (object)adaptor.Create(Extends43, retval);
				adaptor.AddChild(root_0, Extends43_tree);
				}
				DebugLocation(202, 30);
				extendsclass=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classDefinition1246); if (state.failed) return retval;
				if (state.backtracking == 0) {
				extendsclass_tree = (object)adaptor.Create(extendsclass, retval);
				adaptor.AddChild(root_0, extendsclass_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(203, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:203:9: ( classImplements )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==Implements))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:203:9: classImplements
				{
				DebugLocation(203, 9);
				PushFollow(Follow._classImplements_in_classDefinition1259);
				classImplements44=classImplements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classImplements44.Tree, classImplements44, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(204, 9);
			OpenCurlyBracket45=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_classDefinition1270); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenCurlyBracket45_tree = (object)adaptor.Create(OpenCurlyBracket45, retval);
			adaptor.AddChild(root_0, OpenCurlyBracket45_tree);
			}
			DebugLocation(205, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:205:9: ( classMember )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if (((LA16_1>=Abstract && LA16_1<=AccessModifier)||LA16_1==Const||LA16_1==Dollar||LA16_1==Function||LA16_1==Static||LA16_1==Var))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:205:9: classMember
					{
					DebugLocation(205, 9);
					PushFollow(Follow._classMember_in_classDefinition1280);
					classMember46=classMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classMember46.Tree, classMember46, retval);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(206, 9);
			CloseCurlyBracket47=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_classDefinition1291); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseCurlyBracket47_tree = (object)adaptor.Create(CloseCurlyBracket47, retval);
			adaptor.AddChild(root_0, CloseCurlyBracket47_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classDefinition", 8);
			LeaveRule("classDefinition", 8);
			LeaveRule_classDefinition();
			if (state.backtracking > 0) { Memoize(input, 8, classDefinition_StartIndex); }

		}
		DebugLocation(207, 4);
		} finally { DebugExitRule(GrammarFileName, "classDefinition"); }
		return retval;

	}
	// $ANTLR end "classDefinition"

	partial void EnterRule_classImplements();
	partial void LeaveRule_classImplements();
	// $ANTLR start "classImplements"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:209:1: classImplements : Implements ( UnquotedString ( Comma ! UnquotedString )* ) ;
	[GrammarRule("classImplements")]
	private Antlr3AstNode classImplements()
	{
		EnterRule_classImplements();
		EnterRule("classImplements", 9);
		var retval = new Antlr3AstNode("classImplements");
		
		retval.Start = (IToken)input.LT(1);
		int classImplements_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Implements48 = default(IToken);
		IToken UnquotedString49 = default(IToken);
		IToken Comma50 = default(IToken);
		IToken UnquotedString51 = default(IToken);

		object Implements48_tree = default(object);
		object UnquotedString49_tree = default(object);
		object Comma50_tree = default(object);
		object UnquotedString51_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classImplements");
		DebugLocation(209, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:210:5: ( Implements ( UnquotedString ( Comma ! UnquotedString )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:210:8: Implements ( UnquotedString ( Comma ! UnquotedString )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(210, 8);
			Implements48=(IToken)Match(input,Implements,Follow._Implements_in_classImplements1314); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Implements48_tree = (object)adaptor.Create(Implements48, retval);
			adaptor.AddChild(root_0, Implements48_tree);
			}
			DebugLocation(210, 19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:210:19: ( UnquotedString ( Comma ! UnquotedString )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:210:20: UnquotedString ( Comma ! UnquotedString )*
			{
			DebugLocation(210, 20);
			UnquotedString49=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classImplements1317); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UnquotedString49_tree = (object)adaptor.Create(UnquotedString49, retval);
			adaptor.AddChild(root_0, UnquotedString49_tree);
			}
			DebugLocation(210, 35);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:210:35: ( Comma ! UnquotedString )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==Comma))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:210:36: Comma ! UnquotedString
					{
					DebugLocation(210, 41);
					Comma50=(IToken)Match(input,Comma,Follow._Comma_in_classImplements1320); if (state.failed) return retval;
					DebugLocation(210, 43);
					UnquotedString51=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classImplements1323); if (state.failed) return retval;
					if (state.backtracking == 0) {
					UnquotedString51_tree = (object)adaptor.Create(UnquotedString51, retval);
					adaptor.AddChild(root_0, UnquotedString51_tree);
					}

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classImplements", 9);
			LeaveRule("classImplements", 9);
			LeaveRule_classImplements();
			if (state.backtracking > 0) { Memoize(input, 9, classImplements_StartIndex); }

		}
		DebugLocation(211, 4);
		} finally { DebugExitRule(GrammarFileName, "classImplements"); }
		return retval;

	}
	// $ANTLR end "classImplements"

	partial void EnterRule_classMember();
	partial void LeaveRule_classMember();
	// $ANTLR start "classMember"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:213:1: classMember : ( ( fieldModifier )* Function UnquotedString parametersDefinition ( bracketedBlock | ';' ) | Var Dollar UnquotedString ( Equals atom )? ';' | Const UnquotedString ( Equals atom )? ';' | ( fieldModifier )* ( Dollar UnquotedString ) ( Equals atom )? ';' );
	[GrammarRule("classMember")]
	private Antlr3AstNode classMember()
	{
		EnterRule_classMember();
		EnterRule("classMember", 10);
		var retval = new Antlr3AstNode("classMember");
		
		retval.Start = (IToken)input.LT(1);
		int classMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function53 = default(IToken);
		IToken UnquotedString54 = default(IToken);
		IToken char_literal57 = default(IToken);
		IToken Var58 = default(IToken);
		IToken Dollar59 = default(IToken);
		IToken UnquotedString60 = default(IToken);
		IToken Equals61 = default(IToken);
		IToken char_literal63 = default(IToken);
		IToken Const64 = default(IToken);
		IToken UnquotedString65 = default(IToken);
		IToken Equals66 = default(IToken);
		IToken char_literal68 = default(IToken);
		IToken Dollar70 = default(IToken);
		IToken UnquotedString71 = default(IToken);
		IToken Equals72 = default(IToken);
		IToken char_literal74 = default(IToken);
		Antlr3AstNode fieldModifier52 = default(Antlr3AstNode);
		Antlr3AstNode parametersDefinition55 = default(Antlr3AstNode);
		Antlr3AstNode bracketedBlock56 = default(Antlr3AstNode);
		Antlr3AstNode atom62 = default(Antlr3AstNode);
		Antlr3AstNode atom67 = default(Antlr3AstNode);
		Antlr3AstNode fieldModifier69 = default(Antlr3AstNode);
		Antlr3AstNode atom73 = default(Antlr3AstNode);

		object Function53_tree = default(object);
		object UnquotedString54_tree = default(object);
		object char_literal57_tree = default(object);
		object Var58_tree = default(object);
		object Dollar59_tree = default(object);
		object UnquotedString60_tree = default(object);
		object Equals61_tree = default(object);
		object char_literal63_tree = default(object);
		object Const64_tree = default(object);
		object UnquotedString65_tree = default(object);
		object Equals66_tree = default(object);
		object char_literal68_tree = default(object);
		object Dollar70_tree = default(object);
		object UnquotedString71_tree = default(object);
		object Equals72_tree = default(object);
		object char_literal74_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classMember");
		DebugLocation(213, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:5: ( ( fieldModifier )* Function UnquotedString parametersDefinition ( bracketedBlock | ';' ) | Var Dollar UnquotedString ( Equals atom )? ';' | Const UnquotedString ( Equals atom )? ';' | ( fieldModifier )* ( Dollar UnquotedString ) ( Equals atom )? ';' )
			int alt24=4;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case Abstract:
			case AccessModifier:
			case Static:
				{
				switch (input.LA(2))
				{
				case Function:
					{
					alt24 = 1;
					}
					break;
				case Abstract:
				case AccessModifier:
				case Static:
					{
					int LA24_3 = input.LA(3);

					if ((EvaluatePredicate(synpred27_Php_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 7, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Dollar:
					{
					alt24 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case Function:
				{
				alt24 = 1;
				}
				break;
			case Var:
				{
				alt24 = 2;
				}
				break;
			case Const:
				{
				alt24 = 3;
				}
				break;
			case Dollar:
				{
				alt24 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:7: ( fieldModifier )* Function UnquotedString parametersDefinition ( bracketedBlock | ';' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(214, 7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:7: ( fieldModifier )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_1 = input.LA(1);

					if (((LA18_1>=Abstract && LA18_1<=AccessModifier)||LA18_1==Static))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:7: fieldModifier
						{
						DebugLocation(214, 7);
						PushFollow(Follow._fieldModifier_in_classMember1343);
						fieldModifier52=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier52.Tree, fieldModifier52, retval);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(214, 22);
				Function53=(IToken)Match(input,Function,Follow._Function_in_classMember1346); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function53_tree = (object)adaptor.Create(Function53, retval);
				adaptor.AddChild(root_0, Function53_tree);
				}
				DebugLocation(214, 31);
				UnquotedString54=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classMember1348); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString54_tree = (object)adaptor.Create(UnquotedString54, retval);
				adaptor.AddChild(root_0, UnquotedString54_tree);
				}
				DebugLocation(214, 46);
				PushFollow(Follow._parametersDefinition_in_classMember1350);
				parametersDefinition55=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition55.Tree, parametersDefinition55, retval);
				DebugLocation(215, 9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:215:9: ( bracketedBlock | ';' )
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==OpenCurlyBracket))
				{
					alt19 = 1;
				}
				else if ((LA19_1==SemiColon))
				{
					alt19 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:215:10: bracketedBlock
					{
					DebugLocation(215, 10);
					PushFollow(Follow._bracketedBlock_in_classMember1362);
					bracketedBlock56=bracketedBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock56.Tree, bracketedBlock56, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:215:27: ';'
					{
					DebugLocation(215, 27);
					char_literal57=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember1366); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal57_tree = (object)adaptor.Create(char_literal57, retval);
					adaptor.AddChild(root_0, char_literal57_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:216:7: Var Dollar UnquotedString ( Equals atom )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(216, 7);
				Var58=(IToken)Match(input,Var,Follow._Var_in_classMember1375); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Var58_tree = (object)adaptor.Create(Var58, retval);
				adaptor.AddChild(root_0, Var58_tree);
				}
				DebugLocation(216, 11);
				Dollar59=(IToken)Match(input,Dollar,Follow._Dollar_in_classMember1377); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Dollar59_tree = (object)adaptor.Create(Dollar59, retval);
				adaptor.AddChild(root_0, Dollar59_tree);
				}
				DebugLocation(216, 18);
				UnquotedString60=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classMember1379); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString60_tree = (object)adaptor.Create(UnquotedString60, retval);
				adaptor.AddChild(root_0, UnquotedString60_tree);
				}
				DebugLocation(216, 33);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:216:33: ( Equals atom )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==Equals))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:216:34: Equals atom
					{
					DebugLocation(216, 34);
					Equals61=(IToken)Match(input,Equals,Follow._Equals_in_classMember1382); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Equals61_tree = (object)adaptor.Create(Equals61, retval);
					adaptor.AddChild(root_0, Equals61_tree);
					}
					DebugLocation(216, 41);
					PushFollow(Follow._atom_in_classMember1384);
					atom62=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom62.Tree, atom62, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(20); }

				DebugLocation(216, 48);
				char_literal63=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember1388); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal63_tree = (object)adaptor.Create(char_literal63, retval);
				adaptor.AddChild(root_0, char_literal63_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:217:7: Const UnquotedString ( Equals atom )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(217, 7);
				Const64=(IToken)Match(input,Const,Follow._Const_in_classMember1397); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Const64_tree = (object)adaptor.Create(Const64, retval);
				adaptor.AddChild(root_0, Const64_tree);
				}
				DebugLocation(217, 13);
				UnquotedString65=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classMember1399); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString65_tree = (object)adaptor.Create(UnquotedString65, retval);
				adaptor.AddChild(root_0, UnquotedString65_tree);
				}
				DebugLocation(217, 28);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:217:28: ( Equals atom )?
				int alt21=2;
				try { DebugEnterSubRule(21);
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==Equals))
				{
					alt21 = 1;
				}
				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:217:29: Equals atom
					{
					DebugLocation(217, 29);
					Equals66=(IToken)Match(input,Equals,Follow._Equals_in_classMember1402); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Equals66_tree = (object)adaptor.Create(Equals66, retval);
					adaptor.AddChild(root_0, Equals66_tree);
					}
					DebugLocation(217, 36);
					PushFollow(Follow._atom_in_classMember1404);
					atom67=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom67.Tree, atom67, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(21); }

				DebugLocation(217, 43);
				char_literal68=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember1408); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal68_tree = (object)adaptor.Create(char_literal68, retval);
				adaptor.AddChild(root_0, char_literal68_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:218:7: ( fieldModifier )* ( Dollar UnquotedString ) ( Equals atom )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(218, 7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:218:7: ( fieldModifier )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_1 = input.LA(1);

					if (((LA22_1>=Abstract && LA22_1<=AccessModifier)||LA22_1==Static))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:218:7: fieldModifier
						{
						DebugLocation(218, 7);
						PushFollow(Follow._fieldModifier_in_classMember1417);
						fieldModifier69=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier69.Tree, fieldModifier69, retval);

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(218, 22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:218:22: ( Dollar UnquotedString )
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:218:23: Dollar UnquotedString
				{
				DebugLocation(218, 23);
				Dollar70=(IToken)Match(input,Dollar,Follow._Dollar_in_classMember1421); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Dollar70_tree = (object)adaptor.Create(Dollar70, retval);
				adaptor.AddChild(root_0, Dollar70_tree);
				}
				DebugLocation(218, 30);
				UnquotedString71=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classMember1423); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString71_tree = (object)adaptor.Create(UnquotedString71, retval);
				adaptor.AddChild(root_0, UnquotedString71_tree);
				}

				}

				DebugLocation(218, 46);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:218:46: ( Equals atom )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==Equals))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:218:47: Equals atom
					{
					DebugLocation(218, 47);
					Equals72=(IToken)Match(input,Equals,Follow._Equals_in_classMember1427); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Equals72_tree = (object)adaptor.Create(Equals72, retval);
					adaptor.AddChild(root_0, Equals72_tree);
					}
					DebugLocation(218, 54);
					PushFollow(Follow._atom_in_classMember1429);
					atom73=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom73.Tree, atom73, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(218, 61);
				char_literal74=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember1433); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal74_tree = (object)adaptor.Create(char_literal74, retval);
				adaptor.AddChild(root_0, char_literal74_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classMember", 10);
			LeaveRule("classMember", 10);
			LeaveRule_classMember();
			if (state.backtracking > 0) { Memoize(input, 10, classMember_StartIndex); }

		}
		DebugLocation(219, 4);
		} finally { DebugExitRule(GrammarFileName, "classMember"); }
		return retval;

	}
	// $ANTLR end "classMember"

	partial void EnterRule_fieldDefinition();
	partial void LeaveRule_fieldDefinition();
	// $ANTLR start "fieldDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:221:1: fieldDefinition : Dollar UnquotedString ( Equals atom )? ';' ;
	[GrammarRule("fieldDefinition")]
	private Antlr3AstNode fieldDefinition()
	{
		EnterRule_fieldDefinition();
		EnterRule("fieldDefinition", 11);
		var retval = new Antlr3AstNode("fieldDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int fieldDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Dollar75 = default(IToken);
		IToken UnquotedString76 = default(IToken);
		IToken Equals77 = default(IToken);
		IToken char_literal79 = default(IToken);
		Antlr3AstNode atom78 = default(Antlr3AstNode);

		object Dollar75_tree = default(object);
		object UnquotedString76_tree = default(object);
		object Equals77_tree = default(object);
		object char_literal79_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldDefinition");
		DebugLocation(221, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:222:5: ( Dollar UnquotedString ( Equals atom )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:222:7: Dollar UnquotedString ( Equals atom )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(222, 7);
			Dollar75=(IToken)Match(input,Dollar,Follow._Dollar_in_fieldDefinition1451); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Dollar75_tree = (object)adaptor.Create(Dollar75, retval);
			adaptor.AddChild(root_0, Dollar75_tree);
			}
			DebugLocation(222, 14);
			UnquotedString76=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_fieldDefinition1453); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UnquotedString76_tree = (object)adaptor.Create(UnquotedString76, retval);
			adaptor.AddChild(root_0, UnquotedString76_tree);
			}
			DebugLocation(222, 29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:222:29: ( Equals atom )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==Equals))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:222:30: Equals atom
				{
				DebugLocation(222, 30);
				Equals77=(IToken)Match(input,Equals,Follow._Equals_in_fieldDefinition1456); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals77_tree = (object)adaptor.Create(Equals77, retval);
				adaptor.AddChild(root_0, Equals77_tree);
				}
				DebugLocation(222, 37);
				PushFollow(Follow._atom_in_fieldDefinition1458);
				atom78=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom78.Tree, atom78, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(222, 44);
			char_literal79=(IToken)Match(input,SemiColon,Follow._SemiColon_in_fieldDefinition1462); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal79_tree = (object)adaptor.Create(char_literal79, retval);
			adaptor.AddChild(root_0, char_literal79_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldDefinition", 11);
			LeaveRule("fieldDefinition", 11);
			LeaveRule_fieldDefinition();
			if (state.backtracking > 0) { Memoize(input, 11, fieldDefinition_StartIndex); }

		}
		DebugLocation(223, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldDefinition"); }
		return retval;

	}
	// $ANTLR end "fieldDefinition"

	partial void EnterRule_classModifier();
	partial void LeaveRule_classModifier();
	// $ANTLR start "classModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:225:1: classModifier : 'abstract' ;
	[GrammarRule("classModifier")]
	private Antlr3AstNode classModifier()
	{
		EnterRule_classModifier();
		EnterRule("classModifier", 12);
		var retval = new Antlr3AstNode("classModifier");
		
		retval.Start = (IToken)input.LT(1);
		int classModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal80 = default(IToken);

		object string_literal80_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classModifier");
		DebugLocation(225, 16);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:226:5: ( 'abstract' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:226:7: 'abstract'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(226, 7);
			string_literal80=(IToken)Match(input,Abstract,Follow._Abstract_in_classModifier1483); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal80_tree = (object)adaptor.Create(string_literal80, retval);
			adaptor.AddChild(root_0, string_literal80_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classModifier", 12);
			LeaveRule("classModifier", 12);
			LeaveRule_classModifier();
			if (state.backtracking > 0) { Memoize(input, 12, classModifier_StartIndex); }

		}
		DebugLocation(226, 16);
		} finally { DebugExitRule(GrammarFileName, "classModifier"); }
		return retval;

	}
	// $ANTLR end "classModifier"

	partial void EnterRule_fieldModifier();
	partial void LeaveRule_fieldModifier();
	// $ANTLR start "fieldModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:228:1: fieldModifier : ( AccessModifier | 'abstract' | 'static' );
	[GrammarRule("fieldModifier")]
	private Antlr3AstNode fieldModifier()
	{
		EnterRule_fieldModifier();
		EnterRule("fieldModifier", 13);
		var retval = new Antlr3AstNode("fieldModifier");
		
		retval.Start = (IToken)input.LT(1);
		int fieldModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set81 = default(IToken);

		object set81_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldModifier");
		DebugLocation(228, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:229:5: ( AccessModifier | 'abstract' | 'static' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(229, 5);

			set81=(IToken)input.LT(1);
			if ((input.LA(1)>=Abstract && input.LA(1)<=AccessModifier)||input.LA(1)==Static)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set81, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldModifier", 13);
			LeaveRule("fieldModifier", 13);
			LeaveRule_fieldModifier();
			if (state.backtracking > 0) { Memoize(input, 13, fieldModifier_StartIndex); }

		}
		DebugLocation(230, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldModifier"); }
		return retval;

	}
	// $ANTLR end "fieldModifier"

	partial void EnterRule_complexStatement();
	partial void LeaveRule_complexStatement();
	// $ANTLR start "complexStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:233:1: complexStatement : ( If '(' ifCondition= expression ')' ifTrue= statement ( conditional )? | For '(' forInit forCondition forUpdate ')' statement | Foreach '(' variable 'as' arrayEntry ')' statement | While '(' (whileCondition= expression )? ')' statement | Do statement While '(' doCondition= expression ')' ';' | Switch '(' expression ')' '{' cases '}' | functionDefinition );
	[GrammarRule("complexStatement")]
	private Antlr3AstNode complexStatement()
	{
		EnterRule_complexStatement();
		EnterRule("complexStatement", 14);
		var retval = new Antlr3AstNode("complexStatement");
		
		retval.Start = (IToken)input.LT(1);
		int complexStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken If82 = default(IToken);
		IToken char_literal83 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken For86 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken Foreach93 = default(IToken);
		IToken char_literal94 = default(IToken);
		IToken string_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken While100 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal102 = default(IToken);
		IToken Do104 = default(IToken);
		IToken While106 = default(IToken);
		IToken char_literal107 = default(IToken);
		IToken char_literal108 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken Switch110 = default(IToken);
		IToken char_literal111 = default(IToken);
		IToken char_literal113 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken char_literal116 = default(IToken);
		Antlr3AstNode ifCondition = default(Antlr3AstNode);
		Antlr3AstNode ifTrue = default(Antlr3AstNode);
		Antlr3AstNode whileCondition = default(Antlr3AstNode);
		Antlr3AstNode doCondition = default(Antlr3AstNode);
		Antlr3AstNode conditional85 = default(Antlr3AstNode);
		Antlr3AstNode forInit88 = default(Antlr3AstNode);
		Antlr3AstNode forCondition89 = default(Antlr3AstNode);
		Antlr3AstNode forUpdate90 = default(Antlr3AstNode);
		Antlr3AstNode statement92 = default(Antlr3AstNode);
		Antlr3AstNode variable95 = default(Antlr3AstNode);
		Antlr3AstNode arrayEntry97 = default(Antlr3AstNode);
		Antlr3AstNode statement99 = default(Antlr3AstNode);
		Antlr3AstNode statement103 = default(Antlr3AstNode);
		Antlr3AstNode statement105 = default(Antlr3AstNode);
		Antlr3AstNode expression112 = default(Antlr3AstNode);
		Antlr3AstNode cases115 = default(Antlr3AstNode);
		Antlr3AstNode functionDefinition117 = default(Antlr3AstNode);

		object If82_tree = default(object);
		object char_literal83_tree = default(object);
		object char_literal84_tree = default(object);
		object For86_tree = default(object);
		object char_literal87_tree = default(object);
		object char_literal91_tree = default(object);
		object Foreach93_tree = default(object);
		object char_literal94_tree = default(object);
		object string_literal96_tree = default(object);
		object char_literal98_tree = default(object);
		object While100_tree = default(object);
		object char_literal101_tree = default(object);
		object char_literal102_tree = default(object);
		object Do104_tree = default(object);
		object While106_tree = default(object);
		object char_literal107_tree = default(object);
		object char_literal108_tree = default(object);
		object char_literal109_tree = default(object);
		object Switch110_tree = default(object);
		object char_literal111_tree = default(object);
		object char_literal113_tree = default(object);
		object char_literal114_tree = default(object);
		object char_literal116_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "complexStatement");
		DebugLocation(233, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:234:5: ( If '(' ifCondition= expression ')' ifTrue= statement ( conditional )? | For '(' forInit forCondition forUpdate ')' statement | Foreach '(' variable 'as' arrayEntry ')' statement | While '(' (whileCondition= expression )? ')' statement | Do statement While '(' doCondition= expression ')' ';' | Switch '(' expression ')' '{' cases '}' | functionDefinition )
			int alt28=7;
			try { DebugEnterDecision(28, false);
			switch (input.LA(1))
			{
			case If:
				{
				alt28 = 1;
				}
				break;
			case For:
				{
				alt28 = 2;
				}
				break;
			case Foreach:
				{
				alt28 = 3;
				}
				break;
			case While:
				{
				alt28 = 4;
				}
				break;
			case Do:
				{
				alt28 = 5;
				}
				break;
			case Switch:
				{
				alt28 = 6;
				}
				break;
			case Function:
				{
				alt28 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:234:7: If '(' ifCondition= expression ')' ifTrue= statement ( conditional )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(234, 7);
				If82=(IToken)Match(input,If,Follow._If_in_complexStatement1526); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If82_tree = (object)adaptor.Create(If82, retval);
				adaptor.AddChild(root_0, If82_tree);
				}
				DebugLocation(234, 10);
				char_literal83=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1528); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal83_tree = (object)adaptor.Create(char_literal83, retval);
				adaptor.AddChild(root_0, char_literal83_tree);
				}
				DebugLocation(234, 25);
				PushFollow(Follow._expression_in_complexStatement1532);
				ifCondition=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifCondition.Tree, ifCondition, retval);
				DebugLocation(234, 37);
				char_literal84=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1534); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal84_tree = (object)adaptor.Create(char_literal84, retval);
				adaptor.AddChild(root_0, char_literal84_tree);
				}
				DebugLocation(234, 47);
				PushFollow(Follow._statement_in_complexStatement1538);
				ifTrue=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifTrue.Tree, ifTrue, retval);
				DebugLocation(234, 58);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:234:58: ( conditional )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				try
				{
					alt26 = dfa26.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:234:58: conditional
					{
					DebugLocation(234, 58);
					PushFollow(Follow._conditional_in_complexStatement1540);
					conditional85=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional85.Tree, conditional85, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:235:7: For '(' forInit forCondition forUpdate ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(235, 7);
				For86=(IToken)Match(input,For,Follow._For_in_complexStatement1549); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For86_tree = (object)adaptor.Create(For86, retval);
				adaptor.AddChild(root_0, For86_tree);
				}
				DebugLocation(235, 11);
				char_literal87=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1551); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal87_tree = (object)adaptor.Create(char_literal87, retval);
				adaptor.AddChild(root_0, char_literal87_tree);
				}
				DebugLocation(235, 15);
				PushFollow(Follow._forInit_in_complexStatement1553);
				forInit88=forInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forInit88.Tree, forInit88, retval);
				DebugLocation(235, 23);
				PushFollow(Follow._forCondition_in_complexStatement1555);
				forCondition89=forCondition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forCondition89.Tree, forCondition89, retval);
				DebugLocation(235, 36);
				PushFollow(Follow._forUpdate_in_complexStatement1557);
				forUpdate90=forUpdate();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forUpdate90.Tree, forUpdate90, retval);
				DebugLocation(235, 46);
				char_literal91=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1559); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal91_tree = (object)adaptor.Create(char_literal91, retval);
				adaptor.AddChild(root_0, char_literal91_tree);
				}
				DebugLocation(235, 50);
				PushFollow(Follow._statement_in_complexStatement1561);
				statement92=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement92.Tree, statement92, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:236:7: Foreach '(' variable 'as' arrayEntry ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(236, 7);
				Foreach93=(IToken)Match(input,Foreach,Follow._Foreach_in_complexStatement1569); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach93_tree = (object)adaptor.Create(Foreach93, retval);
				adaptor.AddChild(root_0, Foreach93_tree);
				}
				DebugLocation(236, 15);
				char_literal94=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1571); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal94_tree = (object)adaptor.Create(char_literal94, retval);
				adaptor.AddChild(root_0, char_literal94_tree);
				}
				DebugLocation(236, 19);
				PushFollow(Follow._variable_in_complexStatement1573);
				variable95=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable95.Tree, variable95, retval);
				DebugLocation(236, 28);
				string_literal96=(IToken)Match(input,114,Follow._114_in_complexStatement1575); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal96_tree = (object)adaptor.Create(string_literal96, retval);
				adaptor.AddChild(root_0, string_literal96_tree);
				}
				DebugLocation(236, 33);
				PushFollow(Follow._arrayEntry_in_complexStatement1577);
				arrayEntry97=arrayEntry();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry97.Tree, arrayEntry97, retval);
				DebugLocation(236, 44);
				char_literal98=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1579); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal98_tree = (object)adaptor.Create(char_literal98, retval);
				adaptor.AddChild(root_0, char_literal98_tree);
				}
				DebugLocation(236, 48);
				PushFollow(Follow._statement_in_complexStatement1581);
				statement99=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement99.Tree, statement99, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:237:7: While '(' (whileCondition= expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(237, 7);
				While100=(IToken)Match(input,While,Follow._While_in_complexStatement1589); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While100_tree = (object)adaptor.Create(While100, retval);
				adaptor.AddChild(root_0, While100_tree);
				}
				DebugLocation(237, 13);
				char_literal101=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1591); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal101_tree = (object)adaptor.Create(char_literal101, retval);
				adaptor.AddChild(root_0, char_literal101_tree);
				}
				DebugLocation(237, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:237:31: (whileCondition= expression )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==Ampersand||LA27_1==Array||LA27_1==Bang||LA27_1==Boolean||LA27_1==Clone||LA27_1==Dollar||LA27_1==DoubleQuotedString||LA27_1==HereDoc||LA27_1==IncrementOperator||LA27_1==Integer||LA27_1==List||LA27_1==Minus||LA27_1==New||LA27_1==OpenRoundBracket||LA27_1==Real||LA27_1==SingleQuotedString||LA27_1==SuppressWarnings||LA27_1==Tilde||LA27_1==UnquotedString))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:237:31: whileCondition= expression
					{
					DebugLocation(237, 31);
					PushFollow(Follow._expression_in_complexStatement1595);
					whileCondition=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, whileCondition.Tree, whileCondition, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(237, 44);
				char_literal102=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1598); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal102_tree = (object)adaptor.Create(char_literal102, retval);
				adaptor.AddChild(root_0, char_literal102_tree);
				}
				DebugLocation(237, 48);
				PushFollow(Follow._statement_in_complexStatement1600);
				statement103=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement103.Tree, statement103, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:238:7: Do statement While '(' doCondition= expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(238, 7);
				Do104=(IToken)Match(input,Do,Follow._Do_in_complexStatement1608); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Do104_tree = (object)adaptor.Create(Do104, retval);
				adaptor.AddChild(root_0, Do104_tree);
				}
				DebugLocation(238, 10);
				PushFollow(Follow._statement_in_complexStatement1610);
				statement105=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement105.Tree, statement105, retval);
				DebugLocation(238, 20);
				While106=(IToken)Match(input,While,Follow._While_in_complexStatement1612); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While106_tree = (object)adaptor.Create(While106, retval);
				adaptor.AddChild(root_0, While106_tree);
				}
				DebugLocation(238, 26);
				char_literal107=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1614); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal107_tree = (object)adaptor.Create(char_literal107, retval);
				adaptor.AddChild(root_0, char_literal107_tree);
				}
				DebugLocation(238, 41);
				PushFollow(Follow._expression_in_complexStatement1618);
				doCondition=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, doCondition.Tree, doCondition, retval);
				DebugLocation(238, 53);
				char_literal108=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1620); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal108_tree = (object)adaptor.Create(char_literal108, retval);
				adaptor.AddChild(root_0, char_literal108_tree);
				}
				DebugLocation(238, 57);
				char_literal109=(IToken)Match(input,SemiColon,Follow._SemiColon_in_complexStatement1622); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal109_tree = (object)adaptor.Create(char_literal109, retval);
				adaptor.AddChild(root_0, char_literal109_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:239:7: Switch '(' expression ')' '{' cases '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(239, 7);
				Switch110=(IToken)Match(input,Switch,Follow._Switch_in_complexStatement1630); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Switch110_tree = (object)adaptor.Create(Switch110, retval);
				adaptor.AddChild(root_0, Switch110_tree);
				}
				DebugLocation(239, 14);
				char_literal111=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1632); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal111_tree = (object)adaptor.Create(char_literal111, retval);
				adaptor.AddChild(root_0, char_literal111_tree);
				}
				DebugLocation(239, 18);
				PushFollow(Follow._expression_in_complexStatement1634);
				expression112=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression112.Tree, expression112, retval);
				DebugLocation(239, 29);
				char_literal113=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1636); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal113_tree = (object)adaptor.Create(char_literal113, retval);
				adaptor.AddChild(root_0, char_literal113_tree);
				}
				DebugLocation(239, 33);
				char_literal114=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_complexStatement1638); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal114_tree = (object)adaptor.Create(char_literal114, retval);
				adaptor.AddChild(root_0, char_literal114_tree);
				}
				DebugLocation(239, 36);
				PushFollow(Follow._cases_in_complexStatement1639);
				cases115=cases();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cases115.Tree, cases115, retval);
				DebugLocation(239, 41);
				char_literal116=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_complexStatement1640); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal116_tree = (object)adaptor.Create(char_literal116, retval);
				adaptor.AddChild(root_0, char_literal116_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:240:7: functionDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(240, 7);
				PushFollow(Follow._functionDefinition_in_complexStatement1648);
				functionDefinition117=functionDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionDefinition117.Tree, functionDefinition117, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("complexStatement", 14);
			LeaveRule("complexStatement", 14);
			LeaveRule_complexStatement();
			if (state.backtracking > 0) { Memoize(input, 14, complexStatement_StartIndex); }

		}
		DebugLocation(241, 4);
		} finally { DebugExitRule(GrammarFileName, "complexStatement"); }
		return retval;

	}
	// $ANTLR end "complexStatement"

	partial void EnterRule_simpleStatement();
	partial void LeaveRule_simpleStatement();
	// $ANTLR start "simpleStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:243:1: simpleStatement : ( Echo commaList | Global name ( ',' ! name )* | Static variable Equals ! atom | Break ( Integer )? | Continue ( Integer )? | Goto UnquotedString | Return ( expression )? | RequireOperator expression | expression );
	[GrammarRule("simpleStatement")]
	private Antlr3AstNode simpleStatement()
	{
		EnterRule_simpleStatement();
		EnterRule("simpleStatement", 15);
		var retval = new Antlr3AstNode("simpleStatement");
		
		retval.Start = (IToken)input.LT(1);
		int simpleStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Echo118 = default(IToken);
		IToken Global120 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken Static124 = default(IToken);
		IToken Equals126 = default(IToken);
		IToken Break128 = default(IToken);
		IToken Integer129 = default(IToken);
		IToken Continue130 = default(IToken);
		IToken Integer131 = default(IToken);
		IToken Goto132 = default(IToken);
		IToken UnquotedString133 = default(IToken);
		IToken Return134 = default(IToken);
		IToken RequireOperator136 = default(IToken);
		Antlr3AstNode commaList119 = default(Antlr3AstNode);
		Antlr3AstNode name121 = default(Antlr3AstNode);
		Antlr3AstNode name123 = default(Antlr3AstNode);
		Antlr3AstNode variable125 = default(Antlr3AstNode);
		Antlr3AstNode atom127 = default(Antlr3AstNode);
		Antlr3AstNode expression135 = default(Antlr3AstNode);
		Antlr3AstNode expression137 = default(Antlr3AstNode);
		Antlr3AstNode expression138 = default(Antlr3AstNode);

		object Echo118_tree = default(object);
		object Global120_tree = default(object);
		object char_literal122_tree = default(object);
		object Static124_tree = default(object);
		object Equals126_tree = default(object);
		object Break128_tree = default(object);
		object Integer129_tree = default(object);
		object Continue130_tree = default(object);
		object Integer131_tree = default(object);
		object Goto132_tree = default(object);
		object UnquotedString133_tree = default(object);
		object Return134_tree = default(object);
		object RequireOperator136_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "simpleStatement");
		DebugLocation(243, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:244:5: ( Echo commaList | Global name ( ',' ! name )* | Static variable Equals ! atom | Break ( Integer )? | Continue ( Integer )? | Goto UnquotedString | Return ( expression )? | RequireOperator expression | expression )
			int alt33=9;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case Echo:
				{
				alt33 = 1;
				}
				break;
			case Global:
				{
				alt33 = 2;
				}
				break;
			case Static:
				{
				alt33 = 3;
				}
				break;
			case Break:
				{
				alt33 = 4;
				}
				break;
			case Continue:
				{
				alt33 = 5;
				}
				break;
			case Goto:
				{
				alt33 = 6;
				}
				break;
			case Return:
				{
				alt33 = 7;
				}
				break;
			case RequireOperator:
				{
				alt33 = 8;
				}
				break;
			case Ampersand:
			case Array:
			case Bang:
			case Boolean:
			case Clone:
			case Dollar:
			case DoubleQuotedString:
			case HereDoc:
			case IncrementOperator:
			case Integer:
			case List:
			case Minus:
			case New:
			case OpenRoundBracket:
			case Real:
			case SingleQuotedString:
			case SuppressWarnings:
			case Tilde:
			case UnquotedString:
				{
				alt33 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:244:7: Echo commaList
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(244, 7);
				Echo118=(IToken)Match(input,Echo,Follow._Echo_in_simpleStatement1665); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Echo118_tree = (object)adaptor.Create(Echo118, retval);
				adaptor.AddChild(root_0, Echo118_tree);
				}
				DebugLocation(244, 12);
				PushFollow(Follow._commaList_in_simpleStatement1667);
				commaList119=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList119.Tree, commaList119, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:245:7: Global name ( ',' ! name )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(245, 7);
				Global120=(IToken)Match(input,Global,Follow._Global_in_simpleStatement1675); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Global120_tree = (object)adaptor.Create(Global120, retval);
				adaptor.AddChild(root_0, Global120_tree);
				}
				DebugLocation(245, 14);
				PushFollow(Follow._name_in_simpleStatement1677);
				name121=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name121.Tree, name121, retval);
				DebugLocation(245, 19);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:245:19: ( ',' ! name )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_1 = input.LA(1);

					if ((LA29_1==Comma))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:245:20: ',' ! name
						{
						DebugLocation(245, 23);
						char_literal122=(IToken)Match(input,Comma,Follow._Comma_in_simpleStatement1680); if (state.failed) return retval;
						DebugLocation(245, 25);
						PushFollow(Follow._name_in_simpleStatement1683);
						name123=name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, name123.Tree, name123, retval);

						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:246:7: Static variable Equals ! atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(246, 7);
				Static124=(IToken)Match(input,Static,Follow._Static_in_simpleStatement1693); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static124_tree = (object)adaptor.Create(Static124, retval);
				adaptor.AddChild(root_0, Static124_tree);
				}
				DebugLocation(246, 14);
				PushFollow(Follow._variable_in_simpleStatement1695);
				variable125=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable125.Tree, variable125, retval);
				DebugLocation(246, 29);
				Equals126=(IToken)Match(input,Equals,Follow._Equals_in_simpleStatement1697); if (state.failed) return retval;
				DebugLocation(246, 31);
				PushFollow(Follow._atom_in_simpleStatement1700);
				atom127=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom127.Tree, atom127, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:247:7: Break ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(247, 7);
				Break128=(IToken)Match(input,Break,Follow._Break_in_simpleStatement1708); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Break128_tree = (object)adaptor.Create(Break128, retval);
				adaptor.AddChild(root_0, Break128_tree);
				}
				DebugLocation(247, 13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:247:13: ( Integer )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==Integer))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:247:13: Integer
					{
					DebugLocation(247, 13);
					Integer129=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement1710); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer129_tree = (object)adaptor.Create(Integer129, retval);
					adaptor.AddChild(root_0, Integer129_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(30); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:248:7: Continue ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(248, 7);
				Continue130=(IToken)Match(input,Continue,Follow._Continue_in_simpleStatement1719); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Continue130_tree = (object)adaptor.Create(Continue130, retval);
				adaptor.AddChild(root_0, Continue130_tree);
				}
				DebugLocation(248, 16);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:248:16: ( Integer )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==Integer))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:248:16: Integer
					{
					DebugLocation(248, 16);
					Integer131=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement1721); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer131_tree = (object)adaptor.Create(Integer131, retval);
					adaptor.AddChild(root_0, Integer131_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(31); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:249:7: Goto UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(249, 7);
				Goto132=(IToken)Match(input,Goto,Follow._Goto_in_simpleStatement1730); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto132_tree = (object)adaptor.Create(Goto132, retval);
				adaptor.AddChild(root_0, Goto132_tree);
				}
				DebugLocation(249, 12);
				UnquotedString133=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_simpleStatement1732); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString133_tree = (object)adaptor.Create(UnquotedString133, retval);
				adaptor.AddChild(root_0, UnquotedString133_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:250:7: Return ( expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(250, 7);
				Return134=(IToken)Match(input,Return,Follow._Return_in_simpleStatement1740); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Return134_tree = (object)adaptor.Create(Return134, retval);
				adaptor.AddChild(root_0, Return134_tree);
				}
				DebugLocation(250, 14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:250:14: ( expression )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==Ampersand||LA32_1==Array||LA32_1==Bang||LA32_1==Boolean||LA32_1==Clone||LA32_1==Dollar||LA32_1==DoubleQuotedString||LA32_1==HereDoc||LA32_1==IncrementOperator||LA32_1==Integer||LA32_1==List||LA32_1==Minus||LA32_1==New||LA32_1==OpenRoundBracket||LA32_1==Real||LA32_1==SingleQuotedString||LA32_1==SuppressWarnings||LA32_1==Tilde||LA32_1==UnquotedString))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:250:14: expression
					{
					DebugLocation(250, 14);
					PushFollow(Follow._expression_in_simpleStatement1742);
					expression135=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression135.Tree, expression135, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(32); }


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:251:7: RequireOperator expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(251, 7);
				RequireOperator136=(IToken)Match(input,RequireOperator,Follow._RequireOperator_in_simpleStatement1751); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RequireOperator136_tree = (object)adaptor.Create(RequireOperator136, retval);
				adaptor.AddChild(root_0, RequireOperator136_tree);
				}
				DebugLocation(251, 23);
				PushFollow(Follow._expression_in_simpleStatement1753);
				expression137=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression137.Tree, expression137, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:252:7: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(252, 7);
				PushFollow(Follow._expression_in_simpleStatement1761);
				expression138=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression138.Tree, expression138, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleStatement", 15);
			LeaveRule("simpleStatement", 15);
			LeaveRule_simpleStatement();
			if (state.backtracking > 0) { Memoize(input, 15, simpleStatement_StartIndex); }

		}
		DebugLocation(253, 4);
		} finally { DebugExitRule(GrammarFileName, "simpleStatement"); }
		return retval;

	}
	// $ANTLR end "simpleStatement"

	partial void EnterRule_conditional();
	partial void LeaveRule_conditional();
	// $ANTLR start "conditional"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:1: conditional : ( ElseIf '(' ifCondition= expression ')' ifTrue= statement ( conditional )? | Else statement );
	[GrammarRule("conditional")]
	private Antlr3AstNode conditional()
	{
		EnterRule_conditional();
		EnterRule("conditional", 16);
		var retval = new Antlr3AstNode("conditional");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ElseIf139 = default(IToken);
		IToken char_literal140 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken Else143 = default(IToken);
		Antlr3AstNode ifCondition = default(Antlr3AstNode);
		Antlr3AstNode ifTrue = default(Antlr3AstNode);
		Antlr3AstNode conditional142 = default(Antlr3AstNode);
		Antlr3AstNode statement144 = default(Antlr3AstNode);

		object ElseIf139_tree = default(object);
		object char_literal140_tree = default(object);
		object char_literal141_tree = default(object);
		object Else143_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional");
		DebugLocation(256, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:257:5: ( ElseIf '(' ifCondition= expression ')' ifTrue= statement ( conditional )? | Else statement )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==ElseIf))
			{
				alt35 = 1;
			}
			else if ((LA35_1==Else))
			{
				alt35 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:257:7: ElseIf '(' ifCondition= expression ')' ifTrue= statement ( conditional )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(257, 7);
				ElseIf139=(IToken)Match(input,ElseIf,Follow._ElseIf_in_conditional1779); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf139_tree = (object)adaptor.Create(ElseIf139, retval);
				adaptor.AddChild(root_0, ElseIf139_tree);
				}
				DebugLocation(257, 14);
				char_literal140=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_conditional1781); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal140_tree = (object)adaptor.Create(char_literal140, retval);
				adaptor.AddChild(root_0, char_literal140_tree);
				}
				DebugLocation(257, 29);
				PushFollow(Follow._expression_in_conditional1785);
				ifCondition=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifCondition.Tree, ifCondition, retval);
				DebugLocation(257, 41);
				char_literal141=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_conditional1787); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal141_tree = (object)adaptor.Create(char_literal141, retval);
				adaptor.AddChild(root_0, char_literal141_tree);
				}
				DebugLocation(257, 51);
				PushFollow(Follow._statement_in_conditional1791);
				ifTrue=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifTrue.Tree, ifTrue, retval);
				DebugLocation(257, 62);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:257:62: ( conditional )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				try
				{
					alt34 = dfa34.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:257:62: conditional
					{
					DebugLocation(257, 62);
					PushFollow(Follow._conditional_in_conditional1793);
					conditional142=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional142.Tree, conditional142, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(34); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:258:7: Else statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(258, 7);
				Else143=(IToken)Match(input,Else,Follow._Else_in_conditional1802); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else143_tree = (object)adaptor.Create(Else143, retval);
				adaptor.AddChild(root_0, Else143_tree);
				}
				DebugLocation(258, 12);
				PushFollow(Follow._statement_in_conditional1804);
				statement144=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement144.Tree, statement144, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional", 16);
			LeaveRule("conditional", 16);
			LeaveRule_conditional();
			if (state.backtracking > 0) { Memoize(input, 16, conditional_StartIndex); }

		}
		DebugLocation(259, 4);
		} finally { DebugExitRule(GrammarFileName, "conditional"); }
		return retval;

	}
	// $ANTLR end "conditional"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:261:1: forInit : ( commaList )? ';' ;
	[GrammarRule("forInit")]
	private Antlr3AstNode forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 17);
		var retval = new Antlr3AstNode("forInit");
		
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal146 = default(IToken);
		Antlr3AstNode commaList145 = default(Antlr3AstNode);

		object char_literal146_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(261, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:262:5: ( ( commaList )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:262:7: ( commaList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(262, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:262:7: ( commaList )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==Ampersand||LA36_1==Array||LA36_1==Bang||LA36_1==Boolean||LA36_1==Clone||LA36_1==Dollar||LA36_1==DoubleQuotedString||LA36_1==HereDoc||LA36_1==IncrementOperator||LA36_1==Integer||LA36_1==List||LA36_1==Minus||LA36_1==New||LA36_1==OpenRoundBracket||LA36_1==Real||LA36_1==SingleQuotedString||LA36_1==SuppressWarnings||LA36_1==Tilde||LA36_1==UnquotedString))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:262:7: commaList
				{
				DebugLocation(262, 7);
				PushFollow(Follow._commaList_in_forInit1821);
				commaList145=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList145.Tree, commaList145, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(262, 18);
			char_literal146=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forInit1824); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal146_tree = (object)adaptor.Create(char_literal146, retval);
			adaptor.AddChild(root_0, char_literal146_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 17);
			LeaveRule("forInit", 17);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 17, forInit_StartIndex); }

		}
		DebugLocation(263, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:265:1: forCondition : ( commaList )? ';' ;
	[GrammarRule("forCondition")]
	private Antlr3AstNode forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 18);
		var retval = new Antlr3AstNode("forCondition");
		
		retval.Start = (IToken)input.LT(1);
		int forCondition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal148 = default(IToken);
		Antlr3AstNode commaList147 = default(Antlr3AstNode);

		object char_literal148_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(265, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:266:5: ( ( commaList )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:266:7: ( commaList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(266, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:266:7: ( commaList )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==Ampersand||LA37_1==Array||LA37_1==Bang||LA37_1==Boolean||LA37_1==Clone||LA37_1==Dollar||LA37_1==DoubleQuotedString||LA37_1==HereDoc||LA37_1==IncrementOperator||LA37_1==Integer||LA37_1==List||LA37_1==Minus||LA37_1==New||LA37_1==OpenRoundBracket||LA37_1==Real||LA37_1==SingleQuotedString||LA37_1==SuppressWarnings||LA37_1==Tilde||LA37_1==UnquotedString))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:266:7: commaList
				{
				DebugLocation(266, 7);
				PushFollow(Follow._commaList_in_forCondition1841);
				commaList147=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList147.Tree, commaList147, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(266, 18);
			char_literal148=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forCondition1844); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal148_tree = (object)adaptor.Create(char_literal148, retval);
			adaptor.AddChild(root_0, char_literal148_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forCondition", 18);
			LeaveRule("forCondition", 18);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 18, forCondition_StartIndex); }

		}
		DebugLocation(267, 4);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return retval;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdate();
	partial void LeaveRule_forUpdate();
	// $ANTLR start "forUpdate"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:269:1: forUpdate : ( commaList )? ;
	[GrammarRule("forUpdate")]
	private Antlr3AstNode forUpdate()
	{
		EnterRule_forUpdate();
		EnterRule("forUpdate", 19);
		var retval = new Antlr3AstNode("forUpdate");
		
		retval.Start = (IToken)input.LT(1);
		int forUpdate_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode commaList149 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "forUpdate");
		DebugLocation(269, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:270:5: ( ( commaList )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:270:7: ( commaList )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(270, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:270:7: ( commaList )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==Ampersand||LA38_1==Array||LA38_1==Bang||LA38_1==Boolean||LA38_1==Clone||LA38_1==Dollar||LA38_1==DoubleQuotedString||LA38_1==HereDoc||LA38_1==IncrementOperator||LA38_1==Integer||LA38_1==List||LA38_1==Minus||LA38_1==New||LA38_1==OpenRoundBracket||LA38_1==Real||LA38_1==SingleQuotedString||LA38_1==SuppressWarnings||LA38_1==Tilde||LA38_1==UnquotedString))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:270:7: commaList
				{
				DebugLocation(270, 7);
				PushFollow(Follow._commaList_in_forUpdate1865);
				commaList149=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList149.Tree, commaList149, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forUpdate", 19);
			LeaveRule("forUpdate", 19);
			LeaveRule_forUpdate();
			if (state.backtracking > 0) { Memoize(input, 19, forUpdate_StartIndex); }

		}
		DebugLocation(271, 4);
		} finally { DebugExitRule(GrammarFileName, "forUpdate"); }
		return retval;

	}
	// $ANTLR end "forUpdate"

	partial void EnterRule_cases();
	partial void LeaveRule_cases();
	// $ANTLR start "cases"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:273:1: cases : ( casestatement )* defaultcase ;
	[GrammarRule("cases")]
	private Antlr3AstNode cases()
	{
		EnterRule_cases();
		EnterRule("cases", 20);
		var retval = new Antlr3AstNode("cases");
		
		retval.Start = (IToken)input.LT(1);
		int cases_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode casestatement150 = default(Antlr3AstNode);
		Antlr3AstNode defaultcase151 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "cases");
		DebugLocation(273, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:274:5: ( ( casestatement )* defaultcase )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:274:7: ( casestatement )* defaultcase
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(274, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:274:7: ( casestatement )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==Case))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:274:7: casestatement
					{
					DebugLocation(274, 7);
					PushFollow(Follow._casestatement_in_cases1884);
					casestatement150=casestatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement150.Tree, casestatement150, retval);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }

			DebugLocation(274, 23);
			PushFollow(Follow._defaultcase_in_cases1888);
			defaultcase151=defaultcase();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, defaultcase151.Tree, defaultcase151, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cases", 20);
			LeaveRule("cases", 20);
			LeaveRule_cases();
			if (state.backtracking > 0) { Memoize(input, 20, cases_StartIndex); }

		}
		DebugLocation(275, 4);
		} finally { DebugExitRule(GrammarFileName, "cases"); }
		return retval;

	}
	// $ANTLR end "cases"

	partial void EnterRule_casestatement();
	partial void LeaveRule_casestatement();
	// $ANTLR start "casestatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:277:1: casestatement : Case expression ':' ! ( statement )* ;
	[GrammarRule("casestatement")]
	private Antlr3AstNode casestatement()
	{
		EnterRule_casestatement();
		EnterRule("casestatement", 21);
		var retval = new Antlr3AstNode("casestatement");
		
		retval.Start = (IToken)input.LT(1);
		int casestatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Case152 = default(IToken);
		IToken char_literal154 = default(IToken);
		Antlr3AstNode expression153 = default(Antlr3AstNode);
		Antlr3AstNode statement155 = default(Antlr3AstNode);

		object Case152_tree = default(object);
		object char_literal154_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "casestatement");
		DebugLocation(277, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:278:5: ( Case expression ':' ! ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:278:7: Case expression ':' ! ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(278, 7);
			Case152=(IToken)Match(input,Case,Follow._Case_in_casestatement1905); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Case152_tree = (object)adaptor.Create(Case152, retval);
			adaptor.AddChild(root_0, Case152_tree);
			}
			DebugLocation(278, 12);
			PushFollow(Follow._expression_in_casestatement1907);
			expression153=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression153.Tree, expression153, retval);
			DebugLocation(278, 26);
			char_literal154=(IToken)Match(input,Colon,Follow._Colon_in_casestatement1909); if (state.failed) return retval;
			DebugLocation(278, 28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:278:28: ( statement )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==Abstract||LA40_1==Ampersand||LA40_1==Array||LA40_1==Bang||LA40_1==BodyString||(LA40_1>=Boolean && LA40_1<=Break)||LA40_1==Class||LA40_1==Clone||LA40_1==Continue||(LA40_1>=Do && LA40_1<=Dollar)||(LA40_1>=DoubleQuotedString && LA40_1<=Echo)||LA40_1==For||LA40_1==Foreach||(LA40_1>=Function && LA40_1<=HereDoc)||LA40_1==If||LA40_1==IncrementOperator||(LA40_1>=Integer && LA40_1<=Interface)||LA40_1==List||LA40_1==Minus||LA40_1==New||(LA40_1>=OpenCurlyBracket && LA40_1<=OpenRoundBracket)||LA40_1==Real||(LA40_1>=RequireOperator && LA40_1<=Return)||LA40_1==SingleQuotedString||(LA40_1>=Static && LA40_1<=Tilde)||LA40_1==UnquotedString||LA40_1==While))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:278:28: statement
					{
					DebugLocation(278, 28);
					PushFollow(Follow._statement_in_casestatement1912);
					statement155=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement155.Tree, statement155, retval);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("casestatement", 21);
			LeaveRule("casestatement", 21);
			LeaveRule_casestatement();
			if (state.backtracking > 0) { Memoize(input, 21, casestatement_StartIndex); }

		}
		DebugLocation(279, 4);
		} finally { DebugExitRule(GrammarFileName, "casestatement"); }
		return retval;

	}
	// $ANTLR end "casestatement"

	partial void EnterRule_defaultcase();
	partial void LeaveRule_defaultcase();
	// $ANTLR start "defaultcase"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:281:1: defaultcase : ( Default ':' ! ( statement )* ) ;
	[GrammarRule("defaultcase")]
	private Antlr3AstNode defaultcase()
	{
		EnterRule_defaultcase();
		EnterRule("defaultcase", 22);
		var retval = new Antlr3AstNode("defaultcase");
		
		retval.Start = (IToken)input.LT(1);
		int defaultcase_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Default156 = default(IToken);
		IToken char_literal157 = default(IToken);
		Antlr3AstNode statement158 = default(Antlr3AstNode);

		object Default156_tree = default(object);
		object char_literal157_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "defaultcase");
		DebugLocation(281, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:282:5: ( ( Default ':' ! ( statement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:282:7: ( Default ':' ! ( statement )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(282, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:282:7: ( Default ':' ! ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:282:8: Default ':' ! ( statement )*
			{
			DebugLocation(282, 8);
			Default156=(IToken)Match(input,Default,Follow._Default_in_defaultcase1932); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Default156_tree = (object)adaptor.Create(Default156, retval);
			adaptor.AddChild(root_0, Default156_tree);
			}
			DebugLocation(282, 19);
			char_literal157=(IToken)Match(input,Colon,Follow._Colon_in_defaultcase1934); if (state.failed) return retval;
			DebugLocation(282, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:282:21: ( statement )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==Abstract||LA41_1==Ampersand||LA41_1==Array||LA41_1==Bang||LA41_1==BodyString||(LA41_1>=Boolean && LA41_1<=Break)||LA41_1==Class||LA41_1==Clone||LA41_1==Continue||(LA41_1>=Do && LA41_1<=Dollar)||(LA41_1>=DoubleQuotedString && LA41_1<=Echo)||LA41_1==For||LA41_1==Foreach||(LA41_1>=Function && LA41_1<=HereDoc)||LA41_1==If||LA41_1==IncrementOperator||(LA41_1>=Integer && LA41_1<=Interface)||LA41_1==List||LA41_1==Minus||LA41_1==New||(LA41_1>=OpenCurlyBracket && LA41_1<=OpenRoundBracket)||LA41_1==Real||(LA41_1>=RequireOperator && LA41_1<=Return)||LA41_1==SingleQuotedString||(LA41_1>=Static && LA41_1<=Tilde)||LA41_1==UnquotedString||LA41_1==While))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:282:21: statement
					{
					DebugLocation(282, 21);
					PushFollow(Follow._statement_in_defaultcase1937);
					statement158=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement158.Tree, statement158, retval);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defaultcase", 22);
			LeaveRule("defaultcase", 22);
			LeaveRule_defaultcase();
			if (state.backtracking > 0) { Memoize(input, 22, defaultcase_StartIndex); }

		}
		DebugLocation(283, 4);
		} finally { DebugExitRule(GrammarFileName, "defaultcase"); }
		return retval;

	}
	// $ANTLR end "defaultcase"

	partial void EnterRule_functionDefinition();
	partial void LeaveRule_functionDefinition();
	// $ANTLR start "functionDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:285:1: functionDefinition : Function UnquotedString parametersDefinition bracketedBlock ;
	[GrammarRule("functionDefinition")]
	private Antlr3AstNode functionDefinition()
	{
		EnterRule_functionDefinition();
		EnterRule("functionDefinition", 23);
		var retval = new Antlr3AstNode("functionDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int functionDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function159 = default(IToken);
		IToken UnquotedString160 = default(IToken);
		Antlr3AstNode parametersDefinition161 = default(Antlr3AstNode);
		Antlr3AstNode bracketedBlock162 = default(Antlr3AstNode);

		object Function159_tree = default(object);
		object UnquotedString160_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionDefinition");
		DebugLocation(285, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:286:5: ( Function UnquotedString parametersDefinition bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:286:7: Function UnquotedString parametersDefinition bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(286, 7);
			Function159=(IToken)Match(input,Function,Follow._Function_in_functionDefinition1956); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Function159_tree = (object)adaptor.Create(Function159, retval);
			adaptor.AddChild(root_0, Function159_tree);
			}
			DebugLocation(286, 16);
			UnquotedString160=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_functionDefinition1958); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UnquotedString160_tree = (object)adaptor.Create(UnquotedString160, retval);
			adaptor.AddChild(root_0, UnquotedString160_tree);
			}
			DebugLocation(286, 31);
			PushFollow(Follow._parametersDefinition_in_functionDefinition1960);
			parametersDefinition161=parametersDefinition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition161.Tree, parametersDefinition161, retval);
			DebugLocation(286, 52);
			PushFollow(Follow._bracketedBlock_in_functionDefinition1962);
			bracketedBlock162=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock162.Tree, bracketedBlock162, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDefinition", 23);
			LeaveRule("functionDefinition", 23);
			LeaveRule_functionDefinition();
			if (state.backtracking > 0) { Memoize(input, 23, functionDefinition_StartIndex); }

		}
		DebugLocation(287, 4);
		} finally { DebugExitRule(GrammarFileName, "functionDefinition"); }
		return retval;

	}
	// $ANTLR end "functionDefinition"

	partial void EnterRule_parametersDefinition();
	partial void LeaveRule_parametersDefinition();
	// $ANTLR start "parametersDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:289:1: parametersDefinition : OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket ;
	[GrammarRule("parametersDefinition")]
	private Antlr3AstNode parametersDefinition()
	{
		EnterRule_parametersDefinition();
		EnterRule("parametersDefinition", 24);
		var retval = new Antlr3AstNode("parametersDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int parametersDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket163 = default(IToken);
		IToken Comma165 = default(IToken);
		IToken CloseRoundBracket167 = default(IToken);
		Antlr3AstNode paramDef164 = default(Antlr3AstNode);
		Antlr3AstNode paramDef166 = default(Antlr3AstNode);

		object OpenRoundBracket163_tree = default(object);
		object Comma165_tree = default(object);
		object CloseRoundBracket167_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parametersDefinition");
		DebugLocation(289, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:5: ( OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:7: OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(290, 7);
			OpenRoundBracket163=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_parametersDefinition1979); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenRoundBracket163_tree = (object)adaptor.Create(OpenRoundBracket163, retval);
			adaptor.AddChild(root_0, OpenRoundBracket163_tree);
			}
			DebugLocation(290, 24);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:24: ( paramDef ( Comma paramDef )* )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==Ampersand||LA43_1==Dollar))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:25: paramDef ( Comma paramDef )*
				{
				DebugLocation(290, 25);
				PushFollow(Follow._paramDef_in_parametersDefinition1982);
				paramDef164=paramDef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, paramDef164.Tree, paramDef164, retval);
				DebugLocation(290, 34);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:34: ( Comma paramDef )*
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_1 = input.LA(1);

					if ((LA42_1==Comma))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch ( alt42 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:35: Comma paramDef
						{
						DebugLocation(290, 35);
						Comma165=(IToken)Match(input,Comma,Follow._Comma_in_parametersDefinition1985); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma165_tree = (object)adaptor.Create(Comma165, retval);
						adaptor.AddChild(root_0, Comma165_tree);
						}
						DebugLocation(290, 41);
						PushFollow(Follow._paramDef_in_parametersDefinition1987);
						paramDef166=paramDef();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, paramDef166.Tree, paramDef166, retval);

						}
						break;

					default:
						goto loop42;
					}
				}

				loop42:
					;

				} finally { DebugExitSubRule(42); }


				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(290, 54);
			CloseRoundBracket167=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_parametersDefinition1993); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseRoundBracket167_tree = (object)adaptor.Create(CloseRoundBracket167, retval);
			adaptor.AddChild(root_0, CloseRoundBracket167_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parametersDefinition", 24);
			LeaveRule("parametersDefinition", 24);
			LeaveRule_parametersDefinition();
			if (state.backtracking > 0) { Memoize(input, 24, parametersDefinition_StartIndex); }

		}
		DebugLocation(291, 4);
		} finally { DebugExitRule(GrammarFileName, "parametersDefinition"); }
		return retval;

	}
	// $ANTLR end "parametersDefinition"

	partial void EnterRule_paramDef();
	partial void LeaveRule_paramDef();
	// $ANTLR start "paramDef"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:293:1: paramDef : paramName ( Equals atom )? ;
	[GrammarRule("paramDef")]
	private Antlr3AstNode paramDef()
	{
		EnterRule_paramDef();
		EnterRule("paramDef", 25);
		var retval = new Antlr3AstNode("paramDef");
		
		retval.Start = (IToken)input.LT(1);
		int paramDef_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Equals169 = default(IToken);
		Antlr3AstNode paramName168 = default(Antlr3AstNode);
		Antlr3AstNode atom170 = default(Antlr3AstNode);

		object Equals169_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramDef");
		DebugLocation(293, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:294:5: ( paramName ( Equals atom )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:294:7: paramName ( Equals atom )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(294, 7);
			PushFollow(Follow._paramName_in_paramDef2010);
			paramName168=paramName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, paramName168.Tree, paramName168, retval);
			DebugLocation(294, 17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:294:17: ( Equals atom )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_1 = input.LA(1);

			if ((LA44_1==Equals))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:294:18: Equals atom
				{
				DebugLocation(294, 18);
				Equals169=(IToken)Match(input,Equals,Follow._Equals_in_paramDef2013); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals169_tree = (object)adaptor.Create(Equals169, retval);
				adaptor.AddChild(root_0, Equals169_tree);
				}
				DebugLocation(294, 25);
				PushFollow(Follow._atom_in_paramDef2015);
				atom170=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom170.Tree, atom170, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramDef", 25);
			LeaveRule("paramDef", 25);
			LeaveRule_paramDef();
			if (state.backtracking > 0) { Memoize(input, 25, paramDef_StartIndex); }

		}
		DebugLocation(295, 4);
		} finally { DebugExitRule(GrammarFileName, "paramDef"); }
		return retval;

	}
	// $ANTLR end "paramDef"

	partial void EnterRule_paramName();
	partial void LeaveRule_paramName();
	// $ANTLR start "paramName"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:297:1: paramName : ( Dollar UnquotedString | Ampersand Dollar UnquotedString );
	[GrammarRule("paramName")]
	private Antlr3AstNode paramName()
	{
		EnterRule_paramName();
		EnterRule("paramName", 26);
		var retval = new Antlr3AstNode("paramName");
		
		retval.Start = (IToken)input.LT(1);
		int paramName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Dollar171 = default(IToken);
		IToken UnquotedString172 = default(IToken);
		IToken Ampersand173 = default(IToken);
		IToken Dollar174 = default(IToken);
		IToken UnquotedString175 = default(IToken);

		object Dollar171_tree = default(object);
		object UnquotedString172_tree = default(object);
		object Ampersand173_tree = default(object);
		object Dollar174_tree = default(object);
		object UnquotedString175_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramName");
		DebugLocation(297, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:298:5: ( Dollar UnquotedString | Ampersand Dollar UnquotedString )
			int alt45=2;
			try { DebugEnterDecision(45, false);
			int LA45_1 = input.LA(1);

			if ((LA45_1==Dollar))
			{
				alt45 = 1;
			}
			else if ((LA45_1==Ampersand))
			{
				alt45 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:298:7: Dollar UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(298, 7);
				Dollar171=(IToken)Match(input,Dollar,Follow._Dollar_in_paramName2034); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Dollar171_tree = (object)adaptor.Create(Dollar171, retval);
				adaptor.AddChild(root_0, Dollar171_tree);
				}
				DebugLocation(298, 14);
				UnquotedString172=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_paramName2036); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString172_tree = (object)adaptor.Create(UnquotedString172, retval);
				adaptor.AddChild(root_0, UnquotedString172_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:299:7: Ampersand Dollar UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(299, 7);
				Ampersand173=(IToken)Match(input,Ampersand,Follow._Ampersand_in_paramName2044); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand173_tree = (object)adaptor.Create(Ampersand173, retval);
				adaptor.AddChild(root_0, Ampersand173_tree);
				}
				DebugLocation(299, 17);
				Dollar174=(IToken)Match(input,Dollar,Follow._Dollar_in_paramName2046); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Dollar174_tree = (object)adaptor.Create(Dollar174, retval);
				adaptor.AddChild(root_0, Dollar174_tree);
				}
				DebugLocation(299, 24);
				UnquotedString175=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_paramName2048); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString175_tree = (object)adaptor.Create(UnquotedString175, retval);
				adaptor.AddChild(root_0, UnquotedString175_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramName", 26);
			LeaveRule("paramName", 26);
			LeaveRule_paramName();
			if (state.backtracking > 0) { Memoize(input, 26, paramName_StartIndex); }

		}
		DebugLocation(300, 4);
		} finally { DebugExitRule(GrammarFileName, "paramName"); }
		return retval;

	}
	// $ANTLR end "paramName"

	partial void EnterRule_commaList();
	partial void LeaveRule_commaList();
	// $ANTLR start "commaList"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:302:1: commaList : expression ( ',' ! expression )* ;
	[GrammarRule("commaList")]
	private Antlr3AstNode commaList()
	{
		EnterRule_commaList();
		EnterRule("commaList", 27);
		var retval = new Antlr3AstNode("commaList");
		
		retval.Start = (IToken)input.LT(1);
		int commaList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal177 = default(IToken);
		Antlr3AstNode expression176 = default(Antlr3AstNode);
		Antlr3AstNode expression178 = default(Antlr3AstNode);

		object char_literal177_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "commaList");
		DebugLocation(302, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:303:5: ( expression ( ',' ! expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:303:7: expression ( ',' ! expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(303, 7);
			PushFollow(Follow._expression_in_commaList2065);
			expression176=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression176.Tree, expression176, retval);
			DebugLocation(303, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:303:18: ( ',' ! expression )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==Comma))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:303:19: ',' ! expression
					{
					DebugLocation(303, 22);
					char_literal177=(IToken)Match(input,Comma,Follow._Comma_in_commaList2068); if (state.failed) return retval;
					DebugLocation(303, 24);
					PushFollow(Follow._expression_in_commaList2071);
					expression178=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression178.Tree, expression178, retval);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commaList", 27);
			LeaveRule("commaList", 27);
			LeaveRule_commaList();
			if (state.backtracking > 0) { Memoize(input, 27, commaList_StartIndex); }

		}
		DebugLocation(304, 4);
		} finally { DebugExitRule(GrammarFileName, "commaList"); }
		return retval;

	}
	// $ANTLR end "commaList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:306:1: expression : weakLogicalOr ;
	[GrammarRule("expression")]
	private Antlr3AstNode expression()
	{
		EnterRule_expression();
		EnterRule("expression", 28);
		var retval = new Antlr3AstNode("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode weakLogicalOr179 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(306, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:307:5: ( weakLogicalOr )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:307:7: weakLogicalOr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(307, 7);
			PushFollow(Follow._weakLogicalOr_in_expression2095);
			weakLogicalOr179=weakLogicalOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalOr179.Tree, weakLogicalOr179, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 28);
			LeaveRule("expression", 28);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 28, expression_StartIndex); }

		}
		DebugLocation(308, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_weakLogicalOr();
	partial void LeaveRule_weakLogicalOr();
	// $ANTLR start "weakLogicalOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:310:1: weakLogicalOr : weakLogicalXor ( Or weakLogicalXor )* ;
	[GrammarRule("weakLogicalOr")]
	private Antlr3AstNode weakLogicalOr()
	{
		EnterRule_weakLogicalOr();
		EnterRule("weakLogicalOr", 29);
		var retval = new Antlr3AstNode("weakLogicalOr");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Or181 = default(IToken);
		Antlr3AstNode weakLogicalXor180 = default(Antlr3AstNode);
		Antlr3AstNode weakLogicalXor182 = default(Antlr3AstNode);

		object Or181_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalOr");
		DebugLocation(310, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:311:5: ( weakLogicalXor ( Or weakLogicalXor )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:311:7: weakLogicalXor ( Or weakLogicalXor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(311, 7);
			PushFollow(Follow._weakLogicalXor_in_weakLogicalOr2112);
			weakLogicalXor180=weakLogicalXor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor180.Tree, weakLogicalXor180, retval);
			DebugLocation(311, 22);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:311:22: ( Or weakLogicalXor )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==Or))
				{
					int LA47_2 = input.LA(2);

					if ((EvaluatePredicate(synpred70_Php_fragment)))
					{
						alt47 = 1;
					}


				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:311:23: Or weakLogicalXor
					{
					DebugLocation(311, 23);
					Or181=(IToken)Match(input,Or,Follow._Or_in_weakLogicalOr2115); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Or181_tree = (object)adaptor.Create(Or181, retval);
					adaptor.AddChild(root_0, Or181_tree);
					}
					DebugLocation(311, 26);
					PushFollow(Follow._weakLogicalXor_in_weakLogicalOr2117);
					weakLogicalXor182=weakLogicalXor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor182.Tree, weakLogicalXor182, retval);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalOr", 29);
			LeaveRule("weakLogicalOr", 29);
			LeaveRule_weakLogicalOr();
			if (state.backtracking > 0) { Memoize(input, 29, weakLogicalOr_StartIndex); }

		}
		DebugLocation(312, 4);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalOr"); }
		return retval;

	}
	// $ANTLR end "weakLogicalOr"

	partial void EnterRule_weakLogicalXor();
	partial void LeaveRule_weakLogicalXor();
	// $ANTLR start "weakLogicalXor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:314:1: weakLogicalXor : weakLogicalAnd ( Xor weakLogicalAnd )* ;
	[GrammarRule("weakLogicalXor")]
	private Antlr3AstNode weakLogicalXor()
	{
		EnterRule_weakLogicalXor();
		EnterRule("weakLogicalXor", 30);
		var retval = new Antlr3AstNode("weakLogicalXor");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalXor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Xor184 = default(IToken);
		Antlr3AstNode weakLogicalAnd183 = default(Antlr3AstNode);
		Antlr3AstNode weakLogicalAnd185 = default(Antlr3AstNode);

		object Xor184_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalXor");
		DebugLocation(314, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:315:5: ( weakLogicalAnd ( Xor weakLogicalAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:315:7: weakLogicalAnd ( Xor weakLogicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(315, 7);
			PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor2136);
			weakLogicalAnd183=weakLogicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd183.Tree, weakLogicalAnd183, retval);
			DebugLocation(315, 22);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:315:22: ( Xor weakLogicalAnd )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==Xor))
				{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred71_Php_fragment)))
					{
						alt48 = 1;
					}


				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:315:23: Xor weakLogicalAnd
					{
					DebugLocation(315, 23);
					Xor184=(IToken)Match(input,Xor,Follow._Xor_in_weakLogicalXor2139); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Xor184_tree = (object)adaptor.Create(Xor184, retval);
					adaptor.AddChild(root_0, Xor184_tree);
					}
					DebugLocation(315, 27);
					PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor2141);
					weakLogicalAnd185=weakLogicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd185.Tree, weakLogicalAnd185, retval);

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalXor", 30);
			LeaveRule("weakLogicalXor", 30);
			LeaveRule_weakLogicalXor();
			if (state.backtracking > 0) { Memoize(input, 30, weakLogicalXor_StartIndex); }

		}
		DebugLocation(316, 4);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalXor"); }
		return retval;

	}
	// $ANTLR end "weakLogicalXor"

	partial void EnterRule_weakLogicalAnd();
	partial void LeaveRule_weakLogicalAnd();
	// $ANTLR start "weakLogicalAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:318:1: weakLogicalAnd : assignment ( And assignment )* ;
	[GrammarRule("weakLogicalAnd")]
	private Antlr3AstNode weakLogicalAnd()
	{
		EnterRule_weakLogicalAnd();
		EnterRule("weakLogicalAnd", 31);
		var retval = new Antlr3AstNode("weakLogicalAnd");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken And187 = default(IToken);
		Antlr3AstNode assignment186 = default(Antlr3AstNode);
		Antlr3AstNode assignment188 = default(Antlr3AstNode);

		object And187_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalAnd");
		DebugLocation(318, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:319:5: ( assignment ( And assignment )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:319:7: assignment ( And assignment )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(319, 7);
			PushFollow(Follow._assignment_in_weakLogicalAnd2164);
			assignment186=assignment();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment186.Tree, assignment186, retval);
			DebugLocation(319, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:319:18: ( And assignment )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==And))
				{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred72_Php_fragment)))
					{
						alt49 = 1;
					}


				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:319:19: And assignment
					{
					DebugLocation(319, 19);
					And187=(IToken)Match(input,And,Follow._And_in_weakLogicalAnd2167); if (state.failed) return retval;
					if (state.backtracking == 0) {
					And187_tree = (object)adaptor.Create(And187, retval);
					adaptor.AddChild(root_0, And187_tree);
					}
					DebugLocation(319, 23);
					PushFollow(Follow._assignment_in_weakLogicalAnd2169);
					assignment188=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment188.Tree, assignment188, retval);

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalAnd", 31);
			LeaveRule("weakLogicalAnd", 31);
			LeaveRule_weakLogicalAnd();
			if (state.backtracking > 0) { Memoize(input, 31, weakLogicalAnd_StartIndex); }

		}
		DebugLocation(320, 4);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalAnd"); }
		return retval;

	}
	// $ANTLR end "weakLogicalAnd"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:322:1: assignment : ( listVariables ( ( Equals | AsignmentOperator ) assignment ) | ternary );
	[GrammarRule("assignment")]
	private Antlr3AstNode assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 32);
		var retval = new Antlr3AstNode("assignment");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set190 = default(IToken);
		Antlr3AstNode listVariables189 = default(Antlr3AstNode);
		Antlr3AstNode assignment191 = default(Antlr3AstNode);
		Antlr3AstNode ternary192 = default(Antlr3AstNode);

		object set190_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(322, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:323:5: ( listVariables ( ( Equals | AsignmentOperator ) assignment ) | ternary )
			int alt50=2;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case List:
				{
				alt50 = 1;
				}
				break;
			case UnquotedString:
				{
				switch (input.LA(2))
				{
				case ClassMember:
					{
					int LA50_3 = input.LA(3);

					if ((EvaluatePredicate(synpred74_Php_fragment)))
					{
						alt50 = 1;
					}
					else if ((true))
					{
						alt50 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 18, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenSquareBracket:
					{
					int LA50_3 = input.LA(3);

					if ((EvaluatePredicate(synpred74_Php_fragment)))
					{
						alt50 = 1;
					}
					else if ((true))
					{
						alt50 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 19, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case InstanceMember:
					{
					int LA50_3 = input.LA(3);

					if ((EvaluatePredicate(synpred74_Php_fragment)))
					{
						alt50 = 1;
					}
					else if ((true))
					{
						alt50 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 20, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case AsignmentOperator:
				case Equals:
					{
					alt50 = 1;
					}
					break;
				case EOF:
				case Ampersand:
				case And:
				case ArrayAssign:
				case Asterisk:
				case BodyString:
				case CloseRoundBracket:
				case CloseSquareBracket:
				case Colon:
				case Comma:
				case ComparisionOperator:
				case Dot:
				case EqualityOperator:
				case Forwardslash:
				case IncrementOperator:
				case Instanceof:
				case LogicalAnd:
				case LogicalOr:
				case Minus:
				case OpenRoundBracket:
				case Or:
				case Percent:
				case Pipe:
				case Plus:
				case QuestionMark:
				case SemiColon:
				case ShiftOperator:
				case Xor:
					{
					alt50 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case Dollar:
				{
				int LA50_2 = input.LA(2);

				if ((LA50_2==Dollar))
				{
					int LA50_3 = input.LA(3);

					if ((EvaluatePredicate(synpred74_Php_fragment)))
					{
						alt50 = 1;
					}
					else if ((true))
					{
						alt50 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 46, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA50_2==UnquotedString))
				{
					int LA50_3 = input.LA(3);

					if ((EvaluatePredicate(synpred74_Php_fragment)))
					{
						alt50 = 1;
					}
					else if ((true))
					{
						alt50 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 47, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case Array:
			case Bang:
			case Boolean:
			case Clone:
			case DoubleQuotedString:
			case HereDoc:
			case IncrementOperator:
			case Integer:
			case Minus:
			case New:
			case OpenRoundBracket:
			case Real:
			case SingleQuotedString:
			case SuppressWarnings:
			case Tilde:
				{
				alt50 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:323:7: listVariables ( ( Equals | AsignmentOperator ) assignment )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(323, 7);
				PushFollow(Follow._listVariables_in_assignment2188);
				listVariables189=listVariables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, listVariables189.Tree, listVariables189, retval);
				DebugLocation(323, 21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:323:21: ( ( Equals | AsignmentOperator ) assignment )
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:323:22: ( Equals | AsignmentOperator ) assignment
				{
				DebugLocation(323, 22);

				set190=(IToken)input.LT(1);
				if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set190, retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(323, 51);
				PushFollow(Follow._assignment_in_assignment2199);
				assignment191=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment191.Tree, assignment191, retval);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:324:7: ternary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(324, 7);
				PushFollow(Follow._ternary_in_assignment2209);
				ternary192=ternary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ternary192.Tree, ternary192, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 32);
			LeaveRule("assignment", 32);
			LeaveRule_assignment();
			if (state.backtracking > 0) { Memoize(input, 32, assignment_StartIndex); }

		}
		DebugLocation(325, 4);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_listVariables();
	partial void LeaveRule_listVariables();
	// $ANTLR start "listVariables"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:327:1: listVariables : ( List OpenRoundBracket ! name ( ',' ! name )* CloseRoundBracket !| name );
	[GrammarRule("listVariables")]
	private Antlr3AstNode listVariables()
	{
		EnterRule_listVariables();
		EnterRule("listVariables", 33);
		var retval = new Antlr3AstNode("listVariables");
		
		retval.Start = (IToken)input.LT(1);
		int listVariables_StartIndex = input.Index;

		object root_0 = default(object);

		IToken List193 = default(IToken);
		IToken OpenRoundBracket194 = default(IToken);
		IToken char_literal196 = default(IToken);
		IToken CloseRoundBracket198 = default(IToken);
		Antlr3AstNode name195 = default(Antlr3AstNode);
		Antlr3AstNode name197 = default(Antlr3AstNode);
		Antlr3AstNode name199 = default(Antlr3AstNode);

		object List193_tree = default(object);
		object OpenRoundBracket194_tree = default(object);
		object char_literal196_tree = default(object);
		object CloseRoundBracket198_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "listVariables");
		DebugLocation(327, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:328:5: ( List OpenRoundBracket ! name ( ',' ! name )* CloseRoundBracket !| name )
			int alt52=2;
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==List))
			{
				alt52 = 1;
			}
			else if ((LA52_1==Dollar||LA52_1==UnquotedString))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:328:7: List OpenRoundBracket ! name ( ',' ! name )* CloseRoundBracket !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(328, 7);
				List193=(IToken)Match(input,List,Follow._List_in_listVariables2226); if (state.failed) return retval;
				if (state.backtracking == 0) {
				List193_tree = (object)adaptor.Create(List193, retval);
				adaptor.AddChild(root_0, List193_tree);
				}
				DebugLocation(328, 28);
				OpenRoundBracket194=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_listVariables2228); if (state.failed) return retval;
				DebugLocation(328, 30);
				PushFollow(Follow._name_in_listVariables2231);
				name195=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name195.Tree, name195, retval);
				DebugLocation(328, 35);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:328:35: ( ',' ! name )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_1 = input.LA(1);

					if ((LA51_1==Comma))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:328:36: ',' ! name
						{
						DebugLocation(328, 39);
						char_literal196=(IToken)Match(input,Comma,Follow._Comma_in_listVariables2234); if (state.failed) return retval;
						DebugLocation(328, 41);
						PushFollow(Follow._name_in_listVariables2237);
						name197=name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, name197.Tree, name197, retval);

						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }

				DebugLocation(328, 65);
				CloseRoundBracket198=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_listVariables2241); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:329:7: name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(329, 7);
				PushFollow(Follow._name_in_listVariables2251);
				name199=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name199.Tree, name199, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("listVariables", 33);
			LeaveRule("listVariables", 33);
			LeaveRule_listVariables();
			if (state.backtracking > 0) { Memoize(input, 33, listVariables_StartIndex); }

		}
		DebugLocation(330, 4);
		} finally { DebugExitRule(GrammarFileName, "listVariables"); }
		return retval;

	}
	// $ANTLR end "listVariables"

	partial void EnterRule_ternary();
	partial void LeaveRule_ternary();
	// $ANTLR start "ternary"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:332:1: ternary : ( logicalOr QuestionMark expression Colon expression | logicalOr );
	[GrammarRule("ternary")]
	private Antlr3AstNode ternary()
	{
		EnterRule_ternary();
		EnterRule("ternary", 34);
		var retval = new Antlr3AstNode("ternary");
		
		retval.Start = (IToken)input.LT(1);
		int ternary_StartIndex = input.Index;

		object root_0 = default(object);

		IToken QuestionMark201 = default(IToken);
		IToken Colon203 = default(IToken);
		Antlr3AstNode logicalOr200 = default(Antlr3AstNode);
		Antlr3AstNode expression202 = default(Antlr3AstNode);
		Antlr3AstNode expression204 = default(Antlr3AstNode);
		Antlr3AstNode logicalOr205 = default(Antlr3AstNode);

		object QuestionMark201_tree = default(object);
		object Colon203_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ternary");
		DebugLocation(332, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:333:5: ( logicalOr QuestionMark expression Colon expression | logicalOr )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:333:7: logicalOr QuestionMark expression Colon expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(333, 7);
				PushFollow(Follow._logicalOr_in_ternary2268);
				logicalOr200=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr200.Tree, logicalOr200, retval);
				DebugLocation(333, 17);
				QuestionMark201=(IToken)Match(input,QuestionMark,Follow._QuestionMark_in_ternary2270); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QuestionMark201_tree = (object)adaptor.Create(QuestionMark201, retval);
				adaptor.AddChild(root_0, QuestionMark201_tree);
				}
				DebugLocation(333, 30);
				PushFollow(Follow._expression_in_ternary2272);
				expression202=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression202.Tree, expression202, retval);
				DebugLocation(333, 41);
				Colon203=(IToken)Match(input,Colon,Follow._Colon_in_ternary2274); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Colon203_tree = (object)adaptor.Create(Colon203, retval);
				adaptor.AddChild(root_0, Colon203_tree);
				}
				DebugLocation(333, 47);
				PushFollow(Follow._expression_in_ternary2276);
				expression204=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression204.Tree, expression204, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:334:7: logicalOr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(334, 7);
				PushFollow(Follow._logicalOr_in_ternary2284);
				logicalOr205=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr205.Tree, logicalOr205, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ternary", 34);
			LeaveRule("ternary", 34);
			LeaveRule_ternary();
			if (state.backtracking > 0) { Memoize(input, 34, ternary_StartIndex); }

		}
		DebugLocation(335, 4);
		} finally { DebugExitRule(GrammarFileName, "ternary"); }
		return retval;

	}
	// $ANTLR end "ternary"

	partial void EnterRule_logicalOr();
	partial void LeaveRule_logicalOr();
	// $ANTLR start "logicalOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:337:1: logicalOr : logicalAnd ( LogicalOr logicalAnd )* ;
	[GrammarRule("logicalOr")]
	private Antlr3AstNode logicalOr()
	{
		EnterRule_logicalOr();
		EnterRule("logicalOr", 35);
		var retval = new Antlr3AstNode("logicalOr");
		
		retval.Start = (IToken)input.LT(1);
		int logicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalOr207 = default(IToken);
		Antlr3AstNode logicalAnd206 = default(Antlr3AstNode);
		Antlr3AstNode logicalAnd208 = default(Antlr3AstNode);

		object LogicalOr207_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalOr");
		DebugLocation(337, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:338:5: ( logicalAnd ( LogicalOr logicalAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:338:7: logicalAnd ( LogicalOr logicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(338, 7);
			PushFollow(Follow._logicalAnd_in_logicalOr2305);
			logicalAnd206=logicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd206.Tree, logicalAnd206, retval);
			DebugLocation(338, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:338:18: ( LogicalOr logicalAnd )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_1 = input.LA(1);

				if ((LA54_1==LogicalOr))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:338:19: LogicalOr logicalAnd
					{
					DebugLocation(338, 19);
					LogicalOr207=(IToken)Match(input,LogicalOr,Follow._LogicalOr_in_logicalOr2308); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalOr207_tree = (object)adaptor.Create(LogicalOr207, retval);
					adaptor.AddChild(root_0, LogicalOr207_tree);
					}
					DebugLocation(338, 29);
					PushFollow(Follow._logicalAnd_in_logicalOr2310);
					logicalAnd208=logicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd208.Tree, logicalAnd208, retval);

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOr", 35);
			LeaveRule("logicalOr", 35);
			LeaveRule_logicalOr();
			if (state.backtracking > 0) { Memoize(input, 35, logicalOr_StartIndex); }

		}
		DebugLocation(339, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalOr"); }
		return retval;

	}
	// $ANTLR end "logicalOr"

	partial void EnterRule_logicalAnd();
	partial void LeaveRule_logicalAnd();
	// $ANTLR start "logicalAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:341:1: logicalAnd : bitwiseOr ( LogicalAnd bitwiseOr )* ;
	[GrammarRule("logicalAnd")]
	private Antlr3AstNode logicalAnd()
	{
		EnterRule_logicalAnd();
		EnterRule("logicalAnd", 36);
		var retval = new Antlr3AstNode("logicalAnd");
		
		retval.Start = (IToken)input.LT(1);
		int logicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalAnd210 = default(IToken);
		Antlr3AstNode bitwiseOr209 = default(Antlr3AstNode);
		Antlr3AstNode bitwiseOr211 = default(Antlr3AstNode);

		object LogicalAnd210_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalAnd");
		DebugLocation(341, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:342:5: ( bitwiseOr ( LogicalAnd bitwiseOr )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:342:7: bitwiseOr ( LogicalAnd bitwiseOr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(342, 7);
			PushFollow(Follow._bitwiseOr_in_logicalAnd2329);
			bitwiseOr209=bitwiseOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr209.Tree, bitwiseOr209, retval);
			DebugLocation(342, 17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:342:17: ( LogicalAnd bitwiseOr )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==LogicalAnd))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:342:18: LogicalAnd bitwiseOr
					{
					DebugLocation(342, 18);
					LogicalAnd210=(IToken)Match(input,LogicalAnd,Follow._LogicalAnd_in_logicalAnd2332); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalAnd210_tree = (object)adaptor.Create(LogicalAnd210, retval);
					adaptor.AddChild(root_0, LogicalAnd210_tree);
					}
					DebugLocation(342, 29);
					PushFollow(Follow._bitwiseOr_in_logicalAnd2334);
					bitwiseOr211=bitwiseOr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr211.Tree, bitwiseOr211, retval);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAnd", 36);
			LeaveRule("logicalAnd", 36);
			LeaveRule_logicalAnd();
			if (state.backtracking > 0) { Memoize(input, 36, logicalAnd_StartIndex); }

		}
		DebugLocation(343, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalAnd"); }
		return retval;

	}
	// $ANTLR end "logicalAnd"

	partial void EnterRule_bitwiseOr();
	partial void LeaveRule_bitwiseOr();
	// $ANTLR start "bitwiseOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:345:1: bitwiseOr : bitWiseAnd ( Pipe bitWiseAnd )* ;
	[GrammarRule("bitwiseOr")]
	private Antlr3AstNode bitwiseOr()
	{
		EnterRule_bitwiseOr();
		EnterRule("bitwiseOr", 37);
		var retval = new Antlr3AstNode("bitwiseOr");
		
		retval.Start = (IToken)input.LT(1);
		int bitwiseOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Pipe213 = default(IToken);
		Antlr3AstNode bitWiseAnd212 = default(Antlr3AstNode);
		Antlr3AstNode bitWiseAnd214 = default(Antlr3AstNode);

		object Pipe213_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseOr");
		DebugLocation(345, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:346:5: ( bitWiseAnd ( Pipe bitWiseAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:346:7: bitWiseAnd ( Pipe bitWiseAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(346, 7);
			PushFollow(Follow._bitWiseAnd_in_bitwiseOr2357);
			bitWiseAnd212=bitWiseAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd212.Tree, bitWiseAnd212, retval);
			DebugLocation(346, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:346:18: ( Pipe bitWiseAnd )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==Pipe))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:346:19: Pipe bitWiseAnd
					{
					DebugLocation(346, 19);
					Pipe213=(IToken)Match(input,Pipe,Follow._Pipe_in_bitwiseOr2360); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Pipe213_tree = (object)adaptor.Create(Pipe213, retval);
					adaptor.AddChild(root_0, Pipe213_tree);
					}
					DebugLocation(346, 24);
					PushFollow(Follow._bitWiseAnd_in_bitwiseOr2362);
					bitWiseAnd214=bitWiseAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd214.Tree, bitWiseAnd214, retval);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseOr", 37);
			LeaveRule("bitwiseOr", 37);
			LeaveRule_bitwiseOr();
			if (state.backtracking > 0) { Memoize(input, 37, bitwiseOr_StartIndex); }

		}
		DebugLocation(347, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOr"); }
		return retval;

	}
	// $ANTLR end "bitwiseOr"

	partial void EnterRule_bitWiseAnd();
	partial void LeaveRule_bitWiseAnd();
	// $ANTLR start "bitWiseAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:349:1: bitWiseAnd : equalityCheck ( Ampersand equalityCheck )* ;
	[GrammarRule("bitWiseAnd")]
	private Antlr3AstNode bitWiseAnd()
	{
		EnterRule_bitWiseAnd();
		EnterRule("bitWiseAnd", 38);
		var retval = new Antlr3AstNode("bitWiseAnd");
		
		retval.Start = (IToken)input.LT(1);
		int bitWiseAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand216 = default(IToken);
		Antlr3AstNode equalityCheck215 = default(Antlr3AstNode);
		Antlr3AstNode equalityCheck217 = default(Antlr3AstNode);

		object Ampersand216_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseAnd");
		DebugLocation(349, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:350:5: ( equalityCheck ( Ampersand equalityCheck )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:350:7: equalityCheck ( Ampersand equalityCheck )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(350, 7);
			PushFollow(Follow._equalityCheck_in_bitWiseAnd2381);
			equalityCheck215=equalityCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck215.Tree, equalityCheck215, retval);
			DebugLocation(350, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:350:21: ( Ampersand equalityCheck )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==Ampersand))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:350:22: Ampersand equalityCheck
					{
					DebugLocation(350, 22);
					Ampersand216=(IToken)Match(input,Ampersand,Follow._Ampersand_in_bitWiseAnd2384); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Ampersand216_tree = (object)adaptor.Create(Ampersand216, retval);
					adaptor.AddChild(root_0, Ampersand216_tree);
					}
					DebugLocation(350, 32);
					PushFollow(Follow._equalityCheck_in_bitWiseAnd2386);
					equalityCheck217=equalityCheck();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck217.Tree, equalityCheck217, retval);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseAnd", 38);
			LeaveRule("bitWiseAnd", 38);
			LeaveRule_bitWiseAnd();
			if (state.backtracking > 0) { Memoize(input, 38, bitWiseAnd_StartIndex); }

		}
		DebugLocation(351, 4);
		} finally { DebugExitRule(GrammarFileName, "bitWiseAnd"); }
		return retval;

	}
	// $ANTLR end "bitWiseAnd"

	partial void EnterRule_equalityCheck();
	partial void LeaveRule_equalityCheck();
	// $ANTLR start "equalityCheck"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:353:1: equalityCheck : comparisionCheck ( EqualityOperator comparisionCheck )? ;
	[GrammarRule("equalityCheck")]
	private Antlr3AstNode equalityCheck()
	{
		EnterRule_equalityCheck();
		EnterRule("equalityCheck", 39);
		var retval = new Antlr3AstNode("equalityCheck");
		
		retval.Start = (IToken)input.LT(1);
		int equalityCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken EqualityOperator219 = default(IToken);
		Antlr3AstNode comparisionCheck218 = default(Antlr3AstNode);
		Antlr3AstNode comparisionCheck220 = default(Antlr3AstNode);

		object EqualityOperator219_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityCheck");
		DebugLocation(353, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:354:5: ( comparisionCheck ( EqualityOperator comparisionCheck )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:354:7: comparisionCheck ( EqualityOperator comparisionCheck )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(354, 7);
			PushFollow(Follow._comparisionCheck_in_equalityCheck2405);
			comparisionCheck218=comparisionCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck218.Tree, comparisionCheck218, retval);
			DebugLocation(354, 24);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:354:24: ( EqualityOperator comparisionCheck )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==EqualityOperator))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:354:25: EqualityOperator comparisionCheck
				{
				DebugLocation(354, 25);
				EqualityOperator219=(IToken)Match(input,EqualityOperator,Follow._EqualityOperator_in_equalityCheck2408); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EqualityOperator219_tree = (object)adaptor.Create(EqualityOperator219, retval);
				adaptor.AddChild(root_0, EqualityOperator219_tree);
				}
				DebugLocation(354, 42);
				PushFollow(Follow._comparisionCheck_in_equalityCheck2410);
				comparisionCheck220=comparisionCheck();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck220.Tree, comparisionCheck220, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityCheck", 39);
			LeaveRule("equalityCheck", 39);
			LeaveRule_equalityCheck();
			if (state.backtracking > 0) { Memoize(input, 39, equalityCheck_StartIndex); }

		}
		DebugLocation(355, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityCheck"); }
		return retval;

	}
	// $ANTLR end "equalityCheck"

	partial void EnterRule_comparisionCheck();
	partial void LeaveRule_comparisionCheck();
	// $ANTLR start "comparisionCheck"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:357:1: comparisionCheck : bitWiseShift ( ComparisionOperator bitWiseShift )? ;
	[GrammarRule("comparisionCheck")]
	private Antlr3AstNode comparisionCheck()
	{
		EnterRule_comparisionCheck();
		EnterRule("comparisionCheck", 40);
		var retval = new Antlr3AstNode("comparisionCheck");
		
		retval.Start = (IToken)input.LT(1);
		int comparisionCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ComparisionOperator222 = default(IToken);
		Antlr3AstNode bitWiseShift221 = default(Antlr3AstNode);
		Antlr3AstNode bitWiseShift223 = default(Antlr3AstNode);

		object ComparisionOperator222_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "comparisionCheck");
		DebugLocation(357, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:358:5: ( bitWiseShift ( ComparisionOperator bitWiseShift )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:358:7: bitWiseShift ( ComparisionOperator bitWiseShift )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(358, 7);
			PushFollow(Follow._bitWiseShift_in_comparisionCheck2433);
			bitWiseShift221=bitWiseShift();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift221.Tree, bitWiseShift221, retval);
			DebugLocation(358, 20);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:358:20: ( ComparisionOperator bitWiseShift )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_1 = input.LA(1);

			if ((LA59_1==ComparisionOperator))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:358:21: ComparisionOperator bitWiseShift
				{
				DebugLocation(358, 21);
				ComparisionOperator222=(IToken)Match(input,ComparisionOperator,Follow._ComparisionOperator_in_comparisionCheck2436); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ComparisionOperator222_tree = (object)adaptor.Create(ComparisionOperator222, retval);
				adaptor.AddChild(root_0, ComparisionOperator222_tree);
				}
				DebugLocation(358, 41);
				PushFollow(Follow._bitWiseShift_in_comparisionCheck2438);
				bitWiseShift223=bitWiseShift();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift223.Tree, bitWiseShift223, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comparisionCheck", 40);
			LeaveRule("comparisionCheck", 40);
			LeaveRule_comparisionCheck();
			if (state.backtracking > 0) { Memoize(input, 40, comparisionCheck_StartIndex); }

		}
		DebugLocation(359, 4);
		} finally { DebugExitRule(GrammarFileName, "comparisionCheck"); }
		return retval;

	}
	// $ANTLR end "comparisionCheck"

	partial void EnterRule_bitWiseShift();
	partial void LeaveRule_bitWiseShift();
	// $ANTLR start "bitWiseShift"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:361:1: bitWiseShift : addition ( ShiftOperator addition )* ;
	[GrammarRule("bitWiseShift")]
	private Antlr3AstNode bitWiseShift()
	{
		EnterRule_bitWiseShift();
		EnterRule("bitWiseShift", 41);
		var retval = new Antlr3AstNode("bitWiseShift");
		
		retval.Start = (IToken)input.LT(1);
		int bitWiseShift_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ShiftOperator225 = default(IToken);
		Antlr3AstNode addition224 = default(Antlr3AstNode);
		Antlr3AstNode addition226 = default(Antlr3AstNode);

		object ShiftOperator225_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseShift");
		DebugLocation(361, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:362:5: ( addition ( ShiftOperator addition )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:362:7: addition ( ShiftOperator addition )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(362, 7);
			PushFollow(Follow._addition_in_bitWiseShift2457);
			addition224=addition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, addition224.Tree, addition224, retval);
			DebugLocation(362, 16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:362:16: ( ShiftOperator addition )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_1 = input.LA(1);

				if ((LA60_1==ShiftOperator))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:362:17: ShiftOperator addition
					{
					DebugLocation(362, 17);
					ShiftOperator225=(IToken)Match(input,ShiftOperator,Follow._ShiftOperator_in_bitWiseShift2460); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ShiftOperator225_tree = (object)adaptor.Create(ShiftOperator225, retval);
					adaptor.AddChild(root_0, ShiftOperator225_tree);
					}
					DebugLocation(362, 31);
					PushFollow(Follow._addition_in_bitWiseShift2462);
					addition226=addition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, addition226.Tree, addition226, retval);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseShift", 41);
			LeaveRule("bitWiseShift", 41);
			LeaveRule_bitWiseShift();
			if (state.backtracking > 0) { Memoize(input, 41, bitWiseShift_StartIndex); }

		}
		DebugLocation(363, 4);
		} finally { DebugExitRule(GrammarFileName, "bitWiseShift"); }
		return retval;

	}
	// $ANTLR end "bitWiseShift"

	partial void EnterRule_addition();
	partial void LeaveRule_addition();
	// $ANTLR start "addition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:365:1: addition : multiplication ( ( Plus | Minus | Dot ) multiplication )* ;
	[GrammarRule("addition")]
	private Antlr3AstNode addition()
	{
		EnterRule_addition();
		EnterRule("addition", 42);
		var retval = new Antlr3AstNode("addition");
		
		retval.Start = (IToken)input.LT(1);
		int addition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set228 = default(IToken);
		Antlr3AstNode multiplication227 = default(Antlr3AstNode);
		Antlr3AstNode multiplication229 = default(Antlr3AstNode);

		object set228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "addition");
		DebugLocation(365, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:366:5: ( multiplication ( ( Plus | Minus | Dot ) multiplication )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:366:7: multiplication ( ( Plus | Minus | Dot ) multiplication )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(366, 7);
			PushFollow(Follow._multiplication_in_addition2485);
			multiplication227=multiplication();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication227.Tree, multiplication227, retval);
			DebugLocation(366, 22);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:366:22: ( ( Plus | Minus | Dot ) multiplication )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_1 = input.LA(1);

				if ((LA61_1==Dot||LA61_1==Minus||LA61_1==Plus))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:366:23: ( Plus | Minus | Dot ) multiplication
					{
					DebugLocation(366, 23);

					set228=(IToken)input.LT(1);
					if (input.LA(1)==Dot||input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set228, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(366, 44);
					PushFollow(Follow._multiplication_in_addition2500);
					multiplication229=multiplication();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication229.Tree, multiplication229, retval);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addition", 42);
			LeaveRule("addition", 42);
			LeaveRule_addition();
			if (state.backtracking > 0) { Memoize(input, 42, addition_StartIndex); }

		}
		DebugLocation(367, 4);
		} finally { DebugExitRule(GrammarFileName, "addition"); }
		return retval;

	}
	// $ANTLR end "addition"

	partial void EnterRule_multiplication();
	partial void LeaveRule_multiplication();
	// $ANTLR start "multiplication"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:369:1: multiplication : logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )* ;
	[GrammarRule("multiplication")]
	private Antlr3AstNode multiplication()
	{
		EnterRule_multiplication();
		EnterRule("multiplication", 43);
		var retval = new Antlr3AstNode("multiplication");
		
		retval.Start = (IToken)input.LT(1);
		int multiplication_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set231 = default(IToken);
		Antlr3AstNode logicalNot230 = default(Antlr3AstNode);
		Antlr3AstNode logicalNot232 = default(Antlr3AstNode);

		object set231_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplication");
		DebugLocation(369, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:370:5: ( logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:370:7: logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(370, 7);
			PushFollow(Follow._logicalNot_in_multiplication2519);
			logicalNot230=logicalNot();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot230.Tree, logicalNot230, retval);
			DebugLocation(370, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:370:18: ( ( Asterisk | Forwardslash | Percent ) logicalNot )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_1 = input.LA(1);

				if ((LA62_1==Asterisk||LA62_1==Forwardslash||LA62_1==Percent))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:370:19: ( Asterisk | Forwardslash | Percent ) logicalNot
					{
					DebugLocation(370, 19);

					set231=(IToken)input.LT(1);
					if (input.LA(1)==Asterisk||input.LA(1)==Forwardslash||input.LA(1)==Percent)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set231, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(370, 55);
					PushFollow(Follow._logicalNot_in_multiplication2534);
					logicalNot232=logicalNot();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot232.Tree, logicalNot232, retval);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplication", 43);
			LeaveRule("multiplication", 43);
			LeaveRule_multiplication();
			if (state.backtracking > 0) { Memoize(input, 43, multiplication_StartIndex); }

		}
		DebugLocation(371, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplication"); }
		return retval;

	}
	// $ANTLR end "multiplication"

	partial void EnterRule_logicalNot();
	partial void LeaveRule_logicalNot();
	// $ANTLR start "logicalNot"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:373:1: logicalNot : ( Bang logicalNot | instanceOf );
	[GrammarRule("logicalNot")]
	private Antlr3AstNode logicalNot()
	{
		EnterRule_logicalNot();
		EnterRule("logicalNot", 44);
		var retval = new Antlr3AstNode("logicalNot");
		
		retval.Start = (IToken)input.LT(1);
		int logicalNot_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Bang233 = default(IToken);
		Antlr3AstNode logicalNot234 = default(Antlr3AstNode);
		Antlr3AstNode instanceOf235 = default(Antlr3AstNode);

		object Bang233_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalNot");
		DebugLocation(373, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:374:5: ( Bang logicalNot | instanceOf )
			int alt63=2;
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==Bang))
			{
				alt63 = 1;
			}
			else if ((LA63_1==Ampersand||LA63_1==Array||LA63_1==Boolean||LA63_1==Clone||LA63_1==Dollar||LA63_1==DoubleQuotedString||LA63_1==HereDoc||LA63_1==IncrementOperator||LA63_1==Integer||LA63_1==Minus||LA63_1==New||LA63_1==OpenRoundBracket||LA63_1==Real||LA63_1==SingleQuotedString||LA63_1==SuppressWarnings||LA63_1==Tilde||LA63_1==UnquotedString))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:374:7: Bang logicalNot
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(374, 7);
				Bang233=(IToken)Match(input,Bang,Follow._Bang_in_logicalNot2553); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Bang233_tree = (object)adaptor.Create(Bang233, retval);
				adaptor.AddChild(root_0, Bang233_tree);
				}
				DebugLocation(374, 12);
				PushFollow(Follow._logicalNot_in_logicalNot2555);
				logicalNot234=logicalNot();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot234.Tree, logicalNot234, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:375:7: instanceOf
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(375, 7);
				PushFollow(Follow._instanceOf_in_logicalNot2563);
				instanceOf235=instanceOf();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOf235.Tree, instanceOf235, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalNot", 44);
			LeaveRule("logicalNot", 44);
			LeaveRule_logicalNot();
			if (state.backtracking > 0) { Memoize(input, 44, logicalNot_StartIndex); }

		}
		DebugLocation(376, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalNot"); }
		return retval;

	}
	// $ANTLR end "logicalNot"

	partial void EnterRule_instanceOf();
	partial void LeaveRule_instanceOf();
	// $ANTLR start "instanceOf"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:378:1: instanceOf : negateOrCast ( Instanceof negateOrCast )? ;
	[GrammarRule("instanceOf")]
	private Antlr3AstNode instanceOf()
	{
		EnterRule_instanceOf();
		EnterRule("instanceOf", 45);
		var retval = new Antlr3AstNode("instanceOf");
		
		retval.Start = (IToken)input.LT(1);
		int instanceOf_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Instanceof237 = default(IToken);
		Antlr3AstNode negateOrCast236 = default(Antlr3AstNode);
		Antlr3AstNode negateOrCast238 = default(Antlr3AstNode);

		object Instanceof237_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "instanceOf");
		DebugLocation(378, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:379:5: ( negateOrCast ( Instanceof negateOrCast )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:379:7: negateOrCast ( Instanceof negateOrCast )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(379, 7);
			PushFollow(Follow._negateOrCast_in_instanceOf2580);
			negateOrCast236=negateOrCast();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast236.Tree, negateOrCast236, retval);
			DebugLocation(379, 20);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:379:20: ( Instanceof negateOrCast )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==Instanceof))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:379:21: Instanceof negateOrCast
				{
				DebugLocation(379, 21);
				Instanceof237=(IToken)Match(input,Instanceof,Follow._Instanceof_in_instanceOf2583); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Instanceof237_tree = (object)adaptor.Create(Instanceof237, retval);
				adaptor.AddChild(root_0, Instanceof237_tree);
				}
				DebugLocation(379, 32);
				PushFollow(Follow._negateOrCast_in_instanceOf2585);
				negateOrCast238=negateOrCast();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast238.Tree, negateOrCast238, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOf", 45);
			LeaveRule("instanceOf", 45);
			LeaveRule_instanceOf();
			if (state.backtracking > 0) { Memoize(input, 45, instanceOf_StartIndex); }

		}
		DebugLocation(380, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOf"); }
		return retval;

	}
	// $ANTLR end "instanceOf"

	partial void EnterRule_negateOrCast();
	partial void LeaveRule_negateOrCast();
	// $ANTLR start "negateOrCast"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:382:1: negateOrCast : ( ( Tilde | Minus | SuppressWarnings ) increment | OpenRoundBracket PrimitiveType CloseRoundBracket increment | OpenRoundBracket ! weakLogicalAnd CloseRoundBracket !| increment );
	[GrammarRule("negateOrCast")]
	private Antlr3AstNode negateOrCast()
	{
		EnterRule_negateOrCast();
		EnterRule("negateOrCast", 46);
		var retval = new Antlr3AstNode("negateOrCast");
		
		retval.Start = (IToken)input.LT(1);
		int negateOrCast_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set239 = default(IToken);
		IToken OpenRoundBracket241 = default(IToken);
		IToken PrimitiveType242 = default(IToken);
		IToken CloseRoundBracket243 = default(IToken);
		IToken OpenRoundBracket245 = default(IToken);
		IToken CloseRoundBracket247 = default(IToken);
		Antlr3AstNode increment240 = default(Antlr3AstNode);
		Antlr3AstNode increment244 = default(Antlr3AstNode);
		Antlr3AstNode weakLogicalAnd246 = default(Antlr3AstNode);
		Antlr3AstNode increment248 = default(Antlr3AstNode);

		object set239_tree = default(object);
		object OpenRoundBracket241_tree = default(object);
		object PrimitiveType242_tree = default(object);
		object CloseRoundBracket243_tree = default(object);
		object OpenRoundBracket245_tree = default(object);
		object CloseRoundBracket247_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "negateOrCast");
		DebugLocation(382, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:383:5: ( ( Tilde | Minus | SuppressWarnings ) increment | OpenRoundBracket PrimitiveType CloseRoundBracket increment | OpenRoundBracket ! weakLogicalAnd CloseRoundBracket !| increment )
			int alt65=4;
			try { DebugEnterDecision(65, false);
			switch (input.LA(1))
			{
			case Minus:
			case SuppressWarnings:
			case Tilde:
				{
				alt65 = 1;
				}
				break;
			case OpenRoundBracket:
				{
				int LA65_2 = input.LA(2);

				if ((LA65_2==PrimitiveType))
				{
					alt65 = 2;
				}
				else if ((LA65_2==Ampersand||LA65_2==Array||LA65_2==Bang||LA65_2==Boolean||LA65_2==Clone||LA65_2==Dollar||LA65_2==DoubleQuotedString||LA65_2==HereDoc||LA65_2==IncrementOperator||LA65_2==Integer||LA65_2==List||LA65_2==Minus||LA65_2==New||LA65_2==OpenRoundBracket||LA65_2==Real||LA65_2==SingleQuotedString||LA65_2==SuppressWarnings||LA65_2==Tilde||LA65_2==UnquotedString))
				{
					alt65 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case Array:
			case Boolean:
			case Clone:
			case Dollar:
			case DoubleQuotedString:
			case HereDoc:
			case IncrementOperator:
			case Integer:
			case New:
			case Real:
			case SingleQuotedString:
			case UnquotedString:
				{
				alt65 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:383:7: ( Tilde | Minus | SuppressWarnings ) increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(383, 7);

				set239=(IToken)input.LT(1);
				if (input.LA(1)==Minus||input.LA(1)==SuppressWarnings||input.LA(1)==Tilde)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set239, retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(383, 42);
				PushFollow(Follow._increment_in_negateOrCast2616);
				increment240=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment240.Tree, increment240, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:384:7: OpenRoundBracket PrimitiveType CloseRoundBracket increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(384, 7);
				OpenRoundBracket241=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_negateOrCast2624); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket241_tree = (object)adaptor.Create(OpenRoundBracket241, retval);
				adaptor.AddChild(root_0, OpenRoundBracket241_tree);
				}
				DebugLocation(384, 24);
				PrimitiveType242=(IToken)Match(input,PrimitiveType,Follow._PrimitiveType_in_negateOrCast2626); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PrimitiveType242_tree = (object)adaptor.Create(PrimitiveType242, retval);
				adaptor.AddChild(root_0, PrimitiveType242_tree);
				}
				DebugLocation(384, 38);
				CloseRoundBracket243=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_negateOrCast2628); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket243_tree = (object)adaptor.Create(CloseRoundBracket243, retval);
				adaptor.AddChild(root_0, CloseRoundBracket243_tree);
				}
				DebugLocation(384, 56);
				PushFollow(Follow._increment_in_negateOrCast2630);
				increment244=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment244.Tree, increment244, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:385:7: OpenRoundBracket ! weakLogicalAnd CloseRoundBracket !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(385, 23);
				OpenRoundBracket245=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_negateOrCast2638); if (state.failed) return retval;
				DebugLocation(385, 25);
				PushFollow(Follow._weakLogicalAnd_in_negateOrCast2641);
				weakLogicalAnd246=weakLogicalAnd();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd246.Tree, weakLogicalAnd246, retval);
				DebugLocation(385, 57);
				CloseRoundBracket247=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_negateOrCast2643); if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:386:7: increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(386, 7);
				PushFollow(Follow._increment_in_negateOrCast2652);
				increment248=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment248.Tree, increment248, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("negateOrCast", 46);
			LeaveRule("negateOrCast", 46);
			LeaveRule_negateOrCast();
			if (state.backtracking > 0) { Memoize(input, 46, negateOrCast_StartIndex); }

		}
		DebugLocation(387, 4);
		} finally { DebugExitRule(GrammarFileName, "negateOrCast"); }
		return retval;

	}
	// $ANTLR end "negateOrCast"

	partial void EnterRule_increment();
	partial void LeaveRule_increment();
	// $ANTLR start "increment"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:389:1: increment : ( IncrementOperator name | name IncrementOperator | newOrClone );
	[GrammarRule("increment")]
	private Antlr3AstNode increment()
	{
		EnterRule_increment();
		EnterRule("increment", 47);
		var retval = new Antlr3AstNode("increment");
		
		retval.Start = (IToken)input.LT(1);
		int increment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IncrementOperator249 = default(IToken);
		IToken IncrementOperator252 = default(IToken);
		Antlr3AstNode name250 = default(Antlr3AstNode);
		Antlr3AstNode name251 = default(Antlr3AstNode);
		Antlr3AstNode newOrClone253 = default(Antlr3AstNode);

		object IncrementOperator249_tree = default(object);
		object IncrementOperator252_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "increment");
		DebugLocation(389, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:390:5: ( IncrementOperator name | name IncrementOperator | newOrClone )
			int alt66=3;
			try { DebugEnterDecision(66, false);
			switch (input.LA(1))
			{
			case IncrementOperator:
				{
				alt66 = 1;
				}
				break;
			case UnquotedString:
				{
				switch (input.LA(2))
				{
				case ClassMember:
					{
					int LA66_3 = input.LA(3);

					if ((EvaluatePredicate(synpred99_Php_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 14, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenSquareBracket:
					{
					int LA66_3 = input.LA(3);

					if ((EvaluatePredicate(synpred99_Php_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 15, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case InstanceMember:
					{
					int LA66_3 = input.LA(3);

					if ((EvaluatePredicate(synpred99_Php_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 16, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IncrementOperator:
					{
					alt66 = 2;
					}
					break;
				case EOF:
				case Ampersand:
				case And:
				case ArrayAssign:
				case Asterisk:
				case BodyString:
				case CloseRoundBracket:
				case CloseSquareBracket:
				case Colon:
				case Comma:
				case ComparisionOperator:
				case Dot:
				case EqualityOperator:
				case Forwardslash:
				case Instanceof:
				case LogicalAnd:
				case LogicalOr:
				case Minus:
				case OpenRoundBracket:
				case Or:
				case Percent:
				case Pipe:
				case Plus:
				case QuestionMark:
				case SemiColon:
				case ShiftOperator:
				case Xor:
					{
					alt66 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case Dollar:
				{
				int LA66_2 = input.LA(2);

				if ((LA66_2==Dollar))
				{
					int LA66_3 = input.LA(3);

					if ((EvaluatePredicate(synpred99_Php_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 41, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA66_2==UnquotedString))
				{
					int LA66_3 = input.LA(3);

					if ((EvaluatePredicate(synpred99_Php_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 42, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case Array:
			case Boolean:
			case Clone:
			case DoubleQuotedString:
			case HereDoc:
			case Integer:
			case New:
			case Real:
			case SingleQuotedString:
				{
				alt66 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:390:7: IncrementOperator name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(390, 7);
				IncrementOperator249=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment2669); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncrementOperator249_tree = (object)adaptor.Create(IncrementOperator249, retval);
				adaptor.AddChild(root_0, IncrementOperator249_tree);
				}
				DebugLocation(390, 25);
				PushFollow(Follow._name_in_increment2671);
				name250=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name250.Tree, name250, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:391:7: name IncrementOperator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(391, 7);
				PushFollow(Follow._name_in_increment2679);
				name251=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name251.Tree, name251, retval);
				DebugLocation(391, 12);
				IncrementOperator252=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment2681); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncrementOperator252_tree = (object)adaptor.Create(IncrementOperator252, retval);
				adaptor.AddChild(root_0, IncrementOperator252_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:392:7: newOrClone
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(392, 7);
				PushFollow(Follow._newOrClone_in_increment2689);
				newOrClone253=newOrClone();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newOrClone253.Tree, newOrClone253, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("increment", 47);
			LeaveRule("increment", 47);
			LeaveRule_increment();
			if (state.backtracking > 0) { Memoize(input, 47, increment_StartIndex); }

		}
		DebugLocation(393, 4);
		} finally { DebugExitRule(GrammarFileName, "increment"); }
		return retval;

	}
	// $ANTLR end "increment"

	partial void EnterRule_newOrClone();
	partial void LeaveRule_newOrClone();
	// $ANTLR start "newOrClone"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:395:1: newOrClone : ( New nameOrFunctionCall | Clone name | atomOrReference );
	[GrammarRule("newOrClone")]
	private Antlr3AstNode newOrClone()
	{
		EnterRule_newOrClone();
		EnterRule("newOrClone", 48);
		var retval = new Antlr3AstNode("newOrClone");
		
		retval.Start = (IToken)input.LT(1);
		int newOrClone_StartIndex = input.Index;

		object root_0 = default(object);

		IToken New254 = default(IToken);
		IToken Clone256 = default(IToken);
		Antlr3AstNode nameOrFunctionCall255 = default(Antlr3AstNode);
		Antlr3AstNode name257 = default(Antlr3AstNode);
		Antlr3AstNode atomOrReference258 = default(Antlr3AstNode);

		object New254_tree = default(object);
		object Clone256_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "newOrClone");
		DebugLocation(395, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:396:5: ( New nameOrFunctionCall | Clone name | atomOrReference )
			int alt67=3;
			try { DebugEnterDecision(67, false);
			switch (input.LA(1))
			{
			case New:
				{
				alt67 = 1;
				}
				break;
			case Clone:
				{
				alt67 = 2;
				}
				break;
			case Ampersand:
			case Array:
			case Boolean:
			case Dollar:
			case DoubleQuotedString:
			case HereDoc:
			case Integer:
			case Real:
			case SingleQuotedString:
			case UnquotedString:
				{
				alt67 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:396:7: New nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(396, 7);
				New254=(IToken)Match(input,New,Follow._New_in_newOrClone2706); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New254_tree = (object)adaptor.Create(New254, retval);
				adaptor.AddChild(root_0, New254_tree);
				}
				DebugLocation(396, 11);
				PushFollow(Follow._nameOrFunctionCall_in_newOrClone2708);
				nameOrFunctionCall255=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall255.Tree, nameOrFunctionCall255, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:397:7: Clone name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(397, 7);
				Clone256=(IToken)Match(input,Clone,Follow._Clone_in_newOrClone2716); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Clone256_tree = (object)adaptor.Create(Clone256, retval);
				adaptor.AddChild(root_0, Clone256_tree);
				}
				DebugLocation(397, 13);
				PushFollow(Follow._name_in_newOrClone2718);
				name257=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name257.Tree, name257, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:398:7: atomOrReference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(398, 7);
				PushFollow(Follow._atomOrReference_in_newOrClone2726);
				atomOrReference258=atomOrReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atomOrReference258.Tree, atomOrReference258, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newOrClone", 48);
			LeaveRule("newOrClone", 48);
			LeaveRule_newOrClone();
			if (state.backtracking > 0) { Memoize(input, 48, newOrClone_StartIndex); }

		}
		DebugLocation(399, 4);
		} finally { DebugExitRule(GrammarFileName, "newOrClone"); }
		return retval;

	}
	// $ANTLR end "newOrClone"

	partial void EnterRule_atomOrReference();
	partial void LeaveRule_atomOrReference();
	// $ANTLR start "atomOrReference"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:401:1: atomOrReference : ( atom | reference );
	[GrammarRule("atomOrReference")]
	private Antlr3AstNode atomOrReference()
	{
		EnterRule_atomOrReference();
		EnterRule("atomOrReference", 49);
		var retval = new Antlr3AstNode("atomOrReference");
		
		retval.Start = (IToken)input.LT(1);
		int atomOrReference_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode atom259 = default(Antlr3AstNode);
		Antlr3AstNode reference260 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "atomOrReference");
		DebugLocation(401, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:402:5: ( atom | reference )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_1 = input.LA(1);

			if ((LA68_1==Array||LA68_1==Boolean||LA68_1==DoubleQuotedString||LA68_1==HereDoc||LA68_1==Integer||LA68_1==Real||LA68_1==SingleQuotedString))
			{
				alt68 = 1;
			}
			else if ((LA68_1==Ampersand||LA68_1==Dollar||LA68_1==UnquotedString))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:402:7: atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(402, 7);
				PushFollow(Follow._atom_in_atomOrReference2743);
				atom259=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom259.Tree, atom259, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:403:7: reference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(403, 7);
				PushFollow(Follow._reference_in_atomOrReference2751);
				reference260=reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, reference260.Tree, reference260, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atomOrReference", 49);
			LeaveRule("atomOrReference", 49);
			LeaveRule_atomOrReference();
			if (state.backtracking > 0) { Memoize(input, 49, atomOrReference_StartIndex); }

		}
		DebugLocation(404, 4);
		} finally { DebugExitRule(GrammarFileName, "atomOrReference"); }
		return retval;

	}
	// $ANTLR end "atomOrReference"

	partial void EnterRule_arrayDeclaration();
	partial void LeaveRule_arrayDeclaration();
	// $ANTLR start "arrayDeclaration"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:406:1: arrayDeclaration : Array OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* )? CloseRoundBracket ;
	[GrammarRule("arrayDeclaration")]
	private Antlr3AstNode arrayDeclaration()
	{
		EnterRule_arrayDeclaration();
		EnterRule("arrayDeclaration", 50);
		var retval = new Antlr3AstNode("arrayDeclaration");
		
		retval.Start = (IToken)input.LT(1);
		int arrayDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Array261 = default(IToken);
		IToken OpenRoundBracket262 = default(IToken);
		IToken Comma264 = default(IToken);
		IToken CloseRoundBracket266 = default(IToken);
		Antlr3AstNode arrayEntry263 = default(Antlr3AstNode);
		Antlr3AstNode arrayEntry265 = default(Antlr3AstNode);

		object Array261_tree = default(object);
		object OpenRoundBracket262_tree = default(object);
		object Comma264_tree = default(object);
		object CloseRoundBracket266_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayDeclaration");
		DebugLocation(406, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:407:5: ( Array OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:407:7: Array OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* )? CloseRoundBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(407, 7);
			Array261=(IToken)Match(input,Array,Follow._Array_in_arrayDeclaration2768); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Array261_tree = (object)adaptor.Create(Array261, retval);
			adaptor.AddChild(root_0, Array261_tree);
			}
			DebugLocation(407, 13);
			OpenRoundBracket262=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_arrayDeclaration2770); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenRoundBracket262_tree = (object)adaptor.Create(OpenRoundBracket262, retval);
			adaptor.AddChild(root_0, OpenRoundBracket262_tree);
			}
			DebugLocation(407, 30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:407:30: ( arrayEntry ( Comma arrayEntry )* )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_1 = input.LA(1);

			if ((LA70_1==Ampersand||LA70_1==Array||LA70_1==Bang||LA70_1==Boolean||LA70_1==Clone||LA70_1==Dollar||LA70_1==DoubleQuotedString||LA70_1==HereDoc||LA70_1==IncrementOperator||LA70_1==Integer||LA70_1==List||LA70_1==Minus||LA70_1==New||LA70_1==OpenRoundBracket||LA70_1==Real||LA70_1==SingleQuotedString||LA70_1==SuppressWarnings||LA70_1==Tilde||LA70_1==UnquotedString))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:407:31: arrayEntry ( Comma arrayEntry )*
				{
				DebugLocation(407, 31);
				PushFollow(Follow._arrayEntry_in_arrayDeclaration2773);
				arrayEntry263=arrayEntry();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry263.Tree, arrayEntry263, retval);
				DebugLocation(407, 42);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:407:42: ( Comma arrayEntry )*
				try { DebugEnterSubRule(69);
				while (true)
				{
					int alt69=2;
					try { DebugEnterDecision(69, false);
					int LA69_1 = input.LA(1);

					if ((LA69_1==Comma))
					{
						alt69 = 1;
					}


					} finally { DebugExitDecision(69); }
					switch ( alt69 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:407:43: Comma arrayEntry
						{
						DebugLocation(407, 43);
						Comma264=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2776); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma264_tree = (object)adaptor.Create(Comma264, retval);
						adaptor.AddChild(root_0, Comma264_tree);
						}
						DebugLocation(407, 49);
						PushFollow(Follow._arrayEntry_in_arrayDeclaration2778);
						arrayEntry265=arrayEntry();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry265.Tree, arrayEntry265, retval);

						}
						break;

					default:
						goto loop69;
					}
				}

				loop69:
					;

				} finally { DebugExitSubRule(69); }


				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(407, 64);
			CloseRoundBracket266=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_arrayDeclaration2784); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseRoundBracket266_tree = (object)adaptor.Create(CloseRoundBracket266, retval);
			adaptor.AddChild(root_0, CloseRoundBracket266_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclaration", 50);
			LeaveRule("arrayDeclaration", 50);
			LeaveRule_arrayDeclaration();
			if (state.backtracking > 0) { Memoize(input, 50, arrayDeclaration_StartIndex); }

		}
		DebugLocation(408, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaration"); }
		return retval;

	}
	// $ANTLR end "arrayDeclaration"

	partial void EnterRule_arrayEntry();
	partial void LeaveRule_arrayEntry();
	// $ANTLR start "arrayEntry"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:410:1: arrayEntry : ( keyValuePair | expression ) ;
	[GrammarRule("arrayEntry")]
	private Antlr3AstNode arrayEntry()
	{
		EnterRule_arrayEntry();
		EnterRule("arrayEntry", 51);
		var retval = new Antlr3AstNode("arrayEntry");
		
		retval.Start = (IToken)input.LT(1);
		int arrayEntry_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode keyValuePair267 = default(Antlr3AstNode);
		Antlr3AstNode expression268 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "arrayEntry");
		DebugLocation(410, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:411:5: ( ( keyValuePair | expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:411:7: ( keyValuePair | expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(411, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:411:7: ( keyValuePair | expression )
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			try
			{
				alt71 = dfa71.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:411:8: keyValuePair
				{
				DebugLocation(411, 8);
				PushFollow(Follow._keyValuePair_in_arrayEntry2802);
				keyValuePair267=keyValuePair();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, keyValuePair267.Tree, keyValuePair267, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:411:23: expression
				{
				DebugLocation(411, 23);
				PushFollow(Follow._expression_in_arrayEntry2806);
				expression268=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression268.Tree, expression268, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayEntry", 51);
			LeaveRule("arrayEntry", 51);
			LeaveRule_arrayEntry();
			if (state.backtracking > 0) { Memoize(input, 51, arrayEntry_StartIndex); }

		}
		DebugLocation(412, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayEntry"); }
		return retval;

	}
	// $ANTLR end "arrayEntry"

	partial void EnterRule_keyValuePair();
	partial void LeaveRule_keyValuePair();
	// $ANTLR start "keyValuePair"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:414:1: keyValuePair : ( expression ArrayAssign expression ) ;
	[GrammarRule("keyValuePair")]
	private Antlr3AstNode keyValuePair()
	{
		EnterRule_keyValuePair();
		EnterRule("keyValuePair", 52);
		var retval = new Antlr3AstNode("keyValuePair");
		
		retval.Start = (IToken)input.LT(1);
		int keyValuePair_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ArrayAssign270 = default(IToken);
		Antlr3AstNode expression269 = default(Antlr3AstNode);
		Antlr3AstNode expression271 = default(Antlr3AstNode);

		object ArrayAssign270_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "keyValuePair");
		DebugLocation(414, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:415:5: ( ( expression ArrayAssign expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:415:7: ( expression ArrayAssign expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(415, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:415:7: ( expression ArrayAssign expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:415:8: expression ArrayAssign expression
			{
			DebugLocation(415, 8);
			PushFollow(Follow._expression_in_keyValuePair2825);
			expression269=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression269.Tree, expression269, retval);
			DebugLocation(415, 19);
			ArrayAssign270=(IToken)Match(input,ArrayAssign,Follow._ArrayAssign_in_keyValuePair2827); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ArrayAssign270_tree = (object)adaptor.Create(ArrayAssign270, retval);
			adaptor.AddChild(root_0, ArrayAssign270_tree);
			}
			DebugLocation(415, 31);
			PushFollow(Follow._expression_in_keyValuePair2829);
			expression271=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression271.Tree, expression271, retval);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyValuePair", 52);
			LeaveRule("keyValuePair", 52);
			LeaveRule_keyValuePair();
			if (state.backtracking > 0) { Memoize(input, 52, keyValuePair_StartIndex); }

		}
		DebugLocation(416, 4);
		} finally { DebugExitRule(GrammarFileName, "keyValuePair"); }
		return retval;

	}
	// $ANTLR end "keyValuePair"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:418:1: atom : ( SingleQuotedString | DoubleQuotedString | HereDoc | Integer | Real | Boolean | arrayDeclaration );
	[GrammarRule("atom")]
	private Antlr3AstNode atom()
	{
		EnterRule_atom();
		EnterRule("atom", 53);
		var retval = new Antlr3AstNode("atom");
		
		retval.Start = (IToken)input.LT(1);
		int atom_StartIndex = input.Index;

		object root_0 = default(object);

		IToken SingleQuotedString272 = default(IToken);
		IToken DoubleQuotedString273 = default(IToken);
		IToken HereDoc274 = default(IToken);
		IToken Integer275 = default(IToken);
		IToken Real276 = default(IToken);
		IToken Boolean277 = default(IToken);
		Antlr3AstNode arrayDeclaration278 = default(Antlr3AstNode);

		object SingleQuotedString272_tree = default(object);
		object DoubleQuotedString273_tree = default(object);
		object HereDoc274_tree = default(object);
		object Integer275_tree = default(object);
		object Real276_tree = default(object);
		object Boolean277_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(418, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:418:5: ( SingleQuotedString | DoubleQuotedString | HereDoc | Integer | Real | Boolean | arrayDeclaration )
			int alt72=7;
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case SingleQuotedString:
				{
				alt72 = 1;
				}
				break;
			case DoubleQuotedString:
				{
				alt72 = 2;
				}
				break;
			case HereDoc:
				{
				alt72 = 3;
				}
				break;
			case Integer:
				{
				alt72 = 4;
				}
				break;
			case Real:
				{
				alt72 = 5;
				}
				break;
			case Boolean:
				{
				alt72 = 6;
				}
				break;
			case Array:
				{
				alt72 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:418:7: SingleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 7);
				SingleQuotedString272=(IToken)Match(input,SingleQuotedString,Follow._SingleQuotedString_in_atom2842); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SingleQuotedString272_tree = (object)adaptor.Create(SingleQuotedString272, retval);
				adaptor.AddChild(root_0, SingleQuotedString272_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:418:28: DoubleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 28);
				DoubleQuotedString273=(IToken)Match(input,DoubleQuotedString,Follow._DoubleQuotedString_in_atom2846); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DoubleQuotedString273_tree = (object)adaptor.Create(DoubleQuotedString273, retval);
				adaptor.AddChild(root_0, DoubleQuotedString273_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:418:49: HereDoc
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 49);
				HereDoc274=(IToken)Match(input,HereDoc,Follow._HereDoc_in_atom2850); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HereDoc274_tree = (object)adaptor.Create(HereDoc274, retval);
				adaptor.AddChild(root_0, HereDoc274_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:418:59: Integer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 59);
				Integer275=(IToken)Match(input,Integer,Follow._Integer_in_atom2854); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Integer275_tree = (object)adaptor.Create(Integer275, retval);
				adaptor.AddChild(root_0, Integer275_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:418:69: Real
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 69);
				Real276=(IToken)Match(input,Real,Follow._Real_in_atom2858); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Real276_tree = (object)adaptor.Create(Real276, retval);
				adaptor.AddChild(root_0, Real276_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:418:76: Boolean
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 76);
				Boolean277=(IToken)Match(input,Boolean,Follow._Boolean_in_atom2862); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Boolean277_tree = (object)adaptor.Create(Boolean277, retval);
				adaptor.AddChild(root_0, Boolean277_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:418:86: arrayDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 86);
				PushFollow(Follow._arrayDeclaration_in_atom2866);
				arrayDeclaration278=arrayDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaration278.Tree, arrayDeclaration278, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 53);
			LeaveRule("atom", 53);
			LeaveRule_atom();
			if (state.backtracking > 0) { Memoize(input, 53, atom_StartIndex); }

		}
		DebugLocation(419, 4);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_reference();
	partial void LeaveRule_reference();
	// $ANTLR start "reference"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:422:1: reference : ( Ampersand nameOrFunctionCall | nameOrFunctionCall );
	[GrammarRule("reference")]
	private Antlr3AstNode reference()
	{
		EnterRule_reference();
		EnterRule("reference", 54);
		var retval = new Antlr3AstNode("reference");
		
		retval.Start = (IToken)input.LT(1);
		int reference_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand279 = default(IToken);
		Antlr3AstNode nameOrFunctionCall280 = default(Antlr3AstNode);
		Antlr3AstNode nameOrFunctionCall281 = default(Antlr3AstNode);

		object Ampersand279_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "reference");
		DebugLocation(422, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:423:5: ( Ampersand nameOrFunctionCall | nameOrFunctionCall )
			int alt73=2;
			try { DebugEnterDecision(73, false);
			int LA73_1 = input.LA(1);

			if ((LA73_1==Ampersand))
			{
				alt73 = 1;
			}
			else if ((LA73_1==Dollar||LA73_1==UnquotedString))
			{
				alt73 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 73, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:423:7: Ampersand nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(423, 7);
				Ampersand279=(IToken)Match(input,Ampersand,Follow._Ampersand_in_reference2884); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand279_tree = (object)adaptor.Create(Ampersand279, retval);
				adaptor.AddChild(root_0, Ampersand279_tree);
				}
				DebugLocation(423, 17);
				PushFollow(Follow._nameOrFunctionCall_in_reference2886);
				nameOrFunctionCall280=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall280.Tree, nameOrFunctionCall280, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:424:7: nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(424, 7);
				PushFollow(Follow._nameOrFunctionCall_in_reference2894);
				nameOrFunctionCall281=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall281.Tree, nameOrFunctionCall281, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("reference", 54);
			LeaveRule("reference", 54);
			LeaveRule_reference();
			if (state.backtracking > 0) { Memoize(input, 54, reference_StartIndex); }

		}
		DebugLocation(425, 4);
		} finally { DebugExitRule(GrammarFileName, "reference"); }
		return retval;

	}
	// $ANTLR end "reference"

	partial void EnterRule_nameOrFunctionCall();
	partial void LeaveRule_nameOrFunctionCall();
	// $ANTLR start "nameOrFunctionCall"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:1: nameOrFunctionCall : ( name OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket | name );
	[GrammarRule("nameOrFunctionCall")]
	private Antlr3AstNode nameOrFunctionCall()
	{
		EnterRule_nameOrFunctionCall();
		EnterRule("nameOrFunctionCall", 55);
		var retval = new Antlr3AstNode("nameOrFunctionCall");
		
		retval.Start = (IToken)input.LT(1);
		int nameOrFunctionCall_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket283 = default(IToken);
		IToken Comma285 = default(IToken);
		IToken CloseRoundBracket287 = default(IToken);
		Antlr3AstNode name282 = default(Antlr3AstNode);
		Antlr3AstNode expression284 = default(Antlr3AstNode);
		Antlr3AstNode expression286 = default(Antlr3AstNode);
		Antlr3AstNode name288 = default(Antlr3AstNode);

		object OpenRoundBracket283_tree = default(object);
		object Comma285_tree = default(object);
		object CloseRoundBracket287_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "nameOrFunctionCall");
		DebugLocation(427, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:5: ( name OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket | name )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_1 = input.LA(1);

			if ((LA76_1==UnquotedString))
			{
				switch (input.LA(2))
				{
				case ClassMember:
					{
					int LA76_3 = input.LA(3);

					if ((EvaluatePredicate(synpred115_Php_fragment)))
					{
						alt76 = 1;
					}
					else if ((true))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenSquareBracket:
					{
					int LA76_3 = input.LA(3);

					if ((EvaluatePredicate(synpred115_Php_fragment)))
					{
						alt76 = 1;
					}
					else if ((true))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case InstanceMember:
					{
					int LA76_3 = input.LA(3);

					if ((EvaluatePredicate(synpred115_Php_fragment)))
					{
						alt76 = 1;
					}
					else if ((true))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenRoundBracket:
					{
					alt76 = 1;
					}
					break;
				case EOF:
				case Ampersand:
				case And:
				case ArrayAssign:
				case Asterisk:
				case BodyString:
				case CloseRoundBracket:
				case CloseSquareBracket:
				case Colon:
				case Comma:
				case ComparisionOperator:
				case Dot:
				case EqualityOperator:
				case Forwardslash:
				case Instanceof:
				case LogicalAnd:
				case LogicalOr:
				case Minus:
				case Or:
				case Percent:
				case Pipe:
				case Plus:
				case QuestionMark:
				case SemiColon:
				case ShiftOperator:
				case Xor:
					{
					alt76 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA76_1==Dollar))
			{
				int LA76_2 = input.LA(2);

				if ((LA76_2==Dollar))
				{
					int LA76_3 = input.LA(3);

					if ((EvaluatePredicate(synpred115_Php_fragment)))
					{
						alt76 = 1;
					}
					else if ((true))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 29, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA76_2==UnquotedString))
				{
					int LA76_3 = input.LA(3);

					if ((EvaluatePredicate(synpred115_Php_fragment)))
					{
						alt76 = 1;
					}
					else if ((true))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 30, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 76, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:7: name OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(428, 7);
				PushFollow(Follow._name_in_nameOrFunctionCall2911);
				name282=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name282.Tree, name282, retval);
				DebugLocation(428, 12);
				OpenRoundBracket283=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_nameOrFunctionCall2913); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket283_tree = (object)adaptor.Create(OpenRoundBracket283, retval);
				adaptor.AddChild(root_0, OpenRoundBracket283_tree);
				}
				DebugLocation(428, 29);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:29: ( expression ( Comma expression )* )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==Ampersand||LA75_1==Array||LA75_1==Bang||LA75_1==Boolean||LA75_1==Clone||LA75_1==Dollar||LA75_1==DoubleQuotedString||LA75_1==HereDoc||LA75_1==IncrementOperator||LA75_1==Integer||LA75_1==List||LA75_1==Minus||LA75_1==New||LA75_1==OpenRoundBracket||LA75_1==Real||LA75_1==SingleQuotedString||LA75_1==SuppressWarnings||LA75_1==Tilde||LA75_1==UnquotedString))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:30: expression ( Comma expression )*
					{
					DebugLocation(428, 30);
					PushFollow(Follow._expression_in_nameOrFunctionCall2916);
					expression284=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression284.Tree, expression284, retval);
					DebugLocation(428, 41);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:41: ( Comma expression )*
					try { DebugEnterSubRule(74);
					while (true)
					{
						int alt74=2;
						try { DebugEnterDecision(74, false);
						int LA74_1 = input.LA(1);

						if ((LA74_1==Comma))
						{
							alt74 = 1;
						}


						} finally { DebugExitDecision(74); }
						switch ( alt74 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:42: Comma expression
							{
							DebugLocation(428, 42);
							Comma285=(IToken)Match(input,Comma,Follow._Comma_in_nameOrFunctionCall2919); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Comma285_tree = (object)adaptor.Create(Comma285, retval);
							adaptor.AddChild(root_0, Comma285_tree);
							}
							DebugLocation(428, 48);
							PushFollow(Follow._expression_in_nameOrFunctionCall2921);
							expression286=expression();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, expression286.Tree, expression286, retval);

							}
							break;

						default:
							goto loop74;
						}
					}

					loop74:
						;

					} finally { DebugExitSubRule(74); }


					}
					break;

				}
				} finally { DebugExitSubRule(75); }

				DebugLocation(428, 63);
				CloseRoundBracket287=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_nameOrFunctionCall2927); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket287_tree = (object)adaptor.Create(CloseRoundBracket287, retval);
				adaptor.AddChild(root_0, CloseRoundBracket287_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:429:7: name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(429, 7);
				PushFollow(Follow._name_in_nameOrFunctionCall2935);
				name288=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name288.Tree, name288, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nameOrFunctionCall", 55);
			LeaveRule("nameOrFunctionCall", 55);
			LeaveRule_nameOrFunctionCall();
			if (state.backtracking > 0) { Memoize(input, 55, nameOrFunctionCall_StartIndex); }

		}
		DebugLocation(430, 4);
		} finally { DebugExitRule(GrammarFileName, "nameOrFunctionCall"); }
		return retval;

	}
	// $ANTLR end "nameOrFunctionCall"

	partial void EnterRule_name();
	partial void LeaveRule_name();
	// $ANTLR start "name"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:432:1: name : ( staticMemberAccess | memberAccess | variable );
	[GrammarRule("name")]
	private Antlr3AstNode name()
	{
		EnterRule_name();
		EnterRule("name", 56);
		var retval = new Antlr3AstNode("name");
		
		retval.Start = (IToken)input.LT(1);
		int name_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode staticMemberAccess289 = default(Antlr3AstNode);
		Antlr3AstNode memberAccess290 = default(Antlr3AstNode);
		Antlr3AstNode variable291 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(432, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:432:5: ( staticMemberAccess | memberAccess | variable )
			int alt77=3;
			try { DebugEnterDecision(77, false);
			int LA77_1 = input.LA(1);

			if ((LA77_1==UnquotedString))
			{
				int LA77_2 = input.LA(2);

				if ((LA77_2==ClassMember))
				{
					alt77 = 1;
				}
				else if ((EvaluatePredicate(synpred117_Php_fragment)))
				{
					alt77 = 2;
				}
				else if ((true))
				{
					alt77 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 77, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA77_1==Dollar))
			{
				int LA77_2 = input.LA(2);

				if ((LA77_2==Dollar))
				{
					int LA77_3 = input.LA(3);

					if ((EvaluatePredicate(synpred117_Php_fragment)))
					{
						alt77 = 2;
					}
					else if ((true))
					{
						alt77 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 77, 33, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA77_2==UnquotedString))
				{
					int LA77_3 = input.LA(3);

					if ((EvaluatePredicate(synpred117_Php_fragment)))
					{
						alt77 = 2;
					}
					else if ((true))
					{
						alt77 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 77, 34, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 77, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:432:7: staticMemberAccess
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(432, 7);
				PushFollow(Follow._staticMemberAccess_in_name2947);
				staticMemberAccess289=staticMemberAccess();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, staticMemberAccess289.Tree, staticMemberAccess289, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:7: memberAccess
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(433, 7);
				PushFollow(Follow._memberAccess_in_name2955);
				memberAccess290=memberAccess();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess290.Tree, memberAccess290, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:7: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(434, 7);
				PushFollow(Follow._variable_in_name2963);
				variable291=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable291.Tree, variable291, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("name", 56);
			LeaveRule("name", 56);
			LeaveRule_name();
			if (state.backtracking > 0) { Memoize(input, 56, name_StartIndex); }

		}
		DebugLocation(435, 4);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return retval;

	}
	// $ANTLR end "name"

	partial void EnterRule_staticMemberAccess();
	partial void LeaveRule_staticMemberAccess();
	// $ANTLR start "staticMemberAccess"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:437:1: staticMemberAccess : UnquotedString '::' variable ;
	[GrammarRule("staticMemberAccess")]
	private Antlr3AstNode staticMemberAccess()
	{
		EnterRule_staticMemberAccess();
		EnterRule("staticMemberAccess", 57);
		var retval = new Antlr3AstNode("staticMemberAccess");
		
		retval.Start = (IToken)input.LT(1);
		int staticMemberAccess_StartIndex = input.Index;

		object root_0 = default(object);

		IToken UnquotedString292 = default(IToken);
		IToken string_literal293 = default(IToken);
		Antlr3AstNode variable294 = default(Antlr3AstNode);

		object UnquotedString292_tree = default(object);
		object string_literal293_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "staticMemberAccess");
		DebugLocation(437, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:438:5: ( UnquotedString '::' variable )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:438:7: UnquotedString '::' variable
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(438, 7);
			UnquotedString292=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_staticMemberAccess2984); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UnquotedString292_tree = (object)adaptor.Create(UnquotedString292, retval);
			adaptor.AddChild(root_0, UnquotedString292_tree);
			}
			DebugLocation(438, 22);
			string_literal293=(IToken)Match(input,ClassMember,Follow._ClassMember_in_staticMemberAccess2986); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal293_tree = (object)adaptor.Create(string_literal293, retval);
			adaptor.AddChild(root_0, string_literal293_tree);
			}
			DebugLocation(438, 27);
			PushFollow(Follow._variable_in_staticMemberAccess2988);
			variable294=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable294.Tree, variable294, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("staticMemberAccess", 57);
			LeaveRule("staticMemberAccess", 57);
			LeaveRule_staticMemberAccess();
			if (state.backtracking > 0) { Memoize(input, 57, staticMemberAccess_StartIndex); }

		}
		DebugLocation(439, 4);
		} finally { DebugExitRule(GrammarFileName, "staticMemberAccess"); }
		return retval;

	}
	// $ANTLR end "staticMemberAccess"

	partial void EnterRule_memberAccess();
	partial void LeaveRule_memberAccess();
	// $ANTLR start "memberAccess"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:441:1: memberAccess : variable ( OpenSquareBracket expression CloseSquareBracket !| '->' UnquotedString )* ;
	[GrammarRule("memberAccess")]
	private Antlr3AstNode memberAccess()
	{
		EnterRule_memberAccess();
		EnterRule("memberAccess", 58);
		var retval = new Antlr3AstNode("memberAccess");
		
		retval.Start = (IToken)input.LT(1);
		int memberAccess_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenSquareBracket296 = default(IToken);
		IToken CloseSquareBracket298 = default(IToken);
		IToken string_literal299 = default(IToken);
		IToken UnquotedString300 = default(IToken);
		Antlr3AstNode variable295 = default(Antlr3AstNode);
		Antlr3AstNode expression297 = default(Antlr3AstNode);

		object OpenSquareBracket296_tree = default(object);
		object CloseSquareBracket298_tree = default(object);
		object string_literal299_tree = default(object);
		object UnquotedString300_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "memberAccess");
		DebugLocation(441, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:442:5: ( variable ( OpenSquareBracket expression CloseSquareBracket !| '->' UnquotedString )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:442:7: variable ( OpenSquareBracket expression CloseSquareBracket !| '->' UnquotedString )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(442, 7);
			PushFollow(Follow._variable_in_memberAccess3005);
			variable295=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable295.Tree, variable295, retval);
			DebugLocation(443, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:443:9: ( OpenSquareBracket expression CloseSquareBracket !| '->' UnquotedString )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=3;
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==OpenSquareBracket))
				{
					alt78 = 1;
				}
				else if ((LA78_1==InstanceMember))
				{
					alt78 = 2;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:443:11: OpenSquareBracket expression CloseSquareBracket !
					{
					DebugLocation(443, 11);
					OpenSquareBracket296=(IToken)Match(input,OpenSquareBracket,Follow._OpenSquareBracket_in_memberAccess3018); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OpenSquareBracket296_tree = (object)adaptor.Create(OpenSquareBracket296, retval);
					adaptor.AddChild(root_0, OpenSquareBracket296_tree);
					}
					DebugLocation(443, 29);
					PushFollow(Follow._expression_in_memberAccess3020);
					expression297=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression297.Tree, expression297, retval);
					DebugLocation(443, 58);
					CloseSquareBracket298=(IToken)Match(input,CloseSquareBracket,Follow._CloseSquareBracket_in_memberAccess3022); if (state.failed) return retval;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:11: '->' UnquotedString
					{
					DebugLocation(444, 11);
					string_literal299=(IToken)Match(input,InstanceMember,Follow._InstanceMember_in_memberAccess3035); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal299_tree = (object)adaptor.Create(string_literal299, retval);
					adaptor.AddChild(root_0, string_literal299_tree);
					}
					DebugLocation(444, 16);
					UnquotedString300=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_memberAccess3037); if (state.failed) return retval;
					if (state.backtracking == 0) {
					UnquotedString300_tree = (object)adaptor.Create(UnquotedString300, retval);
					adaptor.AddChild(root_0, UnquotedString300_tree);
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberAccess", 58);
			LeaveRule("memberAccess", 58);
			LeaveRule_memberAccess();
			if (state.backtracking > 0) { Memoize(input, 58, memberAccess_StartIndex); }

		}
		DebugLocation(445, 4);
		} finally { DebugExitRule(GrammarFileName, "memberAccess"); }
		return retval;

	}
	// $ANTLR end "memberAccess"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();
	// $ANTLR start "variable"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:1: variable : ( Dollar variable | UnquotedString );
	[GrammarRule("variable")]
	private Antlr3AstNode variable()
	{
		EnterRule_variable();
		EnterRule("variable", 59);
		var retval = new Antlr3AstNode("variable");
		
		retval.Start = (IToken)input.LT(1);
		int variable_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Dollar301 = default(IToken);
		IToken UnquotedString303 = default(IToken);
		Antlr3AstNode variable302 = default(Antlr3AstNode);

		object Dollar301_tree = default(object);
		object UnquotedString303_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(447, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:448:5: ( Dollar variable | UnquotedString )
			int alt79=2;
			try { DebugEnterDecision(79, false);
			int LA79_1 = input.LA(1);

			if ((LA79_1==Dollar))
			{
				alt79 = 1;
			}
			else if ((LA79_1==UnquotedString))
			{
				alt79 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 79, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:448:7: Dollar variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(448, 7);
				Dollar301=(IToken)Match(input,Dollar,Follow._Dollar_in_variable3060); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Dollar301_tree = (object)adaptor.Create(Dollar301, retval);
				adaptor.AddChild(root_0, Dollar301_tree);
				}
				DebugLocation(448, 14);
				PushFollow(Follow._variable_in_variable3062);
				variable302=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable302.Tree, variable302, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:449:7: UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(449, 7);
				UnquotedString303=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_variable3070); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString303_tree = (object)adaptor.Create(UnquotedString303, retval);
				adaptor.AddChild(root_0, UnquotedString303_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 59);
			LeaveRule("variable", 59);
			LeaveRule_variable();
			if (state.backtracking > 0) { Memoize(input, 59, variable_StartIndex); }

		}
		DebugLocation(450, 4);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_synpred1_Php_fragment();
	partial void LeaveRule_synpred1_Php_fragment();

	// $ANTLR start synpred1_Php
	private void synpred1_Php_fragment()
	{
		EnterRule_synpred1_Php_fragment();
		EnterRule("synpred1_Php_fragment", 60);
		var retval = new Antlr3AstNode("synpred1_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:162:8: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:162:8: statement
			{
			DebugLocation(162, 8);
			PushFollow(Follow._statement_in_synpred1_Php913);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_Php_fragment", 60);
			LeaveRule("synpred1_Php_fragment", 60);
			LeaveRule_synpred1_Php_fragment();
		}
	}
	// $ANTLR end synpred1_Php

	partial void EnterRule_synpred2_Php_fragment();
	partial void LeaveRule_synpred2_Php_fragment();

	// $ANTLR start synpred2_Php
	private void synpred2_Php_fragment()
	{
		EnterRule_synpred2_Php_fragment();
		EnterRule("synpred2_Php_fragment", 61);
		var retval = new Antlr3AstNode("synpred2_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:165:7: ({...}? => printExpr ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:165:7: {...}? => printExpr ';'
			{
			DebugLocation(165, 7);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred2_Php", "expressionFollowsBodyString");
			}
			DebugLocation(165, 77);
			PushFollow(Follow._printExpr_in_synpred2_Php931);
			printExpr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(165, 87);
			Match(input,SemiColon,Follow._SemiColon_in_synpred2_Php933); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Php_fragment", 61);
			LeaveRule("synpred2_Php_fragment", 61);
			LeaveRule_synpred2_Php_fragment();
		}
	}
	// $ANTLR end synpred2_Php

	partial void EnterRule_synpred4_Php_fragment();
	partial void LeaveRule_synpred4_Php_fragment();

	// $ANTLR start synpred4_Php
	private void synpred4_Php_fragment()
	{
		EnterRule_synpred4_Php_fragment();
		EnterRule("synpred4_Php_fragment", 63);
		var retval = new Antlr3AstNode("synpred4_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:8: ({...}? => ( printExpr )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:8: {...}? => ( printExpr )?
			{
			DebugLocation(166, 8);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred4_Php", "expressionFollowsBodyString");
			}
			DebugLocation(166, 79);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:79: ( printExpr )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_1 = input.LA(1);

			if ((LA80_1==Ampersand||LA80_1==Array||LA80_1==Bang||LA80_1==Boolean||LA80_1==Clone||LA80_1==Dollar||LA80_1==DoubleQuotedString||LA80_1==HereDoc||LA80_1==IncrementOperator||LA80_1==Integer||LA80_1==List||LA80_1==Minus||LA80_1==New||LA80_1==OpenRoundBracket||LA80_1==Real||LA80_1==SingleQuotedString||LA80_1==SuppressWarnings||LA80_1==Tilde||LA80_1==UnquotedString))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:79: printExpr
				{
				DebugLocation(166, 79);
				PushFollow(Follow._printExpr_in_synpred4_Php949);
				printExpr();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(80); }


			}

		}
		finally
		{
			TraceOut("synpred4_Php_fragment", 63);
			LeaveRule("synpred4_Php_fragment", 63);
			LeaveRule_synpred4_Php_fragment();
		}
	}
	// $ANTLR end synpred4_Php

	partial void EnterRule_synpred6_Php_fragment();
	partial void LeaveRule_synpred6_Php_fragment();

	// $ANTLR start synpred6_Php
	private void synpred6_Php_fragment()
	{
		EnterRule_synpred6_Php_fragment();
		EnterRule("synpred6_Php_fragment", 65);
		var retval = new Antlr3AstNode("synpred6_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:7: ( ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:7: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
			{
			DebugLocation(166, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:7: ({...}? => ( printExpr )? | ( simpleStatement )? )
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			try
			{
				alt83 = dfa83.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:8: {...}? => ( printExpr )?
				{
				DebugLocation(166, 8);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return;}
					throw new FailedPredicateException(input, "synpred6_Php", "expressionFollowsBodyString");
				}
				DebugLocation(166, 79);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:79: ( printExpr )?
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, false);
				int LA81_1 = input.LA(1);

				if ((LA81_1==Ampersand||LA81_1==Array||LA81_1==Bang||LA81_1==Boolean||LA81_1==Clone||LA81_1==Dollar||LA81_1==DoubleQuotedString||LA81_1==HereDoc||LA81_1==IncrementOperator||LA81_1==Integer||LA81_1==List||LA81_1==Minus||LA81_1==New||LA81_1==OpenRoundBracket||LA81_1==Real||LA81_1==SingleQuotedString||LA81_1==SuppressWarnings||LA81_1==Tilde||LA81_1==UnquotedString))
				{
					alt81 = 1;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:79: printExpr
					{
					DebugLocation(166, 79);
					PushFollow(Follow._printExpr_in_synpred6_Php949);
					printExpr();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(81); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:92: ( simpleStatement )?
				{
				DebugLocation(166, 92);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:92: ( simpleStatement )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				int LA82_1 = input.LA(1);

				if ((LA82_1==Ampersand||LA82_1==Array||LA82_1==Bang||(LA82_1>=Boolean && LA82_1<=Break)||LA82_1==Clone||LA82_1==Continue||LA82_1==Dollar||(LA82_1>=DoubleQuotedString && LA82_1<=Echo)||(LA82_1>=Global && LA82_1<=HereDoc)||LA82_1==IncrementOperator||LA82_1==Integer||LA82_1==List||LA82_1==Minus||LA82_1==New||LA82_1==OpenRoundBracket||LA82_1==Real||(LA82_1>=RequireOperator && LA82_1<=Return)||LA82_1==SingleQuotedString||(LA82_1>=Static && LA82_1<=SuppressWarnings)||LA82_1==Tilde||LA82_1==UnquotedString))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:166:92: simpleStatement
					{
					DebugLocation(166, 92);
					PushFollow(Follow._simpleStatement_in_synpred6_Php954);
					simpleStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(82); }


				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(166, 110);
			Match(input,BodyString,Follow._BodyString_in_synpred6_Php958); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_Php_fragment", 65);
			LeaveRule("synpred6_Php_fragment", 65);
			LeaveRule_synpred6_Php_fragment();
		}
	}
	// $ANTLR end synpred6_Php

	partial void EnterRule_synpred7_Php_fragment();
	partial void LeaveRule_synpred7_Php_fragment();

	// $ANTLR start synpred7_Php
	private void synpred7_Php_fragment()
	{
		EnterRule_synpred7_Php_fragment();
		EnterRule("synpred7_Php_fragment", 66);
		var retval = new Antlr3AstNode("synpred7_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:167:7: ( '{' statement '}' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:167:7: '{' statement '}'
			{
			DebugLocation(167, 7);
			Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_synpred7_Php968); if (state.failed) return;
			DebugLocation(167, 11);
			PushFollow(Follow._statement_in_synpred7_Php970);
			statement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(167, 21);
			Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_synpred7_Php972); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred7_Php_fragment", 66);
			LeaveRule("synpred7_Php_fragment", 66);
			LeaveRule_synpred7_Php_fragment();
		}
	}
	// $ANTLR end synpred7_Php

	partial void EnterRule_synpred8_Php_fragment();
	partial void LeaveRule_synpred8_Php_fragment();

	// $ANTLR start synpred8_Php
	private void synpred8_Php_fragment()
	{
		EnterRule_synpred8_Php_fragment();
		EnterRule("synpred8_Php_fragment", 67);
		var retval = new Antlr3AstNode("synpred8_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:7: ( bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:7: bracketedBlock
			{
			DebugLocation(168, 7);
			PushFollow(Follow._bracketedBlock_in_synpred8_Php980);
			bracketedBlock();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_Php_fragment", 67);
			LeaveRule("synpred8_Php_fragment", 67);
			LeaveRule_synpred8_Php_fragment();
		}
	}
	// $ANTLR end synpred8_Php

	partial void EnterRule_synpred13_Php_fragment();
	partial void LeaveRule_synpred13_Php_fragment();

	// $ANTLR start synpred13_Php
	private void synpred13_Php_fragment()
	{
		Antlr3AstNode stmts = default(Antlr3AstNode);

		EnterRule_synpred13_Php_fragment();
		EnterRule("synpred13_Php_fragment", 72);
		var retval = new Antlr3AstNode("synpred13_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:181:16: (stmts= statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:181:16: stmts= statement
			{
			DebugLocation(181, 16);
			PushFollow(Follow._statement_in_synpred13_Php1065);
			stmts=statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_Php_fragment", 72);
			LeaveRule("synpred13_Php_fragment", 72);
			LeaveRule_synpred13_Php_fragment();
		}
	}
	// $ANTLR end synpred13_Php

	partial void EnterRule_synpred27_Php_fragment();
	partial void LeaveRule_synpred27_Php_fragment();

	// $ANTLR start synpred27_Php
	private void synpred27_Php_fragment()
	{
		EnterRule_synpred27_Php_fragment();
		EnterRule("synpred27_Php_fragment", 86);
		var retval = new Antlr3AstNode("synpred27_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:7: ( ( fieldModifier )* Function UnquotedString parametersDefinition ( bracketedBlock | ';' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:7: ( fieldModifier )* Function UnquotedString parametersDefinition ( bracketedBlock | ';' )
			{
			DebugLocation(214, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:7: ( fieldModifier )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_1 = input.LA(1);

				if (((LA85_1>=Abstract && LA85_1<=AccessModifier)||LA85_1==Static))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:7: fieldModifier
					{
					DebugLocation(214, 7);
					PushFollow(Follow._fieldModifier_in_synpred27_Php1343);
					fieldModifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }

			DebugLocation(214, 22);
			Match(input,Function,Follow._Function_in_synpred27_Php1346); if (state.failed) return;
			DebugLocation(214, 31);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred27_Php1348); if (state.failed) return;
			DebugLocation(214, 46);
			PushFollow(Follow._parametersDefinition_in_synpred27_Php1350);
			parametersDefinition();
			PopFollow();
			if (state.failed) return;
			DebugLocation(215, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:215:9: ( bracketedBlock | ';' )
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_1 = input.LA(1);

			if ((LA86_1==OpenCurlyBracket))
			{
				alt86 = 1;
			}
			else if ((LA86_1==SemiColon))
			{
				alt86 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 86, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:215:10: bracketedBlock
				{
				DebugLocation(215, 10);
				PushFollow(Follow._bracketedBlock_in_synpred27_Php1362);
				bracketedBlock();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:215:27: ';'
				{
				DebugLocation(215, 27);
				Match(input,SemiColon,Follow._SemiColon_in_synpred27_Php1366); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(86); }


			}

		}
		finally
		{
			TraceOut("synpred27_Php_fragment", 86);
			LeaveRule("synpred27_Php_fragment", 86);
			LeaveRule_synpred27_Php_fragment();
		}
	}
	// $ANTLR end synpred27_Php

	partial void EnterRule_synpred37_Php_fragment();
	partial void LeaveRule_synpred37_Php_fragment();

	// $ANTLR start synpred37_Php
	private void synpred37_Php_fragment()
	{
		EnterRule_synpred37_Php_fragment();
		EnterRule("synpred37_Php_fragment", 96);
		var retval = new Antlr3AstNode("synpred37_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:234:58: ( conditional )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:234:58: conditional
			{
			DebugLocation(234, 58);
			PushFollow(Follow._conditional_in_synpred37_Php1540);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_Php_fragment", 96);
			LeaveRule("synpred37_Php_fragment", 96);
			LeaveRule_synpred37_Php_fragment();
		}
	}
	// $ANTLR end synpred37_Php

	partial void EnterRule_synpred57_Php_fragment();
	partial void LeaveRule_synpred57_Php_fragment();

	// $ANTLR start synpred57_Php
	private void synpred57_Php_fragment()
	{
		EnterRule_synpred57_Php_fragment();
		EnterRule("synpred57_Php_fragment", 116);
		var retval = new Antlr3AstNode("synpred57_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:257:62: ( conditional )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:257:62: conditional
			{
			DebugLocation(257, 62);
			PushFollow(Follow._conditional_in_synpred57_Php1793);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred57_Php_fragment", 116);
			LeaveRule("synpred57_Php_fragment", 116);
			LeaveRule_synpred57_Php_fragment();
		}
	}
	// $ANTLR end synpred57_Php

	partial void EnterRule_synpred63_Php_fragment();
	partial void LeaveRule_synpred63_Php_fragment();

	// $ANTLR start synpred63_Php
	private void synpred63_Php_fragment()
	{
		EnterRule_synpred63_Php_fragment();
		EnterRule("synpred63_Php_fragment", 122);
		var retval = new Antlr3AstNode("synpred63_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:278:28: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:278:28: statement
			{
			DebugLocation(278, 28);
			PushFollow(Follow._statement_in_synpred63_Php1912);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred63_Php_fragment", 122);
			LeaveRule("synpred63_Php_fragment", 122);
			LeaveRule_synpred63_Php_fragment();
		}
	}
	// $ANTLR end synpred63_Php

	partial void EnterRule_synpred64_Php_fragment();
	partial void LeaveRule_synpred64_Php_fragment();

	// $ANTLR start synpred64_Php
	private void synpred64_Php_fragment()
	{
		EnterRule_synpred64_Php_fragment();
		EnterRule("synpred64_Php_fragment", 123);
		var retval = new Antlr3AstNode("synpred64_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:282:21: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:282:21: statement
			{
			DebugLocation(282, 21);
			PushFollow(Follow._statement_in_synpred64_Php1937);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred64_Php_fragment", 123);
			LeaveRule("synpred64_Php_fragment", 123);
			LeaveRule_synpred64_Php_fragment();
		}
	}
	// $ANTLR end synpred64_Php

	partial void EnterRule_synpred70_Php_fragment();
	partial void LeaveRule_synpred70_Php_fragment();

	// $ANTLR start synpred70_Php
	private void synpred70_Php_fragment()
	{
		EnterRule_synpred70_Php_fragment();
		EnterRule("synpred70_Php_fragment", 129);
		var retval = new Antlr3AstNode("synpred70_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:311:23: ( Or weakLogicalXor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:311:23: Or weakLogicalXor
			{
			DebugLocation(311, 23);
			Match(input,Or,Follow._Or_in_synpred70_Php2115); if (state.failed) return;
			DebugLocation(311, 26);
			PushFollow(Follow._weakLogicalXor_in_synpred70_Php2117);
			weakLogicalXor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred70_Php_fragment", 129);
			LeaveRule("synpred70_Php_fragment", 129);
			LeaveRule_synpred70_Php_fragment();
		}
	}
	// $ANTLR end synpred70_Php

	partial void EnterRule_synpred71_Php_fragment();
	partial void LeaveRule_synpred71_Php_fragment();

	// $ANTLR start synpred71_Php
	private void synpred71_Php_fragment()
	{
		EnterRule_synpred71_Php_fragment();
		EnterRule("synpred71_Php_fragment", 130);
		var retval = new Antlr3AstNode("synpred71_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:315:23: ( Xor weakLogicalAnd )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:315:23: Xor weakLogicalAnd
			{
			DebugLocation(315, 23);
			Match(input,Xor,Follow._Xor_in_synpred71_Php2139); if (state.failed) return;
			DebugLocation(315, 27);
			PushFollow(Follow._weakLogicalAnd_in_synpred71_Php2141);
			weakLogicalAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred71_Php_fragment", 130);
			LeaveRule("synpred71_Php_fragment", 130);
			LeaveRule_synpred71_Php_fragment();
		}
	}
	// $ANTLR end synpred71_Php

	partial void EnterRule_synpred72_Php_fragment();
	partial void LeaveRule_synpred72_Php_fragment();

	// $ANTLR start synpred72_Php
	private void synpred72_Php_fragment()
	{
		EnterRule_synpred72_Php_fragment();
		EnterRule("synpred72_Php_fragment", 131);
		var retval = new Antlr3AstNode("synpred72_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:319:19: ( And assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:319:19: And assignment
			{
			DebugLocation(319, 19);
			Match(input,And,Follow._And_in_synpred72_Php2167); if (state.failed) return;
			DebugLocation(319, 23);
			PushFollow(Follow._assignment_in_synpred72_Php2169);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred72_Php_fragment", 131);
			LeaveRule("synpred72_Php_fragment", 131);
			LeaveRule_synpred72_Php_fragment();
		}
	}
	// $ANTLR end synpred72_Php

	partial void EnterRule_synpred74_Php_fragment();
	partial void LeaveRule_synpred74_Php_fragment();

	// $ANTLR start synpred74_Php
	private void synpred74_Php_fragment()
	{
		EnterRule_synpred74_Php_fragment();
		EnterRule("synpred74_Php_fragment", 133);
		var retval = new Antlr3AstNode("synpred74_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:323:7: ( listVariables ( ( Equals | AsignmentOperator ) assignment ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:323:7: listVariables ( ( Equals | AsignmentOperator ) assignment )
			{
			DebugLocation(323, 7);
			PushFollow(Follow._listVariables_in_synpred74_Php2188);
			listVariables();
			PopFollow();
			if (state.failed) return;
			DebugLocation(323, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:323:21: ( ( Equals | AsignmentOperator ) assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:323:22: ( Equals | AsignmentOperator ) assignment
			{
			DebugLocation(323, 22);
			if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(323, 51);
			PushFollow(Follow._assignment_in_synpred74_Php2199);
			assignment();
			PopFollow();
			if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred74_Php_fragment", 133);
			LeaveRule("synpred74_Php_fragment", 133);
			LeaveRule_synpred74_Php_fragment();
		}
	}
	// $ANTLR end synpred74_Php

	partial void EnterRule_synpred77_Php_fragment();
	partial void LeaveRule_synpred77_Php_fragment();

	// $ANTLR start synpred77_Php
	private void synpred77_Php_fragment()
	{
		EnterRule_synpred77_Php_fragment();
		EnterRule("synpred77_Php_fragment", 136);
		var retval = new Antlr3AstNode("synpred77_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:333:7: ( logicalOr QuestionMark expression Colon expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:333:7: logicalOr QuestionMark expression Colon expression
			{
			DebugLocation(333, 7);
			PushFollow(Follow._logicalOr_in_synpred77_Php2268);
			logicalOr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(333, 17);
			Match(input,QuestionMark,Follow._QuestionMark_in_synpred77_Php2270); if (state.failed) return;
			DebugLocation(333, 30);
			PushFollow(Follow._expression_in_synpred77_Php2272);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(333, 41);
			Match(input,Colon,Follow._Colon_in_synpred77_Php2274); if (state.failed) return;
			DebugLocation(333, 47);
			PushFollow(Follow._expression_in_synpred77_Php2276);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred77_Php_fragment", 136);
			LeaveRule("synpred77_Php_fragment", 136);
			LeaveRule_synpred77_Php_fragment();
		}
	}
	// $ANTLR end synpred77_Php

	partial void EnterRule_synpred99_Php_fragment();
	partial void LeaveRule_synpred99_Php_fragment();

	// $ANTLR start synpred99_Php
	private void synpred99_Php_fragment()
	{
		EnterRule_synpred99_Php_fragment();
		EnterRule("synpred99_Php_fragment", 158);
		var retval = new Antlr3AstNode("synpred99_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:391:7: ( name IncrementOperator )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:391:7: name IncrementOperator
			{
			DebugLocation(391, 7);
			PushFollow(Follow._name_in_synpred99_Php2679);
			name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(391, 12);
			Match(input,IncrementOperator,Follow._IncrementOperator_in_synpred99_Php2681); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Php_fragment", 158);
			LeaveRule("synpred99_Php_fragment", 158);
			LeaveRule_synpred99_Php_fragment();
		}
	}
	// $ANTLR end synpred99_Php

	partial void EnterRule_synpred105_Php_fragment();
	partial void LeaveRule_synpred105_Php_fragment();

	// $ANTLR start synpred105_Php
	private void synpred105_Php_fragment()
	{
		EnterRule_synpred105_Php_fragment();
		EnterRule("synpred105_Php_fragment", 164);
		var retval = new Antlr3AstNode("synpred105_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:411:8: ( keyValuePair )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:411:8: keyValuePair
			{
			DebugLocation(411, 8);
			PushFollow(Follow._keyValuePair_in_synpred105_Php2802);
			keyValuePair();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred105_Php_fragment", 164);
			LeaveRule("synpred105_Php_fragment", 164);
			LeaveRule_synpred105_Php_fragment();
		}
	}
	// $ANTLR end synpred105_Php

	partial void EnterRule_synpred115_Php_fragment();
	partial void LeaveRule_synpred115_Php_fragment();

	// $ANTLR start synpred115_Php
	private void synpred115_Php_fragment()
	{
		EnterRule_synpred115_Php_fragment();
		EnterRule("synpred115_Php_fragment", 174);
		var retval = new Antlr3AstNode("synpred115_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:7: ( name OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:7: name OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket
			{
			DebugLocation(428, 7);
			PushFollow(Follow._name_in_synpred115_Php2911);
			name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(428, 12);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred115_Php2913); if (state.failed) return;
			DebugLocation(428, 29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:29: ( expression ( Comma expression )* )?
			int alt101=2;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, false);
			int LA101_1 = input.LA(1);

			if ((LA101_1==Ampersand||LA101_1==Array||LA101_1==Bang||LA101_1==Boolean||LA101_1==Clone||LA101_1==Dollar||LA101_1==DoubleQuotedString||LA101_1==HereDoc||LA101_1==IncrementOperator||LA101_1==Integer||LA101_1==List||LA101_1==Minus||LA101_1==New||LA101_1==OpenRoundBracket||LA101_1==Real||LA101_1==SingleQuotedString||LA101_1==SuppressWarnings||LA101_1==Tilde||LA101_1==UnquotedString))
			{
				alt101 = 1;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:30: expression ( Comma expression )*
				{
				DebugLocation(428, 30);
				PushFollow(Follow._expression_in_synpred115_Php2916);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(428, 41);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:41: ( Comma expression )*
				try { DebugEnterSubRule(100);
				while (true)
				{
					int alt100=2;
					try { DebugEnterDecision(100, false);
					int LA100_1 = input.LA(1);

					if ((LA100_1==Comma))
					{
						alt100 = 1;
					}


					} finally { DebugExitDecision(100); }
					switch ( alt100 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:42: Comma expression
						{
						DebugLocation(428, 42);
						Match(input,Comma,Follow._Comma_in_synpred115_Php2919); if (state.failed) return;
						DebugLocation(428, 48);
						PushFollow(Follow._expression_in_synpred115_Php2921);
						expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop100;
					}
				}

				loop100:
					;

				} finally { DebugExitSubRule(100); }


				}
				break;

			}
			} finally { DebugExitSubRule(101); }

			DebugLocation(428, 63);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred115_Php2927); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred115_Php_fragment", 174);
			LeaveRule("synpred115_Php_fragment", 174);
			LeaveRule_synpred115_Php_fragment();
		}
	}
	// $ANTLR end synpred115_Php

	partial void EnterRule_synpred117_Php_fragment();
	partial void LeaveRule_synpred117_Php_fragment();

	// $ANTLR start synpred117_Php
	private void synpred117_Php_fragment()
	{
		EnterRule_synpred117_Php_fragment();
		EnterRule("synpred117_Php_fragment", 176);
		var retval = new Antlr3AstNode("synpred117_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:7: ( memberAccess )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:7: memberAccess
			{
			DebugLocation(433, 7);
			PushFollow(Follow._memberAccess_in_synpred117_Php2955);
			memberAccess();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred117_Php_fragment", 176);
			LeaveRule("synpred117_Php_fragment", 176);
			LeaveRule_synpred117_Php_fragment();
		}
	}
	// $ANTLR end synpred117_Php
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA5 dfa5;
	private DFA4 dfa4;
	private DFA26 dfa26;
	private DFA34 dfa34;
	private DFA53 dfa53;
	private DFA71 dfa71;
	private DFA83 dfa83;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this, SpecialStateTransition5 );
		dfa4 = new DFA4( this, SpecialStateTransition4 );
		dfa26 = new DFA26( this, SpecialStateTransition26 );
		dfa34 = new DFA34( this, SpecialStateTransition34 );
		dfa53 = new DFA53( this, SpecialStateTransition53 );
		dfa71 = new DFA71( this, SpecialStateTransition71 );
		dfa83 = new DFA83( this, SpecialStateTransition83 );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x140\xFFFF";
		private const string DFA5_eofS =
			"\x140\xFFFF";
		private const string DFA5_minS =
			"\x1\x4\x1\x55\x1\x6\x1\x27\x3\x6\x3\x27\x6\x6\x1\x55\x1\x27\x1\xFFFF"+
			"\x1\x6\x2\x27\x2\xF\x1\x6D\x2\x6\x1\x4\xA\xFFFF\x2\x0\x1\xFFFF\x14\x0"+
			"\x1\xFFFF\x46\x0\x1\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF"+
			"\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\x19\x0\x2\xFFFF\x1\x0\x2\xFFFF\x12\x0"+
			"\x2\xFFFF\x36\x0\x3\xFFFF";
		private const string DFA5_maxS =
			"\x1\x6F\x1\x55\x1\x71\x7\x6D\x6\x71\x1\x55\x1\x6D\x1\xFFFF\x3\x6D\x2"+
			"\x64\x3\x6D\x1\x6F\xA\xFFFF\x2\x0\x1\xFFFF\x14\x0\x1\xFFFF\x46\x0\x1"+
			"\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\xF"+
			"\x0\x1\xFFFF\x19\x0\x2\xFFFF\x1\x0\x2\xFFFF\x12\x0\x2\xFFFF\x36\x0\x3"+
			"\xFFFF";
		private const string DFA5_acceptS =
			"\x12\xFFFF\x1\x2\x9\xFFFF\x1\x6\x1\xFFFF\x1\x7\x1\x8\x8\xFFFF\x1\x5\xC6"+
			"\xFFFF\x1\x9\x4D\xFFFF\x1\x4\x1\x1\x1\x3";
		private const string DFA5_specialS =
			"\x26\xFFFF\x1\x0\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x1\x14\x1\x15\x1\xFFFF\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B"+
			"\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25"+
			"\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F"+
			"\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39"+
			"\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43"+
			"\x1\x44\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D"+
			"\x1\x4E\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57"+
			"\x1\x58\x1\x59\x1\x5A\x1\x5B\x1\xFFFF\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1"+
			"\x60\x1\x61\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68\x1\x69\x1"+
			"\x6A\x1\xFFFF\x1\x6B\x1\x6C\x1\x6D\x1\x6E\x1\x6F\x1\x70\x1\x71\x1\x72"+
			"\x1\x73\x1\x74\x1\x75\x1\x76\x1\x77\x1\x78\x1\x79\x1\xFFFF\x1\x7A\x1"+
			"\x7B\x1\x7C\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x1\x83\x1\x84\x1"+
			"\x85\x1\x86\x1\x87\x1\x88\x1\xFFFF\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D"+
			"\x1\x8E\x1\x8F\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x1\x97"+
			"\x1\xFFFF\x1\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1\x9E\x1\x9F\x1"+
			"\xA0\x1\xA1\x1\xA2\x1\xA3\x1\xA4\x1\xA5\x1\xA6\x1\xFFFF\x1\xA7\x1\xA8"+
			"\x1\xA9\x1\xAA\x1\xAB\x1\xAC\x1\xAD\x1\xAE\x1\xAF\x1\xB0\x1\xB1\x1\xB2"+
			"\x1\xB3\x1\xB4\x1\xB5\x1\xB6\x1\xB7\x1\xB8\x1\xB9\x1\xBA\x1\xBB\x1\xBC"+
			"\x1\xBD\x1\xBE\x1\xBF\x2\xFFFF\x1\xC0\x2\xFFFF\x1\xC1\x1\xC2\x1\xC3\x1"+
			"\xC4\x1\xC5\x1\xC6\x1\xC7\x1\xC8\x1\xC9\x1\xCA\x1\xCB\x1\xCC\x1\xCD\x1"+
			"\xCE\x1\xCF\x1\xD0\x1\xD1\x1\xD2\x2\xFFFF\x1\xD3\x1\xD4\x1\xD5\x1\xD6"+
			"\x1\xD7\x1\xD8\x1\xD9\x1\xDA\x1\xDB\x1\xDC\x1\xDD\x1\xDE\x1\xDF\x1\xE0"+
			"\x1\xE1\x1\xE2\x1\xE3\x1\xE4\x1\xE5\x1\xE6\x1\xE7\x1\xE8\x1\xE9\x1\xEA"+
			"\x1\xEB\x1\xEC\x1\xED\x1\xEE\x1\xEF\x1\xF0\x1\xF1\x1\xF2\x1\xF3\x1\xF4"+
			"\x1\xF5\x1\xF6\x1\xF7\x1\xF8\x1\xF9\x1\xFA\x1\xFB\x1\xFC\x1\xFD\x1\xFE"+
			"\x1\xFF\x1\x100\x1\x101\x1\x102\x1\x103\x1\x104\x1\x105\x1\x106\x1\x107"+
			"\x1\x108\x3\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x1C\x1\xFFFF\x1\x11\x2\xFFFF\x1\x10\x3\xFFFF\x1\x4\x1\xFFFF\x1\x12"+
				"\x2\xFFFF\x1\xF\x1\x16\x2\xFFFF\x1\x1C\x2\xFFFF\x1\x9\x7\xFFFF\x1\x17"+
				"\x4\xFFFF\x1\x1F\x1\x3\x1\xFFFF\x1\xB\x1\x13\xA\xFFFF\x1\x1F\x3\xFFFF"+
				"\x1\x1F\x1\xFFFF\x1\x1F\x1\x14\x1\x18\x1\xC\x2\xFFFF\x1\x1F\x2\xFFFF"+
				"\x1\x7\x2\xFFFF\x1\xD\x1\x1E\x1\xFFFF\x1\x1\x4\xFFFF\x1\x5\x2\xFFFF"+
				"\x1\x8\x1\xFFFF\x1\x1B\x1\x6\xA\xFFFF\x1\xE\x1\xFFFF\x1\x1A\x1\x19\x2"+
				"\xFFFF\x1\xA\x1\xFFFF\x1\x15\x1\x5\x1\x1F\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x1F",
				"\x1\x26",
				"\x1\x34\x1\x39\x3\xFFFF\x1\x2B\x1\x2F\x2\xFFFF\x1\x12\x8\xFFFF\x1\x27"+
				"\x4\xFFFF\x1\x28\x1\xFFFF\x1\x32\x8\xFFFF\x1\x30\x6\xFFFF\x1\x33\x1"+
				"\x2B\x9\xFFFF\x1\x2F\x9\xFFFF\x1\x2C\x1\x2A\x1\x2E\x4\xFFFF\x1\x36\x1"+
				"\x37\x2\xFFFF\x1\x30\x5\xFFFF\x1\x2D\x1\x29\x1\x3B\x1\xFFFF\x1\x2F\x1"+
				"\x35\x1\x30\x3\xFFFF\x1\x38\x4\xFFFF\x1\x3C\x1\x31\xB\xFFFF\x1\x3A",
				"\x1\x3E\x45\xFFFF\x1\x3F",
				"\x1\x4F\x2\xFFFF\x1\x4E\x3\xFFFF\x1\x40\x4\xFFFF\x1\x4D\x6\xFFFF\x1"+
				"\x47\xD\xFFFF\x1\x45\x1\xFFFF\x1\x49\x14\xFFFF\x1\x4A\x5\xFFFF\x1\x43"+
				"\x2\xFFFF\x1\x4B\x7\xFFFF\x1\x41\x2\xFFFF\x1\x46\x2\xFFFF\x1\x42\xA"+
				"\xFFFF\x1\x4C\x5\xFFFF\x1\x48\x2\xFFFF\x1\x41\x1\xFFFF\x1\x41\x1\xFFFF"+
				"\x1\x44",
				"\x1\x5C\x2\xFFFF\x1\x5B\x8\xFFFF\x1\x5A\x6\xFFFF\x1\x54\xD\xFFFF\x1"+
				"\x52\x1\xFFFF\x1\x56\x14\xFFFF\x1\x57\x5\xFFFF\x1\x50\x2\xFFFF\x1\x58"+
				"\xA\xFFFF\x1\x53\xD\xFFFF\x1\x59\x5\xFFFF\x1\x55\x6\xFFFF\x1\x51",
				"\x1\x6E\x2\xFFFF\x1\x6D\x3\xFFFF\x1\x61\x4\xFFFF\x1\x6C\x6\xFFFF\x1"+
				"\x66\xD\xFFFF\x1\x60\x1\xFFFF\x1\x68\x14\xFFFF\x1\x69\x5\xFFFF\x1\x64"+
				"\x2\xFFFF\x1\x6A\x2\xFFFF\x1\x5E\x4\xFFFF\x1\x62\x2\xFFFF\x1\x65\x2"+
				"\xFFFF\x1\x63\x8\xFFFF\x1\x5D\x1\xFFFF\x1\x6B\x5\xFFFF\x1\x67\x2\xFFFF"+
				"\x1\x62\x1\xFFFF\x1\x62\x1\xFFFF\x1\x5F",
				"\x1\x70\x45\xFFFF\x1\x6F",
				"\x1\x72\x45\xFFFF\x1\x71",
				"\x1\x74\x45\xFFFF\x1\x73",
				"\x1\x7B\x1\x80\x4\xFFFF\x1\x76\x2\xFFFF\x1\x12\xF\xFFFF\x1\x79\x8\xFFFF"+
				"\x1\x77\x6\xFFFF\x1\x7A\xA\xFFFF\x1\x76\xB\xFFFF\x1\x75\x4\xFFFF\x1"+
				"\x7D\x1\x7E\x2\xFFFF\x1\x77\x7\xFFFF\x1\x82\x1\xFFFF\x1\x76\x1\x7C\x1"+
				"\x77\x3\xFFFF\x1\x7F\x4\xFFFF\x1\x83\x1\x78\xB\xFFFF\x1\x81",
				"\x1\x8B\x1\x90\x4\xFFFF\x1\x86\x2\xFFFF\x1\x12\xF\xFFFF\x1\x89\x8\xFFFF"+
				"\x1\x87\x6\xFFFF\x1\x8A\xA\xFFFF\x1\x86\xB\xFFFF\x1\x85\x4\xFFFF\x1"+
				"\x8D\x1\x8E\x2\xFFFF\x1\x87\x7\xFFFF\x1\x92\x1\xFFFF\x1\x86\x1\x8C\x1"+
				"\x87\x3\xFFFF\x1\x8F\x4\xFFFF\x1\x93\x1\x88\xB\xFFFF\x1\x91",
				"\x1\x9B\x1\xA0\x4\xFFFF\x1\x96\x2\xFFFF\x1\x12\xF\xFFFF\x1\x99\x8\xFFFF"+
				"\x1\x97\x6\xFFFF\x1\x9A\xA\xFFFF\x1\x96\xB\xFFFF\x1\x95\x4\xFFFF\x1"+
				"\x9D\x1\x9E\x2\xFFFF\x1\x97\x7\xFFFF\x1\xA2\x1\xFFFF\x1\x96\x1\x9C\x1"+
				"\x97\x3\xFFFF\x1\x9F\x4\xFFFF\x1\xA3\x1\x98\xB\xFFFF\x1\xA1",
				"\x1\xAB\x1\xB0\x4\xFFFF\x1\xA6\x2\xFFFF\x1\x12\xF\xFFFF\x1\xA9\x8\xFFFF"+
				"\x1\xA7\x6\xFFFF\x1\xAA\xA\xFFFF\x1\xA6\xB\xFFFF\x1\xA5\x4\xFFFF\x1"+
				"\xAD\x1\xAE\x2\xFFFF\x1\xA7\x7\xFFFF\x1\xB2\x1\xFFFF\x1\xA6\x1\xAC\x1"+
				"\xA7\x3\xFFFF\x1\xAF\x4\xFFFF\x1\xB3\x1\xA8\xB\xFFFF\x1\xB1",
				"\x1\xBB\x1\xC0\x4\xFFFF\x1\xB6\x2\xFFFF\x1\x12\xF\xFFFF\x1\xB9\x8\xFFFF"+
				"\x1\xB7\x6\xFFFF\x1\xBA\xA\xFFFF\x1\xB6\xB\xFFFF\x1\xB5\x4\xFFFF\x1"+
				"\xBD\x1\xBE\x2\xFFFF\x1\xB7\x7\xFFFF\x1\xC2\x1\xFFFF\x1\xB6\x1\xBC\x1"+
				"\xB7\x3\xFFFF\x1\xBF\x4\xFFFF\x1\xC3\x1\xB8\xB\xFFFF\x1\xC1",
				"\x1\xCB\x1\xD0\x4\xFFFF\x1\xC6\x2\xFFFF\x1\x12\xF\xFFFF\x1\xC9\x8\xFFFF"+
				"\x1\xC7\x6\xFFFF\x1\xCA\xA\xFFFF\x1\xC6\xB\xFFFF\x1\xC5\x4\xFFFF\x1"+
				"\xCD\x1\xCE\x2\xFFFF\x1\xC7\x7\xFFFF\x1\xD2\x1\xFFFF\x1\xC6\x1\xCC\x1"+
				"\xC7\x3\xFFFF\x1\xCF\x4\xFFFF\x1\xD3\x1\xC8\xB\xFFFF\x1\xD1",
				"\x1\xD5",
				"\x1\xD7\x45\xFFFF\x1\xD6",
				"",
				"\x1\xE8\x2\xFFFF\x1\xE7\x3\xFFFF\x1\xDB\x4\xFFFF\x1\xE6\x6\xFFFF\x1"+
				"\xE0\xD\xFFFF\x1\xDA\x1\xFFFF\x1\xE2\x14\xFFFF\x1\xE3\x5\xFFFF\x1\xDE"+
				"\x2\xFFFF\x1\xE4\x2\xFFFF\x1\xD8\x4\xFFFF\x1\xDC\x2\xFFFF\x1\xDF\x2"+
				"\xFFFF\x1\xDD\xA\xFFFF\x1\xE5\x5\xFFFF\x1\xE1\x2\xFFFF\x1\xDC\x1\xFFFF"+
				"\x1\xDC\x1\xFFFF\x1\xD9",
				"\x1\xEA\x45\xFFFF\x1\xE9",
				"\x1\xEB\x45\xFFFF\x1\xEC",
				"\x1\x12\x37\xFFFF\x1\xED\x1C\xFFFF\x1\xEF",
				"\x1\x12\x37\xFFFF\x1\xF0\x1C\xFFFF\x1\xEF",
				"\x1\xF3",
				"\x1\x104\x2\xFFFF\x1\x103\x3\xFFFF\x1\xF7\x1\xFFFF\x1\x12\x2\xFFFF\x1"+
				"\x102\x6\xFFFF\x1\xFC\xD\xFFFF\x1\xF6\x1\xFFFF\x1\xFE\x14\xFFFF\x1\xFF"+
				"\x5\xFFFF\x1\xFA\x2\xFFFF\x1\x100\x2\xFFFF\x1\xF4\x4\xFFFF\x1\xF8\x2"+
				"\xFFFF\x1\xFB\x2\xFFFF\x1\xF9\xA\xFFFF\x1\x101\x3\xFFFF\x1\xEF\x1\xFFFF"+
				"\x1\xFD\x2\xFFFF\x1\xF8\x1\xFFFF\x1\xF8\x1\xFFFF\x1\xF5",
				"\x1\x117\x2\xFFFF\x1\x116\x3\xFFFF\x1\x10A\x4\xFFFF\x1\x115\x6\xFFFF"+
				"\x1\x10F\xD\xFFFF\x1\x109\x1\xFFFF\x1\x111\x14\xFFFF\x1\x112\x5\xFFFF"+
				"\x1\x10D\x2\xFFFF\x1\x113\x2\xFFFF\x1\x107\x4\xFFFF\x1\x10B\x2\xFFFF"+
				"\x1\x10E\x2\xFFFF\x1\x10C\xA\xFFFF\x1\x114\x5\xFFFF\x1\x110\x2\xFFFF"+
				"\x1\x10B\x1\xFFFF\x1\x10B\x1\xFFFF\x1\x108",
				"\x1\x133\x1\xFFFF\x1\x128\x2\xFFFF\x1\x127\x3\xFFFF\x1\x11B\x1\xFFFF"+
				"\x1\x129\x2\xFFFF\x1\x126\x1\x12D\x2\xFFFF\x1\x134\x2\xFFFF\x1\x120"+
				"\x1\x13D\x6\xFFFF\x1\x12E\x4\xFFFF\x1\x13A\x1\x11A\x1\xFFFF\x1\x122"+
				"\x1\x12A\xA\xFFFF\x1\x137\x3\xFFFF\x1\x138\x1\xFFFF\x1\x13C\x1\x12B"+
				"\x1\x12F\x1\x123\x2\xFFFF\x1\x136\x2\xFFFF\x1\x11E\x2\xFFFF\x1\x124"+
				"\x1\x135\x1\xFFFF\x1\x118\x4\xFFFF\x1\x11C\x2\xFFFF\x1\x11F\x1\xFFFF"+
				"\x1\x132\x1\x11D\xA\xFFFF\x1\x125\x1\xFFFF\x1\x131\x1\x130\x2\xFFFF"+
				"\x1\x121\x1\xFFFF\x1\x12C\x1\x11C\x1\x13B\x1\x11C\x1\xFFFF\x1\x119\x1"+
				"\xFFFF\x1\x139",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "164:1: statement : ({...}? => printExpr ';' !| ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | '{' statement '}' | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' !);"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition5(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA5_1 = input.LA(1);
		int index5_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 68:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 69:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 70:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 71:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 72:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 73:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 74:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 75:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 76:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 77:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 78:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 79:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 80:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 81:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 82:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 83:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 84:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 85:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 86:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 87:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 88:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 89:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 90:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 91:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 92:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 93:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 94:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 95:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 96:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 97:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 98:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 99:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 100:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 101:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 102:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 103:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 104:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 105:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 106:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 107:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 108:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 109:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 110:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 111:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 112:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 113:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 114:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 115:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 116:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 117:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 118:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 119:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 120:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 121:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 122:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 123:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 124:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 125:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 126:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 127:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 128:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 129:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 130:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 131:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 132:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 133:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 134:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 135:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 136:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 137:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 138:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 139:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 140:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 141:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 142:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 143:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 144:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 145:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 146:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 147:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 148:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 149:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 150:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 151:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 152:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 153:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 154:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 155:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 156:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 157:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 158:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 159:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 160:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 161:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 162:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 163:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 164:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 165:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 166:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 167:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 168:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 169:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 318;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 170:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 171:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 172:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 173:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 174:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 175:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 176:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 177:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 178:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 179:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 180:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 181:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 182:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 183:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 184:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 185:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 186:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 187:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 188:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 189:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 190:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 191:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 192:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 193:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 194:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 195:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 196:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 197:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 198:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 199:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 200:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 201:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 202:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 203:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 204:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 205:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 206:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 207:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 208:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 209:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 210:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 211:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 212:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 213:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 214:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 215:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 216:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 217:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 218:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 219:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 220:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 221:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 222:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 223:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 224:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 225:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 226:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 227:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 239;}

				input.Seek(index5_1);
				break;
			}
		case 228:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 229:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 230:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 231:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 232:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 233:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 234:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 235:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 236:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 237:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 238:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 239:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 240:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 241:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 242:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 243:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 244:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 245:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 246:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 247:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 248:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 249:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 250:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 251:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 252:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 253:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 254:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 255:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 256:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 257:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 258:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 259:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 260:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 261:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 262:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 263:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}
		case 264:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 319;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 317;}

				input.Seek(index5_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 5, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\xF1\xFFFF";
		private const string DFA4_eofS =
			"\xF1\xFFFF";
		private const string DFA4_minS =
			"\x1\x6\x1\x55\x1\x0\x1\x27\x3\x6\x3\x27\x6\x0\x1\x55\x1\x27\x1\x0\x8"+
			"\xFFFF\x1\x0\x16\xFFFF\x37\x0\x5A\xFFFF\x3\x0\x2B\xFFFF";
		private const string DFA4_maxS =
			"\x1\x6D\x1\x55\x1\x0\x7\x6D\x6\x0\x1\x55\x1\x6D\x1\x0\x8\xFFFF\x1\x0"+
			"\x16\xFFFF\x37\x0\x5A\xFFFF\x3\x0\x2B\xFFFF";
		private const string DFA4_acceptS =
			"\x13\xFFFF\x1\x2\x1D\xFFFF\x1\x1\xBF\xFFFF";
		private const string DFA4_specialS =
			"\x2\xFFFF\x1\x0\x7\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x2\xFFFF"+
			"\x1\x7\x8\xFFFF\x1\x8\x16\xFFFF\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1"+
			"\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1"+
			"\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1"+
			"\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1"+
			"\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1"+
			"\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x5A\xFFFF"+
			"\x1\x40\x1\x41\x1\x42\x2B\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x11\x2\xFFFF\x1\x10\x3\xFFFF\x1\x4\x1\xFFFF\x1\x12\x2\xFFFF\x1\xF"+
				"\x1\x13\x5\xFFFF\x1\x9\x7\xFFFF\x1\x13\x5\xFFFF\x1\x3\x1\xFFFF\x1\xB"+
				"\x1\x13\x11\xFFFF\x2\x13\x1\xC\x5\xFFFF\x1\x7\x2\xFFFF\x1\xD\x2\xFFFF"+
				"\x1\x1\x4\xFFFF\x1\x5\x2\xFFFF\x1\x8\x2\xFFFF\x1\x6\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\x13\x2\xFFFF\x1\xA\x1\xFFFF\x1\x13\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x2",
				"\x1\x1B",
				"\x1\xFFFF",
				"\x1\x32\x45\xFFFF\x1\x33",
				"\x1\x43\x2\xFFFF\x1\x42\x3\xFFFF\x1\x34\x4\xFFFF\x1\x41\x6\xFFFF\x1"+
				"\x3B\xD\xFFFF\x1\x39\x1\xFFFF\x1\x3D\x14\xFFFF\x1\x3E\x5\xFFFF\x1\x37"+
				"\x2\xFFFF\x1\x3F\x7\xFFFF\x1\x35\x2\xFFFF\x1\x3A\x2\xFFFF\x1\x36\xA"+
				"\xFFFF\x1\x40\x5\xFFFF\x1\x3C\x2\xFFFF\x1\x35\x1\xFFFF\x1\x35\x1\xFFFF"+
				"\x1\x38",
				"\x1\x50\x2\xFFFF\x1\x4F\x8\xFFFF\x1\x4E\x6\xFFFF\x1\x48\xD\xFFFF\x1"+
				"\x46\x1\xFFFF\x1\x4A\x14\xFFFF\x1\x4B\x5\xFFFF\x1\x44\x2\xFFFF\x1\x4C"+
				"\xA\xFFFF\x1\x47\xD\xFFFF\x1\x4D\x5\xFFFF\x1\x49\x6\xFFFF\x1\x45",
				"\x1\x62\x2\xFFFF\x1\x61\x3\xFFFF\x1\x55\x4\xFFFF\x1\x60\x6\xFFFF\x1"+
				"\x5A\xD\xFFFF\x1\x54\x1\xFFFF\x1\x5C\x14\xFFFF\x1\x5D\x5\xFFFF\x1\x58"+
				"\x2\xFFFF\x1\x5E\x2\xFFFF\x1\x52\x4\xFFFF\x1\x56\x2\xFFFF\x1\x59\x2"+
				"\xFFFF\x1\x57\x8\xFFFF\x1\x51\x1\xFFFF\x1\x5F\x5\xFFFF\x1\x5B\x2\xFFFF"+
				"\x1\x56\x1\xFFFF\x1\x56\x1\xFFFF\x1\x53",
				"\x1\x64\x45\xFFFF\x1\x63",
				"\x1\x66\x45\xFFFF\x1\x65",
				"\x1\x68\x45\xFFFF\x1\x67",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xC3",
				"\x1\xC5\x45\xFFFF\x1\xC4",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "166:7: ({...}? => ( printExpr )? | ( simpleStatement )? )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition4(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA4_1 = input.LA(1);
		int index4_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 4, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA26 : DFA
	{
		private const string DFA26_eotS =
			"\x53\xFFFF";
		private const string DFA26_eofS =
			"\x1\x3\x52\xFFFF";
		private const string DFA26_minS =
			"\x1\x4\x2\x0\x50\xFFFF";
		private const string DFA26_maxS =
			"\x1\x6F\x2\x0\x50\xFFFF";
		private const string DFA26_acceptS =
			"\x3\xFFFF\x1\x2\x29\xFFFF\x1\x1\x25\xFFFF";
		private const string DFA26_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x50\xFFFF}>";
		private static readonly string[] DFA26_transitionS =
			{
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x6\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\x2\x1\x1\x8\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x1\xFFFF\x4\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x2\x3\x1"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\xA\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA26_eot = DFA.UnpackEncodedString(DFA26_eotS);
		private static readonly short[] DFA26_eof = DFA.UnpackEncodedString(DFA26_eofS);
		private static readonly char[] DFA26_min = DFA.UnpackEncodedStringToUnsignedChars(DFA26_minS);
		private static readonly char[] DFA26_max = DFA.UnpackEncodedStringToUnsignedChars(DFA26_maxS);
		private static readonly short[] DFA26_accept = DFA.UnpackEncodedString(DFA26_acceptS);
		private static readonly short[] DFA26_special = DFA.UnpackEncodedString(DFA26_specialS);
		private static readonly short[][] DFA26_transition;

		static DFA26()
		{
			int numStates = DFA26_transitionS.Length;
			DFA26_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA26_transition[i] = DFA.UnpackEncodedString(DFA26_transitionS[i]);
			}
		}

		public DFA26( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}

		public override string Description { get { return "234:58: ( conditional )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition26(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA26_1 = input.LA(1);
		int index26_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred37_Php_fragment))) {s = 45;}

				else if ((true)) {s = 3;}

				input.Seek(index26_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred37_Php_fragment))) {s = 45;}

				else if ((true)) {s = 3;}

				input.Seek(index26_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 26, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\x53\xFFFF";
		private const string DFA34_eofS =
			"\x1\x3\x52\xFFFF";
		private const string DFA34_minS =
			"\x1\x4\x2\x0\x50\xFFFF";
		private const string DFA34_maxS =
			"\x1\x6F\x2\x0\x50\xFFFF";
		private const string DFA34_acceptS =
			"\x3\xFFFF\x1\x2\x29\xFFFF\x1\x1\x25\xFFFF";
		private const string DFA34_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x50\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x6\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\x2\x1\x1\x8\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x1\xFFFF\x4\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x2\x3\x1"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\xA\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "257:62: ( conditional )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition34(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA34_1 = input.LA(1);
		int index34_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 45;}

				else if ((true)) {s = 3;}

				input.Seek(index34_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 45;}

				else if ((true)) {s = 3;}

				input.Seek(index34_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 34, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\xEA\xFFFF";
		private const string DFA53_eofS =
			"\x5\xFFFF\x1\x52\x3\xFFFF\x6\x52\xDB\xFFFF";
		private const string DFA53_minS =
			"\x4\x6\x1\x27\x1\x6\x3\x27\x6\x6\x1\x55\x1\x27\x40\x0\xC\xFFFF\x10\x0"+
			"\xC\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF"+
			"\xA\x0\xC\xFFFF\x3\x0";
		private const string DFA53_maxS =
			"\x5\x6D\x1\x71\x3\x6D\x6\x71\x1\x55\x1\x6D\x40\x0\xC\xFFFF\x10\x0\xC"+
			"\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF\xA"+
			"\x0\xC\xFFFF\x3\x0";
		private const string DFA53_acceptS =
			"\x51\xFFFF\x1\x1\x1\x2\x97\xFFFF";
		private const string DFA53_specialS =
			"\x11\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C"+
			"\x1\x3D\x1\x3E\x1\x3F\xC\xFFFF\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1"+
			"\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1"+
			"\x4F\xC\xFFFF\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57"+
			"\x1\x58\x1\x59\xC\xFFFF\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1"+
			"\x60\x1\x61\x1\x62\x1\x63\xC\xFFFF\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68"+
			"\x1\x69\x1\x6A\x1\x6B\x1\x6C\x1\x6D\xC\xFFFF\x1\x6E\x1\x6F\x1\x70\x1"+
			"\x71\x1\x72\x1\x73\x1\x74\x1\x75\x1\x76\x1\x77\xC\xFFFF\x1\x78\x1\x79"+
			"\x1\x7A\x1\x7B\x1\x7C\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\xC\xFFFF\x1"+
			"\x82\x1\x83\x1\x84}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x10\x2\xFFFF\x1\xF\x3\xFFFF\x1\x1\x4\xFFFF\x1\xE\x6\xFFFF\x1\x8"+
				"\xD\xFFFF\x1\x6\x1\xFFFF\x1\xA\x14\xFFFF\x1\xB\x5\xFFFF\x1\x4\x2\xFFFF"+
				"\x1\xC\x7\xFFFF\x1\x2\x2\xFFFF\x1\x7\x2\xFFFF\x1\x3\xA\xFFFF\x1\xD\x5"+
				"\xFFFF\x1\x9\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5",
				"\x1\x20\x2\xFFFF\x1\x1F\x3\xFFFF\x1\x11\x4\xFFFF\x1\x1E\x6\xFFFF\x1"+
				"\x18\xD\xFFFF\x1\x16\x1\xFFFF\x1\x1A\x14\xFFFF\x1\x1B\x5\xFFFF\x1\x14"+
				"\x2\xFFFF\x1\x1C\x7\xFFFF\x1\x12\x2\xFFFF\x1\x17\x2\xFFFF\x1\x13\xA"+
				"\xFFFF\x1\x1D\x5\xFFFF\x1\x19\x2\xFFFF\x1\x12\x1\xFFFF\x1\x12\x1\xFFFF"+
				"\x1\x15",
				"\x1\x2D\x2\xFFFF\x1\x2C\x8\xFFFF\x1\x2B\x6\xFFFF\x1\x25\xD\xFFFF\x1"+
				"\x23\x1\xFFFF\x1\x27\x14\xFFFF\x1\x28\x5\xFFFF\x1\x21\x2\xFFFF\x1\x29"+
				"\xA\xFFFF\x1\x24\xD\xFFFF\x1\x2A\x5\xFFFF\x1\x26\x6\xFFFF\x1\x22",
				"\x1\x3F\x2\xFFFF\x1\x3E\x3\xFFFF\x1\x32\x4\xFFFF\x1\x3D\x6\xFFFF\x1"+
				"\x37\xD\xFFFF\x1\x31\x1\xFFFF\x1\x39\x14\xFFFF\x1\x3A\x5\xFFFF\x1\x35"+
				"\x2\xFFFF\x1\x3B\x2\xFFFF\x1\x2F\x4\xFFFF\x1\x33\x2\xFFFF\x1\x36\x2"+
				"\xFFFF\x1\x34\x8\xFFFF\x1\x2E\x1\xFFFF\x1\x3C\x5\xFFFF\x1\x38\x2\xFFFF"+
				"\x1\x33\x1\xFFFF\x1\x33\x1\xFFFF\x1\x30",
				"\x1\x41\x45\xFFFF\x1\x40",
				"\x1\x4D\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\x48\x2\xFFFF\x1\x52\x8\xFFFF"+
				"\x1\x42\x2\xFFFF\x4\x52\x1\x4B\x8\xFFFF\x1\x49\x6\xFFFF\x1\x4C\xA\xFFFF"+
				"\x1\x48\x9\xFFFF\x1\x45\x1\x44\x1\x47\x4\xFFFF\x1\x4F\x1\x50\x2\xFFFF"+
				"\x1\x49\x5\xFFFF\x1\x46\x1\x43\x1\x52\x1\xFFFF\x1\x48\x1\x4E\x1\x49"+
				"\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\x4A\xB\xFFFF\x1\x52",
				"\x1\x5D\x45\xFFFF\x1\x5E",
				"\x1\x60\x45\xFFFF\x1\x5F",
				"\x1\x62\x45\xFFFF\x1\x61",
				"\x1\x69\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\x64\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\x67\x8\xFFFF\x1\x65\x6\xFFFF\x1\x68\xA\xFFFF\x1\x64\xB\xFFFF"+
				"\x1\x63\x4\xFFFF\x1\x6B\x1\x6C\x2\xFFFF\x1\x65\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\x64\x1\x6A\x1\x65\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\x66\xB\xFFFF"+
				"\x1\x52",
				"\x1\x7F\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\x7A\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\x7D\x8\xFFFF\x1\x7B\x6\xFFFF\x1\x7E\xA\xFFFF\x1\x7A\xB\xFFFF"+
				"\x1\x79\x4\xFFFF\x1\x81\x1\x82\x2\xFFFF\x1\x7B\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\x7A\x1\x80\x1\x7B\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\x7C\xB\xFFFF"+
				"\x1\x52",
				"\x1\x95\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\x90\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\x93\x8\xFFFF\x1\x91\x6\xFFFF\x1\x94\xA\xFFFF\x1\x90\xB\xFFFF"+
				"\x1\x8F\x4\xFFFF\x1\x97\x1\x98\x2\xFFFF\x1\x91\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\x90\x1\x96\x1\x91\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\x92\xB\xFFFF"+
				"\x1\x52",
				"\x1\xAB\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\xA6\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\xA9\x8\xFFFF\x1\xA7\x6\xFFFF\x1\xAA\xA\xFFFF\x1\xA6\xB\xFFFF"+
				"\x1\xA5\x4\xFFFF\x1\xAD\x1\xAE\x2\xFFFF\x1\xA7\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\xA6\x1\xAC\x1\xA7\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\xA8\xB\xFFFF"+
				"\x1\x52",
				"\x1\xC1\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\xBC\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\xBF\x8\xFFFF\x1\xBD\x6\xFFFF\x1\xC0\xA\xFFFF\x1\xBC\xB\xFFFF"+
				"\x1\xBB\x4\xFFFF\x1\xC3\x1\xC4\x2\xFFFF\x1\xBD\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\xBC\x1\xC2\x1\xBD\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\xBE\xB\xFFFF"+
				"\x1\x52",
				"\x1\xD7\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\xD2\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\xD5\x8\xFFFF\x1\xD3\x6\xFFFF\x1\xD6\xA\xFFFF\x1\xD2\xB\xFFFF"+
				"\x1\xD1\x4\xFFFF\x1\xD9\x1\xDA\x2\xFFFF\x1\xD3\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\xD2\x1\xD8\x1\xD3\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\xD4\xB\xFFFF"+
				"\x1\x52",
				"\x1\xE7",
				"\x1\xE9\x45\xFFFF\x1\xE8",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "332:1: ternary : ( logicalOr QuestionMark expression Colon expression | logicalOr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition53(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA53_1 = input.LA(1);
		int index53_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 68:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 69:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 70:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 71:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 72:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 73:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 74:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 75:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 76:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 77:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 78:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 79:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 80:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 81:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 82:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 83:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 84:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 85:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 86:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 87:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 88:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 89:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 90:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 91:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 92:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 93:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 94:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 95:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 96:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 97:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 98:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 99:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 100:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 101:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 102:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 103:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 104:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 105:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 106:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 107:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 108:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 109:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 110:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 111:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 112:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 113:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 114:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 115:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 116:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 117:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 118:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 119:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 120:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 121:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 122:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 123:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 124:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 125:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 126:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 127:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 128:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 129:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 130:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 131:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 132:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred77_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 53, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\xD1\xFFFF";
		private const string DFA71_eofS =
			"\x2\xFFFF\x1\x28\x7\xFFFF\x6\x28\xC1\xFFFF";
		private const string DFA71_minS =
			"\x1\x6\x1\x55\x1\x6\x1\x27\x3\x6\x3\x27\x6\x6\x1\x55\x1\x27\x15\x0\x4"+
			"\xFFFF\x45\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE"+
			"\x0\x4\xFFFF\xE\x0\x4\xFFFF\x3\x0";
		private const string DFA71_maxS =
			"\x1\x6D\x1\x55\x1\x71\x7\x6D\x6\x71\x1\x55\x1\x6D\x15\x0\x4\xFFFF\x45"+
			"\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE\x0\x4\xFFFF"+
			"\xE\x0\x4\xFFFF\x3\x0";
		private const string DFA71_acceptS =
			"\x27\xFFFF\x1\x1\x1\x2\xA8\xFFFF";
		private const string DFA71_specialS =
			"\x12\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x4\xFFFF\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1"+
			"\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1"+
			"\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1"+
			"\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1"+
			"\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1"+
			"\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58\x1"+
			"\x59\x4\xFFFF\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61"+
			"\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x4\xFFFF\x1\x68\x1\x69\x1"+
			"\x6A\x1\x6B\x1\x6C\x1\x6D\x1\x6E\x1\x6F\x1\x70\x1\x71\x1\x72\x1\x73\x1"+
			"\x74\x1\x75\x4\xFFFF\x1\x76\x1\x77\x1\x78\x1\x79\x1\x7A\x1\x7B\x1\x7C"+
			"\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x1\x83\x4\xFFFF\x1\x84\x1"+
			"\x85\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D\x1\x8E\x1"+
			"\x8F\x1\x90\x1\x91\x4\xFFFF\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x1\x97"+
			"\x1\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1\x9E\x1\x9F\x4\xFFFF\x1"+
			"\xA0\x1\xA1\x1\xA2}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x11\x2\xFFFF\x1\x10\x3\xFFFF\x1\x4\x4\xFFFF\x1\xF\x6\xFFFF\x1\x9"+
				"\xD\xFFFF\x1\x3\x1\xFFFF\x1\xB\x14\xFFFF\x1\xC\x5\xFFFF\x1\x7\x2\xFFFF"+
				"\x1\xD\x2\xFFFF\x1\x1\x4\xFFFF\x1\x5\x2\xFFFF\x1\x8\x2\xFFFF\x1\x6\xA"+
				"\xFFFF\x1\xE\x5\xFFFF\x1\xA\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x2",
				"\x1\x12",
				"\x1\x1F\x1\x24\x2\xFFFF\x1\x27\x1\x16\x1\x1A\xB\xFFFF\x1\x13\x2\xFFFF"+
				"\x1\x28\x2\xFFFF\x1\x28\x1\x1D\x8\xFFFF\x1\x1B\x6\xFFFF\x1\x1E\x1\x16"+
				"\x9\xFFFF\x1\x1A\x9\xFFFF\x1\x17\x1\x15\x1\x19\x4\xFFFF\x1\x21\x1\x22"+
				"\x2\xFFFF\x1\x1B\x5\xFFFF\x1\x18\x1\x14\x1\x26\x1\xFFFF\x1\x1A\x1\x20"+
				"\x1\x1B\x3\xFFFF\x1\x23\x5\xFFFF\x1\x1C\xB\xFFFF\x1\x25",
				"\x1\x2B\x45\xFFFF\x1\x2C",
				"\x1\x3C\x2\xFFFF\x1\x3B\x3\xFFFF\x1\x2D\x4\xFFFF\x1\x3A\x6\xFFFF\x1"+
				"\x34\xD\xFFFF\x1\x32\x1\xFFFF\x1\x36\x14\xFFFF\x1\x37\x5\xFFFF\x1\x30"+
				"\x2\xFFFF\x1\x38\x7\xFFFF\x1\x2E\x2\xFFFF\x1\x33\x2\xFFFF\x1\x2F\xA"+
				"\xFFFF\x1\x39\x5\xFFFF\x1\x35\x2\xFFFF\x1\x2E\x1\xFFFF\x1\x2E\x1\xFFFF"+
				"\x1\x31",
				"\x1\x49\x2\xFFFF\x1\x48\x8\xFFFF\x1\x47\x6\xFFFF\x1\x41\xD\xFFFF\x1"+
				"\x3F\x1\xFFFF\x1\x43\x14\xFFFF\x1\x44\x5\xFFFF\x1\x3D\x2\xFFFF\x1\x45"+
				"\xA\xFFFF\x1\x40\xD\xFFFF\x1\x46\x5\xFFFF\x1\x42\x6\xFFFF\x1\x3E",
				"\x1\x5B\x2\xFFFF\x1\x5A\x3\xFFFF\x1\x4E\x4\xFFFF\x1\x59\x6\xFFFF\x1"+
				"\x53\xD\xFFFF\x1\x4D\x1\xFFFF\x1\x55\x14\xFFFF\x1\x56\x5\xFFFF\x1\x51"+
				"\x2\xFFFF\x1\x57\x2\xFFFF\x1\x4B\x4\xFFFF\x1\x4F\x2\xFFFF\x1\x52\x2"+
				"\xFFFF\x1\x50\x8\xFFFF\x1\x4A\x1\xFFFF\x1\x58\x5\xFFFF\x1\x54\x2\xFFFF"+
				"\x1\x4F\x1\xFFFF\x1\x4F\x1\xFFFF\x1\x4C",
				"\x1\x5D\x45\xFFFF\x1\x5C",
				"\x1\x5F\x45\xFFFF\x1\x5E",
				"\x1\x61\x45\xFFFF\x1\x60",
				"\x1\x68\x1\x6D\x2\xFFFF\x1\x27\x1\xFFFF\x1\x63\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\x66\x8\xFFFF\x1\x64\x6\xFFFF\x1\x67\xA\xFFFF\x1\x63\xB\xFFFF"+
				"\x1\x62\x4\xFFFF\x1\x6A\x1\x6B\x2\xFFFF\x1\x64\x7\xFFFF\x1\x6F\x1\xFFFF"+
				"\x1\x63\x1\x69\x1\x64\x3\xFFFF\x1\x6C\x5\xFFFF\x1\x65\xB\xFFFF\x1\x6E",
				"\x1\x7A\x1\x7F\x2\xFFFF\x1\x27\x1\xFFFF\x1\x75\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\x78\x8\xFFFF\x1\x76\x6\xFFFF\x1\x79\xA\xFFFF\x1\x75\xB\xFFFF"+
				"\x1\x74\x4\xFFFF\x1\x7C\x1\x7D\x2\xFFFF\x1\x76\x7\xFFFF\x1\x81\x1\xFFFF"+
				"\x1\x75\x1\x7B\x1\x76\x3\xFFFF\x1\x7E\x5\xFFFF\x1\x77\xB\xFFFF\x1\x80",
				"\x1\x8C\x1\x91\x2\xFFFF\x1\x27\x1\xFFFF\x1\x87\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\x8A\x8\xFFFF\x1\x88\x6\xFFFF\x1\x8B\xA\xFFFF\x1\x87\xB\xFFFF"+
				"\x1\x86\x4\xFFFF\x1\x8E\x1\x8F\x2\xFFFF\x1\x88\x7\xFFFF\x1\x93\x1\xFFFF"+
				"\x1\x87\x1\x8D\x1\x88\x3\xFFFF\x1\x90\x5\xFFFF\x1\x89\xB\xFFFF\x1\x92",
				"\x1\x9E\x1\xA3\x2\xFFFF\x1\x27\x1\xFFFF\x1\x99\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\x9C\x8\xFFFF\x1\x9A\x6\xFFFF\x1\x9D\xA\xFFFF\x1\x99\xB\xFFFF"+
				"\x1\x98\x4\xFFFF\x1\xA0\x1\xA1\x2\xFFFF\x1\x9A\x7\xFFFF\x1\xA5\x1\xFFFF"+
				"\x1\x99\x1\x9F\x1\x9A\x3\xFFFF\x1\xA2\x5\xFFFF\x1\x9B\xB\xFFFF\x1\xA4",
				"\x1\xB0\x1\xB5\x2\xFFFF\x1\x27\x1\xFFFF\x1\xAB\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\xAE\x8\xFFFF\x1\xAC\x6\xFFFF\x1\xAF\xA\xFFFF\x1\xAB\xB\xFFFF"+
				"\x1\xAA\x4\xFFFF\x1\xB2\x1\xB3\x2\xFFFF\x1\xAC\x7\xFFFF\x1\xB7\x1\xFFFF"+
				"\x1\xAB\x1\xB1\x1\xAC\x3\xFFFF\x1\xB4\x5\xFFFF\x1\xAD\xB\xFFFF\x1\xB6",
				"\x1\xC2\x1\xC7\x2\xFFFF\x1\x27\x1\xFFFF\x1\xBD\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\xC0\x8\xFFFF\x1\xBE\x6\xFFFF\x1\xC1\xA\xFFFF\x1\xBD\xB\xFFFF"+
				"\x1\xBC\x4\xFFFF\x1\xC4\x1\xC5\x2\xFFFF\x1\xBE\x7\xFFFF\x1\xC9\x1\xFFFF"+
				"\x1\xBD\x1\xC3\x1\xBE\x3\xFFFF\x1\xC6\x5\xFFFF\x1\xBF\xB\xFFFF\x1\xC8",
				"\x1\xCE",
				"\x1\xD0\x45\xFFFF\x1\xCF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "411:7: ( keyValuePair | expression )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition71(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA71_1 = input.LA(1);
		int index71_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 68:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 69:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 70:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 71:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 72:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 73:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 74:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 75:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 76:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 77:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 78:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 79:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 80:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 81:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 82:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 83:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 84:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 85:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 86:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 87:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 88:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 89:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 90:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 91:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 92:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 93:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 94:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 95:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 96:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 97:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 98:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 99:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 100:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 101:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 102:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 103:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 104:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 105:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 106:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 107:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 108:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 109:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 110:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 111:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 112:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 113:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 114:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 115:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 116:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 117:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 118:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 119:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 120:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 121:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 122:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 123:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 124:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 125:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 126:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 127:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 128:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 129:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 130:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 131:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 132:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 133:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 134:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 135:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 136:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 137:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 138:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 139:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 140:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 141:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 142:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 143:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 144:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 145:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 146:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 147:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 148:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 149:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 150:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 151:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 152:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 153:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 154:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 155:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 156:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 157:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 158:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 159:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 160:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 161:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 162:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred105_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 71, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA83 : DFA
	{
		private const string DFA83_eotS =
			"\xC7\xFFFF";
		private const string DFA83_eofS =
			"\xC7\xFFFF";
		private const string DFA83_minS =
			"\x1\x6\x1\x55\x1\x0\x1\x27\x3\x6\x3\x27\x6\x0\x1\x55\x1\x27\x1\x0\x8"+
			"\xFFFF\x1\x0\x16\xFFFF\x37\x0\x5A\xFFFF\x3\x0\x1\xFFFF";
		private const string DFA83_maxS =
			"\x1\x6D\x1\x55\x1\x0\x7\x6D\x6\x0\x1\x55\x1\x6D\x1\x0\x8\xFFFF\x1\x0"+
			"\x16\xFFFF\x37\x0\x5A\xFFFF\x3\x0\x1\xFFFF";
		private const string DFA83_acceptS =
			"\x13\xFFFF\x1\x2\x1D\xFFFF\x1\x1\x95\xFFFF";
		private const string DFA83_specialS =
			"\x2\xFFFF\x1\x0\x7\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x2\xFFFF"+
			"\x1\x7\x8\xFFFF\x1\x8\x16\xFFFF\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1"+
			"\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1"+
			"\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1"+
			"\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1"+
			"\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1"+
			"\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x5A\xFFFF"+
			"\x1\x40\x1\x41\x1\x42\x1\xFFFF}>";
		private static readonly string[] DFA83_transitionS =
			{
				"\x1\x11\x2\xFFFF\x1\x10\x3\xFFFF\x1\x4\x1\xFFFF\x1\x12\x2\xFFFF\x1\xF"+
				"\x1\x13\x5\xFFFF\x1\x9\x7\xFFFF\x1\x13\x5\xFFFF\x1\x3\x1\xFFFF\x1\xB"+
				"\x1\x13\x11\xFFFF\x2\x13\x1\xC\x5\xFFFF\x1\x7\x2\xFFFF\x1\xD\x2\xFFFF"+
				"\x1\x1\x4\xFFFF\x1\x5\x2\xFFFF\x1\x8\x2\xFFFF\x1\x6\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\x13\x2\xFFFF\x1\xA\x1\xFFFF\x1\x13\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x2",
				"\x1\x1B",
				"\x1\xFFFF",
				"\x1\x32\x45\xFFFF\x1\x33",
				"\x1\x43\x2\xFFFF\x1\x42\x3\xFFFF\x1\x34\x4\xFFFF\x1\x41\x6\xFFFF\x1"+
				"\x3B\xD\xFFFF\x1\x39\x1\xFFFF\x1\x3D\x14\xFFFF\x1\x3E\x5\xFFFF\x1\x37"+
				"\x2\xFFFF\x1\x3F\x7\xFFFF\x1\x35\x2\xFFFF\x1\x3A\x2\xFFFF\x1\x36\xA"+
				"\xFFFF\x1\x40\x5\xFFFF\x1\x3C\x2\xFFFF\x1\x35\x1\xFFFF\x1\x35\x1\xFFFF"+
				"\x1\x38",
				"\x1\x50\x2\xFFFF\x1\x4F\x8\xFFFF\x1\x4E\x6\xFFFF\x1\x48\xD\xFFFF\x1"+
				"\x46\x1\xFFFF\x1\x4A\x14\xFFFF\x1\x4B\x5\xFFFF\x1\x44\x2\xFFFF\x1\x4C"+
				"\xA\xFFFF\x1\x47\xD\xFFFF\x1\x4D\x5\xFFFF\x1\x49\x6\xFFFF\x1\x45",
				"\x1\x62\x2\xFFFF\x1\x61\x3\xFFFF\x1\x55\x4\xFFFF\x1\x60\x6\xFFFF\x1"+
				"\x5A\xD\xFFFF\x1\x54\x1\xFFFF\x1\x5C\x14\xFFFF\x1\x5D\x5\xFFFF\x1\x58"+
				"\x2\xFFFF\x1\x5E\x2\xFFFF\x1\x52\x4\xFFFF\x1\x56\x2\xFFFF\x1\x59\x2"+
				"\xFFFF\x1\x57\x8\xFFFF\x1\x51\x1\xFFFF\x1\x5F\x5\xFFFF\x1\x5B\x2\xFFFF"+
				"\x1\x56\x1\xFFFF\x1\x56\x1\xFFFF\x1\x53",
				"\x1\x64\x45\xFFFF\x1\x63",
				"\x1\x66\x45\xFFFF\x1\x65",
				"\x1\x68\x45\xFFFF\x1\x67",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xC3",
				"\x1\xC5\x45\xFFFF\x1\xC4",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA83_eot = DFA.UnpackEncodedString(DFA83_eotS);
		private static readonly short[] DFA83_eof = DFA.UnpackEncodedString(DFA83_eofS);
		private static readonly char[] DFA83_min = DFA.UnpackEncodedStringToUnsignedChars(DFA83_minS);
		private static readonly char[] DFA83_max = DFA.UnpackEncodedStringToUnsignedChars(DFA83_maxS);
		private static readonly short[] DFA83_accept = DFA.UnpackEncodedString(DFA83_acceptS);
		private static readonly short[] DFA83_special = DFA.UnpackEncodedString(DFA83_specialS);
		private static readonly short[][] DFA83_transition;

		static DFA83()
		{
			int numStates = DFA83_transitionS.Length;
			DFA83_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA83_transition[i] = DFA.UnpackEncodedString(DFA83_transitionS[i]);
			}
		}

		public DFA83( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 83;
			this.eot = DFA83_eot;
			this.eof = DFA83_eof;
			this.min = DFA83_min;
			this.max = DFA83_max;
			this.accept = DFA83_accept;
			this.special = DFA83_special;
			this.transition = DFA83_transition;
		}

		public override string Description { get { return "166:7: ({...}? => ( printExpr )? | ( simpleStatement )? )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition83(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA83_1 = input.LA(1);
		int index83_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 49;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 83, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_prog913 = new BitSet(new ulong[]{0x7A2006C2024CA252UL,0xAF4D00348592UL});
		public static readonly BitSet _printExpr_in_statement931 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_statement933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_statement949 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _simpleStatement_in_statement954 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _BodyString_in_statement958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_statement968 = new BitSet(new ulong[]{0x7A2006C2024CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_statement970 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_statement972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracketedBlock_in_statement980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_statement988 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _Colon_in_statement990 = new BitSet(new ulong[]{0x7A2006C2024CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_statement992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_statement1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDefinition_in_statement1008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _complexStatement_in_statement1016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleStatement_in_statement1024 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_statement1026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_printExpr1044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_bracketedBlock1061 = new BitSet(new ulong[]{0x7A2006C2064CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_bracketedBlock1065 = new BitSet(new ulong[]{0x7A2006C2064CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _CloseCurlyBracket_in_bracketedBlock1068 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_interfaceDefinition1085 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_interfaceDefinition1089 = new BitSet(new ulong[]{0x8000000000000UL,0x100000UL});
		public static readonly BitSet _interfaceExtends_in_interfaceDefinition1091 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenCurlyBracket_in_interfaceDefinition1102 = new BitSet(new ulong[]{0x800000104000030UL,0x10000000000UL});
		public static readonly BitSet _interfaceMember_in_interfaceDefinition1112 = new BitSet(new ulong[]{0x800000104000030UL,0x10000000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_interfaceDefinition1123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_interfaceExtends1140 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_interfaceExtends1142 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Comma_in_interfaceExtends1145 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_interfaceExtends1148 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Const_in_interfaceMember1166 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_interfaceMember1168 = new BitSet(new ulong[]{0x1000000000000UL,0x1000000000UL});
		public static readonly BitSet _Equals_in_interfaceMember1171 = new BitSet(new ulong[]{0x4000020000040200UL,0x4100000080UL});
		public static readonly BitSet _atom_in_interfaceMember1173 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember1177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldModifier_in_interfaceMember1186 = new BitSet(new ulong[]{0x800000000000030UL,0x10000000000UL});
		public static readonly BitSet _Function_in_interfaceMember1189 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_interfaceMember1191 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _parametersDefinition_in_interfaceMember1193 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember1195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classModifier_in_classDefinition1214 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _Class_in_classDefinition1226 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_classDefinition1230 = new BitSet(new ulong[]{0x8000000000000UL,0x100008UL});
		public static readonly BitSet _Extends_in_classDefinition1242 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_classDefinition1246 = new BitSet(new ulong[]{0x0UL,0x100008UL});
		public static readonly BitSet _classImplements_in_classDefinition1259 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenCurlyBracket_in_classDefinition1270 = new BitSet(new ulong[]{0x800008104000030UL,0x410000000000UL});
		public static readonly BitSet _classMember_in_classDefinition1280 = new BitSet(new ulong[]{0x800008104000030UL,0x410000000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_classDefinition1291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_classImplements1314 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_classImplements1317 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Comma_in_classImplements1320 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_classImplements1323 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _fieldModifier_in_classMember1343 = new BitSet(new ulong[]{0x800000000000030UL,0x10000000000UL});
		public static readonly BitSet _Function_in_classMember1346 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_classMember1348 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _parametersDefinition_in_classMember1350 = new BitSet(new ulong[]{0x0UL,0x1000100000UL});
		public static readonly BitSet _bracketedBlock_in_classMember1362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_classMember1366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Var_in_classMember1375 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _Dollar_in_classMember1377 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_classMember1379 = new BitSet(new ulong[]{0x1000000000000UL,0x1000000000UL});
		public static readonly BitSet _Equals_in_classMember1382 = new BitSet(new ulong[]{0x4000020000040200UL,0x4100000080UL});
		public static readonly BitSet _atom_in_classMember1384 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_classMember1388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_classMember1397 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_classMember1399 = new BitSet(new ulong[]{0x1000000000000UL,0x1000000000UL});
		public static readonly BitSet _Equals_in_classMember1402 = new BitSet(new ulong[]{0x4000020000040200UL,0x4100000080UL});
		public static readonly BitSet _atom_in_classMember1404 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_classMember1408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldModifier_in_classMember1417 = new BitSet(new ulong[]{0x8000000030UL,0x10000000000UL});
		public static readonly BitSet _Dollar_in_classMember1421 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_classMember1423 = new BitSet(new ulong[]{0x1000000000000UL,0x1000000000UL});
		public static readonly BitSet _Equals_in_classMember1427 = new BitSet(new ulong[]{0x4000020000040200UL,0x4100000080UL});
		public static readonly BitSet _atom_in_classMember1429 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_classMember1433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Dollar_in_fieldDefinition1451 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_fieldDefinition1453 = new BitSet(new ulong[]{0x1000000000000UL,0x1000000000UL});
		public static readonly BitSet _Equals_in_fieldDefinition1456 = new BitSet(new ulong[]{0x4000020000040200UL,0x4100000080UL});
		public static readonly BitSet _atom_in_fieldDefinition1458 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_fieldDefinition1462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_classModifier1483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_complexStatement1526 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1528 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_complexStatement1532 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1534 = new BitSet(new ulong[]{0x7A2006C2024CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_complexStatement1538 = new BitSet(new ulong[]{0x180000000002UL});
		public static readonly BitSet _conditional_in_complexStatement1540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_complexStatement1549 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1551 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A5100248490UL});
		public static readonly BitSet _forInit_in_complexStatement1553 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A5100248490UL});
		public static readonly BitSet _forCondition_in_complexStatement1555 = new BitSet(new ulong[]{0x400002800A042240UL,0x2A4100248490UL});
		public static readonly BitSet _forUpdate_in_complexStatement1557 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1559 = new BitSet(new ulong[]{0x7A2006C2024CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_complexStatement1561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_complexStatement1569 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1571 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _variable_in_complexStatement1573 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_complexStatement1575 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _arrayEntry_in_complexStatement1577 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1579 = new BitSet(new ulong[]{0x7A2006C2024CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_complexStatement1581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_complexStatement1589 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1591 = new BitSet(new ulong[]{0x400002800A042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_complexStatement1595 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1598 = new BitSet(new ulong[]{0x7A2006C2024CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_complexStatement1600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Do_in_complexStatement1608 = new BitSet(new ulong[]{0x7A2006C2024CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_complexStatement1610 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _While_in_complexStatement1612 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1614 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_complexStatement1618 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1620 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_complexStatement1622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_complexStatement1630 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1632 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_complexStatement1634 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1636 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenCurlyBracket_in_complexStatement1638 = new BitSet(new ulong[]{0x1000100000UL});
		public static readonly BitSet _cases_in_complexStatement1639 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_complexStatement1640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDefinition_in_complexStatement1648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_simpleStatement1665 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _commaList_in_simpleStatement1667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_simpleStatement1675 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _name_in_simpleStatement1677 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Comma_in_simpleStatement1680 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _name_in_simpleStatement1683 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Static_in_simpleStatement1693 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _variable_in_simpleStatement1695 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _Equals_in_simpleStatement1697 = new BitSet(new ulong[]{0x4000020000040200UL,0x4100000080UL});
		public static readonly BitSet _atom_in_simpleStatement1700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_simpleStatement1708 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _Integer_in_simpleStatement1710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_simpleStatement1719 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _Integer_in_simpleStatement1721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_simpleStatement1730 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_simpleStatement1732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_simpleStatement1740 = new BitSet(new ulong[]{0x4000028002042242UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_simpleStatement1742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RequireOperator_in_simpleStatement1751 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_simpleStatement1753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_simpleStatement1761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_conditional1779 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_conditional1781 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_conditional1785 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_conditional1787 = new BitSet(new ulong[]{0x7A2006C2024CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_conditional1791 = new BitSet(new ulong[]{0x180000000002UL});
		public static readonly BitSet _conditional_in_conditional1793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_conditional1802 = new BitSet(new ulong[]{0x7A2006C2024CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_conditional1804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forInit1821 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_forInit1824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forCondition1841 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_forCondition1844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forUpdate1865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _casestatement_in_cases1884 = new BitSet(new ulong[]{0x1000100000UL});
		public static readonly BitSet _defaultcase_in_cases1888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Case_in_casestatement1905 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_casestatement1907 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _Colon_in_casestatement1909 = new BitSet(new ulong[]{0x7A2006C2024CA252UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_casestatement1912 = new BitSet(new ulong[]{0x7A2006C2024CA252UL,0xAF4D00348592UL});
		public static readonly BitSet _Default_in_defaultcase1932 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _Colon_in_defaultcase1934 = new BitSet(new ulong[]{0x7A2006C2024CA252UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_defaultcase1937 = new BitSet(new ulong[]{0x7A2006C2024CA252UL,0xAF4D00348592UL});
		public static readonly BitSet _Function_in_functionDefinition1956 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_functionDefinition1958 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _parametersDefinition_in_functionDefinition1960 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _bracketedBlock_in_functionDefinition1962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_parametersDefinition1979 = new BitSet(new ulong[]{0x8008000040UL});
		public static readonly BitSet _paramDef_in_parametersDefinition1982 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _Comma_in_parametersDefinition1985 = new BitSet(new ulong[]{0x8000000040UL});
		public static readonly BitSet _paramDef_in_parametersDefinition1987 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _CloseRoundBracket_in_parametersDefinition1993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _paramName_in_paramDef2010 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _Equals_in_paramDef2013 = new BitSet(new ulong[]{0x4000020000040200UL,0x4100000080UL});
		public static readonly BitSet _atom_in_paramDef2015 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Dollar_in_paramName2034 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_paramName2036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_paramName2044 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _Dollar_in_paramName2046 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_paramName2048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_commaList2065 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Comma_in_commaList2068 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_commaList2071 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _weakLogicalOr_in_expression2095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr2112 = new BitSet(new ulong[]{0x2UL,0x800000UL});
		public static readonly BitSet _Or_in_weakLogicalOr2115 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr2117 = new BitSet(new ulong[]{0x2UL,0x800000UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor2136 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _Xor_in_weakLogicalXor2139 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor2141 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd2164 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _And_in_weakLogicalAnd2167 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd2169 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _listVariables_in_assignment2188 = new BitSet(new ulong[]{0x1000000000800UL});
		public static readonly BitSet _set_in_assignment2191 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _assignment_in_assignment2199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ternary_in_assignment2209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_listVariables2226 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_listVariables2228 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _name_in_listVariables2231 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _Comma_in_listVariables2234 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _name_in_listVariables2237 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _CloseRoundBracket_in_listVariables2241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_listVariables2251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary2268 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _QuestionMark_in_ternary2270 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_ternary2272 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _Colon_in_ternary2274 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_ternary2276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary2284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAnd_in_logicalOr2305 = new BitSet(new ulong[]{0x2UL,0x1000UL});
		public static readonly BitSet _LogicalOr_in_logicalOr2308 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248090UL});
		public static readonly BitSet _logicalAnd_in_logicalOr2310 = new BitSet(new ulong[]{0x2UL,0x1000UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd2329 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _LogicalAnd_in_logicalAnd2332 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248090UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd2334 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseOr2357 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _Pipe_in_bitwiseOr2360 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248090UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseOr2362 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd2381 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _Ampersand_in_bitWiseAnd2384 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248090UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd2386 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck2405 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _EqualityOperator_in_equalityCheck2408 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248090UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck2410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck2433 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _ComparisionOperator_in_comparisionCheck2436 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248090UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck2438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addition_in_bitWiseShift2457 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _ShiftOperator_in_bitWiseShift2460 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248090UL});
		public static readonly BitSet _addition_in_bitWiseShift2462 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _multiplication_in_addition2485 = new BitSet(new ulong[]{0x10000000002UL,0x8008000UL});
		public static readonly BitSet _set_in_addition2488 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248090UL});
		public static readonly BitSet _multiplication_in_addition2500 = new BitSet(new ulong[]{0x10000000002UL,0x8008000UL});
		public static readonly BitSet _logicalNot_in_multiplication2519 = new BitSet(new ulong[]{0x400000000001002UL,0x2000000UL});
		public static readonly BitSet _set_in_multiplication2522 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248090UL});
		public static readonly BitSet _logicalNot_in_multiplication2534 = new BitSet(new ulong[]{0x400000000001002UL,0x2000000UL});
		public static readonly BitSet _Bang_in_logicalNot2553 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248090UL});
		public static readonly BitSet _logicalNot_in_logicalNot2555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _instanceOf_in_logicalNot2563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _negateOrCast_in_instanceOf2580 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _Instanceof_in_instanceOf2583 = new BitSet(new ulong[]{0x4000028002040240UL,0x2A4100248090UL});
		public static readonly BitSet _negateOrCast_in_instanceOf2585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_negateOrCast2604 = new BitSet(new ulong[]{0x4000028002040240UL,0x204100040090UL});
		public static readonly BitSet _increment_in_negateOrCast2616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_negateOrCast2624 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _PrimitiveType_in_negateOrCast2626 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_negateOrCast2628 = new BitSet(new ulong[]{0x4000028002040240UL,0x204100040090UL});
		public static readonly BitSet _increment_in_negateOrCast2630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_negateOrCast2638 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _weakLogicalAnd_in_negateOrCast2641 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_negateOrCast2643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _increment_in_negateOrCast2652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncrementOperator_in_increment2669 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _name_in_increment2671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_increment2679 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _IncrementOperator_in_increment2681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newOrClone_in_increment2689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_newOrClone2706 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _nameOrFunctionCall_in_newOrClone2708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_newOrClone2716 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _name_in_newOrClone2718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atomOrReference_in_newOrClone2726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_atomOrReference2743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _reference_in_atomOrReference2751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Array_in_arrayDeclaration2768 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_arrayDeclaration2770 = new BitSet(new ulong[]{0x400002800A042240UL,0x2A4100248490UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2773 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2776 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2778 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _CloseRoundBracket_in_arrayDeclaration2784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_arrayEntry2802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_arrayEntry2806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_keyValuePair2825 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ArrayAssign_in_keyValuePair2827 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_keyValuePair2829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SingleQuotedString_in_atom2842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleQuotedString_in_atom2846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HereDoc_in_atom2850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Integer_in_atom2854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Real_in_atom2858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Boolean_in_atom2862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaration_in_atom2866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_reference2884 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _nameOrFunctionCall_in_reference2886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameOrFunctionCall_in_reference2894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_nameOrFunctionCall2911 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_nameOrFunctionCall2913 = new BitSet(new ulong[]{0x400002800A042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_nameOrFunctionCall2916 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _Comma_in_nameOrFunctionCall2919 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_nameOrFunctionCall2921 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _CloseRoundBracket_in_nameOrFunctionCall2927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_nameOrFunctionCall2935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _staticMemberAccess_in_name2947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_name2955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_name2963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_staticMemberAccess2984 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ClassMember_in_staticMemberAccess2986 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _variable_in_staticMemberAccess2988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_memberAccess3005 = new BitSet(new ulong[]{0x2UL,0x400020UL});
		public static readonly BitSet _OpenSquareBracket_in_memberAccess3018 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_memberAccess3020 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _CloseSquareBracket_in_memberAccess3022 = new BitSet(new ulong[]{0x2UL,0x400020UL});
		public static readonly BitSet _InstanceMember_in_memberAccess3035 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_memberAccess3037 = new BitSet(new ulong[]{0x2UL,0x400020UL});
		public static readonly BitSet _Dollar_in_variable3060 = new BitSet(new ulong[]{0x8000000000UL,0x200000000000UL});
		public static readonly BitSet _variable_in_variable3062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_variable3070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred1_Php913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred2_Php931 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _SemiColon_in_synpred2_Php933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred4_Php949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred6_Php949 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _simpleStatement_in_synpred6_Php954 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _BodyString_in_synpred6_Php958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_synpred7_Php968 = new BitSet(new ulong[]{0x7A2006C2024CA250UL,0xAF4D00348592UL});
		public static readonly BitSet _statement_in_synpred7_Php970 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_synpred7_Php972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracketedBlock_in_synpred8_Php980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred13_Php1065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldModifier_in_synpred27_Php1343 = new BitSet(new ulong[]{0x800000000000030UL,0x10000000000UL});
		public static readonly BitSet _Function_in_synpred27_Php1346 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _UnquotedString_in_synpred27_Php1348 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _parametersDefinition_in_synpred27_Php1350 = new BitSet(new ulong[]{0x0UL,0x1000100000UL});
		public static readonly BitSet _bracketedBlock_in_synpred27_Php1362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_synpred27_Php1366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred37_Php1540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred57_Php1793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred63_Php1912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred64_Php1937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_synpred70_Php2115 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _weakLogicalXor_in_synpred70_Php2117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_synpred71_Php2139 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _weakLogicalAnd_in_synpred71_Php2141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_synpred72_Php2167 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _assignment_in_synpred72_Php2169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_synpred74_Php2188 = new BitSet(new ulong[]{0x1000000000800UL});
		public static readonly BitSet _set_in_synpred74_Php2191 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _assignment_in_synpred74_Php2199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_synpred77_Php2268 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _QuestionMark_in_synpred77_Php2270 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_synpred77_Php2272 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _Colon_in_synpred77_Php2274 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_synpred77_Php2276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred99_Php2679 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _IncrementOperator_in_synpred99_Php2681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_synpred105_Php2802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred115_Php2911 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred115_Php2913 = new BitSet(new ulong[]{0x400002800A042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_synpred115_Php2916 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _Comma_in_synpred115_Php2919 = new BitSet(new ulong[]{0x4000028002042240UL,0x2A4100248490UL});
		public static readonly BitSet _expression_in_synpred115_Php2921 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred115_Php2927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred117_Php2955 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
