using Code2Xml.Languages.ANTLRv3.Core;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g 2014-01-03 15:58:03

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PhpParser : Antlr.Runtime.Parser, ICustomizedAntlr3Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Abstract", "Ampersand", "And", "ArrayAssign", "ArrayType", "As", "AsignmentOperator", "Asterisk", "Bang", "BodyString", "BodyStringRest", "BodyStringRestShortTag", "BoolType", "BooleanType", "Break", "Case", "Catch", "Class", "ClassMember", "Clone", "CloseCurlyBracket", "CloseRoundBracket", "CloseSquareBracket", "Colon", "Comma", "ComparisionOperator", "Const", "Continue", "DNum", "Decimal", "Default", "Die", "Digits", "Do", "Dot", "DoubleQuotedString", "DoubleType", "Echo", "Else", "ElseIf", "Empty", "Eol", "EqualityOperator", "Equals", "EscapeCharector", "Eval", "Exit", "Exponent_DNum", "Extends", "False", "Finally", "FloatType", "For", "Foreach", "Forwardslash", "Function", "Global", "Goto", "HaltCompiler", "Hat", "HereDoc", "HereDocContents", "Hexadecimal", "If", "Implements", "Include", "IncludeOnce", "IncrementOperator", "InstanceMember", "Instanceof", "IntType", "Integer", "IntegerType", "Interface", "Isset", "List", "LogicalAnd", "LogicalOr", "Minus", "MultilineComment", "Namespace", "New", "Null", "OP", "ObjectType", "Octal", "OpenCurlyBracket", "OpenRoundBracket", "OpenSquareBracket", "Or", "Percent", "Pipe", "Plus", "Private", "Protected", "Public", "QuestionMark", "Real", "RealType", "Require", "RequireOnce", "Return", "SemiColon", "ShiftOperator", "SingleQuotedString", "SinglelineComment", "Static", "StringType", "SuppressWarnings", "Switch", "Throw", "Tilde", "True", "Try", "UnixComment", "UnquotedString", "UnquotedStringBody", "UnsetType", "Use", "Var", "VariableName", "While", "WhiteSpace", "Xor", "'$'", "'\\\\'"
	};
	public const int EOF=-1;
	public const int Abstract=4;
	public const int Ampersand=5;
	public const int And=6;
	public const int ArrayAssign=7;
	public const int ArrayType=8;
	public const int As=9;
	public const int AsignmentOperator=10;
	public const int Asterisk=11;
	public const int Bang=12;
	public const int BodyString=13;
	public const int BodyStringRest=14;
	public const int BodyStringRestShortTag=15;
	public const int BoolType=16;
	public const int BooleanType=17;
	public const int Break=18;
	public const int Case=19;
	public const int Catch=20;
	public const int Class=21;
	public const int ClassMember=22;
	public const int Clone=23;
	public const int CloseCurlyBracket=24;
	public const int CloseRoundBracket=25;
	public const int CloseSquareBracket=26;
	public const int Colon=27;
	public const int Comma=28;
	public const int ComparisionOperator=29;
	public const int Const=30;
	public const int Continue=31;
	public const int DNum=32;
	public const int Decimal=33;
	public const int Default=34;
	public const int Die=35;
	public const int Digits=36;
	public const int Do=37;
	public const int Dot=38;
	public const int DoubleQuotedString=39;
	public const int DoubleType=40;
	public const int Echo=41;
	public const int Else=42;
	public const int ElseIf=43;
	public const int Empty=44;
	public const int Eol=45;
	public const int EqualityOperator=46;
	public const int Equals=47;
	public const int EscapeCharector=48;
	public const int Eval=49;
	public const int Exit=50;
	public const int Exponent_DNum=51;
	public const int Extends=52;
	public const int False=53;
	public const int Finally=54;
	public const int FloatType=55;
	public const int For=56;
	public const int Foreach=57;
	public const int Forwardslash=58;
	public const int Function=59;
	public const int Global=60;
	public const int Goto=61;
	public const int HaltCompiler=62;
	public const int Hat=63;
	public const int HereDoc=64;
	public const int HereDocContents=65;
	public const int Hexadecimal=66;
	public const int If=67;
	public const int Implements=68;
	public const int Include=69;
	public const int IncludeOnce=70;
	public const int IncrementOperator=71;
	public const int InstanceMember=72;
	public const int Instanceof=73;
	public const int IntType=74;
	public const int Integer=75;
	public const int IntegerType=76;
	public const int Interface=77;
	public const int Isset=78;
	public const int List=79;
	public const int LogicalAnd=80;
	public const int LogicalOr=81;
	public const int Minus=82;
	public const int MultilineComment=83;
	public const int Namespace=84;
	public const int New=85;
	public const int Null=86;
	public const int OP=87;
	public const int ObjectType=88;
	public const int Octal=89;
	public const int OpenCurlyBracket=90;
	public const int OpenRoundBracket=91;
	public const int OpenSquareBracket=92;
	public const int Or=93;
	public const int Percent=94;
	public const int Pipe=95;
	public const int Plus=96;
	public const int Private=97;
	public const int Protected=98;
	public const int Public=99;
	public const int QuestionMark=100;
	public const int Real=101;
	public const int RealType=102;
	public const int Require=103;
	public const int RequireOnce=104;
	public const int Return=105;
	public const int SemiColon=106;
	public const int ShiftOperator=107;
	public const int SingleQuotedString=108;
	public const int SinglelineComment=109;
	public const int Static=110;
	public const int StringType=111;
	public const int SuppressWarnings=112;
	public const int Switch=113;
	public const int Throw=114;
	public const int Tilde=115;
	public const int True=116;
	public const int Try=117;
	public const int UnixComment=118;
	public const int UnquotedString=119;
	public const int UnquotedStringBody=120;
	public const int UnsetType=121;
	public const int Use=122;
	public const int Var=123;
	public const int VariableName=124;
	public const int While=125;
	public const int WhiteSpace=126;
	public const int Xor=127;
	public const int T__128=128;
	public const int T__129=129;

	public PhpParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public PhpParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[387+1];


		Antlr3AstBuilder treeAdaptor = default(Antlr3AstBuilder);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new Antlr3AstBuilder();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref Antlr3AstBuilder adaptor);

	private Antlr3AstBuilder adaptor;

	public Antlr3AstBuilder TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return PhpParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g"; } }


		private bool expressionFollowsBodyString = false;


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:87:1: public prog : ( BodyString namespaceDefinition )? ( useStatement | statement )* ;
	[GrammarRule("prog")]
	public Antlr3AstNode prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		var retval = new Antlr3AstNode("prog");
		
		retval.Start = (IToken)input.LT(1);
		int prog_StartIndex = input.Index;

		object root_0 = default(object);

		IToken BodyString1 = default(IToken);
		Antlr3AstNode namespaceDefinition2 = default(Antlr3AstNode);
		Antlr3AstNode useStatement3 = default(Antlr3AstNode);
		Antlr3AstNode statement4 = default(Antlr3AstNode);

		object BodyString1_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(87, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:87:6: ( ( BodyString namespaceDefinition )? ( useStatement | statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:88:2: ( BodyString namespaceDefinition )? ( useStatement | statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(88, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:88:2: ( BodyString namespaceDefinition )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			try
			{
				alt1 = dfa1.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:88:3: BodyString namespaceDefinition
				{
				DebugLocation(88, 3);
				BodyString1=(IToken)Match(input,BodyString,Follow._BodyString_in_prog326); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BodyString1_tree = (object)adaptor.Create(BodyString1, "BodyString1", retval);
				adaptor.AddChild(root_0, BodyString1_tree);
				}
				DebugLocation(88, 14);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString = (BodyString1!=null?BodyString1.Text:default(string)).endsWith("<?=");
				}
				DebugLocation(88, 80);
				PushFollow(Follow._namespaceDefinition_in_prog330);
				namespaceDefinition2=namespaceDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespaceDefinition2.Tree, namespaceDefinition2, "namespaceDefinition2", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(89, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:89:2: ( useStatement | statement )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=3;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==Use))
				{
					alt2 = 1;
				}
				else if (((LA2_1>=Abstract && LA2_1<=Ampersand)||LA2_1==ArrayType||(LA2_1>=Bang && LA2_1<=BodyString)||(LA2_1>=BoolType && LA2_1<=Break)||LA2_1==Class||LA2_1==Clone||(LA2_1>=Const && LA2_1<=Continue)||LA2_1==Die||LA2_1==Do||(LA2_1>=DoubleQuotedString && LA2_1<=Echo)||LA2_1==Empty||(LA2_1>=Eval && LA2_1<=Exit)||LA2_1==False||(LA2_1>=FloatType && LA2_1<=Foreach)||(LA2_1>=Function && LA2_1<=HaltCompiler)||LA2_1==HereDoc||LA2_1==If||(LA2_1>=Include && LA2_1<=IncrementOperator)||(LA2_1>=IntType && LA2_1<=List)||LA2_1==Minus||(LA2_1>=Namespace && LA2_1<=Null)||LA2_1==ObjectType||(LA2_1>=OpenCurlyBracket && LA2_1<=OpenSquareBracket)||LA2_1==Plus||(LA2_1>=Real && LA2_1<=SemiColon)||LA2_1==SingleQuotedString||(LA2_1>=Static && LA2_1<=Try)||LA2_1==UnquotedString||LA2_1==UnsetType||(LA2_1>=VariableName && LA2_1<=While)||(LA2_1>=128 && LA2_1<=129)))
				{
					alt2 = 2;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:89:3: useStatement
					{
					DebugLocation(89, 3);
					PushFollow(Follow._useStatement_in_prog336);
					useStatement3=useStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, useStatement3.Tree, useStatement3, "useStatement3", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:89:18: statement
					{
					DebugLocation(89, 18);
					PushFollow(Follow._statement_in_prog340);
					statement4=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement4.Tree, statement4, "statement4", retval);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
			if (state.backtracking > 0) { Memoize(input, 1, prog_StartIndex); }

		}
		DebugLocation(89, 28);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_qualifiedNameWithAs();
	partial void LeaveRule_qualifiedNameWithAs();
	// $ANTLR start "qualifiedNameWithAs"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:91:1: qualifiedNameWithAs : qualifiedName ( As UnquotedString )? ;
	[GrammarRule("qualifiedNameWithAs")]
	private Antlr3AstNode qualifiedNameWithAs()
	{
		EnterRule_qualifiedNameWithAs();
		EnterRule("qualifiedNameWithAs", 2);
		var retval = new Antlr3AstNode("qualifiedNameWithAs");
		
		retval.Start = (IToken)input.LT(1);
		int qualifiedNameWithAs_StartIndex = input.Index;

		object root_0 = default(object);

		IToken As6 = default(IToken);
		IToken UnquotedString7 = default(IToken);
		Antlr3AstNode qualifiedName5 = default(Antlr3AstNode);

		object As6_tree = default(object);
		object UnquotedString7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedNameWithAs");
		DebugLocation(91, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:92:2: ( qualifiedName ( As UnquotedString )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:92:4: qualifiedName ( As UnquotedString )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(92, 4);
			PushFollow(Follow._qualifiedName_in_qualifiedNameWithAs351);
			qualifiedName5=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName5.Tree, qualifiedName5, "qualifiedName5", retval);
			DebugLocation(92, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:92:18: ( As UnquotedString )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==As))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:92:19: As UnquotedString
				{
				DebugLocation(92, 19);
				As6=(IToken)Match(input,As,Follow._As_in_qualifiedNameWithAs354); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As6_tree = (object)adaptor.Create(As6, "As6", retval);
				adaptor.AddChild(root_0, As6_tree);
				}
				DebugLocation(92, 22);
				UnquotedString7=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_qualifiedNameWithAs356); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString7_tree = (object)adaptor.Create(UnquotedString7, "UnquotedString7", retval);
				adaptor.AddChild(root_0, UnquotedString7_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedNameWithAs", 2);
			LeaveRule("qualifiedNameWithAs", 2);
			LeaveRule_qualifiedNameWithAs();
			if (state.backtracking > 0) { Memoize(input, 2, qualifiedNameWithAs_StartIndex); }

		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "qualifiedNameWithAs"); }
		return retval;

	}
	// $ANTLR end "qualifiedNameWithAs"

	partial void EnterRule_useStatement();
	partial void LeaveRule_useStatement();
	// $ANTLR start "useStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:95:1: useStatement : Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';' ;
	[GrammarRule("useStatement")]
	private Antlr3AstNode useStatement()
	{
		EnterRule_useStatement();
		EnterRule("useStatement", 3);
		var retval = new Antlr3AstNode("useStatement");
		
		retval.Start = (IToken)input.LT(1);
		int useStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Use8 = default(IToken);
		IToken char_literal10 = default(IToken);
		IToken char_literal12 = default(IToken);
		Antlr3AstNode qualifiedNameWithAs9 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedNameWithAs11 = default(Antlr3AstNode);

		object Use8_tree = default(object);
		object char_literal10_tree = default(object);
		object char_literal12_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "useStatement");
		DebugLocation(95, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:96:2: ( Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:96:4: Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(96, 4);
			Use8=(IToken)Match(input,Use,Follow._Use_in_useStatement369); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Use8_tree = (object)adaptor.Create(Use8, "Use8", retval);
			adaptor.AddChild(root_0, Use8_tree);
			}
			DebugLocation(96, 8);
			PushFollow(Follow._qualifiedNameWithAs_in_useStatement371);
			qualifiedNameWithAs9=qualifiedNameWithAs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameWithAs9.Tree, qualifiedNameWithAs9, "qualifiedNameWithAs9", retval);
			DebugLocation(96, 28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:96:28: ( ',' qualifiedNameWithAs )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==Comma))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:96:29: ',' qualifiedNameWithAs
					{
					DebugLocation(96, 29);
					char_literal10=(IToken)Match(input,Comma,Follow._Comma_in_useStatement374); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal10_tree = (object)adaptor.Create(char_literal10, "char_literal10", retval);
					adaptor.AddChild(root_0, char_literal10_tree);
					}
					DebugLocation(96, 33);
					PushFollow(Follow._qualifiedNameWithAs_in_useStatement376);
					qualifiedNameWithAs11=qualifiedNameWithAs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameWithAs11.Tree, qualifiedNameWithAs11, "qualifiedNameWithAs11", retval);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(96, 55);
			char_literal12=(IToken)Match(input,SemiColon,Follow._SemiColon_in_useStatement380); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal12_tree = (object)adaptor.Create(char_literal12, "char_literal12", retval);
			adaptor.AddChild(root_0, char_literal12_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("useStatement", 3);
			LeaveRule("useStatement", 3);
			LeaveRule_useStatement();
			if (state.backtracking > 0) { Memoize(input, 3, useStatement_StartIndex); }

		}
		DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "useStatement"); }
		return retval;

	}
	// $ANTLR end "useStatement"

	partial void EnterRule_namespaceDefinition();
	partial void LeaveRule_namespaceDefinition();
	// $ANTLR start "namespaceDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:99:1: namespaceDefinition : Namespace qualifiedName ';' ;
	[GrammarRule("namespaceDefinition")]
	private Antlr3AstNode namespaceDefinition()
	{
		EnterRule_namespaceDefinition();
		EnterRule("namespaceDefinition", 4);
		var retval = new Antlr3AstNode("namespaceDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int namespaceDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Namespace13 = default(IToken);
		IToken char_literal15 = default(IToken);
		Antlr3AstNode qualifiedName14 = default(Antlr3AstNode);

		object Namespace13_tree = default(object);
		object char_literal15_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespaceDefinition");
		DebugLocation(99, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:100:2: ( Namespace qualifiedName ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:100:4: Namespace qualifiedName ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(100, 4);
			Namespace13=(IToken)Match(input,Namespace,Follow._Namespace_in_namespaceDefinition391); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Namespace13_tree = (object)adaptor.Create(Namespace13, "Namespace13", retval);
			adaptor.AddChild(root_0, Namespace13_tree);
			}
			DebugLocation(100, 14);
			PushFollow(Follow._qualifiedName_in_namespaceDefinition393);
			qualifiedName14=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName14.Tree, qualifiedName14, "qualifiedName14", retval);
			DebugLocation(100, 28);
			char_literal15=(IToken)Match(input,SemiColon,Follow._SemiColon_in_namespaceDefinition395); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal15_tree = (object)adaptor.Create(char_literal15, "char_literal15", retval);
			adaptor.AddChild(root_0, char_literal15_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespaceDefinition", 4);
			LeaveRule("namespaceDefinition", 4);
			LeaveRule_namespaceDefinition();
			if (state.backtracking > 0) { Memoize(input, 4, namespaceDefinition_StartIndex); }

		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceDefinition"); }
		return retval;

	}
	// $ANTLR end "namespaceDefinition"

	partial void EnterRule_namespaceBlock();
	partial void LeaveRule_namespaceBlock();
	// $ANTLR start "namespaceBlock"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:103:1: namespaceBlock : Namespace qualifiedName bracketedBlock ;
	[GrammarRule("namespaceBlock")]
	private Antlr3AstNode namespaceBlock()
	{
		EnterRule_namespaceBlock();
		EnterRule("namespaceBlock", 5);
		var retval = new Antlr3AstNode("namespaceBlock");
		
		retval.Start = (IToken)input.LT(1);
		int namespaceBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Namespace16 = default(IToken);
		Antlr3AstNode qualifiedName17 = default(Antlr3AstNode);
		Antlr3AstNode bracketedBlock18 = default(Antlr3AstNode);

		object Namespace16_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespaceBlock");
		DebugLocation(103, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:104:2: ( Namespace qualifiedName bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:104:4: Namespace qualifiedName bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(104, 4);
			Namespace16=(IToken)Match(input,Namespace,Follow._Namespace_in_namespaceBlock406); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Namespace16_tree = (object)adaptor.Create(Namespace16, "Namespace16", retval);
			adaptor.AddChild(root_0, Namespace16_tree);
			}
			DebugLocation(104, 14);
			PushFollow(Follow._qualifiedName_in_namespaceBlock408);
			qualifiedName17=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName17.Tree, qualifiedName17, "qualifiedName17", retval);
			DebugLocation(104, 28);
			PushFollow(Follow._bracketedBlock_in_namespaceBlock410);
			bracketedBlock18=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock18.Tree, bracketedBlock18, "bracketedBlock18", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespaceBlock", 5);
			LeaveRule("namespaceBlock", 5);
			LeaveRule_namespaceBlock();
			if (state.backtracking > 0) { Memoize(input, 5, namespaceBlock_StartIndex); }

		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceBlock"); }
		return retval;

	}
	// $ANTLR end "namespaceBlock"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:107:1: statement : ({...}? => printExpr ';' | ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | namespaceBlock | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | ( simpleStatement )? ';' );
	[GrammarRule("statement")]
	private Antlr3AstNode statement()
	{
		EnterRule_statement();
		EnterRule("statement", 6);
		var retval = new Antlr3AstNode("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal20 = default(IToken);
		IToken BodyString23 = default(IToken);
		IToken UnquotedString26 = default(IToken);
		IToken Colon27 = default(IToken);
		IToken char_literal33 = default(IToken);
		Antlr3AstNode printExpr19 = default(Antlr3AstNode);
		Antlr3AstNode printExpr21 = default(Antlr3AstNode);
		Antlr3AstNode simpleStatement22 = default(Antlr3AstNode);
		Antlr3AstNode namespaceBlock24 = default(Antlr3AstNode);
		Antlr3AstNode bracketedBlock25 = default(Antlr3AstNode);
		Antlr3AstNode statement28 = default(Antlr3AstNode);
		Antlr3AstNode classDefinition29 = default(Antlr3AstNode);
		Antlr3AstNode interfaceDefinition30 = default(Antlr3AstNode);
		Antlr3AstNode complexStatement31 = default(Antlr3AstNode);
		Antlr3AstNode simpleStatement32 = default(Antlr3AstNode);

		object char_literal20_tree = default(object);
		object BodyString23_tree = default(object);
		object UnquotedString26_tree = default(object);
		object Colon27_tree = default(object);
		object char_literal33_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(107, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:108:2: ({...}? => printExpr ';' | ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | namespaceBlock | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | ( simpleStatement )? ';' )
			int alt9=9;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Static:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Bang:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((EvaluatePredicate(synpred16_Php_fragment)))
				{
					alt9 = 8;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BodyString:
				{
				alt9 = 2;
				}
				break;
			case Echo:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 28, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Global:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 29, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnquotedString:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((EvaluatePredicate(synpred13_Php_fragment)))
				{
					alt9 = 5;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 30, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Const:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 31, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Break:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 32, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Continue:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 33, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Goto:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 34, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Return:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 35, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Throw:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 36, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Namespace:
				{
				alt9 = 3;
				}
				break;
			case OpenCurlyBracket:
				{
				alt9 = 4;
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case StringType:
				{
				int LA9_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt9 = 2;
				}
				else if ((true))
				{
					alt9 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 39, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case Class:
				{
				alt9 = 6;
				}
				break;
			case Interface:
				{
				alt9 = 7;
				}
				break;
			case Do:
			case For:
			case Foreach:
			case If:
			case Switch:
			case Try:
			case While:
				{
				alt9 = 8;
				}
				break;
			case SemiColon:
				{
				alt9 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:108:4: {...}? => printExpr ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(108, 4);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
				}
				DebugLocation(108, 37);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString=false;
				}
				DebugLocation(108, 74);
				PushFollow(Follow._printExpr_in_statement426);
				printExpr19=printExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr19.Tree, printExpr19, "printExpr19", retval);
				DebugLocation(108, 84);
				char_literal20=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement428); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal20_tree = (object)adaptor.Create(char_literal20, "char_literal20", retval);
				adaptor.AddChild(root_0, char_literal20_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:4: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(109, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:4: ({...}? => ( printExpr )? | ( simpleStatement )? )
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				switch (input.LA(1))
				{
				case List:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case VariableName:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 128:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 129:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Static:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 5, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Bang:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 6, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Minus:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 7, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenRoundBracket:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 8, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IncrementOperator:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 9, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case New:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 10, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Clone:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 11, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Ampersand:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 12, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Die:
				case Empty:
				case Eval:
				case Exit:
				case HaltCompiler:
				case Isset:
				case UnsetType:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 13, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Function:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 14, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case SingleQuotedString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 15, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case DoubleQuotedString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 16, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case HereDoc:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 17, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case SuppressWarnings:
				case Tilde:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 18, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Plus:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 19, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Integer:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 20, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Real:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 21, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case False:
				case True:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 22, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Null:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 23, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case ArrayType:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 24, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenSquareBracket:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 25, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Include:
				case IncludeOnce:
				case Require:
				case RequireOnce:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 26, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BodyString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 27, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Break:
				case Const:
				case Continue:
				case Echo:
				case Global:
				case Goto:
				case Return:
				case Throw:
					{
					alt7 = 2;
					}
					break;
				case BoolType:
				case BooleanType:
				case DoubleType:
				case FloatType:
				case IntType:
				case IntegerType:
				case ObjectType:
				case RealType:
				case StringType:
				case UnquotedString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 30, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:6: {...}? => ( printExpr )?
					{
					DebugLocation(109, 6);
					if (!((expressionFollowsBodyString)))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
					}
					DebugLocation(109, 40);
					if (state.backtracking == 0)
					{
						expressionFollowsBodyString=false;
					}
					DebugLocation(109, 77);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:77: ( printExpr )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if ((LA5_1==Ampersand||LA5_1==ArrayType||LA5_1==Bang||(LA5_1>=BoolType && LA5_1<=BooleanType)||LA5_1==Clone||LA5_1==Die||(LA5_1>=DoubleQuotedString && LA5_1<=DoubleType)||LA5_1==Empty||(LA5_1>=Eval && LA5_1<=Exit)||LA5_1==False||LA5_1==FloatType||LA5_1==Function||LA5_1==HaltCompiler||LA5_1==HereDoc||(LA5_1>=Include && LA5_1<=IncrementOperator)||(LA5_1>=IntType && LA5_1<=IntegerType)||(LA5_1>=Isset && LA5_1<=List)||LA5_1==Minus||(LA5_1>=New && LA5_1<=Null)||LA5_1==ObjectType||(LA5_1>=OpenRoundBracket && LA5_1<=OpenSquareBracket)||LA5_1==Plus||(LA5_1>=Real && LA5_1<=RequireOnce)||LA5_1==SingleQuotedString||(LA5_1>=Static && LA5_1<=SuppressWarnings)||(LA5_1>=Tilde && LA5_1<=True)||LA5_1==UnquotedString||LA5_1==UnsetType||LA5_1==VariableName||(LA5_1>=128 && LA5_1<=129)))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:77: printExpr
						{
						DebugLocation(109, 77);
						PushFollow(Follow._printExpr_in_statement441);
						printExpr21=printExpr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr21.Tree, printExpr21, "printExpr21", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(5); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:90: ( simpleStatement )?
					{
					DebugLocation(109, 90);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:90: ( simpleStatement )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if ((LA6_1==Ampersand||LA6_1==ArrayType||LA6_1==Bang||(LA6_1>=BoolType && LA6_1<=Break)||LA6_1==Clone||(LA6_1>=Const && LA6_1<=Continue)||LA6_1==Die||(LA6_1>=DoubleQuotedString && LA6_1<=Echo)||LA6_1==Empty||(LA6_1>=Eval && LA6_1<=Exit)||LA6_1==False||LA6_1==FloatType||(LA6_1>=Function && LA6_1<=HaltCompiler)||LA6_1==HereDoc||(LA6_1>=Include && LA6_1<=IncrementOperator)||(LA6_1>=IntType && LA6_1<=IntegerType)||(LA6_1>=Isset && LA6_1<=List)||LA6_1==Minus||(LA6_1>=New && LA6_1<=Null)||LA6_1==ObjectType||(LA6_1>=OpenRoundBracket && LA6_1<=OpenSquareBracket)||LA6_1==Plus||(LA6_1>=Real && LA6_1<=Return)||LA6_1==SingleQuotedString||(LA6_1>=Static && LA6_1<=SuppressWarnings)||(LA6_1>=Throw && LA6_1<=True)||LA6_1==UnquotedString||LA6_1==UnsetType||LA6_1==VariableName||(LA6_1>=128 && LA6_1<=129)))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:90: simpleStatement
						{
						DebugLocation(109, 90);
						PushFollow(Follow._simpleStatement_in_statement446);
						simpleStatement22=simpleStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement22.Tree, simpleStatement22, "simpleStatement22", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(6); }


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(110, 3);
				BodyString23=(IToken)Match(input,BodyString,Follow._BodyString_in_statement452); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BodyString23_tree = (object)adaptor.Create(BodyString23, "BodyString23", retval);
				adaptor.AddChild(root_0, BodyString23_tree);
				}
				DebugLocation(110, 14);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString = (BodyString23!=null?BodyString23.Text:default(string)).endsWith("<?=");
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:111:4: namespaceBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(111, 4);
				PushFollow(Follow._namespaceBlock_in_statement459);
				namespaceBlock24=namespaceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespaceBlock24.Tree, namespaceBlock24, "namespaceBlock24", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:112:4: bracketedBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._bracketedBlock_in_statement464);
				bracketedBlock25=bracketedBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock25.Tree, bracketedBlock25, "bracketedBlock25", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:113:4: UnquotedString Colon statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 4);
				UnquotedString26=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_statement469); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString26_tree = (object)adaptor.Create(UnquotedString26, "UnquotedString26", retval);
				adaptor.AddChild(root_0, UnquotedString26_tree);
				}
				DebugLocation(113, 19);
				Colon27=(IToken)Match(input,Colon,Follow._Colon_in_statement471); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Colon27_tree = (object)adaptor.Create(Colon27, "Colon27", retval);
				adaptor.AddChild(root_0, Colon27_tree);
				}
				DebugLocation(113, 25);
				PushFollow(Follow._statement_in_statement473);
				statement28=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement28.Tree, statement28, "statement28", retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:114:4: classDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 4);
				PushFollow(Follow._classDefinition_in_statement478);
				classDefinition29=classDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDefinition29.Tree, classDefinition29, "classDefinition29", retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:115:4: interfaceDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._interfaceDefinition_in_statement483);
				interfaceDefinition30=interfaceDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDefinition30.Tree, interfaceDefinition30, "interfaceDefinition30", retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:116:4: complexStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(116, 4);
				PushFollow(Follow._complexStatement_in_statement488);
				complexStatement31=complexStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, complexStatement31.Tree, complexStatement31, "complexStatement31", retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:117:4: ( simpleStatement )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(117, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:117:4: ( simpleStatement )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==Ampersand||LA8_1==ArrayType||LA8_1==Bang||(LA8_1>=BoolType && LA8_1<=Break)||LA8_1==Clone||(LA8_1>=Const && LA8_1<=Continue)||LA8_1==Die||(LA8_1>=DoubleQuotedString && LA8_1<=Echo)||LA8_1==Empty||(LA8_1>=Eval && LA8_1<=Exit)||LA8_1==False||LA8_1==FloatType||(LA8_1>=Function && LA8_1<=HaltCompiler)||LA8_1==HereDoc||(LA8_1>=Include && LA8_1<=IncrementOperator)||(LA8_1>=IntType && LA8_1<=IntegerType)||(LA8_1>=Isset && LA8_1<=List)||LA8_1==Minus||(LA8_1>=New && LA8_1<=Null)||LA8_1==ObjectType||(LA8_1>=OpenRoundBracket && LA8_1<=OpenSquareBracket)||LA8_1==Plus||(LA8_1>=Real && LA8_1<=Return)||LA8_1==SingleQuotedString||(LA8_1>=Static && LA8_1<=SuppressWarnings)||(LA8_1>=Throw && LA8_1<=True)||LA8_1==UnquotedString||LA8_1==UnsetType||LA8_1==VariableName||(LA8_1>=128 && LA8_1<=129)))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:117:4: simpleStatement
					{
					DebugLocation(117, 4);
					PushFollow(Follow._simpleStatement_in_statement493);
					simpleStatement32=simpleStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement32.Tree, simpleStatement32, "simpleStatement32", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(117, 21);
				char_literal33=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement496); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal33_tree = (object)adaptor.Create(char_literal33, "char_literal33", retval);
				adaptor.AddChild(root_0, char_literal33_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 6);
			LeaveRule("statement", 6);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 6, statement_StartIndex); }

		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_printExpr();
	partial void LeaveRule_printExpr();
	// $ANTLR start "printExpr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:120:1: printExpr : expression ;
	[GrammarRule("printExpr")]
	private Antlr3AstNode printExpr()
	{
		EnterRule_printExpr();
		EnterRule("printExpr", 7);
		var retval = new Antlr3AstNode("printExpr");
		
		retval.Start = (IToken)input.LT(1);
		int printExpr_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode expression34 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "printExpr");
		DebugLocation(120, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:121:2: ( expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:121:4: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(121, 4);
			PushFollow(Follow._expression_in_printExpr507);
			expression34=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression34.Tree, expression34, "expression34", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("printExpr", 7);
			LeaveRule("printExpr", 7);
			LeaveRule_printExpr();
			if (state.backtracking > 0) { Memoize(input, 7, printExpr_StartIndex); }

		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "printExpr"); }
		return retval;

	}
	// $ANTLR end "printExpr"

	partial void EnterRule_bracketedBlock();
	partial void LeaveRule_bracketedBlock();
	// $ANTLR start "bracketedBlock"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:124:1: bracketedBlock : '{' ( statement )* '}' ;
	[GrammarRule("bracketedBlock")]
	private Antlr3AstNode bracketedBlock()
	{
		EnterRule_bracketedBlock();
		EnterRule("bracketedBlock", 8);
		var retval = new Antlr3AstNode("bracketedBlock");
		
		retval.Start = (IToken)input.LT(1);
		int bracketedBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal35 = default(IToken);
		IToken char_literal37 = default(IToken);
		Antlr3AstNode statement36 = default(Antlr3AstNode);

		object char_literal35_tree = default(object);
		object char_literal37_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bracketedBlock");
		DebugLocation(124, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:125:2: ( '{' ( statement )* '}' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:125:4: '{' ( statement )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(125, 4);
			char_literal35=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_bracketedBlock518); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal35_tree = (object)adaptor.Create(char_literal35, "char_literal35", retval);
			adaptor.AddChild(root_0, char_literal35_tree);
			}
			DebugLocation(125, 8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:125:8: ( statement )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if (((LA10_1>=Abstract && LA10_1<=Ampersand)||LA10_1==ArrayType||(LA10_1>=Bang && LA10_1<=BodyString)||(LA10_1>=BoolType && LA10_1<=Break)||LA10_1==Class||LA10_1==Clone||(LA10_1>=Const && LA10_1<=Continue)||LA10_1==Die||LA10_1==Do||(LA10_1>=DoubleQuotedString && LA10_1<=Echo)||LA10_1==Empty||(LA10_1>=Eval && LA10_1<=Exit)||LA10_1==False||(LA10_1>=FloatType && LA10_1<=Foreach)||(LA10_1>=Function && LA10_1<=HaltCompiler)||LA10_1==HereDoc||LA10_1==If||(LA10_1>=Include && LA10_1<=IncrementOperator)||(LA10_1>=IntType && LA10_1<=List)||LA10_1==Minus||(LA10_1>=Namespace && LA10_1<=Null)||LA10_1==ObjectType||(LA10_1>=OpenCurlyBracket && LA10_1<=OpenSquareBracket)||LA10_1==Plus||(LA10_1>=Real && LA10_1<=SemiColon)||LA10_1==SingleQuotedString||(LA10_1>=Static && LA10_1<=Try)||LA10_1==UnquotedString||LA10_1==UnsetType||(LA10_1>=VariableName && LA10_1<=While)||(LA10_1>=128 && LA10_1<=129)))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:125:8: statement
					{
					DebugLocation(125, 8);
					PushFollow(Follow._statement_in_bracketedBlock520);
					statement36=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement36.Tree, statement36, "statement36", retval);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(125, 19);
			char_literal37=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_bracketedBlock523); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal37_tree = (object)adaptor.Create(char_literal37, "char_literal37", retval);
			adaptor.AddChild(root_0, char_literal37_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracketedBlock", 8);
			LeaveRule("bracketedBlock", 8);
			LeaveRule_bracketedBlock();
			if (state.backtracking > 0) { Memoize(input, 8, bracketedBlock_StartIndex); }

		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "bracketedBlock"); }
		return retval;

	}
	// $ANTLR end "bracketedBlock"

	partial void EnterRule_interfaceDefinition();
	partial void LeaveRule_interfaceDefinition();
	// $ANTLR start "interfaceDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:128:1: interfaceDefinition : Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket ;
	[GrammarRule("interfaceDefinition")]
	private Antlr3AstNode interfaceDefinition()
	{
		EnterRule_interfaceDefinition();
		EnterRule("interfaceDefinition", 9);
		var retval = new Antlr3AstNode("interfaceDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Interface38 = default(IToken);
		IToken OpenCurlyBracket41 = default(IToken);
		IToken CloseCurlyBracket43 = default(IToken);
		Antlr3AstNode qualifiedName39 = default(Antlr3AstNode);
		Antlr3AstNode interfaceExtends40 = default(Antlr3AstNode);
		Antlr3AstNode interfaceMember42 = default(Antlr3AstNode);

		object Interface38_tree = default(object);
		object OpenCurlyBracket41_tree = default(object);
		object CloseCurlyBracket43_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceDefinition");
		DebugLocation(128, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:129:2: ( Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:129:4: Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(129, 4);
			Interface38=(IToken)Match(input,Interface,Follow._Interface_in_interfaceDefinition534); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Interface38_tree = (object)adaptor.Create(Interface38, "Interface38", retval);
			adaptor.AddChild(root_0, Interface38_tree);
			}
			DebugLocation(129, 14);
			PushFollow(Follow._qualifiedName_in_interfaceDefinition536);
			qualifiedName39=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName39.Tree, qualifiedName39, "qualifiedName39", retval);
			DebugLocation(129, 28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:129:28: ( interfaceExtends )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==Extends))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:129:28: interfaceExtends
				{
				DebugLocation(129, 28);
				PushFollow(Follow._interfaceExtends_in_interfaceDefinition538);
				interfaceExtends40=interfaceExtends();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceExtends40.Tree, interfaceExtends40, "interfaceExtends40", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(130, 4);
			OpenCurlyBracket41=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_interfaceDefinition544); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenCurlyBracket41_tree = (object)adaptor.Create(OpenCurlyBracket41, "OpenCurlyBracket41", retval);
			adaptor.AddChild(root_0, OpenCurlyBracket41_tree);
			}
			DebugLocation(130, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:130:21: ( interfaceMember )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==Abstract||LA12_1==Const||LA12_1==Function||(LA12_1>=Private && LA12_1<=Public)||LA12_1==Static))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:130:21: interfaceMember
					{
					DebugLocation(130, 21);
					PushFollow(Follow._interfaceMember_in_interfaceDefinition546);
					interfaceMember42=interfaceMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceMember42.Tree, interfaceMember42, "interfaceMember42", retval);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(130, 38);
			CloseCurlyBracket43=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_interfaceDefinition549); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseCurlyBracket43_tree = (object)adaptor.Create(CloseCurlyBracket43, "CloseCurlyBracket43", retval);
			adaptor.AddChild(root_0, CloseCurlyBracket43_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceDefinition", 9);
			LeaveRule("interfaceDefinition", 9);
			LeaveRule_interfaceDefinition();
			if (state.backtracking > 0) { Memoize(input, 9, interfaceDefinition_StartIndex); }

		}
		DebugLocation(131, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceDefinition"); }
		return retval;

	}
	// $ANTLR end "interfaceDefinition"

	partial void EnterRule_interfaceExtends();
	partial void LeaveRule_interfaceExtends();
	// $ANTLR start "interfaceExtends"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:133:1: interfaceExtends : Extends qualifiedName ( Comma qualifiedName )* ;
	[GrammarRule("interfaceExtends")]
	private Antlr3AstNode interfaceExtends()
	{
		EnterRule_interfaceExtends();
		EnterRule("interfaceExtends", 10);
		var retval = new Antlr3AstNode("interfaceExtends");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceExtends_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Extends44 = default(IToken);
		IToken Comma46 = default(IToken);
		Antlr3AstNode qualifiedName45 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName47 = default(Antlr3AstNode);

		object Extends44_tree = default(object);
		object Comma46_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceExtends");
		DebugLocation(133, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:134:2: ( Extends qualifiedName ( Comma qualifiedName )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:134:4: Extends qualifiedName ( Comma qualifiedName )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(134, 4);
			Extends44=(IToken)Match(input,Extends,Follow._Extends_in_interfaceExtends560); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Extends44_tree = (object)adaptor.Create(Extends44, "Extends44", retval);
			adaptor.AddChild(root_0, Extends44_tree);
			}
			DebugLocation(134, 12);
			PushFollow(Follow._qualifiedName_in_interfaceExtends562);
			qualifiedName45=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName45.Tree, qualifiedName45, "qualifiedName45", retval);
			DebugLocation(134, 26);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:134:26: ( Comma qualifiedName )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==Comma))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:134:27: Comma qualifiedName
					{
					DebugLocation(134, 27);
					Comma46=(IToken)Match(input,Comma,Follow._Comma_in_interfaceExtends565); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Comma46_tree = (object)adaptor.Create(Comma46, "Comma46", retval);
					adaptor.AddChild(root_0, Comma46_tree);
					}
					DebugLocation(134, 33);
					PushFollow(Follow._qualifiedName_in_interfaceExtends567);
					qualifiedName47=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName47.Tree, qualifiedName47, "qualifiedName47", retval);

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceExtends", 10);
			LeaveRule("interfaceExtends", 10);
			LeaveRule_interfaceExtends();
			if (state.backtracking > 0) { Memoize(input, 10, interfaceExtends_StartIndex); }

		}
		DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtends"); }
		return retval;

	}
	// $ANTLR end "interfaceExtends"

	partial void EnterRule_interfaceMember();
	partial void LeaveRule_interfaceMember();
	// $ANTLR start "interfaceMember"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:137:1: interfaceMember : ( constDefinition ';' | ( fieldModifier )* Function qualifiedName parametersDefinition ';' );
	[GrammarRule("interfaceMember")]
	private Antlr3AstNode interfaceMember()
	{
		EnterRule_interfaceMember();
		EnterRule("interfaceMember", 11);
		var retval = new Antlr3AstNode("interfaceMember");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal49 = default(IToken);
		IToken Function51 = default(IToken);
		IToken char_literal54 = default(IToken);
		Antlr3AstNode constDefinition48 = default(Antlr3AstNode);
		Antlr3AstNode fieldModifier50 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName52 = default(Antlr3AstNode);
		Antlr3AstNode parametersDefinition53 = default(Antlr3AstNode);

		object char_literal49_tree = default(object);
		object Function51_tree = default(object);
		object char_literal54_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceMember");
		DebugLocation(137, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:138:2: ( constDefinition ';' | ( fieldModifier )* Function qualifiedName parametersDefinition ';' )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==Const))
			{
				alt15 = 1;
			}
			else if ((LA15_1==Abstract||LA15_1==Function||(LA15_1>=Private && LA15_1<=Public)||LA15_1==Static))
			{
				alt15 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:138:4: constDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(138, 4);
				PushFollow(Follow._constDefinition_in_interfaceMember580);
				constDefinition48=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition48.Tree, constDefinition48, "constDefinition48", retval);
				DebugLocation(138, 20);
				char_literal49=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember582); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal49_tree = (object)adaptor.Create(char_literal49, "char_literal49", retval);
				adaptor.AddChild(root_0, char_literal49_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:139:4: ( fieldModifier )* Function qualifiedName parametersDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:139:4: ( fieldModifier )*
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_1 = input.LA(1);

					if ((LA14_1==Abstract||(LA14_1>=Private && LA14_1<=Public)||LA14_1==Static))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch ( alt14 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:139:4: fieldModifier
						{
						DebugLocation(139, 4);
						PushFollow(Follow._fieldModifier_in_interfaceMember587);
						fieldModifier50=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier50.Tree, fieldModifier50, "fieldModifier50", retval);

						}
						break;

					default:
						goto loop14;
					}
				}

				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(139, 19);
				Function51=(IToken)Match(input,Function,Follow._Function_in_interfaceMember590); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function51_tree = (object)adaptor.Create(Function51, "Function51", retval);
				adaptor.AddChild(root_0, Function51_tree);
				}
				DebugLocation(139, 28);
				PushFollow(Follow._qualifiedName_in_interfaceMember592);
				qualifiedName52=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName52.Tree, qualifiedName52, "qualifiedName52", retval);
				DebugLocation(139, 42);
				PushFollow(Follow._parametersDefinition_in_interfaceMember594);
				parametersDefinition53=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition53.Tree, parametersDefinition53, "parametersDefinition53", retval);
				DebugLocation(139, 63);
				char_literal54=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember596); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal54_tree = (object)adaptor.Create(char_literal54, "char_literal54", retval);
				adaptor.AddChild(root_0, char_literal54_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceMember", 11);
			LeaveRule("interfaceMember", 11);
			LeaveRule_interfaceMember();
			if (state.backtracking > 0) { Memoize(input, 11, interfaceMember_StartIndex); }

		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceMember"); }
		return retval;

	}
	// $ANTLR end "interfaceMember"

	partial void EnterRule_classDefinition();
	partial void LeaveRule_classDefinition();
	// $ANTLR start "classDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:142:1: classDefinition : ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket ;
	[GrammarRule("classDefinition")]
	private Antlr3AstNode classDefinition()
	{
		EnterRule_classDefinition();
		EnterRule("classDefinition", 12);
		var retval = new Antlr3AstNode("classDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int classDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Class56 = default(IToken);
		IToken Extends58 = default(IToken);
		IToken OpenCurlyBracket61 = default(IToken);
		IToken CloseCurlyBracket63 = default(IToken);
		Antlr3AstNode classModifier55 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName57 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName59 = default(Antlr3AstNode);
		Antlr3AstNode classImplements60 = default(Antlr3AstNode);
		Antlr3AstNode classMember62 = default(Antlr3AstNode);

		object Class56_tree = default(object);
		object Extends58_tree = default(object);
		object OpenCurlyBracket61_tree = default(object);
		object CloseCurlyBracket63_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classDefinition");
		DebugLocation(142, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:143:2: ( ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:143:6: ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(143, 6);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:143:6: ( classModifier )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==Abstract))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:143:6: classModifier
				{
				DebugLocation(143, 6);
				PushFollow(Follow._classModifier_in_classDefinition609);
				classModifier55=classModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classModifier55.Tree, classModifier55, "classModifier55", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(144, 3);
			Class56=(IToken)Match(input,Class,Follow._Class_in_classDefinition615); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Class56_tree = (object)adaptor.Create(Class56, "Class56", retval);
			adaptor.AddChild(root_0, Class56_tree);
			}
			DebugLocation(144, 9);
			PushFollow(Follow._qualifiedName_in_classDefinition617);
			qualifiedName57=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName57.Tree, qualifiedName57, "qualifiedName57", retval);
			DebugLocation(145, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:145:3: ( Extends qualifiedName )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==Extends))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:145:4: Extends qualifiedName
				{
				DebugLocation(145, 4);
				Extends58=(IToken)Match(input,Extends,Follow._Extends_in_classDefinition623); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Extends58_tree = (object)adaptor.Create(Extends58, "Extends58", retval);
				adaptor.AddChild(root_0, Extends58_tree);
				}
				DebugLocation(145, 12);
				PushFollow(Follow._qualifiedName_in_classDefinition625);
				qualifiedName59=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName59.Tree, qualifiedName59, "qualifiedName59", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(146, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:146:3: ( classImplements )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==Implements))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:146:3: classImplements
				{
				DebugLocation(146, 3);
				PushFollow(Follow._classImplements_in_classDefinition632);
				classImplements60=classImplements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classImplements60.Tree, classImplements60, "classImplements60", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(147, 3);
			OpenCurlyBracket61=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_classDefinition637); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenCurlyBracket61_tree = (object)adaptor.Create(OpenCurlyBracket61, "OpenCurlyBracket61", retval);
			adaptor.AddChild(root_0, OpenCurlyBracket61_tree);
			}
			DebugLocation(148, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:148:3: ( classMember )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==Abstract||LA19_1==Const||LA19_1==Function||(LA19_1>=Private && LA19_1<=Public)||LA19_1==Static||(LA19_1>=Var && LA19_1<=VariableName)))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:148:3: classMember
					{
					DebugLocation(148, 3);
					PushFollow(Follow._classMember_in_classDefinition641);
					classMember62=classMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classMember62.Tree, classMember62, "classMember62", retval);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(149, 3);
			CloseCurlyBracket63=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_classDefinition646); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseCurlyBracket63_tree = (object)adaptor.Create(CloseCurlyBracket63, "CloseCurlyBracket63", retval);
			adaptor.AddChild(root_0, CloseCurlyBracket63_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classDefinition", 12);
			LeaveRule("classDefinition", 12);
			LeaveRule_classDefinition();
			if (state.backtracking > 0) { Memoize(input, 12, classDefinition_StartIndex); }

		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "classDefinition"); }
		return retval;

	}
	// $ANTLR end "classDefinition"

	partial void EnterRule_classImplements();
	partial void LeaveRule_classImplements();
	// $ANTLR start "classImplements"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:152:1: classImplements : Implements ( qualifiedName ( Comma qualifiedName )* ) ;
	[GrammarRule("classImplements")]
	private Antlr3AstNode classImplements()
	{
		EnterRule_classImplements();
		EnterRule("classImplements", 13);
		var retval = new Antlr3AstNode("classImplements");
		
		retval.Start = (IToken)input.LT(1);
		int classImplements_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Implements64 = default(IToken);
		IToken Comma66 = default(IToken);
		Antlr3AstNode qualifiedName65 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName67 = default(Antlr3AstNode);

		object Implements64_tree = default(object);
		object Comma66_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classImplements");
		DebugLocation(152, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:153:2: ( Implements ( qualifiedName ( Comma qualifiedName )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:153:5: Implements ( qualifiedName ( Comma qualifiedName )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(153, 5);
			Implements64=(IToken)Match(input,Implements,Follow._Implements_in_classImplements660); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Implements64_tree = (object)adaptor.Create(Implements64, "Implements64", retval);
			adaptor.AddChild(root_0, Implements64_tree);
			}
			DebugLocation(153, 16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:153:16: ( qualifiedName ( Comma qualifiedName )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:153:17: qualifiedName ( Comma qualifiedName )*
			{
			DebugLocation(153, 17);
			PushFollow(Follow._qualifiedName_in_classImplements663);
			qualifiedName65=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName65.Tree, qualifiedName65, "qualifiedName65", retval);
			DebugLocation(153, 31);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:153:31: ( Comma qualifiedName )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==Comma))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:153:32: Comma qualifiedName
					{
					DebugLocation(153, 32);
					Comma66=(IToken)Match(input,Comma,Follow._Comma_in_classImplements666); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Comma66_tree = (object)adaptor.Create(Comma66, "Comma66", retval);
					adaptor.AddChild(root_0, Comma66_tree);
					}
					DebugLocation(153, 38);
					PushFollow(Follow._qualifiedName_in_classImplements668);
					qualifiedName67=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName67.Tree, qualifiedName67, "qualifiedName67", retval);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classImplements", 13);
			LeaveRule("classImplements", 13);
			LeaveRule_classImplements();
			if (state.backtracking > 0) { Memoize(input, 13, classImplements_StartIndex); }

		}
		DebugLocation(154, 1);
		} finally { DebugExitRule(GrammarFileName, "classImplements"); }
		return retval;

	}
	// $ANTLR end "classImplements"

	partial void EnterRule_classMember();
	partial void LeaveRule_classMember();
	// $ANTLR start "classMember"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:156:1: classMember : ( ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' );
	[GrammarRule("classMember")]
	private Antlr3AstNode classMember()
	{
		EnterRule_classMember();
		EnterRule("classMember", 14);
		var retval = new Antlr3AstNode("classMember");
		
		retval.Start = (IToken)input.LT(1);
		int classMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function69 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken char_literal75 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		Antlr3AstNode fieldModifier68 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName70 = default(Antlr3AstNode);
		Antlr3AstNode parametersDefinition71 = default(Antlr3AstNode);
		Antlr3AstNode bracketedBlock72 = default(Antlr3AstNode);
		Antlr3AstNode constDefinition74 = default(Antlr3AstNode);
		Antlr3AstNode varDefinition76 = default(Antlr3AstNode);
		Antlr3AstNode fieldDefinition78 = default(Antlr3AstNode);

		object Function69_tree = default(object);
		object char_literal73_tree = default(object);
		object char_literal75_tree = default(object);
		object char_literal77_tree = default(object);
		object char_literal79_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classMember");
		DebugLocation(156, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:157:2: ( ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' )
			int alt23=4;
			try { DebugEnterDecision(23, false);
			try
			{
				alt23 = dfa23.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:157:4: ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(157, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:157:4: ( fieldModifier )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_1 = input.LA(1);

					if ((LA21_1==Abstract||(LA21_1>=Private && LA21_1<=Public)||LA21_1==Static))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:157:4: fieldModifier
						{
						DebugLocation(157, 4);
						PushFollow(Follow._fieldModifier_in_classMember682);
						fieldModifier68=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier68.Tree, fieldModifier68, "fieldModifier68", retval);

						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(157, 19);
				Function69=(IToken)Match(input,Function,Follow._Function_in_classMember685); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function69_tree = (object)adaptor.Create(Function69, "Function69", retval);
				adaptor.AddChild(root_0, Function69_tree);
				}
				DebugLocation(157, 28);
				PushFollow(Follow._qualifiedName_in_classMember687);
				qualifiedName70=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName70.Tree, qualifiedName70, "qualifiedName70", retval);
				DebugLocation(157, 42);
				PushFollow(Follow._parametersDefinition_in_classMember689);
				parametersDefinition71=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition71.Tree, parametersDefinition71, "parametersDefinition71", retval);
				DebugLocation(157, 63);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:157:63: ( bracketedBlock | ';' )
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==OpenCurlyBracket))
				{
					alt22 = 1;
				}
				else if ((LA22_1==SemiColon))
				{
					alt22 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:157:64: bracketedBlock
					{
					DebugLocation(157, 64);
					PushFollow(Follow._bracketedBlock_in_classMember692);
					bracketedBlock72=bracketedBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock72.Tree, bracketedBlock72, "bracketedBlock72", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:157:81: ';'
					{
					DebugLocation(157, 81);
					char_literal73=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember696); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal73_tree = (object)adaptor.Create(char_literal73, "char_literal73", retval);
					adaptor.AddChild(root_0, char_literal73_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(22); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:158:4: constDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(158, 4);
				PushFollow(Follow._constDefinition_in_classMember702);
				constDefinition74=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition74.Tree, constDefinition74, "constDefinition74", retval);
				DebugLocation(158, 20);
				char_literal75=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember704); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal75_tree = (object)adaptor.Create(char_literal75, "char_literal75", retval);
				adaptor.AddChild(root_0, char_literal75_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:159:4: varDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._varDefinition_in_classMember709);
				varDefinition76=varDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, varDefinition76.Tree, varDefinition76, "varDefinition76", retval);
				DebugLocation(159, 18);
				char_literal77=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember711); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal77_tree = (object)adaptor.Create(char_literal77, "char_literal77", retval);
				adaptor.AddChild(root_0, char_literal77_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:160:4: fieldDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._fieldDefinition_in_classMember716);
				fieldDefinition78=fieldDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fieldDefinition78.Tree, fieldDefinition78, "fieldDefinition78", retval);
				DebugLocation(160, 20);
				char_literal79=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember718); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal79_tree = (object)adaptor.Create(char_literal79, "char_literal79", retval);
				adaptor.AddChild(root_0, char_literal79_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classMember", 14);
			LeaveRule("classMember", 14);
			LeaveRule_classMember();
			if (state.backtracking > 0) { Memoize(input, 14, classMember_StartIndex); }

		}
		DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "classMember"); }
		return retval;

	}
	// $ANTLR end "classMember"

	partial void EnterRule_constDefinition();
	partial void LeaveRule_constDefinition();
	// $ANTLR start "constDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:163:1: constDefinition : Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )* ;
	[GrammarRule("constDefinition")]
	private Antlr3AstNode constDefinition()
	{
		EnterRule_constDefinition();
		EnterRule("constDefinition", 15);
		var retval = new Antlr3AstNode("constDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int constDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Const80 = default(IToken);
		IToken Equals82 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken Equals86 = default(IToken);
		Antlr3AstNode qualifiedName81 = default(Antlr3AstNode);
		Antlr3AstNode atom83 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName85 = default(Antlr3AstNode);
		Antlr3AstNode atom87 = default(Antlr3AstNode);

		object Const80_tree = default(object);
		object Equals82_tree = default(object);
		object char_literal84_tree = default(object);
		object Equals86_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constDefinition");
		DebugLocation(163, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:164:2: ( Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:164:4: Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(164, 4);
			Const80=(IToken)Match(input,Const,Follow._Const_in_constDefinition729); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Const80_tree = (object)adaptor.Create(Const80, "Const80", retval);
			adaptor.AddChild(root_0, Const80_tree);
			}
			DebugLocation(164, 10);
			PushFollow(Follow._qualifiedName_in_constDefinition731);
			qualifiedName81=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName81.Tree, qualifiedName81, "qualifiedName81", retval);
			DebugLocation(164, 24);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:164:24: ( Equals atom )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==Equals))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:164:25: Equals atom
				{
				DebugLocation(164, 25);
				Equals82=(IToken)Match(input,Equals,Follow._Equals_in_constDefinition734); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals82_tree = (object)adaptor.Create(Equals82, "Equals82", retval);
				adaptor.AddChild(root_0, Equals82_tree);
				}
				DebugLocation(164, 32);
				PushFollow(Follow._atom_in_constDefinition736);
				atom83=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom83.Tree, atom83, "atom83", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(164, 39);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:164:39: ( ',' qualifiedName ( Equals atom )? )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==Comma))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:164:40: ',' qualifiedName ( Equals atom )?
					{
					DebugLocation(164, 40);
					char_literal84=(IToken)Match(input,Comma,Follow._Comma_in_constDefinition741); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal84_tree = (object)adaptor.Create(char_literal84, "char_literal84", retval);
					adaptor.AddChild(root_0, char_literal84_tree);
					}
					DebugLocation(164, 44);
					PushFollow(Follow._qualifiedName_in_constDefinition743);
					qualifiedName85=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName85.Tree, qualifiedName85, "qualifiedName85", retval);
					DebugLocation(164, 58);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:164:58: ( Equals atom )?
					int alt25=2;
					try { DebugEnterSubRule(25);
					try { DebugEnterDecision(25, false);
					int LA25_1 = input.LA(1);

					if ((LA25_1==Equals))
					{
						alt25 = 1;
					}
					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:164:59: Equals atom
						{
						DebugLocation(164, 59);
						Equals86=(IToken)Match(input,Equals,Follow._Equals_in_constDefinition746); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals86_tree = (object)adaptor.Create(Equals86, "Equals86", retval);
						adaptor.AddChild(root_0, Equals86_tree);
						}
						DebugLocation(164, 66);
						PushFollow(Follow._atom_in_constDefinition748);
						atom87=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom87.Tree, atom87, "atom87", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(25); }


					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constDefinition", 15);
			LeaveRule("constDefinition", 15);
			LeaveRule_constDefinition();
			if (state.backtracking > 0) { Memoize(input, 15, constDefinition_StartIndex); }

		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "constDefinition"); }
		return retval;

	}
	// $ANTLR end "constDefinition"

	partial void EnterRule_varDefinition();
	partial void LeaveRule_varDefinition();
	// $ANTLR start "varDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:167:1: varDefinition : Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* ;
	[GrammarRule("varDefinition")]
	private Antlr3AstNode varDefinition()
	{
		EnterRule_varDefinition();
		EnterRule("varDefinition", 16);
		var retval = new Antlr3AstNode("varDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int varDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Var88 = default(IToken);
		IToken VariableName89 = default(IToken);
		IToken Equals90 = default(IToken);
		IToken char_literal92 = default(IToken);
		IToken VariableName93 = default(IToken);
		IToken Equals94 = default(IToken);
		Antlr3AstNode atom91 = default(Antlr3AstNode);
		Antlr3AstNode atom95 = default(Antlr3AstNode);

		object Var88_tree = default(object);
		object VariableName89_tree = default(object);
		object Equals90_tree = default(object);
		object char_literal92_tree = default(object);
		object VariableName93_tree = default(object);
		object Equals94_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "varDefinition");
		DebugLocation(167, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:2: ( Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:4: Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(168, 4);
			Var88=(IToken)Match(input,Var,Follow._Var_in_varDefinition763); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Var88_tree = (object)adaptor.Create(Var88, "Var88", retval);
			adaptor.AddChild(root_0, Var88_tree);
			}
			DebugLocation(168, 8);
			VariableName89=(IToken)Match(input,VariableName,Follow._VariableName_in_varDefinition765); if (state.failed) return retval;
			if (state.backtracking == 0) {
			VariableName89_tree = (object)adaptor.Create(VariableName89, "VariableName89", retval);
			adaptor.AddChild(root_0, VariableName89_tree);
			}
			DebugLocation(168, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:21: ( Equals atom )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==Equals))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:22: Equals atom
				{
				DebugLocation(168, 22);
				Equals90=(IToken)Match(input,Equals,Follow._Equals_in_varDefinition768); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals90_tree = (object)adaptor.Create(Equals90, "Equals90", retval);
				adaptor.AddChild(root_0, Equals90_tree);
				}
				DebugLocation(168, 29);
				PushFollow(Follow._atom_in_varDefinition770);
				atom91=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom91.Tree, atom91, "atom91", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(168, 36);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:36: ( ',' VariableName ( Equals atom )? )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==Comma))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:37: ',' VariableName ( Equals atom )?
					{
					DebugLocation(168, 37);
					char_literal92=(IToken)Match(input,Comma,Follow._Comma_in_varDefinition775); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal92_tree = (object)adaptor.Create(char_literal92, "char_literal92", retval);
					adaptor.AddChild(root_0, char_literal92_tree);
					}
					DebugLocation(168, 41);
					VariableName93=(IToken)Match(input,VariableName,Follow._VariableName_in_varDefinition777); if (state.failed) return retval;
					if (state.backtracking == 0) {
					VariableName93_tree = (object)adaptor.Create(VariableName93, "VariableName93", retval);
					adaptor.AddChild(root_0, VariableName93_tree);
					}
					DebugLocation(168, 54);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:54: ( Equals atom )?
					int alt28=2;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, false);
					int LA28_1 = input.LA(1);

					if ((LA28_1==Equals))
					{
						alt28 = 1;
					}
					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:168:55: Equals atom
						{
						DebugLocation(168, 55);
						Equals94=(IToken)Match(input,Equals,Follow._Equals_in_varDefinition780); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals94_tree = (object)adaptor.Create(Equals94, "Equals94", retval);
						adaptor.AddChild(root_0, Equals94_tree);
						}
						DebugLocation(168, 62);
						PushFollow(Follow._atom_in_varDefinition782);
						atom95=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom95.Tree, atom95, "atom95", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(28); }


					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("varDefinition", 16);
			LeaveRule("varDefinition", 16);
			LeaveRule_varDefinition();
			if (state.backtracking > 0) { Memoize(input, 16, varDefinition_StartIndex); }

		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "varDefinition"); }
		return retval;

	}
	// $ANTLR end "varDefinition"

	partial void EnterRule_fieldDefinition();
	partial void LeaveRule_fieldDefinition();
	// $ANTLR start "fieldDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:171:1: fieldDefinition : ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* ;
	[GrammarRule("fieldDefinition")]
	private Antlr3AstNode fieldDefinition()
	{
		EnterRule_fieldDefinition();
		EnterRule("fieldDefinition", 17);
		var retval = new Antlr3AstNode("fieldDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int fieldDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName97 = default(IToken);
		IToken Equals98 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken VariableName101 = default(IToken);
		IToken Equals102 = default(IToken);
		Antlr3AstNode fieldModifier96 = default(Antlr3AstNode);
		Antlr3AstNode atom99 = default(Antlr3AstNode);
		Antlr3AstNode atom103 = default(Antlr3AstNode);

		object VariableName97_tree = default(object);
		object Equals98_tree = default(object);
		object char_literal100_tree = default(object);
		object VariableName101_tree = default(object);
		object Equals102_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldDefinition");
		DebugLocation(171, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:2: ( ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:4: ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(172, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:4: ( fieldModifier )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==Abstract||(LA30_1>=Private && LA30_1<=Public)||LA30_1==Static))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:4: fieldModifier
					{
					DebugLocation(172, 4);
					PushFollow(Follow._fieldModifier_in_fieldDefinition797);
					fieldModifier96=fieldModifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier96.Tree, fieldModifier96, "fieldModifier96", retval);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(172, 19);
			VariableName97=(IToken)Match(input,VariableName,Follow._VariableName_in_fieldDefinition800); if (state.failed) return retval;
			if (state.backtracking == 0) {
			VariableName97_tree = (object)adaptor.Create(VariableName97, "VariableName97", retval);
			adaptor.AddChild(root_0, VariableName97_tree);
			}
			DebugLocation(172, 32);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:32: ( Equals atom )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==Equals))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:33: Equals atom
				{
				DebugLocation(172, 33);
				Equals98=(IToken)Match(input,Equals,Follow._Equals_in_fieldDefinition803); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals98_tree = (object)adaptor.Create(Equals98, "Equals98", retval);
				adaptor.AddChild(root_0, Equals98_tree);
				}
				DebugLocation(172, 40);
				PushFollow(Follow._atom_in_fieldDefinition805);
				atom99=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom99.Tree, atom99, "atom99", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(172, 47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:47: ( ',' VariableName ( Equals atom )? )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==Comma))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:48: ',' VariableName ( Equals atom )?
					{
					DebugLocation(172, 48);
					char_literal100=(IToken)Match(input,Comma,Follow._Comma_in_fieldDefinition810); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal100_tree = (object)adaptor.Create(char_literal100, "char_literal100", retval);
					adaptor.AddChild(root_0, char_literal100_tree);
					}
					DebugLocation(172, 52);
					VariableName101=(IToken)Match(input,VariableName,Follow._VariableName_in_fieldDefinition812); if (state.failed) return retval;
					if (state.backtracking == 0) {
					VariableName101_tree = (object)adaptor.Create(VariableName101, "VariableName101", retval);
					adaptor.AddChild(root_0, VariableName101_tree);
					}
					DebugLocation(172, 65);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:65: ( Equals atom )?
					int alt32=2;
					try { DebugEnterSubRule(32);
					try { DebugEnterDecision(32, false);
					int LA32_1 = input.LA(1);

					if ((LA32_1==Equals))
					{
						alt32 = 1;
					}
					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:172:66: Equals atom
						{
						DebugLocation(172, 66);
						Equals102=(IToken)Match(input,Equals,Follow._Equals_in_fieldDefinition815); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals102_tree = (object)adaptor.Create(Equals102, "Equals102", retval);
						adaptor.AddChild(root_0, Equals102_tree);
						}
						DebugLocation(172, 73);
						PushFollow(Follow._atom_in_fieldDefinition817);
						atom103=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom103.Tree, atom103, "atom103", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(32); }


					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldDefinition", 17);
			LeaveRule("fieldDefinition", 17);
			LeaveRule_fieldDefinition();
			if (state.backtracking > 0) { Memoize(input, 17, fieldDefinition_StartIndex); }

		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "fieldDefinition"); }
		return retval;

	}
	// $ANTLR end "fieldDefinition"

	partial void EnterRule_classModifier();
	partial void LeaveRule_classModifier();
	// $ANTLR start "classModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:175:1: classModifier : Abstract ;
	[GrammarRule("classModifier")]
	private Antlr3AstNode classModifier()
	{
		EnterRule_classModifier();
		EnterRule("classModifier", 18);
		var retval = new Antlr3AstNode("classModifier");
		
		retval.Start = (IToken)input.LT(1);
		int classModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Abstract104 = default(IToken);

		object Abstract104_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classModifier");
		DebugLocation(175, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:176:2: ( Abstract )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:176:4: Abstract
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(176, 4);
			Abstract104=(IToken)Match(input,Abstract,Follow._Abstract_in_classModifier833); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Abstract104_tree = (object)adaptor.Create(Abstract104, "Abstract104", retval);
			adaptor.AddChild(root_0, Abstract104_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classModifier", 18);
			LeaveRule("classModifier", 18);
			LeaveRule_classModifier();
			if (state.backtracking > 0) { Memoize(input, 18, classModifier_StartIndex); }

		}
		DebugLocation(176, 11);
		} finally { DebugExitRule(GrammarFileName, "classModifier"); }
		return retval;

	}
	// $ANTLR end "classModifier"

	partial void EnterRule_fieldModifier();
	partial void LeaveRule_fieldModifier();
	// $ANTLR start "fieldModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:178:1: fieldModifier : ( accessModifier | Abstract | Static );
	[GrammarRule("fieldModifier")]
	private Antlr3AstNode fieldModifier()
	{
		EnterRule_fieldModifier();
		EnterRule("fieldModifier", 19);
		var retval = new Antlr3AstNode("fieldModifier");
		
		retval.Start = (IToken)input.LT(1);
		int fieldModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Abstract106 = default(IToken);
		IToken Static107 = default(IToken);
		Antlr3AstNode accessModifier105 = default(Antlr3AstNode);

		object Abstract106_tree = default(object);
		object Static107_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldModifier");
		DebugLocation(178, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:179:2: ( accessModifier | Abstract | Static )
			int alt34=3;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case Private:
			case Protected:
			case Public:
				{
				alt34 = 1;
				}
				break;
			case Abstract:
				{
				alt34 = 2;
				}
				break;
			case Static:
				{
				alt34 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:179:4: accessModifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(179, 4);
				PushFollow(Follow._accessModifier_in_fieldModifier843);
				accessModifier105=accessModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessModifier105.Tree, accessModifier105, "accessModifier105", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:179:21: Abstract
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(179, 21);
				Abstract106=(IToken)Match(input,Abstract,Follow._Abstract_in_fieldModifier847); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Abstract106_tree = (object)adaptor.Create(Abstract106, "Abstract106", retval);
				adaptor.AddChild(root_0, Abstract106_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:179:32: Static
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(179, 32);
				Static107=(IToken)Match(input,Static,Follow._Static_in_fieldModifier851); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static107_tree = (object)adaptor.Create(Static107, "Static107", retval);
				adaptor.AddChild(root_0, Static107_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldModifier", 19);
			LeaveRule("fieldModifier", 19);
			LeaveRule_fieldModifier();
			if (state.backtracking > 0) { Memoize(input, 19, fieldModifier_StartIndex); }

		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "fieldModifier"); }
		return retval;

	}
	// $ANTLR end "fieldModifier"

	partial void EnterRule_complexStatement();
	partial void LeaveRule_complexStatement();
	// $ANTLR start "complexStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:182:1: complexStatement : ( If '(' expression ')' statement ( conditional )? | For '(' forInit forCondition forUpdate ')' statement | Foreach '(' expression As arrayEntry ')' statement | While '(' ( expression )? ')' statement | Do statement While '(' expression ')' ';' | Switch '(' expression ')' '{' cases '}' | tryStatement | functionDefinition );
	[GrammarRule("complexStatement")]
	private Antlr3AstNode complexStatement()
	{
		EnterRule_complexStatement();
		EnterRule("complexStatement", 20);
		var retval = new Antlr3AstNode("complexStatement");
		
		retval.Start = (IToken)input.LT(1);
		int complexStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken If108 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken char_literal111 = default(IToken);
		IToken For114 = default(IToken);
		IToken char_literal115 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken Foreach121 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken As124 = default(IToken);
		IToken char_literal126 = default(IToken);
		IToken While128 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken Do133 = default(IToken);
		IToken While135 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken char_literal138 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken Switch140 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		IToken char_literal144 = default(IToken);
		IToken char_literal146 = default(IToken);
		Antlr3AstNode expression110 = default(Antlr3AstNode);
		Antlr3AstNode statement112 = default(Antlr3AstNode);
		Antlr3AstNode conditional113 = default(Antlr3AstNode);
		Antlr3AstNode forInit116 = default(Antlr3AstNode);
		Antlr3AstNode forCondition117 = default(Antlr3AstNode);
		Antlr3AstNode forUpdate118 = default(Antlr3AstNode);
		Antlr3AstNode statement120 = default(Antlr3AstNode);
		Antlr3AstNode expression123 = default(Antlr3AstNode);
		Antlr3AstNode arrayEntry125 = default(Antlr3AstNode);
		Antlr3AstNode statement127 = default(Antlr3AstNode);
		Antlr3AstNode expression130 = default(Antlr3AstNode);
		Antlr3AstNode statement132 = default(Antlr3AstNode);
		Antlr3AstNode statement134 = default(Antlr3AstNode);
		Antlr3AstNode expression137 = default(Antlr3AstNode);
		Antlr3AstNode expression142 = default(Antlr3AstNode);
		Antlr3AstNode cases145 = default(Antlr3AstNode);
		Antlr3AstNode tryStatement147 = default(Antlr3AstNode);
		Antlr3AstNode functionDefinition148 = default(Antlr3AstNode);

		object If108_tree = default(object);
		object char_literal109_tree = default(object);
		object char_literal111_tree = default(object);
		object For114_tree = default(object);
		object char_literal115_tree = default(object);
		object char_literal119_tree = default(object);
		object Foreach121_tree = default(object);
		object char_literal122_tree = default(object);
		object As124_tree = default(object);
		object char_literal126_tree = default(object);
		object While128_tree = default(object);
		object char_literal129_tree = default(object);
		object char_literal131_tree = default(object);
		object Do133_tree = default(object);
		object While135_tree = default(object);
		object char_literal136_tree = default(object);
		object char_literal138_tree = default(object);
		object char_literal139_tree = default(object);
		object Switch140_tree = default(object);
		object char_literal141_tree = default(object);
		object char_literal143_tree = default(object);
		object char_literal144_tree = default(object);
		object char_literal146_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "complexStatement");
		DebugLocation(182, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:183:2: ( If '(' expression ')' statement ( conditional )? | For '(' forInit forCondition forUpdate ')' statement | Foreach '(' expression As arrayEntry ')' statement | While '(' ( expression )? ')' statement | Do statement While '(' expression ')' ';' | Switch '(' expression ')' '{' cases '}' | tryStatement | functionDefinition )
			int alt37=8;
			try { DebugEnterDecision(37, false);
			switch (input.LA(1))
			{
			case If:
				{
				alt37 = 1;
				}
				break;
			case For:
				{
				alt37 = 2;
				}
				break;
			case Foreach:
				{
				alt37 = 3;
				}
				break;
			case While:
				{
				alt37 = 4;
				}
				break;
			case Do:
				{
				alt37 = 5;
				}
				break;
			case Switch:
				{
				alt37 = 6;
				}
				break;
			case Try:
				{
				alt37 = 7;
				}
				break;
			case Function:
				{
				alt37 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:183:4: If '(' expression ')' statement ( conditional )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(183, 4);
				If108=(IToken)Match(input,If,Follow._If_in_complexStatement862); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If108_tree = (object)adaptor.Create(If108, "If108", retval);
				adaptor.AddChild(root_0, If108_tree);
				}
				DebugLocation(183, 7);
				char_literal109=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement864); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal109_tree = (object)adaptor.Create(char_literal109, "char_literal109", retval);
				adaptor.AddChild(root_0, char_literal109_tree);
				}
				DebugLocation(183, 11);
				PushFollow(Follow._expression_in_complexStatement866);
				expression110=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression110.Tree, expression110, "expression110", retval);
				DebugLocation(183, 22);
				char_literal111=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement868); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal111_tree = (object)adaptor.Create(char_literal111, "char_literal111", retval);
				adaptor.AddChild(root_0, char_literal111_tree);
				}
				DebugLocation(183, 26);
				PushFollow(Follow._statement_in_complexStatement870);
				statement112=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement112.Tree, statement112, "statement112", retval);
				DebugLocation(183, 36);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:183:36: ( conditional )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==ElseIf))
				{
					int LA35_2 = input.LA(2);

					if ((EvaluatePredicate(synpred46_Php_fragment)))
					{
						alt35 = 1;
					}
				}
				else if ((LA35_1==Else))
				{
					int LA35_2 = input.LA(2);

					if ((EvaluatePredicate(synpred46_Php_fragment)))
					{
						alt35 = 1;
					}
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:183:36: conditional
					{
					DebugLocation(183, 36);
					PushFollow(Follow._conditional_in_complexStatement872);
					conditional113=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional113.Tree, conditional113, "conditional113", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(35); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:184:4: For '(' forInit forCondition forUpdate ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(184, 4);
				For114=(IToken)Match(input,For,Follow._For_in_complexStatement878); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For114_tree = (object)adaptor.Create(For114, "For114", retval);
				adaptor.AddChild(root_0, For114_tree);
				}
				DebugLocation(184, 8);
				char_literal115=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement880); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal115_tree = (object)adaptor.Create(char_literal115, "char_literal115", retval);
				adaptor.AddChild(root_0, char_literal115_tree);
				}
				DebugLocation(184, 12);
				PushFollow(Follow._forInit_in_complexStatement882);
				forInit116=forInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forInit116.Tree, forInit116, "forInit116", retval);
				DebugLocation(184, 20);
				PushFollow(Follow._forCondition_in_complexStatement884);
				forCondition117=forCondition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forCondition117.Tree, forCondition117, "forCondition117", retval);
				DebugLocation(184, 33);
				PushFollow(Follow._forUpdate_in_complexStatement886);
				forUpdate118=forUpdate();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forUpdate118.Tree, forUpdate118, "forUpdate118", retval);
				DebugLocation(184, 43);
				char_literal119=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement888); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal119_tree = (object)adaptor.Create(char_literal119, "char_literal119", retval);
				adaptor.AddChild(root_0, char_literal119_tree);
				}
				DebugLocation(184, 47);
				PushFollow(Follow._statement_in_complexStatement890);
				statement120=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement120.Tree, statement120, "statement120", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:185:4: Foreach '(' expression As arrayEntry ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(185, 4);
				Foreach121=(IToken)Match(input,Foreach,Follow._Foreach_in_complexStatement895); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach121_tree = (object)adaptor.Create(Foreach121, "Foreach121", retval);
				adaptor.AddChild(root_0, Foreach121_tree);
				}
				DebugLocation(185, 12);
				char_literal122=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement897); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal122_tree = (object)adaptor.Create(char_literal122, "char_literal122", retval);
				adaptor.AddChild(root_0, char_literal122_tree);
				}
				DebugLocation(185, 16);
				PushFollow(Follow._expression_in_complexStatement899);
				expression123=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression123.Tree, expression123, "expression123", retval);
				DebugLocation(185, 27);
				As124=(IToken)Match(input,As,Follow._As_in_complexStatement901); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As124_tree = (object)adaptor.Create(As124, "As124", retval);
				adaptor.AddChild(root_0, As124_tree);
				}
				DebugLocation(185, 30);
				PushFollow(Follow._arrayEntry_in_complexStatement903);
				arrayEntry125=arrayEntry();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry125.Tree, arrayEntry125, "arrayEntry125", retval);
				DebugLocation(185, 41);
				char_literal126=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement905); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal126_tree = (object)adaptor.Create(char_literal126, "char_literal126", retval);
				adaptor.AddChild(root_0, char_literal126_tree);
				}
				DebugLocation(185, 45);
				PushFollow(Follow._statement_in_complexStatement907);
				statement127=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement127.Tree, statement127, "statement127", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:186:4: While '(' ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(186, 4);
				While128=(IToken)Match(input,While,Follow._While_in_complexStatement912); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While128_tree = (object)adaptor.Create(While128, "While128", retval);
				adaptor.AddChild(root_0, While128_tree);
				}
				DebugLocation(186, 10);
				char_literal129=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement914); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal129_tree = (object)adaptor.Create(char_literal129, "char_literal129", retval);
				adaptor.AddChild(root_0, char_literal129_tree);
				}
				DebugLocation(186, 14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:186:14: ( expression )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==Ampersand||LA36_1==ArrayType||LA36_1==Bang||(LA36_1>=BoolType && LA36_1<=BooleanType)||LA36_1==Clone||LA36_1==Die||(LA36_1>=DoubleQuotedString && LA36_1<=DoubleType)||LA36_1==Empty||(LA36_1>=Eval && LA36_1<=Exit)||LA36_1==False||LA36_1==FloatType||LA36_1==Function||LA36_1==HaltCompiler||LA36_1==HereDoc||(LA36_1>=Include && LA36_1<=IncrementOperator)||(LA36_1>=IntType && LA36_1<=IntegerType)||(LA36_1>=Isset && LA36_1<=List)||LA36_1==Minus||(LA36_1>=New && LA36_1<=Null)||LA36_1==ObjectType||(LA36_1>=OpenRoundBracket && LA36_1<=OpenSquareBracket)||LA36_1==Plus||(LA36_1>=Real && LA36_1<=RequireOnce)||LA36_1==SingleQuotedString||(LA36_1>=Static && LA36_1<=SuppressWarnings)||(LA36_1>=Tilde && LA36_1<=True)||LA36_1==UnquotedString||LA36_1==UnsetType||LA36_1==VariableName||(LA36_1>=128 && LA36_1<=129)))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:186:14: expression
					{
					DebugLocation(186, 14);
					PushFollow(Follow._expression_in_complexStatement916);
					expression130=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression130.Tree, expression130, "expression130", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(36); }

				DebugLocation(186, 26);
				char_literal131=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement919); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal131_tree = (object)adaptor.Create(char_literal131, "char_literal131", retval);
				adaptor.AddChild(root_0, char_literal131_tree);
				}
				DebugLocation(186, 30);
				PushFollow(Follow._statement_in_complexStatement921);
				statement132=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement132.Tree, statement132, "statement132", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:187:4: Do statement While '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(187, 4);
				Do133=(IToken)Match(input,Do,Follow._Do_in_complexStatement926); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Do133_tree = (object)adaptor.Create(Do133, "Do133", retval);
				adaptor.AddChild(root_0, Do133_tree);
				}
				DebugLocation(187, 7);
				PushFollow(Follow._statement_in_complexStatement928);
				statement134=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement134.Tree, statement134, "statement134", retval);
				DebugLocation(187, 17);
				While135=(IToken)Match(input,While,Follow._While_in_complexStatement930); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While135_tree = (object)adaptor.Create(While135, "While135", retval);
				adaptor.AddChild(root_0, While135_tree);
				}
				DebugLocation(187, 23);
				char_literal136=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement932); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal136_tree = (object)adaptor.Create(char_literal136, "char_literal136", retval);
				adaptor.AddChild(root_0, char_literal136_tree);
				}
				DebugLocation(187, 27);
				PushFollow(Follow._expression_in_complexStatement934);
				expression137=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression137.Tree, expression137, "expression137", retval);
				DebugLocation(187, 38);
				char_literal138=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement936); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal138_tree = (object)adaptor.Create(char_literal138, "char_literal138", retval);
				adaptor.AddChild(root_0, char_literal138_tree);
				}
				DebugLocation(187, 42);
				char_literal139=(IToken)Match(input,SemiColon,Follow._SemiColon_in_complexStatement938); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal139_tree = (object)adaptor.Create(char_literal139, "char_literal139", retval);
				adaptor.AddChild(root_0, char_literal139_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:188:4: Switch '(' expression ')' '{' cases '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(188, 4);
				Switch140=(IToken)Match(input,Switch,Follow._Switch_in_complexStatement943); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Switch140_tree = (object)adaptor.Create(Switch140, "Switch140", retval);
				adaptor.AddChild(root_0, Switch140_tree);
				}
				DebugLocation(188, 11);
				char_literal141=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement945); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal141_tree = (object)adaptor.Create(char_literal141, "char_literal141", retval);
				adaptor.AddChild(root_0, char_literal141_tree);
				}
				DebugLocation(188, 15);
				PushFollow(Follow._expression_in_complexStatement947);
				expression142=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression142.Tree, expression142, "expression142", retval);
				DebugLocation(188, 26);
				char_literal143=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement949); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal143_tree = (object)adaptor.Create(char_literal143, "char_literal143", retval);
				adaptor.AddChild(root_0, char_literal143_tree);
				}
				DebugLocation(188, 30);
				char_literal144=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_complexStatement951); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal144_tree = (object)adaptor.Create(char_literal144, "char_literal144", retval);
				adaptor.AddChild(root_0, char_literal144_tree);
				}
				DebugLocation(188, 33);
				PushFollow(Follow._cases_in_complexStatement952);
				cases145=cases();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cases145.Tree, cases145, "cases145", retval);
				DebugLocation(188, 38);
				char_literal146=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_complexStatement953); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal146_tree = (object)adaptor.Create(char_literal146, "char_literal146", retval);
				adaptor.AddChild(root_0, char_literal146_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:189:4: tryStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(189, 4);
				PushFollow(Follow._tryStatement_in_complexStatement958);
				tryStatement147=tryStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tryStatement147.Tree, tryStatement147, "tryStatement147", retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:190:4: functionDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 4);
				PushFollow(Follow._functionDefinition_in_complexStatement963);
				functionDefinition148=functionDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionDefinition148.Tree, functionDefinition148, "functionDefinition148", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("complexStatement", 20);
			LeaveRule("complexStatement", 20);
			LeaveRule_complexStatement();
			if (state.backtracking > 0) { Memoize(input, 20, complexStatement_StartIndex); }

		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "complexStatement"); }
		return retval;

	}
	// $ANTLR end "complexStatement"

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();
	// $ANTLR start "tryStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:193:1: tryStatement : Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )? ;
	[GrammarRule("tryStatement")]
	private Antlr3AstNode tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 21);
		var retval = new Antlr3AstNode("tryStatement");
		
		retval.Start = (IToken)input.LT(1);
		int tryStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Try149 = default(IToken);
		IToken Catch151 = default(IToken);
		IToken char_literal152 = default(IToken);
		IToken char_literal155 = default(IToken);
		IToken Finally157 = default(IToken);
		Antlr3AstNode bracketedBlock150 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName153 = default(Antlr3AstNode);
		Antlr3AstNode variable154 = default(Antlr3AstNode);
		Antlr3AstNode bracketedBlock156 = default(Antlr3AstNode);
		Antlr3AstNode bracketedBlock158 = default(Antlr3AstNode);

		object Try149_tree = default(object);
		object Catch151_tree = default(object);
		object char_literal152_tree = default(object);
		object char_literal155_tree = default(object);
		object Finally157_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(193, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:194:2: ( Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:194:4: Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(194, 4);
			Try149=(IToken)Match(input,Try,Follow._Try_in_tryStatement975); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Try149_tree = (object)adaptor.Create(Try149, "Try149", retval);
			adaptor.AddChild(root_0, Try149_tree);
			}
			DebugLocation(194, 8);
			PushFollow(Follow._bracketedBlock_in_tryStatement977);
			bracketedBlock150=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock150.Tree, bracketedBlock150, "bracketedBlock150", retval);
			DebugLocation(195, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:195:4: ( Catch '(' qualifiedName variable ')' bracketedBlock )+
			int cnt38=0;
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==Catch))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:195:5: Catch '(' qualifiedName variable ')' bracketedBlock
					{
					DebugLocation(195, 5);
					Catch151=(IToken)Match(input,Catch,Follow._Catch_in_tryStatement983); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Catch151_tree = (object)adaptor.Create(Catch151, "Catch151", retval);
					adaptor.AddChild(root_0, Catch151_tree);
					}
					DebugLocation(195, 11);
					char_literal152=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_tryStatement985); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal152_tree = (object)adaptor.Create(char_literal152, "char_literal152", retval);
					adaptor.AddChild(root_0, char_literal152_tree);
					}
					DebugLocation(195, 15);
					PushFollow(Follow._qualifiedName_in_tryStatement987);
					qualifiedName153=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName153.Tree, qualifiedName153, "qualifiedName153", retval);
					DebugLocation(195, 29);
					PushFollow(Follow._variable_in_tryStatement989);
					variable154=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable154.Tree, variable154, "variable154", retval);
					DebugLocation(195, 38);
					char_literal155=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_tryStatement991); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal155_tree = (object)adaptor.Create(char_literal155, "char_literal155", retval);
					adaptor.AddChild(root_0, char_literal155_tree);
					}
					DebugLocation(195, 42);
					PushFollow(Follow._bracketedBlock_in_tryStatement993);
					bracketedBlock156=bracketedBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock156.Tree, bracketedBlock156, "bracketedBlock156", retval);

					}
					break;

				default:
					if (cnt38 >= 1)
						goto loop38;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee38 = new EarlyExitException( 38, input );
					DebugRecognitionException(eee38);
					throw eee38;
				}
				cnt38++;
			}
			loop38:
				;

			} finally { DebugExitSubRule(38); }

			DebugLocation(196, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:196:4: ( Finally bracketedBlock )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_1 = input.LA(1);

			if ((LA39_1==Finally))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:196:5: Finally bracketedBlock
				{
				DebugLocation(196, 5);
				Finally157=(IToken)Match(input,Finally,Follow._Finally_in_tryStatement1001); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Finally157_tree = (object)adaptor.Create(Finally157, "Finally157", retval);
				adaptor.AddChild(root_0, Finally157_tree);
				}
				DebugLocation(196, 13);
				PushFollow(Follow._bracketedBlock_in_tryStatement1003);
				bracketedBlock158=bracketedBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock158.Tree, bracketedBlock158, "bracketedBlock158", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryStatement", 21);
			LeaveRule("tryStatement", 21);
			LeaveRule_tryStatement();
			if (state.backtracking > 0) { Memoize(input, 21, tryStatement_StartIndex); }

		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return retval;

	}
	// $ANTLR end "tryStatement"

	partial void EnterRule_simpleStatement();
	partial void LeaveRule_simpleStatement();
	// $ANTLR start "simpleStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:199:1: simpleStatement : ( Echo commaList | Global variable ( ',' variable )* | Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* | constDefinition | Break ( Integer )? | Continue ( Integer )? | Goto UnquotedString | Return ( expression )? | Goto UnquotedString | Throw expression | expression );
	[GrammarRule("simpleStatement")]
	private Antlr3AstNode simpleStatement()
	{
		EnterRule_simpleStatement();
		EnterRule("simpleStatement", 22);
		var retval = new Antlr3AstNode("simpleStatement");
		
		retval.Start = (IToken)input.LT(1);
		int simpleStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Echo159 = default(IToken);
		IToken Global161 = default(IToken);
		IToken char_literal163 = default(IToken);
		IToken Static165 = default(IToken);
		IToken VariableName166 = default(IToken);
		IToken Equals167 = default(IToken);
		IToken char_literal169 = default(IToken);
		IToken VariableName170 = default(IToken);
		IToken Equals171 = default(IToken);
		IToken Break174 = default(IToken);
		IToken Integer175 = default(IToken);
		IToken Continue176 = default(IToken);
		IToken Integer177 = default(IToken);
		IToken Goto178 = default(IToken);
		IToken UnquotedString179 = default(IToken);
		IToken Return180 = default(IToken);
		IToken Goto182 = default(IToken);
		IToken UnquotedString183 = default(IToken);
		IToken Throw184 = default(IToken);
		Antlr3AstNode commaList160 = default(Antlr3AstNode);
		Antlr3AstNode variable162 = default(Antlr3AstNode);
		Antlr3AstNode variable164 = default(Antlr3AstNode);
		Antlr3AstNode atom168 = default(Antlr3AstNode);
		Antlr3AstNode atom172 = default(Antlr3AstNode);
		Antlr3AstNode constDefinition173 = default(Antlr3AstNode);
		Antlr3AstNode expression181 = default(Antlr3AstNode);
		Antlr3AstNode expression185 = default(Antlr3AstNode);
		Antlr3AstNode expression186 = default(Antlr3AstNode);

		object Echo159_tree = default(object);
		object Global161_tree = default(object);
		object char_literal163_tree = default(object);
		object Static165_tree = default(object);
		object VariableName166_tree = default(object);
		object Equals167_tree = default(object);
		object char_literal169_tree = default(object);
		object VariableName170_tree = default(object);
		object Equals171_tree = default(object);
		object Break174_tree = default(object);
		object Integer175_tree = default(object);
		object Continue176_tree = default(object);
		object Integer177_tree = default(object);
		object Goto178_tree = default(object);
		object UnquotedString179_tree = default(object);
		object Return180_tree = default(object);
		object Goto182_tree = default(object);
		object UnquotedString183_tree = default(object);
		object Throw184_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "simpleStatement");
		DebugLocation(199, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:200:2: ( Echo commaList | Global variable ( ',' variable )* | Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* | constDefinition | Break ( Integer )? | Continue ( Integer )? | Goto UnquotedString | Return ( expression )? | Goto UnquotedString | Throw expression | expression )
			int alt47=11;
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case Echo:
				{
				alt47 = 1;
				}
				break;
			case Global:
				{
				alt47 = 2;
				}
				break;
			case Static:
				{
				int LA47_2 = input.LA(2);

				if ((LA47_2==VariableName))
				{
					alt47 = 3;
				}
				else if ((LA47_2==EOF||(LA47_2>=Ampersand && LA47_2<=And)||LA47_2==Asterisk||LA47_2==BodyString||LA47_2==ClassMember||LA47_2==ComparisionOperator||LA47_2==Dot||LA47_2==EqualityOperator||LA47_2==Forwardslash||LA47_2==Hat||(LA47_2>=InstanceMember && LA47_2<=Instanceof)||(LA47_2>=LogicalAnd && LA47_2<=Minus)||(LA47_2>=OpenCurlyBracket && LA47_2<=Plus)||LA47_2==QuestionMark||(LA47_2>=SemiColon && LA47_2<=ShiftOperator)||LA47_2==Xor||LA47_2==129))
				{
					alt47 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 47, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Const:
				{
				alt47 = 4;
				}
				break;
			case Break:
				{
				alt47 = 5;
				}
				break;
			case Continue:
				{
				alt47 = 6;
				}
				break;
			case Goto:
				{
				int LA47_2 = input.LA(2);

				if ((LA47_2==UnquotedString))
				{
					int LA47_3 = input.LA(3);

					if ((EvaluatePredicate(synpred69_Php_fragment)))
					{
						alt47 = 7;
					}
					else if ((EvaluatePredicate(synpred72_Php_fragment)))
					{
						alt47 = 9;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 47, 12, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 47, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Return:
				{
				alt47 = 8;
				}
				break;
			case Throw:
				{
				alt47 = 10;
				}
				break;
			case Ampersand:
			case ArrayType:
			case Bang:
			case BoolType:
			case BooleanType:
			case Clone:
			case Die:
			case DoubleQuotedString:
			case DoubleType:
			case Empty:
			case Eval:
			case Exit:
			case False:
			case FloatType:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case IncrementOperator:
			case IntType:
			case Integer:
			case IntegerType:
			case Isset:
			case List:
			case Minus:
			case New:
			case Null:
			case ObjectType:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case StringType:
			case SuppressWarnings:
			case Tilde:
			case True:
			case UnquotedString:
			case UnsetType:
			case VariableName:
			case 128:
			case 129:
				{
				alt47 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:200:4: Echo commaList
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(200, 4);
				Echo159=(IToken)Match(input,Echo,Follow._Echo_in_simpleStatement1016); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Echo159_tree = (object)adaptor.Create(Echo159, "Echo159", retval);
				adaptor.AddChild(root_0, Echo159_tree);
				}
				DebugLocation(200, 9);
				PushFollow(Follow._commaList_in_simpleStatement1018);
				commaList160=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList160.Tree, commaList160, "commaList160", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:201:4: Global variable ( ',' variable )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(201, 4);
				Global161=(IToken)Match(input,Global,Follow._Global_in_simpleStatement1023); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Global161_tree = (object)adaptor.Create(Global161, "Global161", retval);
				adaptor.AddChild(root_0, Global161_tree);
				}
				DebugLocation(201, 11);
				PushFollow(Follow._variable_in_simpleStatement1025);
				variable162=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable162.Tree, variable162, "variable162", retval);
				DebugLocation(201, 20);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:201:20: ( ',' variable )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_1 = input.LA(1);

					if ((LA40_1==Comma))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:201:21: ',' variable
						{
						DebugLocation(201, 21);
						char_literal163=(IToken)Match(input,Comma,Follow._Comma_in_simpleStatement1028); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal163_tree = (object)adaptor.Create(char_literal163, "char_literal163", retval);
						adaptor.AddChild(root_0, char_literal163_tree);
						}
						DebugLocation(201, 25);
						PushFollow(Follow._variable_in_simpleStatement1030);
						variable164=variable();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, variable164.Tree, variable164, "variable164", retval);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:202:4: Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(202, 4);
				Static165=(IToken)Match(input,Static,Follow._Static_in_simpleStatement1038); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static165_tree = (object)adaptor.Create(Static165, "Static165", retval);
				adaptor.AddChild(root_0, Static165_tree);
				}
				DebugLocation(202, 11);
				VariableName166=(IToken)Match(input,VariableName,Follow._VariableName_in_simpleStatement1040); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName166_tree = (object)adaptor.Create(VariableName166, "VariableName166", retval);
				adaptor.AddChild(root_0, VariableName166_tree);
				}
				DebugLocation(202, 24);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:202:24: ( Equals atom )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==Equals))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:202:25: Equals atom
					{
					DebugLocation(202, 25);
					Equals167=(IToken)Match(input,Equals,Follow._Equals_in_simpleStatement1043); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Equals167_tree = (object)adaptor.Create(Equals167, "Equals167", retval);
					adaptor.AddChild(root_0, Equals167_tree);
					}
					DebugLocation(202, 32);
					PushFollow(Follow._atom_in_simpleStatement1045);
					atom168=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom168.Tree, atom168, "atom168", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(202, 39);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:202:39: ( ',' VariableName ( Equals atom )? )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_1 = input.LA(1);

					if ((LA43_1==Comma))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:202:40: ',' VariableName ( Equals atom )?
						{
						DebugLocation(202, 40);
						char_literal169=(IToken)Match(input,Comma,Follow._Comma_in_simpleStatement1050); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal169_tree = (object)adaptor.Create(char_literal169, "char_literal169", retval);
						adaptor.AddChild(root_0, char_literal169_tree);
						}
						DebugLocation(202, 44);
						VariableName170=(IToken)Match(input,VariableName,Follow._VariableName_in_simpleStatement1052); if (state.failed) return retval;
						if (state.backtracking == 0) {
						VariableName170_tree = (object)adaptor.Create(VariableName170, "VariableName170", retval);
						adaptor.AddChild(root_0, VariableName170_tree);
						}
						DebugLocation(202, 57);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:202:57: ( Equals atom )?
						int alt42=2;
						try { DebugEnterSubRule(42);
						try { DebugEnterDecision(42, false);
						int LA42_1 = input.LA(1);

						if ((LA42_1==Equals))
						{
							alt42 = 1;
						}
						} finally { DebugExitDecision(42); }
						switch (alt42)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:202:58: Equals atom
							{
							DebugLocation(202, 58);
							Equals171=(IToken)Match(input,Equals,Follow._Equals_in_simpleStatement1055); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Equals171_tree = (object)adaptor.Create(Equals171, "Equals171", retval);
							adaptor.AddChild(root_0, Equals171_tree);
							}
							DebugLocation(202, 65);
							PushFollow(Follow._atom_in_simpleStatement1057);
							atom172=atom();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, atom172.Tree, atom172, "atom172", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(42); }


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:203:4: constDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(203, 4);
				PushFollow(Follow._constDefinition_in_simpleStatement1066);
				constDefinition173=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition173.Tree, constDefinition173, "constDefinition173", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:204:4: Break ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(204, 4);
				Break174=(IToken)Match(input,Break,Follow._Break_in_simpleStatement1071); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Break174_tree = (object)adaptor.Create(Break174, "Break174", retval);
				adaptor.AddChild(root_0, Break174_tree);
				}
				DebugLocation(204, 10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:204:10: ( Integer )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==Integer))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:204:10: Integer
					{
					DebugLocation(204, 10);
					Integer175=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement1073); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer175_tree = (object)adaptor.Create(Integer175, "Integer175", retval);
					adaptor.AddChild(root_0, Integer175_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(44); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:205:4: Continue ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(205, 4);
				Continue176=(IToken)Match(input,Continue,Follow._Continue_in_simpleStatement1079); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Continue176_tree = (object)adaptor.Create(Continue176, "Continue176", retval);
				adaptor.AddChild(root_0, Continue176_tree);
				}
				DebugLocation(205, 13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:205:13: ( Integer )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==Integer))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:205:13: Integer
					{
					DebugLocation(205, 13);
					Integer177=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement1081); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer177_tree = (object)adaptor.Create(Integer177, "Integer177", retval);
					adaptor.AddChild(root_0, Integer177_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(45); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:206:4: Goto UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(206, 4);
				Goto178=(IToken)Match(input,Goto,Follow._Goto_in_simpleStatement1087); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto178_tree = (object)adaptor.Create(Goto178, "Goto178", retval);
				adaptor.AddChild(root_0, Goto178_tree);
				}
				DebugLocation(206, 9);
				UnquotedString179=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_simpleStatement1089); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString179_tree = (object)adaptor.Create(UnquotedString179, "UnquotedString179", retval);
				adaptor.AddChild(root_0, UnquotedString179_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:207:4: Return ( expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(207, 4);
				Return180=(IToken)Match(input,Return,Follow._Return_in_simpleStatement1094); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Return180_tree = (object)adaptor.Create(Return180, "Return180", retval);
				adaptor.AddChild(root_0, Return180_tree);
				}
				DebugLocation(207, 11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:207:11: ( expression )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==Ampersand||LA46_1==ArrayType||LA46_1==Bang||(LA46_1>=BoolType && LA46_1<=BooleanType)||LA46_1==Clone||LA46_1==Die||(LA46_1>=DoubleQuotedString && LA46_1<=DoubleType)||LA46_1==Empty||(LA46_1>=Eval && LA46_1<=Exit)||LA46_1==False||LA46_1==FloatType||LA46_1==Function||LA46_1==HaltCompiler||LA46_1==HereDoc||(LA46_1>=Include && LA46_1<=IncrementOperator)||(LA46_1>=IntType && LA46_1<=IntegerType)||(LA46_1>=Isset && LA46_1<=List)||LA46_1==Minus||(LA46_1>=New && LA46_1<=Null)||LA46_1==ObjectType||(LA46_1>=OpenRoundBracket && LA46_1<=OpenSquareBracket)||LA46_1==Plus||(LA46_1>=Real && LA46_1<=RequireOnce)||LA46_1==SingleQuotedString||(LA46_1>=Static && LA46_1<=SuppressWarnings)||(LA46_1>=Tilde && LA46_1<=True)||LA46_1==UnquotedString||LA46_1==UnsetType||LA46_1==VariableName||(LA46_1>=128 && LA46_1<=129)))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:207:11: expression
					{
					DebugLocation(207, 11);
					PushFollow(Follow._expression_in_simpleStatement1096);
					expression181=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression181.Tree, expression181, "expression181", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(46); }


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:208:4: Goto UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(208, 4);
				Goto182=(IToken)Match(input,Goto,Follow._Goto_in_simpleStatement1102); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto182_tree = (object)adaptor.Create(Goto182, "Goto182", retval);
				adaptor.AddChild(root_0, Goto182_tree);
				}
				DebugLocation(208, 9);
				UnquotedString183=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_simpleStatement1104); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString183_tree = (object)adaptor.Create(UnquotedString183, "UnquotedString183", retval);
				adaptor.AddChild(root_0, UnquotedString183_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:209:4: Throw expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(209, 4);
				Throw184=(IToken)Match(input,Throw,Follow._Throw_in_simpleStatement1109); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Throw184_tree = (object)adaptor.Create(Throw184, "Throw184", retval);
				adaptor.AddChild(root_0, Throw184_tree);
				}
				DebugLocation(209, 10);
				PushFollow(Follow._expression_in_simpleStatement1111);
				expression185=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression185.Tree, expression185, "expression185", retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:210:4: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._expression_in_simpleStatement1116);
				expression186=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression186.Tree, expression186, "expression186", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleStatement", 22);
			LeaveRule("simpleStatement", 22);
			LeaveRule_simpleStatement();
			if (state.backtracking > 0) { Memoize(input, 22, simpleStatement_StartIndex); }

		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "simpleStatement"); }
		return retval;

	}
	// $ANTLR end "simpleStatement"

	partial void EnterRule_conditional();
	partial void LeaveRule_conditional();
	// $ANTLR start "conditional"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:213:1: conditional : ( ElseIf '(' expression ')' statement ( conditional )? | Else statement );
	[GrammarRule("conditional")]
	private Antlr3AstNode conditional()
	{
		EnterRule_conditional();
		EnterRule("conditional", 23);
		var retval = new Antlr3AstNode("conditional");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ElseIf187 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken char_literal190 = default(IToken);
		IToken Else193 = default(IToken);
		Antlr3AstNode expression189 = default(Antlr3AstNode);
		Antlr3AstNode statement191 = default(Antlr3AstNode);
		Antlr3AstNode conditional192 = default(Antlr3AstNode);
		Antlr3AstNode statement194 = default(Antlr3AstNode);

		object ElseIf187_tree = default(object);
		object char_literal188_tree = default(object);
		object char_literal190_tree = default(object);
		object Else193_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional");
		DebugLocation(213, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:2: ( ElseIf '(' expression ')' statement ( conditional )? | Else statement )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==ElseIf))
			{
				alt49 = 1;
			}
			else if ((LA49_1==Else))
			{
				alt49 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:4: ElseIf '(' expression ')' statement ( conditional )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(214, 4);
				ElseIf187=(IToken)Match(input,ElseIf,Follow._ElseIf_in_conditional1127); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf187_tree = (object)adaptor.Create(ElseIf187, "ElseIf187", retval);
				adaptor.AddChild(root_0, ElseIf187_tree);
				}
				DebugLocation(214, 11);
				char_literal188=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_conditional1129); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal188_tree = (object)adaptor.Create(char_literal188, "char_literal188", retval);
				adaptor.AddChild(root_0, char_literal188_tree);
				}
				DebugLocation(214, 15);
				PushFollow(Follow._expression_in_conditional1131);
				expression189=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression189.Tree, expression189, "expression189", retval);
				DebugLocation(214, 26);
				char_literal190=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_conditional1133); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal190_tree = (object)adaptor.Create(char_literal190, "char_literal190", retval);
				adaptor.AddChild(root_0, char_literal190_tree);
				}
				DebugLocation(214, 30);
				PushFollow(Follow._statement_in_conditional1135);
				statement191=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement191.Tree, statement191, "statement191", retval);
				DebugLocation(214, 40);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:40: ( conditional )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==ElseIf))
				{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred74_Php_fragment)))
					{
						alt48 = 1;
					}
				}
				else if ((LA48_1==Else))
				{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred74_Php_fragment)))
					{
						alt48 = 1;
					}
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:40: conditional
					{
					DebugLocation(214, 40);
					PushFollow(Follow._conditional_in_conditional1137);
					conditional192=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional192.Tree, conditional192, "conditional192", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:215:4: Else statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(215, 4);
				Else193=(IToken)Match(input,Else,Follow._Else_in_conditional1143); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else193_tree = (object)adaptor.Create(Else193, "Else193", retval);
				adaptor.AddChild(root_0, Else193_tree);
				}
				DebugLocation(215, 9);
				PushFollow(Follow._statement_in_conditional1145);
				statement194=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement194.Tree, statement194, "statement194", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional", 23);
			LeaveRule("conditional", 23);
			LeaveRule_conditional();
			if (state.backtracking > 0) { Memoize(input, 23, conditional_StartIndex); }

		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional"); }
		return retval;

	}
	// $ANTLR end "conditional"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:218:1: forInit : ( commaList )? ';' ;
	[GrammarRule("forInit")]
	private Antlr3AstNode forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 24);
		var retval = new Antlr3AstNode("forInit");
		
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal196 = default(IToken);
		Antlr3AstNode commaList195 = default(Antlr3AstNode);

		object char_literal196_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(218, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:219:2: ( ( commaList )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:219:4: ( commaList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(219, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:219:4: ( commaList )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==Ampersand||LA50_1==ArrayType||LA50_1==Bang||(LA50_1>=BoolType && LA50_1<=BooleanType)||LA50_1==Clone||LA50_1==Die||(LA50_1>=DoubleQuotedString && LA50_1<=DoubleType)||LA50_1==Empty||(LA50_1>=Eval && LA50_1<=Exit)||LA50_1==False||LA50_1==FloatType||LA50_1==Function||LA50_1==HaltCompiler||LA50_1==HereDoc||(LA50_1>=Include && LA50_1<=IncrementOperator)||(LA50_1>=IntType && LA50_1<=IntegerType)||(LA50_1>=Isset && LA50_1<=List)||LA50_1==Minus||(LA50_1>=New && LA50_1<=Null)||LA50_1==ObjectType||(LA50_1>=OpenRoundBracket && LA50_1<=OpenSquareBracket)||LA50_1==Plus||(LA50_1>=Real && LA50_1<=RequireOnce)||LA50_1==SingleQuotedString||(LA50_1>=Static && LA50_1<=SuppressWarnings)||(LA50_1>=Tilde && LA50_1<=True)||LA50_1==UnquotedString||LA50_1==UnsetType||LA50_1==VariableName||(LA50_1>=128 && LA50_1<=129)))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:219:4: commaList
				{
				DebugLocation(219, 4);
				PushFollow(Follow._commaList_in_forInit1156);
				commaList195=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList195.Tree, commaList195, "commaList195", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(219, 15);
			char_literal196=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forInit1159); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal196_tree = (object)adaptor.Create(char_literal196, "char_literal196", retval);
			adaptor.AddChild(root_0, char_literal196_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 24);
			LeaveRule("forInit", 24);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 24, forInit_StartIndex); }

		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:222:1: forCondition : ( commaList )? ';' ;
	[GrammarRule("forCondition")]
	private Antlr3AstNode forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 25);
		var retval = new Antlr3AstNode("forCondition");
		
		retval.Start = (IToken)input.LT(1);
		int forCondition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal198 = default(IToken);
		Antlr3AstNode commaList197 = default(Antlr3AstNode);

		object char_literal198_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(222, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:223:2: ( ( commaList )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:223:4: ( commaList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(223, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:223:4: ( commaList )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_1 = input.LA(1);

			if ((LA51_1==Ampersand||LA51_1==ArrayType||LA51_1==Bang||(LA51_1>=BoolType && LA51_1<=BooleanType)||LA51_1==Clone||LA51_1==Die||(LA51_1>=DoubleQuotedString && LA51_1<=DoubleType)||LA51_1==Empty||(LA51_1>=Eval && LA51_1<=Exit)||LA51_1==False||LA51_1==FloatType||LA51_1==Function||LA51_1==HaltCompiler||LA51_1==HereDoc||(LA51_1>=Include && LA51_1<=IncrementOperator)||(LA51_1>=IntType && LA51_1<=IntegerType)||(LA51_1>=Isset && LA51_1<=List)||LA51_1==Minus||(LA51_1>=New && LA51_1<=Null)||LA51_1==ObjectType||(LA51_1>=OpenRoundBracket && LA51_1<=OpenSquareBracket)||LA51_1==Plus||(LA51_1>=Real && LA51_1<=RequireOnce)||LA51_1==SingleQuotedString||(LA51_1>=Static && LA51_1<=SuppressWarnings)||(LA51_1>=Tilde && LA51_1<=True)||LA51_1==UnquotedString||LA51_1==UnsetType||LA51_1==VariableName||(LA51_1>=128 && LA51_1<=129)))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:223:4: commaList
				{
				DebugLocation(223, 4);
				PushFollow(Follow._commaList_in_forCondition1170);
				commaList197=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList197.Tree, commaList197, "commaList197", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(223, 15);
			char_literal198=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forCondition1173); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal198_tree = (object)adaptor.Create(char_literal198, "char_literal198", retval);
			adaptor.AddChild(root_0, char_literal198_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forCondition", 25);
			LeaveRule("forCondition", 25);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 25, forCondition_StartIndex); }

		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return retval;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdate();
	partial void LeaveRule_forUpdate();
	// $ANTLR start "forUpdate"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:226:1: forUpdate : ( commaList )? ;
	[GrammarRule("forUpdate")]
	private Antlr3AstNode forUpdate()
	{
		EnterRule_forUpdate();
		EnterRule("forUpdate", 26);
		var retval = new Antlr3AstNode("forUpdate");
		
		retval.Start = (IToken)input.LT(1);
		int forUpdate_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode commaList199 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "forUpdate");
		DebugLocation(226, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:227:2: ( ( commaList )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:227:4: ( commaList )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(227, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:227:4: ( commaList )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==Ampersand||LA52_1==ArrayType||LA52_1==Bang||(LA52_1>=BoolType && LA52_1<=BooleanType)||LA52_1==Clone||LA52_1==Die||(LA52_1>=DoubleQuotedString && LA52_1<=DoubleType)||LA52_1==Empty||(LA52_1>=Eval && LA52_1<=Exit)||LA52_1==False||LA52_1==FloatType||LA52_1==Function||LA52_1==HaltCompiler||LA52_1==HereDoc||(LA52_1>=Include && LA52_1<=IncrementOperator)||(LA52_1>=IntType && LA52_1<=IntegerType)||(LA52_1>=Isset && LA52_1<=List)||LA52_1==Minus||(LA52_1>=New && LA52_1<=Null)||LA52_1==ObjectType||(LA52_1>=OpenRoundBracket && LA52_1<=OpenSquareBracket)||LA52_1==Plus||(LA52_1>=Real && LA52_1<=RequireOnce)||LA52_1==SingleQuotedString||(LA52_1>=Static && LA52_1<=SuppressWarnings)||(LA52_1>=Tilde && LA52_1<=True)||LA52_1==UnquotedString||LA52_1==UnsetType||LA52_1==VariableName||(LA52_1>=128 && LA52_1<=129)))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:227:4: commaList
				{
				DebugLocation(227, 4);
				PushFollow(Follow._commaList_in_forUpdate1185);
				commaList199=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList199.Tree, commaList199, "commaList199", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forUpdate", 26);
			LeaveRule("forUpdate", 26);
			LeaveRule_forUpdate();
			if (state.backtracking > 0) { Memoize(input, 26, forUpdate_StartIndex); }

		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "forUpdate"); }
		return retval;

	}
	// $ANTLR end "forUpdate"

	partial void EnterRule_cases();
	partial void LeaveRule_cases();
	// $ANTLR start "cases"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:230:1: cases : ( ( casestatement )* defaultcase ( casestatement )* | ( casestatement )+ );
	[GrammarRule("cases")]
	private Antlr3AstNode cases()
	{
		EnterRule_cases();
		EnterRule("cases", 27);
		var retval = new Antlr3AstNode("cases");
		
		retval.Start = (IToken)input.LT(1);
		int cases_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode casestatement200 = default(Antlr3AstNode);
		Antlr3AstNode defaultcase201 = default(Antlr3AstNode);
		Antlr3AstNode casestatement202 = default(Antlr3AstNode);
		Antlr3AstNode casestatement203 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "cases");
		DebugLocation(230, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:2: ( ( casestatement )* defaultcase ( casestatement )* | ( casestatement )+ )
			int alt56=2;
			try { DebugEnterDecision(56, false);
			int LA56_1 = input.LA(1);

			if ((LA56_1==Case))
			{
				int LA56_2 = input.LA(2);

				if ((EvaluatePredicate(synpred81_Php_fragment)))
				{
					alt56 = 1;
				}
				else if ((true))
				{
					alt56 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA56_1==Default))
			{
				alt56 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:4: ( casestatement )* defaultcase ( casestatement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(231, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:4: ( casestatement )*
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_1 = input.LA(1);

					if ((LA53_1==Case))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch ( alt53 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:4: casestatement
						{
						DebugLocation(231, 4);
						PushFollow(Follow._casestatement_in_cases1197);
						casestatement200=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement200.Tree, casestatement200, "casestatement200", retval);

						}
						break;

					default:
						goto loop53;
					}
				}

				loop53:
					;

				} finally { DebugExitSubRule(53); }

				DebugLocation(231, 19);
				PushFollow(Follow._defaultcase_in_cases1200);
				defaultcase201=defaultcase();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defaultcase201.Tree, defaultcase201, "defaultcase201", retval);
				DebugLocation(231, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:31: ( casestatement )*
				try { DebugEnterSubRule(54);
				while (true)
				{
					int alt54=2;
					try { DebugEnterDecision(54, false);
					int LA54_1 = input.LA(1);

					if ((LA54_1==Case))
					{
						alt54 = 1;
					}


					} finally { DebugExitDecision(54); }
					switch ( alt54 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:31: casestatement
						{
						DebugLocation(231, 31);
						PushFollow(Follow._casestatement_in_cases1202);
						casestatement202=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement202.Tree, casestatement202, "casestatement202", retval);

						}
						break;

					default:
						goto loop54;
					}
				}

				loop54:
					;

				} finally { DebugExitSubRule(54); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:232:4: ( casestatement )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(232, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:232:4: ( casestatement )+
				int cnt55=0;
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=2;
					try { DebugEnterDecision(55, false);
					int LA55_1 = input.LA(1);

					if ((LA55_1==Case))
					{
						alt55 = 1;
					}


					} finally { DebugExitDecision(55); }
					switch (alt55)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:232:4: casestatement
						{
						DebugLocation(232, 4);
						PushFollow(Follow._casestatement_in_cases1208);
						casestatement203=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement203.Tree, casestatement203, "casestatement203", retval);

						}
						break;

					default:
						if (cnt55 >= 1)
							goto loop55;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee55 = new EarlyExitException( 55, input );
						DebugRecognitionException(eee55);
						throw eee55;
					}
					cnt55++;
				}
				loop55:
					;

				} finally { DebugExitSubRule(55); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cases", 27);
			LeaveRule("cases", 27);
			LeaveRule_cases();
			if (state.backtracking > 0) { Memoize(input, 27, cases_StartIndex); }

		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "cases"); }
		return retval;

	}
	// $ANTLR end "cases"

	partial void EnterRule_casestatement();
	partial void LeaveRule_casestatement();
	// $ANTLR start "casestatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:235:1: casestatement : Case expression ( ':' | ';' ) ( statement )* ;
	[GrammarRule("casestatement")]
	private Antlr3AstNode casestatement()
	{
		EnterRule_casestatement();
		EnterRule("casestatement", 28);
		var retval = new Antlr3AstNode("casestatement");
		
		retval.Start = (IToken)input.LT(1);
		int casestatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Case204 = default(IToken);
		IToken set206 = default(IToken);
		Antlr3AstNode expression205 = default(Antlr3AstNode);
		Antlr3AstNode statement207 = default(Antlr3AstNode);

		object Case204_tree = default(object);
		object set206_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "casestatement");
		DebugLocation(235, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:236:2: ( Case expression ( ':' | ';' ) ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:236:4: Case expression ( ':' | ';' ) ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(236, 4);
			Case204=(IToken)Match(input,Case,Follow._Case_in_casestatement1220); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Case204_tree = (object)adaptor.Create(Case204, "Case204", retval);
			adaptor.AddChild(root_0, Case204_tree);
			}
			DebugLocation(236, 9);
			PushFollow(Follow._expression_in_casestatement1222);
			expression205=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression205.Tree, expression205, "expression205", retval);
			DebugLocation(236, 20);

			set206=(IToken)input.LT(1);
			if (input.LA(1)==Colon||input.LA(1)==SemiColon)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set206, "set206", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(236, 30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:236:30: ( statement )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if (((LA57_1>=Abstract && LA57_1<=Ampersand)||LA57_1==ArrayType||(LA57_1>=Bang && LA57_1<=BodyString)||(LA57_1>=BoolType && LA57_1<=Break)||LA57_1==Class||LA57_1==Clone||(LA57_1>=Const && LA57_1<=Continue)||LA57_1==Die||LA57_1==Do||(LA57_1>=DoubleQuotedString && LA57_1<=Echo)||LA57_1==Empty||(LA57_1>=Eval && LA57_1<=Exit)||LA57_1==False||(LA57_1>=FloatType && LA57_1<=Foreach)||(LA57_1>=Function && LA57_1<=HaltCompiler)||LA57_1==HereDoc||LA57_1==If||(LA57_1>=Include && LA57_1<=IncrementOperator)||(LA57_1>=IntType && LA57_1<=List)||LA57_1==Minus||(LA57_1>=Namespace && LA57_1<=Null)||LA57_1==ObjectType||(LA57_1>=OpenCurlyBracket && LA57_1<=OpenSquareBracket)||LA57_1==Plus||(LA57_1>=Real && LA57_1<=SemiColon)||LA57_1==SingleQuotedString||(LA57_1>=Static && LA57_1<=Try)||LA57_1==UnquotedString||LA57_1==UnsetType||(LA57_1>=VariableName && LA57_1<=While)||(LA57_1>=128 && LA57_1<=129)))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:236:30: statement
					{
					DebugLocation(236, 30);
					PushFollow(Follow._statement_in_casestatement1230);
					statement207=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement207.Tree, statement207, "statement207", retval);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("casestatement", 28);
			LeaveRule("casestatement", 28);
			LeaveRule_casestatement();
			if (state.backtracking > 0) { Memoize(input, 28, casestatement_StartIndex); }

		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "casestatement"); }
		return retval;

	}
	// $ANTLR end "casestatement"

	partial void EnterRule_defaultcase();
	partial void LeaveRule_defaultcase();
	// $ANTLR start "defaultcase"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:239:1: defaultcase : ( Default ( ':' | ';' ) ( statement )* ) ;
	[GrammarRule("defaultcase")]
	private Antlr3AstNode defaultcase()
	{
		EnterRule_defaultcase();
		EnterRule("defaultcase", 29);
		var retval = new Antlr3AstNode("defaultcase");
		
		retval.Start = (IToken)input.LT(1);
		int defaultcase_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Default208 = default(IToken);
		IToken set209 = default(IToken);
		Antlr3AstNode statement210 = default(Antlr3AstNode);

		object Default208_tree = default(object);
		object set209_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "defaultcase");
		DebugLocation(239, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:240:2: ( ( Default ( ':' | ';' ) ( statement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:240:4: ( Default ( ':' | ';' ) ( statement )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(240, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:240:4: ( Default ( ':' | ';' ) ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:240:5: Default ( ':' | ';' ) ( statement )*
			{
			DebugLocation(240, 5);
			Default208=(IToken)Match(input,Default,Follow._Default_in_defaultcase1244); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Default208_tree = (object)adaptor.Create(Default208, "Default208", retval);
			adaptor.AddChild(root_0, Default208_tree);
			}
			DebugLocation(240, 13);

			set209=(IToken)input.LT(1);
			if (input.LA(1)==Colon||input.LA(1)==SemiColon)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set209, "set209", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(240, 23);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:240:23: ( statement )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if (((LA58_1>=Abstract && LA58_1<=Ampersand)||LA58_1==ArrayType||(LA58_1>=Bang && LA58_1<=BodyString)||(LA58_1>=BoolType && LA58_1<=Break)||LA58_1==Class||LA58_1==Clone||(LA58_1>=Const && LA58_1<=Continue)||LA58_1==Die||LA58_1==Do||(LA58_1>=DoubleQuotedString && LA58_1<=Echo)||LA58_1==Empty||(LA58_1>=Eval && LA58_1<=Exit)||LA58_1==False||(LA58_1>=FloatType && LA58_1<=Foreach)||(LA58_1>=Function && LA58_1<=HaltCompiler)||LA58_1==HereDoc||LA58_1==If||(LA58_1>=Include && LA58_1<=IncrementOperator)||(LA58_1>=IntType && LA58_1<=List)||LA58_1==Minus||(LA58_1>=Namespace && LA58_1<=Null)||LA58_1==ObjectType||(LA58_1>=OpenCurlyBracket && LA58_1<=OpenSquareBracket)||LA58_1==Plus||(LA58_1>=Real && LA58_1<=SemiColon)||LA58_1==SingleQuotedString||(LA58_1>=Static && LA58_1<=Try)||LA58_1==UnquotedString||LA58_1==UnsetType||(LA58_1>=VariableName && LA58_1<=While)||(LA58_1>=128 && LA58_1<=129)))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:240:23: statement
					{
					DebugLocation(240, 23);
					PushFollow(Follow._statement_in_defaultcase1252);
					statement210=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement210.Tree, statement210, "statement210", retval);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defaultcase", 29);
			LeaveRule("defaultcase", 29);
			LeaveRule_defaultcase();
			if (state.backtracking > 0) { Memoize(input, 29, defaultcase_StartIndex); }

		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultcase"); }
		return retval;

	}
	// $ANTLR end "defaultcase"

	partial void EnterRule_anonymousFunctionDefinition();
	partial void LeaveRule_anonymousFunctionDefinition();
	// $ANTLR start "anonymousFunctionDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:243:1: anonymousFunctionDefinition : Function parametersDefinition ( Use parametersDefinition )? bracketedBlock ;
	[GrammarRule("anonymousFunctionDefinition")]
	private Antlr3AstNode anonymousFunctionDefinition()
	{
		EnterRule_anonymousFunctionDefinition();
		EnterRule("anonymousFunctionDefinition", 30);
		var retval = new Antlr3AstNode("anonymousFunctionDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int anonymousFunctionDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function211 = default(IToken);
		IToken Use213 = default(IToken);
		Antlr3AstNode parametersDefinition212 = default(Antlr3AstNode);
		Antlr3AstNode parametersDefinition214 = default(Antlr3AstNode);
		Antlr3AstNode bracketedBlock215 = default(Antlr3AstNode);

		object Function211_tree = default(object);
		object Use213_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymousFunctionDefinition");
		DebugLocation(243, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:244:2: ( Function parametersDefinition ( Use parametersDefinition )? bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:244:4: Function parametersDefinition ( Use parametersDefinition )? bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(244, 4);
			Function211=(IToken)Match(input,Function,Follow._Function_in_anonymousFunctionDefinition1265); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Function211_tree = (object)adaptor.Create(Function211, "Function211", retval);
			adaptor.AddChild(root_0, Function211_tree);
			}
			DebugLocation(244, 13);
			PushFollow(Follow._parametersDefinition_in_anonymousFunctionDefinition1267);
			parametersDefinition212=parametersDefinition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition212.Tree, parametersDefinition212, "parametersDefinition212", retval);
			DebugLocation(244, 34);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:244:34: ( Use parametersDefinition )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_1 = input.LA(1);

			if ((LA59_1==Use))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:244:35: Use parametersDefinition
				{
				DebugLocation(244, 35);
				Use213=(IToken)Match(input,Use,Follow._Use_in_anonymousFunctionDefinition1270); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Use213_tree = (object)adaptor.Create(Use213, "Use213", retval);
				adaptor.AddChild(root_0, Use213_tree);
				}
				DebugLocation(244, 39);
				PushFollow(Follow._parametersDefinition_in_anonymousFunctionDefinition1272);
				parametersDefinition214=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition214.Tree, parametersDefinition214, "parametersDefinition214", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(244, 62);
			PushFollow(Follow._bracketedBlock_in_anonymousFunctionDefinition1276);
			bracketedBlock215=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock215.Tree, bracketedBlock215, "bracketedBlock215", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymousFunctionDefinition", 30);
			LeaveRule("anonymousFunctionDefinition", 30);
			LeaveRule_anonymousFunctionDefinition();
			if (state.backtracking > 0) { Memoize(input, 30, anonymousFunctionDefinition_StartIndex); }

		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymousFunctionDefinition"); }
		return retval;

	}
	// $ANTLR end "anonymousFunctionDefinition"

	partial void EnterRule_functionDefinition();
	partial void LeaveRule_functionDefinition();
	// $ANTLR start "functionDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:247:1: functionDefinition : Function qualifiedName parametersDefinition bracketedBlock ;
	[GrammarRule("functionDefinition")]
	private Antlr3AstNode functionDefinition()
	{
		EnterRule_functionDefinition();
		EnterRule("functionDefinition", 31);
		var retval = new Antlr3AstNode("functionDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int functionDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function216 = default(IToken);
		Antlr3AstNode qualifiedName217 = default(Antlr3AstNode);
		Antlr3AstNode parametersDefinition218 = default(Antlr3AstNode);
		Antlr3AstNode bracketedBlock219 = default(Antlr3AstNode);

		object Function216_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionDefinition");
		DebugLocation(247, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:248:2: ( Function qualifiedName parametersDefinition bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:248:4: Function qualifiedName parametersDefinition bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(248, 4);
			Function216=(IToken)Match(input,Function,Follow._Function_in_functionDefinition1287); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Function216_tree = (object)adaptor.Create(Function216, "Function216", retval);
			adaptor.AddChild(root_0, Function216_tree);
			}
			DebugLocation(248, 13);
			PushFollow(Follow._qualifiedName_in_functionDefinition1289);
			qualifiedName217=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName217.Tree, qualifiedName217, "qualifiedName217", retval);
			DebugLocation(248, 27);
			PushFollow(Follow._parametersDefinition_in_functionDefinition1291);
			parametersDefinition218=parametersDefinition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition218.Tree, parametersDefinition218, "parametersDefinition218", retval);
			DebugLocation(248, 48);
			PushFollow(Follow._bracketedBlock_in_functionDefinition1293);
			bracketedBlock219=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock219.Tree, bracketedBlock219, "bracketedBlock219", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDefinition", 31);
			LeaveRule("functionDefinition", 31);
			LeaveRule_functionDefinition();
			if (state.backtracking > 0) { Memoize(input, 31, functionDefinition_StartIndex); }

		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDefinition"); }
		return retval;

	}
	// $ANTLR end "functionDefinition"

	partial void EnterRule_parametersDefinition();
	partial void LeaveRule_parametersDefinition();
	// $ANTLR start "parametersDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:251:1: parametersDefinition : OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket ;
	[GrammarRule("parametersDefinition")]
	private Antlr3AstNode parametersDefinition()
	{
		EnterRule_parametersDefinition();
		EnterRule("parametersDefinition", 32);
		var retval = new Antlr3AstNode("parametersDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int parametersDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket220 = default(IToken);
		IToken Comma222 = default(IToken);
		IToken CloseRoundBracket224 = default(IToken);
		Antlr3AstNode paramDef221 = default(Antlr3AstNode);
		Antlr3AstNode paramDef223 = default(Antlr3AstNode);

		object OpenRoundBracket220_tree = default(object);
		object Comma222_tree = default(object);
		object CloseRoundBracket224_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parametersDefinition");
		DebugLocation(251, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:252:2: ( OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:252:4: OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(252, 4);
			OpenRoundBracket220=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_parametersDefinition1304); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenRoundBracket220_tree = (object)adaptor.Create(OpenRoundBracket220, "OpenRoundBracket220", retval);
			adaptor.AddChild(root_0, OpenRoundBracket220_tree);
			}
			DebugLocation(252, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:252:21: ( paramDef ( Comma paramDef )* )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==Ampersand||LA61_1==ArrayType||(LA61_1>=BoolType && LA61_1<=BooleanType)||LA61_1==DoubleType||LA61_1==FloatType||LA61_1==IntType||LA61_1==IntegerType||LA61_1==ObjectType||LA61_1==RealType||(LA61_1>=Static && LA61_1<=StringType)||LA61_1==UnquotedString||LA61_1==UnsetType||LA61_1==VariableName||LA61_1==129))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:252:22: paramDef ( Comma paramDef )*
				{
				DebugLocation(252, 22);
				PushFollow(Follow._paramDef_in_parametersDefinition1307);
				paramDef221=paramDef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, paramDef221.Tree, paramDef221, "paramDef221", retval);
				DebugLocation(252, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:252:31: ( Comma paramDef )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					int LA60_1 = input.LA(1);

					if ((LA60_1==Comma))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:252:32: Comma paramDef
						{
						DebugLocation(252, 32);
						Comma222=(IToken)Match(input,Comma,Follow._Comma_in_parametersDefinition1310); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma222_tree = (object)adaptor.Create(Comma222, "Comma222", retval);
						adaptor.AddChild(root_0, Comma222_tree);
						}
						DebugLocation(252, 38);
						PushFollow(Follow._paramDef_in_parametersDefinition1312);
						paramDef223=paramDef();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, paramDef223.Tree, paramDef223, "paramDef223", retval);

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }


				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(252, 51);
			CloseRoundBracket224=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_parametersDefinition1318); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseRoundBracket224_tree = (object)adaptor.Create(CloseRoundBracket224, "CloseRoundBracket224", retval);
			adaptor.AddChild(root_0, CloseRoundBracket224_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parametersDefinition", 32);
			LeaveRule("parametersDefinition", 32);
			LeaveRule_parametersDefinition();
			if (state.backtracking > 0) { Memoize(input, 32, parametersDefinition_StartIndex); }

		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "parametersDefinition"); }
		return retval;

	}
	// $ANTLR end "parametersDefinition"

	partial void EnterRule_paramDef();
	partial void LeaveRule_paramDef();
	// $ANTLR start "paramDef"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:255:1: paramDef : ( primitiveType | qualifiedName )? paramName ( Equals atom )? ;
	[GrammarRule("paramDef")]
	private Antlr3AstNode paramDef()
	{
		EnterRule_paramDef();
		EnterRule("paramDef", 33);
		var retval = new Antlr3AstNode("paramDef");
		
		retval.Start = (IToken)input.LT(1);
		int paramDef_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Equals228 = default(IToken);
		Antlr3AstNode primitiveType225 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName226 = default(Antlr3AstNode);
		Antlr3AstNode paramName227 = default(Antlr3AstNode);
		Antlr3AstNode atom229 = default(Antlr3AstNode);

		object Equals228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramDef");
		DebugLocation(255, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:2: ( ( primitiveType | qualifiedName )? paramName ( Equals atom )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:4: ( primitiveType | qualifiedName )? paramName ( Equals atom )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(256, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:4: ( primitiveType | qualifiedName )?
			int alt62=3;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case StringType:
				{
				int LA62_2 = input.LA(2);

				if ((EvaluatePredicate(synpred90_Php_fragment)))
				{
					alt62 = 1;
				}
				else if ((EvaluatePredicate(synpred91_Php_fragment)))
				{
					alt62 = 2;
				}
				}
				break;
			case Static:
			case UnquotedString:
			case 129:
				{
				alt62 = 2;
				}
				break;
			case ArrayType:
			case UnsetType:
				{
				alt62 = 1;
				}
				break;
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:5: primitiveType
				{
				DebugLocation(256, 5);
				PushFollow(Follow._primitiveType_in_paramDef1330);
				primitiveType225=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType225.Tree, primitiveType225, "primitiveType225", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:21: qualifiedName
				{
				DebugLocation(256, 21);
				PushFollow(Follow._qualifiedName_in_paramDef1334);
				qualifiedName226=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName226.Tree, qualifiedName226, "qualifiedName226", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(256, 37);
			PushFollow(Follow._paramName_in_paramDef1338);
			paramName227=paramName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, paramName227.Tree, paramName227, "paramName227", retval);
			DebugLocation(256, 47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:47: ( Equals atom )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==Equals))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:48: Equals atom
				{
				DebugLocation(256, 48);
				Equals228=(IToken)Match(input,Equals,Follow._Equals_in_paramDef1341); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals228_tree = (object)adaptor.Create(Equals228, "Equals228", retval);
				adaptor.AddChild(root_0, Equals228_tree);
				}
				DebugLocation(256, 55);
				PushFollow(Follow._atom_in_paramDef1343);
				atom229=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom229.Tree, atom229, "atom229", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramDef", 33);
			LeaveRule("paramDef", 33);
			LeaveRule_paramDef();
			if (state.backtracking > 0) { Memoize(input, 33, paramDef_StartIndex); }

		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "paramDef"); }
		return retval;

	}
	// $ANTLR end "paramDef"

	partial void EnterRule_paramName();
	partial void LeaveRule_paramName();
	// $ANTLR start "paramName"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:259:1: paramName : ( VariableName | Ampersand VariableName );
	[GrammarRule("paramName")]
	private Antlr3AstNode paramName()
	{
		EnterRule_paramName();
		EnterRule("paramName", 34);
		var retval = new Antlr3AstNode("paramName");
		
		retval.Start = (IToken)input.LT(1);
		int paramName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName230 = default(IToken);
		IToken Ampersand231 = default(IToken);
		IToken VariableName232 = default(IToken);

		object VariableName230_tree = default(object);
		object Ampersand231_tree = default(object);
		object VariableName232_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramName");
		DebugLocation(259, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:260:2: ( VariableName | Ampersand VariableName )
			int alt64=2;
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==VariableName))
			{
				alt64 = 1;
			}
			else if ((LA64_1==Ampersand))
			{
				alt64 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:260:4: VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(260, 4);
				VariableName230=(IToken)Match(input,VariableName,Follow._VariableName_in_paramName1356); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName230_tree = (object)adaptor.Create(VariableName230, "VariableName230", retval);
				adaptor.AddChild(root_0, VariableName230_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:261:4: Ampersand VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(261, 4);
				Ampersand231=(IToken)Match(input,Ampersand,Follow._Ampersand_in_paramName1361); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand231_tree = (object)adaptor.Create(Ampersand231, "Ampersand231", retval);
				adaptor.AddChild(root_0, Ampersand231_tree);
				}
				DebugLocation(261, 14);
				VariableName232=(IToken)Match(input,VariableName,Follow._VariableName_in_paramName1363); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName232_tree = (object)adaptor.Create(VariableName232, "VariableName232", retval);
				adaptor.AddChild(root_0, VariableName232_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramName", 34);
			LeaveRule("paramName", 34);
			LeaveRule_paramName();
			if (state.backtracking > 0) { Memoize(input, 34, paramName_StartIndex); }

		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "paramName"); }
		return retval;

	}
	// $ANTLR end "paramName"

	partial void EnterRule_commaList();
	partial void LeaveRule_commaList();
	// $ANTLR start "commaList"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:264:1: commaList : expression ( ',' expression )* ;
	[GrammarRule("commaList")]
	private Antlr3AstNode commaList()
	{
		EnterRule_commaList();
		EnterRule("commaList", 35);
		var retval = new Antlr3AstNode("commaList");
		
		retval.Start = (IToken)input.LT(1);
		int commaList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal234 = default(IToken);
		Antlr3AstNode expression233 = default(Antlr3AstNode);
		Antlr3AstNode expression235 = default(Antlr3AstNode);

		object char_literal234_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "commaList");
		DebugLocation(264, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:265:2: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:265:4: expression ( ',' expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(265, 4);
			PushFollow(Follow._expression_in_commaList1374);
			expression233=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression233.Tree, expression233, "expression233", retval);
			DebugLocation(265, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:265:15: ( ',' expression )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==Comma))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:265:16: ',' expression
					{
					DebugLocation(265, 16);
					char_literal234=(IToken)Match(input,Comma,Follow._Comma_in_commaList1377); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal234_tree = (object)adaptor.Create(char_literal234, "char_literal234", retval);
					adaptor.AddChild(root_0, char_literal234_tree);
					}
					DebugLocation(265, 20);
					PushFollow(Follow._expression_in_commaList1379);
					expression235=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression235.Tree, expression235, "expression235", retval);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commaList", 35);
			LeaveRule("commaList", 35);
			LeaveRule_commaList();
			if (state.backtracking > 0) { Memoize(input, 35, commaList_StartIndex); }

		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "commaList"); }
		return retval;

	}
	// $ANTLR end "commaList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:268:1: expression : weakLogicalOr ;
	[GrammarRule("expression")]
	private Antlr3AstNode expression()
	{
		EnterRule_expression();
		EnterRule("expression", 36);
		var retval = new Antlr3AstNode("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode weakLogicalOr236 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(268, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:269:2: ( weakLogicalOr )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:269:4: weakLogicalOr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(269, 4);
			PushFollow(Follow._weakLogicalOr_in_expression1394);
			weakLogicalOr236=weakLogicalOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalOr236.Tree, weakLogicalOr236, "weakLogicalOr236", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 36);
			LeaveRule("expression", 36);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 36, expression_StartIndex); }

		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_weakLogicalOr();
	partial void LeaveRule_weakLogicalOr();
	// $ANTLR start "weakLogicalOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:272:1: weakLogicalOr : weakLogicalXor ( Or weakLogicalXor )* ;
	[GrammarRule("weakLogicalOr")]
	private Antlr3AstNode weakLogicalOr()
	{
		EnterRule_weakLogicalOr();
		EnterRule("weakLogicalOr", 37);
		var retval = new Antlr3AstNode("weakLogicalOr");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Or238 = default(IToken);
		Antlr3AstNode weakLogicalXor237 = default(Antlr3AstNode);
		Antlr3AstNode weakLogicalXor239 = default(Antlr3AstNode);

		object Or238_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalOr");
		DebugLocation(272, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:273:2: ( weakLogicalXor ( Or weakLogicalXor )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:273:4: weakLogicalXor ( Or weakLogicalXor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(273, 4);
			PushFollow(Follow._weakLogicalXor_in_weakLogicalOr1405);
			weakLogicalXor237=weakLogicalXor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor237.Tree, weakLogicalXor237, "weakLogicalXor237", retval);
			DebugLocation(273, 19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:273:19: ( Or weakLogicalXor )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==Or))
				{
					int LA66_2 = input.LA(2);

					if ((EvaluatePredicate(synpred95_Php_fragment)))
					{
						alt66 = 1;
					}


				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:273:20: Or weakLogicalXor
					{
					DebugLocation(273, 20);
					Or238=(IToken)Match(input,Or,Follow._Or_in_weakLogicalOr1408); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Or238_tree = (object)adaptor.Create(Or238, "Or238", retval);
					adaptor.AddChild(root_0, Or238_tree);
					}
					DebugLocation(273, 23);
					PushFollow(Follow._weakLogicalXor_in_weakLogicalOr1410);
					weakLogicalXor239=weakLogicalXor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor239.Tree, weakLogicalXor239, "weakLogicalXor239", retval);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalOr", 37);
			LeaveRule("weakLogicalOr", 37);
			LeaveRule_weakLogicalOr();
			if (state.backtracking > 0) { Memoize(input, 37, weakLogicalOr_StartIndex); }

		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalOr"); }
		return retval;

	}
	// $ANTLR end "weakLogicalOr"

	partial void EnterRule_weakLogicalXor();
	partial void LeaveRule_weakLogicalXor();
	// $ANTLR start "weakLogicalXor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:276:1: weakLogicalXor : weakLogicalAnd ( Xor weakLogicalAnd )* ;
	[GrammarRule("weakLogicalXor")]
	private Antlr3AstNode weakLogicalXor()
	{
		EnterRule_weakLogicalXor();
		EnterRule("weakLogicalXor", 38);
		var retval = new Antlr3AstNode("weakLogicalXor");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalXor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Xor241 = default(IToken);
		Antlr3AstNode weakLogicalAnd240 = default(Antlr3AstNode);
		Antlr3AstNode weakLogicalAnd242 = default(Antlr3AstNode);

		object Xor241_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalXor");
		DebugLocation(276, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:277:2: ( weakLogicalAnd ( Xor weakLogicalAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:277:4: weakLogicalAnd ( Xor weakLogicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(277, 4);
			PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor1423);
			weakLogicalAnd240=weakLogicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd240.Tree, weakLogicalAnd240, "weakLogicalAnd240", retval);
			DebugLocation(277, 19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:277:19: ( Xor weakLogicalAnd )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_1 = input.LA(1);

				if ((LA67_1==Xor))
				{
					int LA67_2 = input.LA(2);

					if ((EvaluatePredicate(synpred96_Php_fragment)))
					{
						alt67 = 1;
					}


				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:277:20: Xor weakLogicalAnd
					{
					DebugLocation(277, 20);
					Xor241=(IToken)Match(input,Xor,Follow._Xor_in_weakLogicalXor1426); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Xor241_tree = (object)adaptor.Create(Xor241, "Xor241", retval);
					adaptor.AddChild(root_0, Xor241_tree);
					}
					DebugLocation(277, 24);
					PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor1428);
					weakLogicalAnd242=weakLogicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd242.Tree, weakLogicalAnd242, "weakLogicalAnd242", retval);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalXor", 38);
			LeaveRule("weakLogicalXor", 38);
			LeaveRule_weakLogicalXor();
			if (state.backtracking > 0) { Memoize(input, 38, weakLogicalXor_StartIndex); }

		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalXor"); }
		return retval;

	}
	// $ANTLR end "weakLogicalXor"

	partial void EnterRule_weakLogicalAnd();
	partial void LeaveRule_weakLogicalAnd();
	// $ANTLR start "weakLogicalAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:280:1: weakLogicalAnd : assignment ( And assignment )* ;
	[GrammarRule("weakLogicalAnd")]
	private Antlr3AstNode weakLogicalAnd()
	{
		EnterRule_weakLogicalAnd();
		EnterRule("weakLogicalAnd", 39);
		var retval = new Antlr3AstNode("weakLogicalAnd");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken And244 = default(IToken);
		Antlr3AstNode assignment243 = default(Antlr3AstNode);
		Antlr3AstNode assignment245 = default(Antlr3AstNode);

		object And244_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalAnd");
		DebugLocation(280, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:281:2: ( assignment ( And assignment )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:281:4: assignment ( And assignment )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(281, 4);
			PushFollow(Follow._assignment_in_weakLogicalAnd1442);
			assignment243=assignment();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment243.Tree, assignment243, "assignment243", retval);
			DebugLocation(281, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:281:15: ( And assignment )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==And))
				{
					int LA68_2 = input.LA(2);

					if ((EvaluatePredicate(synpred97_Php_fragment)))
					{
						alt68 = 1;
					}


				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:281:16: And assignment
					{
					DebugLocation(281, 16);
					And244=(IToken)Match(input,And,Follow._And_in_weakLogicalAnd1445); if (state.failed) return retval;
					if (state.backtracking == 0) {
					And244_tree = (object)adaptor.Create(And244, "And244", retval);
					adaptor.AddChild(root_0, And244_tree);
					}
					DebugLocation(281, 20);
					PushFollow(Follow._assignment_in_weakLogicalAnd1447);
					assignment245=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment245.Tree, assignment245, "assignment245", retval);

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalAnd", 39);
			LeaveRule("weakLogicalAnd", 39);
			LeaveRule_weakLogicalAnd();
			if (state.backtracking > 0) { Memoize(input, 39, weakLogicalAnd_StartIndex); }

		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalAnd"); }
		return retval;

	}
	// $ANTLR end "weakLogicalAnd"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:284:1: assignment : ( listVariables ( Equals | AsignmentOperator ) assignment | ternary );
	[GrammarRule("assignment")]
	private Antlr3AstNode assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 40);
		var retval = new Antlr3AstNode("assignment");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set247 = default(IToken);
		Antlr3AstNode listVariables246 = default(Antlr3AstNode);
		Antlr3AstNode assignment248 = default(Antlr3AstNode);
		Antlr3AstNode ternary249 = default(Antlr3AstNode);

		object set247_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(284, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:285:2: ( listVariables ( Equals | AsignmentOperator ) assignment | ternary )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA69_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Php_fragment)))
				{
					alt69 = 1;
				}
				else if ((true))
				{
					alt69 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA69_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Php_fragment)))
				{
					alt69 = 1;
				}
				else if ((true))
				{
					alt69 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA69_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Php_fragment)))
				{
					alt69 = 1;
				}
				else if ((true))
				{
					alt69 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA69_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Php_fragment)))
				{
					alt69 = 1;
				}
				else if ((true))
				{
					alt69 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA69_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Php_fragment)))
				{
					alt69 = 1;
				}
				else if ((true))
				{
					alt69 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case ArrayType:
			case Bang:
			case Clone:
			case Die:
			case DoubleQuotedString:
			case Empty:
			case Eval:
			case Exit:
			case False:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case IncrementOperator:
			case Integer:
			case Isset:
			case Minus:
			case New:
			case Null:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case SuppressWarnings:
			case Tilde:
			case True:
			case UnsetType:
				{
				alt69 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:285:4: listVariables ( Equals | AsignmentOperator ) assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(285, 4);
				PushFollow(Follow._listVariables_in_assignment1460);
				listVariables246=listVariables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, listVariables246.Tree, listVariables246, "listVariables246", retval);
				DebugLocation(285, 18);

				set247=(IToken)input.LT(1);
				if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set247, "set247", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(285, 47);
				PushFollow(Follow._assignment_in_assignment1470);
				assignment248=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment248.Tree, assignment248, "assignment248", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:286:4: ternary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(286, 4);
				PushFollow(Follow._ternary_in_assignment1475);
				ternary249=ternary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ternary249.Tree, ternary249, "ternary249", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 40);
			LeaveRule("assignment", 40);
			LeaveRule_assignment();
			if (state.backtracking > 0) { Memoize(input, 40, assignment_StartIndex); }

		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_listVariables();
	partial void LeaveRule_listVariables();
	// $ANTLR start "listVariables"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:289:1: listVariables : ( List OpenRoundBracket ( variable )? ( ',' ( variable )? )* CloseRoundBracket | name );
	[GrammarRule("listVariables")]
	private Antlr3AstNode listVariables()
	{
		EnterRule_listVariables();
		EnterRule("listVariables", 41);
		var retval = new Antlr3AstNode("listVariables");
		
		retval.Start = (IToken)input.LT(1);
		int listVariables_StartIndex = input.Index;

		object root_0 = default(object);

		IToken List250 = default(IToken);
		IToken OpenRoundBracket251 = default(IToken);
		IToken char_literal253 = default(IToken);
		IToken CloseRoundBracket255 = default(IToken);
		Antlr3AstNode variable252 = default(Antlr3AstNode);
		Antlr3AstNode variable254 = default(Antlr3AstNode);
		Antlr3AstNode name256 = default(Antlr3AstNode);

		object List250_tree = default(object);
		object OpenRoundBracket251_tree = default(object);
		object char_literal253_tree = default(object);
		object CloseRoundBracket255_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "listVariables");
		DebugLocation(289, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:2: ( List OpenRoundBracket ( variable )? ( ',' ( variable )? )* CloseRoundBracket | name )
			int alt73=2;
			try { DebugEnterDecision(73, false);
			int LA73_1 = input.LA(1);

			if ((LA73_1==List))
			{
				alt73 = 1;
			}
			else if (((LA73_1>=BoolType && LA73_1<=BooleanType)||LA73_1==DoubleType||LA73_1==FloatType||LA73_1==IntType||LA73_1==IntegerType||LA73_1==ObjectType||LA73_1==RealType||(LA73_1>=Static && LA73_1<=StringType)||LA73_1==UnquotedString||LA73_1==VariableName||(LA73_1>=128 && LA73_1<=129)))
			{
				alt73 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 73, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:4: List OpenRoundBracket ( variable )? ( ',' ( variable )? )* CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(290, 4);
				List250=(IToken)Match(input,List,Follow._List_in_listVariables1486); if (state.failed) return retval;
				if (state.backtracking == 0) {
				List250_tree = (object)adaptor.Create(List250, "List250", retval);
				adaptor.AddChild(root_0, List250_tree);
				}
				DebugLocation(290, 9);
				OpenRoundBracket251=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_listVariables1488); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket251_tree = (object)adaptor.Create(OpenRoundBracket251, "OpenRoundBracket251", retval);
				adaptor.AddChild(root_0, OpenRoundBracket251_tree);
				}
				DebugLocation(290, 26);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:26: ( variable )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==VariableName||LA70_1==128))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:26: variable
					{
					DebugLocation(290, 26);
					PushFollow(Follow._variable_in_listVariables1490);
					variable252=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable252.Tree, variable252, "variable252", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(290, 36);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:36: ( ',' ( variable )? )*
				try { DebugEnterSubRule(72);
				while (true)
				{
					int alt72=2;
					try { DebugEnterDecision(72, false);
					int LA72_1 = input.LA(1);

					if ((LA72_1==Comma))
					{
						alt72 = 1;
					}


					} finally { DebugExitDecision(72); }
					switch ( alt72 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:37: ',' ( variable )?
						{
						DebugLocation(290, 37);
						char_literal253=(IToken)Match(input,Comma,Follow._Comma_in_listVariables1494); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal253_tree = (object)adaptor.Create(char_literal253, "char_literal253", retval);
						adaptor.AddChild(root_0, char_literal253_tree);
						}
						DebugLocation(290, 41);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:41: ( variable )?
						int alt71=2;
						try { DebugEnterSubRule(71);
						try { DebugEnterDecision(71, false);
						int LA71_1 = input.LA(1);

						if ((LA71_1==VariableName||LA71_1==128))
						{
							alt71 = 1;
						}
						} finally { DebugExitDecision(71); }
						switch (alt71)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:290:41: variable
							{
							DebugLocation(290, 41);
							PushFollow(Follow._variable_in_listVariables1496);
							variable254=variable();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, variable254.Tree, variable254, "variable254", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(71); }


						}
						break;

					default:
						goto loop72;
					}
				}

				loop72:
					;

				} finally { DebugExitSubRule(72); }

				DebugLocation(290, 53);
				CloseRoundBracket255=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_listVariables1501); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket255_tree = (object)adaptor.Create(CloseRoundBracket255, "CloseRoundBracket255", retval);
				adaptor.AddChild(root_0, CloseRoundBracket255_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:291:4: name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(291, 4);
				PushFollow(Follow._name_in_listVariables1507);
				name256=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name256.Tree, name256, "name256", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("listVariables", 41);
			LeaveRule("listVariables", 41);
			LeaveRule_listVariables();
			if (state.backtracking > 0) { Memoize(input, 41, listVariables_StartIndex); }

		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "listVariables"); }
		return retval;

	}
	// $ANTLR end "listVariables"

	partial void EnterRule_ternary();
	partial void LeaveRule_ternary();
	// $ANTLR start "ternary"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:294:1: ternary : ( logicalOr QuestionMark ( expression )? Colon expression | logicalOr );
	[GrammarRule("ternary")]
	private Antlr3AstNode ternary()
	{
		EnterRule_ternary();
		EnterRule("ternary", 42);
		var retval = new Antlr3AstNode("ternary");
		
		retval.Start = (IToken)input.LT(1);
		int ternary_StartIndex = input.Index;

		object root_0 = default(object);

		IToken QuestionMark258 = default(IToken);
		IToken Colon260 = default(IToken);
		Antlr3AstNode logicalOr257 = default(Antlr3AstNode);
		Antlr3AstNode expression259 = default(Antlr3AstNode);
		Antlr3AstNode expression261 = default(Antlr3AstNode);
		Antlr3AstNode logicalOr262 = default(Antlr3AstNode);

		object QuestionMark258_tree = default(object);
		object Colon260_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ternary");
		DebugLocation(294, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:295:2: ( logicalOr QuestionMark ( expression )? Colon expression | logicalOr )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			switch (input.LA(1))
			{
			case Bang:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case List:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:295:4: logicalOr QuestionMark ( expression )? Colon expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(295, 4);
				PushFollow(Follow._logicalOr_in_ternary1518);
				logicalOr257=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr257.Tree, logicalOr257, "logicalOr257", retval);
				DebugLocation(295, 14);
				QuestionMark258=(IToken)Match(input,QuestionMark,Follow._QuestionMark_in_ternary1520); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QuestionMark258_tree = (object)adaptor.Create(QuestionMark258, "QuestionMark258", retval);
				adaptor.AddChild(root_0, QuestionMark258_tree);
				}
				DebugLocation(295, 27);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:295:27: ( expression )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==Ampersand||LA74_1==ArrayType||LA74_1==Bang||(LA74_1>=BoolType && LA74_1<=BooleanType)||LA74_1==Clone||LA74_1==Die||(LA74_1>=DoubleQuotedString && LA74_1<=DoubleType)||LA74_1==Empty||(LA74_1>=Eval && LA74_1<=Exit)||LA74_1==False||LA74_1==FloatType||LA74_1==Function||LA74_1==HaltCompiler||LA74_1==HereDoc||(LA74_1>=Include && LA74_1<=IncrementOperator)||(LA74_1>=IntType && LA74_1<=IntegerType)||(LA74_1>=Isset && LA74_1<=List)||LA74_1==Minus||(LA74_1>=New && LA74_1<=Null)||LA74_1==ObjectType||(LA74_1>=OpenRoundBracket && LA74_1<=OpenSquareBracket)||LA74_1==Plus||(LA74_1>=Real && LA74_1<=RequireOnce)||LA74_1==SingleQuotedString||(LA74_1>=Static && LA74_1<=SuppressWarnings)||(LA74_1>=Tilde && LA74_1<=True)||LA74_1==UnquotedString||LA74_1==UnsetType||LA74_1==VariableName||(LA74_1>=128 && LA74_1<=129)))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:295:27: expression
					{
					DebugLocation(295, 27);
					PushFollow(Follow._expression_in_ternary1522);
					expression259=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression259.Tree, expression259, "expression259", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(295, 39);
				Colon260=(IToken)Match(input,Colon,Follow._Colon_in_ternary1525); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Colon260_tree = (object)adaptor.Create(Colon260, "Colon260", retval);
				adaptor.AddChild(root_0, Colon260_tree);
				}
				DebugLocation(295, 45);
				PushFollow(Follow._expression_in_ternary1527);
				expression261=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression261.Tree, expression261, "expression261", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:296:4: logicalOr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(296, 4);
				PushFollow(Follow._logicalOr_in_ternary1532);
				logicalOr262=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr262.Tree, logicalOr262, "logicalOr262", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ternary", 42);
			LeaveRule("ternary", 42);
			LeaveRule_ternary();
			if (state.backtracking > 0) { Memoize(input, 42, ternary_StartIndex); }

		}
		DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "ternary"); }
		return retval;

	}
	// $ANTLR end "ternary"

	partial void EnterRule_logicalOr();
	partial void LeaveRule_logicalOr();
	// $ANTLR start "logicalOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:299:1: logicalOr : logicalAnd ( LogicalOr logicalAnd )* ;
	[GrammarRule("logicalOr")]
	private Antlr3AstNode logicalOr()
	{
		EnterRule_logicalOr();
		EnterRule("logicalOr", 43);
		var retval = new Antlr3AstNode("logicalOr");
		
		retval.Start = (IToken)input.LT(1);
		int logicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalOr264 = default(IToken);
		Antlr3AstNode logicalAnd263 = default(Antlr3AstNode);
		Antlr3AstNode logicalAnd265 = default(Antlr3AstNode);

		object LogicalOr264_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalOr");
		DebugLocation(299, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:300:2: ( logicalAnd ( LogicalOr logicalAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:300:4: logicalAnd ( LogicalOr logicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(300, 4);
			PushFollow(Follow._logicalAnd_in_logicalOr1544);
			logicalAnd263=logicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd263.Tree, logicalAnd263, "logicalAnd263", retval);
			DebugLocation(300, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:300:15: ( LogicalOr logicalAnd )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==LogicalOr))
				{
					int LA76_2 = input.LA(2);

					if ((EvaluatePredicate(synpred106_Php_fragment)))
					{
						alt76 = 1;
					}


				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:300:16: LogicalOr logicalAnd
					{
					DebugLocation(300, 16);
					LogicalOr264=(IToken)Match(input,LogicalOr,Follow._LogicalOr_in_logicalOr1547); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalOr264_tree = (object)adaptor.Create(LogicalOr264, "LogicalOr264", retval);
					adaptor.AddChild(root_0, LogicalOr264_tree);
					}
					DebugLocation(300, 26);
					PushFollow(Follow._logicalAnd_in_logicalOr1549);
					logicalAnd265=logicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd265.Tree, logicalAnd265, "logicalAnd265", retval);

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOr", 43);
			LeaveRule("logicalOr", 43);
			LeaveRule_logicalOr();
			if (state.backtracking > 0) { Memoize(input, 43, logicalOr_StartIndex); }

		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOr"); }
		return retval;

	}
	// $ANTLR end "logicalOr"

	partial void EnterRule_logicalAnd();
	partial void LeaveRule_logicalAnd();
	// $ANTLR start "logicalAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:303:1: logicalAnd : bitwiseOr ( LogicalAnd bitwiseOr )* ;
	[GrammarRule("logicalAnd")]
	private Antlr3AstNode logicalAnd()
	{
		EnterRule_logicalAnd();
		EnterRule("logicalAnd", 44);
		var retval = new Antlr3AstNode("logicalAnd");
		
		retval.Start = (IToken)input.LT(1);
		int logicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalAnd267 = default(IToken);
		Antlr3AstNode bitwiseOr266 = default(Antlr3AstNode);
		Antlr3AstNode bitwiseOr268 = default(Antlr3AstNode);

		object LogicalAnd267_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalAnd");
		DebugLocation(303, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:304:2: ( bitwiseOr ( LogicalAnd bitwiseOr )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:304:4: bitwiseOr ( LogicalAnd bitwiseOr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(304, 4);
			PushFollow(Follow._bitwiseOr_in_logicalAnd1562);
			bitwiseOr266=bitwiseOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr266.Tree, bitwiseOr266, "bitwiseOr266", retval);
			DebugLocation(304, 14);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:304:14: ( LogicalAnd bitwiseOr )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==LogicalAnd))
				{
					int LA77_2 = input.LA(2);

					if ((EvaluatePredicate(synpred107_Php_fragment)))
					{
						alt77 = 1;
					}


				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:304:15: LogicalAnd bitwiseOr
					{
					DebugLocation(304, 15);
					LogicalAnd267=(IToken)Match(input,LogicalAnd,Follow._LogicalAnd_in_logicalAnd1565); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalAnd267_tree = (object)adaptor.Create(LogicalAnd267, "LogicalAnd267", retval);
					adaptor.AddChild(root_0, LogicalAnd267_tree);
					}
					DebugLocation(304, 26);
					PushFollow(Follow._bitwiseOr_in_logicalAnd1567);
					bitwiseOr268=bitwiseOr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr268.Tree, bitwiseOr268, "bitwiseOr268", retval);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAnd", 44);
			LeaveRule("logicalAnd", 44);
			LeaveRule_logicalAnd();
			if (state.backtracking > 0) { Memoize(input, 44, logicalAnd_StartIndex); }

		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAnd"); }
		return retval;

	}
	// $ANTLR end "logicalAnd"

	partial void EnterRule_bitwiseOr();
	partial void LeaveRule_bitwiseOr();
	// $ANTLR start "bitwiseOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:307:1: bitwiseOr : bitwiseXor ( Pipe bitwiseXor )* ;
	[GrammarRule("bitwiseOr")]
	private Antlr3AstNode bitwiseOr()
	{
		EnterRule_bitwiseOr();
		EnterRule("bitwiseOr", 45);
		var retval = new Antlr3AstNode("bitwiseOr");
		
		retval.Start = (IToken)input.LT(1);
		int bitwiseOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Pipe270 = default(IToken);
		Antlr3AstNode bitwiseXor269 = default(Antlr3AstNode);
		Antlr3AstNode bitwiseXor271 = default(Antlr3AstNode);

		object Pipe270_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseOr");
		DebugLocation(307, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:308:2: ( bitwiseXor ( Pipe bitwiseXor )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:308:4: bitwiseXor ( Pipe bitwiseXor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(308, 4);
			PushFollow(Follow._bitwiseXor_in_bitwiseOr1581);
			bitwiseXor269=bitwiseXor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXor269.Tree, bitwiseXor269, "bitwiseXor269", retval);
			DebugLocation(308, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:308:15: ( Pipe bitwiseXor )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==Pipe))
				{
					int LA78_2 = input.LA(2);

					if ((EvaluatePredicate(synpred108_Php_fragment)))
					{
						alt78 = 1;
					}


				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:308:16: Pipe bitwiseXor
					{
					DebugLocation(308, 16);
					Pipe270=(IToken)Match(input,Pipe,Follow._Pipe_in_bitwiseOr1584); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Pipe270_tree = (object)adaptor.Create(Pipe270, "Pipe270", retval);
					adaptor.AddChild(root_0, Pipe270_tree);
					}
					DebugLocation(308, 21);
					PushFollow(Follow._bitwiseXor_in_bitwiseOr1586);
					bitwiseXor271=bitwiseXor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXor271.Tree, bitwiseXor271, "bitwiseXor271", retval);

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseOr", 45);
			LeaveRule("bitwiseOr", 45);
			LeaveRule_bitwiseOr();
			if (state.backtracking > 0) { Memoize(input, 45, bitwiseOr_StartIndex); }

		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOr"); }
		return retval;

	}
	// $ANTLR end "bitwiseOr"

	partial void EnterRule_bitwiseXor();
	partial void LeaveRule_bitwiseXor();
	// $ANTLR start "bitwiseXor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:311:1: bitwiseXor : bitWiseAnd ( Hat bitWiseAnd )* ;
	[GrammarRule("bitwiseXor")]
	private Antlr3AstNode bitwiseXor()
	{
		EnterRule_bitwiseXor();
		EnterRule("bitwiseXor", 46);
		var retval = new Antlr3AstNode("bitwiseXor");
		
		retval.Start = (IToken)input.LT(1);
		int bitwiseXor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Hat273 = default(IToken);
		Antlr3AstNode bitWiseAnd272 = default(Antlr3AstNode);
		Antlr3AstNode bitWiseAnd274 = default(Antlr3AstNode);

		object Hat273_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseXor");
		DebugLocation(311, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:312:2: ( bitWiseAnd ( Hat bitWiseAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:312:4: bitWiseAnd ( Hat bitWiseAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(312, 4);
			PushFollow(Follow._bitWiseAnd_in_bitwiseXor1600);
			bitWiseAnd272=bitWiseAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd272.Tree, bitWiseAnd272, "bitWiseAnd272", retval);
			DebugLocation(312, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:312:15: ( Hat bitWiseAnd )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_1 = input.LA(1);

				if ((LA79_1==Hat))
				{
					int LA79_2 = input.LA(2);

					if ((EvaluatePredicate(synpred109_Php_fragment)))
					{
						alt79 = 1;
					}


				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:312:16: Hat bitWiseAnd
					{
					DebugLocation(312, 16);
					Hat273=(IToken)Match(input,Hat,Follow._Hat_in_bitwiseXor1603); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Hat273_tree = (object)adaptor.Create(Hat273, "Hat273", retval);
					adaptor.AddChild(root_0, Hat273_tree);
					}
					DebugLocation(312, 20);
					PushFollow(Follow._bitWiseAnd_in_bitwiseXor1605);
					bitWiseAnd274=bitWiseAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd274.Tree, bitWiseAnd274, "bitWiseAnd274", retval);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXor", 46);
			LeaveRule("bitwiseXor", 46);
			LeaveRule_bitwiseXor();
			if (state.backtracking > 0) { Memoize(input, 46, bitwiseXor_StartIndex); }

		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXor"); }
		return retval;

	}
	// $ANTLR end "bitwiseXor"

	partial void EnterRule_bitWiseAnd();
	partial void LeaveRule_bitWiseAnd();
	// $ANTLR start "bitWiseAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:315:1: bitWiseAnd : equalityCheck ( Ampersand equalityCheck )* ;
	[GrammarRule("bitWiseAnd")]
	private Antlr3AstNode bitWiseAnd()
	{
		EnterRule_bitWiseAnd();
		EnterRule("bitWiseAnd", 47);
		var retval = new Antlr3AstNode("bitWiseAnd");
		
		retval.Start = (IToken)input.LT(1);
		int bitWiseAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand276 = default(IToken);
		Antlr3AstNode equalityCheck275 = default(Antlr3AstNode);
		Antlr3AstNode equalityCheck277 = default(Antlr3AstNode);

		object Ampersand276_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseAnd");
		DebugLocation(315, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:316:2: ( equalityCheck ( Ampersand equalityCheck )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:316:4: equalityCheck ( Ampersand equalityCheck )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(316, 4);
			PushFollow(Follow._equalityCheck_in_bitWiseAnd1618);
			equalityCheck275=equalityCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck275.Tree, equalityCheck275, "equalityCheck275", retval);
			DebugLocation(316, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:316:18: ( Ampersand equalityCheck )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_1 = input.LA(1);

				if ((LA80_1==Ampersand))
				{
					int LA80_2 = input.LA(2);

					if ((EvaluatePredicate(synpred110_Php_fragment)))
					{
						alt80 = 1;
					}


				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:316:19: Ampersand equalityCheck
					{
					DebugLocation(316, 19);
					Ampersand276=(IToken)Match(input,Ampersand,Follow._Ampersand_in_bitWiseAnd1621); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Ampersand276_tree = (object)adaptor.Create(Ampersand276, "Ampersand276", retval);
					adaptor.AddChild(root_0, Ampersand276_tree);
					}
					DebugLocation(316, 29);
					PushFollow(Follow._equalityCheck_in_bitWiseAnd1623);
					equalityCheck277=equalityCheck();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck277.Tree, equalityCheck277, "equalityCheck277", retval);

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseAnd", 47);
			LeaveRule("bitWiseAnd", 47);
			LeaveRule_bitWiseAnd();
			if (state.backtracking > 0) { Memoize(input, 47, bitWiseAnd_StartIndex); }

		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "bitWiseAnd"); }
		return retval;

	}
	// $ANTLR end "bitWiseAnd"

	partial void EnterRule_equalityCheck();
	partial void LeaveRule_equalityCheck();
	// $ANTLR start "equalityCheck"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:319:1: equalityCheck : comparisionCheck ( EqualityOperator comparisionCheck )? ;
	[GrammarRule("equalityCheck")]
	private Antlr3AstNode equalityCheck()
	{
		EnterRule_equalityCheck();
		EnterRule("equalityCheck", 48);
		var retval = new Antlr3AstNode("equalityCheck");
		
		retval.Start = (IToken)input.LT(1);
		int equalityCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken EqualityOperator279 = default(IToken);
		Antlr3AstNode comparisionCheck278 = default(Antlr3AstNode);
		Antlr3AstNode comparisionCheck280 = default(Antlr3AstNode);

		object EqualityOperator279_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityCheck");
		DebugLocation(319, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:320:2: ( comparisionCheck ( EqualityOperator comparisionCheck )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:320:4: comparisionCheck ( EqualityOperator comparisionCheck )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(320, 4);
			PushFollow(Follow._comparisionCheck_in_equalityCheck1636);
			comparisionCheck278=comparisionCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck278.Tree, comparisionCheck278, "comparisionCheck278", retval);
			DebugLocation(320, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:320:21: ( EqualityOperator comparisionCheck )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_1 = input.LA(1);

			if ((LA81_1==EqualityOperator))
			{
				int LA81_2 = input.LA(2);

				if ((EvaluatePredicate(synpred111_Php_fragment)))
				{
					alt81 = 1;
				}
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:320:22: EqualityOperator comparisionCheck
				{
				DebugLocation(320, 22);
				EqualityOperator279=(IToken)Match(input,EqualityOperator,Follow._EqualityOperator_in_equalityCheck1639); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EqualityOperator279_tree = (object)adaptor.Create(EqualityOperator279, "EqualityOperator279", retval);
				adaptor.AddChild(root_0, EqualityOperator279_tree);
				}
				DebugLocation(320, 39);
				PushFollow(Follow._comparisionCheck_in_equalityCheck1641);
				comparisionCheck280=comparisionCheck();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck280.Tree, comparisionCheck280, "comparisionCheck280", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityCheck", 48);
			LeaveRule("equalityCheck", 48);
			LeaveRule_equalityCheck();
			if (state.backtracking > 0) { Memoize(input, 48, equalityCheck_StartIndex); }

		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityCheck"); }
		return retval;

	}
	// $ANTLR end "equalityCheck"

	partial void EnterRule_comparisionCheck();
	partial void LeaveRule_comparisionCheck();
	// $ANTLR start "comparisionCheck"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:323:1: comparisionCheck : bitWiseShift ( ComparisionOperator bitWiseShift )? ;
	[GrammarRule("comparisionCheck")]
	private Antlr3AstNode comparisionCheck()
	{
		EnterRule_comparisionCheck();
		EnterRule("comparisionCheck", 49);
		var retval = new Antlr3AstNode("comparisionCheck");
		
		retval.Start = (IToken)input.LT(1);
		int comparisionCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ComparisionOperator282 = default(IToken);
		Antlr3AstNode bitWiseShift281 = default(Antlr3AstNode);
		Antlr3AstNode bitWiseShift283 = default(Antlr3AstNode);

		object ComparisionOperator282_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "comparisionCheck");
		DebugLocation(323, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:324:2: ( bitWiseShift ( ComparisionOperator bitWiseShift )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:324:4: bitWiseShift ( ComparisionOperator bitWiseShift )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(324, 4);
			PushFollow(Follow._bitWiseShift_in_comparisionCheck1655);
			bitWiseShift281=bitWiseShift();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift281.Tree, bitWiseShift281, "bitWiseShift281", retval);
			DebugLocation(324, 17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:324:17: ( ComparisionOperator bitWiseShift )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_1 = input.LA(1);

			if ((LA82_1==ComparisionOperator))
			{
				int LA82_2 = input.LA(2);

				if ((EvaluatePredicate(synpred112_Php_fragment)))
				{
					alt82 = 1;
				}
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:324:18: ComparisionOperator bitWiseShift
				{
				DebugLocation(324, 18);
				ComparisionOperator282=(IToken)Match(input,ComparisionOperator,Follow._ComparisionOperator_in_comparisionCheck1658); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ComparisionOperator282_tree = (object)adaptor.Create(ComparisionOperator282, "ComparisionOperator282", retval);
				adaptor.AddChild(root_0, ComparisionOperator282_tree);
				}
				DebugLocation(324, 38);
				PushFollow(Follow._bitWiseShift_in_comparisionCheck1660);
				bitWiseShift283=bitWiseShift();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift283.Tree, bitWiseShift283, "bitWiseShift283", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comparisionCheck", 49);
			LeaveRule("comparisionCheck", 49);
			LeaveRule_comparisionCheck();
			if (state.backtracking > 0) { Memoize(input, 49, comparisionCheck_StartIndex); }

		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "comparisionCheck"); }
		return retval;

	}
	// $ANTLR end "comparisionCheck"

	partial void EnterRule_bitWiseShift();
	partial void LeaveRule_bitWiseShift();
	// $ANTLR start "bitWiseShift"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:327:1: bitWiseShift : addition ( ShiftOperator addition )* ;
	[GrammarRule("bitWiseShift")]
	private Antlr3AstNode bitWiseShift()
	{
		EnterRule_bitWiseShift();
		EnterRule("bitWiseShift", 50);
		var retval = new Antlr3AstNode("bitWiseShift");
		
		retval.Start = (IToken)input.LT(1);
		int bitWiseShift_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ShiftOperator285 = default(IToken);
		Antlr3AstNode addition284 = default(Antlr3AstNode);
		Antlr3AstNode addition286 = default(Antlr3AstNode);

		object ShiftOperator285_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseShift");
		DebugLocation(327, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:328:2: ( addition ( ShiftOperator addition )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:328:4: addition ( ShiftOperator addition )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(328, 4);
			PushFollow(Follow._addition_in_bitWiseShift1673);
			addition284=addition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, addition284.Tree, addition284, "addition284", retval);
			DebugLocation(328, 13);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:328:13: ( ShiftOperator addition )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_1 = input.LA(1);

				if ((LA83_1==ShiftOperator))
				{
					int LA83_2 = input.LA(2);

					if ((EvaluatePredicate(synpred113_Php_fragment)))
					{
						alt83 = 1;
					}


				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:328:14: ShiftOperator addition
					{
					DebugLocation(328, 14);
					ShiftOperator285=(IToken)Match(input,ShiftOperator,Follow._ShiftOperator_in_bitWiseShift1676); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ShiftOperator285_tree = (object)adaptor.Create(ShiftOperator285, "ShiftOperator285", retval);
					adaptor.AddChild(root_0, ShiftOperator285_tree);
					}
					DebugLocation(328, 28);
					PushFollow(Follow._addition_in_bitWiseShift1678);
					addition286=addition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, addition286.Tree, addition286, "addition286", retval);

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseShift", 50);
			LeaveRule("bitWiseShift", 50);
			LeaveRule_bitWiseShift();
			if (state.backtracking > 0) { Memoize(input, 50, bitWiseShift_StartIndex); }

		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "bitWiseShift"); }
		return retval;

	}
	// $ANTLR end "bitWiseShift"

	partial void EnterRule_addition();
	partial void LeaveRule_addition();
	// $ANTLR start "addition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:331:1: addition : multiplication ( ( Plus | Minus | Dot ) multiplication )* ;
	[GrammarRule("addition")]
	private Antlr3AstNode addition()
	{
		EnterRule_addition();
		EnterRule("addition", 51);
		var retval = new Antlr3AstNode("addition");
		
		retval.Start = (IToken)input.LT(1);
		int addition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set288 = default(IToken);
		Antlr3AstNode multiplication287 = default(Antlr3AstNode);
		Antlr3AstNode multiplication289 = default(Antlr3AstNode);

		object set288_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "addition");
		DebugLocation(331, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:332:2: ( multiplication ( ( Plus | Minus | Dot ) multiplication )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:332:4: multiplication ( ( Plus | Minus | Dot ) multiplication )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(332, 4);
			PushFollow(Follow._multiplication_in_addition1692);
			multiplication287=multiplication();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication287.Tree, multiplication287, "multiplication287", retval);
			DebugLocation(332, 19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:332:19: ( ( Plus | Minus | Dot ) multiplication )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_1 = input.LA(1);

				if ((LA84_1==Dot||LA84_1==Minus||LA84_1==Plus))
				{
					int LA84_2 = input.LA(2);

					if ((EvaluatePredicate(synpred116_Php_fragment)))
					{
						alt84 = 1;
					}


				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:332:20: ( Plus | Minus | Dot ) multiplication
					{
					DebugLocation(332, 20);

					set288=(IToken)input.LT(1);
					if (input.LA(1)==Dot||input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set288, "set288", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(332, 41);
					PushFollow(Follow._multiplication_in_addition1707);
					multiplication289=multiplication();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication289.Tree, multiplication289, "multiplication289", retval);

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addition", 51);
			LeaveRule("addition", 51);
			LeaveRule_addition();
			if (state.backtracking > 0) { Memoize(input, 51, addition_StartIndex); }

		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "addition"); }
		return retval;

	}
	// $ANTLR end "addition"

	partial void EnterRule_multiplication();
	partial void LeaveRule_multiplication();
	// $ANTLR start "multiplication"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:335:1: multiplication : logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )* ;
	[GrammarRule("multiplication")]
	private Antlr3AstNode multiplication()
	{
		EnterRule_multiplication();
		EnterRule("multiplication", 52);
		var retval = new Antlr3AstNode("multiplication");
		
		retval.Start = (IToken)input.LT(1);
		int multiplication_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set291 = default(IToken);
		Antlr3AstNode logicalNot290 = default(Antlr3AstNode);
		Antlr3AstNode logicalNot292 = default(Antlr3AstNode);

		object set291_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplication");
		DebugLocation(335, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:336:2: ( logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:336:4: logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(336, 4);
			PushFollow(Follow._logicalNot_in_multiplication1720);
			logicalNot290=logicalNot();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot290.Tree, logicalNot290, "logicalNot290", retval);
			DebugLocation(336, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:336:15: ( ( Asterisk | Forwardslash | Percent ) logicalNot )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_1 = input.LA(1);

				if ((LA85_1==Asterisk||LA85_1==Forwardslash||LA85_1==Percent))
				{
					int LA85_2 = input.LA(2);

					if ((EvaluatePredicate(synpred119_Php_fragment)))
					{
						alt85 = 1;
					}


				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:336:16: ( Asterisk | Forwardslash | Percent ) logicalNot
					{
					DebugLocation(336, 16);

					set291=(IToken)input.LT(1);
					if (input.LA(1)==Asterisk||input.LA(1)==Forwardslash||input.LA(1)==Percent)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set291, "set291", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(336, 52);
					PushFollow(Follow._logicalNot_in_multiplication1735);
					logicalNot292=logicalNot();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot292.Tree, logicalNot292, "logicalNot292", retval);

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplication", 52);
			LeaveRule("multiplication", 52);
			LeaveRule_multiplication();
			if (state.backtracking > 0) { Memoize(input, 52, multiplication_StartIndex); }

		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplication"); }
		return retval;

	}
	// $ANTLR end "multiplication"

	partial void EnterRule_logicalNot();
	partial void LeaveRule_logicalNot();
	// $ANTLR start "logicalNot"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:339:1: logicalNot : ( Bang logicalNot | instanceOf );
	[GrammarRule("logicalNot")]
	private Antlr3AstNode logicalNot()
	{
		EnterRule_logicalNot();
		EnterRule("logicalNot", 53);
		var retval = new Antlr3AstNode("logicalNot");
		
		retval.Start = (IToken)input.LT(1);
		int logicalNot_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Bang293 = default(IToken);
		Antlr3AstNode logicalNot294 = default(Antlr3AstNode);
		Antlr3AstNode instanceOf295 = default(Antlr3AstNode);

		object Bang293_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalNot");
		DebugLocation(339, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:340:2: ( Bang logicalNot | instanceOf )
			int alt86=2;
			try { DebugEnterDecision(86, false);
			int LA86_1 = input.LA(1);

			if ((LA86_1==Bang))
			{
				alt86 = 1;
			}
			else if ((LA86_1==Ampersand||LA86_1==ArrayType||(LA86_1>=BoolType && LA86_1<=BooleanType)||LA86_1==Clone||LA86_1==Die||(LA86_1>=DoubleQuotedString && LA86_1<=DoubleType)||LA86_1==Empty||(LA86_1>=Eval && LA86_1<=Exit)||LA86_1==False||LA86_1==FloatType||LA86_1==Function||LA86_1==HaltCompiler||LA86_1==HereDoc||(LA86_1>=Include && LA86_1<=IncrementOperator)||(LA86_1>=IntType && LA86_1<=IntegerType)||(LA86_1>=Isset && LA86_1<=List)||LA86_1==Minus||(LA86_1>=New && LA86_1<=Null)||LA86_1==ObjectType||(LA86_1>=OpenRoundBracket && LA86_1<=OpenSquareBracket)||LA86_1==Plus||(LA86_1>=Real && LA86_1<=RequireOnce)||LA86_1==SingleQuotedString||(LA86_1>=Static && LA86_1<=SuppressWarnings)||(LA86_1>=Tilde && LA86_1<=True)||LA86_1==UnquotedString||LA86_1==UnsetType||LA86_1==VariableName||(LA86_1>=128 && LA86_1<=129)))
			{
				alt86 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 86, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:340:4: Bang logicalNot
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(340, 4);
				Bang293=(IToken)Match(input,Bang,Follow._Bang_in_logicalNot1748); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Bang293_tree = (object)adaptor.Create(Bang293, "Bang293", retval);
				adaptor.AddChild(root_0, Bang293_tree);
				}
				DebugLocation(340, 9);
				PushFollow(Follow._logicalNot_in_logicalNot1750);
				logicalNot294=logicalNot();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot294.Tree, logicalNot294, "logicalNot294", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:341:4: instanceOf
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(341, 4);
				PushFollow(Follow._instanceOf_in_logicalNot1755);
				instanceOf295=instanceOf();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOf295.Tree, instanceOf295, "instanceOf295", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalNot", 53);
			LeaveRule("logicalNot", 53);
			LeaveRule_logicalNot();
			if (state.backtracking > 0) { Memoize(input, 53, logicalNot_StartIndex); }

		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalNot"); }
		return retval;

	}
	// $ANTLR end "logicalNot"

	partial void EnterRule_instanceOf();
	partial void LeaveRule_instanceOf();
	// $ANTLR start "instanceOf"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:344:1: instanceOf : negateOrCast ( Instanceof negateOrCast )? ;
	[GrammarRule("instanceOf")]
	private Antlr3AstNode instanceOf()
	{
		EnterRule_instanceOf();
		EnterRule("instanceOf", 54);
		var retval = new Antlr3AstNode("instanceOf");
		
		retval.Start = (IToken)input.LT(1);
		int instanceOf_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Instanceof297 = default(IToken);
		Antlr3AstNode negateOrCast296 = default(Antlr3AstNode);
		Antlr3AstNode negateOrCast298 = default(Antlr3AstNode);

		object Instanceof297_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "instanceOf");
		DebugLocation(344, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:345:2: ( negateOrCast ( Instanceof negateOrCast )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:345:4: negateOrCast ( Instanceof negateOrCast )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(345, 4);
			PushFollow(Follow._negateOrCast_in_instanceOf1766);
			negateOrCast296=negateOrCast();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast296.Tree, negateOrCast296, "negateOrCast296", retval);
			DebugLocation(345, 17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:345:17: ( Instanceof negateOrCast )?
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_1 = input.LA(1);

			if ((LA87_1==Instanceof))
			{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt87 = 1;
				}
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:345:18: Instanceof negateOrCast
				{
				DebugLocation(345, 18);
				Instanceof297=(IToken)Match(input,Instanceof,Follow._Instanceof_in_instanceOf1769); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Instanceof297_tree = (object)adaptor.Create(Instanceof297, "Instanceof297", retval);
				adaptor.AddChild(root_0, Instanceof297_tree);
				}
				DebugLocation(345, 29);
				PushFollow(Follow._negateOrCast_in_instanceOf1771);
				negateOrCast298=negateOrCast();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast298.Tree, negateOrCast298, "negateOrCast298", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOf", 54);
			LeaveRule("instanceOf", 54);
			LeaveRule_instanceOf();
			if (state.backtracking > 0) { Memoize(input, 54, instanceOf_StartIndex); }

		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "instanceOf"); }
		return retval;

	}
	// $ANTLR end "instanceOf"

	partial void EnterRule_negateOrCast();
	partial void LeaveRule_negateOrCast();
	// $ANTLR start "negateOrCast"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:348:1: negateOrCast : ( ( Tilde | Minus | SuppressWarnings ) increment | OpenRoundBracket primitiveType CloseRoundBracket increment | increment );
	[GrammarRule("negateOrCast")]
	private Antlr3AstNode negateOrCast()
	{
		EnterRule_negateOrCast();
		EnterRule("negateOrCast", 55);
		var retval = new Antlr3AstNode("negateOrCast");
		
		retval.Start = (IToken)input.LT(1);
		int negateOrCast_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set299 = default(IToken);
		IToken OpenRoundBracket301 = default(IToken);
		IToken CloseRoundBracket303 = default(IToken);
		Antlr3AstNode increment300 = default(Antlr3AstNode);
		Antlr3AstNode primitiveType302 = default(Antlr3AstNode);
		Antlr3AstNode increment304 = default(Antlr3AstNode);
		Antlr3AstNode increment305 = default(Antlr3AstNode);

		object set299_tree = default(object);
		object OpenRoundBracket301_tree = default(object);
		object CloseRoundBracket303_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "negateOrCast");
		DebugLocation(348, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:349:2: ( ( Tilde | Minus | SuppressWarnings ) increment | OpenRoundBracket primitiveType CloseRoundBracket increment | increment )
			int alt88=3;
			try { DebugEnterDecision(88, false);
			switch (input.LA(1))
			{
			case Minus:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred124_Php_fragment)))
				{
					alt88 = 1;
				}
				else if ((true))
				{
					alt88 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Php_fragment)))
				{
					alt88 = 2;
				}
				else if ((true))
				{
					alt88 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case ArrayType:
			case BoolType:
			case BooleanType:
			case Clone:
			case Die:
			case DoubleQuotedString:
			case DoubleType:
			case Empty:
			case Eval:
			case Exit:
			case False:
			case FloatType:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case IncrementOperator:
			case IntType:
			case Integer:
			case IntegerType:
			case Isset:
			case List:
			case New:
			case Null:
			case ObjectType:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case Static:
			case StringType:
			case True:
			case UnquotedString:
			case UnsetType:
			case VariableName:
			case 128:
			case 129:
				{
				alt88 = 3;
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				alt88 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:349:4: ( Tilde | Minus | SuppressWarnings ) increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(349, 4);

				set299=(IToken)input.LT(1);
				if (input.LA(1)==Minus||input.LA(1)==SuppressWarnings||input.LA(1)==Tilde)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set299, "set299", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(349, 39);
				PushFollow(Follow._increment_in_negateOrCast1796);
				increment300=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment300.Tree, increment300, "increment300", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:350:4: OpenRoundBracket primitiveType CloseRoundBracket increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(350, 4);
				OpenRoundBracket301=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_negateOrCast1801); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket301_tree = (object)adaptor.Create(OpenRoundBracket301, "OpenRoundBracket301", retval);
				adaptor.AddChild(root_0, OpenRoundBracket301_tree);
				}
				DebugLocation(350, 21);
				PushFollow(Follow._primitiveType_in_negateOrCast1803);
				primitiveType302=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType302.Tree, primitiveType302, "primitiveType302", retval);
				DebugLocation(350, 35);
				CloseRoundBracket303=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_negateOrCast1805); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket303_tree = (object)adaptor.Create(CloseRoundBracket303, "CloseRoundBracket303", retval);
				adaptor.AddChild(root_0, CloseRoundBracket303_tree);
				}
				DebugLocation(350, 53);
				PushFollow(Follow._increment_in_negateOrCast1807);
				increment304=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment304.Tree, increment304, "increment304", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:351:4: increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(351, 4);
				PushFollow(Follow._increment_in_negateOrCast1812);
				increment305=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment305.Tree, increment305, "increment305", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("negateOrCast", 55);
			LeaveRule("negateOrCast", 55);
			LeaveRule_negateOrCast();
			if (state.backtracking > 0) { Memoize(input, 55, negateOrCast_StartIndex); }

		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "negateOrCast"); }
		return retval;

	}
	// $ANTLR end "negateOrCast"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:354:1: primitiveType : ( IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ArrayType | ObjectType | UnsetType );
	[GrammarRule("primitiveType")]
	private Antlr3AstNode primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 56);
		var retval = new Antlr3AstNode("primitiveType");
		
		retval.Start = (IToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set306 = default(IToken);

		object set306_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(354, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:355:2: ( IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ArrayType | ObjectType | UnsetType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(355, 2);

			set306=(IToken)input.LT(1);
			if (input.LA(1)==ArrayType||(input.LA(1)>=BoolType && input.LA(1)<=BooleanType)||input.LA(1)==DoubleType||input.LA(1)==FloatType||input.LA(1)==IntType||input.LA(1)==IntegerType||input.LA(1)==ObjectType||input.LA(1)==RealType||input.LA(1)==StringType||input.LA(1)==UnsetType)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set306, "set306", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 56);
			LeaveRule("primitiveType", 56);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 56, primitiveType_StartIndex); }

		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_increment();
	partial void LeaveRule_increment();
	// $ANTLR start "increment"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:359:1: increment : ( IncrementOperator name | name IncrementOperator | listVariables ( Equals | AsignmentOperator ) assignment | newOrClone | OpenRoundBracket expression CloseRoundBracket );
	[GrammarRule("increment")]
	private Antlr3AstNode increment()
	{
		EnterRule_increment();
		EnterRule("increment", 57);
		var retval = new Antlr3AstNode("increment");
		
		retval.Start = (IToken)input.LT(1);
		int increment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IncrementOperator307 = default(IToken);
		IToken IncrementOperator310 = default(IToken);
		IToken set312 = default(IToken);
		IToken OpenRoundBracket315 = default(IToken);
		IToken CloseRoundBracket317 = default(IToken);
		Antlr3AstNode name308 = default(Antlr3AstNode);
		Antlr3AstNode name309 = default(Antlr3AstNode);
		Antlr3AstNode listVariables311 = default(Antlr3AstNode);
		Antlr3AstNode assignment313 = default(Antlr3AstNode);
		Antlr3AstNode newOrClone314 = default(Antlr3AstNode);
		Antlr3AstNode expression316 = default(Antlr3AstNode);

		object IncrementOperator307_tree = default(object);
		object IncrementOperator310_tree = default(object);
		object set312_tree = default(object);
		object OpenRoundBracket315_tree = default(object);
		object CloseRoundBracket317_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "increment");
		DebugLocation(359, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:360:2: ( IncrementOperator name | name IncrementOperator | listVariables ( Equals | AsignmentOperator ) assignment | newOrClone | OpenRoundBracket expression CloseRoundBracket )
			int alt89=5;
			try { DebugEnterDecision(89, false);
			switch (input.LA(1))
			{
			case IncrementOperator:
				{
				alt89 = 1;
				}
				break;
			case VariableName:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred137_Php_fragment)))
				{
					alt89 = 2;
				}
				else if ((EvaluatePredicate(synpred139_Php_fragment)))
				{
					alt89 = 3;
				}
				else if ((EvaluatePredicate(synpred140_Php_fragment)))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred137_Php_fragment)))
				{
					alt89 = 2;
				}
				else if ((EvaluatePredicate(synpred139_Php_fragment)))
				{
					alt89 = 3;
				}
				else if ((EvaluatePredicate(synpred140_Php_fragment)))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred137_Php_fragment)))
				{
					alt89 = 2;
				}
				else if ((EvaluatePredicate(synpred139_Php_fragment)))
				{
					alt89 = 3;
				}
				else if ((EvaluatePredicate(synpred140_Php_fragment)))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA89_2 = input.LA(2);

				if ((EvaluatePredicate(synpred137_Php_fragment)))
				{
					alt89 = 2;
				}
				else if ((EvaluatePredicate(synpred139_Php_fragment)))
				{
					alt89 = 3;
				}
				else if ((EvaluatePredicate(synpred140_Php_fragment)))
				{
					alt89 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case List:
				{
				alt89 = 3;
				}
				break;
			case Ampersand:
			case ArrayType:
			case Clone:
			case Die:
			case DoubleQuotedString:
			case Empty:
			case Eval:
			case Exit:
			case False:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case Integer:
			case Isset:
			case Minus:
			case New:
			case Null:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case True:
			case UnsetType:
				{
				alt89 = 4;
				}
				break;
			case OpenRoundBracket:
				{
				alt89 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:360:4: IncrementOperator name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(360, 4);
				IncrementOperator307=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment1875); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncrementOperator307_tree = (object)adaptor.Create(IncrementOperator307, "IncrementOperator307", retval);
				adaptor.AddChild(root_0, IncrementOperator307_tree);
				}
				DebugLocation(360, 22);
				PushFollow(Follow._name_in_increment1877);
				name308=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name308.Tree, name308, "name308", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:361:4: name IncrementOperator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(361, 4);
				PushFollow(Follow._name_in_increment1882);
				name309=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name309.Tree, name309, "name309", retval);
				DebugLocation(361, 9);
				IncrementOperator310=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment1884); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncrementOperator310_tree = (object)adaptor.Create(IncrementOperator310, "IncrementOperator310", retval);
				adaptor.AddChild(root_0, IncrementOperator310_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:362:4: listVariables ( Equals | AsignmentOperator ) assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(362, 4);
				PushFollow(Follow._listVariables_in_increment1889);
				listVariables311=listVariables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, listVariables311.Tree, listVariables311, "listVariables311", retval);
				DebugLocation(362, 18);

				set312=(IToken)input.LT(1);
				if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set312, "set312", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(362, 47);
				PushFollow(Follow._assignment_in_increment1899);
				assignment313=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment313.Tree, assignment313, "assignment313", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:363:4: newOrClone
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(363, 4);
				PushFollow(Follow._newOrClone_in_increment1904);
				newOrClone314=newOrClone();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newOrClone314.Tree, newOrClone314, "newOrClone314", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:364:4: OpenRoundBracket expression CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(364, 4);
				OpenRoundBracket315=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_increment1909); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket315_tree = (object)adaptor.Create(OpenRoundBracket315, "OpenRoundBracket315", retval);
				adaptor.AddChild(root_0, OpenRoundBracket315_tree);
				}
				DebugLocation(364, 21);
				PushFollow(Follow._expression_in_increment1911);
				expression316=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression316.Tree, expression316, "expression316", retval);
				DebugLocation(364, 32);
				CloseRoundBracket317=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_increment1913); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket317_tree = (object)adaptor.Create(CloseRoundBracket317, "CloseRoundBracket317", retval);
				adaptor.AddChild(root_0, CloseRoundBracket317_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("increment", 57);
			LeaveRule("increment", 57);
			LeaveRule_increment();
			if (state.backtracking > 0) { Memoize(input, 57, increment_StartIndex); }

		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "increment"); }
		return retval;

	}
	// $ANTLR end "increment"

	partial void EnterRule_newOrClone();
	partial void LeaveRule_newOrClone();
	// $ANTLR start "newOrClone"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:369:1: newOrClone : ( New ( nameOrFunctionCall | constantOrStaticAccessor ) | New Static ( functionArguments )? | Clone name | atomOrReference );
	[GrammarRule("newOrClone")]
	private Antlr3AstNode newOrClone()
	{
		EnterRule_newOrClone();
		EnterRule("newOrClone", 58);
		var retval = new Antlr3AstNode("newOrClone");
		
		retval.Start = (IToken)input.LT(1);
		int newOrClone_StartIndex = input.Index;

		object root_0 = default(object);

		IToken New318 = default(IToken);
		IToken New321 = default(IToken);
		IToken Static322 = default(IToken);
		IToken Clone324 = default(IToken);
		Antlr3AstNode nameOrFunctionCall319 = default(Antlr3AstNode);
		Antlr3AstNode constantOrStaticAccessor320 = default(Antlr3AstNode);
		Antlr3AstNode functionArguments323 = default(Antlr3AstNode);
		Antlr3AstNode name325 = default(Antlr3AstNode);
		Antlr3AstNode atomOrReference326 = default(Antlr3AstNode);

		object New318_tree = default(object);
		object New321_tree = default(object);
		object Static322_tree = default(object);
		object Clone324_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "newOrClone");
		DebugLocation(369, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:2: ( New ( nameOrFunctionCall | constantOrStaticAccessor ) | New Static ( functionArguments )? | Clone name | atomOrReference )
			int alt92=4;
			try { DebugEnterDecision(92, false);
			switch (input.LA(1))
			{
			case New:
				{
				int LA92_2 = input.LA(2);

				if ((LA92_2==Static))
				{
					int LA92_3 = input.LA(3);

					if ((EvaluatePredicate(synpred142_Php_fragment)))
					{
						alt92 = 1;
					}
					else if ((EvaluatePredicate(synpred144_Php_fragment)))
					{
						alt92 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 92, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if (((LA92_2>=BoolType && LA92_2<=BooleanType)||LA92_2==Die||LA92_2==DoubleType||LA92_2==Empty||(LA92_2>=Eval && LA92_2<=Exit)||LA92_2==FloatType||LA92_2==HaltCompiler||LA92_2==IntType||LA92_2==IntegerType||LA92_2==Isset||LA92_2==ObjectType||LA92_2==RealType||LA92_2==StringType||LA92_2==UnquotedString||LA92_2==UnsetType||LA92_2==VariableName||(LA92_2>=128 && LA92_2<=129)))
				{
					alt92 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				alt92 = 3;
				}
				break;
			case Ampersand:
			case ArrayType:
			case BoolType:
			case BooleanType:
			case Die:
			case DoubleQuotedString:
			case DoubleType:
			case Empty:
			case Eval:
			case Exit:
			case False:
			case FloatType:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case IntType:
			case Integer:
			case IntegerType:
			case Isset:
			case Minus:
			case Null:
			case ObjectType:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case Static:
			case StringType:
			case True:
			case UnquotedString:
			case UnsetType:
			case VariableName:
			case 128:
			case 129:
				{
				alt92 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:4: New ( nameOrFunctionCall | constantOrStaticAccessor )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(371, 4);
				New318=(IToken)Match(input,New,Follow._New_in_newOrClone1935); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New318_tree = (object)adaptor.Create(New318, "New318", retval);
				adaptor.AddChild(root_0, New318_tree);
				}
				DebugLocation(371, 8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:8: ( nameOrFunctionCall | constantOrStaticAccessor )
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				switch (input.LA(1))
				{
				case VariableName:
					{
					int LA90_2 = input.LA(2);

					if ((EvaluatePredicate(synpred141_Php_fragment)))
					{
						alt90 = 1;
					}
					else if ((true))
					{
						alt90 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 90, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 128:
					{
					int LA90_2 = input.LA(2);

					if ((EvaluatePredicate(synpred141_Php_fragment)))
					{
						alt90 = 1;
					}
					else if ((true))
					{
						alt90 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 90, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 129:
					{
					int LA90_2 = input.LA(2);

					if ((EvaluatePredicate(synpred141_Php_fragment)))
					{
						alt90 = 1;
					}
					else if ((true))
					{
						alt90 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 90, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BoolType:
				case BooleanType:
				case DoubleType:
				case FloatType:
				case IntType:
				case IntegerType:
				case ObjectType:
				case RealType:
				case Static:
				case StringType:
				case UnquotedString:
					{
					int LA90_2 = input.LA(2);

					if ((EvaluatePredicate(synpred141_Php_fragment)))
					{
						alt90 = 1;
					}
					else if ((true))
					{
						alt90 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 90, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Die:
				case Empty:
				case Eval:
				case Exit:
				case HaltCompiler:
				case Isset:
				case UnsetType:
					{
					alt90 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 90, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:9: nameOrFunctionCall
					{
					DebugLocation(371, 9);
					PushFollow(Follow._nameOrFunctionCall_in_newOrClone1938);
					nameOrFunctionCall319=nameOrFunctionCall();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall319.Tree, nameOrFunctionCall319, "nameOrFunctionCall319", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:30: constantOrStaticAccessor
					{
					DebugLocation(371, 30);
					PushFollow(Follow._constantOrStaticAccessor_in_newOrClone1942);
					constantOrStaticAccessor320=constantOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor320.Tree, constantOrStaticAccessor320, "constantOrStaticAccessor320", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(90); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:372:4: New Static ( functionArguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(372, 4);
				New321=(IToken)Match(input,New,Follow._New_in_newOrClone1948); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New321_tree = (object)adaptor.Create(New321, "New321", retval);
				adaptor.AddChild(root_0, New321_tree);
				}
				DebugLocation(372, 8);
				Static322=(IToken)Match(input,Static,Follow._Static_in_newOrClone1950); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static322_tree = (object)adaptor.Create(Static322, "Static322", retval);
				adaptor.AddChild(root_0, Static322_tree);
				}
				DebugLocation(372, 15);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:372:15: ( functionArguments )?
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				int LA91_1 = input.LA(1);

				if ((LA91_1==OpenRoundBracket))
				{
					int LA91_2 = input.LA(2);

					if ((EvaluatePredicate(synpred143_Php_fragment)))
					{
						alt91 = 1;
					}
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:372:15: functionArguments
					{
					DebugLocation(372, 15);
					PushFollow(Follow._functionArguments_in_newOrClone1952);
					functionArguments323=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments323.Tree, functionArguments323, "functionArguments323", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(91); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:373:4: Clone name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(373, 4);
				Clone324=(IToken)Match(input,Clone,Follow._Clone_in_newOrClone1958); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Clone324_tree = (object)adaptor.Create(Clone324, "Clone324", retval);
				adaptor.AddChild(root_0, Clone324_tree);
				}
				DebugLocation(373, 10);
				PushFollow(Follow._name_in_newOrClone1960);
				name325=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name325.Tree, name325, "name325", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:374:4: atomOrReference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(374, 4);
				PushFollow(Follow._atomOrReference_in_newOrClone1965);
				atomOrReference326=atomOrReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atomOrReference326.Tree, atomOrReference326, "atomOrReference326", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newOrClone", 58);
			LeaveRule("newOrClone", 58);
			LeaveRule_newOrClone();
			if (state.backtracking > 0) { Memoize(input, 58, newOrClone_StartIndex); }

		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "newOrClone"); }
		return retval;

	}
	// $ANTLR end "newOrClone"

	partial void EnterRule_atomOrReference();
	partial void LeaveRule_atomOrReference();
	// $ANTLR start "atomOrReference"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:377:1: atomOrReference : ( reference | atom );
	[GrammarRule("atomOrReference")]
	private Antlr3AstNode atomOrReference()
	{
		EnterRule_atomOrReference();
		EnterRule("atomOrReference", 59);
		var retval = new Antlr3AstNode("atomOrReference");
		
		retval.Start = (IToken)input.LT(1);
		int atomOrReference_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode reference327 = default(Antlr3AstNode);
		Antlr3AstNode atom328 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "atomOrReference");
		DebugLocation(377, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:378:2: ( reference | atom )
			int alt93=2;
			try { DebugEnterDecision(93, false);
			switch (input.LA(1))
			{
			case Ampersand:
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case Function:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				alt93 = 1;
				}
				break;
			case VariableName:
				{
				int LA93_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Php_fragment)))
				{
					alt93 = 1;
				}
				else if ((true))
				{
					alt93 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA93_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Php_fragment)))
				{
					alt93 = 1;
				}
				else if ((true))
				{
					alt93 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA93_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Php_fragment)))
				{
					alt93 = 1;
				}
				else if ((true))
				{
					alt93 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA93_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Php_fragment)))
				{
					alt93 = 1;
				}
				else if ((true))
				{
					alt93 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
			case DoubleQuotedString:
			case False:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case Integer:
			case Minus:
			case Null:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case True:
				{
				alt93 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:378:4: reference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(378, 4);
				PushFollow(Follow._reference_in_atomOrReference1976);
				reference327=reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, reference327.Tree, reference327, "reference327", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:379:4: atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(379, 4);
				PushFollow(Follow._atom_in_atomOrReference1981);
				atom328=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom328.Tree, atom328, "atom328", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atomOrReference", 59);
			LeaveRule("atomOrReference", 59);
			LeaveRule_atomOrReference();
			if (state.backtracking > 0) { Memoize(input, 59, atomOrReference_StartIndex); }

		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "atomOrReference"); }
		return retval;

	}
	// $ANTLR end "atomOrReference"

	partial void EnterRule_arrayDeclaration();
	partial void LeaveRule_arrayDeclaration();
	// $ANTLR start "arrayDeclaration"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:382:1: arrayDeclaration : ( ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket | OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket );
	[GrammarRule("arrayDeclaration")]
	private Antlr3AstNode arrayDeclaration()
	{
		EnterRule_arrayDeclaration();
		EnterRule("arrayDeclaration", 60);
		var retval = new Antlr3AstNode("arrayDeclaration");
		
		retval.Start = (IToken)input.LT(1);
		int arrayDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ArrayType329 = default(IToken);
		IToken OpenRoundBracket330 = default(IToken);
		IToken Comma332 = default(IToken);
		IToken Comma334 = default(IToken);
		IToken CloseRoundBracket335 = default(IToken);
		IToken OpenSquareBracket336 = default(IToken);
		IToken Comma338 = default(IToken);
		IToken Comma340 = default(IToken);
		IToken CloseSquareBracket341 = default(IToken);
		Antlr3AstNode arrayEntry331 = default(Antlr3AstNode);
		Antlr3AstNode arrayEntry333 = default(Antlr3AstNode);
		Antlr3AstNode arrayEntry337 = default(Antlr3AstNode);
		Antlr3AstNode arrayEntry339 = default(Antlr3AstNode);

		object ArrayType329_tree = default(object);
		object OpenRoundBracket330_tree = default(object);
		object Comma332_tree = default(object);
		object Comma334_tree = default(object);
		object CloseRoundBracket335_tree = default(object);
		object OpenSquareBracket336_tree = default(object);
		object Comma338_tree = default(object);
		object Comma340_tree = default(object);
		object CloseSquareBracket341_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayDeclaration");
		DebugLocation(382, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:383:2: ( ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket | OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket )
			int alt100=2;
			try { DebugEnterDecision(100, false);
			int LA100_1 = input.LA(1);

			if ((LA100_1==ArrayType))
			{
				alt100 = 1;
			}
			else if ((LA100_1==OpenSquareBracket))
			{
				alt100 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 100, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:383:4: ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(383, 4);
				ArrayType329=(IToken)Match(input,ArrayType,Follow._ArrayType_in_arrayDeclaration1992); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ArrayType329_tree = (object)adaptor.Create(ArrayType329, "ArrayType329", retval);
				adaptor.AddChild(root_0, ArrayType329_tree);
				}
				DebugLocation(383, 14);
				OpenRoundBracket330=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_arrayDeclaration1994); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket330_tree = (object)adaptor.Create(OpenRoundBracket330, "OpenRoundBracket330", retval);
				adaptor.AddChild(root_0, OpenRoundBracket330_tree);
				}
				DebugLocation(383, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:383:31: ( arrayEntry ( Comma arrayEntry )* ( Comma )? )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_1 = input.LA(1);

				if ((LA96_1==Ampersand||LA96_1==ArrayType||LA96_1==Bang||(LA96_1>=BoolType && LA96_1<=BooleanType)||LA96_1==Clone||LA96_1==Die||(LA96_1>=DoubleQuotedString && LA96_1<=DoubleType)||LA96_1==Empty||(LA96_1>=Eval && LA96_1<=Exit)||LA96_1==False||LA96_1==FloatType||LA96_1==Function||LA96_1==HaltCompiler||LA96_1==HereDoc||(LA96_1>=Include && LA96_1<=IncrementOperator)||(LA96_1>=IntType && LA96_1<=IntegerType)||(LA96_1>=Isset && LA96_1<=List)||LA96_1==Minus||(LA96_1>=New && LA96_1<=Null)||LA96_1==ObjectType||(LA96_1>=OpenRoundBracket && LA96_1<=OpenSquareBracket)||LA96_1==Plus||(LA96_1>=Real && LA96_1<=RequireOnce)||LA96_1==SingleQuotedString||(LA96_1>=Static && LA96_1<=SuppressWarnings)||(LA96_1>=Tilde && LA96_1<=True)||LA96_1==UnquotedString||LA96_1==UnsetType||LA96_1==VariableName||(LA96_1>=128 && LA96_1<=129)))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:383:32: arrayEntry ( Comma arrayEntry )* ( Comma )?
					{
					DebugLocation(383, 32);
					PushFollow(Follow._arrayEntry_in_arrayDeclaration1997);
					arrayEntry331=arrayEntry();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry331.Tree, arrayEntry331, "arrayEntry331", retval);
					DebugLocation(383, 43);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:383:43: ( Comma arrayEntry )*
					try { DebugEnterSubRule(94);
					while (true)
					{
						int alt94=2;
						try { DebugEnterDecision(94, false);
						int LA94_1 = input.LA(1);

						if ((LA94_1==Comma))
						{
							int LA94_2 = input.LA(2);

							if ((LA94_2==Ampersand||LA94_2==ArrayType||LA94_2==Bang||(LA94_2>=BoolType && LA94_2<=BooleanType)||LA94_2==Clone||LA94_2==Die||(LA94_2>=DoubleQuotedString && LA94_2<=DoubleType)||LA94_2==Empty||(LA94_2>=Eval && LA94_2<=Exit)||LA94_2==False||LA94_2==FloatType||LA94_2==Function||LA94_2==HaltCompiler||LA94_2==HereDoc||(LA94_2>=Include && LA94_2<=IncrementOperator)||(LA94_2>=IntType && LA94_2<=IntegerType)||(LA94_2>=Isset && LA94_2<=List)||LA94_2==Minus||(LA94_2>=New && LA94_2<=Null)||LA94_2==ObjectType||(LA94_2>=OpenRoundBracket && LA94_2<=OpenSquareBracket)||LA94_2==Plus||(LA94_2>=Real && LA94_2<=RequireOnce)||LA94_2==SingleQuotedString||(LA94_2>=Static && LA94_2<=SuppressWarnings)||(LA94_2>=Tilde && LA94_2<=True)||LA94_2==UnquotedString||LA94_2==UnsetType||LA94_2==VariableName||(LA94_2>=128 && LA94_2<=129)))
							{
								alt94 = 1;
							}


						}


						} finally { DebugExitDecision(94); }
						switch ( alt94 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:383:44: Comma arrayEntry
							{
							DebugLocation(383, 44);
							Comma332=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2000); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Comma332_tree = (object)adaptor.Create(Comma332, "Comma332", retval);
							adaptor.AddChild(root_0, Comma332_tree);
							}
							DebugLocation(383, 50);
							PushFollow(Follow._arrayEntry_in_arrayDeclaration2002);
							arrayEntry333=arrayEntry();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry333.Tree, arrayEntry333, "arrayEntry333", retval);

							}
							break;

						default:
							goto loop94;
						}
					}

					loop94:
						;

					} finally { DebugExitSubRule(94); }

					DebugLocation(383, 63);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:383:63: ( Comma )?
					int alt95=2;
					try { DebugEnterSubRule(95);
					try { DebugEnterDecision(95, false);
					int LA95_1 = input.LA(1);

					if ((LA95_1==Comma))
					{
						alt95 = 1;
					}
					} finally { DebugExitDecision(95); }
					switch (alt95)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:383:63: Comma
						{
						DebugLocation(383, 63);
						Comma334=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2006); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma334_tree = (object)adaptor.Create(Comma334, "Comma334", retval);
						adaptor.AddChild(root_0, Comma334_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(95); }


					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(383, 72);
				CloseRoundBracket335=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_arrayDeclaration2011); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket335_tree = (object)adaptor.Create(CloseRoundBracket335, "CloseRoundBracket335", retval);
				adaptor.AddChild(root_0, CloseRoundBracket335_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:384:4: OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(384, 4);
				OpenSquareBracket336=(IToken)Match(input,OpenSquareBracket,Follow._OpenSquareBracket_in_arrayDeclaration2016); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenSquareBracket336_tree = (object)adaptor.Create(OpenSquareBracket336, "OpenSquareBracket336", retval);
				adaptor.AddChild(root_0, OpenSquareBracket336_tree);
				}
				DebugLocation(384, 22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:384:22: ( arrayEntry ( Comma arrayEntry )* ( Comma )? )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, false);
				int LA99_1 = input.LA(1);

				if ((LA99_1==Ampersand||LA99_1==ArrayType||LA99_1==Bang||(LA99_1>=BoolType && LA99_1<=BooleanType)||LA99_1==Clone||LA99_1==Die||(LA99_1>=DoubleQuotedString && LA99_1<=DoubleType)||LA99_1==Empty||(LA99_1>=Eval && LA99_1<=Exit)||LA99_1==False||LA99_1==FloatType||LA99_1==Function||LA99_1==HaltCompiler||LA99_1==HereDoc||(LA99_1>=Include && LA99_1<=IncrementOperator)||(LA99_1>=IntType && LA99_1<=IntegerType)||(LA99_1>=Isset && LA99_1<=List)||LA99_1==Minus||(LA99_1>=New && LA99_1<=Null)||LA99_1==ObjectType||(LA99_1>=OpenRoundBracket && LA99_1<=OpenSquareBracket)||LA99_1==Plus||(LA99_1>=Real && LA99_1<=RequireOnce)||LA99_1==SingleQuotedString||(LA99_1>=Static && LA99_1<=SuppressWarnings)||(LA99_1>=Tilde && LA99_1<=True)||LA99_1==UnquotedString||LA99_1==UnsetType||LA99_1==VariableName||(LA99_1>=128 && LA99_1<=129)))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:384:23: arrayEntry ( Comma arrayEntry )* ( Comma )?
					{
					DebugLocation(384, 23);
					PushFollow(Follow._arrayEntry_in_arrayDeclaration2019);
					arrayEntry337=arrayEntry();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry337.Tree, arrayEntry337, "arrayEntry337", retval);
					DebugLocation(384, 34);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:384:34: ( Comma arrayEntry )*
					try { DebugEnterSubRule(97);
					while (true)
					{
						int alt97=2;
						try { DebugEnterDecision(97, false);
						int LA97_1 = input.LA(1);

						if ((LA97_1==Comma))
						{
							int LA97_2 = input.LA(2);

							if ((LA97_2==Ampersand||LA97_2==ArrayType||LA97_2==Bang||(LA97_2>=BoolType && LA97_2<=BooleanType)||LA97_2==Clone||LA97_2==Die||(LA97_2>=DoubleQuotedString && LA97_2<=DoubleType)||LA97_2==Empty||(LA97_2>=Eval && LA97_2<=Exit)||LA97_2==False||LA97_2==FloatType||LA97_2==Function||LA97_2==HaltCompiler||LA97_2==HereDoc||(LA97_2>=Include && LA97_2<=IncrementOperator)||(LA97_2>=IntType && LA97_2<=IntegerType)||(LA97_2>=Isset && LA97_2<=List)||LA97_2==Minus||(LA97_2>=New && LA97_2<=Null)||LA97_2==ObjectType||(LA97_2>=OpenRoundBracket && LA97_2<=OpenSquareBracket)||LA97_2==Plus||(LA97_2>=Real && LA97_2<=RequireOnce)||LA97_2==SingleQuotedString||(LA97_2>=Static && LA97_2<=SuppressWarnings)||(LA97_2>=Tilde && LA97_2<=True)||LA97_2==UnquotedString||LA97_2==UnsetType||LA97_2==VariableName||(LA97_2>=128 && LA97_2<=129)))
							{
								alt97 = 1;
							}


						}


						} finally { DebugExitDecision(97); }
						switch ( alt97 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:384:35: Comma arrayEntry
							{
							DebugLocation(384, 35);
							Comma338=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2022); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Comma338_tree = (object)adaptor.Create(Comma338, "Comma338", retval);
							adaptor.AddChild(root_0, Comma338_tree);
							}
							DebugLocation(384, 41);
							PushFollow(Follow._arrayEntry_in_arrayDeclaration2024);
							arrayEntry339=arrayEntry();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry339.Tree, arrayEntry339, "arrayEntry339", retval);

							}
							break;

						default:
							goto loop97;
						}
					}

					loop97:
						;

					} finally { DebugExitSubRule(97); }

					DebugLocation(384, 54);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:384:54: ( Comma )?
					int alt98=2;
					try { DebugEnterSubRule(98);
					try { DebugEnterDecision(98, false);
					int LA98_1 = input.LA(1);

					if ((LA98_1==Comma))
					{
						alt98 = 1;
					}
					} finally { DebugExitDecision(98); }
					switch (alt98)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:384:54: Comma
						{
						DebugLocation(384, 54);
						Comma340=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2028); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma340_tree = (object)adaptor.Create(Comma340, "Comma340", retval);
						adaptor.AddChild(root_0, Comma340_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(98); }


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(384, 63);
				CloseSquareBracket341=(IToken)Match(input,CloseSquareBracket,Follow._CloseSquareBracket_in_arrayDeclaration2033); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseSquareBracket341_tree = (object)adaptor.Create(CloseSquareBracket341, "CloseSquareBracket341", retval);
				adaptor.AddChild(root_0, CloseSquareBracket341_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclaration", 60);
			LeaveRule("arrayDeclaration", 60);
			LeaveRule_arrayDeclaration();
			if (state.backtracking > 0) { Memoize(input, 60, arrayDeclaration_StartIndex); }

		}
		DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaration"); }
		return retval;

	}
	// $ANTLR end "arrayDeclaration"

	partial void EnterRule_arrayEntry();
	partial void LeaveRule_arrayEntry();
	// $ANTLR start "arrayEntry"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:387:1: arrayEntry : ( keyValuePair | expression ) ;
	[GrammarRule("arrayEntry")]
	private Antlr3AstNode arrayEntry()
	{
		EnterRule_arrayEntry();
		EnterRule("arrayEntry", 61);
		var retval = new Antlr3AstNode("arrayEntry");
		
		retval.Start = (IToken)input.LT(1);
		int arrayEntry_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode keyValuePair342 = default(Antlr3AstNode);
		Antlr3AstNode expression343 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "arrayEntry");
		DebugLocation(387, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:388:2: ( ( keyValuePair | expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:388:4: ( keyValuePair | expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(388, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:388:4: ( keyValuePair | expression )
			int alt101=2;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Bang:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:388:5: keyValuePair
				{
				DebugLocation(388, 5);
				PushFollow(Follow._keyValuePair_in_arrayEntry2045);
				keyValuePair342=keyValuePair();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, keyValuePair342.Tree, keyValuePair342, "keyValuePair342", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:388:20: expression
				{
				DebugLocation(388, 20);
				PushFollow(Follow._expression_in_arrayEntry2049);
				expression343=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression343.Tree, expression343, "expression343", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayEntry", 61);
			LeaveRule("arrayEntry", 61);
			LeaveRule_arrayEntry();
			if (state.backtracking > 0) { Memoize(input, 61, arrayEntry_StartIndex); }

		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayEntry"); }
		return retval;

	}
	// $ANTLR end "arrayEntry"

	partial void EnterRule_keyValuePair();
	partial void LeaveRule_keyValuePair();
	// $ANTLR start "keyValuePair"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:391:1: keyValuePair : ( expression ArrayAssign expression ) ;
	[GrammarRule("keyValuePair")]
	private Antlr3AstNode keyValuePair()
	{
		EnterRule_keyValuePair();
		EnterRule("keyValuePair", 62);
		var retval = new Antlr3AstNode("keyValuePair");
		
		retval.Start = (IToken)input.LT(1);
		int keyValuePair_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ArrayAssign345 = default(IToken);
		Antlr3AstNode expression344 = default(Antlr3AstNode);
		Antlr3AstNode expression346 = default(Antlr3AstNode);

		object ArrayAssign345_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "keyValuePair");
		DebugLocation(391, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:392:2: ( ( expression ArrayAssign expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:392:4: ( expression ArrayAssign expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(392, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:392:4: ( expression ArrayAssign expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:392:5: expression ArrayAssign expression
			{
			DebugLocation(392, 5);
			PushFollow(Follow._expression_in_keyValuePair2062);
			expression344=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression344.Tree, expression344, "expression344", retval);
			DebugLocation(392, 16);
			ArrayAssign345=(IToken)Match(input,ArrayAssign,Follow._ArrayAssign_in_keyValuePair2064); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ArrayAssign345_tree = (object)adaptor.Create(ArrayAssign345, "ArrayAssign345", retval);
			adaptor.AddChild(root_0, ArrayAssign345_tree);
			}
			DebugLocation(392, 28);
			PushFollow(Follow._expression_in_keyValuePair2066);
			expression346=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression346.Tree, expression346, "expression346", retval);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyValuePair", 62);
			LeaveRule("keyValuePair", 62);
			LeaveRule_keyValuePair();
			if (state.backtracking > 0) { Memoize(input, 62, keyValuePair_StartIndex); }

		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "keyValuePair"); }
		return retval;

	}
	// $ANTLR end "keyValuePair"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:395:1: atom : ( SingleQuotedString | DoubleQuotedString | HereDoc | ( Plus | Minus )? Integer | ( Plus | Minus )? Real | boolean | Null | arrayDeclaration | requireOperator expression | constantOrStaticAccessor );
	[GrammarRule("atom")]
	private Antlr3AstNode atom()
	{
		EnterRule_atom();
		EnterRule("atom", 63);
		var retval = new Antlr3AstNode("atom");
		
		retval.Start = (IToken)input.LT(1);
		int atom_StartIndex = input.Index;

		object root_0 = default(object);

		IToken SingleQuotedString347 = default(IToken);
		IToken DoubleQuotedString348 = default(IToken);
		IToken HereDoc349 = default(IToken);
		IToken set350 = default(IToken);
		IToken Integer351 = default(IToken);
		IToken set352 = default(IToken);
		IToken Real353 = default(IToken);
		IToken Null355 = default(IToken);
		Antlr3AstNode boolean354 = default(Antlr3AstNode);
		Antlr3AstNode arrayDeclaration356 = default(Antlr3AstNode);
		Antlr3AstNode requireOperator357 = default(Antlr3AstNode);
		Antlr3AstNode expression358 = default(Antlr3AstNode);
		Antlr3AstNode constantOrStaticAccessor359 = default(Antlr3AstNode);

		object SingleQuotedString347_tree = default(object);
		object DoubleQuotedString348_tree = default(object);
		object HereDoc349_tree = default(object);
		object set350_tree = default(object);
		object Integer351_tree = default(object);
		object set352_tree = default(object);
		object Real353_tree = default(object);
		object Null355_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(395, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:395:5: ( SingleQuotedString | DoubleQuotedString | HereDoc | ( Plus | Minus )? Integer | ( Plus | Minus )? Real | boolean | Null | arrayDeclaration | requireOperator expression | constantOrStaticAccessor )
			int alt104=10;
			try { DebugEnterDecision(104, false);
			switch (input.LA(1))
			{
			case SingleQuotedString:
				{
				alt104 = 1;
				}
				break;
			case DoubleQuotedString:
				{
				alt104 = 2;
				}
				break;
			case HereDoc:
				{
				alt104 = 3;
				}
				break;
			case Minus:
			case Plus:
				{
				int LA104_2 = input.LA(2);

				if ((LA104_2==Integer))
				{
					alt104 = 4;
				}
				else if ((LA104_2==Real))
				{
					alt104 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 104, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				alt104 = 4;
				}
				break;
			case Real:
				{
				alt104 = 5;
				}
				break;
			case False:
			case True:
				{
				alt104 = 6;
				}
				break;
			case Null:
				{
				alt104 = 7;
				}
				break;
			case ArrayType:
			case OpenSquareBracket:
				{
				alt104 = 8;
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				alt104 = 9;
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
			case VariableName:
			case 128:
			case 129:
				{
				alt104 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 104, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:395:7: SingleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 7);
				SingleQuotedString347=(IToken)Match(input,SingleQuotedString,Follow._SingleQuotedString_in_atom2076); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SingleQuotedString347_tree = (object)adaptor.Create(SingleQuotedString347, "SingleQuotedString347", retval);
				adaptor.AddChild(root_0, SingleQuotedString347_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:396:4: DoubleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(396, 4);
				DoubleQuotedString348=(IToken)Match(input,DoubleQuotedString,Follow._DoubleQuotedString_in_atom2081); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DoubleQuotedString348_tree = (object)adaptor.Create(DoubleQuotedString348, "DoubleQuotedString348", retval);
				adaptor.AddChild(root_0, DoubleQuotedString348_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:397:4: HereDoc
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(397, 4);
				HereDoc349=(IToken)Match(input,HereDoc,Follow._HereDoc_in_atom2086); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HereDoc349_tree = (object)adaptor.Create(HereDoc349, "HereDoc349", retval);
				adaptor.AddChild(root_0, HereDoc349_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:398:4: ( Plus | Minus )? Integer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(398, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:398:4: ( Plus | Minus )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, false);
				int LA102_1 = input.LA(1);

				if ((LA102_1==Minus||LA102_1==Plus))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:
					{
					DebugLocation(398, 4);

					set350=(IToken)input.LT(1);
					if (input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set350, "set350", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(398, 18);
				Integer351=(IToken)Match(input,Integer,Follow._Integer_in_atom2098); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Integer351_tree = (object)adaptor.Create(Integer351, "Integer351", retval);
				adaptor.AddChild(root_0, Integer351_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:399:4: ( Plus | Minus )? Real
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(399, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:399:4: ( Plus | Minus )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, false);
				int LA103_1 = input.LA(1);

				if ((LA103_1==Minus||LA103_1==Plus))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:
					{
					DebugLocation(399, 4);

					set352=(IToken)input.LT(1);
					if (input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set352, "set352", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(399, 18);
				Real353=(IToken)Match(input,Real,Follow._Real_in_atom2110); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Real353_tree = (object)adaptor.Create(Real353, "Real353", retval);
				adaptor.AddChild(root_0, Real353_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:400:4: boolean
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(400, 4);
				PushFollow(Follow._boolean_in_atom2115);
				boolean354=boolean();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolean354.Tree, boolean354, "boolean354", retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:401:4: Null
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(401, 4);
				Null355=(IToken)Match(input,Null,Follow._Null_in_atom2120); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Null355_tree = (object)adaptor.Create(Null355, "Null355", retval);
				adaptor.AddChild(root_0, Null355_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:402:4: arrayDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(402, 4);
				PushFollow(Follow._arrayDeclaration_in_atom2125);
				arrayDeclaration356=arrayDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaration356.Tree, arrayDeclaration356, "arrayDeclaration356", retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:403:4: requireOperator expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(403, 4);
				PushFollow(Follow._requireOperator_in_atom2130);
				requireOperator357=requireOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, requireOperator357.Tree, requireOperator357, "requireOperator357", retval);
				DebugLocation(403, 20);
				PushFollow(Follow._expression_in_atom2132);
				expression358=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression358.Tree, expression358, "expression358", retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:404:4: constantOrStaticAccessor
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(404, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_atom2137);
				constantOrStaticAccessor359=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor359.Tree, constantOrStaticAccessor359, "constantOrStaticAccessor359", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 63);
			LeaveRule("atom", 63);
			LeaveRule_atom();
			if (state.backtracking > 0) { Memoize(input, 63, atom_StartIndex); }

		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_reference();
	partial void LeaveRule_reference();
	// $ANTLR start "reference"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:408:1: reference : ( Ampersand nameOrFunctionCall | nameOrFunctionCall | anonymousFunctionDefinition );
	[GrammarRule("reference")]
	private Antlr3AstNode reference()
	{
		EnterRule_reference();
		EnterRule("reference", 64);
		var retval = new Antlr3AstNode("reference");
		
		retval.Start = (IToken)input.LT(1);
		int reference_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand360 = default(IToken);
		Antlr3AstNode nameOrFunctionCall361 = default(Antlr3AstNode);
		Antlr3AstNode nameOrFunctionCall362 = default(Antlr3AstNode);
		Antlr3AstNode anonymousFunctionDefinition363 = default(Antlr3AstNode);

		object Ampersand360_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "reference");
		DebugLocation(408, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:409:2: ( Ampersand nameOrFunctionCall | nameOrFunctionCall | anonymousFunctionDefinition )
			int alt105=3;
			try { DebugEnterDecision(105, false);
			switch (input.LA(1))
			{
			case Ampersand:
				{
				alt105 = 1;
				}
				break;
			case BoolType:
			case BooleanType:
			case Die:
			case DoubleType:
			case Empty:
			case Eval:
			case Exit:
			case FloatType:
			case HaltCompiler:
			case IntType:
			case IntegerType:
			case Isset:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
			case UnsetType:
			case VariableName:
			case 128:
			case 129:
				{
				alt105 = 2;
				}
				break;
			case Function:
				{
				alt105 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:409:4: Ampersand nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(409, 4);
				Ampersand360=(IToken)Match(input,Ampersand,Follow._Ampersand_in_reference2149); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand360_tree = (object)adaptor.Create(Ampersand360, "Ampersand360", retval);
				adaptor.AddChild(root_0, Ampersand360_tree);
				}
				DebugLocation(409, 14);
				PushFollow(Follow._nameOrFunctionCall_in_reference2151);
				nameOrFunctionCall361=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall361.Tree, nameOrFunctionCall361, "nameOrFunctionCall361", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:410:4: nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(410, 4);
				PushFollow(Follow._nameOrFunctionCall_in_reference2156);
				nameOrFunctionCall362=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall362.Tree, nameOrFunctionCall362, "nameOrFunctionCall362", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:411:4: anonymousFunctionDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(411, 4);
				PushFollow(Follow._anonymousFunctionDefinition_in_reference2161);
				anonymousFunctionDefinition363=anonymousFunctionDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, anonymousFunctionDefinition363.Tree, anonymousFunctionDefinition363, "anonymousFunctionDefinition363", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("reference", 64);
			LeaveRule("reference", 64);
			LeaveRule_reference();
			if (state.backtracking > 0) { Memoize(input, 64, reference_StartIndex); }

		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "reference"); }
		return retval;

	}
	// $ANTLR end "reference"

	partial void EnterRule_functionArguments();
	partial void LeaveRule_functionArguments();
	// $ANTLR start "functionArguments"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:414:1: functionArguments : OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket ;
	[GrammarRule("functionArguments")]
	private Antlr3AstNode functionArguments()
	{
		EnterRule_functionArguments();
		EnterRule("functionArguments", 65);
		var retval = new Antlr3AstNode("functionArguments");
		
		retval.Start = (IToken)input.LT(1);
		int functionArguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket364 = default(IToken);
		IToken Comma366 = default(IToken);
		IToken CloseRoundBracket368 = default(IToken);
		Antlr3AstNode expression365 = default(Antlr3AstNode);
		Antlr3AstNode expression367 = default(Antlr3AstNode);

		object OpenRoundBracket364_tree = default(object);
		object Comma366_tree = default(object);
		object CloseRoundBracket368_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionArguments");
		DebugLocation(414, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:415:2: ( OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:415:4: OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(415, 4);
			OpenRoundBracket364=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_functionArguments2172); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenRoundBracket364_tree = (object)adaptor.Create(OpenRoundBracket364, "OpenRoundBracket364", retval);
			adaptor.AddChild(root_0, OpenRoundBracket364_tree);
			}
			DebugLocation(415, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:415:21: ( expression ( Comma expression )* )?
			int alt107=2;
			try { DebugEnterSubRule(107);
			try { DebugEnterDecision(107, false);
			int LA107_1 = input.LA(1);

			if ((LA107_1==Ampersand||LA107_1==ArrayType||LA107_1==Bang||(LA107_1>=BoolType && LA107_1<=BooleanType)||LA107_1==Clone||LA107_1==Die||(LA107_1>=DoubleQuotedString && LA107_1<=DoubleType)||LA107_1==Empty||(LA107_1>=Eval && LA107_1<=Exit)||LA107_1==False||LA107_1==FloatType||LA107_1==Function||LA107_1==HaltCompiler||LA107_1==HereDoc||(LA107_1>=Include && LA107_1<=IncrementOperator)||(LA107_1>=IntType && LA107_1<=IntegerType)||(LA107_1>=Isset && LA107_1<=List)||LA107_1==Minus||(LA107_1>=New && LA107_1<=Null)||LA107_1==ObjectType||(LA107_1>=OpenRoundBracket && LA107_1<=OpenSquareBracket)||LA107_1==Plus||(LA107_1>=Real && LA107_1<=RequireOnce)||LA107_1==SingleQuotedString||(LA107_1>=Static && LA107_1<=SuppressWarnings)||(LA107_1>=Tilde && LA107_1<=True)||LA107_1==UnquotedString||LA107_1==UnsetType||LA107_1==VariableName||(LA107_1>=128 && LA107_1<=129)))
			{
				alt107 = 1;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:415:22: expression ( Comma expression )*
				{
				DebugLocation(415, 22);
				PushFollow(Follow._expression_in_functionArguments2175);
				expression365=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression365.Tree, expression365, "expression365", retval);
				DebugLocation(415, 33);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:415:33: ( Comma expression )*
				try { DebugEnterSubRule(106);
				while (true)
				{
					int alt106=2;
					try { DebugEnterDecision(106, false);
					int LA106_1 = input.LA(1);

					if ((LA106_1==Comma))
					{
						alt106 = 1;
					}


					} finally { DebugExitDecision(106); }
					switch ( alt106 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:415:34: Comma expression
						{
						DebugLocation(415, 34);
						Comma366=(IToken)Match(input,Comma,Follow._Comma_in_functionArguments2178); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma366_tree = (object)adaptor.Create(Comma366, "Comma366", retval);
						adaptor.AddChild(root_0, Comma366_tree);
						}
						DebugLocation(415, 40);
						PushFollow(Follow._expression_in_functionArguments2180);
						expression367=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression367.Tree, expression367, "expression367", retval);

						}
						break;

					default:
						goto loop106;
					}
				}

				loop106:
					;

				} finally { DebugExitSubRule(106); }


				}
				break;

			}
			} finally { DebugExitSubRule(107); }

			DebugLocation(415, 55);
			CloseRoundBracket368=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_functionArguments2186); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseRoundBracket368_tree = (object)adaptor.Create(CloseRoundBracket368, "CloseRoundBracket368", retval);
			adaptor.AddChild(root_0, CloseRoundBracket368_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionArguments", 65);
			LeaveRule("functionArguments", 65);
			LeaveRule_functionArguments();
			if (state.backtracking > 0) { Memoize(input, 65, functionArguments_StartIndex); }

		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "functionArguments"); }
		return retval;

	}
	// $ANTLR end "functionArguments"

	partial void EnterRule_indexer();
	partial void LeaveRule_indexer();
	// $ANTLR start "indexer"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:418:1: indexer : ( OpenSquareBracket ( expression )? CloseSquareBracket | OpenCurlyBracket ( expression )? CloseCurlyBracket );
	[GrammarRule("indexer")]
	private Antlr3AstNode indexer()
	{
		EnterRule_indexer();
		EnterRule("indexer", 66);
		var retval = new Antlr3AstNode("indexer");
		
		retval.Start = (IToken)input.LT(1);
		int indexer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenSquareBracket369 = default(IToken);
		IToken CloseSquareBracket371 = default(IToken);
		IToken OpenCurlyBracket372 = default(IToken);
		IToken CloseCurlyBracket374 = default(IToken);
		Antlr3AstNode expression370 = default(Antlr3AstNode);
		Antlr3AstNode expression373 = default(Antlr3AstNode);

		object OpenSquareBracket369_tree = default(object);
		object CloseSquareBracket371_tree = default(object);
		object OpenCurlyBracket372_tree = default(object);
		object CloseCurlyBracket374_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "indexer");
		DebugLocation(418, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:419:2: ( OpenSquareBracket ( expression )? CloseSquareBracket | OpenCurlyBracket ( expression )? CloseCurlyBracket )
			int alt110=2;
			try { DebugEnterDecision(110, false);
			int LA110_1 = input.LA(1);

			if ((LA110_1==OpenSquareBracket))
			{
				alt110 = 1;
			}
			else if ((LA110_1==OpenCurlyBracket))
			{
				alt110 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 110, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:419:4: OpenSquareBracket ( expression )? CloseSquareBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(419, 4);
				OpenSquareBracket369=(IToken)Match(input,OpenSquareBracket,Follow._OpenSquareBracket_in_indexer2197); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenSquareBracket369_tree = (object)adaptor.Create(OpenSquareBracket369, "OpenSquareBracket369", retval);
				adaptor.AddChild(root_0, OpenSquareBracket369_tree);
				}
				DebugLocation(419, 22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:419:22: ( expression )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, false);
				int LA108_1 = input.LA(1);

				if ((LA108_1==Ampersand||LA108_1==ArrayType||LA108_1==Bang||(LA108_1>=BoolType && LA108_1<=BooleanType)||LA108_1==Clone||LA108_1==Die||(LA108_1>=DoubleQuotedString && LA108_1<=DoubleType)||LA108_1==Empty||(LA108_1>=Eval && LA108_1<=Exit)||LA108_1==False||LA108_1==FloatType||LA108_1==Function||LA108_1==HaltCompiler||LA108_1==HereDoc||(LA108_1>=Include && LA108_1<=IncrementOperator)||(LA108_1>=IntType && LA108_1<=IntegerType)||(LA108_1>=Isset && LA108_1<=List)||LA108_1==Minus||(LA108_1>=New && LA108_1<=Null)||LA108_1==ObjectType||(LA108_1>=OpenRoundBracket && LA108_1<=OpenSquareBracket)||LA108_1==Plus||(LA108_1>=Real && LA108_1<=RequireOnce)||LA108_1==SingleQuotedString||(LA108_1>=Static && LA108_1<=SuppressWarnings)||(LA108_1>=Tilde && LA108_1<=True)||LA108_1==UnquotedString||LA108_1==UnsetType||LA108_1==VariableName||(LA108_1>=128 && LA108_1<=129)))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:419:22: expression
					{
					DebugLocation(419, 22);
					PushFollow(Follow._expression_in_indexer2199);
					expression370=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression370.Tree, expression370, "expression370", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(419, 34);
				CloseSquareBracket371=(IToken)Match(input,CloseSquareBracket,Follow._CloseSquareBracket_in_indexer2202); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseSquareBracket371_tree = (object)adaptor.Create(CloseSquareBracket371, "CloseSquareBracket371", retval);
				adaptor.AddChild(root_0, CloseSquareBracket371_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:420:4: OpenCurlyBracket ( expression )? CloseCurlyBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(420, 4);
				OpenCurlyBracket372=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_indexer2207); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenCurlyBracket372_tree = (object)adaptor.Create(OpenCurlyBracket372, "OpenCurlyBracket372", retval);
				adaptor.AddChild(root_0, OpenCurlyBracket372_tree);
				}
				DebugLocation(420, 21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:420:21: ( expression )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, false);
				int LA109_1 = input.LA(1);

				if ((LA109_1==Ampersand||LA109_1==ArrayType||LA109_1==Bang||(LA109_1>=BoolType && LA109_1<=BooleanType)||LA109_1==Clone||LA109_1==Die||(LA109_1>=DoubleQuotedString && LA109_1<=DoubleType)||LA109_1==Empty||(LA109_1>=Eval && LA109_1<=Exit)||LA109_1==False||LA109_1==FloatType||LA109_1==Function||LA109_1==HaltCompiler||LA109_1==HereDoc||(LA109_1>=Include && LA109_1<=IncrementOperator)||(LA109_1>=IntType && LA109_1<=IntegerType)||(LA109_1>=Isset && LA109_1<=List)||LA109_1==Minus||(LA109_1>=New && LA109_1<=Null)||LA109_1==ObjectType||(LA109_1>=OpenRoundBracket && LA109_1<=OpenSquareBracket)||LA109_1==Plus||(LA109_1>=Real && LA109_1<=RequireOnce)||LA109_1==SingleQuotedString||(LA109_1>=Static && LA109_1<=SuppressWarnings)||(LA109_1>=Tilde && LA109_1<=True)||LA109_1==UnquotedString||LA109_1==UnsetType||LA109_1==VariableName||(LA109_1>=128 && LA109_1<=129)))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:420:21: expression
					{
					DebugLocation(420, 21);
					PushFollow(Follow._expression_in_indexer2209);
					expression373=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression373.Tree, expression373, "expression373", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(420, 33);
				CloseCurlyBracket374=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_indexer2212); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseCurlyBracket374_tree = (object)adaptor.Create(CloseCurlyBracket374, "CloseCurlyBracket374", retval);
				adaptor.AddChild(root_0, CloseCurlyBracket374_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexer", 66);
			LeaveRule("indexer", 66);
			LeaveRule_indexer();
			if (state.backtracking > 0) { Memoize(input, 66, indexer_StartIndex); }

		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "indexer"); }
		return retval;

	}
	// $ANTLR end "indexer"

	partial void EnterRule_memberAccess();
	partial void LeaveRule_memberAccess();
	// $ANTLR start "memberAccess"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:424:1: memberAccess : '->' ( expression | '{' expression '}' | New | Clone | Echo | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) ;
	[GrammarRule("memberAccess")]
	private Antlr3AstNode memberAccess()
	{
		EnterRule_memberAccess();
		EnterRule("memberAccess", 67);
		var retval = new Antlr3AstNode("memberAccess");
		
		retval.Start = (IToken)input.LT(1);
		int memberAccess_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal375 = default(IToken);
		IToken char_literal377 = default(IToken);
		IToken char_literal379 = default(IToken);
		IToken New380 = default(IToken);
		IToken Clone381 = default(IToken);
		IToken Echo382 = default(IToken);
		IToken If383 = default(IToken);
		IToken Else384 = default(IToken);
		IToken ElseIf385 = default(IToken);
		IToken For386 = default(IToken);
		IToken Foreach387 = default(IToken);
		IToken While388 = default(IToken);
		IToken Do389 = default(IToken);
		IToken Try390 = default(IToken);
		IToken Catch391 = default(IToken);
		IToken Finally392 = default(IToken);
		IToken Switch393 = default(IToken);
		IToken Case394 = default(IToken);
		IToken Default395 = default(IToken);
		IToken Namespace396 = default(IToken);
		IToken Function397 = default(IToken);
		IToken Break398 = default(IToken);
		IToken Continue399 = default(IToken);
		IToken Goto400 = default(IToken);
		IToken Return401 = default(IToken);
		IToken Throw402 = default(IToken);
		IToken Global403 = default(IToken);
		IToken Static404 = default(IToken);
		IToken And405 = default(IToken);
		IToken Or406 = default(IToken);
		IToken Xor407 = default(IToken);
		IToken Instanceof408 = default(IToken);
		IToken Null409 = default(IToken);
		IToken List410 = default(IToken);
		IToken Class411 = default(IToken);
		IToken Interface412 = default(IToken);
		IToken Extends413 = default(IToken);
		IToken Implements414 = default(IToken);
		IToken Abstract415 = default(IToken);
		IToken Var416 = default(IToken);
		IToken Const417 = default(IToken);
		IToken As418 = default(IToken);
		IToken Use419 = default(IToken);
		IToken Require420 = default(IToken);
		IToken RequireOnce421 = default(IToken);
		IToken Include422 = default(IToken);
		IToken IncludeOnce423 = default(IToken);
		IToken Public424 = default(IToken);
		IToken Private425 = default(IToken);
		IToken Protected426 = default(IToken);
		IToken True427 = default(IToken);
		IToken False428 = default(IToken);
		IToken HaltCompiler429 = default(IToken);
		IToken Die430 = default(IToken);
		IToken Empty431 = default(IToken);
		IToken Exit432 = default(IToken);
		IToken Eval433 = default(IToken);
		IToken Isset434 = default(IToken);
		IToken IntType435 = default(IToken);
		IToken IntegerType436 = default(IToken);
		IToken BoolType437 = default(IToken);
		IToken BooleanType438 = default(IToken);
		IToken FloatType439 = default(IToken);
		IToken DoubleType440 = default(IToken);
		IToken RealType441 = default(IToken);
		IToken StringType442 = default(IToken);
		IToken ObjectType443 = default(IToken);
		Antlr3AstNode expression376 = default(Antlr3AstNode);
		Antlr3AstNode expression378 = default(Antlr3AstNode);

		object string_literal375_tree = default(object);
		object char_literal377_tree = default(object);
		object char_literal379_tree = default(object);
		object New380_tree = default(object);
		object Clone381_tree = default(object);
		object Echo382_tree = default(object);
		object If383_tree = default(object);
		object Else384_tree = default(object);
		object ElseIf385_tree = default(object);
		object For386_tree = default(object);
		object Foreach387_tree = default(object);
		object While388_tree = default(object);
		object Do389_tree = default(object);
		object Try390_tree = default(object);
		object Catch391_tree = default(object);
		object Finally392_tree = default(object);
		object Switch393_tree = default(object);
		object Case394_tree = default(object);
		object Default395_tree = default(object);
		object Namespace396_tree = default(object);
		object Function397_tree = default(object);
		object Break398_tree = default(object);
		object Continue399_tree = default(object);
		object Goto400_tree = default(object);
		object Return401_tree = default(object);
		object Throw402_tree = default(object);
		object Global403_tree = default(object);
		object Static404_tree = default(object);
		object And405_tree = default(object);
		object Or406_tree = default(object);
		object Xor407_tree = default(object);
		object Instanceof408_tree = default(object);
		object Null409_tree = default(object);
		object List410_tree = default(object);
		object Class411_tree = default(object);
		object Interface412_tree = default(object);
		object Extends413_tree = default(object);
		object Implements414_tree = default(object);
		object Abstract415_tree = default(object);
		object Var416_tree = default(object);
		object Const417_tree = default(object);
		object As418_tree = default(object);
		object Use419_tree = default(object);
		object Require420_tree = default(object);
		object RequireOnce421_tree = default(object);
		object Include422_tree = default(object);
		object IncludeOnce423_tree = default(object);
		object Public424_tree = default(object);
		object Private425_tree = default(object);
		object Protected426_tree = default(object);
		object True427_tree = default(object);
		object False428_tree = default(object);
		object HaltCompiler429_tree = default(object);
		object Die430_tree = default(object);
		object Empty431_tree = default(object);
		object Exit432_tree = default(object);
		object Eval433_tree = default(object);
		object Isset434_tree = default(object);
		object IntType435_tree = default(object);
		object IntegerType436_tree = default(object);
		object BoolType437_tree = default(object);
		object BooleanType438_tree = default(object);
		object FloatType439_tree = default(object);
		object DoubleType440_tree = default(object);
		object RealType441_tree = default(object);
		object StringType442_tree = default(object);
		object ObjectType443_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "memberAccess");
		DebugLocation(424, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:425:2: ( '->' ( expression | '{' expression '}' | New | Clone | Echo | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:425:4: '->' ( expression | '{' expression '}' | New | Clone | Echo | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(425, 4);
			string_literal375=(IToken)Match(input,InstanceMember,Follow._InstanceMember_in_memberAccess2224); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal375_tree = (object)adaptor.Create(string_literal375, "string_literal375", retval);
			adaptor.AddChild(root_0, string_literal375_tree);
			}
			DebugLocation(425, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:425:9: ( expression | '{' expression '}' | New | Clone | Echo | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
			int alt111=66;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			try
			{
				alt111 = dfa111.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:425:10: expression
				{
				DebugLocation(425, 10);
				PushFollow(Follow._expression_in_memberAccess2227);
				expression376=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression376.Tree, expression376, "expression376", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:425:23: '{' expression '}'
				{
				DebugLocation(425, 23);
				char_literal377=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_memberAccess2231); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal377_tree = (object)adaptor.Create(char_literal377, "char_literal377", retval);
				adaptor.AddChild(root_0, char_literal377_tree);
				}
				DebugLocation(425, 27);
				PushFollow(Follow._expression_in_memberAccess2233);
				expression378=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression378.Tree, expression378, "expression378", retval);
				DebugLocation(425, 38);
				char_literal379=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_memberAccess2235); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal379_tree = (object)adaptor.Create(char_literal379, "char_literal379", retval);
				adaptor.AddChild(root_0, char_literal379_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:6: New
				{
				DebugLocation(426, 6);
				New380=(IToken)Match(input,New,Follow._New_in_memberAccess2242); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New380_tree = (object)adaptor.Create(New380, "New380", retval);
				adaptor.AddChild(root_0, New380_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:10: Clone
				{
				DebugLocation(426, 10);
				Clone381=(IToken)Match(input,Clone,Follow._Clone_in_memberAccess2244); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Clone381_tree = (object)adaptor.Create(Clone381, "Clone381", retval);
				adaptor.AddChild(root_0, Clone381_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:16: Echo
				{
				DebugLocation(426, 16);
				Echo382=(IToken)Match(input,Echo,Follow._Echo_in_memberAccess2246); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Echo382_tree = (object)adaptor.Create(Echo382, "Echo382", retval);
				adaptor.AddChild(root_0, Echo382_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:21: If
				{
				DebugLocation(426, 21);
				If383=(IToken)Match(input,If,Follow._If_in_memberAccess2248); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If383_tree = (object)adaptor.Create(If383, "If383", retval);
				adaptor.AddChild(root_0, If383_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:24: Else
				{
				DebugLocation(426, 24);
				Else384=(IToken)Match(input,Else,Follow._Else_in_memberAccess2250); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else384_tree = (object)adaptor.Create(Else384, "Else384", retval);
				adaptor.AddChild(root_0, Else384_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:29: ElseIf
				{
				DebugLocation(426, 29);
				ElseIf385=(IToken)Match(input,ElseIf,Follow._ElseIf_in_memberAccess2252); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf385_tree = (object)adaptor.Create(ElseIf385, "ElseIf385", retval);
				adaptor.AddChild(root_0, ElseIf385_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:36: For
				{
				DebugLocation(426, 36);
				For386=(IToken)Match(input,For,Follow._For_in_memberAccess2254); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For386_tree = (object)adaptor.Create(For386, "For386", retval);
				adaptor.AddChild(root_0, For386_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:40: Foreach
				{
				DebugLocation(426, 40);
				Foreach387=(IToken)Match(input,Foreach,Follow._Foreach_in_memberAccess2256); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach387_tree = (object)adaptor.Create(Foreach387, "Foreach387", retval);
				adaptor.AddChild(root_0, Foreach387_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:48: While
				{
				DebugLocation(426, 48);
				While388=(IToken)Match(input,While,Follow._While_in_memberAccess2258); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While388_tree = (object)adaptor.Create(While388, "While388", retval);
				adaptor.AddChild(root_0, While388_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:54: Do
				{
				DebugLocation(426, 54);
				Do389=(IToken)Match(input,Do,Follow._Do_in_memberAccess2260); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Do389_tree = (object)adaptor.Create(Do389, "Do389", retval);
				adaptor.AddChild(root_0, Do389_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:57: Try
				{
				DebugLocation(426, 57);
				Try390=(IToken)Match(input,Try,Follow._Try_in_memberAccess2262); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Try390_tree = (object)adaptor.Create(Try390, "Try390", retval);
				adaptor.AddChild(root_0, Try390_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:61: Catch
				{
				DebugLocation(426, 61);
				Catch391=(IToken)Match(input,Catch,Follow._Catch_in_memberAccess2264); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Catch391_tree = (object)adaptor.Create(Catch391, "Catch391", retval);
				adaptor.AddChild(root_0, Catch391_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:67: Finally
				{
				DebugLocation(426, 67);
				Finally392=(IToken)Match(input,Finally,Follow._Finally_in_memberAccess2266); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Finally392_tree = (object)adaptor.Create(Finally392, "Finally392", retval);
				adaptor.AddChild(root_0, Finally392_tree);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:75: Switch
				{
				DebugLocation(426, 75);
				Switch393=(IToken)Match(input,Switch,Follow._Switch_in_memberAccess2268); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Switch393_tree = (object)adaptor.Create(Switch393, "Switch393", retval);
				adaptor.AddChild(root_0, Switch393_tree);
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:82: Case
				{
				DebugLocation(426, 82);
				Case394=(IToken)Match(input,Case,Follow._Case_in_memberAccess2270); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Case394_tree = (object)adaptor.Create(Case394, "Case394", retval);
				adaptor.AddChild(root_0, Case394_tree);
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:87: Default
				{
				DebugLocation(426, 87);
				Default395=(IToken)Match(input,Default,Follow._Default_in_memberAccess2272); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Default395_tree = (object)adaptor.Create(Default395, "Default395", retval);
				adaptor.AddChild(root_0, Default395_tree);
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:95: Namespace
				{
				DebugLocation(426, 95);
				Namespace396=(IToken)Match(input,Namespace,Follow._Namespace_in_memberAccess2274); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Namespace396_tree = (object)adaptor.Create(Namespace396, "Namespace396", retval);
				adaptor.AddChild(root_0, Namespace396_tree);
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:105: Function
				{
				DebugLocation(426, 105);
				Function397=(IToken)Match(input,Function,Follow._Function_in_memberAccess2276); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function397_tree = (object)adaptor.Create(Function397, "Function397", retval);
				adaptor.AddChild(root_0, Function397_tree);
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:114: Break
				{
				DebugLocation(426, 114);
				Break398=(IToken)Match(input,Break,Follow._Break_in_memberAccess2278); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Break398_tree = (object)adaptor.Create(Break398, "Break398", retval);
				adaptor.AddChild(root_0, Break398_tree);
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:120: Continue
				{
				DebugLocation(426, 120);
				Continue399=(IToken)Match(input,Continue,Follow._Continue_in_memberAccess2280); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Continue399_tree = (object)adaptor.Create(Continue399, "Continue399", retval);
				adaptor.AddChild(root_0, Continue399_tree);
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:129: Goto
				{
				DebugLocation(426, 129);
				Goto400=(IToken)Match(input,Goto,Follow._Goto_in_memberAccess2282); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto400_tree = (object)adaptor.Create(Goto400, "Goto400", retval);
				adaptor.AddChild(root_0, Goto400_tree);
				}

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:134: Return
				{
				DebugLocation(426, 134);
				Return401=(IToken)Match(input,Return,Follow._Return_in_memberAccess2284); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Return401_tree = (object)adaptor.Create(Return401, "Return401", retval);
				adaptor.AddChild(root_0, Return401_tree);
				}

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:141: Throw
				{
				DebugLocation(426, 141);
				Throw402=(IToken)Match(input,Throw,Follow._Throw_in_memberAccess2286); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Throw402_tree = (object)adaptor.Create(Throw402, "Throw402", retval);
				adaptor.AddChild(root_0, Throw402_tree);
				}

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:147: Global
				{
				DebugLocation(426, 147);
				Global403=(IToken)Match(input,Global,Follow._Global_in_memberAccess2288); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Global403_tree = (object)adaptor.Create(Global403, "Global403", retval);
				adaptor.AddChild(root_0, Global403_tree);
				}

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:154: Static
				{
				DebugLocation(426, 154);
				Static404=(IToken)Match(input,Static,Follow._Static_in_memberAccess2290); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static404_tree = (object)adaptor.Create(Static404, "Static404", retval);
				adaptor.AddChild(root_0, Static404_tree);
				}

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:161: And
				{
				DebugLocation(426, 161);
				And405=(IToken)Match(input,And,Follow._And_in_memberAccess2292); if (state.failed) return retval;
				if (state.backtracking == 0) {
				And405_tree = (object)adaptor.Create(And405, "And405", retval);
				adaptor.AddChild(root_0, And405_tree);
				}

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:165: Or
				{
				DebugLocation(426, 165);
				Or406=(IToken)Match(input,Or,Follow._Or_in_memberAccess2294); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Or406_tree = (object)adaptor.Create(Or406, "Or406", retval);
				adaptor.AddChild(root_0, Or406_tree);
				}

				}
				break;
			case 30:
				DebugEnterAlt(30);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:168: Xor
				{
				DebugLocation(426, 168);
				Xor407=(IToken)Match(input,Xor,Follow._Xor_in_memberAccess2296); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Xor407_tree = (object)adaptor.Create(Xor407, "Xor407", retval);
				adaptor.AddChild(root_0, Xor407_tree);
				}

				}
				break;
			case 31:
				DebugEnterAlt(31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:172: Instanceof
				{
				DebugLocation(426, 172);
				Instanceof408=(IToken)Match(input,Instanceof,Follow._Instanceof_in_memberAccess2298); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Instanceof408_tree = (object)adaptor.Create(Instanceof408, "Instanceof408", retval);
				adaptor.AddChild(root_0, Instanceof408_tree);
				}

				}
				break;
			case 32:
				DebugEnterAlt(32);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:183: Null
				{
				DebugLocation(426, 183);
				Null409=(IToken)Match(input,Null,Follow._Null_in_memberAccess2300); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Null409_tree = (object)adaptor.Create(Null409, "Null409", retval);
				adaptor.AddChild(root_0, Null409_tree);
				}

				}
				break;
			case 33:
				DebugEnterAlt(33);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:188: List
				{
				DebugLocation(426, 188);
				List410=(IToken)Match(input,List,Follow._List_in_memberAccess2302); if (state.failed) return retval;
				if (state.backtracking == 0) {
				List410_tree = (object)adaptor.Create(List410, "List410", retval);
				adaptor.AddChild(root_0, List410_tree);
				}

				}
				break;
			case 34:
				DebugEnterAlt(34);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:193: Class
				{
				DebugLocation(426, 193);
				Class411=(IToken)Match(input,Class,Follow._Class_in_memberAccess2304); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Class411_tree = (object)adaptor.Create(Class411, "Class411", retval);
				adaptor.AddChild(root_0, Class411_tree);
				}

				}
				break;
			case 35:
				DebugEnterAlt(35);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:199: Interface
				{
				DebugLocation(426, 199);
				Interface412=(IToken)Match(input,Interface,Follow._Interface_in_memberAccess2306); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Interface412_tree = (object)adaptor.Create(Interface412, "Interface412", retval);
				adaptor.AddChild(root_0, Interface412_tree);
				}

				}
				break;
			case 36:
				DebugEnterAlt(36);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:209: Extends
				{
				DebugLocation(426, 209);
				Extends413=(IToken)Match(input,Extends,Follow._Extends_in_memberAccess2308); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Extends413_tree = (object)adaptor.Create(Extends413, "Extends413", retval);
				adaptor.AddChild(root_0, Extends413_tree);
				}

				}
				break;
			case 37:
				DebugEnterAlt(37);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:217: Implements
				{
				DebugLocation(426, 217);
				Implements414=(IToken)Match(input,Implements,Follow._Implements_in_memberAccess2310); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Implements414_tree = (object)adaptor.Create(Implements414, "Implements414", retval);
				adaptor.AddChild(root_0, Implements414_tree);
				}

				}
				break;
			case 38:
				DebugEnterAlt(38);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:228: Abstract
				{
				DebugLocation(426, 228);
				Abstract415=(IToken)Match(input,Abstract,Follow._Abstract_in_memberAccess2312); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Abstract415_tree = (object)adaptor.Create(Abstract415, "Abstract415", retval);
				adaptor.AddChild(root_0, Abstract415_tree);
				}

				}
				break;
			case 39:
				DebugEnterAlt(39);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:237: Var
				{
				DebugLocation(426, 237);
				Var416=(IToken)Match(input,Var,Follow._Var_in_memberAccess2314); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Var416_tree = (object)adaptor.Create(Var416, "Var416", retval);
				adaptor.AddChild(root_0, Var416_tree);
				}

				}
				break;
			case 40:
				DebugEnterAlt(40);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:241: Const
				{
				DebugLocation(426, 241);
				Const417=(IToken)Match(input,Const,Follow._Const_in_memberAccess2316); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Const417_tree = (object)adaptor.Create(Const417, "Const417", retval);
				adaptor.AddChild(root_0, Const417_tree);
				}

				}
				break;
			case 41:
				DebugEnterAlt(41);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:247: As
				{
				DebugLocation(426, 247);
				As418=(IToken)Match(input,As,Follow._As_in_memberAccess2318); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As418_tree = (object)adaptor.Create(As418, "As418", retval);
				adaptor.AddChild(root_0, As418_tree);
				}

				}
				break;
			case 42:
				DebugEnterAlt(42);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:250: Use
				{
				DebugLocation(426, 250);
				Use419=(IToken)Match(input,Use,Follow._Use_in_memberAccess2320); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Use419_tree = (object)adaptor.Create(Use419, "Use419", retval);
				adaptor.AddChild(root_0, Use419_tree);
				}

				}
				break;
			case 43:
				DebugEnterAlt(43);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:254: Require
				{
				DebugLocation(426, 254);
				Require420=(IToken)Match(input,Require,Follow._Require_in_memberAccess2322); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Require420_tree = (object)adaptor.Create(Require420, "Require420", retval);
				adaptor.AddChild(root_0, Require420_tree);
				}

				}
				break;
			case 44:
				DebugEnterAlt(44);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:262: RequireOnce
				{
				DebugLocation(426, 262);
				RequireOnce421=(IToken)Match(input,RequireOnce,Follow._RequireOnce_in_memberAccess2324); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RequireOnce421_tree = (object)adaptor.Create(RequireOnce421, "RequireOnce421", retval);
				adaptor.AddChild(root_0, RequireOnce421_tree);
				}

				}
				break;
			case 45:
				DebugEnterAlt(45);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:274: Include
				{
				DebugLocation(426, 274);
				Include422=(IToken)Match(input,Include,Follow._Include_in_memberAccess2326); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Include422_tree = (object)adaptor.Create(Include422, "Include422", retval);
				adaptor.AddChild(root_0, Include422_tree);
				}

				}
				break;
			case 46:
				DebugEnterAlt(46);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:282: IncludeOnce
				{
				DebugLocation(426, 282);
				IncludeOnce423=(IToken)Match(input,IncludeOnce,Follow._IncludeOnce_in_memberAccess2328); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncludeOnce423_tree = (object)adaptor.Create(IncludeOnce423, "IncludeOnce423", retval);
				adaptor.AddChild(root_0, IncludeOnce423_tree);
				}

				}
				break;
			case 47:
				DebugEnterAlt(47);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:294: Public
				{
				DebugLocation(426, 294);
				Public424=(IToken)Match(input,Public,Follow._Public_in_memberAccess2330); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Public424_tree = (object)adaptor.Create(Public424, "Public424", retval);
				adaptor.AddChild(root_0, Public424_tree);
				}

				}
				break;
			case 48:
				DebugEnterAlt(48);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:301: Private
				{
				DebugLocation(426, 301);
				Private425=(IToken)Match(input,Private,Follow._Private_in_memberAccess2332); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Private425_tree = (object)adaptor.Create(Private425, "Private425", retval);
				adaptor.AddChild(root_0, Private425_tree);
				}

				}
				break;
			case 49:
				DebugEnterAlt(49);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:309: Protected
				{
				DebugLocation(426, 309);
				Protected426=(IToken)Match(input,Protected,Follow._Protected_in_memberAccess2334); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Protected426_tree = (object)adaptor.Create(Protected426, "Protected426", retval);
				adaptor.AddChild(root_0, Protected426_tree);
				}

				}
				break;
			case 50:
				DebugEnterAlt(50);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:319: True
				{
				DebugLocation(426, 319);
				True427=(IToken)Match(input,True,Follow._True_in_memberAccess2336); if (state.failed) return retval;
				if (state.backtracking == 0) {
				True427_tree = (object)adaptor.Create(True427, "True427", retval);
				adaptor.AddChild(root_0, True427_tree);
				}

				}
				break;
			case 51:
				DebugEnterAlt(51);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:324: False
				{
				DebugLocation(426, 324);
				False428=(IToken)Match(input,False,Follow._False_in_memberAccess2338); if (state.failed) return retval;
				if (state.backtracking == 0) {
				False428_tree = (object)adaptor.Create(False428, "False428", retval);
				adaptor.AddChild(root_0, False428_tree);
				}

				}
				break;
			case 52:
				DebugEnterAlt(52);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:330: HaltCompiler
				{
				DebugLocation(426, 330);
				HaltCompiler429=(IToken)Match(input,HaltCompiler,Follow._HaltCompiler_in_memberAccess2340); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HaltCompiler429_tree = (object)adaptor.Create(HaltCompiler429, "HaltCompiler429", retval);
				adaptor.AddChild(root_0, HaltCompiler429_tree);
				}

				}
				break;
			case 53:
				DebugEnterAlt(53);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:343: Die
				{
				DebugLocation(426, 343);
				Die430=(IToken)Match(input,Die,Follow._Die_in_memberAccess2342); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Die430_tree = (object)adaptor.Create(Die430, "Die430", retval);
				adaptor.AddChild(root_0, Die430_tree);
				}

				}
				break;
			case 54:
				DebugEnterAlt(54);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:347: Empty
				{
				DebugLocation(426, 347);
				Empty431=(IToken)Match(input,Empty,Follow._Empty_in_memberAccess2344); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Empty431_tree = (object)adaptor.Create(Empty431, "Empty431", retval);
				adaptor.AddChild(root_0, Empty431_tree);
				}

				}
				break;
			case 55:
				DebugEnterAlt(55);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:353: Exit
				{
				DebugLocation(426, 353);
				Exit432=(IToken)Match(input,Exit,Follow._Exit_in_memberAccess2346); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Exit432_tree = (object)adaptor.Create(Exit432, "Exit432", retval);
				adaptor.AddChild(root_0, Exit432_tree);
				}

				}
				break;
			case 56:
				DebugEnterAlt(56);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:358: Eval
				{
				DebugLocation(426, 358);
				Eval433=(IToken)Match(input,Eval,Follow._Eval_in_memberAccess2348); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Eval433_tree = (object)adaptor.Create(Eval433, "Eval433", retval);
				adaptor.AddChild(root_0, Eval433_tree);
				}

				}
				break;
			case 57:
				DebugEnterAlt(57);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:363: Isset
				{
				DebugLocation(426, 363);
				Isset434=(IToken)Match(input,Isset,Follow._Isset_in_memberAccess2350); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Isset434_tree = (object)adaptor.Create(Isset434, "Isset434", retval);
				adaptor.AddChild(root_0, Isset434_tree);
				}

				}
				break;
			case 58:
				DebugEnterAlt(58);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:6: IntType
				{
				DebugLocation(427, 6);
				IntType435=(IToken)Match(input,IntType,Follow._IntType_in_memberAccess2357); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IntType435_tree = (object)adaptor.Create(IntType435, "IntType435", retval);
				adaptor.AddChild(root_0, IntType435_tree);
				}

				}
				break;
			case 59:
				DebugEnterAlt(59);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:16: IntegerType
				{
				DebugLocation(427, 16);
				IntegerType436=(IToken)Match(input,IntegerType,Follow._IntegerType_in_memberAccess2361); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IntegerType436_tree = (object)adaptor.Create(IntegerType436, "IntegerType436", retval);
				adaptor.AddChild(root_0, IntegerType436_tree);
				}

				}
				break;
			case 60:
				DebugEnterAlt(60);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:30: BoolType
				{
				DebugLocation(427, 30);
				BoolType437=(IToken)Match(input,BoolType,Follow._BoolType_in_memberAccess2365); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BoolType437_tree = (object)adaptor.Create(BoolType437, "BoolType437", retval);
				adaptor.AddChild(root_0, BoolType437_tree);
				}

				}
				break;
			case 61:
				DebugEnterAlt(61);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:41: BooleanType
				{
				DebugLocation(427, 41);
				BooleanType438=(IToken)Match(input,BooleanType,Follow._BooleanType_in_memberAccess2369); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BooleanType438_tree = (object)adaptor.Create(BooleanType438, "BooleanType438", retval);
				adaptor.AddChild(root_0, BooleanType438_tree);
				}

				}
				break;
			case 62:
				DebugEnterAlt(62);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:55: FloatType
				{
				DebugLocation(427, 55);
				FloatType439=(IToken)Match(input,FloatType,Follow._FloatType_in_memberAccess2373); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FloatType439_tree = (object)adaptor.Create(FloatType439, "FloatType439", retval);
				adaptor.AddChild(root_0, FloatType439_tree);
				}

				}
				break;
			case 63:
				DebugEnterAlt(63);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:67: DoubleType
				{
				DebugLocation(427, 67);
				DoubleType440=(IToken)Match(input,DoubleType,Follow._DoubleType_in_memberAccess2377); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DoubleType440_tree = (object)adaptor.Create(DoubleType440, "DoubleType440", retval);
				adaptor.AddChild(root_0, DoubleType440_tree);
				}

				}
				break;
			case 64:
				DebugEnterAlt(64);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:6: RealType
				{
				DebugLocation(428, 6);
				RealType441=(IToken)Match(input,RealType,Follow._RealType_in_memberAccess2384); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RealType441_tree = (object)adaptor.Create(RealType441, "RealType441", retval);
				adaptor.AddChild(root_0, RealType441_tree);
				}

				}
				break;
			case 65:
				DebugEnterAlt(65);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:17: StringType
				{
				DebugLocation(428, 17);
				StringType442=(IToken)Match(input,StringType,Follow._StringType_in_memberAccess2388); if (state.failed) return retval;
				if (state.backtracking == 0) {
				StringType442_tree = (object)adaptor.Create(StringType442, "StringType442", retval);
				adaptor.AddChild(root_0, StringType442_tree);
				}

				}
				break;
			case 66:
				DebugEnterAlt(66);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:30: ObjectType
				{
				DebugLocation(428, 30);
				ObjectType443=(IToken)Match(input,ObjectType,Follow._ObjectType_in_memberAccess2392); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ObjectType443_tree = (object)adaptor.Create(ObjectType443, "ObjectType443", retval);
				adaptor.AddChild(root_0, ObjectType443_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberAccess", 67);
			LeaveRule("memberAccess", 67);
			LeaveRule_memberAccess();
			if (state.backtracking > 0) { Memoize(input, 67, memberAccess_StartIndex); }

		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "memberAccess"); }
		return retval;

	}
	// $ANTLR end "memberAccess"

	partial void EnterRule_nameOrFunctionCall();
	partial void LeaveRule_nameOrFunctionCall();
	// $ANTLR start "nameOrFunctionCall"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:432:1: nameOrFunctionCall : ( variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )* | constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )* | constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+ | predefinedFunctionName ( functionArguments )? );
	[GrammarRule("nameOrFunctionCall")]
	private Antlr3AstNode nameOrFunctionCall()
	{
		EnterRule_nameOrFunctionCall();
		EnterRule("nameOrFunctionCall", 68);
		var retval = new Antlr3AstNode("nameOrFunctionCall");
		
		retval.Start = (IToken)input.LT(1);
		int nameOrFunctionCall_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode variableOrStaticAccessor444 = default(Antlr3AstNode);
		Antlr3AstNode functionArguments445 = default(Antlr3AstNode);
		Antlr3AstNode indexer446 = default(Antlr3AstNode);
		Antlr3AstNode memberAccess447 = default(Antlr3AstNode);
		Antlr3AstNode functionArguments448 = default(Antlr3AstNode);
		Antlr3AstNode constantOrStaticAccessor449 = default(Antlr3AstNode);
		Antlr3AstNode functionArguments450 = default(Antlr3AstNode);
		Antlr3AstNode indexer451 = default(Antlr3AstNode);
		Antlr3AstNode memberAccess452 = default(Antlr3AstNode);
		Antlr3AstNode functionArguments453 = default(Antlr3AstNode);
		Antlr3AstNode constantOrStaticAccessor454 = default(Antlr3AstNode);
		Antlr3AstNode indexer455 = default(Antlr3AstNode);
		Antlr3AstNode memberAccess456 = default(Antlr3AstNode);
		Antlr3AstNode functionArguments457 = default(Antlr3AstNode);
		Antlr3AstNode predefinedFunctionName458 = default(Antlr3AstNode);
		Antlr3AstNode functionArguments459 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "nameOrFunctionCall");
		DebugLocation(432, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:2: ( variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )* | constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )* | constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+ | predefinedFunctionName ( functionArguments )? )
			int alt120=4;
			try { DebugEnterDecision(120, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA120_2 = input.LA(2);

				if ((EvaluatePredicate(synpred244_Php_fragment)))
				{
					alt120 = 1;
				}
				else if ((EvaluatePredicate(synpred248_Php_fragment)))
				{
					alt120 = 2;
				}
				else if ((EvaluatePredicate(synpred252_Php_fragment)))
				{
					alt120 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA120_2 = input.LA(2);

				if ((EvaluatePredicate(synpred244_Php_fragment)))
				{
					alt120 = 1;
				}
				else if ((EvaluatePredicate(synpred248_Php_fragment)))
				{
					alt120 = 2;
				}
				else if ((EvaluatePredicate(synpred252_Php_fragment)))
				{
					alt120 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA120_2 = input.LA(2);

				if ((EvaluatePredicate(synpred244_Php_fragment)))
				{
					alt120 = 1;
				}
				else if ((EvaluatePredicate(synpred248_Php_fragment)))
				{
					alt120 = 2;
				}
				else if ((EvaluatePredicate(synpred252_Php_fragment)))
				{
					alt120 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA120_2 = input.LA(2);

				if ((EvaluatePredicate(synpred244_Php_fragment)))
				{
					alt120 = 1;
				}
				else if ((EvaluatePredicate(synpred248_Php_fragment)))
				{
					alt120 = 2;
				}
				else if ((EvaluatePredicate(synpred252_Php_fragment)))
				{
					alt120 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				alt120 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:4: variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(433, 4);
				PushFollow(Follow._variableOrStaticAccessor_in_nameOrFunctionCall2408);
				variableOrStaticAccessor444=variableOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor444.Tree, variableOrStaticAccessor444, "variableOrStaticAccessor444", retval);
				DebugLocation(433, 29);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:29: ( functionArguments )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				int LA112_1 = input.LA(1);

				if ((LA112_1==OpenRoundBracket))
				{
					int LA112_2 = input.LA(2);

					if ((EvaluatePredicate(synpred240_Php_fragment)))
					{
						alt112 = 1;
					}
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:29: functionArguments
					{
					DebugLocation(433, 29);
					PushFollow(Follow._functionArguments_in_nameOrFunctionCall2410);
					functionArguments445=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments445.Tree, functionArguments445, "functionArguments445", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(433, 48);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:48: ( indexer | memberAccess ( functionArguments )? )*
				try { DebugEnterSubRule(114);
				while (true)
				{
					int alt114=3;
					try { DebugEnterDecision(114, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA114_2 = input.LA(2);

						if ((EvaluatePredicate(synpred241_Php_fragment)))
						{
							alt114 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA114_2 = input.LA(2);

						if ((EvaluatePredicate(synpred241_Php_fragment)))
						{
							alt114 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA114_2 = input.LA(2);

						if ((EvaluatePredicate(synpred243_Php_fragment)))
						{
							alt114 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(114); }
					switch ( alt114 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:49: indexer
						{
						DebugLocation(433, 49);
						PushFollow(Follow._indexer_in_nameOrFunctionCall2414);
						indexer446=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer446.Tree, indexer446, "indexer446", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:59: memberAccess ( functionArguments )?
						{
						DebugLocation(433, 59);
						PushFollow(Follow._memberAccess_in_nameOrFunctionCall2418);
						memberAccess447=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess447.Tree, memberAccess447, "memberAccess447", retval);
						DebugLocation(433, 72);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:72: ( functionArguments )?
						int alt113=2;
						try { DebugEnterSubRule(113);
						try { DebugEnterDecision(113, false);
						int LA113_1 = input.LA(1);

						if ((LA113_1==OpenRoundBracket))
						{
							int LA113_2 = input.LA(2);

							if ((EvaluatePredicate(synpred242_Php_fragment)))
							{
								alt113 = 1;
							}
						}
						} finally { DebugExitDecision(113); }
						switch (alt113)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:72: functionArguments
							{
							DebugLocation(433, 72);
							PushFollow(Follow._functionArguments_in_nameOrFunctionCall2420);
							functionArguments448=functionArguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments448.Tree, functionArguments448, "functionArguments448", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(113); }


						}
						break;

					default:
						goto loop114;
					}
				}

				loop114:
					;

				} finally { DebugExitSubRule(114); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:4: constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(434, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_nameOrFunctionCall2428);
				constantOrStaticAccessor449=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor449.Tree, constantOrStaticAccessor449, "constantOrStaticAccessor449", retval);
				DebugLocation(434, 29);
				PushFollow(Follow._functionArguments_in_nameOrFunctionCall2430);
				functionArguments450=functionArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments450.Tree, functionArguments450, "functionArguments450", retval);
				DebugLocation(434, 47);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:47: ( indexer | memberAccess ( functionArguments )? )*
				try { DebugEnterSubRule(116);
				while (true)
				{
					int alt116=3;
					try { DebugEnterDecision(116, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA116_2 = input.LA(2);

						if ((EvaluatePredicate(synpred245_Php_fragment)))
						{
							alt116 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA116_2 = input.LA(2);

						if ((EvaluatePredicate(synpred245_Php_fragment)))
						{
							alt116 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA116_2 = input.LA(2);

						if ((EvaluatePredicate(synpred247_Php_fragment)))
						{
							alt116 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(116); }
					switch ( alt116 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:48: indexer
						{
						DebugLocation(434, 48);
						PushFollow(Follow._indexer_in_nameOrFunctionCall2433);
						indexer451=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer451.Tree, indexer451, "indexer451", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:58: memberAccess ( functionArguments )?
						{
						DebugLocation(434, 58);
						PushFollow(Follow._memberAccess_in_nameOrFunctionCall2437);
						memberAccess452=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess452.Tree, memberAccess452, "memberAccess452", retval);
						DebugLocation(434, 71);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:71: ( functionArguments )?
						int alt115=2;
						try { DebugEnterSubRule(115);
						try { DebugEnterDecision(115, false);
						int LA115_1 = input.LA(1);

						if ((LA115_1==OpenRoundBracket))
						{
							int LA115_2 = input.LA(2);

							if ((EvaluatePredicate(synpred246_Php_fragment)))
							{
								alt115 = 1;
							}
						}
						} finally { DebugExitDecision(115); }
						switch (alt115)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:71: functionArguments
							{
							DebugLocation(434, 71);
							PushFollow(Follow._functionArguments_in_nameOrFunctionCall2439);
							functionArguments453=functionArguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments453.Tree, functionArguments453, "functionArguments453", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(115); }


						}
						break;

					default:
						goto loop116;
					}
				}

				loop116:
					;

				} finally { DebugExitSubRule(116); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:4: constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(435, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_nameOrFunctionCall2447);
				constantOrStaticAccessor454=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor454.Tree, constantOrStaticAccessor454, "constantOrStaticAccessor454", retval);
				DebugLocation(435, 29);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:29: ( indexer | memberAccess ( functionArguments )? )+
				int cnt118=0;
				try { DebugEnterSubRule(118);
				while (true)
				{
					int alt118=3;
					try { DebugEnterDecision(118, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA118_2 = input.LA(2);

						if ((EvaluatePredicate(synpred249_Php_fragment)))
						{
							alt118 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA118_2 = input.LA(2);

						if ((EvaluatePredicate(synpred249_Php_fragment)))
						{
							alt118 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA118_2 = input.LA(2);

						if ((EvaluatePredicate(synpred251_Php_fragment)))
						{
							alt118 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(118); }
					switch (alt118)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:30: indexer
						{
						DebugLocation(435, 30);
						PushFollow(Follow._indexer_in_nameOrFunctionCall2450);
						indexer455=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer455.Tree, indexer455, "indexer455", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:40: memberAccess ( functionArguments )?
						{
						DebugLocation(435, 40);
						PushFollow(Follow._memberAccess_in_nameOrFunctionCall2454);
						memberAccess456=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess456.Tree, memberAccess456, "memberAccess456", retval);
						DebugLocation(435, 53);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:53: ( functionArguments )?
						int alt117=2;
						try { DebugEnterSubRule(117);
						try { DebugEnterDecision(117, false);
						int LA117_1 = input.LA(1);

						if ((LA117_1==OpenRoundBracket))
						{
							int LA117_2 = input.LA(2);

							if ((EvaluatePredicate(synpred250_Php_fragment)))
							{
								alt117 = 1;
							}
						}
						} finally { DebugExitDecision(117); }
						switch (alt117)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:53: functionArguments
							{
							DebugLocation(435, 53);
							PushFollow(Follow._functionArguments_in_nameOrFunctionCall2456);
							functionArguments457=functionArguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments457.Tree, functionArguments457, "functionArguments457", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(117); }


						}
						break;

					default:
						if (cnt118 >= 1)
							goto loop118;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee118 = new EarlyExitException( 118, input );
						DebugRecognitionException(eee118);
						throw eee118;
					}
					cnt118++;
				}
				loop118:
					;

				} finally { DebugExitSubRule(118); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:436:4: predefinedFunctionName ( functionArguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(436, 4);
				PushFollow(Follow._predefinedFunctionName_in_nameOrFunctionCall2464);
				predefinedFunctionName458=predefinedFunctionName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefinedFunctionName458.Tree, predefinedFunctionName458, "predefinedFunctionName458", retval);
				DebugLocation(436, 27);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:436:27: ( functionArguments )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, false);
				int LA119_1 = input.LA(1);

				if ((LA119_1==OpenRoundBracket))
				{
					int LA119_2 = input.LA(2);

					if ((EvaluatePredicate(synpred253_Php_fragment)))
					{
						alt119 = 1;
					}
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:436:27: functionArguments
					{
					DebugLocation(436, 27);
					PushFollow(Follow._functionArguments_in_nameOrFunctionCall2466);
					functionArguments459=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments459.Tree, functionArguments459, "functionArguments459", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(119); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nameOrFunctionCall", 68);
			LeaveRule("nameOrFunctionCall", 68);
			LeaveRule_nameOrFunctionCall();
			if (state.backtracking > 0) { Memoize(input, 68, nameOrFunctionCall_StartIndex); }

		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "nameOrFunctionCall"); }
		return retval;

	}
	// $ANTLR end "nameOrFunctionCall"

	partial void EnterRule_name();
	partial void LeaveRule_name();
	// $ANTLR start "name"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:439:1: name : ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ | variableOrStaticAccessor );
	[GrammarRule("name")]
	private Antlr3AstNode name()
	{
		EnterRule_name();
		EnterRule("name", 69);
		var retval = new Antlr3AstNode("name");
		
		retval.Start = (IToken)input.LT(1);
		int name_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode variableOrStaticAccessor460 = default(Antlr3AstNode);
		Antlr3AstNode constantOrStaticAccessor461 = default(Antlr3AstNode);
		Antlr3AstNode functionArguments462 = default(Antlr3AstNode);
		Antlr3AstNode indexer463 = default(Antlr3AstNode);
		Antlr3AstNode memberAccess464 = default(Antlr3AstNode);
		Antlr3AstNode memberAccess465 = default(Antlr3AstNode);
		Antlr3AstNode functionArguments466 = default(Antlr3AstNode);
		Antlr3AstNode indexer467 = default(Antlr3AstNode);
		Antlr3AstNode memberAccess468 = default(Antlr3AstNode);
		Antlr3AstNode variableOrStaticAccessor469 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(439, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:2: ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ | variableOrStaticAccessor )
			int alt126=2;
			try { DebugEnterDecision(126, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA126_2 = input.LA(2);

				if ((EvaluatePredicate(synpred261_Php_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA126_2 = input.LA(2);

				if ((EvaluatePredicate(synpred261_Php_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA126_2 = input.LA(2);

				if ((EvaluatePredicate(synpred261_Php_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA126_2 = input.LA(2);

				if ((EvaluatePredicate(synpred261_Php_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:4: ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(444, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:4: ( variableOrStaticAccessor | constantOrStaticAccessor )
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, false);
				switch (input.LA(1))
				{
				case VariableName:
					{
					int LA121_2 = input.LA(2);

					if ((EvaluatePredicate(synpred254_Php_fragment)))
					{
						alt121 = 1;
					}
					else if ((true))
					{
						alt121 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 121, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 128:
					{
					int LA121_2 = input.LA(2);

					if ((EvaluatePredicate(synpred254_Php_fragment)))
					{
						alt121 = 1;
					}
					else if ((true))
					{
						alt121 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 121, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 129:
					{
					int LA121_2 = input.LA(2);

					if ((EvaluatePredicate(synpred254_Php_fragment)))
					{
						alt121 = 1;
					}
					else if ((true))
					{
						alt121 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 121, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BoolType:
				case BooleanType:
				case DoubleType:
				case FloatType:
				case IntType:
				case IntegerType:
				case ObjectType:
				case RealType:
				case Static:
				case StringType:
				case UnquotedString:
					{
					int LA121_2 = input.LA(2);

					if ((EvaluatePredicate(synpred254_Php_fragment)))
					{
						alt121 = 1;
					}
					else if ((true))
					{
						alt121 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 121, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 121, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:5: variableOrStaticAccessor
					{
					DebugLocation(444, 5);
					PushFollow(Follow._variableOrStaticAccessor_in_name2487);
					variableOrStaticAccessor460=variableOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor460.Tree, variableOrStaticAccessor460, "variableOrStaticAccessor460", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:32: constantOrStaticAccessor
					{
					DebugLocation(444, 32);
					PushFollow(Follow._constantOrStaticAccessor_in_name2491);
					constantOrStaticAccessor461=constantOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor461.Tree, constantOrStaticAccessor461, "constantOrStaticAccessor461", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(121); }

				DebugLocation(445, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:445:4: ( functionArguments )?
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, false);
				int LA122_1 = input.LA(1);

				if ((LA122_1==OpenRoundBracket))
				{
					alt122 = 1;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:445:4: functionArguments
					{
					DebugLocation(445, 4);
					PushFollow(Follow._functionArguments_in_name2497);
					functionArguments462=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments462.Tree, functionArguments462, "functionArguments462", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(122); }

				DebugLocation(446, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:4: ( ( indexer | memberAccess )* memberAccess functionArguments )*
				try { DebugEnterSubRule(124);
				while (true)
				{
					int alt124=2;
					try { DebugEnterDecision(124, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA124_2 = input.LA(2);

						if ((EvaluatePredicate(synpred258_Php_fragment)))
						{
							alt124 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA124_2 = input.LA(2);

						if ((EvaluatePredicate(synpred258_Php_fragment)))
						{
							alt124 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA124_2 = input.LA(2);

						if ((EvaluatePredicate(synpred258_Php_fragment)))
						{
							alt124 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(124); }
					switch ( alt124 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:5: ( indexer | memberAccess )* memberAccess functionArguments
						{
						DebugLocation(446, 5);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:5: ( indexer | memberAccess )*
						try { DebugEnterSubRule(123);
						while (true)
						{
							int alt123=3;
							try { DebugEnterDecision(123, false);
							int LA123_1 = input.LA(1);

							if ((LA123_1==InstanceMember))
							{
								int LA123_2 = input.LA(2);

								if ((EvaluatePredicate(synpred257_Php_fragment)))
								{
									alt123 = 2;
								}


							}
							else if ((LA123_1==OpenCurlyBracket||LA123_1==OpenSquareBracket))
							{
								alt123 = 1;
							}


							} finally { DebugExitDecision(123); }
							switch ( alt123 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:6: indexer
								{
								DebugLocation(446, 6);
								PushFollow(Follow._indexer_in_name2505);
								indexer463=indexer();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, indexer463.Tree, indexer463, "indexer463", retval);

								}
								break;
							case 2:
								DebugEnterAlt(2);
								// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:16: memberAccess
								{
								DebugLocation(446, 16);
								PushFollow(Follow._memberAccess_in_name2509);
								memberAccess464=memberAccess();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess464.Tree, memberAccess464, "memberAccess464", retval);

								}
								break;

							default:
								goto loop123;
							}
						}

						loop123:
							;

						} finally { DebugExitSubRule(123); }

						DebugLocation(446, 31);
						PushFollow(Follow._memberAccess_in_name2513);
						memberAccess465=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess465.Tree, memberAccess465, "memberAccess465", retval);
						DebugLocation(446, 44);
						PushFollow(Follow._functionArguments_in_name2515);
						functionArguments466=functionArguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments466.Tree, functionArguments466, "functionArguments466", retval);

						}
						break;

					default:
						goto loop124;
					}
				}

				loop124:
					;

				} finally { DebugExitSubRule(124); }

				DebugLocation(447, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:4: ( indexer | memberAccess )+
				int cnt125=0;
				try { DebugEnterSubRule(125);
				while (true)
				{
					int alt125=3;
					try { DebugEnterDecision(125, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA125_2 = input.LA(2);

						if ((EvaluatePredicate(synpred259_Php_fragment)))
						{
							alt125 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA125_2 = input.LA(2);

						if ((EvaluatePredicate(synpred259_Php_fragment)))
						{
							alt125 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA125_2 = input.LA(2);

						if ((EvaluatePredicate(synpred260_Php_fragment)))
						{
							alt125 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(125); }
					switch (alt125)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:5: indexer
						{
						DebugLocation(447, 5);
						PushFollow(Follow._indexer_in_name2523);
						indexer467=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer467.Tree, indexer467, "indexer467", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:15: memberAccess
						{
						DebugLocation(447, 15);
						PushFollow(Follow._memberAccess_in_name2527);
						memberAccess468=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess468.Tree, memberAccess468, "memberAccess468", retval);

						}
						break;

					default:
						if (cnt125 >= 1)
							goto loop125;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee125 = new EarlyExitException( 125, input );
						DebugRecognitionException(eee125);
						throw eee125;
					}
					cnt125++;
				}
				loop125:
					;

				} finally { DebugExitSubRule(125); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:448:4: variableOrStaticAccessor
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(448, 4);
				PushFollow(Follow._variableOrStaticAccessor_in_name2534);
				variableOrStaticAccessor469=variableOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor469.Tree, variableOrStaticAccessor469, "variableOrStaticAccessor469", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("name", 69);
			LeaveRule("name", 69);
			LeaveRule_name();
			if (state.backtracking > 0) { Memoize(input, 69, name_StartIndex); }

		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return retval;

	}
	// $ANTLR end "name"

	partial void EnterRule_variableOrStaticAccessor();
	partial void LeaveRule_variableOrStaticAccessor();
	// $ANTLR start "variableOrStaticAccessor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:451:1: variableOrStaticAccessor : ( ( variable | qualifiedName ) '::' variable | variable );
	[GrammarRule("variableOrStaticAccessor")]
	private Antlr3AstNode variableOrStaticAccessor()
	{
		EnterRule_variableOrStaticAccessor();
		EnterRule("variableOrStaticAccessor", 70);
		var retval = new Antlr3AstNode("variableOrStaticAccessor");
		
		retval.Start = (IToken)input.LT(1);
		int variableOrStaticAccessor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal472 = default(IToken);
		Antlr3AstNode variable470 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName471 = default(Antlr3AstNode);
		Antlr3AstNode variable473 = default(Antlr3AstNode);
		Antlr3AstNode variable474 = default(Antlr3AstNode);

		object string_literal472_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableOrStaticAccessor");
		DebugLocation(451, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:452:2: ( ( variable | qualifiedName ) '::' variable | variable )
			int alt128=2;
			try { DebugEnterDecision(128, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA128_2 = input.LA(2);

				if ((EvaluatePredicate(synpred263_Php_fragment)))
				{
					alt128 = 1;
				}
				else if ((true))
				{
					alt128 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA128_2 = input.LA(2);

				if ((EvaluatePredicate(synpred263_Php_fragment)))
				{
					alt128 = 1;
				}
				else if ((true))
				{
					alt128 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
			case 129:
				{
				alt128 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:452:4: ( variable | qualifiedName ) '::' variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(452, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:452:4: ( variable | qualifiedName )
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, false);
				int LA127_1 = input.LA(1);

				if ((LA127_1==VariableName||LA127_1==128))
				{
					alt127 = 1;
				}
				else if (((LA127_1>=BoolType && LA127_1<=BooleanType)||LA127_1==DoubleType||LA127_1==FloatType||LA127_1==IntType||LA127_1==IntegerType||LA127_1==ObjectType||LA127_1==RealType||(LA127_1>=Static && LA127_1<=StringType)||LA127_1==UnquotedString||LA127_1==129))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:452:5: variable
					{
					DebugLocation(452, 5);
					PushFollow(Follow._variable_in_variableOrStaticAccessor2546);
					variable470=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable470.Tree, variable470, "variable470", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:452:16: qualifiedName
					{
					DebugLocation(452, 16);
					PushFollow(Follow._qualifiedName_in_variableOrStaticAccessor2550);
					qualifiedName471=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName471.Tree, qualifiedName471, "qualifiedName471", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(127); }

				DebugLocation(452, 31);
				string_literal472=(IToken)Match(input,ClassMember,Follow._ClassMember_in_variableOrStaticAccessor2553); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal472_tree = (object)adaptor.Create(string_literal472, "string_literal472", retval);
				adaptor.AddChild(root_0, string_literal472_tree);
				}
				DebugLocation(452, 36);
				PushFollow(Follow._variable_in_variableOrStaticAccessor2555);
				variable473=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable473.Tree, variable473, "variable473", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:453:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(453, 4);
				PushFollow(Follow._variable_in_variableOrStaticAccessor2560);
				variable474=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable474.Tree, variable474, "variable474", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableOrStaticAccessor", 70);
			LeaveRule("variableOrStaticAccessor", 70);
			LeaveRule_variableOrStaticAccessor();
			if (state.backtracking > 0) { Memoize(input, 70, variableOrStaticAccessor_StartIndex); }

		}
		DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "variableOrStaticAccessor"); }
		return retval;

	}
	// $ANTLR end "variableOrStaticAccessor"

	partial void EnterRule_constantOrStaticAccessor();
	partial void LeaveRule_constantOrStaticAccessor();
	// $ANTLR start "constantOrStaticAccessor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:456:1: constantOrStaticAccessor : ( ( variable | qualifiedName ) '::' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName );
	[GrammarRule("constantOrStaticAccessor")]
	private Antlr3AstNode constantOrStaticAccessor()
	{
		EnterRule_constantOrStaticAccessor();
		EnterRule("constantOrStaticAccessor", 71);
		var retval = new Antlr3AstNode("constantOrStaticAccessor");
		
		retval.Start = (IToken)input.LT(1);
		int constantOrStaticAccessor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal477 = default(IToken);
		IToken set478 = default(IToken);
		Antlr3AstNode variable475 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName476 = default(Antlr3AstNode);
		Antlr3AstNode qualifiedName479 = default(Antlr3AstNode);

		object string_literal477_tree = default(object);
		object set478_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constantOrStaticAccessor");
		DebugLocation(456, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:457:2: ( ( variable | qualifiedName ) '::' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName )
			int alt130=2;
			try { DebugEnterDecision(130, false);
			try
			{
				alt130 = dfa130.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:457:4: ( variable | qualifiedName ) '::' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(457, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:457:4: ( variable | qualifiedName )
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, false);
				int LA129_1 = input.LA(1);

				if ((LA129_1==VariableName||LA129_1==128))
				{
					alt129 = 1;
				}
				else if (((LA129_1>=BoolType && LA129_1<=BooleanType)||LA129_1==DoubleType||LA129_1==FloatType||LA129_1==IntType||LA129_1==IntegerType||LA129_1==ObjectType||LA129_1==RealType||(LA129_1>=Static && LA129_1<=StringType)||LA129_1==UnquotedString||LA129_1==129))
				{
					alt129 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 129, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:457:5: variable
					{
					DebugLocation(457, 5);
					PushFollow(Follow._variable_in_constantOrStaticAccessor2572);
					variable475=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable475.Tree, variable475, "variable475", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:457:16: qualifiedName
					{
					DebugLocation(457, 16);
					PushFollow(Follow._qualifiedName_in_constantOrStaticAccessor2576);
					qualifiedName476=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName476.Tree, qualifiedName476, "qualifiedName476", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(129); }

				DebugLocation(457, 31);
				string_literal477=(IToken)Match(input,ClassMember,Follow._ClassMember_in_constantOrStaticAccessor2579); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal477_tree = (object)adaptor.Create(string_literal477, "string_literal477", retval);
				adaptor.AddChild(root_0, string_literal477_tree);
				}
				DebugLocation(457, 36);

				set478=(IToken)input.LT(1);
				if ((input.LA(1)>=BoolType && input.LA(1)<=BooleanType)||input.LA(1)==DoubleType||input.LA(1)==FloatType||input.LA(1)==IntType||input.LA(1)==IntegerType||input.LA(1)==ObjectType||input.LA(1)==RealType||input.LA(1)==StringType||input.LA(1)==UnquotedString)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set478, "set478", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:461:4: qualifiedName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 4);
				PushFollow(Follow._qualifiedName_in_constantOrStaticAccessor2637);
				qualifiedName479=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName479.Tree, qualifiedName479, "qualifiedName479", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constantOrStaticAccessor", 71);
			LeaveRule("constantOrStaticAccessor", 71);
			LeaveRule_constantOrStaticAccessor();
			if (state.backtracking > 0) { Memoize(input, 71, constantOrStaticAccessor_StartIndex); }

		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "constantOrStaticAccessor"); }
		return retval;

	}
	// $ANTLR end "constantOrStaticAccessor"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();
	// $ANTLR start "variable"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:464:1: variable : variableVariable ;
	[GrammarRule("variable")]
	private Antlr3AstNode variable()
	{
		EnterRule_variable();
		EnterRule("variable", 72);
		var retval = new Antlr3AstNode("variable");
		
		retval.Start = (IToken)input.LT(1);
		int variable_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3AstNode variableVariable480 = default(Antlr3AstNode);

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(464, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:465:2: ( variableVariable )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:465:4: variableVariable
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(465, 4);
			PushFollow(Follow._variableVariable_in_variable2649);
			variableVariable480=variableVariable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableVariable480.Tree, variableVariable480, "variableVariable480", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 72);
			LeaveRule("variable", 72);
			LeaveRule_variable();
			if (state.backtracking > 0) { Memoize(input, 72, variable_StartIndex); }

		}
		DebugLocation(466, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_variableVariable();
	partial void LeaveRule_variableVariable();
	// $ANTLR start "variableVariable"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:468:1: variableVariable : ( VariableName | '$' ( variableVariable | '{' expression '}' ) );
	[GrammarRule("variableVariable")]
	private Antlr3AstNode variableVariable()
	{
		EnterRule_variableVariable();
		EnterRule("variableVariable", 73);
		var retval = new Antlr3AstNode("variableVariable");
		
		retval.Start = (IToken)input.LT(1);
		int variableVariable_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName481 = default(IToken);
		IToken char_literal482 = default(IToken);
		IToken char_literal484 = default(IToken);
		IToken char_literal486 = default(IToken);
		Antlr3AstNode variableVariable483 = default(Antlr3AstNode);
		Antlr3AstNode expression485 = default(Antlr3AstNode);

		object VariableName481_tree = default(object);
		object char_literal482_tree = default(object);
		object char_literal484_tree = default(object);
		object char_literal486_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableVariable");
		DebugLocation(468, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:469:2: ( VariableName | '$' ( variableVariable | '{' expression '}' ) )
			int alt132=2;
			try { DebugEnterDecision(132, false);
			int LA132_1 = input.LA(1);

			if ((LA132_1==VariableName))
			{
				alt132 = 1;
			}
			else if ((LA132_1==128))
			{
				alt132 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 132, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:469:4: VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(469, 4);
				VariableName481=(IToken)Match(input,VariableName,Follow._VariableName_in_variableVariable2660); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName481_tree = (object)adaptor.Create(VariableName481, "VariableName481", retval);
				adaptor.AddChild(root_0, VariableName481_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:470:4: '$' ( variableVariable | '{' expression '}' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(470, 4);
				char_literal482=(IToken)Match(input,128,Follow._128_in_variableVariable2665); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal482_tree = (object)adaptor.Create(char_literal482, "char_literal482", retval);
				adaptor.AddChild(root_0, char_literal482_tree);
				}
				DebugLocation(470, 8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:470:8: ( variableVariable | '{' expression '}' )
				int alt131=2;
				try { DebugEnterSubRule(131);
				try { DebugEnterDecision(131, false);
				int LA131_1 = input.LA(1);

				if ((LA131_1==VariableName||LA131_1==128))
				{
					alt131 = 1;
				}
				else if ((LA131_1==OpenCurlyBracket))
				{
					alt131 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 131, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:470:9: variableVariable
					{
					DebugLocation(470, 9);
					PushFollow(Follow._variableVariable_in_variableVariable2668);
					variableVariable483=variableVariable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableVariable483.Tree, variableVariable483, "variableVariable483", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:470:28: '{' expression '}'
					{
					DebugLocation(470, 28);
					char_literal484=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_variableVariable2672); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal484_tree = (object)adaptor.Create(char_literal484, "char_literal484", retval);
					adaptor.AddChild(root_0, char_literal484_tree);
					}
					DebugLocation(470, 32);
					PushFollow(Follow._expression_in_variableVariable2674);
					expression485=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression485.Tree, expression485, "expression485", retval);
					DebugLocation(470, 43);
					char_literal486=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_variableVariable2676); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal486_tree = (object)adaptor.Create(char_literal486, "char_literal486", retval);
					adaptor.AddChild(root_0, char_literal486_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(131); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableVariable", 73);
			LeaveRule("variableVariable", 73);
			LeaveRule_variableVariable();
			if (state.backtracking > 0) { Memoize(input, 73, variableVariable_StartIndex); }

		}
		DebugLocation(471, 1);
		} finally { DebugExitRule(GrammarFileName, "variableVariable"); }
		return retval;

	}
	// $ANTLR end "variableVariable"

	partial void EnterRule_qualifiedName();
	partial void LeaveRule_qualifiedName();
	// $ANTLR start "qualifiedName"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:474:1: qualifiedName : ( '\\\\' )? ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Static ) ( '\\\\' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )* ;
	[GrammarRule("qualifiedName")]
	private Antlr3AstNode qualifiedName()
	{
		EnterRule_qualifiedName();
		EnterRule("qualifiedName", 74);
		var retval = new Antlr3AstNode("qualifiedName");
		
		retval.Start = (IToken)input.LT(1);
		int qualifiedName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal487 = default(IToken);
		IToken set488 = default(IToken);
		IToken char_literal489 = default(IToken);
		IToken set490 = default(IToken);

		object char_literal487_tree = default(object);
		object set488_tree = default(object);
		object char_literal489_tree = default(object);
		object set490_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedName");
		DebugLocation(474, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:475:2: ( ( '\\\\' )? ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Static ) ( '\\\\' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:475:4: ( '\\\\' )? ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Static ) ( '\\\\' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(475, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:475:4: ( '\\\\' )?
			int alt133=2;
			try { DebugEnterSubRule(133);
			try { DebugEnterDecision(133, false);
			int LA133_1 = input.LA(1);

			if ((LA133_1==129))
			{
				alt133 = 1;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:475:4: '\\\\'
				{
				DebugLocation(475, 4);
				char_literal487=(IToken)Match(input,129,Follow._129_in_qualifiedName2689); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal487_tree = (object)adaptor.Create(char_literal487, "char_literal487", retval);
				adaptor.AddChild(root_0, char_literal487_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(133); }

			DebugLocation(475, 10);

			set488=(IToken)input.LT(1);
			if ((input.LA(1)>=BoolType && input.LA(1)<=BooleanType)||input.LA(1)==DoubleType||input.LA(1)==FloatType||input.LA(1)==IntType||input.LA(1)==IntegerType||input.LA(1)==ObjectType||input.LA(1)==RealType||(input.LA(1)>=Static && input.LA(1)<=StringType)||input.LA(1)==UnquotedString)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set488, "set488", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(479, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:479:2: ( '\\\\' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_1 = input.LA(1);

				if ((LA134_1==129))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:479:4: '\\\\' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
					{
					DebugLocation(479, 4);
					char_literal489=(IToken)Match(input,129,Follow._129_in_qualifiedName2752); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal489_tree = (object)adaptor.Create(char_literal489, "char_literal489", retval);
					adaptor.AddChild(root_0, char_literal489_tree);
					}
					DebugLocation(479, 9);

					set490=(IToken)input.LT(1);
					if ((input.LA(1)>=BoolType && input.LA(1)<=BooleanType)||input.LA(1)==DoubleType||input.LA(1)==FloatType||input.LA(1)==IntType||input.LA(1)==IntegerType||input.LA(1)==ObjectType||input.LA(1)==RealType||input.LA(1)==StringType||input.LA(1)==UnquotedString)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set490, "set490", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedName", 74);
			LeaveRule("qualifiedName", 74);
			LeaveRule_qualifiedName();
			if (state.backtracking > 0) { Memoize(input, 74, qualifiedName_StartIndex); }

		}
		DebugLocation(483, 1);
		} finally { DebugExitRule(GrammarFileName, "qualifiedName"); }
		return retval;

	}
	// $ANTLR end "qualifiedName"

	partial void EnterRule_requireOperator();
	partial void LeaveRule_requireOperator();
	// $ANTLR start "requireOperator"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:485:1: requireOperator : ( Require | RequireOnce | Include | IncludeOnce );
	[GrammarRule("requireOperator")]
	private Antlr3AstNode requireOperator()
	{
		EnterRule_requireOperator();
		EnterRule("requireOperator", 75);
		var retval = new Antlr3AstNode("requireOperator");
		
		retval.Start = (IToken)input.LT(1);
		int requireOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set491 = default(IToken);

		object set491_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "requireOperator");
		DebugLocation(485, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:486:2: ( Require | RequireOnce | Include | IncludeOnce )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(486, 2);

			set491=(IToken)input.LT(1);
			if ((input.LA(1)>=Include && input.LA(1)<=IncludeOnce)||(input.LA(1)>=Require && input.LA(1)<=RequireOnce))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set491, "set491", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("requireOperator", 75);
			LeaveRule("requireOperator", 75);
			LeaveRule_requireOperator();
			if (state.backtracking > 0) { Memoize(input, 75, requireOperator_StartIndex); }

		}
		DebugLocation(487, 1);
		} finally { DebugExitRule(GrammarFileName, "requireOperator"); }
		return retval;

	}
	// $ANTLR end "requireOperator"

	partial void EnterRule_accessModifier();
	partial void LeaveRule_accessModifier();
	// $ANTLR start "accessModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:489:1: accessModifier : ( Public | Private | Protected );
	[GrammarRule("accessModifier")]
	private Antlr3AstNode accessModifier()
	{
		EnterRule_accessModifier();
		EnterRule("accessModifier", 76);
		var retval = new Antlr3AstNode("accessModifier");
		
		retval.Start = (IToken)input.LT(1);
		int accessModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set492 = default(IToken);

		object set492_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "accessModifier");
		DebugLocation(489, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:490:2: ( Public | Private | Protected )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(490, 2);

			set492=(IToken)input.LT(1);
			if ((input.LA(1)>=Private && input.LA(1)<=Public))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set492, "set492", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessModifier", 76);
			LeaveRule("accessModifier", 76);
			LeaveRule_accessModifier();
			if (state.backtracking > 0) { Memoize(input, 76, accessModifier_StartIndex); }

		}
		DebugLocation(491, 1);
		} finally { DebugExitRule(GrammarFileName, "accessModifier"); }
		return retval;

	}
	// $ANTLR end "accessModifier"

	partial void EnterRule_boolean();
	partial void LeaveRule_boolean();
	// $ANTLR start "boolean"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:493:1: boolean : ( True | False );
	[GrammarRule("boolean")]
	private Antlr3AstNode boolean()
	{
		EnterRule_boolean();
		EnterRule("boolean", 77);
		var retval = new Antlr3AstNode("boolean");
		
		retval.Start = (IToken)input.LT(1);
		int boolean_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set493 = default(IToken);

		object set493_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "boolean");
		DebugLocation(493, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:494:2: ( True | False )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(494, 2);

			set493=(IToken)input.LT(1);
			if (input.LA(1)==False||input.LA(1)==True)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set493, "set493", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolean", 77);
			LeaveRule("boolean", 77);
			LeaveRule_boolean();
			if (state.backtracking > 0) { Memoize(input, 77, boolean_StartIndex); }

		}
		DebugLocation(495, 1);
		} finally { DebugExitRule(GrammarFileName, "boolean"); }
		return retval;

	}
	// $ANTLR end "boolean"

	partial void EnterRule_predefinedFunctionName();
	partial void LeaveRule_predefinedFunctionName();
	// $ANTLR start "predefinedFunctionName"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:497:1: predefinedFunctionName : ( HaltCompiler | Die | Empty | UnsetType | Eval | Exit | Isset );
	[GrammarRule("predefinedFunctionName")]
	private Antlr3AstNode predefinedFunctionName()
	{
		EnterRule_predefinedFunctionName();
		EnterRule("predefinedFunctionName", 78);
		var retval = new Antlr3AstNode("predefinedFunctionName");
		
		retval.Start = (IToken)input.LT(1);
		int predefinedFunctionName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set494 = default(IToken);

		object set494_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "predefinedFunctionName");
		DebugLocation(497, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:498:2: ( HaltCompiler | Die | Empty | UnsetType | Eval | Exit | Isset )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(498, 2);

			set494=(IToken)input.LT(1);
			if (input.LA(1)==Die||input.LA(1)==Empty||(input.LA(1)>=Eval && input.LA(1)<=Exit)||input.LA(1)==HaltCompiler||input.LA(1)==Isset||input.LA(1)==UnsetType)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set494, "set494", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("predefinedFunctionName", 78);
			LeaveRule("predefinedFunctionName", 78);
			LeaveRule_predefinedFunctionName();
			if (state.backtracking > 0) { Memoize(input, 78, predefinedFunctionName_StartIndex); }

		}
		DebugLocation(499, 1);
		} finally { DebugExitRule(GrammarFileName, "predefinedFunctionName"); }
		return retval;

	}
	// $ANTLR end "predefinedFunctionName"

	partial void EnterRule_synpred3_Php_fragment();
	partial void LeaveRule_synpred3_Php_fragment();

	// $ANTLR start synpred3_Php
	private void synpred3_Php_fragment()
	{
		EnterRule_synpred3_Php_fragment();
		EnterRule("synpred3_Php_fragment", 81);
		var retval = new Antlr3AstNode("synpred3_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:89:18: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:89:18: statement
			{
			DebugLocation(89, 18);
			PushFollow(Follow._statement_in_synpred3_Php340);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_Php_fragment", 81);
			LeaveRule("synpred3_Php_fragment", 81);
			LeaveRule_synpred3_Php_fragment();
		}
	}
	// $ANTLR end synpred3_Php

	partial void EnterRule_synpred6_Php_fragment();
	partial void LeaveRule_synpred6_Php_fragment();

	// $ANTLR start synpred6_Php
	private void synpred6_Php_fragment()
	{
		EnterRule_synpred6_Php_fragment();
		EnterRule("synpred6_Php_fragment", 84);
		var retval = new Antlr3AstNode("synpred6_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:108:4: ({...}? => printExpr ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:108:4: {...}? => printExpr ';'
			{
			DebugLocation(108, 4);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred6_Php", "expressionFollowsBodyString");
			}
			DebugLocation(108, 74);
			PushFollow(Follow._printExpr_in_synpred6_Php426);
			printExpr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(108, 84);
			Match(input,SemiColon,Follow._SemiColon_in_synpred6_Php428); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_Php_fragment", 84);
			LeaveRule("synpred6_Php_fragment", 84);
			LeaveRule_synpred6_Php_fragment();
		}
	}
	// $ANTLR end synpred6_Php

	partial void EnterRule_synpred8_Php_fragment();
	partial void LeaveRule_synpred8_Php_fragment();

	// $ANTLR start synpred8_Php
	private void synpred8_Php_fragment()
	{
		EnterRule_synpred8_Php_fragment();
		EnterRule("synpred8_Php_fragment", 86);
		var retval = new Antlr3AstNode("synpred8_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:6: ({...}? => ( printExpr )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:6: {...}? => ( printExpr )?
			{
			DebugLocation(109, 6);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred8_Php", "expressionFollowsBodyString");
			}
			DebugLocation(109, 77);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:77: ( printExpr )?
			int alt135=2;
			try { DebugEnterSubRule(135);
			try { DebugEnterDecision(135, false);
			int LA135_1 = input.LA(1);

			if ((LA135_1==Ampersand||LA135_1==ArrayType||LA135_1==Bang||(LA135_1>=BoolType && LA135_1<=BooleanType)||LA135_1==Clone||LA135_1==Die||(LA135_1>=DoubleQuotedString && LA135_1<=DoubleType)||LA135_1==Empty||(LA135_1>=Eval && LA135_1<=Exit)||LA135_1==False||LA135_1==FloatType||LA135_1==Function||LA135_1==HaltCompiler||LA135_1==HereDoc||(LA135_1>=Include && LA135_1<=IncrementOperator)||(LA135_1>=IntType && LA135_1<=IntegerType)||(LA135_1>=Isset && LA135_1<=List)||LA135_1==Minus||(LA135_1>=New && LA135_1<=Null)||LA135_1==ObjectType||(LA135_1>=OpenRoundBracket && LA135_1<=OpenSquareBracket)||LA135_1==Plus||(LA135_1>=Real && LA135_1<=RequireOnce)||LA135_1==SingleQuotedString||(LA135_1>=Static && LA135_1<=SuppressWarnings)||(LA135_1>=Tilde && LA135_1<=True)||LA135_1==UnquotedString||LA135_1==UnsetType||LA135_1==VariableName||(LA135_1>=128 && LA135_1<=129)))
			{
				alt135 = 1;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:77: printExpr
				{
				DebugLocation(109, 77);
				PushFollow(Follow._printExpr_in_synpred8_Php441);
				printExpr();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(135); }


			}

		}
		finally
		{
			TraceOut("synpred8_Php_fragment", 86);
			LeaveRule("synpred8_Php_fragment", 86);
			LeaveRule_synpred8_Php_fragment();
		}
	}
	// $ANTLR end synpred8_Php

	partial void EnterRule_synpred10_Php_fragment();
	partial void LeaveRule_synpred10_Php_fragment();

	// $ANTLR start synpred10_Php
	private void synpred10_Php_fragment()
	{
		EnterRule_synpred10_Php_fragment();
		EnterRule("synpred10_Php_fragment", 88);
		var retval = new Antlr3AstNode("synpred10_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:4: ( ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:4: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
			{
			DebugLocation(109, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:4: ({...}? => ( printExpr )? | ( simpleStatement )? )
			int alt138=2;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Static:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Bang:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BodyString:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Break:
			case Const:
			case Continue:
			case Echo:
			case Global:
			case Goto:
			case Return:
			case Throw:
				{
				alt138 = 2;
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case StringType:
			case UnquotedString:
				{
				int LA138_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 30, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:6: {...}? => ( printExpr )?
				{
				DebugLocation(109, 6);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return;}
					throw new FailedPredicateException(input, "synpred10_Php", "expressionFollowsBodyString");
				}
				DebugLocation(109, 77);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:77: ( printExpr )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, false);
				int LA136_1 = input.LA(1);

				if ((LA136_1==Ampersand||LA136_1==ArrayType||LA136_1==Bang||(LA136_1>=BoolType && LA136_1<=BooleanType)||LA136_1==Clone||LA136_1==Die||(LA136_1>=DoubleQuotedString && LA136_1<=DoubleType)||LA136_1==Empty||(LA136_1>=Eval && LA136_1<=Exit)||LA136_1==False||LA136_1==FloatType||LA136_1==Function||LA136_1==HaltCompiler||LA136_1==HereDoc||(LA136_1>=Include && LA136_1<=IncrementOperator)||(LA136_1>=IntType && LA136_1<=IntegerType)||(LA136_1>=Isset && LA136_1<=List)||LA136_1==Minus||(LA136_1>=New && LA136_1<=Null)||LA136_1==ObjectType||(LA136_1>=OpenRoundBracket && LA136_1<=OpenSquareBracket)||LA136_1==Plus||(LA136_1>=Real && LA136_1<=RequireOnce)||LA136_1==SingleQuotedString||(LA136_1>=Static && LA136_1<=SuppressWarnings)||(LA136_1>=Tilde && LA136_1<=True)||LA136_1==UnquotedString||LA136_1==UnsetType||LA136_1==VariableName||(LA136_1>=128 && LA136_1<=129)))
				{
					alt136 = 1;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:77: printExpr
					{
					DebugLocation(109, 77);
					PushFollow(Follow._printExpr_in_synpred10_Php441);
					printExpr();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(136); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:90: ( simpleStatement )?
				{
				DebugLocation(109, 90);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:90: ( simpleStatement )?
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, false);
				int LA137_1 = input.LA(1);

				if ((LA137_1==Ampersand||LA137_1==ArrayType||LA137_1==Bang||(LA137_1>=BoolType && LA137_1<=Break)||LA137_1==Clone||(LA137_1>=Const && LA137_1<=Continue)||LA137_1==Die||(LA137_1>=DoubleQuotedString && LA137_1<=Echo)||LA137_1==Empty||(LA137_1>=Eval && LA137_1<=Exit)||LA137_1==False||LA137_1==FloatType||(LA137_1>=Function && LA137_1<=HaltCompiler)||LA137_1==HereDoc||(LA137_1>=Include && LA137_1<=IncrementOperator)||(LA137_1>=IntType && LA137_1<=IntegerType)||(LA137_1>=Isset && LA137_1<=List)||LA137_1==Minus||(LA137_1>=New && LA137_1<=Null)||LA137_1==ObjectType||(LA137_1>=OpenRoundBracket && LA137_1<=OpenSquareBracket)||LA137_1==Plus||(LA137_1>=Real && LA137_1<=Return)||LA137_1==SingleQuotedString||(LA137_1>=Static && LA137_1<=SuppressWarnings)||(LA137_1>=Throw && LA137_1<=True)||LA137_1==UnquotedString||LA137_1==UnsetType||LA137_1==VariableName||(LA137_1>=128 && LA137_1<=129)))
				{
					alt137 = 1;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:109:90: simpleStatement
					{
					DebugLocation(109, 90);
					PushFollow(Follow._simpleStatement_in_synpred10_Php446);
					simpleStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(137); }


				}
				break;

			}
			} finally { DebugExitSubRule(138); }

			DebugLocation(110, 3);
			Match(input,BodyString,Follow._BodyString_in_synpred10_Php452); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_Php_fragment", 88);
			LeaveRule("synpred10_Php_fragment", 88);
			LeaveRule_synpred10_Php_fragment();
		}
	}
	// $ANTLR end synpred10_Php

	partial void EnterRule_synpred13_Php_fragment();
	partial void LeaveRule_synpred13_Php_fragment();

	// $ANTLR start synpred13_Php
	private void synpred13_Php_fragment()
	{
		EnterRule_synpred13_Php_fragment();
		EnterRule("synpred13_Php_fragment", 91);
		var retval = new Antlr3AstNode("synpred13_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:113:4: ( UnquotedString Colon statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:113:4: UnquotedString Colon statement
			{
			DebugLocation(113, 4);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred13_Php469); if (state.failed) return;
			DebugLocation(113, 19);
			Match(input,Colon,Follow._Colon_in_synpred13_Php471); if (state.failed) return;
			DebugLocation(113, 25);
			PushFollow(Follow._statement_in_synpred13_Php473);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_Php_fragment", 91);
			LeaveRule("synpred13_Php_fragment", 91);
			LeaveRule_synpred13_Php_fragment();
		}
	}
	// $ANTLR end synpred13_Php

	partial void EnterRule_synpred16_Php_fragment();
	partial void LeaveRule_synpred16_Php_fragment();

	// $ANTLR start synpred16_Php
	private void synpred16_Php_fragment()
	{
		EnterRule_synpred16_Php_fragment();
		EnterRule("synpred16_Php_fragment", 94);
		var retval = new Antlr3AstNode("synpred16_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:116:4: ( complexStatement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:116:4: complexStatement
			{
			DebugLocation(116, 4);
			PushFollow(Follow._complexStatement_in_synpred16_Php488);
			complexStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_Php_fragment", 94);
			LeaveRule("synpred16_Php_fragment", 94);
			LeaveRule_synpred16_Php_fragment();
		}
	}
	// $ANTLR end synpred16_Php

	partial void EnterRule_synpred18_Php_fragment();
	partial void LeaveRule_synpred18_Php_fragment();

	// $ANTLR start synpred18_Php
	private void synpred18_Php_fragment()
	{
		EnterRule_synpred18_Php_fragment();
		EnterRule("synpred18_Php_fragment", 96);
		var retval = new Antlr3AstNode("synpred18_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:125:8: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:125:8: statement
			{
			DebugLocation(125, 8);
			PushFollow(Follow._statement_in_synpred18_Php520);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred18_Php_fragment", 96);
			LeaveRule("synpred18_Php_fragment", 96);
			LeaveRule_synpred18_Php_fragment();
		}
	}
	// $ANTLR end synpred18_Php

	partial void EnterRule_synpred46_Php_fragment();
	partial void LeaveRule_synpred46_Php_fragment();

	// $ANTLR start synpred46_Php
	private void synpred46_Php_fragment()
	{
		EnterRule_synpred46_Php_fragment();
		EnterRule("synpred46_Php_fragment", 124);
		var retval = new Antlr3AstNode("synpred46_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:183:36: ( conditional )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:183:36: conditional
			{
			DebugLocation(183, 36);
			PushFollow(Follow._conditional_in_synpred46_Php872);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred46_Php_fragment", 124);
			LeaveRule("synpred46_Php_fragment", 124);
			LeaveRule_synpred46_Php_fragment();
		}
	}
	// $ANTLR end synpred46_Php

	partial void EnterRule_synpred69_Php_fragment();
	partial void LeaveRule_synpred69_Php_fragment();

	// $ANTLR start synpred69_Php
	private void synpred69_Php_fragment()
	{
		EnterRule_synpred69_Php_fragment();
		EnterRule("synpred69_Php_fragment", 147);
		var retval = new Antlr3AstNode("synpred69_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:206:4: ( Goto UnquotedString )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:206:4: Goto UnquotedString
			{
			DebugLocation(206, 4);
			Match(input,Goto,Follow._Goto_in_synpred69_Php1087); if (state.failed) return;
			DebugLocation(206, 9);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred69_Php1089); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred69_Php_fragment", 147);
			LeaveRule("synpred69_Php_fragment", 147);
			LeaveRule_synpred69_Php_fragment();
		}
	}
	// $ANTLR end synpred69_Php

	partial void EnterRule_synpred72_Php_fragment();
	partial void LeaveRule_synpred72_Php_fragment();

	// $ANTLR start synpred72_Php
	private void synpred72_Php_fragment()
	{
		EnterRule_synpred72_Php_fragment();
		EnterRule("synpred72_Php_fragment", 150);
		var retval = new Antlr3AstNode("synpred72_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:208:4: ( Goto UnquotedString )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:208:4: Goto UnquotedString
			{
			DebugLocation(208, 4);
			Match(input,Goto,Follow._Goto_in_synpred72_Php1102); if (state.failed) return;
			DebugLocation(208, 9);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred72_Php1104); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred72_Php_fragment", 150);
			LeaveRule("synpred72_Php_fragment", 150);
			LeaveRule_synpred72_Php_fragment();
		}
	}
	// $ANTLR end synpred72_Php

	partial void EnterRule_synpred74_Php_fragment();
	partial void LeaveRule_synpred74_Php_fragment();

	// $ANTLR start synpred74_Php
	private void synpred74_Php_fragment()
	{
		EnterRule_synpred74_Php_fragment();
		EnterRule("synpred74_Php_fragment", 152);
		var retval = new Antlr3AstNode("synpred74_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:40: ( conditional )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:214:40: conditional
			{
			DebugLocation(214, 40);
			PushFollow(Follow._conditional_in_synpred74_Php1137);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred74_Php_fragment", 152);
			LeaveRule("synpred74_Php_fragment", 152);
			LeaveRule_synpred74_Php_fragment();
		}
	}
	// $ANTLR end synpred74_Php

	partial void EnterRule_synpred81_Php_fragment();
	partial void LeaveRule_synpred81_Php_fragment();

	// $ANTLR start synpred81_Php
	private void synpred81_Php_fragment()
	{
		EnterRule_synpred81_Php_fragment();
		EnterRule("synpred81_Php_fragment", 159);
		var retval = new Antlr3AstNode("synpred81_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:4: ( ( casestatement )* defaultcase ( casestatement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:4: ( casestatement )* defaultcase ( casestatement )*
			{
			DebugLocation(231, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:4: ( casestatement )*
			try { DebugEnterSubRule(155);
			while (true)
			{
				int alt155=2;
				try { DebugEnterDecision(155, false);
				int LA155_1 = input.LA(1);

				if ((LA155_1==Case))
				{
					alt155 = 1;
				}


				} finally { DebugExitDecision(155); }
				switch ( alt155 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:4: casestatement
					{
					DebugLocation(231, 4);
					PushFollow(Follow._casestatement_in_synpred81_Php1197);
					casestatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop155;
				}
			}

			loop155:
				;

			} finally { DebugExitSubRule(155); }

			DebugLocation(231, 19);
			PushFollow(Follow._defaultcase_in_synpred81_Php1200);
			defaultcase();
			PopFollow();
			if (state.failed) return;
			DebugLocation(231, 31);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:31: ( casestatement )*
			try { DebugEnterSubRule(156);
			while (true)
			{
				int alt156=2;
				try { DebugEnterDecision(156, false);
				int LA156_1 = input.LA(1);

				if ((LA156_1==Case))
				{
					alt156 = 1;
				}


				} finally { DebugExitDecision(156); }
				switch ( alt156 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:231:31: casestatement
					{
					DebugLocation(231, 31);
					PushFollow(Follow._casestatement_in_synpred81_Php1202);
					casestatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop156;
				}
			}

			loop156:
				;

			} finally { DebugExitSubRule(156); }


			}

		}
		finally
		{
			TraceOut("synpred81_Php_fragment", 159);
			LeaveRule("synpred81_Php_fragment", 159);
			LeaveRule_synpred81_Php_fragment();
		}
	}
	// $ANTLR end synpred81_Php

	partial void EnterRule_synpred84_Php_fragment();
	partial void LeaveRule_synpred84_Php_fragment();

	// $ANTLR start synpred84_Php
	private void synpred84_Php_fragment()
	{
		EnterRule_synpred84_Php_fragment();
		EnterRule("synpred84_Php_fragment", 162);
		var retval = new Antlr3AstNode("synpred84_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:236:30: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:236:30: statement
			{
			DebugLocation(236, 30);
			PushFollow(Follow._statement_in_synpred84_Php1230);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred84_Php_fragment", 162);
			LeaveRule("synpred84_Php_fragment", 162);
			LeaveRule_synpred84_Php_fragment();
		}
	}
	// $ANTLR end synpred84_Php

	partial void EnterRule_synpred86_Php_fragment();
	partial void LeaveRule_synpred86_Php_fragment();

	// $ANTLR start synpred86_Php
	private void synpred86_Php_fragment()
	{
		EnterRule_synpred86_Php_fragment();
		EnterRule("synpred86_Php_fragment", 164);
		var retval = new Antlr3AstNode("synpred86_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:240:23: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:240:23: statement
			{
			DebugLocation(240, 23);
			PushFollow(Follow._statement_in_synpred86_Php1252);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred86_Php_fragment", 164);
			LeaveRule("synpred86_Php_fragment", 164);
			LeaveRule_synpred86_Php_fragment();
		}
	}
	// $ANTLR end synpred86_Php

	partial void EnterRule_synpred90_Php_fragment();
	partial void LeaveRule_synpred90_Php_fragment();

	// $ANTLR start synpred90_Php
	private void synpred90_Php_fragment()
	{
		EnterRule_synpred90_Php_fragment();
		EnterRule("synpred90_Php_fragment", 168);
		var retval = new Antlr3AstNode("synpred90_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:5: ( primitiveType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:5: primitiveType
			{
			DebugLocation(256, 5);
			PushFollow(Follow._primitiveType_in_synpred90_Php1330);
			primitiveType();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred90_Php_fragment", 168);
			LeaveRule("synpred90_Php_fragment", 168);
			LeaveRule_synpred90_Php_fragment();
		}
	}
	// $ANTLR end synpred90_Php

	partial void EnterRule_synpred91_Php_fragment();
	partial void LeaveRule_synpred91_Php_fragment();

	// $ANTLR start synpred91_Php
	private void synpred91_Php_fragment()
	{
		EnterRule_synpred91_Php_fragment();
		EnterRule("synpred91_Php_fragment", 169);
		var retval = new Antlr3AstNode("synpred91_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:21: ( qualifiedName )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:256:21: qualifiedName
			{
			DebugLocation(256, 21);
			PushFollow(Follow._qualifiedName_in_synpred91_Php1334);
			qualifiedName();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred91_Php_fragment", 169);
			LeaveRule("synpred91_Php_fragment", 169);
			LeaveRule_synpred91_Php_fragment();
		}
	}
	// $ANTLR end synpred91_Php

	partial void EnterRule_synpred95_Php_fragment();
	partial void LeaveRule_synpred95_Php_fragment();

	// $ANTLR start synpred95_Php
	private void synpred95_Php_fragment()
	{
		EnterRule_synpred95_Php_fragment();
		EnterRule("synpred95_Php_fragment", 173);
		var retval = new Antlr3AstNode("synpred95_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:273:20: ( Or weakLogicalXor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:273:20: Or weakLogicalXor
			{
			DebugLocation(273, 20);
			Match(input,Or,Follow._Or_in_synpred95_Php1408); if (state.failed) return;
			DebugLocation(273, 23);
			PushFollow(Follow._weakLogicalXor_in_synpred95_Php1410);
			weakLogicalXor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred95_Php_fragment", 173);
			LeaveRule("synpred95_Php_fragment", 173);
			LeaveRule_synpred95_Php_fragment();
		}
	}
	// $ANTLR end synpred95_Php

	partial void EnterRule_synpred96_Php_fragment();
	partial void LeaveRule_synpred96_Php_fragment();

	// $ANTLR start synpred96_Php
	private void synpred96_Php_fragment()
	{
		EnterRule_synpred96_Php_fragment();
		EnterRule("synpred96_Php_fragment", 174);
		var retval = new Antlr3AstNode("synpred96_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:277:20: ( Xor weakLogicalAnd )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:277:20: Xor weakLogicalAnd
			{
			DebugLocation(277, 20);
			Match(input,Xor,Follow._Xor_in_synpred96_Php1426); if (state.failed) return;
			DebugLocation(277, 24);
			PushFollow(Follow._weakLogicalAnd_in_synpred96_Php1428);
			weakLogicalAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred96_Php_fragment", 174);
			LeaveRule("synpred96_Php_fragment", 174);
			LeaveRule_synpred96_Php_fragment();
		}
	}
	// $ANTLR end synpred96_Php

	partial void EnterRule_synpred97_Php_fragment();
	partial void LeaveRule_synpred97_Php_fragment();

	// $ANTLR start synpred97_Php
	private void synpred97_Php_fragment()
	{
		EnterRule_synpred97_Php_fragment();
		EnterRule("synpred97_Php_fragment", 175);
		var retval = new Antlr3AstNode("synpred97_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:281:16: ( And assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:281:16: And assignment
			{
			DebugLocation(281, 16);
			Match(input,And,Follow._And_in_synpred97_Php1445); if (state.failed) return;
			DebugLocation(281, 20);
			PushFollow(Follow._assignment_in_synpred97_Php1447);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred97_Php_fragment", 175);
			LeaveRule("synpred97_Php_fragment", 175);
			LeaveRule_synpred97_Php_fragment();
		}
	}
	// $ANTLR end synpred97_Php

	partial void EnterRule_synpred99_Php_fragment();
	partial void LeaveRule_synpred99_Php_fragment();

	// $ANTLR start synpred99_Php
	private void synpred99_Php_fragment()
	{
		EnterRule_synpred99_Php_fragment();
		EnterRule("synpred99_Php_fragment", 177);
		var retval = new Antlr3AstNode("synpred99_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:285:4: ( listVariables ( Equals | AsignmentOperator ) assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:285:4: listVariables ( Equals | AsignmentOperator ) assignment
			{
			DebugLocation(285, 4);
			PushFollow(Follow._listVariables_in_synpred99_Php1460);
			listVariables();
			PopFollow();
			if (state.failed) return;
			DebugLocation(285, 18);
			if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(285, 47);
			PushFollow(Follow._assignment_in_synpred99_Php1470);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Php_fragment", 177);
			LeaveRule("synpred99_Php_fragment", 177);
			LeaveRule_synpred99_Php_fragment();
		}
	}
	// $ANTLR end synpred99_Php

	partial void EnterRule_synpred105_Php_fragment();
	partial void LeaveRule_synpred105_Php_fragment();

	// $ANTLR start synpred105_Php
	private void synpred105_Php_fragment()
	{
		EnterRule_synpred105_Php_fragment();
		EnterRule("synpred105_Php_fragment", 183);
		var retval = new Antlr3AstNode("synpred105_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:295:4: ( logicalOr QuestionMark ( expression )? Colon expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:295:4: logicalOr QuestionMark ( expression )? Colon expression
			{
			DebugLocation(295, 4);
			PushFollow(Follow._logicalOr_in_synpred105_Php1518);
			logicalOr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(295, 14);
			Match(input,QuestionMark,Follow._QuestionMark_in_synpred105_Php1520); if (state.failed) return;
			DebugLocation(295, 27);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:295:27: ( expression )?
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			int LA162_1 = input.LA(1);

			if ((LA162_1==Ampersand||LA162_1==ArrayType||LA162_1==Bang||(LA162_1>=BoolType && LA162_1<=BooleanType)||LA162_1==Clone||LA162_1==Die||(LA162_1>=DoubleQuotedString && LA162_1<=DoubleType)||LA162_1==Empty||(LA162_1>=Eval && LA162_1<=Exit)||LA162_1==False||LA162_1==FloatType||LA162_1==Function||LA162_1==HaltCompiler||LA162_1==HereDoc||(LA162_1>=Include && LA162_1<=IncrementOperator)||(LA162_1>=IntType && LA162_1<=IntegerType)||(LA162_1>=Isset && LA162_1<=List)||LA162_1==Minus||(LA162_1>=New && LA162_1<=Null)||LA162_1==ObjectType||(LA162_1>=OpenRoundBracket && LA162_1<=OpenSquareBracket)||LA162_1==Plus||(LA162_1>=Real && LA162_1<=RequireOnce)||LA162_1==SingleQuotedString||(LA162_1>=Static && LA162_1<=SuppressWarnings)||(LA162_1>=Tilde && LA162_1<=True)||LA162_1==UnquotedString||LA162_1==UnsetType||LA162_1==VariableName||(LA162_1>=128 && LA162_1<=129)))
			{
				alt162 = 1;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:295:27: expression
				{
				DebugLocation(295, 27);
				PushFollow(Follow._expression_in_synpred105_Php1522);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(295, 39);
			Match(input,Colon,Follow._Colon_in_synpred105_Php1525); if (state.failed) return;
			DebugLocation(295, 45);
			PushFollow(Follow._expression_in_synpred105_Php1527);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred105_Php_fragment", 183);
			LeaveRule("synpred105_Php_fragment", 183);
			LeaveRule_synpred105_Php_fragment();
		}
	}
	// $ANTLR end synpred105_Php

	partial void EnterRule_synpred106_Php_fragment();
	partial void LeaveRule_synpred106_Php_fragment();

	// $ANTLR start synpred106_Php
	private void synpred106_Php_fragment()
	{
		EnterRule_synpred106_Php_fragment();
		EnterRule("synpred106_Php_fragment", 184);
		var retval = new Antlr3AstNode("synpred106_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:300:16: ( LogicalOr logicalAnd )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:300:16: LogicalOr logicalAnd
			{
			DebugLocation(300, 16);
			Match(input,LogicalOr,Follow._LogicalOr_in_synpred106_Php1547); if (state.failed) return;
			DebugLocation(300, 26);
			PushFollow(Follow._logicalAnd_in_synpred106_Php1549);
			logicalAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred106_Php_fragment", 184);
			LeaveRule("synpred106_Php_fragment", 184);
			LeaveRule_synpred106_Php_fragment();
		}
	}
	// $ANTLR end synpred106_Php

	partial void EnterRule_synpred107_Php_fragment();
	partial void LeaveRule_synpred107_Php_fragment();

	// $ANTLR start synpred107_Php
	private void synpred107_Php_fragment()
	{
		EnterRule_synpred107_Php_fragment();
		EnterRule("synpred107_Php_fragment", 185);
		var retval = new Antlr3AstNode("synpred107_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:304:15: ( LogicalAnd bitwiseOr )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:304:15: LogicalAnd bitwiseOr
			{
			DebugLocation(304, 15);
			Match(input,LogicalAnd,Follow._LogicalAnd_in_synpred107_Php1565); if (state.failed) return;
			DebugLocation(304, 26);
			PushFollow(Follow._bitwiseOr_in_synpred107_Php1567);
			bitwiseOr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred107_Php_fragment", 185);
			LeaveRule("synpred107_Php_fragment", 185);
			LeaveRule_synpred107_Php_fragment();
		}
	}
	// $ANTLR end synpred107_Php

	partial void EnterRule_synpred108_Php_fragment();
	partial void LeaveRule_synpred108_Php_fragment();

	// $ANTLR start synpred108_Php
	private void synpred108_Php_fragment()
	{
		EnterRule_synpred108_Php_fragment();
		EnterRule("synpred108_Php_fragment", 186);
		var retval = new Antlr3AstNode("synpred108_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:308:16: ( Pipe bitwiseXor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:308:16: Pipe bitwiseXor
			{
			DebugLocation(308, 16);
			Match(input,Pipe,Follow._Pipe_in_synpred108_Php1584); if (state.failed) return;
			DebugLocation(308, 21);
			PushFollow(Follow._bitwiseXor_in_synpred108_Php1586);
			bitwiseXor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred108_Php_fragment", 186);
			LeaveRule("synpred108_Php_fragment", 186);
			LeaveRule_synpred108_Php_fragment();
		}
	}
	// $ANTLR end synpred108_Php

	partial void EnterRule_synpred109_Php_fragment();
	partial void LeaveRule_synpred109_Php_fragment();

	// $ANTLR start synpred109_Php
	private void synpred109_Php_fragment()
	{
		EnterRule_synpred109_Php_fragment();
		EnterRule("synpred109_Php_fragment", 187);
		var retval = new Antlr3AstNode("synpred109_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:312:16: ( Hat bitWiseAnd )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:312:16: Hat bitWiseAnd
			{
			DebugLocation(312, 16);
			Match(input,Hat,Follow._Hat_in_synpred109_Php1603); if (state.failed) return;
			DebugLocation(312, 20);
			PushFollow(Follow._bitWiseAnd_in_synpred109_Php1605);
			bitWiseAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred109_Php_fragment", 187);
			LeaveRule("synpred109_Php_fragment", 187);
			LeaveRule_synpred109_Php_fragment();
		}
	}
	// $ANTLR end synpred109_Php

	partial void EnterRule_synpred110_Php_fragment();
	partial void LeaveRule_synpred110_Php_fragment();

	// $ANTLR start synpred110_Php
	private void synpred110_Php_fragment()
	{
		EnterRule_synpred110_Php_fragment();
		EnterRule("synpred110_Php_fragment", 188);
		var retval = new Antlr3AstNode("synpred110_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:316:19: ( Ampersand equalityCheck )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:316:19: Ampersand equalityCheck
			{
			DebugLocation(316, 19);
			Match(input,Ampersand,Follow._Ampersand_in_synpred110_Php1621); if (state.failed) return;
			DebugLocation(316, 29);
			PushFollow(Follow._equalityCheck_in_synpred110_Php1623);
			equalityCheck();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred110_Php_fragment", 188);
			LeaveRule("synpred110_Php_fragment", 188);
			LeaveRule_synpred110_Php_fragment();
		}
	}
	// $ANTLR end synpred110_Php

	partial void EnterRule_synpred111_Php_fragment();
	partial void LeaveRule_synpred111_Php_fragment();

	// $ANTLR start synpred111_Php
	private void synpred111_Php_fragment()
	{
		EnterRule_synpred111_Php_fragment();
		EnterRule("synpred111_Php_fragment", 189);
		var retval = new Antlr3AstNode("synpred111_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:320:22: ( EqualityOperator comparisionCheck )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:320:22: EqualityOperator comparisionCheck
			{
			DebugLocation(320, 22);
			Match(input,EqualityOperator,Follow._EqualityOperator_in_synpred111_Php1639); if (state.failed) return;
			DebugLocation(320, 39);
			PushFollow(Follow._comparisionCheck_in_synpred111_Php1641);
			comparisionCheck();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred111_Php_fragment", 189);
			LeaveRule("synpred111_Php_fragment", 189);
			LeaveRule_synpred111_Php_fragment();
		}
	}
	// $ANTLR end synpred111_Php

	partial void EnterRule_synpred112_Php_fragment();
	partial void LeaveRule_synpred112_Php_fragment();

	// $ANTLR start synpred112_Php
	private void synpred112_Php_fragment()
	{
		EnterRule_synpred112_Php_fragment();
		EnterRule("synpred112_Php_fragment", 190);
		var retval = new Antlr3AstNode("synpred112_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:324:18: ( ComparisionOperator bitWiseShift )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:324:18: ComparisionOperator bitWiseShift
			{
			DebugLocation(324, 18);
			Match(input,ComparisionOperator,Follow._ComparisionOperator_in_synpred112_Php1658); if (state.failed) return;
			DebugLocation(324, 38);
			PushFollow(Follow._bitWiseShift_in_synpred112_Php1660);
			bitWiseShift();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred112_Php_fragment", 190);
			LeaveRule("synpred112_Php_fragment", 190);
			LeaveRule_synpred112_Php_fragment();
		}
	}
	// $ANTLR end synpred112_Php

	partial void EnterRule_synpred113_Php_fragment();
	partial void LeaveRule_synpred113_Php_fragment();

	// $ANTLR start synpred113_Php
	private void synpred113_Php_fragment()
	{
		EnterRule_synpred113_Php_fragment();
		EnterRule("synpred113_Php_fragment", 191);
		var retval = new Antlr3AstNode("synpred113_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:328:14: ( ShiftOperator addition )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:328:14: ShiftOperator addition
			{
			DebugLocation(328, 14);
			Match(input,ShiftOperator,Follow._ShiftOperator_in_synpred113_Php1676); if (state.failed) return;
			DebugLocation(328, 28);
			PushFollow(Follow._addition_in_synpred113_Php1678);
			addition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred113_Php_fragment", 191);
			LeaveRule("synpred113_Php_fragment", 191);
			LeaveRule_synpred113_Php_fragment();
		}
	}
	// $ANTLR end synpred113_Php

	partial void EnterRule_synpred116_Php_fragment();
	partial void LeaveRule_synpred116_Php_fragment();

	// $ANTLR start synpred116_Php
	private void synpred116_Php_fragment()
	{
		EnterRule_synpred116_Php_fragment();
		EnterRule("synpred116_Php_fragment", 194);
		var retval = new Antlr3AstNode("synpred116_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:332:20: ( ( Plus | Minus | Dot ) multiplication )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:332:20: ( Plus | Minus | Dot ) multiplication
			{
			DebugLocation(332, 20);
			if (input.LA(1)==Dot||input.LA(1)==Minus||input.LA(1)==Plus)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(332, 41);
			PushFollow(Follow._multiplication_in_synpred116_Php1707);
			multiplication();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred116_Php_fragment", 194);
			LeaveRule("synpred116_Php_fragment", 194);
			LeaveRule_synpred116_Php_fragment();
		}
	}
	// $ANTLR end synpred116_Php

	partial void EnterRule_synpred119_Php_fragment();
	partial void LeaveRule_synpred119_Php_fragment();

	// $ANTLR start synpred119_Php
	private void synpred119_Php_fragment()
	{
		EnterRule_synpred119_Php_fragment();
		EnterRule("synpred119_Php_fragment", 197);
		var retval = new Antlr3AstNode("synpred119_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:336:16: ( ( Asterisk | Forwardslash | Percent ) logicalNot )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:336:16: ( Asterisk | Forwardslash | Percent ) logicalNot
			{
			DebugLocation(336, 16);
			if (input.LA(1)==Asterisk||input.LA(1)==Forwardslash||input.LA(1)==Percent)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(336, 52);
			PushFollow(Follow._logicalNot_in_synpred119_Php1735);
			logicalNot();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred119_Php_fragment", 197);
			LeaveRule("synpred119_Php_fragment", 197);
			LeaveRule_synpred119_Php_fragment();
		}
	}
	// $ANTLR end synpred119_Php

	partial void EnterRule_synpred121_Php_fragment();
	partial void LeaveRule_synpred121_Php_fragment();

	// $ANTLR start synpred121_Php
	private void synpred121_Php_fragment()
	{
		EnterRule_synpred121_Php_fragment();
		EnterRule("synpred121_Php_fragment", 199);
		var retval = new Antlr3AstNode("synpred121_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:345:18: ( Instanceof negateOrCast )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:345:18: Instanceof negateOrCast
			{
			DebugLocation(345, 18);
			Match(input,Instanceof,Follow._Instanceof_in_synpred121_Php1769); if (state.failed) return;
			DebugLocation(345, 29);
			PushFollow(Follow._negateOrCast_in_synpred121_Php1771);
			negateOrCast();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_Php_fragment", 199);
			LeaveRule("synpred121_Php_fragment", 199);
			LeaveRule_synpred121_Php_fragment();
		}
	}
	// $ANTLR end synpred121_Php

	partial void EnterRule_synpred124_Php_fragment();
	partial void LeaveRule_synpred124_Php_fragment();

	// $ANTLR start synpred124_Php
	private void synpred124_Php_fragment()
	{
		EnterRule_synpred124_Php_fragment();
		EnterRule("synpred124_Php_fragment", 202);
		var retval = new Antlr3AstNode("synpred124_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:349:4: ( ( Tilde | Minus | SuppressWarnings ) increment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:349:4: ( Tilde | Minus | SuppressWarnings ) increment
			{
			DebugLocation(349, 4);
			if (input.LA(1)==Minus||input.LA(1)==SuppressWarnings||input.LA(1)==Tilde)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(349, 39);
			PushFollow(Follow._increment_in_synpred124_Php1796);
			increment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred124_Php_fragment", 202);
			LeaveRule("synpred124_Php_fragment", 202);
			LeaveRule_synpred124_Php_fragment();
		}
	}
	// $ANTLR end synpred124_Php

	partial void EnterRule_synpred125_Php_fragment();
	partial void LeaveRule_synpred125_Php_fragment();

	// $ANTLR start synpred125_Php
	private void synpred125_Php_fragment()
	{
		EnterRule_synpred125_Php_fragment();
		EnterRule("synpred125_Php_fragment", 203);
		var retval = new Antlr3AstNode("synpred125_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:350:4: ( OpenRoundBracket primitiveType CloseRoundBracket increment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:350:4: OpenRoundBracket primitiveType CloseRoundBracket increment
			{
			DebugLocation(350, 4);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred125_Php1801); if (state.failed) return;
			DebugLocation(350, 21);
			PushFollow(Follow._primitiveType_in_synpred125_Php1803);
			primitiveType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(350, 35);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred125_Php1805); if (state.failed) return;
			DebugLocation(350, 53);
			PushFollow(Follow._increment_in_synpred125_Php1807);
			increment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred125_Php_fragment", 203);
			LeaveRule("synpred125_Php_fragment", 203);
			LeaveRule_synpred125_Php_fragment();
		}
	}
	// $ANTLR end synpred125_Php

	partial void EnterRule_synpred137_Php_fragment();
	partial void LeaveRule_synpred137_Php_fragment();

	// $ANTLR start synpred137_Php
	private void synpred137_Php_fragment()
	{
		EnterRule_synpred137_Php_fragment();
		EnterRule("synpred137_Php_fragment", 215);
		var retval = new Antlr3AstNode("synpred137_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:361:4: ( name IncrementOperator )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:361:4: name IncrementOperator
			{
			DebugLocation(361, 4);
			PushFollow(Follow._name_in_synpred137_Php1882);
			name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(361, 9);
			Match(input,IncrementOperator,Follow._IncrementOperator_in_synpred137_Php1884); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred137_Php_fragment", 215);
			LeaveRule("synpred137_Php_fragment", 215);
			LeaveRule_synpred137_Php_fragment();
		}
	}
	// $ANTLR end synpred137_Php

	partial void EnterRule_synpred139_Php_fragment();
	partial void LeaveRule_synpred139_Php_fragment();

	// $ANTLR start synpred139_Php
	private void synpred139_Php_fragment()
	{
		EnterRule_synpred139_Php_fragment();
		EnterRule("synpred139_Php_fragment", 217);
		var retval = new Antlr3AstNode("synpred139_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:362:4: ( listVariables ( Equals | AsignmentOperator ) assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:362:4: listVariables ( Equals | AsignmentOperator ) assignment
			{
			DebugLocation(362, 4);
			PushFollow(Follow._listVariables_in_synpred139_Php1889);
			listVariables();
			PopFollow();
			if (state.failed) return;
			DebugLocation(362, 18);
			if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(362, 47);
			PushFollow(Follow._assignment_in_synpred139_Php1899);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred139_Php_fragment", 217);
			LeaveRule("synpred139_Php_fragment", 217);
			LeaveRule_synpred139_Php_fragment();
		}
	}
	// $ANTLR end synpred139_Php

	partial void EnterRule_synpred140_Php_fragment();
	partial void LeaveRule_synpred140_Php_fragment();

	// $ANTLR start synpred140_Php
	private void synpred140_Php_fragment()
	{
		EnterRule_synpred140_Php_fragment();
		EnterRule("synpred140_Php_fragment", 218);
		var retval = new Antlr3AstNode("synpred140_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:363:4: ( newOrClone )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:363:4: newOrClone
			{
			DebugLocation(363, 4);
			PushFollow(Follow._newOrClone_in_synpred140_Php1904);
			newOrClone();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred140_Php_fragment", 218);
			LeaveRule("synpred140_Php_fragment", 218);
			LeaveRule_synpred140_Php_fragment();
		}
	}
	// $ANTLR end synpred140_Php

	partial void EnterRule_synpred141_Php_fragment();
	partial void LeaveRule_synpred141_Php_fragment();

	// $ANTLR start synpred141_Php
	private void synpred141_Php_fragment()
	{
		EnterRule_synpred141_Php_fragment();
		EnterRule("synpred141_Php_fragment", 219);
		var retval = new Antlr3AstNode("synpred141_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:9: ( nameOrFunctionCall )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:9: nameOrFunctionCall
			{
			DebugLocation(371, 9);
			PushFollow(Follow._nameOrFunctionCall_in_synpred141_Php1938);
			nameOrFunctionCall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred141_Php_fragment", 219);
			LeaveRule("synpred141_Php_fragment", 219);
			LeaveRule_synpred141_Php_fragment();
		}
	}
	// $ANTLR end synpred141_Php

	partial void EnterRule_synpred142_Php_fragment();
	partial void LeaveRule_synpred142_Php_fragment();

	// $ANTLR start synpred142_Php
	private void synpred142_Php_fragment()
	{
		EnterRule_synpred142_Php_fragment();
		EnterRule("synpred142_Php_fragment", 220);
		var retval = new Antlr3AstNode("synpred142_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:4: ( New ( nameOrFunctionCall | constantOrStaticAccessor ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:4: New ( nameOrFunctionCall | constantOrStaticAccessor )
			{
			DebugLocation(371, 4);
			Match(input,New,Follow._New_in_synpred142_Php1935); if (state.failed) return;
			DebugLocation(371, 8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:8: ( nameOrFunctionCall | constantOrStaticAccessor )
			int alt163=2;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred141_Php_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 163, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred141_Php_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 163, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred141_Php_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 163, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred141_Php_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 163, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				alt163 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 163, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:9: nameOrFunctionCall
				{
				DebugLocation(371, 9);
				PushFollow(Follow._nameOrFunctionCall_in_synpred142_Php1938);
				nameOrFunctionCall();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:371:30: constantOrStaticAccessor
				{
				DebugLocation(371, 30);
				PushFollow(Follow._constantOrStaticAccessor_in_synpred142_Php1942);
				constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(163); }


			}

		}
		finally
		{
			TraceOut("synpred142_Php_fragment", 220);
			LeaveRule("synpred142_Php_fragment", 220);
			LeaveRule_synpred142_Php_fragment();
		}
	}
	// $ANTLR end synpred142_Php

	partial void EnterRule_synpred143_Php_fragment();
	partial void LeaveRule_synpred143_Php_fragment();

	// $ANTLR start synpred143_Php
	private void synpred143_Php_fragment()
	{
		EnterRule_synpred143_Php_fragment();
		EnterRule("synpred143_Php_fragment", 221);
		var retval = new Antlr3AstNode("synpred143_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:372:15: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:372:15: functionArguments
			{
			DebugLocation(372, 15);
			PushFollow(Follow._functionArguments_in_synpred143_Php1952);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred143_Php_fragment", 221);
			LeaveRule("synpred143_Php_fragment", 221);
			LeaveRule_synpred143_Php_fragment();
		}
	}
	// $ANTLR end synpred143_Php

	partial void EnterRule_synpred144_Php_fragment();
	partial void LeaveRule_synpred144_Php_fragment();

	// $ANTLR start synpred144_Php
	private void synpred144_Php_fragment()
	{
		EnterRule_synpred144_Php_fragment();
		EnterRule("synpred144_Php_fragment", 222);
		var retval = new Antlr3AstNode("synpred144_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:372:4: ( New Static ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:372:4: New Static ( functionArguments )?
			{
			DebugLocation(372, 4);
			Match(input,New,Follow._New_in_synpred144_Php1948); if (state.failed) return;
			DebugLocation(372, 8);
			Match(input,Static,Follow._Static_in_synpred144_Php1950); if (state.failed) return;
			DebugLocation(372, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:372:15: ( functionArguments )?
			int alt164=2;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, false);
			int LA164_1 = input.LA(1);

			if ((LA164_1==OpenRoundBracket))
			{
				alt164 = 1;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:372:15: functionArguments
				{
				DebugLocation(372, 15);
				PushFollow(Follow._functionArguments_in_synpred144_Php1952);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(164); }


			}

		}
		finally
		{
			TraceOut("synpred144_Php_fragment", 222);
			LeaveRule("synpred144_Php_fragment", 222);
			LeaveRule_synpred144_Php_fragment();
		}
	}
	// $ANTLR end synpred144_Php

	partial void EnterRule_synpred146_Php_fragment();
	partial void LeaveRule_synpred146_Php_fragment();

	// $ANTLR start synpred146_Php
	private void synpred146_Php_fragment()
	{
		EnterRule_synpred146_Php_fragment();
		EnterRule("synpred146_Php_fragment", 224);
		var retval = new Antlr3AstNode("synpred146_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:378:4: ( reference )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:378:4: reference
			{
			DebugLocation(378, 4);
			PushFollow(Follow._reference_in_synpred146_Php1976);
			reference();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred146_Php_fragment", 224);
			LeaveRule("synpred146_Php_fragment", 224);
			LeaveRule_synpred146_Php_fragment();
		}
	}
	// $ANTLR end synpred146_Php

	partial void EnterRule_synpred154_Php_fragment();
	partial void LeaveRule_synpred154_Php_fragment();

	// $ANTLR start synpred154_Php
	private void synpred154_Php_fragment()
	{
		EnterRule_synpred154_Php_fragment();
		EnterRule("synpred154_Php_fragment", 232);
		var retval = new Antlr3AstNode("synpred154_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:388:5: ( keyValuePair )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:388:5: keyValuePair
			{
			DebugLocation(388, 5);
			PushFollow(Follow._keyValuePair_in_synpred154_Php2045);
			keyValuePair();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred154_Php_fragment", 232);
			LeaveRule("synpred154_Php_fragment", 232);
			LeaveRule_synpred154_Php_fragment();
		}
	}
	// $ANTLR end synpred154_Php

	partial void EnterRule_synpred175_Php_fragment();
	partial void LeaveRule_synpred175_Php_fragment();

	// $ANTLR start synpred175_Php
	private void synpred175_Php_fragment()
	{
		EnterRule_synpred175_Php_fragment();
		EnterRule("synpred175_Php_fragment", 253);
		var retval = new Antlr3AstNode("synpred175_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:425:10: ( expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:425:10: expression
			{
			DebugLocation(425, 10);
			PushFollow(Follow._expression_in_synpred175_Php2227);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred175_Php_fragment", 253);
			LeaveRule("synpred175_Php_fragment", 253);
			LeaveRule_synpred175_Php_fragment();
		}
	}
	// $ANTLR end synpred175_Php

	partial void EnterRule_synpred177_Php_fragment();
	partial void LeaveRule_synpred177_Php_fragment();

	// $ANTLR start synpred177_Php
	private void synpred177_Php_fragment()
	{
		EnterRule_synpred177_Php_fragment();
		EnterRule("synpred177_Php_fragment", 255);
		var retval = new Antlr3AstNode("synpred177_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:6: ( New )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:6: New
			{
			DebugLocation(426, 6);
			Match(input,New,Follow._New_in_synpred177_Php2242); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred177_Php_fragment", 255);
			LeaveRule("synpred177_Php_fragment", 255);
			LeaveRule_synpred177_Php_fragment();
		}
	}
	// $ANTLR end synpred177_Php

	partial void EnterRule_synpred178_Php_fragment();
	partial void LeaveRule_synpred178_Php_fragment();

	// $ANTLR start synpred178_Php
	private void synpred178_Php_fragment()
	{
		EnterRule_synpred178_Php_fragment();
		EnterRule("synpred178_Php_fragment", 256);
		var retval = new Antlr3AstNode("synpred178_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:10: ( Clone )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:10: Clone
			{
			DebugLocation(426, 10);
			Match(input,Clone,Follow._Clone_in_synpred178_Php2244); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred178_Php_fragment", 256);
			LeaveRule("synpred178_Php_fragment", 256);
			LeaveRule_synpred178_Php_fragment();
		}
	}
	// $ANTLR end synpred178_Php

	partial void EnterRule_synpred194_Php_fragment();
	partial void LeaveRule_synpred194_Php_fragment();

	// $ANTLR start synpred194_Php
	private void synpred194_Php_fragment()
	{
		EnterRule_synpred194_Php_fragment();
		EnterRule("synpred194_Php_fragment", 272);
		var retval = new Antlr3AstNode("synpred194_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:105: ( Function )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:105: Function
			{
			DebugLocation(426, 105);
			Match(input,Function,Follow._Function_in_synpred194_Php2276); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred194_Php_fragment", 272);
			LeaveRule("synpred194_Php_fragment", 272);
			LeaveRule_synpred194_Php_fragment();
		}
	}
	// $ANTLR end synpred194_Php

	partial void EnterRule_synpred201_Php_fragment();
	partial void LeaveRule_synpred201_Php_fragment();

	// $ANTLR start synpred201_Php
	private void synpred201_Php_fragment()
	{
		EnterRule_synpred201_Php_fragment();
		EnterRule("synpred201_Php_fragment", 279);
		var retval = new Antlr3AstNode("synpred201_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:154: ( Static )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:154: Static
			{
			DebugLocation(426, 154);
			Match(input,Static,Follow._Static_in_synpred201_Php2290); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred201_Php_fragment", 279);
			LeaveRule("synpred201_Php_fragment", 279);
			LeaveRule_synpred201_Php_fragment();
		}
	}
	// $ANTLR end synpred201_Php

	partial void EnterRule_synpred206_Php_fragment();
	partial void LeaveRule_synpred206_Php_fragment();

	// $ANTLR start synpred206_Php
	private void synpred206_Php_fragment()
	{
		EnterRule_synpred206_Php_fragment();
		EnterRule("synpred206_Php_fragment", 284);
		var retval = new Antlr3AstNode("synpred206_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:183: ( Null )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:183: Null
			{
			DebugLocation(426, 183);
			Match(input,Null,Follow._Null_in_synpred206_Php2300); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred206_Php_fragment", 284);
			LeaveRule("synpred206_Php_fragment", 284);
			LeaveRule_synpred206_Php_fragment();
		}
	}
	// $ANTLR end synpred206_Php

	partial void EnterRule_synpred207_Php_fragment();
	partial void LeaveRule_synpred207_Php_fragment();

	// $ANTLR start synpred207_Php
	private void synpred207_Php_fragment()
	{
		EnterRule_synpred207_Php_fragment();
		EnterRule("synpred207_Php_fragment", 285);
		var retval = new Antlr3AstNode("synpred207_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:188: ( List )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:188: List
			{
			DebugLocation(426, 188);
			Match(input,List,Follow._List_in_synpred207_Php2302); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred207_Php_fragment", 285);
			LeaveRule("synpred207_Php_fragment", 285);
			LeaveRule_synpred207_Php_fragment();
		}
	}
	// $ANTLR end synpred207_Php

	partial void EnterRule_synpred217_Php_fragment();
	partial void LeaveRule_synpred217_Php_fragment();

	// $ANTLR start synpred217_Php
	private void synpred217_Php_fragment()
	{
		EnterRule_synpred217_Php_fragment();
		EnterRule("synpred217_Php_fragment", 295);
		var retval = new Antlr3AstNode("synpred217_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:254: ( Require )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:254: Require
			{
			DebugLocation(426, 254);
			Match(input,Require,Follow._Require_in_synpred217_Php2322); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred217_Php_fragment", 295);
			LeaveRule("synpred217_Php_fragment", 295);
			LeaveRule_synpred217_Php_fragment();
		}
	}
	// $ANTLR end synpred217_Php

	partial void EnterRule_synpred218_Php_fragment();
	partial void LeaveRule_synpred218_Php_fragment();

	// $ANTLR start synpred218_Php
	private void synpred218_Php_fragment()
	{
		EnterRule_synpred218_Php_fragment();
		EnterRule("synpred218_Php_fragment", 296);
		var retval = new Antlr3AstNode("synpred218_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:262: ( RequireOnce )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:262: RequireOnce
			{
			DebugLocation(426, 262);
			Match(input,RequireOnce,Follow._RequireOnce_in_synpred218_Php2324); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred218_Php_fragment", 296);
			LeaveRule("synpred218_Php_fragment", 296);
			LeaveRule_synpred218_Php_fragment();
		}
	}
	// $ANTLR end synpred218_Php

	partial void EnterRule_synpred219_Php_fragment();
	partial void LeaveRule_synpred219_Php_fragment();

	// $ANTLR start synpred219_Php
	private void synpred219_Php_fragment()
	{
		EnterRule_synpred219_Php_fragment();
		EnterRule("synpred219_Php_fragment", 297);
		var retval = new Antlr3AstNode("synpred219_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:274: ( Include )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:274: Include
			{
			DebugLocation(426, 274);
			Match(input,Include,Follow._Include_in_synpred219_Php2326); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred219_Php_fragment", 297);
			LeaveRule("synpred219_Php_fragment", 297);
			LeaveRule_synpred219_Php_fragment();
		}
	}
	// $ANTLR end synpred219_Php

	partial void EnterRule_synpred220_Php_fragment();
	partial void LeaveRule_synpred220_Php_fragment();

	// $ANTLR start synpred220_Php
	private void synpred220_Php_fragment()
	{
		EnterRule_synpred220_Php_fragment();
		EnterRule("synpred220_Php_fragment", 298);
		var retval = new Antlr3AstNode("synpred220_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:282: ( IncludeOnce )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:282: IncludeOnce
			{
			DebugLocation(426, 282);
			Match(input,IncludeOnce,Follow._IncludeOnce_in_synpred220_Php2328); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred220_Php_fragment", 298);
			LeaveRule("synpred220_Php_fragment", 298);
			LeaveRule_synpred220_Php_fragment();
		}
	}
	// $ANTLR end synpred220_Php

	partial void EnterRule_synpred224_Php_fragment();
	partial void LeaveRule_synpred224_Php_fragment();

	// $ANTLR start synpred224_Php
	private void synpred224_Php_fragment()
	{
		EnterRule_synpred224_Php_fragment();
		EnterRule("synpred224_Php_fragment", 302);
		var retval = new Antlr3AstNode("synpred224_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:319: ( True )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:319: True
			{
			DebugLocation(426, 319);
			Match(input,True,Follow._True_in_synpred224_Php2336); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred224_Php_fragment", 302);
			LeaveRule("synpred224_Php_fragment", 302);
			LeaveRule_synpred224_Php_fragment();
		}
	}
	// $ANTLR end synpred224_Php

	partial void EnterRule_synpred225_Php_fragment();
	partial void LeaveRule_synpred225_Php_fragment();

	// $ANTLR start synpred225_Php
	private void synpred225_Php_fragment()
	{
		EnterRule_synpred225_Php_fragment();
		EnterRule("synpred225_Php_fragment", 303);
		var retval = new Antlr3AstNode("synpred225_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:324: ( False )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:324: False
			{
			DebugLocation(426, 324);
			Match(input,False,Follow._False_in_synpred225_Php2338); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred225_Php_fragment", 303);
			LeaveRule("synpred225_Php_fragment", 303);
			LeaveRule_synpred225_Php_fragment();
		}
	}
	// $ANTLR end synpred225_Php

	partial void EnterRule_synpred226_Php_fragment();
	partial void LeaveRule_synpred226_Php_fragment();

	// $ANTLR start synpred226_Php
	private void synpred226_Php_fragment()
	{
		EnterRule_synpred226_Php_fragment();
		EnterRule("synpred226_Php_fragment", 304);
		var retval = new Antlr3AstNode("synpred226_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:330: ( HaltCompiler )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:330: HaltCompiler
			{
			DebugLocation(426, 330);
			Match(input,HaltCompiler,Follow._HaltCompiler_in_synpred226_Php2340); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred226_Php_fragment", 304);
			LeaveRule("synpred226_Php_fragment", 304);
			LeaveRule_synpred226_Php_fragment();
		}
	}
	// $ANTLR end synpred226_Php

	partial void EnterRule_synpred227_Php_fragment();
	partial void LeaveRule_synpred227_Php_fragment();

	// $ANTLR start synpred227_Php
	private void synpred227_Php_fragment()
	{
		EnterRule_synpred227_Php_fragment();
		EnterRule("synpred227_Php_fragment", 305);
		var retval = new Antlr3AstNode("synpred227_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:343: ( Die )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:343: Die
			{
			DebugLocation(426, 343);
			Match(input,Die,Follow._Die_in_synpred227_Php2342); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred227_Php_fragment", 305);
			LeaveRule("synpred227_Php_fragment", 305);
			LeaveRule_synpred227_Php_fragment();
		}
	}
	// $ANTLR end synpred227_Php

	partial void EnterRule_synpred228_Php_fragment();
	partial void LeaveRule_synpred228_Php_fragment();

	// $ANTLR start synpred228_Php
	private void synpred228_Php_fragment()
	{
		EnterRule_synpred228_Php_fragment();
		EnterRule("synpred228_Php_fragment", 306);
		var retval = new Antlr3AstNode("synpred228_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:347: ( Empty )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:347: Empty
			{
			DebugLocation(426, 347);
			Match(input,Empty,Follow._Empty_in_synpred228_Php2344); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred228_Php_fragment", 306);
			LeaveRule("synpred228_Php_fragment", 306);
			LeaveRule_synpred228_Php_fragment();
		}
	}
	// $ANTLR end synpred228_Php

	partial void EnterRule_synpred229_Php_fragment();
	partial void LeaveRule_synpred229_Php_fragment();

	// $ANTLR start synpred229_Php
	private void synpred229_Php_fragment()
	{
		EnterRule_synpred229_Php_fragment();
		EnterRule("synpred229_Php_fragment", 307);
		var retval = new Antlr3AstNode("synpred229_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:353: ( Exit )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:353: Exit
			{
			DebugLocation(426, 353);
			Match(input,Exit,Follow._Exit_in_synpred229_Php2346); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred229_Php_fragment", 307);
			LeaveRule("synpred229_Php_fragment", 307);
			LeaveRule_synpred229_Php_fragment();
		}
	}
	// $ANTLR end synpred229_Php

	partial void EnterRule_synpred230_Php_fragment();
	partial void LeaveRule_synpred230_Php_fragment();

	// $ANTLR start synpred230_Php
	private void synpred230_Php_fragment()
	{
		EnterRule_synpred230_Php_fragment();
		EnterRule("synpred230_Php_fragment", 308);
		var retval = new Antlr3AstNode("synpred230_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:358: ( Eval )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:358: Eval
			{
			DebugLocation(426, 358);
			Match(input,Eval,Follow._Eval_in_synpred230_Php2348); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred230_Php_fragment", 308);
			LeaveRule("synpred230_Php_fragment", 308);
			LeaveRule_synpred230_Php_fragment();
		}
	}
	// $ANTLR end synpred230_Php

	partial void EnterRule_synpred231_Php_fragment();
	partial void LeaveRule_synpred231_Php_fragment();

	// $ANTLR start synpred231_Php
	private void synpred231_Php_fragment()
	{
		EnterRule_synpred231_Php_fragment();
		EnterRule("synpred231_Php_fragment", 309);
		var retval = new Antlr3AstNode("synpred231_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:363: ( Isset )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:426:363: Isset
			{
			DebugLocation(426, 363);
			Match(input,Isset,Follow._Isset_in_synpred231_Php2350); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred231_Php_fragment", 309);
			LeaveRule("synpred231_Php_fragment", 309);
			LeaveRule_synpred231_Php_fragment();
		}
	}
	// $ANTLR end synpred231_Php

	partial void EnterRule_synpred232_Php_fragment();
	partial void LeaveRule_synpred232_Php_fragment();

	// $ANTLR start synpred232_Php
	private void synpred232_Php_fragment()
	{
		EnterRule_synpred232_Php_fragment();
		EnterRule("synpred232_Php_fragment", 310);
		var retval = new Antlr3AstNode("synpred232_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:6: ( IntType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:6: IntType
			{
			DebugLocation(427, 6);
			Match(input,IntType,Follow._IntType_in_synpred232_Php2357); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred232_Php_fragment", 310);
			LeaveRule("synpred232_Php_fragment", 310);
			LeaveRule_synpred232_Php_fragment();
		}
	}
	// $ANTLR end synpred232_Php

	partial void EnterRule_synpred233_Php_fragment();
	partial void LeaveRule_synpred233_Php_fragment();

	// $ANTLR start synpred233_Php
	private void synpred233_Php_fragment()
	{
		EnterRule_synpred233_Php_fragment();
		EnterRule("synpred233_Php_fragment", 311);
		var retval = new Antlr3AstNode("synpred233_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:16: ( IntegerType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:16: IntegerType
			{
			DebugLocation(427, 16);
			Match(input,IntegerType,Follow._IntegerType_in_synpred233_Php2361); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred233_Php_fragment", 311);
			LeaveRule("synpred233_Php_fragment", 311);
			LeaveRule_synpred233_Php_fragment();
		}
	}
	// $ANTLR end synpred233_Php

	partial void EnterRule_synpred234_Php_fragment();
	partial void LeaveRule_synpred234_Php_fragment();

	// $ANTLR start synpred234_Php
	private void synpred234_Php_fragment()
	{
		EnterRule_synpred234_Php_fragment();
		EnterRule("synpred234_Php_fragment", 312);
		var retval = new Antlr3AstNode("synpred234_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:30: ( BoolType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:30: BoolType
			{
			DebugLocation(427, 30);
			Match(input,BoolType,Follow._BoolType_in_synpred234_Php2365); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred234_Php_fragment", 312);
			LeaveRule("synpred234_Php_fragment", 312);
			LeaveRule_synpred234_Php_fragment();
		}
	}
	// $ANTLR end synpred234_Php

	partial void EnterRule_synpred235_Php_fragment();
	partial void LeaveRule_synpred235_Php_fragment();

	// $ANTLR start synpred235_Php
	private void synpred235_Php_fragment()
	{
		EnterRule_synpred235_Php_fragment();
		EnterRule("synpred235_Php_fragment", 313);
		var retval = new Antlr3AstNode("synpred235_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:41: ( BooleanType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:41: BooleanType
			{
			DebugLocation(427, 41);
			Match(input,BooleanType,Follow._BooleanType_in_synpred235_Php2369); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred235_Php_fragment", 313);
			LeaveRule("synpred235_Php_fragment", 313);
			LeaveRule_synpred235_Php_fragment();
		}
	}
	// $ANTLR end synpred235_Php

	partial void EnterRule_synpred236_Php_fragment();
	partial void LeaveRule_synpred236_Php_fragment();

	// $ANTLR start synpred236_Php
	private void synpred236_Php_fragment()
	{
		EnterRule_synpred236_Php_fragment();
		EnterRule("synpred236_Php_fragment", 314);
		var retval = new Antlr3AstNode("synpred236_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:55: ( FloatType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:55: FloatType
			{
			DebugLocation(427, 55);
			Match(input,FloatType,Follow._FloatType_in_synpred236_Php2373); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred236_Php_fragment", 314);
			LeaveRule("synpred236_Php_fragment", 314);
			LeaveRule_synpred236_Php_fragment();
		}
	}
	// $ANTLR end synpred236_Php

	partial void EnterRule_synpred237_Php_fragment();
	partial void LeaveRule_synpred237_Php_fragment();

	// $ANTLR start synpred237_Php
	private void synpred237_Php_fragment()
	{
		EnterRule_synpred237_Php_fragment();
		EnterRule("synpred237_Php_fragment", 315);
		var retval = new Antlr3AstNode("synpred237_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:67: ( DoubleType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:427:67: DoubleType
			{
			DebugLocation(427, 67);
			Match(input,DoubleType,Follow._DoubleType_in_synpred237_Php2377); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred237_Php_fragment", 315);
			LeaveRule("synpred237_Php_fragment", 315);
			LeaveRule_synpred237_Php_fragment();
		}
	}
	// $ANTLR end synpred237_Php

	partial void EnterRule_synpred238_Php_fragment();
	partial void LeaveRule_synpred238_Php_fragment();

	// $ANTLR start synpred238_Php
	private void synpred238_Php_fragment()
	{
		EnterRule_synpred238_Php_fragment();
		EnterRule("synpred238_Php_fragment", 316);
		var retval = new Antlr3AstNode("synpred238_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:6: ( RealType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:6: RealType
			{
			DebugLocation(428, 6);
			Match(input,RealType,Follow._RealType_in_synpred238_Php2384); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred238_Php_fragment", 316);
			LeaveRule("synpred238_Php_fragment", 316);
			LeaveRule_synpred238_Php_fragment();
		}
	}
	// $ANTLR end synpred238_Php

	partial void EnterRule_synpred239_Php_fragment();
	partial void LeaveRule_synpred239_Php_fragment();

	// $ANTLR start synpred239_Php
	private void synpred239_Php_fragment()
	{
		EnterRule_synpred239_Php_fragment();
		EnterRule("synpred239_Php_fragment", 317);
		var retval = new Antlr3AstNode("synpred239_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:17: ( StringType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:428:17: StringType
			{
			DebugLocation(428, 17);
			Match(input,StringType,Follow._StringType_in_synpred239_Php2388); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred239_Php_fragment", 317);
			LeaveRule("synpred239_Php_fragment", 317);
			LeaveRule_synpred239_Php_fragment();
		}
	}
	// $ANTLR end synpred239_Php

	partial void EnterRule_synpred240_Php_fragment();
	partial void LeaveRule_synpred240_Php_fragment();

	// $ANTLR start synpred240_Php
	private void synpred240_Php_fragment()
	{
		EnterRule_synpred240_Php_fragment();
		EnterRule("synpred240_Php_fragment", 318);
		var retval = new Antlr3AstNode("synpred240_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:29: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:29: functionArguments
			{
			DebugLocation(433, 29);
			PushFollow(Follow._functionArguments_in_synpred240_Php2410);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred240_Php_fragment", 318);
			LeaveRule("synpred240_Php_fragment", 318);
			LeaveRule_synpred240_Php_fragment();
		}
	}
	// $ANTLR end synpred240_Php

	partial void EnterRule_synpred241_Php_fragment();
	partial void LeaveRule_synpred241_Php_fragment();

	// $ANTLR start synpred241_Php
	private void synpred241_Php_fragment()
	{
		EnterRule_synpred241_Php_fragment();
		EnterRule("synpred241_Php_fragment", 319);
		var retval = new Antlr3AstNode("synpred241_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:49: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:49: indexer
			{
			DebugLocation(433, 49);
			PushFollow(Follow._indexer_in_synpred241_Php2414);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred241_Php_fragment", 319);
			LeaveRule("synpred241_Php_fragment", 319);
			LeaveRule_synpred241_Php_fragment();
		}
	}
	// $ANTLR end synpred241_Php

	partial void EnterRule_synpred242_Php_fragment();
	partial void LeaveRule_synpred242_Php_fragment();

	// $ANTLR start synpred242_Php
	private void synpred242_Php_fragment()
	{
		EnterRule_synpred242_Php_fragment();
		EnterRule("synpred242_Php_fragment", 320);
		var retval = new Antlr3AstNode("synpred242_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:72: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:72: functionArguments
			{
			DebugLocation(433, 72);
			PushFollow(Follow._functionArguments_in_synpred242_Php2420);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred242_Php_fragment", 320);
			LeaveRule("synpred242_Php_fragment", 320);
			LeaveRule_synpred242_Php_fragment();
		}
	}
	// $ANTLR end synpred242_Php

	partial void EnterRule_synpred243_Php_fragment();
	partial void LeaveRule_synpred243_Php_fragment();

	// $ANTLR start synpred243_Php
	private void synpred243_Php_fragment()
	{
		EnterRule_synpred243_Php_fragment();
		EnterRule("synpred243_Php_fragment", 321);
		var retval = new Antlr3AstNode("synpred243_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:59: ( memberAccess ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:59: memberAccess ( functionArguments )?
			{
			DebugLocation(433, 59);
			PushFollow(Follow._memberAccess_in_synpred243_Php2418);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(433, 72);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:72: ( functionArguments )?
			int alt176=2;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			int LA176_1 = input.LA(1);

			if ((LA176_1==OpenRoundBracket))
			{
				alt176 = 1;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:72: functionArguments
				{
				DebugLocation(433, 72);
				PushFollow(Follow._functionArguments_in_synpred243_Php2420);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(176); }


			}

		}
		finally
		{
			TraceOut("synpred243_Php_fragment", 321);
			LeaveRule("synpred243_Php_fragment", 321);
			LeaveRule_synpred243_Php_fragment();
		}
	}
	// $ANTLR end synpred243_Php

	partial void EnterRule_synpred244_Php_fragment();
	partial void LeaveRule_synpred244_Php_fragment();

	// $ANTLR start synpred244_Php
	private void synpred244_Php_fragment()
	{
		EnterRule_synpred244_Php_fragment();
		EnterRule("synpred244_Php_fragment", 322);
		var retval = new Antlr3AstNode("synpred244_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:4: ( variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:4: variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )*
			{
			DebugLocation(433, 4);
			PushFollow(Follow._variableOrStaticAccessor_in_synpred244_Php2408);
			variableOrStaticAccessor();
			PopFollow();
			if (state.failed) return;
			DebugLocation(433, 29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:29: ( functionArguments )?
			int alt177=2;
			try { DebugEnterSubRule(177);
			try { DebugEnterDecision(177, false);
			int LA177_1 = input.LA(1);

			if ((LA177_1==OpenRoundBracket))
			{
				alt177 = 1;
			}
			} finally { DebugExitDecision(177); }
			switch (alt177)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:29: functionArguments
				{
				DebugLocation(433, 29);
				PushFollow(Follow._functionArguments_in_synpred244_Php2410);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(177); }

			DebugLocation(433, 48);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:48: ( indexer | memberAccess ( functionArguments )? )*
			try { DebugEnterSubRule(179);
			while (true)
			{
				int alt179=3;
				try { DebugEnterDecision(179, false);
				int LA179_1 = input.LA(1);

				if ((LA179_1==OpenCurlyBracket||LA179_1==OpenSquareBracket))
				{
					alt179 = 1;
				}
				else if ((LA179_1==InstanceMember))
				{
					alt179 = 2;
				}


				} finally { DebugExitDecision(179); }
				switch ( alt179 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:49: indexer
					{
					DebugLocation(433, 49);
					PushFollow(Follow._indexer_in_synpred244_Php2414);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:59: memberAccess ( functionArguments )?
					{
					DebugLocation(433, 59);
					PushFollow(Follow._memberAccess_in_synpred244_Php2418);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(433, 72);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:72: ( functionArguments )?
					int alt178=2;
					try { DebugEnterSubRule(178);
					try { DebugEnterDecision(178, false);
					int LA178_1 = input.LA(1);

					if ((LA178_1==OpenRoundBracket))
					{
						alt178 = 1;
					}
					} finally { DebugExitDecision(178); }
					switch (alt178)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:433:72: functionArguments
						{
						DebugLocation(433, 72);
						PushFollow(Follow._functionArguments_in_synpred244_Php2420);
						functionArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(178); }


					}
					break;

				default:
					goto loop179;
				}
			}

			loop179:
				;

			} finally { DebugExitSubRule(179); }


			}

		}
		finally
		{
			TraceOut("synpred244_Php_fragment", 322);
			LeaveRule("synpred244_Php_fragment", 322);
			LeaveRule_synpred244_Php_fragment();
		}
	}
	// $ANTLR end synpred244_Php

	partial void EnterRule_synpred245_Php_fragment();
	partial void LeaveRule_synpred245_Php_fragment();

	// $ANTLR start synpred245_Php
	private void synpred245_Php_fragment()
	{
		EnterRule_synpred245_Php_fragment();
		EnterRule("synpred245_Php_fragment", 323);
		var retval = new Antlr3AstNode("synpred245_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:48: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:48: indexer
			{
			DebugLocation(434, 48);
			PushFollow(Follow._indexer_in_synpred245_Php2433);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred245_Php_fragment", 323);
			LeaveRule("synpred245_Php_fragment", 323);
			LeaveRule_synpred245_Php_fragment();
		}
	}
	// $ANTLR end synpred245_Php

	partial void EnterRule_synpred246_Php_fragment();
	partial void LeaveRule_synpred246_Php_fragment();

	// $ANTLR start synpred246_Php
	private void synpred246_Php_fragment()
	{
		EnterRule_synpred246_Php_fragment();
		EnterRule("synpred246_Php_fragment", 324);
		var retval = new Antlr3AstNode("synpred246_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:71: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:71: functionArguments
			{
			DebugLocation(434, 71);
			PushFollow(Follow._functionArguments_in_synpred246_Php2439);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred246_Php_fragment", 324);
			LeaveRule("synpred246_Php_fragment", 324);
			LeaveRule_synpred246_Php_fragment();
		}
	}
	// $ANTLR end synpred246_Php

	partial void EnterRule_synpred247_Php_fragment();
	partial void LeaveRule_synpred247_Php_fragment();

	// $ANTLR start synpred247_Php
	private void synpred247_Php_fragment()
	{
		EnterRule_synpred247_Php_fragment();
		EnterRule("synpred247_Php_fragment", 325);
		var retval = new Antlr3AstNode("synpred247_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:58: ( memberAccess ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:58: memberAccess ( functionArguments )?
			{
			DebugLocation(434, 58);
			PushFollow(Follow._memberAccess_in_synpred247_Php2437);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(434, 71);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:71: ( functionArguments )?
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			int LA180_1 = input.LA(1);

			if ((LA180_1==OpenRoundBracket))
			{
				alt180 = 1;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:71: functionArguments
				{
				DebugLocation(434, 71);
				PushFollow(Follow._functionArguments_in_synpred247_Php2439);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(180); }


			}

		}
		finally
		{
			TraceOut("synpred247_Php_fragment", 325);
			LeaveRule("synpred247_Php_fragment", 325);
			LeaveRule_synpred247_Php_fragment();
		}
	}
	// $ANTLR end synpred247_Php

	partial void EnterRule_synpred248_Php_fragment();
	partial void LeaveRule_synpred248_Php_fragment();

	// $ANTLR start synpred248_Php
	private void synpred248_Php_fragment()
	{
		EnterRule_synpred248_Php_fragment();
		EnterRule("synpred248_Php_fragment", 326);
		var retval = new Antlr3AstNode("synpred248_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:4: ( constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:4: constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )*
			{
			DebugLocation(434, 4);
			PushFollow(Follow._constantOrStaticAccessor_in_synpred248_Php2428);
			constantOrStaticAccessor();
			PopFollow();
			if (state.failed) return;
			DebugLocation(434, 29);
			PushFollow(Follow._functionArguments_in_synpred248_Php2430);
			functionArguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(434, 47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:47: ( indexer | memberAccess ( functionArguments )? )*
			try { DebugEnterSubRule(182);
			while (true)
			{
				int alt182=3;
				try { DebugEnterDecision(182, false);
				int LA182_1 = input.LA(1);

				if ((LA182_1==OpenCurlyBracket||LA182_1==OpenSquareBracket))
				{
					alt182 = 1;
				}
				else if ((LA182_1==InstanceMember))
				{
					alt182 = 2;
				}


				} finally { DebugExitDecision(182); }
				switch ( alt182 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:48: indexer
					{
					DebugLocation(434, 48);
					PushFollow(Follow._indexer_in_synpred248_Php2433);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:58: memberAccess ( functionArguments )?
					{
					DebugLocation(434, 58);
					PushFollow(Follow._memberAccess_in_synpred248_Php2437);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(434, 71);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:71: ( functionArguments )?
					int alt181=2;
					try { DebugEnterSubRule(181);
					try { DebugEnterDecision(181, false);
					int LA181_1 = input.LA(1);

					if ((LA181_1==OpenRoundBracket))
					{
						alt181 = 1;
					}
					} finally { DebugExitDecision(181); }
					switch (alt181)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:434:71: functionArguments
						{
						DebugLocation(434, 71);
						PushFollow(Follow._functionArguments_in_synpred248_Php2439);
						functionArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(181); }


					}
					break;

				default:
					goto loop182;
				}
			}

			loop182:
				;

			} finally { DebugExitSubRule(182); }


			}

		}
		finally
		{
			TraceOut("synpred248_Php_fragment", 326);
			LeaveRule("synpred248_Php_fragment", 326);
			LeaveRule_synpred248_Php_fragment();
		}
	}
	// $ANTLR end synpred248_Php

	partial void EnterRule_synpred249_Php_fragment();
	partial void LeaveRule_synpred249_Php_fragment();

	// $ANTLR start synpred249_Php
	private void synpred249_Php_fragment()
	{
		EnterRule_synpred249_Php_fragment();
		EnterRule("synpred249_Php_fragment", 327);
		var retval = new Antlr3AstNode("synpred249_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:30: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:30: indexer
			{
			DebugLocation(435, 30);
			PushFollow(Follow._indexer_in_synpred249_Php2450);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred249_Php_fragment", 327);
			LeaveRule("synpred249_Php_fragment", 327);
			LeaveRule_synpred249_Php_fragment();
		}
	}
	// $ANTLR end synpred249_Php

	partial void EnterRule_synpred250_Php_fragment();
	partial void LeaveRule_synpred250_Php_fragment();

	// $ANTLR start synpred250_Php
	private void synpred250_Php_fragment()
	{
		EnterRule_synpred250_Php_fragment();
		EnterRule("synpred250_Php_fragment", 328);
		var retval = new Antlr3AstNode("synpred250_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:53: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:53: functionArguments
			{
			DebugLocation(435, 53);
			PushFollow(Follow._functionArguments_in_synpred250_Php2456);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred250_Php_fragment", 328);
			LeaveRule("synpred250_Php_fragment", 328);
			LeaveRule_synpred250_Php_fragment();
		}
	}
	// $ANTLR end synpred250_Php

	partial void EnterRule_synpred251_Php_fragment();
	partial void LeaveRule_synpred251_Php_fragment();

	// $ANTLR start synpred251_Php
	private void synpred251_Php_fragment()
	{
		EnterRule_synpred251_Php_fragment();
		EnterRule("synpred251_Php_fragment", 329);
		var retval = new Antlr3AstNode("synpred251_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:40: ( memberAccess ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:40: memberAccess ( functionArguments )?
			{
			DebugLocation(435, 40);
			PushFollow(Follow._memberAccess_in_synpred251_Php2454);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(435, 53);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:53: ( functionArguments )?
			int alt183=2;
			try { DebugEnterSubRule(183);
			try { DebugEnterDecision(183, false);
			int LA183_1 = input.LA(1);

			if ((LA183_1==OpenRoundBracket))
			{
				alt183 = 1;
			}
			} finally { DebugExitDecision(183); }
			switch (alt183)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:53: functionArguments
				{
				DebugLocation(435, 53);
				PushFollow(Follow._functionArguments_in_synpred251_Php2456);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(183); }


			}

		}
		finally
		{
			TraceOut("synpred251_Php_fragment", 329);
			LeaveRule("synpred251_Php_fragment", 329);
			LeaveRule_synpred251_Php_fragment();
		}
	}
	// $ANTLR end synpred251_Php

	partial void EnterRule_synpred252_Php_fragment();
	partial void LeaveRule_synpred252_Php_fragment();

	// $ANTLR start synpred252_Php
	private void synpred252_Php_fragment()
	{
		EnterRule_synpred252_Php_fragment();
		EnterRule("synpred252_Php_fragment", 330);
		var retval = new Antlr3AstNode("synpred252_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:4: ( constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:4: constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+
			{
			DebugLocation(435, 4);
			PushFollow(Follow._constantOrStaticAccessor_in_synpred252_Php2447);
			constantOrStaticAccessor();
			PopFollow();
			if (state.failed) return;
			DebugLocation(435, 29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:29: ( indexer | memberAccess ( functionArguments )? )+
			int cnt185=0;
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=3;
				try { DebugEnterDecision(185, false);
				int LA185_1 = input.LA(1);

				if ((LA185_1==OpenCurlyBracket||LA185_1==OpenSquareBracket))
				{
					alt185 = 1;
				}
				else if ((LA185_1==InstanceMember))
				{
					alt185 = 2;
				}


				} finally { DebugExitDecision(185); }
				switch (alt185)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:30: indexer
					{
					DebugLocation(435, 30);
					PushFollow(Follow._indexer_in_synpred252_Php2450);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:40: memberAccess ( functionArguments )?
					{
					DebugLocation(435, 40);
					PushFollow(Follow._memberAccess_in_synpred252_Php2454);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(435, 53);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:53: ( functionArguments )?
					int alt184=2;
					try { DebugEnterSubRule(184);
					try { DebugEnterDecision(184, false);
					int LA184_1 = input.LA(1);

					if ((LA184_1==OpenRoundBracket))
					{
						alt184 = 1;
					}
					} finally { DebugExitDecision(184); }
					switch (alt184)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:435:53: functionArguments
						{
						DebugLocation(435, 53);
						PushFollow(Follow._functionArguments_in_synpred252_Php2456);
						functionArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(184); }


					}
					break;

				default:
					if (cnt185 >= 1)
						goto loop185;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee185 = new EarlyExitException( 185, input );
					DebugRecognitionException(eee185);
					throw eee185;
				}
				cnt185++;
			}
			loop185:
				;

			} finally { DebugExitSubRule(185); }


			}

		}
		finally
		{
			TraceOut("synpred252_Php_fragment", 330);
			LeaveRule("synpred252_Php_fragment", 330);
			LeaveRule_synpred252_Php_fragment();
		}
	}
	// $ANTLR end synpred252_Php

	partial void EnterRule_synpred253_Php_fragment();
	partial void LeaveRule_synpred253_Php_fragment();

	// $ANTLR start synpred253_Php
	private void synpred253_Php_fragment()
	{
		EnterRule_synpred253_Php_fragment();
		EnterRule("synpred253_Php_fragment", 331);
		var retval = new Antlr3AstNode("synpred253_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:436:27: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:436:27: functionArguments
			{
			DebugLocation(436, 27);
			PushFollow(Follow._functionArguments_in_synpred253_Php2466);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred253_Php_fragment", 331);
			LeaveRule("synpred253_Php_fragment", 331);
			LeaveRule_synpred253_Php_fragment();
		}
	}
	// $ANTLR end synpred253_Php

	partial void EnterRule_synpred254_Php_fragment();
	partial void LeaveRule_synpred254_Php_fragment();

	// $ANTLR start synpred254_Php
	private void synpred254_Php_fragment()
	{
		EnterRule_synpred254_Php_fragment();
		EnterRule("synpred254_Php_fragment", 332);
		var retval = new Antlr3AstNode("synpred254_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:5: ( variableOrStaticAccessor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:5: variableOrStaticAccessor
			{
			DebugLocation(444, 5);
			PushFollow(Follow._variableOrStaticAccessor_in_synpred254_Php2487);
			variableOrStaticAccessor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred254_Php_fragment", 332);
			LeaveRule("synpred254_Php_fragment", 332);
			LeaveRule_synpred254_Php_fragment();
		}
	}
	// $ANTLR end synpred254_Php

	partial void EnterRule_synpred257_Php_fragment();
	partial void LeaveRule_synpred257_Php_fragment();

	// $ANTLR start synpred257_Php
	private void synpred257_Php_fragment()
	{
		EnterRule_synpred257_Php_fragment();
		EnterRule("synpred257_Php_fragment", 335);
		var retval = new Antlr3AstNode("synpred257_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:16: ( memberAccess )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:16: memberAccess
			{
			DebugLocation(446, 16);
			PushFollow(Follow._memberAccess_in_synpred257_Php2509);
			memberAccess();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred257_Php_fragment", 335);
			LeaveRule("synpred257_Php_fragment", 335);
			LeaveRule_synpred257_Php_fragment();
		}
	}
	// $ANTLR end synpred257_Php

	partial void EnterRule_synpred258_Php_fragment();
	partial void LeaveRule_synpred258_Php_fragment();

	// $ANTLR start synpred258_Php
	private void synpred258_Php_fragment()
	{
		EnterRule_synpred258_Php_fragment();
		EnterRule("synpred258_Php_fragment", 336);
		var retval = new Antlr3AstNode("synpred258_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:5: ( ( indexer | memberAccess )* memberAccess functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:5: ( indexer | memberAccess )* memberAccess functionArguments
			{
			DebugLocation(446, 5);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:5: ( indexer | memberAccess )*
			try { DebugEnterSubRule(186);
			while (true)
			{
				int alt186=3;
				try { DebugEnterDecision(186, false);
				int LA186_1 = input.LA(1);

				if ((LA186_1==InstanceMember))
				{
					int LA186_2 = input.LA(2);

					if ((EvaluatePredicate(synpred257_Php_fragment)))
					{
						alt186 = 2;
					}


				}
				else if ((LA186_1==OpenCurlyBracket||LA186_1==OpenSquareBracket))
				{
					alt186 = 1;
				}


				} finally { DebugExitDecision(186); }
				switch ( alt186 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:6: indexer
					{
					DebugLocation(446, 6);
					PushFollow(Follow._indexer_in_synpred258_Php2505);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:16: memberAccess
					{
					DebugLocation(446, 16);
					PushFollow(Follow._memberAccess_in_synpred258_Php2509);
					memberAccess();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop186;
				}
			}

			loop186:
				;

			} finally { DebugExitSubRule(186); }

			DebugLocation(446, 31);
			PushFollow(Follow._memberAccess_in_synpred258_Php2513);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(446, 44);
			PushFollow(Follow._functionArguments_in_synpred258_Php2515);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred258_Php_fragment", 336);
			LeaveRule("synpred258_Php_fragment", 336);
			LeaveRule_synpred258_Php_fragment();
		}
	}
	// $ANTLR end synpred258_Php

	partial void EnterRule_synpred259_Php_fragment();
	partial void LeaveRule_synpred259_Php_fragment();

	// $ANTLR start synpred259_Php
	private void synpred259_Php_fragment()
	{
		EnterRule_synpred259_Php_fragment();
		EnterRule("synpred259_Php_fragment", 337);
		var retval = new Antlr3AstNode("synpred259_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:5: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:5: indexer
			{
			DebugLocation(447, 5);
			PushFollow(Follow._indexer_in_synpred259_Php2523);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred259_Php_fragment", 337);
			LeaveRule("synpred259_Php_fragment", 337);
			LeaveRule_synpred259_Php_fragment();
		}
	}
	// $ANTLR end synpred259_Php

	partial void EnterRule_synpred260_Php_fragment();
	partial void LeaveRule_synpred260_Php_fragment();

	// $ANTLR start synpred260_Php
	private void synpred260_Php_fragment()
	{
		EnterRule_synpred260_Php_fragment();
		EnterRule("synpred260_Php_fragment", 338);
		var retval = new Antlr3AstNode("synpred260_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:15: ( memberAccess )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:15: memberAccess
			{
			DebugLocation(447, 15);
			PushFollow(Follow._memberAccess_in_synpred260_Php2527);
			memberAccess();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred260_Php_fragment", 338);
			LeaveRule("synpred260_Php_fragment", 338);
			LeaveRule_synpred260_Php_fragment();
		}
	}
	// $ANTLR end synpred260_Php

	partial void EnterRule_synpred261_Php_fragment();
	partial void LeaveRule_synpred261_Php_fragment();

	// $ANTLR start synpred261_Php
	private void synpred261_Php_fragment()
	{
		EnterRule_synpred261_Php_fragment();
		EnterRule("synpred261_Php_fragment", 339);
		var retval = new Antlr3AstNode("synpred261_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:4: ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:4: ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+
			{
			DebugLocation(444, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:4: ( variableOrStaticAccessor | constantOrStaticAccessor )
			int alt187=2;
			try { DebugEnterSubRule(187);
			try { DebugEnterDecision(187, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA187_2 = input.LA(2);

				if ((EvaluatePredicate(synpred254_Php_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 187, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA187_2 = input.LA(2);

				if ((EvaluatePredicate(synpred254_Php_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 187, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA187_2 = input.LA(2);

				if ((EvaluatePredicate(synpred254_Php_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 187, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA187_2 = input.LA(2);

				if ((EvaluatePredicate(synpred254_Php_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 187, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 187, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:5: variableOrStaticAccessor
				{
				DebugLocation(444, 5);
				PushFollow(Follow._variableOrStaticAccessor_in_synpred261_Php2487);
				variableOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:444:32: constantOrStaticAccessor
				{
				DebugLocation(444, 32);
				PushFollow(Follow._constantOrStaticAccessor_in_synpred261_Php2491);
				constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(187); }

			DebugLocation(445, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:445:4: ( functionArguments )?
			int alt188=2;
			try { DebugEnterSubRule(188);
			try { DebugEnterDecision(188, false);
			int LA188_1 = input.LA(1);

			if ((LA188_1==OpenRoundBracket))
			{
				alt188 = 1;
			}
			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:445:4: functionArguments
				{
				DebugLocation(445, 4);
				PushFollow(Follow._functionArguments_in_synpred261_Php2497);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(188); }

			DebugLocation(446, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:4: ( ( indexer | memberAccess )* memberAccess functionArguments )*
			try { DebugEnterSubRule(190);
			while (true)
			{
				int alt190=2;
				try { DebugEnterDecision(190, false);
				switch (input.LA(1))
				{
				case OpenSquareBracket:
					{
					int LA190_2 = input.LA(2);

					if ((EvaluatePredicate(synpred258_Php_fragment)))
					{
						alt190 = 1;
					}


					}
					break;
				case OpenCurlyBracket:
					{
					int LA190_2 = input.LA(2);

					if ((EvaluatePredicate(synpred258_Php_fragment)))
					{
						alt190 = 1;
					}


					}
					break;
				case InstanceMember:
					{
					int LA190_2 = input.LA(2);

					if ((EvaluatePredicate(synpred258_Php_fragment)))
					{
						alt190 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(190); }
				switch ( alt190 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:5: ( indexer | memberAccess )* memberAccess functionArguments
					{
					DebugLocation(446, 5);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:5: ( indexer | memberAccess )*
					try { DebugEnterSubRule(189);
					while (true)
					{
						int alt189=3;
						try { DebugEnterDecision(189, false);
						int LA189_1 = input.LA(1);

						if ((LA189_1==InstanceMember))
						{
							int LA189_2 = input.LA(2);

							if ((EvaluatePredicate(synpred257_Php_fragment)))
							{
								alt189 = 2;
							}


						}
						else if ((LA189_1==OpenCurlyBracket||LA189_1==OpenSquareBracket))
						{
							alt189 = 1;
						}


						} finally { DebugExitDecision(189); }
						switch ( alt189 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:6: indexer
							{
							DebugLocation(446, 6);
							PushFollow(Follow._indexer_in_synpred261_Php2505);
							indexer();
							PopFollow();
							if (state.failed) return;

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:446:16: memberAccess
							{
							DebugLocation(446, 16);
							PushFollow(Follow._memberAccess_in_synpred261_Php2509);
							memberAccess();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop189;
						}
					}

					loop189:
						;

					} finally { DebugExitSubRule(189); }

					DebugLocation(446, 31);
					PushFollow(Follow._memberAccess_in_synpred261_Php2513);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(446, 44);
					PushFollow(Follow._functionArguments_in_synpred261_Php2515);
					functionArguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop190;
				}
			}

			loop190:
				;

			} finally { DebugExitSubRule(190); }

			DebugLocation(447, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:4: ( indexer | memberAccess )+
			int cnt191=0;
			try { DebugEnterSubRule(191);
			while (true)
			{
				int alt191=3;
				try { DebugEnterDecision(191, false);
				int LA191_1 = input.LA(1);

				if ((LA191_1==OpenCurlyBracket||LA191_1==OpenSquareBracket))
				{
					alt191 = 1;
				}
				else if ((LA191_1==InstanceMember))
				{
					alt191 = 2;
				}


				} finally { DebugExitDecision(191); }
				switch (alt191)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:5: indexer
					{
					DebugLocation(447, 5);
					PushFollow(Follow._indexer_in_synpred261_Php2523);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:447:15: memberAccess
					{
					DebugLocation(447, 15);
					PushFollow(Follow._memberAccess_in_synpred261_Php2527);
					memberAccess();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt191 >= 1)
						goto loop191;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee191 = new EarlyExitException( 191, input );
					DebugRecognitionException(eee191);
					throw eee191;
				}
				cnt191++;
			}
			loop191:
				;

			} finally { DebugExitSubRule(191); }


			}

		}
		finally
		{
			TraceOut("synpred261_Php_fragment", 339);
			LeaveRule("synpred261_Php_fragment", 339);
			LeaveRule_synpred261_Php_fragment();
		}
	}
	// $ANTLR end synpred261_Php

	partial void EnterRule_synpred263_Php_fragment();
	partial void LeaveRule_synpred263_Php_fragment();

	// $ANTLR start synpred263_Php
	private void synpred263_Php_fragment()
	{
		EnterRule_synpred263_Php_fragment();
		EnterRule("synpred263_Php_fragment", 341);
		var retval = new Antlr3AstNode("synpred263_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:452:4: ( ( variable | qualifiedName ) '::' variable )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:452:4: ( variable | qualifiedName ) '::' variable
			{
			DebugLocation(452, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:452:4: ( variable | qualifiedName )
			int alt192=2;
			try { DebugEnterSubRule(192);
			try { DebugEnterDecision(192, false);
			int LA192_1 = input.LA(1);

			if ((LA192_1==VariableName||LA192_1==128))
			{
				alt192 = 1;
			}
			else if (((LA192_1>=BoolType && LA192_1<=BooleanType)||LA192_1==DoubleType||LA192_1==FloatType||LA192_1==IntType||LA192_1==IntegerType||LA192_1==ObjectType||LA192_1==RealType||(LA192_1>=Static && LA192_1<=StringType)||LA192_1==UnquotedString||LA192_1==129))
			{
				alt192 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 192, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(192); }
			switch (alt192)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:452:5: variable
				{
				DebugLocation(452, 5);
				PushFollow(Follow._variable_in_synpred263_Php2546);
				variable();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Processors\\Php\\Php.g:452:16: qualifiedName
				{
				DebugLocation(452, 16);
				PushFollow(Follow._qualifiedName_in_synpred263_Php2550);
				qualifiedName();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(192); }

			DebugLocation(452, 31);
			Match(input,ClassMember,Follow._ClassMember_in_synpred263_Php2553); if (state.failed) return;
			DebugLocation(452, 36);
			PushFollow(Follow._variable_in_synpred263_Php2555);
			variable();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred263_Php_fragment", 341);
			LeaveRule("synpred263_Php_fragment", 341);
			LeaveRule_synpred263_Php_fragment();
		}
	}
	// $ANTLR end synpred263_Php
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA1 dfa1;
	private DFA23 dfa23;
	private DFA111 dfa111;
	private DFA130 dfa130;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa1 = new DFA1( this );
		dfa23 = new DFA23( this );
		dfa111 = new DFA111( this, SpecialStateTransition111 );
		dfa130 = new DFA130( this );
	}

	private class DFA1 : DFA
	{
		private const string DFA1_eotS =
			"\x9\xFFFF";
		private const string DFA1_eofS =
			"\x2\x2\x7\xFFFF";
		private const string DFA1_minS =
			"\x2\x4\x1\xFFFF\x2\x10\x1\x5A\x1\x10\x1\xFFFF\x1\x5A";
		private const string DFA1_maxS =
			"\x2\x81\x1\xFFFF\x1\x81\x1\x77\x1\x81\x1\x77\x1\xFFFF\x1\x81";
		private const string DFA1_acceptS =
			"\x2\xFFFF\x1\x2\x4\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA1_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA1_transitionS =
			{
				"\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\x1\x2\xFFFF\x3\x2\x2\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x3\x2\x2\xFFFF\x1\x2\x4\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1"+
				"\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x2\xFFFF\x6"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x1\x2\x4\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2",
				"\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x3\x2\x2\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x2\x6\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3"+
				"\x2\x2\xFFFF\x1\x2\x4\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x2\xFFFF\x6\x2\x2"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x3\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x1\x2\x4\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2",
				"",
				"\x2\x5\x16\xFFFF\x1\x5\xE\xFFFF\x1\x5\x12\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\xB\xFFFF\x1\x5\xD\xFFFF\x1\x5\x7\xFFFF\x2\x5\x7\xFFFF\x1\x5\x9\xFFFF"+
				"\x1\x4",
				"\x2\x5\x16\xFFFF\x1\x5\xE\xFFFF\x1\x5\x12\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\xB\xFFFF\x1\x5\xD\xFFFF\x1\x5\x7\xFFFF\x2\x5\x7\xFFFF\x1\x5",
				"\x1\x2\xF\xFFFF\x1\x7\x16\xFFFF\x1\x6",
				"\x2\x8\x16\xFFFF\x1\x8\xE\xFFFF\x1\x8\x12\xFFFF\x1\x8\x1\xFFFF\x1\x8"+
				"\xB\xFFFF\x1\x8\xD\xFFFF\x1\x8\x8\xFFFF\x1\x8\x7\xFFFF\x1\x8",
				"",
				"\x1\x2\xF\xFFFF\x1\x7\x16\xFFFF\x1\x6"
			};

		private static readonly short[] DFA1_eot = DFA.UnpackEncodedString(DFA1_eotS);
		private static readonly short[] DFA1_eof = DFA.UnpackEncodedString(DFA1_eofS);
		private static readonly char[] DFA1_min = DFA.UnpackEncodedStringToUnsignedChars(DFA1_minS);
		private static readonly char[] DFA1_max = DFA.UnpackEncodedStringToUnsignedChars(DFA1_maxS);
		private static readonly short[] DFA1_accept = DFA.UnpackEncodedString(DFA1_acceptS);
		private static readonly short[] DFA1_special = DFA.UnpackEncodedString(DFA1_specialS);
		private static readonly short[][] DFA1_transition;

		static DFA1()
		{
			int numStates = DFA1_transitionS.Length;
			DFA1_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA1_transition[i] = DFA.UnpackEncodedString(DFA1_transitionS[i]);
			}
		}

		public DFA1( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 1;
			this.eot = DFA1_eot;
			this.eof = DFA1_eof;
			this.min = DFA1_min;
			this.max = DFA1_max;
			this.accept = DFA1_accept;
			this.special = DFA1_special;
			this.transition = DFA1_transition;
		}

		public override string Description { get { return "88:2: ( BodyString namespaceDefinition )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA23 : DFA
	{
		private const string DFA23_eotS =
			"\x8\xFFFF";
		private const string DFA23_eofS =
			"\x8\xFFFF";
		private const string DFA23_minS =
			"\x4\x4\x4\xFFFF";
		private const string DFA23_maxS =
			"\x4\x7C\x4\xFFFF";
		private const string DFA23_acceptS =
			"\x4\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4";
		private const string DFA23_specialS =
			"\x8\xFFFF}>";
		private static readonly string[] DFA23_transitionS =
			{
				"\x1\x2\x19\xFFFF\x1\x5\x1C\xFFFF\x1\x4\x25\xFFFF\x3\x1\xA\xFFFF\x1\x3"+
				"\xC\xFFFF\x1\x6\x1\x7",
				"\x1\x2\x36\xFFFF\x1\x4\x25\xFFFF\x3\x1\xA\xFFFF\x1\x3\xD\xFFFF\x1\x7",
				"\x1\x2\x36\xFFFF\x1\x4\x25\xFFFF\x3\x1\xA\xFFFF\x1\x3\xD\xFFFF\x1\x7",
				"\x1\x2\x36\xFFFF\x1\x4\x25\xFFFF\x3\x1\xA\xFFFF\x1\x3\xD\xFFFF\x1\x7",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA23_eot = DFA.UnpackEncodedString(DFA23_eotS);
		private static readonly short[] DFA23_eof = DFA.UnpackEncodedString(DFA23_eofS);
		private static readonly char[] DFA23_min = DFA.UnpackEncodedStringToUnsignedChars(DFA23_minS);
		private static readonly char[] DFA23_max = DFA.UnpackEncodedStringToUnsignedChars(DFA23_maxS);
		private static readonly short[] DFA23_accept = DFA.UnpackEncodedString(DFA23_acceptS);
		private static readonly short[] DFA23_special = DFA.UnpackEncodedString(DFA23_specialS);
		private static readonly short[][] DFA23_transition;

		static DFA23()
		{
			int numStates = DFA23_transitionS.Length;
			DFA23_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA23_transition[i] = DFA.UnpackEncodedString(DFA23_transitionS[i]);
			}
		}

		public DFA23( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 23;
			this.eot = DFA23_eot;
			this.eof = DFA23_eof;
			this.min = DFA23_min;
			this.max = DFA23_max;
			this.accept = DFA23_accept;
			this.special = DFA23_special;
			this.transition = DFA23_transition;
		}

		public override string Description { get { return "156:1: classMember : ( ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA111 : DFA
	{
		private const string DFA111_eotS =
			"\x70\xFFFF";
		private const string DFA111_eofS =
			"\x70\xFFFF";
		private const string DFA111_minS =
			"\x1\x4\x1\x0\x3\xFFFF\x1\x0\x4\xFFFF\x2\x0\x1\xFFFF\x2\x0\x7\xFFFF\x2"+
			"\x0\x2\xFFFF\x1\x0\x16\xFFFF\x1\x0\xD\xFFFF\x3\x0\x3\xFFFF\x6\x0\x1\xFFFF"+
			"\x8\x0\x1C\xFFFF";
		private const string DFA111_maxS =
			"\x1\x81\x1\x0\x3\xFFFF\x1\x0\x4\xFFFF\x2\x0\x1\xFFFF\x2\x0\x7\xFFFF\x2"+
			"\x0\x2\xFFFF\x1\x0\x16\xFFFF\x1\x0\xD\xFFFF\x3\x0\x3\xFFFF\x6\x0\x1\xFFFF"+
			"\x8\x0\x1C\xFFFF";
		private const string DFA111_acceptS =
			"\x2\xFFFF\x1\x1\x18\xFFFF\x1\x2\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1"+
			"\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x15\x1\x16"+
			"\x1\x17\x1\x18\x1\x19\x1\x1A\x1\xFFFF\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1"+
			"\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x3\xFFFF"+
			"\x1\x2F\x1\x30\x1\x31\x10\xFFFF\x1\x21\x1\x1B\x1\x3\x1\x4\x1\x34\x1\x14"+
			"\x1\x32\x1\x20\x1\x2B\x1\x3A\x1\x2C\x1\x2D\x1\x2E\x1\x33\x1\x35\x1\x36"+
			"\x1\x37\x1\x38\x1\x39\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41"+
			"\x1\x42";
		private const string DFA111_specialS =
			"\x1\xFFFF\x1\x0\x3\xFFFF\x1\x1\x4\xFFFF\x1\x2\x1\x3\x1\xFFFF\x1\x4\x1"+
			"\x5\x7\xFFFF\x1\x6\x1\x7\x2\xFFFF\x1\x8\x16\xFFFF\x1\x9\xD\xFFFF\x1\xA"+
			"\x1\xB\x1\xC\x3\xFFFF\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\xFFFF"+
			"\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1C\xFFFF}>";
		private static readonly string[] DFA111_transitionS =
			{
				"\x1\x3A\x1\x2\x1\x32\x1\xFFFF\x1\x2\x1\x3D\x2\xFFFF\x1\x2\x3\xFFFF\x1"+
				"\x4D\x1\x4E\x1\x2B\x1\x28\x1\x25\x1\x36\x1\xFFFF\x1\xB\x6\xFFFF\x1\x3C"+
				"\x1\x2C\x2\xFFFF\x1\x29\x1\x46\x1\xFFFF\x1\x23\x1\xFFFF\x1\x2\x1\x50"+
				"\x1\x1C\x1\x1E\x1\x1F\x1\x47\x4\xFFFF\x1\x49\x1\x48\x1\xFFFF\x1\x38"+
				"\x1\x45\x1\x26\x1\x4F\x1\x20\x1\x21\x1\xFFFF\x1\xE\x1\x30\x1\x2D\x1"+
				"\xD\x1\xFFFF\x1\x2\x2\xFFFF\x1\x1D\x1\x39\x1\x40\x1\x41\x1\x2\x1\xFFFF"+
				"\x1\x35\x1\x31\x1\x2\x1\x4C\x1\x37\x1\x4A\x1\x1\x2\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2A\x1\xA\x1\x17\x1\xFFFF\x1\x53\x1\xFFFF\x1\x1B\x2\x2\x1\x33\x2"+
				"\xFFFF\x1\x2\x1\x43\x1\x44\x1\x42\x1\xFFFF\x1\x2\x1\x51\x1\x1A\x1\x3F"+
				"\x1\x2E\x2\xFFFF\x1\x2\x1\xFFFF\x1\x5\x1\x52\x1\x2\x1\x27\x1\x2F\x1"+
				"\x2\x1\x16\x1\x24\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\x3E\x1\x3B\x1\x2"+
				"\x1\x22\x1\xFFFF\x1\x34\x2\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA111_eot = DFA.UnpackEncodedString(DFA111_eotS);
		private static readonly short[] DFA111_eof = DFA.UnpackEncodedString(DFA111_eofS);
		private static readonly char[] DFA111_min = DFA.UnpackEncodedStringToUnsignedChars(DFA111_minS);
		private static readonly char[] DFA111_max = DFA.UnpackEncodedStringToUnsignedChars(DFA111_maxS);
		private static readonly short[] DFA111_accept = DFA.UnpackEncodedString(DFA111_acceptS);
		private static readonly short[] DFA111_special = DFA.UnpackEncodedString(DFA111_specialS);
		private static readonly short[][] DFA111_transition;

		static DFA111()
		{
			int numStates = DFA111_transitionS.Length;
			DFA111_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA111_transition[i] = DFA.UnpackEncodedString(DFA111_transitionS[i]);
			}
		}

		public DFA111( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 111;
			this.eot = DFA111_eot;
			this.eof = DFA111_eof;
			this.min = DFA111_min;
			this.max = DFA111_max;
			this.accept = DFA111_accept;
			this.special = DFA111_special;
			this.transition = DFA111_transition;
		}

		public override string Description { get { return "425:9: ( expression | '{' expression '}' | New | Clone | Echo | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition111(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA111_1 = input.LA(1);
		int index111_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred207_Php_fragment))) {s = 85;}

				input.Seek(index111_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred201_Php_fragment))) {s = 86;}

				input.Seek(index111_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred177_Php_fragment))) {s = 87;}

				input.Seek(index111_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred178_Php_fragment))) {s = 88;}

				input.Seek(index111_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred226_Php_fragment))) {s = 89;}

				input.Seek(index111_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred194_Php_fragment))) {s = 90;}

				input.Seek(index111_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred224_Php_fragment))) {s = 91;}

				input.Seek(index111_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred206_Php_fragment))) {s = 92;}

				input.Seek(index111_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred217_Php_fragment))) {s = 93;}

				input.Seek(index111_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred232_Php_fragment))) {s = 94;}

				input.Seek(index111_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred218_Php_fragment))) {s = 95;}

				input.Seek(index111_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred219_Php_fragment))) {s = 96;}

				input.Seek(index111_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred220_Php_fragment))) {s = 97;}

				input.Seek(index111_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred225_Php_fragment))) {s = 98;}

				input.Seek(index111_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred227_Php_fragment))) {s = 99;}

				input.Seek(index111_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred228_Php_fragment))) {s = 100;}

				input.Seek(index111_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred229_Php_fragment))) {s = 101;}

				input.Seek(index111_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred230_Php_fragment))) {s = 102;}

				input.Seek(index111_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred231_Php_fragment))) {s = 103;}

				input.Seek(index111_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred233_Php_fragment))) {s = 104;}

				input.Seek(index111_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred234_Php_fragment))) {s = 105;}

				input.Seek(index111_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred235_Php_fragment))) {s = 106;}

				input.Seek(index111_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred236_Php_fragment))) {s = 107;}

				input.Seek(index111_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred237_Php_fragment))) {s = 108;}

				input.Seek(index111_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred238_Php_fragment))) {s = 109;}

				input.Seek(index111_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred239_Php_fragment))) {s = 110;}

				input.Seek(index111_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((true)) {s = 111;}

				input.Seek(index111_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 111, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA130 : DFA
	{
		private const string DFA130_eotS =
			"\x7\xFFFF";
		private const string DFA130_eofS =
			"\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5";
		private const string DFA130_minS =
			"\x1\x10\x1\xFFFF\x1\x10\x1\x5\x1\x10\x1\xFFFF\x1\x5";
		private const string DFA130_maxS =
			"\x1\x81\x1\xFFFF\x1\x77\x1\x81\x1\x77\x1\xFFFF\x1\x81";
		private const string DFA130_acceptS =
			"\x1\xFFFF\x1\x1\x3\xFFFF\x1\x2\x1\xFFFF";
		private const string DFA130_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA130_transitionS =
			{
				"\x2\x3\x16\xFFFF\x1\x3\xE\xFFFF\x1\x3\x12\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\xB\xFFFF\x1\x3\xD\xFFFF\x1\x3\x7\xFFFF\x2\x3\x7\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x1\x1\x2",
				"",
				"\x2\x3\x16\xFFFF\x1\x3\xE\xFFFF\x1\x3\x12\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\xB\xFFFF\x1\x3\xD\xFFFF\x1\x3\x7\xFFFF\x2\x3\x7\xFFFF\x1\x3",
				"\x3\x5\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x8\xFFFF\x1\x1\x1\xFFFF\x6\x5\x8"+
				"\xFFFF\x1\x5\x7\xFFFF\x2\x5\xA\xFFFF\x1\x5\x4\xFFFF\x1\x5\x7\xFFFF\x3"+
				"\x5\x6\xFFFF\x3\x5\x7\xFFFF\x7\x5\x3\xFFFF\x1\x5\x5\xFFFF\x2\x5\x13"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x4",
				"\x2\x6\x16\xFFFF\x1\x6\xE\xFFFF\x1\x6\x12\xFFFF\x1\x6\x1\xFFFF\x1\x6"+
				"\xB\xFFFF\x1\x6\xD\xFFFF\x1\x6\x8\xFFFF\x1\x6\x7\xFFFF\x1\x6",
				"",
				"\x3\x5\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x8\xFFFF\x1\x1\x1\xFFFF\x6\x5\x8"+
				"\xFFFF\x1\x5\x7\xFFFF\x2\x5\xA\xFFFF\x1\x5\x4\xFFFF\x1\x5\x7\xFFFF\x3"+
				"\x5\x6\xFFFF\x3\x5\x7\xFFFF\x7\x5\x3\xFFFF\x1\x5\x5\xFFFF\x2\x5\x13"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x4"
			};

		private static readonly short[] DFA130_eot = DFA.UnpackEncodedString(DFA130_eotS);
		private static readonly short[] DFA130_eof = DFA.UnpackEncodedString(DFA130_eofS);
		private static readonly char[] DFA130_min = DFA.UnpackEncodedStringToUnsignedChars(DFA130_minS);
		private static readonly char[] DFA130_max = DFA.UnpackEncodedStringToUnsignedChars(DFA130_maxS);
		private static readonly short[] DFA130_accept = DFA.UnpackEncodedString(DFA130_acceptS);
		private static readonly short[] DFA130_special = DFA.UnpackEncodedString(DFA130_specialS);
		private static readonly short[][] DFA130_transition;

		static DFA130()
		{
			int numStates = DFA130_transitionS.Length;
			DFA130_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA130_transition[i] = DFA.UnpackEncodedString(DFA130_transitionS[i]);
			}
		}

		public DFA130( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 130;
			this.eot = DFA130_eot;
			this.eof = DFA130_eof;
			this.min = DFA130_min;
			this.max = DFA130_max;
			this.accept = DFA130_accept;
			this.special = DFA130_special;
			this.transition = DFA130_transition;
		}

		public override string Description { get { return "456:1: constantOrStaticAccessor : ( ( variable | qualifiedName ) '::' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _BodyString_in_prog326 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _namespaceDefinition_in_prog330 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x36BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _useStatement_in_prog336 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x36BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_prog340 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x36BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameWithAs351 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _As_in_qualifiedNameWithAs354 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UnquotedString_in_qualifiedNameWithAs356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Use_in_useStatement369 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedNameWithAs_in_useStatement371 = new BitSet(new ulong[]{0x10000000UL,0x40000000000UL});
		public static readonly BitSet _Comma_in_useStatement374 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedNameWithAs_in_useStatement376 = new BitSet(new ulong[]{0x10000000UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_useStatement380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespaceDefinition391 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_namespaceDefinition393 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_namespaceDefinition395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespaceBlock406 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_namespaceBlock408 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_namespaceBlock410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_statement426 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_statement428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_statement441 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _simpleStatement_in_statement446 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BodyString_in_statement452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespaceBlock_in_statement459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracketedBlock_in_statement464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_statement469 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_statement471 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_statement473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_statement478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDefinition_in_statement483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _complexStatement_in_statement488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleStatement_in_statement493 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_statement496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_printExpr507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_bracketedBlock518 = new BitSet(new ulong[]{0x7BA613A8C1A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_bracketedBlock520 = new BitSet(new ulong[]{0x7BA613A8C1A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _CloseCurlyBracket_in_bracketedBlock523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_interfaceDefinition534 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_interfaceDefinition536 = new BitSet(new ulong[]{0x10000000000000UL,0x4000000UL});
		public static readonly BitSet _interfaceExtends_in_interfaceDefinition538 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_interfaceDefinition544 = new BitSet(new ulong[]{0x800000041000010UL,0x400E00000000UL});
		public static readonly BitSet _interfaceMember_in_interfaceDefinition546 = new BitSet(new ulong[]{0x800000041000010UL,0x400E00000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_interfaceDefinition549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_interfaceExtends560 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_interfaceExtends562 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_interfaceExtends565 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_interfaceExtends567 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _constDefinition_in_interfaceMember580 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldModifier_in_interfaceMember587 = new BitSet(new ulong[]{0x800000000000010UL,0x400E00000000UL});
		public static readonly BitSet _Function_in_interfaceMember590 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_interfaceMember592 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_interfaceMember594 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classModifier_in_classDefinition609 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _Class_in_classDefinition615 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_classDefinition617 = new BitSet(new ulong[]{0x10000000000000UL,0x4000010UL});
		public static readonly BitSet _Extends_in_classDefinition623 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_classDefinition625 = new BitSet(new ulong[]{0x0UL,0x4000010UL});
		public static readonly BitSet _classImplements_in_classDefinition632 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_classDefinition637 = new BitSet(new ulong[]{0x800000041000010UL,0x1800400E00000000UL});
		public static readonly BitSet _classMember_in_classDefinition641 = new BitSet(new ulong[]{0x800000041000010UL,0x1800400E00000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_classDefinition646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_classImplements660 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_classImplements663 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_classImplements666 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_classImplements668 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _fieldModifier_in_classMember682 = new BitSet(new ulong[]{0x800000000000010UL,0x400E00000000UL});
		public static readonly BitSet _Function_in_classMember685 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_classMember687 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_classMember689 = new BitSet(new ulong[]{0x0UL,0x40004000000UL});
		public static readonly BitSet _bracketedBlock_in_classMember692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_classMember696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constDefinition_in_classMember702 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_classMember704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varDefinition_in_classMember709 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_classMember711 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDefinition_in_classMember716 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_classMember718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_constDefinition729 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_constDefinition731 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_constDefinition734 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_constDefinition736 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_constDefinition741 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_constDefinition743 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_constDefinition746 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_constDefinition748 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Var_in_varDefinition763 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_varDefinition765 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_varDefinition768 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_varDefinition770 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_varDefinition775 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_varDefinition777 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_varDefinition780 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_varDefinition782 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _fieldModifier_in_fieldDefinition797 = new BitSet(new ulong[]{0x10UL,0x1000400E00000000UL});
		public static readonly BitSet _VariableName_in_fieldDefinition800 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_fieldDefinition803 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_fieldDefinition805 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_fieldDefinition810 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_fieldDefinition812 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_fieldDefinition815 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_fieldDefinition817 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Abstract_in_classModifier833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessModifier_in_fieldModifier843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_fieldModifier847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_fieldModifier851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_complexStatement862 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement864 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_complexStatement866 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement868 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_complexStatement870 = new BitSet(new ulong[]{0xC0000000002UL});
		public static readonly BitSet _conditional_in_complexStatement872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_complexStatement878 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement880 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D5E11964DCE1UL,0x3UL});
		public static readonly BitSet _forInit_in_complexStatement882 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D5E11964DCE1UL,0x3UL});
		public static readonly BitSet _forCondition_in_complexStatement884 = new BitSet(new ulong[]{0x48A6118802831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _forUpdate_in_complexStatement886 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement888 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_complexStatement890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_complexStatement895 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement897 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_complexStatement899 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _As_in_complexStatement901 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _arrayEntry_in_complexStatement903 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement905 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_complexStatement907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_complexStatement912 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement914 = new BitSet(new ulong[]{0x48A6118802831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_complexStatement916 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement919 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_complexStatement921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Do_in_complexStatement926 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_complexStatement928 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _While_in_complexStatement930 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement932 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_complexStatement934 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement936 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_complexStatement938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_complexStatement943 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement945 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_complexStatement947 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement949 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_complexStatement951 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _cases_in_complexStatement952 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_complexStatement953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_complexStatement958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDefinition_in_complexStatement963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Try_in_tryStatement975 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement977 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _Catch_in_tryStatement983 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_tryStatement985 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_tryStatement987 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_tryStatement989 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_tryStatement991 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement993 = new BitSet(new ulong[]{0x40000000100002UL});
		public static readonly BitSet _Finally_in_tryStatement1001 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement1003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_simpleStatement1016 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _commaList_in_simpleStatement1018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_simpleStatement1023 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_simpleStatement1025 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_simpleStatement1028 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_simpleStatement1030 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Static_in_simpleStatement1038 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_simpleStatement1040 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_simpleStatement1043 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_simpleStatement1045 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_simpleStatement1050 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_simpleStatement1052 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_simpleStatement1055 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_simpleStatement1057 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _constDefinition_in_simpleStatement1066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_simpleStatement1071 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _Integer_in_simpleStatement1073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_simpleStatement1079 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _Integer_in_simpleStatement1081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_simpleStatement1087 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UnquotedString_in_simpleStatement1089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_simpleStatement1094 = new BitSet(new ulong[]{0x48A6118800831122UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_simpleStatement1096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_simpleStatement1102 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UnquotedString_in_simpleStatement1104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_simpleStatement1109 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_simpleStatement1111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_simpleStatement1116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_conditional1127 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_conditional1129 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_conditional1131 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_conditional1133 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_conditional1135 = new BitSet(new ulong[]{0xC0000000002UL});
		public static readonly BitSet _conditional_in_conditional1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_conditional1143 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_conditional1145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forInit1156 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_forInit1159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forCondition1170 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_forCondition1173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forUpdate1185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _casestatement_in_cases1197 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _defaultcase_in_cases1200 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_cases1202 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_cases1208 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _Case_in_casestatement1220 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_casestatement1222 = new BitSet(new ulong[]{0x8000000UL,0x40000000000UL});
		public static readonly BitSet _set_in_casestatement1224 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_casestatement1230 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _Default_in_defaultcase1244 = new BitSet(new ulong[]{0x8000000UL,0x40000000000UL});
		public static readonly BitSet _set_in_defaultcase1246 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_defaultcase1252 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _Function_in_anonymousFunctionDefinition1265 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_anonymousFunctionDefinition1267 = new BitSet(new ulong[]{0x0UL,0x400000004000000UL});
		public static readonly BitSet _Use_in_anonymousFunctionDefinition1270 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_anonymousFunctionDefinition1272 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_anonymousFunctionDefinition1276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_functionDefinition1287 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_functionDefinition1289 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_functionDefinition1291 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_functionDefinition1293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_parametersDefinition1304 = new BitSet(new ulong[]{0x80010002030120UL,0x1280C04001001400UL,0x2UL});
		public static readonly BitSet _paramDef_in_parametersDefinition1307 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_parametersDefinition1310 = new BitSet(new ulong[]{0x80010000030120UL,0x1280C04001001400UL,0x2UL});
		public static readonly BitSet _paramDef_in_parametersDefinition1312 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_parametersDefinition1318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_paramDef1330 = new BitSet(new ulong[]{0x20UL,0x1000000000000000UL});
		public static readonly BitSet _qualifiedName_in_paramDef1334 = new BitSet(new ulong[]{0x20UL,0x1000000000000000UL});
		public static readonly BitSet _paramName_in_paramDef1338 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _Equals_in_paramDef1341 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_paramDef1343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VariableName_in_paramName1356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_paramName1361 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_paramName1363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_commaList1374 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_commaList1377 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_commaList1379 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _weakLogicalOr_in_expression1394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr1405 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _Or_in_weakLogicalOr1408 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr1410 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor1423 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _Xor_in_weakLogicalXor1426 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor1428 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd1442 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _And_in_weakLogicalAnd1445 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd1447 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _listVariables_in_assignment1460 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_assignment1462 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_assignment1470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ternary_in_assignment1475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_listVariables1486 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_listVariables1488 = new BitSet(new ulong[]{0x12000000UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_listVariables1490 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_listVariables1494 = new BitSet(new ulong[]{0x12000000UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_listVariables1496 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_listVariables1501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_listVariables1507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary1518 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _QuestionMark_in_ternary1520 = new BitSet(new ulong[]{0x48A6118808831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_ternary1522 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_ternary1525 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_ternary1527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary1532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAnd_in_logicalOr1544 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _LogicalOr_in_logicalOr1547 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _logicalAnd_in_logicalOr1549 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd1562 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _LogicalAnd_in_logicalAnd1565 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd1567 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _bitwiseXor_in_bitwiseOr1581 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _Pipe_in_bitwiseOr1584 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitwiseXor_in_bitwiseOr1586 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseXor1600 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _Hat_in_bitwiseXor1603 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseXor1605 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd1618 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _Ampersand_in_bitWiseAnd1621 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd1623 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck1636 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _EqualityOperator_in_equalityCheck1639 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck1641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck1655 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _ComparisionOperator_in_comparisionCheck1658 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck1660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addition_in_bitWiseShift1673 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _ShiftOperator_in_bitWiseShift1676 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _addition_in_bitWiseShift1678 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _multiplication_in_addition1692 = new BitSet(new ulong[]{0x4000000002UL,0x100040000UL});
		public static readonly BitSet _set_in_addition1695 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _multiplication_in_addition1707 = new BitSet(new ulong[]{0x4000000002UL,0x100040000UL});
		public static readonly BitSet _logicalNot_in_multiplication1720 = new BitSet(new ulong[]{0x400000000000802UL,0x40000000UL});
		public static readonly BitSet _set_in_multiplication1723 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _logicalNot_in_multiplication1735 = new BitSet(new ulong[]{0x400000000000802UL,0x40000000UL});
		public static readonly BitSet _Bang_in_logicalNot1748 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _logicalNot_in_logicalNot1750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _instanceOf_in_logicalNot1755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _negateOrCast_in_instanceOf1766 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _Instanceof_in_instanceOf1769 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _negateOrCast_in_instanceOf1771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_negateOrCast1784 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1290D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _increment_in_negateOrCast1796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_negateOrCast1801 = new BitSet(new ulong[]{0x80010000030100UL,0x200804001001400UL});
		public static readonly BitSet _primitiveType_in_negateOrCast1803 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_negateOrCast1805 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1290D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _increment_in_negateOrCast1807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _increment_in_negateOrCast1812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncrementOperator_in_increment1875 = new BitSet(new ulong[]{0x80010000030000UL,0x1080C04001001400UL,0x3UL});
		public static readonly BitSet _name_in_increment1877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_increment1882 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IncrementOperator_in_increment1884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_increment1889 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_increment1891 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_increment1899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newOrClone_in_increment1904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_increment1909 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_increment1911 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_increment1913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_newOrClone1935 = new BitSet(new ulong[]{0x4086110800030000UL,0x1280C04001005400UL,0x3UL});
		public static readonly BitSet _nameOrFunctionCall_in_newOrClone1938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_newOrClone1942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_newOrClone1948 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _Static_in_newOrClone1950 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_newOrClone1952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_newOrClone1958 = new BitSet(new ulong[]{0x80010000030000UL,0x1080C04001001400UL,0x3UL});
		public static readonly BitSet _name_in_newOrClone1960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atomOrReference_in_newOrClone1965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _reference_in_atomOrReference1976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_atomOrReference1981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ArrayType_in_arrayDeclaration1992 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_arrayDeclaration1994 = new BitSet(new ulong[]{0x48A6118802831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration1997 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2000 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2002 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2006 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_arrayDeclaration2011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenSquareBracket_in_arrayDeclaration2016 = new BitSet(new ulong[]{0x48A6118804831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2019 = new BitSet(new ulong[]{0x14000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2022 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2024 = new BitSet(new ulong[]{0x14000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2028 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseSquareBracket_in_arrayDeclaration2033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_arrayEntry2045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_arrayEntry2049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_keyValuePair2062 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ArrayAssign_in_keyValuePair2064 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_keyValuePair2066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SingleQuotedString_in_atom2076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleQuotedString_in_atom2081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HereDoc_in_atom2086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Integer_in_atom2098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Real_in_atom2110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_in_atom2115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_atom2120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaration_in_atom2125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _requireOperator_in_atom2130 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_atom2132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_atom2137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_reference2149 = new BitSet(new ulong[]{0x4086110800030000UL,0x1280C04001005400UL,0x3UL});
		public static readonly BitSet _nameOrFunctionCall_in_reference2151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameOrFunctionCall_in_reference2156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymousFunctionDefinition_in_reference2161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_functionArguments2172 = new BitSet(new ulong[]{0x48A6118802831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_functionArguments2175 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_functionArguments2178 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_functionArguments2180 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_functionArguments2186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenSquareBracket_in_indexer2197 = new BitSet(new ulong[]{0x48A6118804831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_indexer2199 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseSquareBracket_in_indexer2202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_indexer2207 = new BitSet(new ulong[]{0x48A6118801831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_indexer2209 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_indexer2212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _InstanceMember_in_memberAccess2224 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0xBEBFD3EF3D74FEF9UL,0x3UL});
		public static readonly BitSet _expression_in_memberAccess2227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_memberAccess2231 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_memberAccess2233 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_memberAccess2235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_memberAccess2242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_memberAccess2244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_memberAccess2246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_memberAccess2248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_memberAccess2250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_memberAccess2252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_memberAccess2254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_memberAccess2256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_memberAccess2258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Do_in_memberAccess2260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Try_in_memberAccess2262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Catch_in_memberAccess2264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Finally_in_memberAccess2266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_memberAccess2268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Case_in_memberAccess2270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Default_in_memberAccess2272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_memberAccess2274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_memberAccess2276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_memberAccess2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_memberAccess2280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_memberAccess2282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_memberAccess2284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_memberAccess2286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_memberAccess2288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_memberAccess2290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_memberAccess2292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_memberAccess2294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_memberAccess2296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Instanceof_in_memberAccess2298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_memberAccess2300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_memberAccess2302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Class_in_memberAccess2304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_memberAccess2306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_memberAccess2308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_memberAccess2310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_memberAccess2312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Var_in_memberAccess2314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_memberAccess2316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _As_in_memberAccess2318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Use_in_memberAccess2320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Require_in_memberAccess2322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RequireOnce_in_memberAccess2324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Include_in_memberAccess2326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncludeOnce_in_memberAccess2328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Public_in_memberAccess2330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Private_in_memberAccess2332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Protected_in_memberAccess2334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _True_in_memberAccess2336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _False_in_memberAccess2338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HaltCompiler_in_memberAccess2340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Die_in_memberAccess2342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Empty_in_memberAccess2344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Exit_in_memberAccess2346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Eval_in_memberAccess2348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Isset_in_memberAccess2350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntType_in_memberAccess2357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntegerType_in_memberAccess2361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BoolType_in_memberAccess2365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BooleanType_in_memberAccess2369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FloatType_in_memberAccess2373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleType_in_memberAccess2377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealType_in_memberAccess2384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringType_in_memberAccess2388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ObjectType_in_memberAccess2392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_nameOrFunctionCall2408 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2410 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_nameOrFunctionCall2414 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_nameOrFunctionCall2418 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2420 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_nameOrFunctionCall2428 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2430 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_nameOrFunctionCall2433 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_nameOrFunctionCall2437 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2439 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_nameOrFunctionCall2447 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_nameOrFunctionCall2450 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_nameOrFunctionCall2454 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2456 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _predefinedFunctionName_in_nameOrFunctionCall2464 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_name2487 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_name2491 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_name2497 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_name2505 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_name2509 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_name2513 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_name2515 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_name2523 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_name2527 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _variableOrStaticAccessor_in_name2534 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2546 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_variableOrStaticAccessor2550 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_variableOrStaticAccessor2553 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_constantOrStaticAccessor2572 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_constantOrStaticAccessor2576 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_constantOrStaticAccessor2579 = new BitSet(new ulong[]{0x80010000030000UL,0x80804001001400UL});
		public static readonly BitSet _set_in_constantOrStaticAccessor2581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_constantOrStaticAccessor2637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableVariable_in_variable2649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VariableName_in_variableVariable2660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_variableVariable2665 = new BitSet(new ulong[]{0x0UL,0x1000000004000000UL,0x1UL});
		public static readonly BitSet _variableVariable_in_variableVariable2668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_variableVariable2672 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_variableVariable2674 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_variableVariable2676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_qualifiedName2689 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL});
		public static readonly BitSet _set_in_qualifiedName2692 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_qualifiedName2752 = new BitSet(new ulong[]{0x80010000030000UL,0x80804001001400UL});
		public static readonly BitSet _set_in_qualifiedName2754 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _statement_in_synpred3_Php340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred6_Php426 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_synpred6_Php428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred8_Php441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred10_Php441 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _simpleStatement_in_synpred10_Php446 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BodyString_in_synpred10_Php452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_synpred13_Php469 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred13_Php471 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_synpred13_Php473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _complexStatement_in_synpred16_Php488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred18_Php520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred46_Php872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_synpred69_Php1087 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UnquotedString_in_synpred69_Php1089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_synpred72_Php1102 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UnquotedString_in_synpred72_Php1104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred74_Php1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _casestatement_in_synpred81_Php1197 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _defaultcase_in_synpred81_Php1200 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_synpred81_Php1202 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _statement_in_synpred84_Php1230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred86_Php1252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_synpred90_Php1330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_synpred91_Php1334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_synpred95_Php1408 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _weakLogicalXor_in_synpred95_Php1410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_synpred96_Php1426 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _weakLogicalAnd_in_synpred96_Php1428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_synpred97_Php1445 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_synpred97_Php1447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_synpred99_Php1460 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_synpred99_Php1462 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_synpred99_Php1470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_synpred105_Php1518 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _QuestionMark_in_synpred105_Php1520 = new BitSet(new ulong[]{0x48A6118808831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_synpred105_Php1522 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred105_Php1525 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_synpred105_Php1527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LogicalOr_in_synpred106_Php1547 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _logicalAnd_in_synpred106_Php1549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LogicalAnd_in_synpred107_Php1565 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitwiseOr_in_synpred107_Php1567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Pipe_in_synpred108_Php1584 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitwiseXor_in_synpred108_Php1586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Hat_in_synpred109_Php1603 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitWiseAnd_in_synpred109_Php1605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_synpred110_Php1621 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _equalityCheck_in_synpred110_Php1623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EqualityOperator_in_synpred111_Php1639 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _comparisionCheck_in_synpred111_Php1641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ComparisionOperator_in_synpred112_Php1658 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitWiseShift_in_synpred112_Php1660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ShiftOperator_in_synpred113_Php1676 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _addition_in_synpred113_Php1678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred116_Php1695 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _multiplication_in_synpred116_Php1707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred119_Php1723 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _logicalNot_in_synpred119_Php1735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Instanceof_in_synpred121_Php1769 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _negateOrCast_in_synpred121_Php1771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred124_Php1784 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1290D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _increment_in_synpred124_Php1796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred125_Php1801 = new BitSet(new ulong[]{0x80010000030100UL,0x200804001001400UL});
		public static readonly BitSet _primitiveType_in_synpred125_Php1803 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred125_Php1805 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1290D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _increment_in_synpred125_Php1807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred137_Php1882 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IncrementOperator_in_synpred137_Php1884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_synpred139_Php1889 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_synpred139_Php1891 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_synpred139_Php1899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newOrClone_in_synpred140_Php1904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameOrFunctionCall_in_synpred141_Php1938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred142_Php1935 = new BitSet(new ulong[]{0x4086110800030000UL,0x1280C04001005400UL,0x3UL});
		public static readonly BitSet _nameOrFunctionCall_in_synpred142_Php1938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred142_Php1942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred143_Php1952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred144_Php1948 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _Static_in_synpred144_Php1950 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred144_Php1952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _reference_in_synpred146_Php1976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_synpred154_Php2045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred175_Php2227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred177_Php2242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_synpred178_Php2244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_synpred194_Php2276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_synpred201_Php2290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_synpred206_Php2300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_synpred207_Php2302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Require_in_synpred217_Php2322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RequireOnce_in_synpred218_Php2324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Include_in_synpred219_Php2326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncludeOnce_in_synpred220_Php2328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _True_in_synpred224_Php2336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _False_in_synpred225_Php2338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HaltCompiler_in_synpred226_Php2340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Die_in_synpred227_Php2342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Empty_in_synpred228_Php2344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Exit_in_synpred229_Php2346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Eval_in_synpred230_Php2348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Isset_in_synpred231_Php2350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntType_in_synpred232_Php2357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntegerType_in_synpred233_Php2361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BoolType_in_synpred234_Php2365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BooleanType_in_synpred235_Php2369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FloatType_in_synpred236_Php2373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleType_in_synpred237_Php2377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealType_in_synpred238_Php2384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringType_in_synpred239_Php2388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred240_Php2410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred241_Php2414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred242_Php2420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred243_Php2418 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred243_Php2420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_synpred244_Php2408 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred244_Php2410 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred244_Php2414 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred244_Php2418 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred244_Php2420 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred245_Php2433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred246_Php2439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred247_Php2437 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred247_Php2439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred248_Php2428 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred248_Php2430 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred248_Php2433 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred248_Php2437 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred248_Php2439 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred249_Php2450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred250_Php2456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred251_Php2454 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred251_Php2456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred252_Php2447 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred252_Php2450 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred252_Php2454 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred252_Php2456 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _functionArguments_in_synpred253_Php2466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_synpred254_Php2487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred257_Php2509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred258_Php2505 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred258_Php2509 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred258_Php2513 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred258_Php2515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred259_Php2523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred260_Php2527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_synpred261_Php2487 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred261_Php2491 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred261_Php2497 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred261_Php2505 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred261_Php2509 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred261_Php2513 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred261_Php2515 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred261_Php2523 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred261_Php2527 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _variable_in_synpred263_Php2546 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_synpred263_Php2550 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_synpred263_Php2553 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_synpred263_Php2555 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
