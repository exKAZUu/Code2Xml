using Code2Xml.Languages.ANTLRv3.Core;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g 2014-04-11 15:26:57

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PhpParser : Antlr.Runtime.Parser, ICustomizedAntlr3Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Abstract", "Ampersand", "And", "ArrayAssign", "ArrayType", "As", "AsignmentOperator", "Asterisk", "Bang", "BodyString", "BodyStringRest", "BodyStringRestShortTag", "BoolType", "BooleanType", "Break", "Case", "Catch", "Class", "ClassMember", "Clone", "CloseCurlyBracket", "CloseRoundBracket", "CloseSquareBracket", "Colon", "Comma", "ComparisionOperator", "Const", "Continue", "DNum", "Decimal", "Default", "Die", "Digits", "Do", "Dot", "DoubleQuotedString", "DoubleType", "Echo", "Else", "ElseIf", "Empty", "Eol", "EqualityOperator", "Equals", "EscapeCharector", "Eval", "Exit", "Exponent_DNum", "Extends", "False", "Finally", "FloatType", "For", "Foreach", "Forwardslash", "Function", "Global", "Goto", "HaltCompiler", "Hat", "HereDoc", "HereDocContents", "Hexadecimal", "If", "Implements", "Include", "IncludeOnce", "IncrementOperator", "InstanceMember", "Instanceof", "IntType", "Integer", "IntegerType", "Interface", "Isset", "List", "LogicalAnd", "LogicalOr", "Minus", "MultilineComment", "Namespace", "New", "Null", "OP", "ObjectType", "Octal", "OpenCurlyBracket", "OpenRoundBracket", "OpenSquareBracket", "Or", "Percent", "Pipe", "Plus", "Private", "Protected", "Public", "QuestionMark", "Real", "RealType", "Require", "RequireOnce", "Return", "SemiColon", "ShiftOperator", "SingleQuotedString", "SinglelineComment", "Static", "StringType", "SuppressWarnings", "Switch", "Throw", "Tilde", "True", "Try", "UnixComment", "UnquotedString", "UnquotedStringBody", "UnsetType", "Use", "Var", "VariableName", "While", "WhiteSpace", "Xor", "'$'", "'\\\\'"
	};
	public const int EOF=-1;
	public const int Abstract=4;
	public const int Ampersand=5;
	public const int And=6;
	public const int ArrayAssign=7;
	public const int ArrayType=8;
	public const int As=9;
	public const int AsignmentOperator=10;
	public const int Asterisk=11;
	public const int Bang=12;
	public const int BodyString=13;
	public const int BodyStringRest=14;
	public const int BodyStringRestShortTag=15;
	public const int BoolType=16;
	public const int BooleanType=17;
	public const int Break=18;
	public const int Case=19;
	public const int Catch=20;
	public const int Class=21;
	public const int ClassMember=22;
	public const int Clone=23;
	public const int CloseCurlyBracket=24;
	public const int CloseRoundBracket=25;
	public const int CloseSquareBracket=26;
	public const int Colon=27;
	public const int Comma=28;
	public const int ComparisionOperator=29;
	public const int Const=30;
	public const int Continue=31;
	public const int DNum=32;
	public const int Decimal=33;
	public const int Default=34;
	public const int Die=35;
	public const int Digits=36;
	public const int Do=37;
	public const int Dot=38;
	public const int DoubleQuotedString=39;
	public const int DoubleType=40;
	public const int Echo=41;
	public const int Else=42;
	public const int ElseIf=43;
	public const int Empty=44;
	public const int Eol=45;
	public const int EqualityOperator=46;
	public const int Equals=47;
	public const int EscapeCharector=48;
	public const int Eval=49;
	public const int Exit=50;
	public const int Exponent_DNum=51;
	public const int Extends=52;
	public const int False=53;
	public const int Finally=54;
	public const int FloatType=55;
	public const int For=56;
	public const int Foreach=57;
	public const int Forwardslash=58;
	public const int Function=59;
	public const int Global=60;
	public const int Goto=61;
	public const int HaltCompiler=62;
	public const int Hat=63;
	public const int HereDoc=64;
	public const int HereDocContents=65;
	public const int Hexadecimal=66;
	public const int If=67;
	public const int Implements=68;
	public const int Include=69;
	public const int IncludeOnce=70;
	public const int IncrementOperator=71;
	public const int InstanceMember=72;
	public const int Instanceof=73;
	public const int IntType=74;
	public const int Integer=75;
	public const int IntegerType=76;
	public const int Interface=77;
	public const int Isset=78;
	public const int List=79;
	public const int LogicalAnd=80;
	public const int LogicalOr=81;
	public const int Minus=82;
	public const int MultilineComment=83;
	public const int Namespace=84;
	public const int New=85;
	public const int Null=86;
	public const int OP=87;
	public const int ObjectType=88;
	public const int Octal=89;
	public const int OpenCurlyBracket=90;
	public const int OpenRoundBracket=91;
	public const int OpenSquareBracket=92;
	public const int Or=93;
	public const int Percent=94;
	public const int Pipe=95;
	public const int Plus=96;
	public const int Private=97;
	public const int Protected=98;
	public const int Public=99;
	public const int QuestionMark=100;
	public const int Real=101;
	public const int RealType=102;
	public const int Require=103;
	public const int RequireOnce=104;
	public const int Return=105;
	public const int SemiColon=106;
	public const int ShiftOperator=107;
	public const int SingleQuotedString=108;
	public const int SinglelineComment=109;
	public const int Static=110;
	public const int StringType=111;
	public const int SuppressWarnings=112;
	public const int Switch=113;
	public const int Throw=114;
	public const int Tilde=115;
	public const int True=116;
	public const int Try=117;
	public const int UnixComment=118;
	public const int UnquotedString=119;
	public const int UnquotedStringBody=120;
	public const int UnsetType=121;
	public const int Use=122;
	public const int Var=123;
	public const int VariableName=124;
	public const int While=125;
	public const int WhiteSpace=126;
	public const int Xor=127;
	public const int T__128=128;
	public const int T__129=129;

	public PhpParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public PhpParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[387+1];


		CstBuilderForAntlr3 treeAdaptor = default(CstBuilderForAntlr3);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CstBuilderForAntlr3();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref CstBuilderForAntlr3 adaptor);

	private CstBuilderForAntlr3 adaptor;

	public CstBuilderForAntlr3 TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return PhpParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g"; } }


		private bool expressionFollowsBodyString = false;


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:88:1: public prog : ( BodyString namespaceDefinition )? ( useStatement | statement )* ;
	[GrammarRule("prog")]
	public Antlr3CstNode prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		var retval = new Antlr3CstNode("prog");
		
		retval.Start = (IToken)input.LT(1);
		int prog_StartIndex = input.Index;

		object root_0 = default(object);

		IToken BodyString1 = default(IToken);
		Antlr3CstNode namespaceDefinition2 = default(Antlr3CstNode);
		Antlr3CstNode useStatement3 = default(Antlr3CstNode);
		Antlr3CstNode statement4 = default(Antlr3CstNode);

		object BodyString1_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(88, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:88:6: ( ( BodyString namespaceDefinition )? ( useStatement | statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:89:2: ( BodyString namespaceDefinition )? ( useStatement | statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(89, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:89:2: ( BodyString namespaceDefinition )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			try
			{
				alt1 = dfa1.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:89:3: BodyString namespaceDefinition
				{
				DebugLocation(89, 3);
				BodyString1=(IToken)Match(input,BodyString,Follow._BodyString_in_prog327); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BodyString1_tree = (object)adaptor.Create(BodyString1, "BodyString1", retval);
				adaptor.AddChild(root_0, BodyString1_tree);
				}
				DebugLocation(89, 14);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString = (BodyString1!=null?BodyString1.Text:default(string)).endsWith("<?=");
				}
				DebugLocation(89, 80);
				PushFollow(Follow._namespaceDefinition_in_prog331);
				namespaceDefinition2=namespaceDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespaceDefinition2.Tree, namespaceDefinition2, "namespaceDefinition2", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(90, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:2: ( useStatement | statement )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=3;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==Use))
				{
					alt2 = 1;
				}
				else if (((LA2_1>=Abstract && LA2_1<=Ampersand)||LA2_1==ArrayType||(LA2_1>=Bang && LA2_1<=BodyString)||(LA2_1>=BoolType && LA2_1<=Break)||LA2_1==Class||LA2_1==Clone||(LA2_1>=Const && LA2_1<=Continue)||LA2_1==Die||LA2_1==Do||(LA2_1>=DoubleQuotedString && LA2_1<=Echo)||LA2_1==Empty||(LA2_1>=Eval && LA2_1<=Exit)||LA2_1==False||(LA2_1>=FloatType && LA2_1<=Foreach)||(LA2_1>=Function && LA2_1<=HaltCompiler)||LA2_1==HereDoc||LA2_1==If||(LA2_1>=Include && LA2_1<=IncrementOperator)||(LA2_1>=IntType && LA2_1<=List)||LA2_1==Minus||(LA2_1>=Namespace && LA2_1<=Null)||LA2_1==ObjectType||(LA2_1>=OpenCurlyBracket && LA2_1<=OpenSquareBracket)||LA2_1==Plus||(LA2_1>=Real && LA2_1<=SemiColon)||LA2_1==SingleQuotedString||(LA2_1>=Static && LA2_1<=Try)||LA2_1==UnquotedString||LA2_1==UnsetType||(LA2_1>=VariableName && LA2_1<=While)||(LA2_1>=128 && LA2_1<=129)))
				{
					alt2 = 2;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:3: useStatement
					{
					DebugLocation(90, 3);
					PushFollow(Follow._useStatement_in_prog337);
					useStatement3=useStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, useStatement3.Tree, useStatement3, "useStatement3", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:18: statement
					{
					DebugLocation(90, 18);
					PushFollow(Follow._statement_in_prog341);
					statement4=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement4.Tree, statement4, "statement4", retval);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
			if (state.backtracking > 0) { Memoize(input, 1, prog_StartIndex); }

		}
		DebugLocation(90, 28);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_qualifiedNameWithAs();
	partial void LeaveRule_qualifiedNameWithAs();
	// $ANTLR start "qualifiedNameWithAs"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:92:1: qualifiedNameWithAs : qualifiedName ( As UnquotedString )? ;
	[GrammarRule("qualifiedNameWithAs")]
	private Antlr3CstNode qualifiedNameWithAs()
	{
		EnterRule_qualifiedNameWithAs();
		EnterRule("qualifiedNameWithAs", 2);
		var retval = new Antlr3CstNode("qualifiedNameWithAs");
		
		retval.Start = (IToken)input.LT(1);
		int qualifiedNameWithAs_StartIndex = input.Index;

		object root_0 = default(object);

		IToken As6 = default(IToken);
		IToken UnquotedString7 = default(IToken);
		Antlr3CstNode qualifiedName5 = default(Antlr3CstNode);

		object As6_tree = default(object);
		object UnquotedString7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedNameWithAs");
		DebugLocation(92, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:93:2: ( qualifiedName ( As UnquotedString )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:93:4: qualifiedName ( As UnquotedString )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(93, 4);
			PushFollow(Follow._qualifiedName_in_qualifiedNameWithAs352);
			qualifiedName5=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName5.Tree, qualifiedName5, "qualifiedName5", retval);
			DebugLocation(93, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:93:18: ( As UnquotedString )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==As))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:93:19: As UnquotedString
				{
				DebugLocation(93, 19);
				As6=(IToken)Match(input,As,Follow._As_in_qualifiedNameWithAs355); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As6_tree = (object)adaptor.Create(As6, "As6", retval);
				adaptor.AddChild(root_0, As6_tree);
				}
				DebugLocation(93, 22);
				UnquotedString7=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_qualifiedNameWithAs357); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString7_tree = (object)adaptor.Create(UnquotedString7, "UnquotedString7", retval);
				adaptor.AddChild(root_0, UnquotedString7_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedNameWithAs", 2);
			LeaveRule("qualifiedNameWithAs", 2);
			LeaveRule_qualifiedNameWithAs();
			if (state.backtracking > 0) { Memoize(input, 2, qualifiedNameWithAs_StartIndex); }

		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "qualifiedNameWithAs"); }
		return retval;

	}
	// $ANTLR end "qualifiedNameWithAs"

	partial void EnterRule_useStatement();
	partial void LeaveRule_useStatement();
	// $ANTLR start "useStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:96:1: useStatement : Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';' ;
	[GrammarRule("useStatement")]
	private Antlr3CstNode useStatement()
	{
		EnterRule_useStatement();
		EnterRule("useStatement", 3);
		var retval = new Antlr3CstNode("useStatement");
		
		retval.Start = (IToken)input.LT(1);
		int useStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Use8 = default(IToken);
		IToken char_literal10 = default(IToken);
		IToken char_literal12 = default(IToken);
		Antlr3CstNode qualifiedNameWithAs9 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedNameWithAs11 = default(Antlr3CstNode);

		object Use8_tree = default(object);
		object char_literal10_tree = default(object);
		object char_literal12_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "useStatement");
		DebugLocation(96, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:97:2: ( Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:97:4: Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(97, 4);
			Use8=(IToken)Match(input,Use,Follow._Use_in_useStatement370); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Use8_tree = (object)adaptor.Create(Use8, "Use8", retval);
			adaptor.AddChild(root_0, Use8_tree);
			}
			DebugLocation(97, 8);
			PushFollow(Follow._qualifiedNameWithAs_in_useStatement372);
			qualifiedNameWithAs9=qualifiedNameWithAs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameWithAs9.Tree, qualifiedNameWithAs9, "qualifiedNameWithAs9", retval);
			DebugLocation(97, 28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:97:28: ( ',' qualifiedNameWithAs )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==Comma))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:97:29: ',' qualifiedNameWithAs
					{
					DebugLocation(97, 29);
					char_literal10=(IToken)Match(input,Comma,Follow._Comma_in_useStatement375); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal10_tree = (object)adaptor.Create(char_literal10, "char_literal10", retval);
					adaptor.AddChild(root_0, char_literal10_tree);
					}
					DebugLocation(97, 33);
					PushFollow(Follow._qualifiedNameWithAs_in_useStatement377);
					qualifiedNameWithAs11=qualifiedNameWithAs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameWithAs11.Tree, qualifiedNameWithAs11, "qualifiedNameWithAs11", retval);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(97, 55);
			char_literal12=(IToken)Match(input,SemiColon,Follow._SemiColon_in_useStatement381); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal12_tree = (object)adaptor.Create(char_literal12, "char_literal12", retval);
			adaptor.AddChild(root_0, char_literal12_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("useStatement", 3);
			LeaveRule("useStatement", 3);
			LeaveRule_useStatement();
			if (state.backtracking > 0) { Memoize(input, 3, useStatement_StartIndex); }

		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "useStatement"); }
		return retval;

	}
	// $ANTLR end "useStatement"

	partial void EnterRule_namespaceDefinition();
	partial void LeaveRule_namespaceDefinition();
	// $ANTLR start "namespaceDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:100:1: namespaceDefinition : Namespace qualifiedName ';' ;
	[GrammarRule("namespaceDefinition")]
	private Antlr3CstNode namespaceDefinition()
	{
		EnterRule_namespaceDefinition();
		EnterRule("namespaceDefinition", 4);
		var retval = new Antlr3CstNode("namespaceDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int namespaceDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Namespace13 = default(IToken);
		IToken char_literal15 = default(IToken);
		Antlr3CstNode qualifiedName14 = default(Antlr3CstNode);

		object Namespace13_tree = default(object);
		object char_literal15_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespaceDefinition");
		DebugLocation(100, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:101:2: ( Namespace qualifiedName ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:101:4: Namespace qualifiedName ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(101, 4);
			Namespace13=(IToken)Match(input,Namespace,Follow._Namespace_in_namespaceDefinition392); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Namespace13_tree = (object)adaptor.Create(Namespace13, "Namespace13", retval);
			adaptor.AddChild(root_0, Namespace13_tree);
			}
			DebugLocation(101, 14);
			PushFollow(Follow._qualifiedName_in_namespaceDefinition394);
			qualifiedName14=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName14.Tree, qualifiedName14, "qualifiedName14", retval);
			DebugLocation(101, 28);
			char_literal15=(IToken)Match(input,SemiColon,Follow._SemiColon_in_namespaceDefinition396); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal15_tree = (object)adaptor.Create(char_literal15, "char_literal15", retval);
			adaptor.AddChild(root_0, char_literal15_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespaceDefinition", 4);
			LeaveRule("namespaceDefinition", 4);
			LeaveRule_namespaceDefinition();
			if (state.backtracking > 0) { Memoize(input, 4, namespaceDefinition_StartIndex); }

		}
		DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceDefinition"); }
		return retval;

	}
	// $ANTLR end "namespaceDefinition"

	partial void EnterRule_namespaceBlock();
	partial void LeaveRule_namespaceBlock();
	// $ANTLR start "namespaceBlock"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:104:1: namespaceBlock : Namespace qualifiedName bracketedBlock ;
	[GrammarRule("namespaceBlock")]
	private Antlr3CstNode namespaceBlock()
	{
		EnterRule_namespaceBlock();
		EnterRule("namespaceBlock", 5);
		var retval = new Antlr3CstNode("namespaceBlock");
		
		retval.Start = (IToken)input.LT(1);
		int namespaceBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Namespace16 = default(IToken);
		Antlr3CstNode qualifiedName17 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock18 = default(Antlr3CstNode);

		object Namespace16_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespaceBlock");
		DebugLocation(104, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:105:2: ( Namespace qualifiedName bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:105:4: Namespace qualifiedName bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(105, 4);
			Namespace16=(IToken)Match(input,Namespace,Follow._Namespace_in_namespaceBlock407); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Namespace16_tree = (object)adaptor.Create(Namespace16, "Namespace16", retval);
			adaptor.AddChild(root_0, Namespace16_tree);
			}
			DebugLocation(105, 14);
			PushFollow(Follow._qualifiedName_in_namespaceBlock409);
			qualifiedName17=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName17.Tree, qualifiedName17, "qualifiedName17", retval);
			DebugLocation(105, 28);
			PushFollow(Follow._bracketedBlock_in_namespaceBlock411);
			bracketedBlock18=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock18.Tree, bracketedBlock18, "bracketedBlock18", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespaceBlock", 5);
			LeaveRule("namespaceBlock", 5);
			LeaveRule_namespaceBlock();
			if (state.backtracking > 0) { Memoize(input, 5, namespaceBlock_StartIndex); }

		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceBlock"); }
		return retval;

	}
	// $ANTLR end "namespaceBlock"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:108:1: statement : ({...}? => printExpr ';' | ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | namespaceBlock | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' | ';' );
	[GrammarRule("statement")]
	private Antlr3CstNode statement()
	{
		EnterRule_statement();
		EnterRule("statement", 6);
		var retval = new Antlr3CstNode("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal20 = default(IToken);
		IToken BodyString23 = default(IToken);
		IToken UnquotedString26 = default(IToken);
		IToken Colon27 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken char_literal34 = default(IToken);
		Antlr3CstNode printExpr19 = default(Antlr3CstNode);
		Antlr3CstNode printExpr21 = default(Antlr3CstNode);
		Antlr3CstNode simpleStatement22 = default(Antlr3CstNode);
		Antlr3CstNode namespaceBlock24 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock25 = default(Antlr3CstNode);
		Antlr3CstNode statement28 = default(Antlr3CstNode);
		Antlr3CstNode classDefinition29 = default(Antlr3CstNode);
		Antlr3CstNode interfaceDefinition30 = default(Antlr3CstNode);
		Antlr3CstNode complexStatement31 = default(Antlr3CstNode);
		Antlr3CstNode simpleStatement32 = default(Antlr3CstNode);

		object char_literal20_tree = default(object);
		object BodyString23_tree = default(object);
		object UnquotedString26_tree = default(object);
		object Colon27_tree = default(object);
		object char_literal33_tree = default(object);
		object char_literal34_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(108, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:109:2: ({...}? => printExpr ';' | ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | namespaceBlock | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' | ';' )
			int alt8=10;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Static:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Bang:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred16_Php_fragment)))
				{
					alt8 = 8;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BodyString:
				{
				alt8 = 2;
				}
				break;
			case Echo:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 28, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Global:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 29, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnquotedString:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred13_Php_fragment)))
				{
					alt8 = 5;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 30, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Const:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 31, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Break:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 32, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Continue:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 33, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Goto:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 34, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Return:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 35, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Throw:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 36, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Namespace:
				{
				alt8 = 3;
				}
				break;
			case OpenCurlyBracket:
				{
				alt8 = 4;
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case StringType:
				{
				int LA8_2 = input.LA(2);

				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt8 = 1;
				}
				else if ((EvaluatePredicate(synpred10_Php_fragment)))
				{
					alt8 = 2;
				}
				else if ((EvaluatePredicate(synpred17_Php_fragment)))
				{
					alt8 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 39, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case Class:
				{
				alt8 = 6;
				}
				break;
			case Interface:
				{
				alt8 = 7;
				}
				break;
			case Do:
			case For:
			case Foreach:
			case If:
			case Switch:
			case Try:
			case While:
				{
				alt8 = 8;
				}
				break;
			case SemiColon:
				{
				alt8 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:109:4: {...}? => printExpr ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(109, 4);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
				}
				DebugLocation(109, 37);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString=false;
				}
				DebugLocation(109, 74);
				PushFollow(Follow._printExpr_in_statement427);
				printExpr19=printExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr19.Tree, printExpr19, "printExpr19", retval);
				DebugLocation(109, 84);
				char_literal20=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement429); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal20_tree = (object)adaptor.Create(char_literal20, "char_literal20", retval);
				adaptor.AddChild(root_0, char_literal20_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(110, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? )
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				switch (input.LA(1))
				{
				case List:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case VariableName:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 128:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 129:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Static:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 5, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Bang:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 6, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Minus:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 7, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenRoundBracket:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 8, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IncrementOperator:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 9, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case New:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 10, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Clone:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 11, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Ampersand:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 12, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Die:
				case Empty:
				case Eval:
				case Exit:
				case HaltCompiler:
				case Isset:
				case UnsetType:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 13, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Function:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 14, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case SingleQuotedString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 15, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case DoubleQuotedString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 16, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case HereDoc:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 17, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case SuppressWarnings:
				case Tilde:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 18, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Plus:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 19, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Integer:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 20, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Real:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 21, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case False:
				case True:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 22, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Null:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 23, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case ArrayType:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 24, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenSquareBracket:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 25, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Include:
				case IncludeOnce:
				case Require:
				case RequireOnce:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 26, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BodyString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 27, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Break:
				case Const:
				case Continue:
				case Echo:
				case Global:
				case Goto:
				case Return:
				case Throw:
					{
					alt7 = 2;
					}
					break;
				case BoolType:
				case BooleanType:
				case DoubleType:
				case FloatType:
				case IntType:
				case IntegerType:
				case ObjectType:
				case RealType:
				case StringType:
				case UnquotedString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 30, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:6: {...}? => ( printExpr )?
					{
					DebugLocation(110, 6);
					if (!((expressionFollowsBodyString)))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
					}
					DebugLocation(110, 40);
					if (state.backtracking == 0)
					{
						expressionFollowsBodyString=false;
					}
					DebugLocation(110, 77);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: ( printExpr )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if ((LA5_1==Ampersand||LA5_1==ArrayType||LA5_1==Bang||(LA5_1>=BoolType && LA5_1<=BooleanType)||LA5_1==Clone||LA5_1==Die||(LA5_1>=DoubleQuotedString && LA5_1<=DoubleType)||LA5_1==Empty||(LA5_1>=Eval && LA5_1<=Exit)||LA5_1==False||LA5_1==FloatType||LA5_1==Function||LA5_1==HaltCompiler||LA5_1==HereDoc||(LA5_1>=Include && LA5_1<=IncrementOperator)||(LA5_1>=IntType && LA5_1<=IntegerType)||(LA5_1>=Isset && LA5_1<=List)||LA5_1==Minus||(LA5_1>=New && LA5_1<=Null)||LA5_1==ObjectType||(LA5_1>=OpenRoundBracket && LA5_1<=OpenSquareBracket)||LA5_1==Plus||(LA5_1>=Real && LA5_1<=RequireOnce)||LA5_1==SingleQuotedString||(LA5_1>=Static && LA5_1<=SuppressWarnings)||(LA5_1>=Tilde && LA5_1<=True)||LA5_1==UnquotedString||LA5_1==UnsetType||LA5_1==VariableName||(LA5_1>=128 && LA5_1<=129)))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: printExpr
						{
						DebugLocation(110, 77);
						PushFollow(Follow._printExpr_in_statement442);
						printExpr21=printExpr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr21.Tree, printExpr21, "printExpr21", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(5); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: ( simpleStatement )?
					{
					DebugLocation(110, 90);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: ( simpleStatement )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if ((LA6_1==Ampersand||LA6_1==ArrayType||LA6_1==Bang||(LA6_1>=BoolType && LA6_1<=Break)||LA6_1==Clone||(LA6_1>=Const && LA6_1<=Continue)||LA6_1==Die||(LA6_1>=DoubleQuotedString && LA6_1<=Echo)||LA6_1==Empty||(LA6_1>=Eval && LA6_1<=Exit)||LA6_1==False||LA6_1==FloatType||(LA6_1>=Function && LA6_1<=HaltCompiler)||LA6_1==HereDoc||(LA6_1>=Include && LA6_1<=IncrementOperator)||(LA6_1>=IntType && LA6_1<=IntegerType)||(LA6_1>=Isset && LA6_1<=List)||LA6_1==Minus||(LA6_1>=New && LA6_1<=Null)||LA6_1==ObjectType||(LA6_1>=OpenRoundBracket && LA6_1<=OpenSquareBracket)||LA6_1==Plus||(LA6_1>=Real && LA6_1<=Return)||LA6_1==SingleQuotedString||(LA6_1>=Static && LA6_1<=SuppressWarnings)||(LA6_1>=Throw && LA6_1<=True)||LA6_1==UnquotedString||LA6_1==UnsetType||LA6_1==VariableName||(LA6_1>=128 && LA6_1<=129)))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: simpleStatement
						{
						DebugLocation(110, 90);
						PushFollow(Follow._simpleStatement_in_statement447);
						simpleStatement22=simpleStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement22.Tree, simpleStatement22, "simpleStatement22", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(6); }


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(111, 3);
				BodyString23=(IToken)Match(input,BodyString,Follow._BodyString_in_statement453); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BodyString23_tree = (object)adaptor.Create(BodyString23, "BodyString23", retval);
				adaptor.AddChild(root_0, BodyString23_tree);
				}
				DebugLocation(111, 14);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString = (BodyString23!=null?BodyString23.Text:default(string)).endsWith("<?=");
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:112:4: namespaceBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._namespaceBlock_in_statement460);
				namespaceBlock24=namespaceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespaceBlock24.Tree, namespaceBlock24, "namespaceBlock24", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:113:4: bracketedBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 4);
				PushFollow(Follow._bracketedBlock_in_statement465);
				bracketedBlock25=bracketedBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock25.Tree, bracketedBlock25, "bracketedBlock25", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:114:4: UnquotedString Colon statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 4);
				UnquotedString26=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_statement470); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString26_tree = (object)adaptor.Create(UnquotedString26, "UnquotedString26", retval);
				adaptor.AddChild(root_0, UnquotedString26_tree);
				}
				DebugLocation(114, 19);
				Colon27=(IToken)Match(input,Colon,Follow._Colon_in_statement472); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Colon27_tree = (object)adaptor.Create(Colon27, "Colon27", retval);
				adaptor.AddChild(root_0, Colon27_tree);
				}
				DebugLocation(114, 25);
				PushFollow(Follow._statement_in_statement474);
				statement28=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement28.Tree, statement28, "statement28", retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:115:4: classDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._classDefinition_in_statement479);
				classDefinition29=classDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDefinition29.Tree, classDefinition29, "classDefinition29", retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:116:4: interfaceDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(116, 4);
				PushFollow(Follow._interfaceDefinition_in_statement484);
				interfaceDefinition30=interfaceDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDefinition30.Tree, interfaceDefinition30, "interfaceDefinition30", retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:117:4: complexStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(117, 4);
				PushFollow(Follow._complexStatement_in_statement489);
				complexStatement31=complexStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, complexStatement31.Tree, complexStatement31, "complexStatement31", retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:118:4: simpleStatement ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(118, 4);
				PushFollow(Follow._simpleStatement_in_statement494);
				simpleStatement32=simpleStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement32.Tree, simpleStatement32, "simpleStatement32", retval);
				DebugLocation(118, 20);
				char_literal33=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement496); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal33_tree = (object)adaptor.Create(char_literal33, "char_literal33", retval);
				adaptor.AddChild(root_0, char_literal33_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:119:4: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(119, 4);
				char_literal34=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement501); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal34_tree = (object)adaptor.Create(char_literal34, "char_literal34", retval);
				adaptor.AddChild(root_0, char_literal34_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 6);
			LeaveRule("statement", 6);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 6, statement_StartIndex); }

		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_printExpr();
	partial void LeaveRule_printExpr();
	// $ANTLR start "printExpr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:122:1: printExpr : expression ;
	[GrammarRule("printExpr")]
	private Antlr3CstNode printExpr()
	{
		EnterRule_printExpr();
		EnterRule("printExpr", 7);
		var retval = new Antlr3CstNode("printExpr");
		
		retval.Start = (IToken)input.LT(1);
		int printExpr_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode expression35 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "printExpr");
		DebugLocation(122, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:123:2: ( expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:123:4: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(123, 4);
			PushFollow(Follow._expression_in_printExpr512);
			expression35=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression35.Tree, expression35, "expression35", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("printExpr", 7);
			LeaveRule("printExpr", 7);
			LeaveRule_printExpr();
			if (state.backtracking > 0) { Memoize(input, 7, printExpr_StartIndex); }

		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "printExpr"); }
		return retval;

	}
	// $ANTLR end "printExpr"

	partial void EnterRule_bracketedBlock();
	partial void LeaveRule_bracketedBlock();
	// $ANTLR start "bracketedBlock"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:126:1: bracketedBlock : '{' ( statement )* '}' ;
	[GrammarRule("bracketedBlock")]
	private Antlr3CstNode bracketedBlock()
	{
		EnterRule_bracketedBlock();
		EnterRule("bracketedBlock", 8);
		var retval = new Antlr3CstNode("bracketedBlock");
		
		retval.Start = (IToken)input.LT(1);
		int bracketedBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		Antlr3CstNode statement37 = default(Antlr3CstNode);

		object char_literal36_tree = default(object);
		object char_literal38_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bracketedBlock");
		DebugLocation(126, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:2: ( '{' ( statement )* '}' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:4: '{' ( statement )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(127, 4);
			char_literal36=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_bracketedBlock523); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal36_tree = (object)adaptor.Create(char_literal36, "char_literal36", retval);
			adaptor.AddChild(root_0, char_literal36_tree);
			}
			DebugLocation(127, 8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:8: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if (((LA9_1>=Abstract && LA9_1<=Ampersand)||LA9_1==ArrayType||(LA9_1>=Bang && LA9_1<=BodyString)||(LA9_1>=BoolType && LA9_1<=Break)||LA9_1==Class||LA9_1==Clone||(LA9_1>=Const && LA9_1<=Continue)||LA9_1==Die||LA9_1==Do||(LA9_1>=DoubleQuotedString && LA9_1<=Echo)||LA9_1==Empty||(LA9_1>=Eval && LA9_1<=Exit)||LA9_1==False||(LA9_1>=FloatType && LA9_1<=Foreach)||(LA9_1>=Function && LA9_1<=HaltCompiler)||LA9_1==HereDoc||LA9_1==If||(LA9_1>=Include && LA9_1<=IncrementOperator)||(LA9_1>=IntType && LA9_1<=List)||LA9_1==Minus||(LA9_1>=Namespace && LA9_1<=Null)||LA9_1==ObjectType||(LA9_1>=OpenCurlyBracket && LA9_1<=OpenSquareBracket)||LA9_1==Plus||(LA9_1>=Real && LA9_1<=SemiColon)||LA9_1==SingleQuotedString||(LA9_1>=Static && LA9_1<=Try)||LA9_1==UnquotedString||LA9_1==UnsetType||(LA9_1>=VariableName && LA9_1<=While)||(LA9_1>=128 && LA9_1<=129)))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:8: statement
					{
					DebugLocation(127, 8);
					PushFollow(Follow._statement_in_bracketedBlock525);
					statement37=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement37.Tree, statement37, "statement37", retval);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(127, 19);
			char_literal38=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_bracketedBlock528); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal38_tree = (object)adaptor.Create(char_literal38, "char_literal38", retval);
			adaptor.AddChild(root_0, char_literal38_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracketedBlock", 8);
			LeaveRule("bracketedBlock", 8);
			LeaveRule_bracketedBlock();
			if (state.backtracking > 0) { Memoize(input, 8, bracketedBlock_StartIndex); }

		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "bracketedBlock"); }
		return retval;

	}
	// $ANTLR end "bracketedBlock"

	partial void EnterRule_interfaceDefinition();
	partial void LeaveRule_interfaceDefinition();
	// $ANTLR start "interfaceDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:130:1: interfaceDefinition : Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket ;
	[GrammarRule("interfaceDefinition")]
	private Antlr3CstNode interfaceDefinition()
	{
		EnterRule_interfaceDefinition();
		EnterRule("interfaceDefinition", 9);
		var retval = new Antlr3CstNode("interfaceDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Interface39 = default(IToken);
		IToken OpenCurlyBracket42 = default(IToken);
		IToken CloseCurlyBracket44 = default(IToken);
		Antlr3CstNode qualifiedName40 = default(Antlr3CstNode);
		Antlr3CstNode interfaceExtends41 = default(Antlr3CstNode);
		Antlr3CstNode interfaceMember43 = default(Antlr3CstNode);

		object Interface39_tree = default(object);
		object OpenCurlyBracket42_tree = default(object);
		object CloseCurlyBracket44_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceDefinition");
		DebugLocation(130, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:131:2: ( Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:131:4: Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(131, 4);
			Interface39=(IToken)Match(input,Interface,Follow._Interface_in_interfaceDefinition539); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Interface39_tree = (object)adaptor.Create(Interface39, "Interface39", retval);
			adaptor.AddChild(root_0, Interface39_tree);
			}
			DebugLocation(131, 14);
			PushFollow(Follow._qualifiedName_in_interfaceDefinition541);
			qualifiedName40=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName40.Tree, qualifiedName40, "qualifiedName40", retval);
			DebugLocation(131, 28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:131:28: ( interfaceExtends )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==Extends))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:131:28: interfaceExtends
				{
				DebugLocation(131, 28);
				PushFollow(Follow._interfaceExtends_in_interfaceDefinition543);
				interfaceExtends41=interfaceExtends();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceExtends41.Tree, interfaceExtends41, "interfaceExtends41", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(132, 4);
			OpenCurlyBracket42=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_interfaceDefinition549); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenCurlyBracket42_tree = (object)adaptor.Create(OpenCurlyBracket42, "OpenCurlyBracket42", retval);
			adaptor.AddChild(root_0, OpenCurlyBracket42_tree);
			}
			DebugLocation(132, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:132:21: ( interfaceMember )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==Abstract||LA11_1==Const||LA11_1==Function||(LA11_1>=Private && LA11_1<=Public)||LA11_1==Static))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:132:21: interfaceMember
					{
					DebugLocation(132, 21);
					PushFollow(Follow._interfaceMember_in_interfaceDefinition551);
					interfaceMember43=interfaceMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceMember43.Tree, interfaceMember43, "interfaceMember43", retval);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(132, 38);
			CloseCurlyBracket44=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_interfaceDefinition554); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseCurlyBracket44_tree = (object)adaptor.Create(CloseCurlyBracket44, "CloseCurlyBracket44", retval);
			adaptor.AddChild(root_0, CloseCurlyBracket44_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceDefinition", 9);
			LeaveRule("interfaceDefinition", 9);
			LeaveRule_interfaceDefinition();
			if (state.backtracking > 0) { Memoize(input, 9, interfaceDefinition_StartIndex); }

		}
		DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceDefinition"); }
		return retval;

	}
	// $ANTLR end "interfaceDefinition"

	partial void EnterRule_interfaceExtends();
	partial void LeaveRule_interfaceExtends();
	// $ANTLR start "interfaceExtends"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:135:1: interfaceExtends : Extends qualifiedName ( Comma qualifiedName )* ;
	[GrammarRule("interfaceExtends")]
	private Antlr3CstNode interfaceExtends()
	{
		EnterRule_interfaceExtends();
		EnterRule("interfaceExtends", 10);
		var retval = new Antlr3CstNode("interfaceExtends");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceExtends_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Extends45 = default(IToken);
		IToken Comma47 = default(IToken);
		Antlr3CstNode qualifiedName46 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName48 = default(Antlr3CstNode);

		object Extends45_tree = default(object);
		object Comma47_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceExtends");
		DebugLocation(135, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:136:2: ( Extends qualifiedName ( Comma qualifiedName )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:136:4: Extends qualifiedName ( Comma qualifiedName )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(136, 4);
			Extends45=(IToken)Match(input,Extends,Follow._Extends_in_interfaceExtends565); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Extends45_tree = (object)adaptor.Create(Extends45, "Extends45", retval);
			adaptor.AddChild(root_0, Extends45_tree);
			}
			DebugLocation(136, 12);
			PushFollow(Follow._qualifiedName_in_interfaceExtends567);
			qualifiedName46=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName46.Tree, qualifiedName46, "qualifiedName46", retval);
			DebugLocation(136, 26);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:136:26: ( Comma qualifiedName )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==Comma))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:136:27: Comma qualifiedName
					{
					DebugLocation(136, 27);
					Comma47=(IToken)Match(input,Comma,Follow._Comma_in_interfaceExtends570); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Comma47_tree = (object)adaptor.Create(Comma47, "Comma47", retval);
					adaptor.AddChild(root_0, Comma47_tree);
					}
					DebugLocation(136, 33);
					PushFollow(Follow._qualifiedName_in_interfaceExtends572);
					qualifiedName48=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName48.Tree, qualifiedName48, "qualifiedName48", retval);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceExtends", 10);
			LeaveRule("interfaceExtends", 10);
			LeaveRule_interfaceExtends();
			if (state.backtracking > 0) { Memoize(input, 10, interfaceExtends_StartIndex); }

		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtends"); }
		return retval;

	}
	// $ANTLR end "interfaceExtends"

	partial void EnterRule_interfaceMember();
	partial void LeaveRule_interfaceMember();
	// $ANTLR start "interfaceMember"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:139:1: interfaceMember : ( constDefinition ';' | ( fieldModifier )* Function qualifiedName parametersDefinition ';' );
	[GrammarRule("interfaceMember")]
	private Antlr3CstNode interfaceMember()
	{
		EnterRule_interfaceMember();
		EnterRule("interfaceMember", 11);
		var retval = new Antlr3CstNode("interfaceMember");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal50 = default(IToken);
		IToken Function52 = default(IToken);
		IToken char_literal55 = default(IToken);
		Antlr3CstNode constDefinition49 = default(Antlr3CstNode);
		Antlr3CstNode fieldModifier51 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName53 = default(Antlr3CstNode);
		Antlr3CstNode parametersDefinition54 = default(Antlr3CstNode);

		object char_literal50_tree = default(object);
		object Function52_tree = default(object);
		object char_literal55_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceMember");
		DebugLocation(139, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:140:2: ( constDefinition ';' | ( fieldModifier )* Function qualifiedName parametersDefinition ';' )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==Const))
			{
				alt14 = 1;
			}
			else if ((LA14_1==Abstract||LA14_1==Function||(LA14_1>=Private && LA14_1<=Public)||LA14_1==Static))
			{
				alt14 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:140:4: constDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 4);
				PushFollow(Follow._constDefinition_in_interfaceMember585);
				constDefinition49=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition49.Tree, constDefinition49, "constDefinition49", retval);
				DebugLocation(140, 20);
				char_literal50=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember587); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal50_tree = (object)adaptor.Create(char_literal50, "char_literal50", retval);
				adaptor.AddChild(root_0, char_literal50_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:141:4: ( fieldModifier )* Function qualifiedName parametersDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:141:4: ( fieldModifier )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1==Abstract||(LA13_1>=Private && LA13_1<=Public)||LA13_1==Static))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:141:4: fieldModifier
						{
						DebugLocation(141, 4);
						PushFollow(Follow._fieldModifier_in_interfaceMember592);
						fieldModifier51=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier51.Tree, fieldModifier51, "fieldModifier51", retval);

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }

				DebugLocation(141, 19);
				Function52=(IToken)Match(input,Function,Follow._Function_in_interfaceMember595); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function52_tree = (object)adaptor.Create(Function52, "Function52", retval);
				adaptor.AddChild(root_0, Function52_tree);
				}
				DebugLocation(141, 28);
				PushFollow(Follow._qualifiedName_in_interfaceMember597);
				qualifiedName53=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName53.Tree, qualifiedName53, "qualifiedName53", retval);
				DebugLocation(141, 42);
				PushFollow(Follow._parametersDefinition_in_interfaceMember599);
				parametersDefinition54=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition54.Tree, parametersDefinition54, "parametersDefinition54", retval);
				DebugLocation(141, 63);
				char_literal55=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember601); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal55_tree = (object)adaptor.Create(char_literal55, "char_literal55", retval);
				adaptor.AddChild(root_0, char_literal55_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceMember", 11);
			LeaveRule("interfaceMember", 11);
			LeaveRule_interfaceMember();
			if (state.backtracking > 0) { Memoize(input, 11, interfaceMember_StartIndex); }

		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceMember"); }
		return retval;

	}
	// $ANTLR end "interfaceMember"

	partial void EnterRule_classDefinition();
	partial void LeaveRule_classDefinition();
	// $ANTLR start "classDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:144:1: classDefinition : ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket ;
	[GrammarRule("classDefinition")]
	private Antlr3CstNode classDefinition()
	{
		EnterRule_classDefinition();
		EnterRule("classDefinition", 12);
		var retval = new Antlr3CstNode("classDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int classDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Class57 = default(IToken);
		IToken Extends59 = default(IToken);
		IToken OpenCurlyBracket62 = default(IToken);
		IToken CloseCurlyBracket64 = default(IToken);
		Antlr3CstNode classModifier56 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName58 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName60 = default(Antlr3CstNode);
		Antlr3CstNode classImplements61 = default(Antlr3CstNode);
		Antlr3CstNode classMember63 = default(Antlr3CstNode);

		object Class57_tree = default(object);
		object Extends59_tree = default(object);
		object OpenCurlyBracket62_tree = default(object);
		object CloseCurlyBracket64_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classDefinition");
		DebugLocation(144, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:145:2: ( ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:145:6: ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(145, 6);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:145:6: ( classModifier )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==Abstract))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:145:6: classModifier
				{
				DebugLocation(145, 6);
				PushFollow(Follow._classModifier_in_classDefinition614);
				classModifier56=classModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classModifier56.Tree, classModifier56, "classModifier56", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(146, 3);
			Class57=(IToken)Match(input,Class,Follow._Class_in_classDefinition620); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Class57_tree = (object)adaptor.Create(Class57, "Class57", retval);
			adaptor.AddChild(root_0, Class57_tree);
			}
			DebugLocation(146, 9);
			PushFollow(Follow._qualifiedName_in_classDefinition622);
			qualifiedName58=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName58.Tree, qualifiedName58, "qualifiedName58", retval);
			DebugLocation(147, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:147:3: ( Extends qualifiedName )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==Extends))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:147:4: Extends qualifiedName
				{
				DebugLocation(147, 4);
				Extends59=(IToken)Match(input,Extends,Follow._Extends_in_classDefinition628); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Extends59_tree = (object)adaptor.Create(Extends59, "Extends59", retval);
				adaptor.AddChild(root_0, Extends59_tree);
				}
				DebugLocation(147, 12);
				PushFollow(Follow._qualifiedName_in_classDefinition630);
				qualifiedName60=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName60.Tree, qualifiedName60, "qualifiedName60", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(148, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:148:3: ( classImplements )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==Implements))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:148:3: classImplements
				{
				DebugLocation(148, 3);
				PushFollow(Follow._classImplements_in_classDefinition637);
				classImplements61=classImplements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classImplements61.Tree, classImplements61, "classImplements61", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(149, 3);
			OpenCurlyBracket62=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_classDefinition642); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenCurlyBracket62_tree = (object)adaptor.Create(OpenCurlyBracket62, "OpenCurlyBracket62", retval);
			adaptor.AddChild(root_0, OpenCurlyBracket62_tree);
			}
			DebugLocation(150, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:150:3: ( classMember )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==Abstract||LA18_1==Const||LA18_1==Function||(LA18_1>=Private && LA18_1<=Public)||LA18_1==Static||(LA18_1>=Var && LA18_1<=VariableName)))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:150:3: classMember
					{
					DebugLocation(150, 3);
					PushFollow(Follow._classMember_in_classDefinition646);
					classMember63=classMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classMember63.Tree, classMember63, "classMember63", retval);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }

			DebugLocation(151, 3);
			CloseCurlyBracket64=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_classDefinition651); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseCurlyBracket64_tree = (object)adaptor.Create(CloseCurlyBracket64, "CloseCurlyBracket64", retval);
			adaptor.AddChild(root_0, CloseCurlyBracket64_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classDefinition", 12);
			LeaveRule("classDefinition", 12);
			LeaveRule_classDefinition();
			if (state.backtracking > 0) { Memoize(input, 12, classDefinition_StartIndex); }

		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "classDefinition"); }
		return retval;

	}
	// $ANTLR end "classDefinition"

	partial void EnterRule_classImplements();
	partial void LeaveRule_classImplements();
	// $ANTLR start "classImplements"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:154:1: classImplements : Implements ( qualifiedName ( Comma qualifiedName )* ) ;
	[GrammarRule("classImplements")]
	private Antlr3CstNode classImplements()
	{
		EnterRule_classImplements();
		EnterRule("classImplements", 13);
		var retval = new Antlr3CstNode("classImplements");
		
		retval.Start = (IToken)input.LT(1);
		int classImplements_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Implements65 = default(IToken);
		IToken Comma67 = default(IToken);
		Antlr3CstNode qualifiedName66 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName68 = default(Antlr3CstNode);

		object Implements65_tree = default(object);
		object Comma67_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classImplements");
		DebugLocation(154, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:2: ( Implements ( qualifiedName ( Comma qualifiedName )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:5: Implements ( qualifiedName ( Comma qualifiedName )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(155, 5);
			Implements65=(IToken)Match(input,Implements,Follow._Implements_in_classImplements665); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Implements65_tree = (object)adaptor.Create(Implements65, "Implements65", retval);
			adaptor.AddChild(root_0, Implements65_tree);
			}
			DebugLocation(155, 16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:16: ( qualifiedName ( Comma qualifiedName )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:17: qualifiedName ( Comma qualifiedName )*
			{
			DebugLocation(155, 17);
			PushFollow(Follow._qualifiedName_in_classImplements668);
			qualifiedName66=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName66.Tree, qualifiedName66, "qualifiedName66", retval);
			DebugLocation(155, 31);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:31: ( Comma qualifiedName )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==Comma))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:32: Comma qualifiedName
					{
					DebugLocation(155, 32);
					Comma67=(IToken)Match(input,Comma,Follow._Comma_in_classImplements671); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Comma67_tree = (object)adaptor.Create(Comma67, "Comma67", retval);
					adaptor.AddChild(root_0, Comma67_tree);
					}
					DebugLocation(155, 38);
					PushFollow(Follow._qualifiedName_in_classImplements673);
					qualifiedName68=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName68.Tree, qualifiedName68, "qualifiedName68", retval);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classImplements", 13);
			LeaveRule("classImplements", 13);
			LeaveRule_classImplements();
			if (state.backtracking > 0) { Memoize(input, 13, classImplements_StartIndex); }

		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "classImplements"); }
		return retval;

	}
	// $ANTLR end "classImplements"

	partial void EnterRule_classMember();
	partial void LeaveRule_classMember();
	// $ANTLR start "classMember"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:158:1: classMember : ( ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' );
	[GrammarRule("classMember")]
	private Antlr3CstNode classMember()
	{
		EnterRule_classMember();
		EnterRule("classMember", 14);
		var retval = new Antlr3CstNode("classMember");
		
		retval.Start = (IToken)input.LT(1);
		int classMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function70 = default(IToken);
		IToken char_literal74 = default(IToken);
		IToken char_literal76 = default(IToken);
		IToken char_literal78 = default(IToken);
		IToken char_literal80 = default(IToken);
		Antlr3CstNode fieldModifier69 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName71 = default(Antlr3CstNode);
		Antlr3CstNode parametersDefinition72 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock73 = default(Antlr3CstNode);
		Antlr3CstNode constDefinition75 = default(Antlr3CstNode);
		Antlr3CstNode varDefinition77 = default(Antlr3CstNode);
		Antlr3CstNode fieldDefinition79 = default(Antlr3CstNode);

		object Function70_tree = default(object);
		object char_literal74_tree = default(object);
		object char_literal76_tree = default(object);
		object char_literal78_tree = default(object);
		object char_literal80_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classMember");
		DebugLocation(158, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:2: ( ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' )
			int alt22=4;
			try { DebugEnterDecision(22, false);
			try
			{
				alt22 = dfa22.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:4: ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(159, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:4: ( fieldModifier )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_1 = input.LA(1);

					if ((LA20_1==Abstract||(LA20_1>=Private && LA20_1<=Public)||LA20_1==Static))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:4: fieldModifier
						{
						DebugLocation(159, 4);
						PushFollow(Follow._fieldModifier_in_classMember687);
						fieldModifier69=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier69.Tree, fieldModifier69, "fieldModifier69", retval);

						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }

				DebugLocation(159, 19);
				Function70=(IToken)Match(input,Function,Follow._Function_in_classMember690); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function70_tree = (object)adaptor.Create(Function70, "Function70", retval);
				adaptor.AddChild(root_0, Function70_tree);
				}
				DebugLocation(159, 28);
				PushFollow(Follow._qualifiedName_in_classMember692);
				qualifiedName71=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName71.Tree, qualifiedName71, "qualifiedName71", retval);
				DebugLocation(159, 42);
				PushFollow(Follow._parametersDefinition_in_classMember694);
				parametersDefinition72=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition72.Tree, parametersDefinition72, "parametersDefinition72", retval);
				DebugLocation(159, 63);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:63: ( bracketedBlock | ';' )
				int alt21=2;
				try { DebugEnterSubRule(21);
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==OpenCurlyBracket))
				{
					alt21 = 1;
				}
				else if ((LA21_1==SemiColon))
				{
					alt21 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:64: bracketedBlock
					{
					DebugLocation(159, 64);
					PushFollow(Follow._bracketedBlock_in_classMember697);
					bracketedBlock73=bracketedBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock73.Tree, bracketedBlock73, "bracketedBlock73", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:81: ';'
					{
					DebugLocation(159, 81);
					char_literal74=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember701); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal74_tree = (object)adaptor.Create(char_literal74, "char_literal74", retval);
					adaptor.AddChild(root_0, char_literal74_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(21); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:160:4: constDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._constDefinition_in_classMember707);
				constDefinition75=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition75.Tree, constDefinition75, "constDefinition75", retval);
				DebugLocation(160, 20);
				char_literal76=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember709); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal76_tree = (object)adaptor.Create(char_literal76, "char_literal76", retval);
				adaptor.AddChild(root_0, char_literal76_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:161:4: varDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._varDefinition_in_classMember714);
				varDefinition77=varDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, varDefinition77.Tree, varDefinition77, "varDefinition77", retval);
				DebugLocation(161, 18);
				char_literal78=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember716); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal78_tree = (object)adaptor.Create(char_literal78, "char_literal78", retval);
				adaptor.AddChild(root_0, char_literal78_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:162:4: fieldDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._fieldDefinition_in_classMember721);
				fieldDefinition79=fieldDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fieldDefinition79.Tree, fieldDefinition79, "fieldDefinition79", retval);
				DebugLocation(162, 20);
				char_literal80=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember723); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal80_tree = (object)adaptor.Create(char_literal80, "char_literal80", retval);
				adaptor.AddChild(root_0, char_literal80_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classMember", 14);
			LeaveRule("classMember", 14);
			LeaveRule_classMember();
			if (state.backtracking > 0) { Memoize(input, 14, classMember_StartIndex); }

		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "classMember"); }
		return retval;

	}
	// $ANTLR end "classMember"

	partial void EnterRule_constDefinition();
	partial void LeaveRule_constDefinition();
	// $ANTLR start "constDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:165:1: constDefinition : Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )* ;
	[GrammarRule("constDefinition")]
	private Antlr3CstNode constDefinition()
	{
		EnterRule_constDefinition();
		EnterRule("constDefinition", 15);
		var retval = new Antlr3CstNode("constDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int constDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Const81 = default(IToken);
		IToken Equals83 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken Equals87 = default(IToken);
		Antlr3CstNode qualifiedName82 = default(Antlr3CstNode);
		Antlr3CstNode atom84 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName86 = default(Antlr3CstNode);
		Antlr3CstNode atom88 = default(Antlr3CstNode);

		object Const81_tree = default(object);
		object Equals83_tree = default(object);
		object char_literal85_tree = default(object);
		object Equals87_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constDefinition");
		DebugLocation(165, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:2: ( Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:4: Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(166, 4);
			Const81=(IToken)Match(input,Const,Follow._Const_in_constDefinition734); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Const81_tree = (object)adaptor.Create(Const81, "Const81", retval);
			adaptor.AddChild(root_0, Const81_tree);
			}
			DebugLocation(166, 10);
			PushFollow(Follow._qualifiedName_in_constDefinition736);
			qualifiedName82=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName82.Tree, qualifiedName82, "qualifiedName82", retval);
			DebugLocation(166, 24);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:24: ( Equals atom )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==Equals))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:25: Equals atom
				{
				DebugLocation(166, 25);
				Equals83=(IToken)Match(input,Equals,Follow._Equals_in_constDefinition739); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals83_tree = (object)adaptor.Create(Equals83, "Equals83", retval);
				adaptor.AddChild(root_0, Equals83_tree);
				}
				DebugLocation(166, 32);
				PushFollow(Follow._atom_in_constDefinition741);
				atom84=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom84.Tree, atom84, "atom84", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(166, 39);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:39: ( ',' qualifiedName ( Equals atom )? )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==Comma))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:40: ',' qualifiedName ( Equals atom )?
					{
					DebugLocation(166, 40);
					char_literal85=(IToken)Match(input,Comma,Follow._Comma_in_constDefinition746); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal85_tree = (object)adaptor.Create(char_literal85, "char_literal85", retval);
					adaptor.AddChild(root_0, char_literal85_tree);
					}
					DebugLocation(166, 44);
					PushFollow(Follow._qualifiedName_in_constDefinition748);
					qualifiedName86=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName86.Tree, qualifiedName86, "qualifiedName86", retval);
					DebugLocation(166, 58);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:58: ( Equals atom )?
					int alt24=2;
					try { DebugEnterSubRule(24);
					try { DebugEnterDecision(24, false);
					int LA24_1 = input.LA(1);

					if ((LA24_1==Equals))
					{
						alt24 = 1;
					}
					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:59: Equals atom
						{
						DebugLocation(166, 59);
						Equals87=(IToken)Match(input,Equals,Follow._Equals_in_constDefinition751); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals87_tree = (object)adaptor.Create(Equals87, "Equals87", retval);
						adaptor.AddChild(root_0, Equals87_tree);
						}
						DebugLocation(166, 66);
						PushFollow(Follow._atom_in_constDefinition753);
						atom88=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom88.Tree, atom88, "atom88", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(24); }


					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constDefinition", 15);
			LeaveRule("constDefinition", 15);
			LeaveRule_constDefinition();
			if (state.backtracking > 0) { Memoize(input, 15, constDefinition_StartIndex); }

		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "constDefinition"); }
		return retval;

	}
	// $ANTLR end "constDefinition"

	partial void EnterRule_varDefinition();
	partial void LeaveRule_varDefinition();
	// $ANTLR start "varDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:169:1: varDefinition : Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* ;
	[GrammarRule("varDefinition")]
	private Antlr3CstNode varDefinition()
	{
		EnterRule_varDefinition();
		EnterRule("varDefinition", 16);
		var retval = new Antlr3CstNode("varDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int varDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Var89 = default(IToken);
		IToken VariableName90 = default(IToken);
		IToken Equals91 = default(IToken);
		IToken char_literal93 = default(IToken);
		IToken VariableName94 = default(IToken);
		IToken Equals95 = default(IToken);
		Antlr3CstNode atom92 = default(Antlr3CstNode);
		Antlr3CstNode atom96 = default(Antlr3CstNode);

		object Var89_tree = default(object);
		object VariableName90_tree = default(object);
		object Equals91_tree = default(object);
		object char_literal93_tree = default(object);
		object VariableName94_tree = default(object);
		object Equals95_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "varDefinition");
		DebugLocation(169, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:2: ( Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:4: Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(170, 4);
			Var89=(IToken)Match(input,Var,Follow._Var_in_varDefinition768); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Var89_tree = (object)adaptor.Create(Var89, "Var89", retval);
			adaptor.AddChild(root_0, Var89_tree);
			}
			DebugLocation(170, 8);
			VariableName90=(IToken)Match(input,VariableName,Follow._VariableName_in_varDefinition770); if (state.failed) return retval;
			if (state.backtracking == 0) {
			VariableName90_tree = (object)adaptor.Create(VariableName90, "VariableName90", retval);
			adaptor.AddChild(root_0, VariableName90_tree);
			}
			DebugLocation(170, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:21: ( Equals atom )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==Equals))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:22: Equals atom
				{
				DebugLocation(170, 22);
				Equals91=(IToken)Match(input,Equals,Follow._Equals_in_varDefinition773); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals91_tree = (object)adaptor.Create(Equals91, "Equals91", retval);
				adaptor.AddChild(root_0, Equals91_tree);
				}
				DebugLocation(170, 29);
				PushFollow(Follow._atom_in_varDefinition775);
				atom92=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom92.Tree, atom92, "atom92", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(170, 36);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:36: ( ',' VariableName ( Equals atom )? )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==Comma))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:37: ',' VariableName ( Equals atom )?
					{
					DebugLocation(170, 37);
					char_literal93=(IToken)Match(input,Comma,Follow._Comma_in_varDefinition780); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal93_tree = (object)adaptor.Create(char_literal93, "char_literal93", retval);
					adaptor.AddChild(root_0, char_literal93_tree);
					}
					DebugLocation(170, 41);
					VariableName94=(IToken)Match(input,VariableName,Follow._VariableName_in_varDefinition782); if (state.failed) return retval;
					if (state.backtracking == 0) {
					VariableName94_tree = (object)adaptor.Create(VariableName94, "VariableName94", retval);
					adaptor.AddChild(root_0, VariableName94_tree);
					}
					DebugLocation(170, 54);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:54: ( Equals atom )?
					int alt27=2;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, false);
					int LA27_1 = input.LA(1);

					if ((LA27_1==Equals))
					{
						alt27 = 1;
					}
					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:55: Equals atom
						{
						DebugLocation(170, 55);
						Equals95=(IToken)Match(input,Equals,Follow._Equals_in_varDefinition785); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals95_tree = (object)adaptor.Create(Equals95, "Equals95", retval);
						adaptor.AddChild(root_0, Equals95_tree);
						}
						DebugLocation(170, 62);
						PushFollow(Follow._atom_in_varDefinition787);
						atom96=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom96.Tree, atom96, "atom96", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(27); }


					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("varDefinition", 16);
			LeaveRule("varDefinition", 16);
			LeaveRule_varDefinition();
			if (state.backtracking > 0) { Memoize(input, 16, varDefinition_StartIndex); }

		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "varDefinition"); }
		return retval;

	}
	// $ANTLR end "varDefinition"

	partial void EnterRule_fieldDefinition();
	partial void LeaveRule_fieldDefinition();
	// $ANTLR start "fieldDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:173:1: fieldDefinition : ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* ;
	[GrammarRule("fieldDefinition")]
	private Antlr3CstNode fieldDefinition()
	{
		EnterRule_fieldDefinition();
		EnterRule("fieldDefinition", 17);
		var retval = new Antlr3CstNode("fieldDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int fieldDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName98 = default(IToken);
		IToken Equals99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken VariableName102 = default(IToken);
		IToken Equals103 = default(IToken);
		Antlr3CstNode fieldModifier97 = default(Antlr3CstNode);
		Antlr3CstNode atom100 = default(Antlr3CstNode);
		Antlr3CstNode atom104 = default(Antlr3CstNode);

		object VariableName98_tree = default(object);
		object Equals99_tree = default(object);
		object char_literal101_tree = default(object);
		object VariableName102_tree = default(object);
		object Equals103_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldDefinition");
		DebugLocation(173, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:2: ( ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:4: ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(174, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:4: ( fieldModifier )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==Abstract||(LA29_1>=Private && LA29_1<=Public)||LA29_1==Static))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:4: fieldModifier
					{
					DebugLocation(174, 4);
					PushFollow(Follow._fieldModifier_in_fieldDefinition802);
					fieldModifier97=fieldModifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier97.Tree, fieldModifier97, "fieldModifier97", retval);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(174, 19);
			VariableName98=(IToken)Match(input,VariableName,Follow._VariableName_in_fieldDefinition805); if (state.failed) return retval;
			if (state.backtracking == 0) {
			VariableName98_tree = (object)adaptor.Create(VariableName98, "VariableName98", retval);
			adaptor.AddChild(root_0, VariableName98_tree);
			}
			DebugLocation(174, 32);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:32: ( Equals atom )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==Equals))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:33: Equals atom
				{
				DebugLocation(174, 33);
				Equals99=(IToken)Match(input,Equals,Follow._Equals_in_fieldDefinition808); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals99_tree = (object)adaptor.Create(Equals99, "Equals99", retval);
				adaptor.AddChild(root_0, Equals99_tree);
				}
				DebugLocation(174, 40);
				PushFollow(Follow._atom_in_fieldDefinition810);
				atom100=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom100.Tree, atom100, "atom100", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(174, 47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:47: ( ',' VariableName ( Equals atom )? )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==Comma))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:48: ',' VariableName ( Equals atom )?
					{
					DebugLocation(174, 48);
					char_literal101=(IToken)Match(input,Comma,Follow._Comma_in_fieldDefinition815); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal101_tree = (object)adaptor.Create(char_literal101, "char_literal101", retval);
					adaptor.AddChild(root_0, char_literal101_tree);
					}
					DebugLocation(174, 52);
					VariableName102=(IToken)Match(input,VariableName,Follow._VariableName_in_fieldDefinition817); if (state.failed) return retval;
					if (state.backtracking == 0) {
					VariableName102_tree = (object)adaptor.Create(VariableName102, "VariableName102", retval);
					adaptor.AddChild(root_0, VariableName102_tree);
					}
					DebugLocation(174, 65);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:65: ( Equals atom )?
					int alt31=2;
					try { DebugEnterSubRule(31);
					try { DebugEnterDecision(31, false);
					int LA31_1 = input.LA(1);

					if ((LA31_1==Equals))
					{
						alt31 = 1;
					}
					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:66: Equals atom
						{
						DebugLocation(174, 66);
						Equals103=(IToken)Match(input,Equals,Follow._Equals_in_fieldDefinition820); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals103_tree = (object)adaptor.Create(Equals103, "Equals103", retval);
						adaptor.AddChild(root_0, Equals103_tree);
						}
						DebugLocation(174, 73);
						PushFollow(Follow._atom_in_fieldDefinition822);
						atom104=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom104.Tree, atom104, "atom104", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(31); }


					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldDefinition", 17);
			LeaveRule("fieldDefinition", 17);
			LeaveRule_fieldDefinition();
			if (state.backtracking > 0) { Memoize(input, 17, fieldDefinition_StartIndex); }

		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "fieldDefinition"); }
		return retval;

	}
	// $ANTLR end "fieldDefinition"

	partial void EnterRule_classModifier();
	partial void LeaveRule_classModifier();
	// $ANTLR start "classModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:177:1: classModifier : Abstract ;
	[GrammarRule("classModifier")]
	private Antlr3CstNode classModifier()
	{
		EnterRule_classModifier();
		EnterRule("classModifier", 18);
		var retval = new Antlr3CstNode("classModifier");
		
		retval.Start = (IToken)input.LT(1);
		int classModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Abstract105 = default(IToken);

		object Abstract105_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classModifier");
		DebugLocation(177, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:178:2: ( Abstract )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:178:4: Abstract
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(178, 4);
			Abstract105=(IToken)Match(input,Abstract,Follow._Abstract_in_classModifier838); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Abstract105_tree = (object)adaptor.Create(Abstract105, "Abstract105", retval);
			adaptor.AddChild(root_0, Abstract105_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classModifier", 18);
			LeaveRule("classModifier", 18);
			LeaveRule_classModifier();
			if (state.backtracking > 0) { Memoize(input, 18, classModifier_StartIndex); }

		}
		DebugLocation(178, 11);
		} finally { DebugExitRule(GrammarFileName, "classModifier"); }
		return retval;

	}
	// $ANTLR end "classModifier"

	partial void EnterRule_fieldModifier();
	partial void LeaveRule_fieldModifier();
	// $ANTLR start "fieldModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:180:1: fieldModifier : ( accessModifier | Abstract | Static );
	[GrammarRule("fieldModifier")]
	private Antlr3CstNode fieldModifier()
	{
		EnterRule_fieldModifier();
		EnterRule("fieldModifier", 19);
		var retval = new Antlr3CstNode("fieldModifier");
		
		retval.Start = (IToken)input.LT(1);
		int fieldModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Abstract107 = default(IToken);
		IToken Static108 = default(IToken);
		Antlr3CstNode accessModifier106 = default(Antlr3CstNode);

		object Abstract107_tree = default(object);
		object Static108_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldModifier");
		DebugLocation(180, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:181:2: ( accessModifier | Abstract | Static )
			int alt33=3;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case Private:
			case Protected:
			case Public:
				{
				alt33 = 1;
				}
				break;
			case Abstract:
				{
				alt33 = 2;
				}
				break;
			case Static:
				{
				alt33 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:181:4: accessModifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._accessModifier_in_fieldModifier848);
				accessModifier106=accessModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessModifier106.Tree, accessModifier106, "accessModifier106", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:181:21: Abstract
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 21);
				Abstract107=(IToken)Match(input,Abstract,Follow._Abstract_in_fieldModifier852); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Abstract107_tree = (object)adaptor.Create(Abstract107, "Abstract107", retval);
				adaptor.AddChild(root_0, Abstract107_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:181:32: Static
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 32);
				Static108=(IToken)Match(input,Static,Follow._Static_in_fieldModifier856); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static108_tree = (object)adaptor.Create(Static108, "Static108", retval);
				adaptor.AddChild(root_0, Static108_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldModifier", 19);
			LeaveRule("fieldModifier", 19);
			LeaveRule_fieldModifier();
			if (state.backtracking > 0) { Memoize(input, 19, fieldModifier_StartIndex); }

		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "fieldModifier"); }
		return retval;

	}
	// $ANTLR end "fieldModifier"

	partial void EnterRule_complexStatement();
	partial void LeaveRule_complexStatement();
	// $ANTLR start "complexStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:184:1: complexStatement : ( If '(' expression ')' statement ( conditional )? | For '(' forInit forCondition forUpdate ')' statement | Foreach '(' expression As arrayEntry ')' statement | While '(' ( expression )? ')' statement | Do statement While '(' expression ')' ';' | Switch '(' expression ')' '{' cases '}' | tryStatement | functionDefinition );
	[GrammarRule("complexStatement")]
	private Antlr3CstNode complexStatement()
	{
		EnterRule_complexStatement();
		EnterRule("complexStatement", 20);
		var retval = new Antlr3CstNode("complexStatement");
		
		retval.Start = (IToken)input.LT(1);
		int complexStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken If109 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken char_literal112 = default(IToken);
		IToken For115 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken Foreach122 = default(IToken);
		IToken char_literal123 = default(IToken);
		IToken As125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken While129 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal132 = default(IToken);
		IToken Do134 = default(IToken);
		IToken While136 = default(IToken);
		IToken char_literal137 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken char_literal140 = default(IToken);
		IToken Switch141 = default(IToken);
		IToken char_literal142 = default(IToken);
		IToken char_literal144 = default(IToken);
		IToken char_literal145 = default(IToken);
		IToken char_literal147 = default(IToken);
		Antlr3CstNode expression111 = default(Antlr3CstNode);
		Antlr3CstNode statement113 = default(Antlr3CstNode);
		Antlr3CstNode conditional114 = default(Antlr3CstNode);
		Antlr3CstNode forInit117 = default(Antlr3CstNode);
		Antlr3CstNode forCondition118 = default(Antlr3CstNode);
		Antlr3CstNode forUpdate119 = default(Antlr3CstNode);
		Antlr3CstNode statement121 = default(Antlr3CstNode);
		Antlr3CstNode expression124 = default(Antlr3CstNode);
		Antlr3CstNode arrayEntry126 = default(Antlr3CstNode);
		Antlr3CstNode statement128 = default(Antlr3CstNode);
		Antlr3CstNode expression131 = default(Antlr3CstNode);
		Antlr3CstNode statement133 = default(Antlr3CstNode);
		Antlr3CstNode statement135 = default(Antlr3CstNode);
		Antlr3CstNode expression138 = default(Antlr3CstNode);
		Antlr3CstNode expression143 = default(Antlr3CstNode);
		Antlr3CstNode cases146 = default(Antlr3CstNode);
		Antlr3CstNode tryStatement148 = default(Antlr3CstNode);
		Antlr3CstNode functionDefinition149 = default(Antlr3CstNode);

		object If109_tree = default(object);
		object char_literal110_tree = default(object);
		object char_literal112_tree = default(object);
		object For115_tree = default(object);
		object char_literal116_tree = default(object);
		object char_literal120_tree = default(object);
		object Foreach122_tree = default(object);
		object char_literal123_tree = default(object);
		object As125_tree = default(object);
		object char_literal127_tree = default(object);
		object While129_tree = default(object);
		object char_literal130_tree = default(object);
		object char_literal132_tree = default(object);
		object Do134_tree = default(object);
		object While136_tree = default(object);
		object char_literal137_tree = default(object);
		object char_literal139_tree = default(object);
		object char_literal140_tree = default(object);
		object Switch141_tree = default(object);
		object char_literal142_tree = default(object);
		object char_literal144_tree = default(object);
		object char_literal145_tree = default(object);
		object char_literal147_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "complexStatement");
		DebugLocation(184, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:2: ( If '(' expression ')' statement ( conditional )? | For '(' forInit forCondition forUpdate ')' statement | Foreach '(' expression As arrayEntry ')' statement | While '(' ( expression )? ')' statement | Do statement While '(' expression ')' ';' | Switch '(' expression ')' '{' cases '}' | tryStatement | functionDefinition )
			int alt36=8;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case If:
				{
				alt36 = 1;
				}
				break;
			case For:
				{
				alt36 = 2;
				}
				break;
			case Foreach:
				{
				alt36 = 3;
				}
				break;
			case While:
				{
				alt36 = 4;
				}
				break;
			case Do:
				{
				alt36 = 5;
				}
				break;
			case Switch:
				{
				alt36 = 6;
				}
				break;
			case Try:
				{
				alt36 = 7;
				}
				break;
			case Function:
				{
				alt36 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:4: If '(' expression ')' statement ( conditional )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(185, 4);
				If109=(IToken)Match(input,If,Follow._If_in_complexStatement867); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If109_tree = (object)adaptor.Create(If109, "If109", retval);
				adaptor.AddChild(root_0, If109_tree);
				}
				DebugLocation(185, 7);
				char_literal110=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement869); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal110_tree = (object)adaptor.Create(char_literal110, "char_literal110", retval);
				adaptor.AddChild(root_0, char_literal110_tree);
				}
				DebugLocation(185, 11);
				PushFollow(Follow._expression_in_complexStatement871);
				expression111=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression111.Tree, expression111, "expression111", retval);
				DebugLocation(185, 22);
				char_literal112=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement873); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal112_tree = (object)adaptor.Create(char_literal112, "char_literal112", retval);
				adaptor.AddChild(root_0, char_literal112_tree);
				}
				DebugLocation(185, 26);
				PushFollow(Follow._statement_in_complexStatement875);
				statement113=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement113.Tree, statement113, "statement113", retval);
				DebugLocation(185, 36);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:36: ( conditional )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==ElseIf))
				{
					int LA34_2 = input.LA(2);

					if ((EvaluatePredicate(synpred46_Php_fragment)))
					{
						alt34 = 1;
					}
				}
				else if ((LA34_1==Else))
				{
					int LA34_2 = input.LA(2);

					if ((EvaluatePredicate(synpred46_Php_fragment)))
					{
						alt34 = 1;
					}
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:36: conditional
					{
					DebugLocation(185, 36);
					PushFollow(Follow._conditional_in_complexStatement877);
					conditional114=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional114.Tree, conditional114, "conditional114", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(34); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:186:4: For '(' forInit forCondition forUpdate ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(186, 4);
				For115=(IToken)Match(input,For,Follow._For_in_complexStatement883); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For115_tree = (object)adaptor.Create(For115, "For115", retval);
				adaptor.AddChild(root_0, For115_tree);
				}
				DebugLocation(186, 8);
				char_literal116=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement885); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal116_tree = (object)adaptor.Create(char_literal116, "char_literal116", retval);
				adaptor.AddChild(root_0, char_literal116_tree);
				}
				DebugLocation(186, 12);
				PushFollow(Follow._forInit_in_complexStatement887);
				forInit117=forInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forInit117.Tree, forInit117, "forInit117", retval);
				DebugLocation(186, 20);
				PushFollow(Follow._forCondition_in_complexStatement889);
				forCondition118=forCondition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forCondition118.Tree, forCondition118, "forCondition118", retval);
				DebugLocation(186, 33);
				PushFollow(Follow._forUpdate_in_complexStatement891);
				forUpdate119=forUpdate();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forUpdate119.Tree, forUpdate119, "forUpdate119", retval);
				DebugLocation(186, 43);
				char_literal120=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement893); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal120_tree = (object)adaptor.Create(char_literal120, "char_literal120", retval);
				adaptor.AddChild(root_0, char_literal120_tree);
				}
				DebugLocation(186, 47);
				PushFollow(Follow._statement_in_complexStatement895);
				statement121=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement121.Tree, statement121, "statement121", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:187:4: Foreach '(' expression As arrayEntry ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(187, 4);
				Foreach122=(IToken)Match(input,Foreach,Follow._Foreach_in_complexStatement900); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach122_tree = (object)adaptor.Create(Foreach122, "Foreach122", retval);
				adaptor.AddChild(root_0, Foreach122_tree);
				}
				DebugLocation(187, 12);
				char_literal123=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement902); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal123_tree = (object)adaptor.Create(char_literal123, "char_literal123", retval);
				adaptor.AddChild(root_0, char_literal123_tree);
				}
				DebugLocation(187, 16);
				PushFollow(Follow._expression_in_complexStatement904);
				expression124=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression124.Tree, expression124, "expression124", retval);
				DebugLocation(187, 27);
				As125=(IToken)Match(input,As,Follow._As_in_complexStatement906); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As125_tree = (object)adaptor.Create(As125, "As125", retval);
				adaptor.AddChild(root_0, As125_tree);
				}
				DebugLocation(187, 30);
				PushFollow(Follow._arrayEntry_in_complexStatement908);
				arrayEntry126=arrayEntry();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry126.Tree, arrayEntry126, "arrayEntry126", retval);
				DebugLocation(187, 41);
				char_literal127=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement910); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal127_tree = (object)adaptor.Create(char_literal127, "char_literal127", retval);
				adaptor.AddChild(root_0, char_literal127_tree);
				}
				DebugLocation(187, 45);
				PushFollow(Follow._statement_in_complexStatement912);
				statement128=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement128.Tree, statement128, "statement128", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:188:4: While '(' ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(188, 4);
				While129=(IToken)Match(input,While,Follow._While_in_complexStatement917); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While129_tree = (object)adaptor.Create(While129, "While129", retval);
				adaptor.AddChild(root_0, While129_tree);
				}
				DebugLocation(188, 10);
				char_literal130=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement919); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal130_tree = (object)adaptor.Create(char_literal130, "char_literal130", retval);
				adaptor.AddChild(root_0, char_literal130_tree);
				}
				DebugLocation(188, 14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:188:14: ( expression )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==Ampersand||LA35_1==ArrayType||LA35_1==Bang||(LA35_1>=BoolType && LA35_1<=BooleanType)||LA35_1==Clone||LA35_1==Die||(LA35_1>=DoubleQuotedString && LA35_1<=DoubleType)||LA35_1==Empty||(LA35_1>=Eval && LA35_1<=Exit)||LA35_1==False||LA35_1==FloatType||LA35_1==Function||LA35_1==HaltCompiler||LA35_1==HereDoc||(LA35_1>=Include && LA35_1<=IncrementOperator)||(LA35_1>=IntType && LA35_1<=IntegerType)||(LA35_1>=Isset && LA35_1<=List)||LA35_1==Minus||(LA35_1>=New && LA35_1<=Null)||LA35_1==ObjectType||(LA35_1>=OpenRoundBracket && LA35_1<=OpenSquareBracket)||LA35_1==Plus||(LA35_1>=Real && LA35_1<=RequireOnce)||LA35_1==SingleQuotedString||(LA35_1>=Static && LA35_1<=SuppressWarnings)||(LA35_1>=Tilde && LA35_1<=True)||LA35_1==UnquotedString||LA35_1==UnsetType||LA35_1==VariableName||(LA35_1>=128 && LA35_1<=129)))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:188:14: expression
					{
					DebugLocation(188, 14);
					PushFollow(Follow._expression_in_complexStatement921);
					expression131=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression131.Tree, expression131, "expression131", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(188, 26);
				char_literal132=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement924); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal132_tree = (object)adaptor.Create(char_literal132, "char_literal132", retval);
				adaptor.AddChild(root_0, char_literal132_tree);
				}
				DebugLocation(188, 30);
				PushFollow(Follow._statement_in_complexStatement926);
				statement133=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement133.Tree, statement133, "statement133", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:4: Do statement While '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(189, 4);
				Do134=(IToken)Match(input,Do,Follow._Do_in_complexStatement931); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Do134_tree = (object)adaptor.Create(Do134, "Do134", retval);
				adaptor.AddChild(root_0, Do134_tree);
				}
				DebugLocation(189, 7);
				PushFollow(Follow._statement_in_complexStatement933);
				statement135=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement135.Tree, statement135, "statement135", retval);
				DebugLocation(189, 17);
				While136=(IToken)Match(input,While,Follow._While_in_complexStatement935); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While136_tree = (object)adaptor.Create(While136, "While136", retval);
				adaptor.AddChild(root_0, While136_tree);
				}
				DebugLocation(189, 23);
				char_literal137=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement937); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal137_tree = (object)adaptor.Create(char_literal137, "char_literal137", retval);
				adaptor.AddChild(root_0, char_literal137_tree);
				}
				DebugLocation(189, 27);
				PushFollow(Follow._expression_in_complexStatement939);
				expression138=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression138.Tree, expression138, "expression138", retval);
				DebugLocation(189, 38);
				char_literal139=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement941); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal139_tree = (object)adaptor.Create(char_literal139, "char_literal139", retval);
				adaptor.AddChild(root_0, char_literal139_tree);
				}
				DebugLocation(189, 42);
				char_literal140=(IToken)Match(input,SemiColon,Follow._SemiColon_in_complexStatement943); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal140_tree = (object)adaptor.Create(char_literal140, "char_literal140", retval);
				adaptor.AddChild(root_0, char_literal140_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:190:4: Switch '(' expression ')' '{' cases '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 4);
				Switch141=(IToken)Match(input,Switch,Follow._Switch_in_complexStatement948); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Switch141_tree = (object)adaptor.Create(Switch141, "Switch141", retval);
				adaptor.AddChild(root_0, Switch141_tree);
				}
				DebugLocation(190, 11);
				char_literal142=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement950); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal142_tree = (object)adaptor.Create(char_literal142, "char_literal142", retval);
				adaptor.AddChild(root_0, char_literal142_tree);
				}
				DebugLocation(190, 15);
				PushFollow(Follow._expression_in_complexStatement952);
				expression143=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression143.Tree, expression143, "expression143", retval);
				DebugLocation(190, 26);
				char_literal144=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement954); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal144_tree = (object)adaptor.Create(char_literal144, "char_literal144", retval);
				adaptor.AddChild(root_0, char_literal144_tree);
				}
				DebugLocation(190, 30);
				char_literal145=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_complexStatement956); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal145_tree = (object)adaptor.Create(char_literal145, "char_literal145", retval);
				adaptor.AddChild(root_0, char_literal145_tree);
				}
				DebugLocation(190, 33);
				PushFollow(Follow._cases_in_complexStatement957);
				cases146=cases();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cases146.Tree, cases146, "cases146", retval);
				DebugLocation(190, 38);
				char_literal147=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_complexStatement958); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal147_tree = (object)adaptor.Create(char_literal147, "char_literal147", retval);
				adaptor.AddChild(root_0, char_literal147_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:191:4: tryStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(191, 4);
				PushFollow(Follow._tryStatement_in_complexStatement963);
				tryStatement148=tryStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tryStatement148.Tree, tryStatement148, "tryStatement148", retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:4: functionDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(192, 4);
				PushFollow(Follow._functionDefinition_in_complexStatement968);
				functionDefinition149=functionDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionDefinition149.Tree, functionDefinition149, "functionDefinition149", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("complexStatement", 20);
			LeaveRule("complexStatement", 20);
			LeaveRule_complexStatement();
			if (state.backtracking > 0) { Memoize(input, 20, complexStatement_StartIndex); }

		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "complexStatement"); }
		return retval;

	}
	// $ANTLR end "complexStatement"

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();
	// $ANTLR start "tryStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:195:1: tryStatement : Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )? ;
	[GrammarRule("tryStatement")]
	private Antlr3CstNode tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 21);
		var retval = new Antlr3CstNode("tryStatement");
		
		retval.Start = (IToken)input.LT(1);
		int tryStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Try150 = default(IToken);
		IToken Catch152 = default(IToken);
		IToken char_literal153 = default(IToken);
		IToken char_literal156 = default(IToken);
		IToken Finally158 = default(IToken);
		Antlr3CstNode bracketedBlock151 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName154 = default(Antlr3CstNode);
		Antlr3CstNode variable155 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock157 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock159 = default(Antlr3CstNode);

		object Try150_tree = default(object);
		object Catch152_tree = default(object);
		object char_literal153_tree = default(object);
		object char_literal156_tree = default(object);
		object Finally158_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(195, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:196:2: ( Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:196:4: Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(196, 4);
			Try150=(IToken)Match(input,Try,Follow._Try_in_tryStatement980); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Try150_tree = (object)adaptor.Create(Try150, "Try150", retval);
			adaptor.AddChild(root_0, Try150_tree);
			}
			DebugLocation(196, 8);
			PushFollow(Follow._bracketedBlock_in_tryStatement982);
			bracketedBlock151=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock151.Tree, bracketedBlock151, "bracketedBlock151", retval);
			DebugLocation(197, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:197:4: ( Catch '(' qualifiedName variable ')' bracketedBlock )+
			int cnt37=0;
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==Catch))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:197:5: Catch '(' qualifiedName variable ')' bracketedBlock
					{
					DebugLocation(197, 5);
					Catch152=(IToken)Match(input,Catch,Follow._Catch_in_tryStatement988); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Catch152_tree = (object)adaptor.Create(Catch152, "Catch152", retval);
					adaptor.AddChild(root_0, Catch152_tree);
					}
					DebugLocation(197, 11);
					char_literal153=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_tryStatement990); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal153_tree = (object)adaptor.Create(char_literal153, "char_literal153", retval);
					adaptor.AddChild(root_0, char_literal153_tree);
					}
					DebugLocation(197, 15);
					PushFollow(Follow._qualifiedName_in_tryStatement992);
					qualifiedName154=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName154.Tree, qualifiedName154, "qualifiedName154", retval);
					DebugLocation(197, 29);
					PushFollow(Follow._variable_in_tryStatement994);
					variable155=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable155.Tree, variable155, "variable155", retval);
					DebugLocation(197, 38);
					char_literal156=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_tryStatement996); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal156_tree = (object)adaptor.Create(char_literal156, "char_literal156", retval);
					adaptor.AddChild(root_0, char_literal156_tree);
					}
					DebugLocation(197, 42);
					PushFollow(Follow._bracketedBlock_in_tryStatement998);
					bracketedBlock157=bracketedBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock157.Tree, bracketedBlock157, "bracketedBlock157", retval);

					}
					break;

				default:
					if (cnt37 >= 1)
						goto loop37;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee37 = new EarlyExitException( 37, input );
					DebugRecognitionException(eee37);
					throw eee37;
				}
				cnt37++;
			}
			loop37:
				;

			} finally { DebugExitSubRule(37); }

			DebugLocation(198, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:198:4: ( Finally bracketedBlock )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==Finally))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:198:5: Finally bracketedBlock
				{
				DebugLocation(198, 5);
				Finally158=(IToken)Match(input,Finally,Follow._Finally_in_tryStatement1006); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Finally158_tree = (object)adaptor.Create(Finally158, "Finally158", retval);
				adaptor.AddChild(root_0, Finally158_tree);
				}
				DebugLocation(198, 13);
				PushFollow(Follow._bracketedBlock_in_tryStatement1008);
				bracketedBlock159=bracketedBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock159.Tree, bracketedBlock159, "bracketedBlock159", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryStatement", 21);
			LeaveRule("tryStatement", 21);
			LeaveRule_tryStatement();
			if (state.backtracking > 0) { Memoize(input, 21, tryStatement_StartIndex); }

		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return retval;

	}
	// $ANTLR end "tryStatement"

	partial void EnterRule_simpleStatement();
	partial void LeaveRule_simpleStatement();
	// $ANTLR start "simpleStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:201:1: simpleStatement : ( Echo commaList | Global variable ( ',' variable )* | Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* | constDefinition | Break ( Integer )? | Continue ( Integer )? | Goto UnquotedString | Return ( expression )? | Goto UnquotedString | Throw expression | expression );
	[GrammarRule("simpleStatement")]
	private Antlr3CstNode simpleStatement()
	{
		EnterRule_simpleStatement();
		EnterRule("simpleStatement", 22);
		var retval = new Antlr3CstNode("simpleStatement");
		
		retval.Start = (IToken)input.LT(1);
		int simpleStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Echo160 = default(IToken);
		IToken Global162 = default(IToken);
		IToken char_literal164 = default(IToken);
		IToken Static166 = default(IToken);
		IToken VariableName167 = default(IToken);
		IToken Equals168 = default(IToken);
		IToken char_literal170 = default(IToken);
		IToken VariableName171 = default(IToken);
		IToken Equals172 = default(IToken);
		IToken Break175 = default(IToken);
		IToken Integer176 = default(IToken);
		IToken Continue177 = default(IToken);
		IToken Integer178 = default(IToken);
		IToken Goto179 = default(IToken);
		IToken UnquotedString180 = default(IToken);
		IToken Return181 = default(IToken);
		IToken Goto183 = default(IToken);
		IToken UnquotedString184 = default(IToken);
		IToken Throw185 = default(IToken);
		Antlr3CstNode commaList161 = default(Antlr3CstNode);
		Antlr3CstNode variable163 = default(Antlr3CstNode);
		Antlr3CstNode variable165 = default(Antlr3CstNode);
		Antlr3CstNode atom169 = default(Antlr3CstNode);
		Antlr3CstNode atom173 = default(Antlr3CstNode);
		Antlr3CstNode constDefinition174 = default(Antlr3CstNode);
		Antlr3CstNode expression182 = default(Antlr3CstNode);
		Antlr3CstNode expression186 = default(Antlr3CstNode);
		Antlr3CstNode expression187 = default(Antlr3CstNode);

		object Echo160_tree = default(object);
		object Global162_tree = default(object);
		object char_literal164_tree = default(object);
		object Static166_tree = default(object);
		object VariableName167_tree = default(object);
		object Equals168_tree = default(object);
		object char_literal170_tree = default(object);
		object VariableName171_tree = default(object);
		object Equals172_tree = default(object);
		object Break175_tree = default(object);
		object Integer176_tree = default(object);
		object Continue177_tree = default(object);
		object Integer178_tree = default(object);
		object Goto179_tree = default(object);
		object UnquotedString180_tree = default(object);
		object Return181_tree = default(object);
		object Goto183_tree = default(object);
		object UnquotedString184_tree = default(object);
		object Throw185_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "simpleStatement");
		DebugLocation(201, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:202:2: ( Echo commaList | Global variable ( ',' variable )* | Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* | constDefinition | Break ( Integer )? | Continue ( Integer )? | Goto UnquotedString | Return ( expression )? | Goto UnquotedString | Throw expression | expression )
			int alt46=11;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case Echo:
				{
				alt46 = 1;
				}
				break;
			case Global:
				{
				alt46 = 2;
				}
				break;
			case Static:
				{
				int LA46_2 = input.LA(2);

				if ((LA46_2==VariableName))
				{
					alt46 = 3;
				}
				else if ((LA46_2==EOF||(LA46_2>=Ampersand && LA46_2<=And)||LA46_2==Asterisk||LA46_2==BodyString||LA46_2==ClassMember||LA46_2==ComparisionOperator||LA46_2==Dot||LA46_2==EqualityOperator||LA46_2==Forwardslash||LA46_2==Hat||(LA46_2>=InstanceMember && LA46_2<=Instanceof)||(LA46_2>=LogicalAnd && LA46_2<=Minus)||(LA46_2>=OpenCurlyBracket && LA46_2<=Plus)||LA46_2==QuestionMark||(LA46_2>=SemiColon && LA46_2<=ShiftOperator)||LA46_2==Xor||LA46_2==129))
				{
					alt46 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Const:
				{
				alt46 = 4;
				}
				break;
			case Break:
				{
				alt46 = 5;
				}
				break;
			case Continue:
				{
				alt46 = 6;
				}
				break;
			case Goto:
				{
				int LA46_2 = input.LA(2);

				if ((LA46_2==UnquotedString))
				{
					int LA46_3 = input.LA(3);

					if ((EvaluatePredicate(synpred69_Php_fragment)))
					{
						alt46 = 7;
					}
					else if ((EvaluatePredicate(synpred72_Php_fragment)))
					{
						alt46 = 9;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 46, 12, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Return:
				{
				alt46 = 8;
				}
				break;
			case Throw:
				{
				alt46 = 10;
				}
				break;
			case Ampersand:
			case ArrayType:
			case Bang:
			case BoolType:
			case BooleanType:
			case Clone:
			case Die:
			case DoubleQuotedString:
			case DoubleType:
			case Empty:
			case Eval:
			case Exit:
			case False:
			case FloatType:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case IncrementOperator:
			case IntType:
			case Integer:
			case IntegerType:
			case Isset:
			case List:
			case Minus:
			case New:
			case Null:
			case ObjectType:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case StringType:
			case SuppressWarnings:
			case Tilde:
			case True:
			case UnquotedString:
			case UnsetType:
			case VariableName:
			case 128:
			case 129:
				{
				alt46 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:202:4: Echo commaList
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(202, 4);
				Echo160=(IToken)Match(input,Echo,Follow._Echo_in_simpleStatement1021); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Echo160_tree = (object)adaptor.Create(Echo160, "Echo160", retval);
				adaptor.AddChild(root_0, Echo160_tree);
				}
				DebugLocation(202, 9);
				PushFollow(Follow._commaList_in_simpleStatement1023);
				commaList161=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList161.Tree, commaList161, "commaList161", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:203:4: Global variable ( ',' variable )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(203, 4);
				Global162=(IToken)Match(input,Global,Follow._Global_in_simpleStatement1028); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Global162_tree = (object)adaptor.Create(Global162, "Global162", retval);
				adaptor.AddChild(root_0, Global162_tree);
				}
				DebugLocation(203, 11);
				PushFollow(Follow._variable_in_simpleStatement1030);
				variable163=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable163.Tree, variable163, "variable163", retval);
				DebugLocation(203, 20);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:203:20: ( ',' variable )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					int LA39_1 = input.LA(1);

					if ((LA39_1==Comma))
					{
						alt39 = 1;
					}


					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:203:21: ',' variable
						{
						DebugLocation(203, 21);
						char_literal164=(IToken)Match(input,Comma,Follow._Comma_in_simpleStatement1033); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal164_tree = (object)adaptor.Create(char_literal164, "char_literal164", retval);
						adaptor.AddChild(root_0, char_literal164_tree);
						}
						DebugLocation(203, 25);
						PushFollow(Follow._variable_in_simpleStatement1035);
						variable165=variable();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, variable165.Tree, variable165, "variable165", retval);

						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:204:4: Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(204, 4);
				Static166=(IToken)Match(input,Static,Follow._Static_in_simpleStatement1043); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static166_tree = (object)adaptor.Create(Static166, "Static166", retval);
				adaptor.AddChild(root_0, Static166_tree);
				}
				DebugLocation(204, 11);
				VariableName167=(IToken)Match(input,VariableName,Follow._VariableName_in_simpleStatement1045); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName167_tree = (object)adaptor.Create(VariableName167, "VariableName167", retval);
				adaptor.AddChild(root_0, VariableName167_tree);
				}
				DebugLocation(204, 24);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:204:24: ( Equals atom )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==Equals))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:204:25: Equals atom
					{
					DebugLocation(204, 25);
					Equals168=(IToken)Match(input,Equals,Follow._Equals_in_simpleStatement1048); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Equals168_tree = (object)adaptor.Create(Equals168, "Equals168", retval);
					adaptor.AddChild(root_0, Equals168_tree);
					}
					DebugLocation(204, 32);
					PushFollow(Follow._atom_in_simpleStatement1050);
					atom169=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom169.Tree, atom169, "atom169", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(204, 39);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:204:39: ( ',' VariableName ( Equals atom )? )*
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_1 = input.LA(1);

					if ((LA42_1==Comma))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch ( alt42 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:204:40: ',' VariableName ( Equals atom )?
						{
						DebugLocation(204, 40);
						char_literal170=(IToken)Match(input,Comma,Follow._Comma_in_simpleStatement1055); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal170_tree = (object)adaptor.Create(char_literal170, "char_literal170", retval);
						adaptor.AddChild(root_0, char_literal170_tree);
						}
						DebugLocation(204, 44);
						VariableName171=(IToken)Match(input,VariableName,Follow._VariableName_in_simpleStatement1057); if (state.failed) return retval;
						if (state.backtracking == 0) {
						VariableName171_tree = (object)adaptor.Create(VariableName171, "VariableName171", retval);
						adaptor.AddChild(root_0, VariableName171_tree);
						}
						DebugLocation(204, 57);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:204:57: ( Equals atom )?
						int alt41=2;
						try { DebugEnterSubRule(41);
						try { DebugEnterDecision(41, false);
						int LA41_1 = input.LA(1);

						if ((LA41_1==Equals))
						{
							alt41 = 1;
						}
						} finally { DebugExitDecision(41); }
						switch (alt41)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:204:58: Equals atom
							{
							DebugLocation(204, 58);
							Equals172=(IToken)Match(input,Equals,Follow._Equals_in_simpleStatement1060); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Equals172_tree = (object)adaptor.Create(Equals172, "Equals172", retval);
							adaptor.AddChild(root_0, Equals172_tree);
							}
							DebugLocation(204, 65);
							PushFollow(Follow._atom_in_simpleStatement1062);
							atom173=atom();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, atom173.Tree, atom173, "atom173", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(41); }


						}
						break;

					default:
						goto loop42;
					}
				}

				loop42:
					;

				} finally { DebugExitSubRule(42); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:205:4: constDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(205, 4);
				PushFollow(Follow._constDefinition_in_simpleStatement1071);
				constDefinition174=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition174.Tree, constDefinition174, "constDefinition174", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:206:4: Break ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(206, 4);
				Break175=(IToken)Match(input,Break,Follow._Break_in_simpleStatement1076); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Break175_tree = (object)adaptor.Create(Break175, "Break175", retval);
				adaptor.AddChild(root_0, Break175_tree);
				}
				DebugLocation(206, 10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:206:10: ( Integer )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if ((LA43_1==Integer))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:206:10: Integer
					{
					DebugLocation(206, 10);
					Integer176=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement1078); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer176_tree = (object)adaptor.Create(Integer176, "Integer176", retval);
					adaptor.AddChild(root_0, Integer176_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(43); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:207:4: Continue ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(207, 4);
				Continue177=(IToken)Match(input,Continue,Follow._Continue_in_simpleStatement1084); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Continue177_tree = (object)adaptor.Create(Continue177, "Continue177", retval);
				adaptor.AddChild(root_0, Continue177_tree);
				}
				DebugLocation(207, 13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:207:13: ( Integer )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==Integer))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:207:13: Integer
					{
					DebugLocation(207, 13);
					Integer178=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement1086); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer178_tree = (object)adaptor.Create(Integer178, "Integer178", retval);
					adaptor.AddChild(root_0, Integer178_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(44); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:208:4: Goto UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(208, 4);
				Goto179=(IToken)Match(input,Goto,Follow._Goto_in_simpleStatement1092); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto179_tree = (object)adaptor.Create(Goto179, "Goto179", retval);
				adaptor.AddChild(root_0, Goto179_tree);
				}
				DebugLocation(208, 9);
				UnquotedString180=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_simpleStatement1094); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString180_tree = (object)adaptor.Create(UnquotedString180, "UnquotedString180", retval);
				adaptor.AddChild(root_0, UnquotedString180_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:4: Return ( expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(209, 4);
				Return181=(IToken)Match(input,Return,Follow._Return_in_simpleStatement1099); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Return181_tree = (object)adaptor.Create(Return181, "Return181", retval);
				adaptor.AddChild(root_0, Return181_tree);
				}
				DebugLocation(209, 11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:11: ( expression )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==Ampersand||LA45_1==ArrayType||LA45_1==Bang||(LA45_1>=BoolType && LA45_1<=BooleanType)||LA45_1==Clone||LA45_1==Die||(LA45_1>=DoubleQuotedString && LA45_1<=DoubleType)||LA45_1==Empty||(LA45_1>=Eval && LA45_1<=Exit)||LA45_1==False||LA45_1==FloatType||LA45_1==Function||LA45_1==HaltCompiler||LA45_1==HereDoc||(LA45_1>=Include && LA45_1<=IncrementOperator)||(LA45_1>=IntType && LA45_1<=IntegerType)||(LA45_1>=Isset && LA45_1<=List)||LA45_1==Minus||(LA45_1>=New && LA45_1<=Null)||LA45_1==ObjectType||(LA45_1>=OpenRoundBracket && LA45_1<=OpenSquareBracket)||LA45_1==Plus||(LA45_1>=Real && LA45_1<=RequireOnce)||LA45_1==SingleQuotedString||(LA45_1>=Static && LA45_1<=SuppressWarnings)||(LA45_1>=Tilde && LA45_1<=True)||LA45_1==UnquotedString||LA45_1==UnsetType||LA45_1==VariableName||(LA45_1>=128 && LA45_1<=129)))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:11: expression
					{
					DebugLocation(209, 11);
					PushFollow(Follow._expression_in_simpleStatement1101);
					expression182=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression182.Tree, expression182, "expression182", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(45); }


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:210:4: Goto UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(210, 4);
				Goto183=(IToken)Match(input,Goto,Follow._Goto_in_simpleStatement1107); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto183_tree = (object)adaptor.Create(Goto183, "Goto183", retval);
				adaptor.AddChild(root_0, Goto183_tree);
				}
				DebugLocation(210, 9);
				UnquotedString184=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_simpleStatement1109); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString184_tree = (object)adaptor.Create(UnquotedString184, "UnquotedString184", retval);
				adaptor.AddChild(root_0, UnquotedString184_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:211:4: Throw expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(211, 4);
				Throw185=(IToken)Match(input,Throw,Follow._Throw_in_simpleStatement1114); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Throw185_tree = (object)adaptor.Create(Throw185, "Throw185", retval);
				adaptor.AddChild(root_0, Throw185_tree);
				}
				DebugLocation(211, 10);
				PushFollow(Follow._expression_in_simpleStatement1116);
				expression186=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression186.Tree, expression186, "expression186", retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:212:4: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(212, 4);
				PushFollow(Follow._expression_in_simpleStatement1121);
				expression187=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression187.Tree, expression187, "expression187", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleStatement", 22);
			LeaveRule("simpleStatement", 22);
			LeaveRule_simpleStatement();
			if (state.backtracking > 0) { Memoize(input, 22, simpleStatement_StartIndex); }

		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "simpleStatement"); }
		return retval;

	}
	// $ANTLR end "simpleStatement"

	partial void EnterRule_conditional();
	partial void LeaveRule_conditional();
	// $ANTLR start "conditional"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:215:1: conditional : ( ElseIf '(' expression ')' statement ( conditional )? | Else statement );
	[GrammarRule("conditional")]
	private Antlr3CstNode conditional()
	{
		EnterRule_conditional();
		EnterRule("conditional", 23);
		var retval = new Antlr3CstNode("conditional");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ElseIf188 = default(IToken);
		IToken char_literal189 = default(IToken);
		IToken char_literal191 = default(IToken);
		IToken Else194 = default(IToken);
		Antlr3CstNode expression190 = default(Antlr3CstNode);
		Antlr3CstNode statement192 = default(Antlr3CstNode);
		Antlr3CstNode conditional193 = default(Antlr3CstNode);
		Antlr3CstNode statement195 = default(Antlr3CstNode);

		object ElseIf188_tree = default(object);
		object char_literal189_tree = default(object);
		object char_literal191_tree = default(object);
		object Else194_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional");
		DebugLocation(215, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:216:2: ( ElseIf '(' expression ')' statement ( conditional )? | Else statement )
			int alt48=2;
			try { DebugEnterDecision(48, false);
			int LA48_1 = input.LA(1);

			if ((LA48_1==ElseIf))
			{
				alt48 = 1;
			}
			else if ((LA48_1==Else))
			{
				alt48 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:216:4: ElseIf '(' expression ')' statement ( conditional )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(216, 4);
				ElseIf188=(IToken)Match(input,ElseIf,Follow._ElseIf_in_conditional1132); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf188_tree = (object)adaptor.Create(ElseIf188, "ElseIf188", retval);
				adaptor.AddChild(root_0, ElseIf188_tree);
				}
				DebugLocation(216, 11);
				char_literal189=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_conditional1134); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal189_tree = (object)adaptor.Create(char_literal189, "char_literal189", retval);
				adaptor.AddChild(root_0, char_literal189_tree);
				}
				DebugLocation(216, 15);
				PushFollow(Follow._expression_in_conditional1136);
				expression190=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression190.Tree, expression190, "expression190", retval);
				DebugLocation(216, 26);
				char_literal191=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_conditional1138); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal191_tree = (object)adaptor.Create(char_literal191, "char_literal191", retval);
				adaptor.AddChild(root_0, char_literal191_tree);
				}
				DebugLocation(216, 30);
				PushFollow(Follow._statement_in_conditional1140);
				statement192=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement192.Tree, statement192, "statement192", retval);
				DebugLocation(216, 40);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:216:40: ( conditional )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==ElseIf))
				{
					int LA47_2 = input.LA(2);

					if ((EvaluatePredicate(synpred74_Php_fragment)))
					{
						alt47 = 1;
					}
				}
				else if ((LA47_1==Else))
				{
					int LA47_2 = input.LA(2);

					if ((EvaluatePredicate(synpred74_Php_fragment)))
					{
						alt47 = 1;
					}
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:216:40: conditional
					{
					DebugLocation(216, 40);
					PushFollow(Follow._conditional_in_conditional1142);
					conditional193=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional193.Tree, conditional193, "conditional193", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:217:4: Else statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(217, 4);
				Else194=(IToken)Match(input,Else,Follow._Else_in_conditional1148); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else194_tree = (object)adaptor.Create(Else194, "Else194", retval);
				adaptor.AddChild(root_0, Else194_tree);
				}
				DebugLocation(217, 9);
				PushFollow(Follow._statement_in_conditional1150);
				statement195=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement195.Tree, statement195, "statement195", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional", 23);
			LeaveRule("conditional", 23);
			LeaveRule_conditional();
			if (state.backtracking > 0) { Memoize(input, 23, conditional_StartIndex); }

		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional"); }
		return retval;

	}
	// $ANTLR end "conditional"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:220:1: forInit : ( commaList )? ';' ;
	[GrammarRule("forInit")]
	private Antlr3CstNode forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 24);
		var retval = new Antlr3CstNode("forInit");
		
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal197 = default(IToken);
		Antlr3CstNode commaList196 = default(Antlr3CstNode);

		object char_literal197_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(220, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:221:2: ( ( commaList )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:221:4: ( commaList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(221, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:221:4: ( commaList )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==Ampersand||LA49_1==ArrayType||LA49_1==Bang||(LA49_1>=BoolType && LA49_1<=BooleanType)||LA49_1==Clone||LA49_1==Die||(LA49_1>=DoubleQuotedString && LA49_1<=DoubleType)||LA49_1==Empty||(LA49_1>=Eval && LA49_1<=Exit)||LA49_1==False||LA49_1==FloatType||LA49_1==Function||LA49_1==HaltCompiler||LA49_1==HereDoc||(LA49_1>=Include && LA49_1<=IncrementOperator)||(LA49_1>=IntType && LA49_1<=IntegerType)||(LA49_1>=Isset && LA49_1<=List)||LA49_1==Minus||(LA49_1>=New && LA49_1<=Null)||LA49_1==ObjectType||(LA49_1>=OpenRoundBracket && LA49_1<=OpenSquareBracket)||LA49_1==Plus||(LA49_1>=Real && LA49_1<=RequireOnce)||LA49_1==SingleQuotedString||(LA49_1>=Static && LA49_1<=SuppressWarnings)||(LA49_1>=Tilde && LA49_1<=True)||LA49_1==UnquotedString||LA49_1==UnsetType||LA49_1==VariableName||(LA49_1>=128 && LA49_1<=129)))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:221:4: commaList
				{
				DebugLocation(221, 4);
				PushFollow(Follow._commaList_in_forInit1161);
				commaList196=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList196.Tree, commaList196, "commaList196", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }

			DebugLocation(221, 15);
			char_literal197=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forInit1164); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal197_tree = (object)adaptor.Create(char_literal197, "char_literal197", retval);
			adaptor.AddChild(root_0, char_literal197_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 24);
			LeaveRule("forInit", 24);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 24, forInit_StartIndex); }

		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:224:1: forCondition : ( commaList )? ';' ;
	[GrammarRule("forCondition")]
	private Antlr3CstNode forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 25);
		var retval = new Antlr3CstNode("forCondition");
		
		retval.Start = (IToken)input.LT(1);
		int forCondition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal199 = default(IToken);
		Antlr3CstNode commaList198 = default(Antlr3CstNode);

		object char_literal199_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(224, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:225:2: ( ( commaList )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:225:4: ( commaList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(225, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:225:4: ( commaList )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==Ampersand||LA50_1==ArrayType||LA50_1==Bang||(LA50_1>=BoolType && LA50_1<=BooleanType)||LA50_1==Clone||LA50_1==Die||(LA50_1>=DoubleQuotedString && LA50_1<=DoubleType)||LA50_1==Empty||(LA50_1>=Eval && LA50_1<=Exit)||LA50_1==False||LA50_1==FloatType||LA50_1==Function||LA50_1==HaltCompiler||LA50_1==HereDoc||(LA50_1>=Include && LA50_1<=IncrementOperator)||(LA50_1>=IntType && LA50_1<=IntegerType)||(LA50_1>=Isset && LA50_1<=List)||LA50_1==Minus||(LA50_1>=New && LA50_1<=Null)||LA50_1==ObjectType||(LA50_1>=OpenRoundBracket && LA50_1<=OpenSquareBracket)||LA50_1==Plus||(LA50_1>=Real && LA50_1<=RequireOnce)||LA50_1==SingleQuotedString||(LA50_1>=Static && LA50_1<=SuppressWarnings)||(LA50_1>=Tilde && LA50_1<=True)||LA50_1==UnquotedString||LA50_1==UnsetType||LA50_1==VariableName||(LA50_1>=128 && LA50_1<=129)))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:225:4: commaList
				{
				DebugLocation(225, 4);
				PushFollow(Follow._commaList_in_forCondition1175);
				commaList198=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList198.Tree, commaList198, "commaList198", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(225, 15);
			char_literal199=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forCondition1178); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal199_tree = (object)adaptor.Create(char_literal199, "char_literal199", retval);
			adaptor.AddChild(root_0, char_literal199_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forCondition", 25);
			LeaveRule("forCondition", 25);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 25, forCondition_StartIndex); }

		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return retval;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdate();
	partial void LeaveRule_forUpdate();
	// $ANTLR start "forUpdate"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:228:1: forUpdate : ( commaList )? ;
	[GrammarRule("forUpdate")]
	private Antlr3CstNode forUpdate()
	{
		EnterRule_forUpdate();
		EnterRule("forUpdate", 26);
		var retval = new Antlr3CstNode("forUpdate");
		
		retval.Start = (IToken)input.LT(1);
		int forUpdate_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode commaList200 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "forUpdate");
		DebugLocation(228, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:229:2: ( ( commaList )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:229:4: ( commaList )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(229, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:229:4: ( commaList )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_1 = input.LA(1);

			if ((LA51_1==Ampersand||LA51_1==ArrayType||LA51_1==Bang||(LA51_1>=BoolType && LA51_1<=BooleanType)||LA51_1==Clone||LA51_1==Die||(LA51_1>=DoubleQuotedString && LA51_1<=DoubleType)||LA51_1==Empty||(LA51_1>=Eval && LA51_1<=Exit)||LA51_1==False||LA51_1==FloatType||LA51_1==Function||LA51_1==HaltCompiler||LA51_1==HereDoc||(LA51_1>=Include && LA51_1<=IncrementOperator)||(LA51_1>=IntType && LA51_1<=IntegerType)||(LA51_1>=Isset && LA51_1<=List)||LA51_1==Minus||(LA51_1>=New && LA51_1<=Null)||LA51_1==ObjectType||(LA51_1>=OpenRoundBracket && LA51_1<=OpenSquareBracket)||LA51_1==Plus||(LA51_1>=Real && LA51_1<=RequireOnce)||LA51_1==SingleQuotedString||(LA51_1>=Static && LA51_1<=SuppressWarnings)||(LA51_1>=Tilde && LA51_1<=True)||LA51_1==UnquotedString||LA51_1==UnsetType||LA51_1==VariableName||(LA51_1>=128 && LA51_1<=129)))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:229:4: commaList
				{
				DebugLocation(229, 4);
				PushFollow(Follow._commaList_in_forUpdate1190);
				commaList200=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList200.Tree, commaList200, "commaList200", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forUpdate", 26);
			LeaveRule("forUpdate", 26);
			LeaveRule_forUpdate();
			if (state.backtracking > 0) { Memoize(input, 26, forUpdate_StartIndex); }

		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "forUpdate"); }
		return retval;

	}
	// $ANTLR end "forUpdate"

	partial void EnterRule_cases();
	partial void LeaveRule_cases();
	// $ANTLR start "cases"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:232:1: cases : ( ( casestatement )* defaultcase ( casestatement )* | ( casestatement )+ );
	[GrammarRule("cases")]
	private Antlr3CstNode cases()
	{
		EnterRule_cases();
		EnterRule("cases", 27);
		var retval = new Antlr3CstNode("cases");
		
		retval.Start = (IToken)input.LT(1);
		int cases_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode casestatement201 = default(Antlr3CstNode);
		Antlr3CstNode defaultcase202 = default(Antlr3CstNode);
		Antlr3CstNode casestatement203 = default(Antlr3CstNode);
		Antlr3CstNode casestatement204 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "cases");
		DebugLocation(232, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:2: ( ( casestatement )* defaultcase ( casestatement )* | ( casestatement )+ )
			int alt55=2;
			try { DebugEnterDecision(55, false);
			int LA55_1 = input.LA(1);

			if ((LA55_1==Case))
			{
				int LA55_2 = input.LA(2);

				if ((EvaluatePredicate(synpred81_Php_fragment)))
				{
					alt55 = 1;
				}
				else if ((true))
				{
					alt55 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA55_1==Default))
			{
				alt55 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:4: ( casestatement )* defaultcase ( casestatement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(233, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:4: ( casestatement )*
				try { DebugEnterSubRule(52);
				while (true)
				{
					int alt52=2;
					try { DebugEnterDecision(52, false);
					int LA52_1 = input.LA(1);

					if ((LA52_1==Case))
					{
						alt52 = 1;
					}


					} finally { DebugExitDecision(52); }
					switch ( alt52 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:4: casestatement
						{
						DebugLocation(233, 4);
						PushFollow(Follow._casestatement_in_cases1202);
						casestatement201=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement201.Tree, casestatement201, "casestatement201", retval);

						}
						break;

					default:
						goto loop52;
					}
				}

				loop52:
					;

				} finally { DebugExitSubRule(52); }

				DebugLocation(233, 19);
				PushFollow(Follow._defaultcase_in_cases1205);
				defaultcase202=defaultcase();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defaultcase202.Tree, defaultcase202, "defaultcase202", retval);
				DebugLocation(233, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:31: ( casestatement )*
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_1 = input.LA(1);

					if ((LA53_1==Case))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch ( alt53 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:31: casestatement
						{
						DebugLocation(233, 31);
						PushFollow(Follow._casestatement_in_cases1207);
						casestatement203=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement203.Tree, casestatement203, "casestatement203", retval);

						}
						break;

					default:
						goto loop53;
					}
				}

				loop53:
					;

				} finally { DebugExitSubRule(53); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:234:4: ( casestatement )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(234, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:234:4: ( casestatement )+
				int cnt54=0;
				try { DebugEnterSubRule(54);
				while (true)
				{
					int alt54=2;
					try { DebugEnterDecision(54, false);
					int LA54_1 = input.LA(1);

					if ((LA54_1==Case))
					{
						alt54 = 1;
					}


					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:234:4: casestatement
						{
						DebugLocation(234, 4);
						PushFollow(Follow._casestatement_in_cases1213);
						casestatement204=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement204.Tree, casestatement204, "casestatement204", retval);

						}
						break;

					default:
						if (cnt54 >= 1)
							goto loop54;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee54 = new EarlyExitException( 54, input );
						DebugRecognitionException(eee54);
						throw eee54;
					}
					cnt54++;
				}
				loop54:
					;

				} finally { DebugExitSubRule(54); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cases", 27);
			LeaveRule("cases", 27);
			LeaveRule_cases();
			if (state.backtracking > 0) { Memoize(input, 27, cases_StartIndex); }

		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "cases"); }
		return retval;

	}
	// $ANTLR end "cases"

	partial void EnterRule_casestatement();
	partial void LeaveRule_casestatement();
	// $ANTLR start "casestatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:237:1: casestatement : Case expression ( ':' | ';' ) ( statement )* ;
	[GrammarRule("casestatement")]
	private Antlr3CstNode casestatement()
	{
		EnterRule_casestatement();
		EnterRule("casestatement", 28);
		var retval = new Antlr3CstNode("casestatement");
		
		retval.Start = (IToken)input.LT(1);
		int casestatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Case205 = default(IToken);
		IToken set207 = default(IToken);
		Antlr3CstNode expression206 = default(Antlr3CstNode);
		Antlr3CstNode statement208 = default(Antlr3CstNode);

		object Case205_tree = default(object);
		object set207_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "casestatement");
		DebugLocation(237, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:238:2: ( Case expression ( ':' | ';' ) ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:238:4: Case expression ( ':' | ';' ) ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(238, 4);
			Case205=(IToken)Match(input,Case,Follow._Case_in_casestatement1225); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Case205_tree = (object)adaptor.Create(Case205, "Case205", retval);
			adaptor.AddChild(root_0, Case205_tree);
			}
			DebugLocation(238, 9);
			PushFollow(Follow._expression_in_casestatement1227);
			expression206=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression206.Tree, expression206, "expression206", retval);
			DebugLocation(238, 20);

			set207=(IToken)input.LT(1);
			if (input.LA(1)==Colon||input.LA(1)==SemiColon)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set207, "set207", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(238, 30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:238:30: ( statement )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if (((LA56_1>=Abstract && LA56_1<=Ampersand)||LA56_1==ArrayType||(LA56_1>=Bang && LA56_1<=BodyString)||(LA56_1>=BoolType && LA56_1<=Break)||LA56_1==Class||LA56_1==Clone||(LA56_1>=Const && LA56_1<=Continue)||LA56_1==Die||LA56_1==Do||(LA56_1>=DoubleQuotedString && LA56_1<=Echo)||LA56_1==Empty||(LA56_1>=Eval && LA56_1<=Exit)||LA56_1==False||(LA56_1>=FloatType && LA56_1<=Foreach)||(LA56_1>=Function && LA56_1<=HaltCompiler)||LA56_1==HereDoc||LA56_1==If||(LA56_1>=Include && LA56_1<=IncrementOperator)||(LA56_1>=IntType && LA56_1<=List)||LA56_1==Minus||(LA56_1>=Namespace && LA56_1<=Null)||LA56_1==ObjectType||(LA56_1>=OpenCurlyBracket && LA56_1<=OpenSquareBracket)||LA56_1==Plus||(LA56_1>=Real && LA56_1<=SemiColon)||LA56_1==SingleQuotedString||(LA56_1>=Static && LA56_1<=Try)||LA56_1==UnquotedString||LA56_1==UnsetType||(LA56_1>=VariableName && LA56_1<=While)||(LA56_1>=128 && LA56_1<=129)))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:238:30: statement
					{
					DebugLocation(238, 30);
					PushFollow(Follow._statement_in_casestatement1235);
					statement208=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement208.Tree, statement208, "statement208", retval);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("casestatement", 28);
			LeaveRule("casestatement", 28);
			LeaveRule_casestatement();
			if (state.backtracking > 0) { Memoize(input, 28, casestatement_StartIndex); }

		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "casestatement"); }
		return retval;

	}
	// $ANTLR end "casestatement"

	partial void EnterRule_defaultcase();
	partial void LeaveRule_defaultcase();
	// $ANTLR start "defaultcase"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:241:1: defaultcase : ( Default ( ':' | ';' ) ( statement )* ) ;
	[GrammarRule("defaultcase")]
	private Antlr3CstNode defaultcase()
	{
		EnterRule_defaultcase();
		EnterRule("defaultcase", 29);
		var retval = new Antlr3CstNode("defaultcase");
		
		retval.Start = (IToken)input.LT(1);
		int defaultcase_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Default209 = default(IToken);
		IToken set210 = default(IToken);
		Antlr3CstNode statement211 = default(Antlr3CstNode);

		object Default209_tree = default(object);
		object set210_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "defaultcase");
		DebugLocation(241, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:242:2: ( ( Default ( ':' | ';' ) ( statement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:242:4: ( Default ( ':' | ';' ) ( statement )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(242, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:242:4: ( Default ( ':' | ';' ) ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:242:5: Default ( ':' | ';' ) ( statement )*
			{
			DebugLocation(242, 5);
			Default209=(IToken)Match(input,Default,Follow._Default_in_defaultcase1249); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Default209_tree = (object)adaptor.Create(Default209, "Default209", retval);
			adaptor.AddChild(root_0, Default209_tree);
			}
			DebugLocation(242, 13);

			set210=(IToken)input.LT(1);
			if (input.LA(1)==Colon||input.LA(1)==SemiColon)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set210, "set210", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(242, 23);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:242:23: ( statement )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if (((LA57_1>=Abstract && LA57_1<=Ampersand)||LA57_1==ArrayType||(LA57_1>=Bang && LA57_1<=BodyString)||(LA57_1>=BoolType && LA57_1<=Break)||LA57_1==Class||LA57_1==Clone||(LA57_1>=Const && LA57_1<=Continue)||LA57_1==Die||LA57_1==Do||(LA57_1>=DoubleQuotedString && LA57_1<=Echo)||LA57_1==Empty||(LA57_1>=Eval && LA57_1<=Exit)||LA57_1==False||(LA57_1>=FloatType && LA57_1<=Foreach)||(LA57_1>=Function && LA57_1<=HaltCompiler)||LA57_1==HereDoc||LA57_1==If||(LA57_1>=Include && LA57_1<=IncrementOperator)||(LA57_1>=IntType && LA57_1<=List)||LA57_1==Minus||(LA57_1>=Namespace && LA57_1<=Null)||LA57_1==ObjectType||(LA57_1>=OpenCurlyBracket && LA57_1<=OpenSquareBracket)||LA57_1==Plus||(LA57_1>=Real && LA57_1<=SemiColon)||LA57_1==SingleQuotedString||(LA57_1>=Static && LA57_1<=Try)||LA57_1==UnquotedString||LA57_1==UnsetType||(LA57_1>=VariableName && LA57_1<=While)||(LA57_1>=128 && LA57_1<=129)))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:242:23: statement
					{
					DebugLocation(242, 23);
					PushFollow(Follow._statement_in_defaultcase1257);
					statement211=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement211.Tree, statement211, "statement211", retval);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defaultcase", 29);
			LeaveRule("defaultcase", 29);
			LeaveRule_defaultcase();
			if (state.backtracking > 0) { Memoize(input, 29, defaultcase_StartIndex); }

		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultcase"); }
		return retval;

	}
	// $ANTLR end "defaultcase"

	partial void EnterRule_anonymousFunctionDefinition();
	partial void LeaveRule_anonymousFunctionDefinition();
	// $ANTLR start "anonymousFunctionDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:245:1: anonymousFunctionDefinition : Function parametersDefinition ( Use parametersDefinition )? bracketedBlock ;
	[GrammarRule("anonymousFunctionDefinition")]
	private Antlr3CstNode anonymousFunctionDefinition()
	{
		EnterRule_anonymousFunctionDefinition();
		EnterRule("anonymousFunctionDefinition", 30);
		var retval = new Antlr3CstNode("anonymousFunctionDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int anonymousFunctionDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function212 = default(IToken);
		IToken Use214 = default(IToken);
		Antlr3CstNode parametersDefinition213 = default(Antlr3CstNode);
		Antlr3CstNode parametersDefinition215 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock216 = default(Antlr3CstNode);

		object Function212_tree = default(object);
		object Use214_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymousFunctionDefinition");
		DebugLocation(245, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:246:2: ( Function parametersDefinition ( Use parametersDefinition )? bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:246:4: Function parametersDefinition ( Use parametersDefinition )? bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(246, 4);
			Function212=(IToken)Match(input,Function,Follow._Function_in_anonymousFunctionDefinition1270); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Function212_tree = (object)adaptor.Create(Function212, "Function212", retval);
			adaptor.AddChild(root_0, Function212_tree);
			}
			DebugLocation(246, 13);
			PushFollow(Follow._parametersDefinition_in_anonymousFunctionDefinition1272);
			parametersDefinition213=parametersDefinition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition213.Tree, parametersDefinition213, "parametersDefinition213", retval);
			DebugLocation(246, 34);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:246:34: ( Use parametersDefinition )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==Use))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:246:35: Use parametersDefinition
				{
				DebugLocation(246, 35);
				Use214=(IToken)Match(input,Use,Follow._Use_in_anonymousFunctionDefinition1275); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Use214_tree = (object)adaptor.Create(Use214, "Use214", retval);
				adaptor.AddChild(root_0, Use214_tree);
				}
				DebugLocation(246, 39);
				PushFollow(Follow._parametersDefinition_in_anonymousFunctionDefinition1277);
				parametersDefinition215=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition215.Tree, parametersDefinition215, "parametersDefinition215", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(58); }

			DebugLocation(246, 62);
			PushFollow(Follow._bracketedBlock_in_anonymousFunctionDefinition1281);
			bracketedBlock216=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock216.Tree, bracketedBlock216, "bracketedBlock216", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymousFunctionDefinition", 30);
			LeaveRule("anonymousFunctionDefinition", 30);
			LeaveRule_anonymousFunctionDefinition();
			if (state.backtracking > 0) { Memoize(input, 30, anonymousFunctionDefinition_StartIndex); }

		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymousFunctionDefinition"); }
		return retval;

	}
	// $ANTLR end "anonymousFunctionDefinition"

	partial void EnterRule_functionDefinition();
	partial void LeaveRule_functionDefinition();
	// $ANTLR start "functionDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:249:1: functionDefinition : Function qualifiedName parametersDefinition bracketedBlock ;
	[GrammarRule("functionDefinition")]
	private Antlr3CstNode functionDefinition()
	{
		EnterRule_functionDefinition();
		EnterRule("functionDefinition", 31);
		var retval = new Antlr3CstNode("functionDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int functionDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function217 = default(IToken);
		Antlr3CstNode qualifiedName218 = default(Antlr3CstNode);
		Antlr3CstNode parametersDefinition219 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock220 = default(Antlr3CstNode);

		object Function217_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionDefinition");
		DebugLocation(249, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:250:2: ( Function qualifiedName parametersDefinition bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:250:4: Function qualifiedName parametersDefinition bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(250, 4);
			Function217=(IToken)Match(input,Function,Follow._Function_in_functionDefinition1292); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Function217_tree = (object)adaptor.Create(Function217, "Function217", retval);
			adaptor.AddChild(root_0, Function217_tree);
			}
			DebugLocation(250, 13);
			PushFollow(Follow._qualifiedName_in_functionDefinition1294);
			qualifiedName218=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName218.Tree, qualifiedName218, "qualifiedName218", retval);
			DebugLocation(250, 27);
			PushFollow(Follow._parametersDefinition_in_functionDefinition1296);
			parametersDefinition219=parametersDefinition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition219.Tree, parametersDefinition219, "parametersDefinition219", retval);
			DebugLocation(250, 48);
			PushFollow(Follow._bracketedBlock_in_functionDefinition1298);
			bracketedBlock220=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock220.Tree, bracketedBlock220, "bracketedBlock220", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDefinition", 31);
			LeaveRule("functionDefinition", 31);
			LeaveRule_functionDefinition();
			if (state.backtracking > 0) { Memoize(input, 31, functionDefinition_StartIndex); }

		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDefinition"); }
		return retval;

	}
	// $ANTLR end "functionDefinition"

	partial void EnterRule_parametersDefinition();
	partial void LeaveRule_parametersDefinition();
	// $ANTLR start "parametersDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:253:1: parametersDefinition : OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket ;
	[GrammarRule("parametersDefinition")]
	private Antlr3CstNode parametersDefinition()
	{
		EnterRule_parametersDefinition();
		EnterRule("parametersDefinition", 32);
		var retval = new Antlr3CstNode("parametersDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int parametersDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket221 = default(IToken);
		IToken Comma223 = default(IToken);
		IToken CloseRoundBracket225 = default(IToken);
		Antlr3CstNode paramDef222 = default(Antlr3CstNode);
		Antlr3CstNode paramDef224 = default(Antlr3CstNode);

		object OpenRoundBracket221_tree = default(object);
		object Comma223_tree = default(object);
		object CloseRoundBracket225_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parametersDefinition");
		DebugLocation(253, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:254:2: ( OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:254:4: OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(254, 4);
			OpenRoundBracket221=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_parametersDefinition1309); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenRoundBracket221_tree = (object)adaptor.Create(OpenRoundBracket221, "OpenRoundBracket221", retval);
			adaptor.AddChild(root_0, OpenRoundBracket221_tree);
			}
			DebugLocation(254, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:254:21: ( paramDef ( Comma paramDef )* )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_1 = input.LA(1);

			if ((LA60_1==Ampersand||LA60_1==ArrayType||(LA60_1>=BoolType && LA60_1<=BooleanType)||LA60_1==DoubleType||LA60_1==FloatType||LA60_1==IntType||LA60_1==IntegerType||LA60_1==ObjectType||LA60_1==RealType||(LA60_1>=Static && LA60_1<=StringType)||LA60_1==UnquotedString||LA60_1==UnsetType||LA60_1==VariableName||LA60_1==129))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:254:22: paramDef ( Comma paramDef )*
				{
				DebugLocation(254, 22);
				PushFollow(Follow._paramDef_in_parametersDefinition1312);
				paramDef222=paramDef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, paramDef222.Tree, paramDef222, "paramDef222", retval);
				DebugLocation(254, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:254:31: ( Comma paramDef )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_1 = input.LA(1);

					if ((LA59_1==Comma))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:254:32: Comma paramDef
						{
						DebugLocation(254, 32);
						Comma223=(IToken)Match(input,Comma,Follow._Comma_in_parametersDefinition1315); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma223_tree = (object)adaptor.Create(Comma223, "Comma223", retval);
						adaptor.AddChild(root_0, Comma223_tree);
						}
						DebugLocation(254, 38);
						PushFollow(Follow._paramDef_in_parametersDefinition1317);
						paramDef224=paramDef();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, paramDef224.Tree, paramDef224, "paramDef224", retval);

						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }


				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(254, 51);
			CloseRoundBracket225=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_parametersDefinition1323); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseRoundBracket225_tree = (object)adaptor.Create(CloseRoundBracket225, "CloseRoundBracket225", retval);
			adaptor.AddChild(root_0, CloseRoundBracket225_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parametersDefinition", 32);
			LeaveRule("parametersDefinition", 32);
			LeaveRule_parametersDefinition();
			if (state.backtracking > 0) { Memoize(input, 32, parametersDefinition_StartIndex); }

		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "parametersDefinition"); }
		return retval;

	}
	// $ANTLR end "parametersDefinition"

	partial void EnterRule_paramDef();
	partial void LeaveRule_paramDef();
	// $ANTLR start "paramDef"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:257:1: paramDef : ( primitiveType | qualifiedName )? paramName ( Equals atom )? ;
	[GrammarRule("paramDef")]
	private Antlr3CstNode paramDef()
	{
		EnterRule_paramDef();
		EnterRule("paramDef", 33);
		var retval = new Antlr3CstNode("paramDef");
		
		retval.Start = (IToken)input.LT(1);
		int paramDef_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Equals229 = default(IToken);
		Antlr3CstNode primitiveType226 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName227 = default(Antlr3CstNode);
		Antlr3CstNode paramName228 = default(Antlr3CstNode);
		Antlr3CstNode atom230 = default(Antlr3CstNode);

		object Equals229_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramDef");
		DebugLocation(257, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:2: ( ( primitiveType | qualifiedName )? paramName ( Equals atom )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:4: ( primitiveType | qualifiedName )? paramName ( Equals atom )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(258, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:4: ( primitiveType | qualifiedName )?
			int alt61=3;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			switch (input.LA(1))
			{
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case StringType:
				{
				int LA61_2 = input.LA(2);

				if ((EvaluatePredicate(synpred90_Php_fragment)))
				{
					alt61 = 1;
				}
				else if ((EvaluatePredicate(synpred91_Php_fragment)))
				{
					alt61 = 2;
				}
				}
				break;
			case Static:
			case UnquotedString:
			case 129:
				{
				alt61 = 2;
				}
				break;
			case ArrayType:
			case UnsetType:
				{
				alt61 = 1;
				}
				break;
			}

			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:5: primitiveType
				{
				DebugLocation(258, 5);
				PushFollow(Follow._primitiveType_in_paramDef1335);
				primitiveType226=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType226.Tree, primitiveType226, "primitiveType226", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:21: qualifiedName
				{
				DebugLocation(258, 21);
				PushFollow(Follow._qualifiedName_in_paramDef1339);
				qualifiedName227=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName227.Tree, qualifiedName227, "qualifiedName227", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(258, 37);
			PushFollow(Follow._paramName_in_paramDef1343);
			paramName228=paramName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, paramName228.Tree, paramName228, "paramName228", retval);
			DebugLocation(258, 47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:47: ( Equals atom )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if ((LA62_1==Equals))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:48: Equals atom
				{
				DebugLocation(258, 48);
				Equals229=(IToken)Match(input,Equals,Follow._Equals_in_paramDef1346); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals229_tree = (object)adaptor.Create(Equals229, "Equals229", retval);
				adaptor.AddChild(root_0, Equals229_tree);
				}
				DebugLocation(258, 55);
				PushFollow(Follow._atom_in_paramDef1348);
				atom230=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom230.Tree, atom230, "atom230", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramDef", 33);
			LeaveRule("paramDef", 33);
			LeaveRule_paramDef();
			if (state.backtracking > 0) { Memoize(input, 33, paramDef_StartIndex); }

		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "paramDef"); }
		return retval;

	}
	// $ANTLR end "paramDef"

	partial void EnterRule_paramName();
	partial void LeaveRule_paramName();
	// $ANTLR start "paramName"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:261:1: paramName : ( VariableName | Ampersand VariableName );
	[GrammarRule("paramName")]
	private Antlr3CstNode paramName()
	{
		EnterRule_paramName();
		EnterRule("paramName", 34);
		var retval = new Antlr3CstNode("paramName");
		
		retval.Start = (IToken)input.LT(1);
		int paramName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName231 = default(IToken);
		IToken Ampersand232 = default(IToken);
		IToken VariableName233 = default(IToken);

		object VariableName231_tree = default(object);
		object Ampersand232_tree = default(object);
		object VariableName233_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramName");
		DebugLocation(261, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:262:2: ( VariableName | Ampersand VariableName )
			int alt63=2;
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==VariableName))
			{
				alt63 = 1;
			}
			else if ((LA63_1==Ampersand))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:262:4: VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(262, 4);
				VariableName231=(IToken)Match(input,VariableName,Follow._VariableName_in_paramName1361); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName231_tree = (object)adaptor.Create(VariableName231, "VariableName231", retval);
				adaptor.AddChild(root_0, VariableName231_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:263:4: Ampersand VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(263, 4);
				Ampersand232=(IToken)Match(input,Ampersand,Follow._Ampersand_in_paramName1366); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand232_tree = (object)adaptor.Create(Ampersand232, "Ampersand232", retval);
				adaptor.AddChild(root_0, Ampersand232_tree);
				}
				DebugLocation(263, 14);
				VariableName233=(IToken)Match(input,VariableName,Follow._VariableName_in_paramName1368); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName233_tree = (object)adaptor.Create(VariableName233, "VariableName233", retval);
				adaptor.AddChild(root_0, VariableName233_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramName", 34);
			LeaveRule("paramName", 34);
			LeaveRule_paramName();
			if (state.backtracking > 0) { Memoize(input, 34, paramName_StartIndex); }

		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "paramName"); }
		return retval;

	}
	// $ANTLR end "paramName"

	partial void EnterRule_commaList();
	partial void LeaveRule_commaList();
	// $ANTLR start "commaList"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:266:1: commaList : expression ( ',' expression )* ;
	[GrammarRule("commaList")]
	private Antlr3CstNode commaList()
	{
		EnterRule_commaList();
		EnterRule("commaList", 35);
		var retval = new Antlr3CstNode("commaList");
		
		retval.Start = (IToken)input.LT(1);
		int commaList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal235 = default(IToken);
		Antlr3CstNode expression234 = default(Antlr3CstNode);
		Antlr3CstNode expression236 = default(Antlr3CstNode);

		object char_literal235_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "commaList");
		DebugLocation(266, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:267:2: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:267:4: expression ( ',' expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(267, 4);
			PushFollow(Follow._expression_in_commaList1379);
			expression234=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression234.Tree, expression234, "expression234", retval);
			DebugLocation(267, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:267:15: ( ',' expression )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if ((LA64_1==Comma))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:267:16: ',' expression
					{
					DebugLocation(267, 16);
					char_literal235=(IToken)Match(input,Comma,Follow._Comma_in_commaList1382); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal235_tree = (object)adaptor.Create(char_literal235, "char_literal235", retval);
					adaptor.AddChild(root_0, char_literal235_tree);
					}
					DebugLocation(267, 20);
					PushFollow(Follow._expression_in_commaList1384);
					expression236=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression236.Tree, expression236, "expression236", retval);

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commaList", 35);
			LeaveRule("commaList", 35);
			LeaveRule_commaList();
			if (state.backtracking > 0) { Memoize(input, 35, commaList_StartIndex); }

		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "commaList"); }
		return retval;

	}
	// $ANTLR end "commaList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:270:1: expression : weakLogicalOr ;
	[GrammarRule("expression")]
	private Antlr3CstNode expression()
	{
		EnterRule_expression();
		EnterRule("expression", 36);
		var retval = new Antlr3CstNode("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode weakLogicalOr237 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(270, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:271:2: ( weakLogicalOr )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:271:4: weakLogicalOr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(271, 4);
			PushFollow(Follow._weakLogicalOr_in_expression1399);
			weakLogicalOr237=weakLogicalOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalOr237.Tree, weakLogicalOr237, "weakLogicalOr237", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 36);
			LeaveRule("expression", 36);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 36, expression_StartIndex); }

		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_weakLogicalOr();
	partial void LeaveRule_weakLogicalOr();
	// $ANTLR start "weakLogicalOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:274:1: weakLogicalOr : weakLogicalXor ( Or weakLogicalXor )* ;
	[GrammarRule("weakLogicalOr")]
	private Antlr3CstNode weakLogicalOr()
	{
		EnterRule_weakLogicalOr();
		EnterRule("weakLogicalOr", 37);
		var retval = new Antlr3CstNode("weakLogicalOr");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Or239 = default(IToken);
		Antlr3CstNode weakLogicalXor238 = default(Antlr3CstNode);
		Antlr3CstNode weakLogicalXor240 = default(Antlr3CstNode);

		object Or239_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalOr");
		DebugLocation(274, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:275:2: ( weakLogicalXor ( Or weakLogicalXor )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:275:4: weakLogicalXor ( Or weakLogicalXor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(275, 4);
			PushFollow(Follow._weakLogicalXor_in_weakLogicalOr1410);
			weakLogicalXor238=weakLogicalXor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor238.Tree, weakLogicalXor238, "weakLogicalXor238", retval);
			DebugLocation(275, 19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:275:19: ( Or weakLogicalXor )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==Or))
				{
					int LA65_2 = input.LA(2);

					if ((EvaluatePredicate(synpred95_Php_fragment)))
					{
						alt65 = 1;
					}


				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:275:20: Or weakLogicalXor
					{
					DebugLocation(275, 20);
					Or239=(IToken)Match(input,Or,Follow._Or_in_weakLogicalOr1413); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Or239_tree = (object)adaptor.Create(Or239, "Or239", retval);
					adaptor.AddChild(root_0, Or239_tree);
					}
					DebugLocation(275, 23);
					PushFollow(Follow._weakLogicalXor_in_weakLogicalOr1415);
					weakLogicalXor240=weakLogicalXor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor240.Tree, weakLogicalXor240, "weakLogicalXor240", retval);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalOr", 37);
			LeaveRule("weakLogicalOr", 37);
			LeaveRule_weakLogicalOr();
			if (state.backtracking > 0) { Memoize(input, 37, weakLogicalOr_StartIndex); }

		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalOr"); }
		return retval;

	}
	// $ANTLR end "weakLogicalOr"

	partial void EnterRule_weakLogicalXor();
	partial void LeaveRule_weakLogicalXor();
	// $ANTLR start "weakLogicalXor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:278:1: weakLogicalXor : weakLogicalAnd ( Xor weakLogicalAnd )* ;
	[GrammarRule("weakLogicalXor")]
	private Antlr3CstNode weakLogicalXor()
	{
		EnterRule_weakLogicalXor();
		EnterRule("weakLogicalXor", 38);
		var retval = new Antlr3CstNode("weakLogicalXor");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalXor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Xor242 = default(IToken);
		Antlr3CstNode weakLogicalAnd241 = default(Antlr3CstNode);
		Antlr3CstNode weakLogicalAnd243 = default(Antlr3CstNode);

		object Xor242_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalXor");
		DebugLocation(278, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:279:2: ( weakLogicalAnd ( Xor weakLogicalAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:279:4: weakLogicalAnd ( Xor weakLogicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(279, 4);
			PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor1428);
			weakLogicalAnd241=weakLogicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd241.Tree, weakLogicalAnd241, "weakLogicalAnd241", retval);
			DebugLocation(279, 19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:279:19: ( Xor weakLogicalAnd )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==Xor))
				{
					int LA66_2 = input.LA(2);

					if ((EvaluatePredicate(synpred96_Php_fragment)))
					{
						alt66 = 1;
					}


				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:279:20: Xor weakLogicalAnd
					{
					DebugLocation(279, 20);
					Xor242=(IToken)Match(input,Xor,Follow._Xor_in_weakLogicalXor1431); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Xor242_tree = (object)adaptor.Create(Xor242, "Xor242", retval);
					adaptor.AddChild(root_0, Xor242_tree);
					}
					DebugLocation(279, 24);
					PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor1433);
					weakLogicalAnd243=weakLogicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd243.Tree, weakLogicalAnd243, "weakLogicalAnd243", retval);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalXor", 38);
			LeaveRule("weakLogicalXor", 38);
			LeaveRule_weakLogicalXor();
			if (state.backtracking > 0) { Memoize(input, 38, weakLogicalXor_StartIndex); }

		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalXor"); }
		return retval;

	}
	// $ANTLR end "weakLogicalXor"

	partial void EnterRule_weakLogicalAnd();
	partial void LeaveRule_weakLogicalAnd();
	// $ANTLR start "weakLogicalAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:282:1: weakLogicalAnd : assignment ( And assignment )* ;
	[GrammarRule("weakLogicalAnd")]
	private Antlr3CstNode weakLogicalAnd()
	{
		EnterRule_weakLogicalAnd();
		EnterRule("weakLogicalAnd", 39);
		var retval = new Antlr3CstNode("weakLogicalAnd");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken And245 = default(IToken);
		Antlr3CstNode assignment244 = default(Antlr3CstNode);
		Antlr3CstNode assignment246 = default(Antlr3CstNode);

		object And245_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalAnd");
		DebugLocation(282, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:283:2: ( assignment ( And assignment )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:283:4: assignment ( And assignment )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(283, 4);
			PushFollow(Follow._assignment_in_weakLogicalAnd1447);
			assignment244=assignment();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment244.Tree, assignment244, "assignment244", retval);
			DebugLocation(283, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:283:15: ( And assignment )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_1 = input.LA(1);

				if ((LA67_1==And))
				{
					int LA67_2 = input.LA(2);

					if ((EvaluatePredicate(synpred97_Php_fragment)))
					{
						alt67 = 1;
					}


				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:283:16: And assignment
					{
					DebugLocation(283, 16);
					And245=(IToken)Match(input,And,Follow._And_in_weakLogicalAnd1450); if (state.failed) return retval;
					if (state.backtracking == 0) {
					And245_tree = (object)adaptor.Create(And245, "And245", retval);
					adaptor.AddChild(root_0, And245_tree);
					}
					DebugLocation(283, 20);
					PushFollow(Follow._assignment_in_weakLogicalAnd1452);
					assignment246=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment246.Tree, assignment246, "assignment246", retval);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalAnd", 39);
			LeaveRule("weakLogicalAnd", 39);
			LeaveRule_weakLogicalAnd();
			if (state.backtracking > 0) { Memoize(input, 39, weakLogicalAnd_StartIndex); }

		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalAnd"); }
		return retval;

	}
	// $ANTLR end "weakLogicalAnd"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:286:1: assignment : ( listVariables ( Equals | AsignmentOperator ) assignment | ternary );
	[GrammarRule("assignment")]
	private Antlr3CstNode assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 40);
		var retval = new Antlr3CstNode("assignment");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set248 = default(IToken);
		Antlr3CstNode listVariables247 = default(Antlr3CstNode);
		Antlr3CstNode assignment249 = default(Antlr3CstNode);
		Antlr3CstNode ternary250 = default(Antlr3CstNode);

		object set248_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(286, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:287:2: ( listVariables ( Equals | AsignmentOperator ) assignment | ternary )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA68_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Php_fragment)))
				{
					alt68 = 1;
				}
				else if ((true))
				{
					alt68 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA68_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Php_fragment)))
				{
					alt68 = 1;
				}
				else if ((true))
				{
					alt68 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA68_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Php_fragment)))
				{
					alt68 = 1;
				}
				else if ((true))
				{
					alt68 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA68_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Php_fragment)))
				{
					alt68 = 1;
				}
				else if ((true))
				{
					alt68 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA68_2 = input.LA(2);

				if ((EvaluatePredicate(synpred99_Php_fragment)))
				{
					alt68 = 1;
				}
				else if ((true))
				{
					alt68 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case ArrayType:
			case Bang:
			case Clone:
			case Die:
			case DoubleQuotedString:
			case Empty:
			case Eval:
			case Exit:
			case False:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case IncrementOperator:
			case Integer:
			case Isset:
			case Minus:
			case New:
			case Null:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case SuppressWarnings:
			case Tilde:
			case True:
			case UnsetType:
				{
				alt68 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:287:4: listVariables ( Equals | AsignmentOperator ) assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(287, 4);
				PushFollow(Follow._listVariables_in_assignment1465);
				listVariables247=listVariables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, listVariables247.Tree, listVariables247, "listVariables247", retval);
				DebugLocation(287, 18);

				set248=(IToken)input.LT(1);
				if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set248, "set248", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(287, 47);
				PushFollow(Follow._assignment_in_assignment1475);
				assignment249=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment249.Tree, assignment249, "assignment249", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:288:4: ternary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(288, 4);
				PushFollow(Follow._ternary_in_assignment1480);
				ternary250=ternary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ternary250.Tree, ternary250, "ternary250", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 40);
			LeaveRule("assignment", 40);
			LeaveRule_assignment();
			if (state.backtracking > 0) { Memoize(input, 40, assignment_StartIndex); }

		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_listVariables();
	partial void LeaveRule_listVariables();
	// $ANTLR start "listVariables"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:291:1: listVariables : ( List OpenRoundBracket ( variable )? ( ',' ( variable )? )* CloseRoundBracket | name );
	[GrammarRule("listVariables")]
	private Antlr3CstNode listVariables()
	{
		EnterRule_listVariables();
		EnterRule("listVariables", 41);
		var retval = new Antlr3CstNode("listVariables");
		
		retval.Start = (IToken)input.LT(1);
		int listVariables_StartIndex = input.Index;

		object root_0 = default(object);

		IToken List251 = default(IToken);
		IToken OpenRoundBracket252 = default(IToken);
		IToken char_literal254 = default(IToken);
		IToken CloseRoundBracket256 = default(IToken);
		Antlr3CstNode variable253 = default(Antlr3CstNode);
		Antlr3CstNode variable255 = default(Antlr3CstNode);
		Antlr3CstNode name257 = default(Antlr3CstNode);

		object List251_tree = default(object);
		object OpenRoundBracket252_tree = default(object);
		object char_literal254_tree = default(object);
		object CloseRoundBracket256_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "listVariables");
		DebugLocation(291, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:292:2: ( List OpenRoundBracket ( variable )? ( ',' ( variable )? )* CloseRoundBracket | name )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==List))
			{
				alt72 = 1;
			}
			else if (((LA72_1>=BoolType && LA72_1<=BooleanType)||LA72_1==DoubleType||LA72_1==FloatType||LA72_1==IntType||LA72_1==IntegerType||LA72_1==ObjectType||LA72_1==RealType||(LA72_1>=Static && LA72_1<=StringType)||LA72_1==UnquotedString||LA72_1==VariableName||(LA72_1>=128 && LA72_1<=129)))
			{
				alt72 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:292:4: List OpenRoundBracket ( variable )? ( ',' ( variable )? )* CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(292, 4);
				List251=(IToken)Match(input,List,Follow._List_in_listVariables1491); if (state.failed) return retval;
				if (state.backtracking == 0) {
				List251_tree = (object)adaptor.Create(List251, "List251", retval);
				adaptor.AddChild(root_0, List251_tree);
				}
				DebugLocation(292, 9);
				OpenRoundBracket252=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_listVariables1493); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket252_tree = (object)adaptor.Create(OpenRoundBracket252, "OpenRoundBracket252", retval);
				adaptor.AddChild(root_0, OpenRoundBracket252_tree);
				}
				DebugLocation(292, 26);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:292:26: ( variable )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_1 = input.LA(1);

				if ((LA69_1==VariableName||LA69_1==128))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:292:26: variable
					{
					DebugLocation(292, 26);
					PushFollow(Follow._variable_in_listVariables1495);
					variable253=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable253.Tree, variable253, "variable253", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(69); }

				DebugLocation(292, 36);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:292:36: ( ',' ( variable )? )*
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, false);
					int LA71_1 = input.LA(1);

					if ((LA71_1==Comma))
					{
						alt71 = 1;
					}


					} finally { DebugExitDecision(71); }
					switch ( alt71 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:292:37: ',' ( variable )?
						{
						DebugLocation(292, 37);
						char_literal254=(IToken)Match(input,Comma,Follow._Comma_in_listVariables1499); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal254_tree = (object)adaptor.Create(char_literal254, "char_literal254", retval);
						adaptor.AddChild(root_0, char_literal254_tree);
						}
						DebugLocation(292, 41);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:292:41: ( variable )?
						int alt70=2;
						try { DebugEnterSubRule(70);
						try { DebugEnterDecision(70, false);
						int LA70_1 = input.LA(1);

						if ((LA70_1==VariableName||LA70_1==128))
						{
							alt70 = 1;
						}
						} finally { DebugExitDecision(70); }
						switch (alt70)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:292:41: variable
							{
							DebugLocation(292, 41);
							PushFollow(Follow._variable_in_listVariables1501);
							variable255=variable();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, variable255.Tree, variable255, "variable255", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(70); }


						}
						break;

					default:
						goto loop71;
					}
				}

				loop71:
					;

				} finally { DebugExitSubRule(71); }

				DebugLocation(292, 53);
				CloseRoundBracket256=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_listVariables1506); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket256_tree = (object)adaptor.Create(CloseRoundBracket256, "CloseRoundBracket256", retval);
				adaptor.AddChild(root_0, CloseRoundBracket256_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:293:4: name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(293, 4);
				PushFollow(Follow._name_in_listVariables1512);
				name257=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name257.Tree, name257, "name257", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("listVariables", 41);
			LeaveRule("listVariables", 41);
			LeaveRule_listVariables();
			if (state.backtracking > 0) { Memoize(input, 41, listVariables_StartIndex); }

		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "listVariables"); }
		return retval;

	}
	// $ANTLR end "listVariables"

	partial void EnterRule_ternary();
	partial void LeaveRule_ternary();
	// $ANTLR start "ternary"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:296:1: ternary : ( logicalOr QuestionMark ( expression )? Colon expression | logicalOr );
	[GrammarRule("ternary")]
	private Antlr3CstNode ternary()
	{
		EnterRule_ternary();
		EnterRule("ternary", 42);
		var retval = new Antlr3CstNode("ternary");
		
		retval.Start = (IToken)input.LT(1);
		int ternary_StartIndex = input.Index;

		object root_0 = default(object);

		IToken QuestionMark259 = default(IToken);
		IToken Colon261 = default(IToken);
		Antlr3CstNode logicalOr258 = default(Antlr3CstNode);
		Antlr3CstNode expression260 = default(Antlr3CstNode);
		Antlr3CstNode expression262 = default(Antlr3CstNode);
		Antlr3CstNode logicalOr263 = default(Antlr3CstNode);

		object QuestionMark259_tree = default(object);
		object Colon261_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ternary");
		DebugLocation(296, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:2: ( logicalOr QuestionMark ( expression )? Colon expression | logicalOr )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			switch (input.LA(1))
			{
			case Bang:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case List:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA74_2 = input.LA(2);

				if ((EvaluatePredicate(synpred105_Php_fragment)))
				{
					alt74 = 1;
				}
				else if ((true))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:4: logicalOr QuestionMark ( expression )? Colon expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(297, 4);
				PushFollow(Follow._logicalOr_in_ternary1523);
				logicalOr258=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr258.Tree, logicalOr258, "logicalOr258", retval);
				DebugLocation(297, 14);
				QuestionMark259=(IToken)Match(input,QuestionMark,Follow._QuestionMark_in_ternary1525); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QuestionMark259_tree = (object)adaptor.Create(QuestionMark259, "QuestionMark259", retval);
				adaptor.AddChild(root_0, QuestionMark259_tree);
				}
				DebugLocation(297, 27);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:27: ( expression )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_1 = input.LA(1);

				if ((LA73_1==Ampersand||LA73_1==ArrayType||LA73_1==Bang||(LA73_1>=BoolType && LA73_1<=BooleanType)||LA73_1==Clone||LA73_1==Die||(LA73_1>=DoubleQuotedString && LA73_1<=DoubleType)||LA73_1==Empty||(LA73_1>=Eval && LA73_1<=Exit)||LA73_1==False||LA73_1==FloatType||LA73_1==Function||LA73_1==HaltCompiler||LA73_1==HereDoc||(LA73_1>=Include && LA73_1<=IncrementOperator)||(LA73_1>=IntType && LA73_1<=IntegerType)||(LA73_1>=Isset && LA73_1<=List)||LA73_1==Minus||(LA73_1>=New && LA73_1<=Null)||LA73_1==ObjectType||(LA73_1>=OpenRoundBracket && LA73_1<=OpenSquareBracket)||LA73_1==Plus||(LA73_1>=Real && LA73_1<=RequireOnce)||LA73_1==SingleQuotedString||(LA73_1>=Static && LA73_1<=SuppressWarnings)||(LA73_1>=Tilde && LA73_1<=True)||LA73_1==UnquotedString||LA73_1==UnsetType||LA73_1==VariableName||(LA73_1>=128 && LA73_1<=129)))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:27: expression
					{
					DebugLocation(297, 27);
					PushFollow(Follow._expression_in_ternary1527);
					expression260=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression260.Tree, expression260, "expression260", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(297, 39);
				Colon261=(IToken)Match(input,Colon,Follow._Colon_in_ternary1530); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Colon261_tree = (object)adaptor.Create(Colon261, "Colon261", retval);
				adaptor.AddChild(root_0, Colon261_tree);
				}
				DebugLocation(297, 45);
				PushFollow(Follow._expression_in_ternary1532);
				expression262=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression262.Tree, expression262, "expression262", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:298:4: logicalOr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(298, 4);
				PushFollow(Follow._logicalOr_in_ternary1537);
				logicalOr263=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr263.Tree, logicalOr263, "logicalOr263", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ternary", 42);
			LeaveRule("ternary", 42);
			LeaveRule_ternary();
			if (state.backtracking > 0) { Memoize(input, 42, ternary_StartIndex); }

		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "ternary"); }
		return retval;

	}
	// $ANTLR end "ternary"

	partial void EnterRule_logicalOr();
	partial void LeaveRule_logicalOr();
	// $ANTLR start "logicalOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:301:1: logicalOr : logicalAnd ( LogicalOr logicalAnd )* ;
	[GrammarRule("logicalOr")]
	private Antlr3CstNode logicalOr()
	{
		EnterRule_logicalOr();
		EnterRule("logicalOr", 43);
		var retval = new Antlr3CstNode("logicalOr");
		
		retval.Start = (IToken)input.LT(1);
		int logicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalOr265 = default(IToken);
		Antlr3CstNode logicalAnd264 = default(Antlr3CstNode);
		Antlr3CstNode logicalAnd266 = default(Antlr3CstNode);

		object LogicalOr265_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalOr");
		DebugLocation(301, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:2: ( logicalAnd ( LogicalOr logicalAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:4: logicalAnd ( LogicalOr logicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(302, 4);
			PushFollow(Follow._logicalAnd_in_logicalOr1549);
			logicalAnd264=logicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd264.Tree, logicalAnd264, "logicalAnd264", retval);
			DebugLocation(302, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:15: ( LogicalOr logicalAnd )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==LogicalOr))
				{
					int LA75_2 = input.LA(2);

					if ((EvaluatePredicate(synpred106_Php_fragment)))
					{
						alt75 = 1;
					}


				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:16: LogicalOr logicalAnd
					{
					DebugLocation(302, 16);
					LogicalOr265=(IToken)Match(input,LogicalOr,Follow._LogicalOr_in_logicalOr1552); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalOr265_tree = (object)adaptor.Create(LogicalOr265, "LogicalOr265", retval);
					adaptor.AddChild(root_0, LogicalOr265_tree);
					}
					DebugLocation(302, 26);
					PushFollow(Follow._logicalAnd_in_logicalOr1554);
					logicalAnd266=logicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd266.Tree, logicalAnd266, "logicalAnd266", retval);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOr", 43);
			LeaveRule("logicalOr", 43);
			LeaveRule_logicalOr();
			if (state.backtracking > 0) { Memoize(input, 43, logicalOr_StartIndex); }

		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOr"); }
		return retval;

	}
	// $ANTLR end "logicalOr"

	partial void EnterRule_logicalAnd();
	partial void LeaveRule_logicalAnd();
	// $ANTLR start "logicalAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:305:1: logicalAnd : bitwiseOr ( LogicalAnd bitwiseOr )* ;
	[GrammarRule("logicalAnd")]
	private Antlr3CstNode logicalAnd()
	{
		EnterRule_logicalAnd();
		EnterRule("logicalAnd", 44);
		var retval = new Antlr3CstNode("logicalAnd");
		
		retval.Start = (IToken)input.LT(1);
		int logicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalAnd268 = default(IToken);
		Antlr3CstNode bitwiseOr267 = default(Antlr3CstNode);
		Antlr3CstNode bitwiseOr269 = default(Antlr3CstNode);

		object LogicalAnd268_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalAnd");
		DebugLocation(305, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:306:2: ( bitwiseOr ( LogicalAnd bitwiseOr )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:306:4: bitwiseOr ( LogicalAnd bitwiseOr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(306, 4);
			PushFollow(Follow._bitwiseOr_in_logicalAnd1567);
			bitwiseOr267=bitwiseOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr267.Tree, bitwiseOr267, "bitwiseOr267", retval);
			DebugLocation(306, 14);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:306:14: ( LogicalAnd bitwiseOr )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==LogicalAnd))
				{
					int LA76_2 = input.LA(2);

					if ((EvaluatePredicate(synpred107_Php_fragment)))
					{
						alt76 = 1;
					}


				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:306:15: LogicalAnd bitwiseOr
					{
					DebugLocation(306, 15);
					LogicalAnd268=(IToken)Match(input,LogicalAnd,Follow._LogicalAnd_in_logicalAnd1570); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalAnd268_tree = (object)adaptor.Create(LogicalAnd268, "LogicalAnd268", retval);
					adaptor.AddChild(root_0, LogicalAnd268_tree);
					}
					DebugLocation(306, 26);
					PushFollow(Follow._bitwiseOr_in_logicalAnd1572);
					bitwiseOr269=bitwiseOr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr269.Tree, bitwiseOr269, "bitwiseOr269", retval);

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAnd", 44);
			LeaveRule("logicalAnd", 44);
			LeaveRule_logicalAnd();
			if (state.backtracking > 0) { Memoize(input, 44, logicalAnd_StartIndex); }

		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAnd"); }
		return retval;

	}
	// $ANTLR end "logicalAnd"

	partial void EnterRule_bitwiseOr();
	partial void LeaveRule_bitwiseOr();
	// $ANTLR start "bitwiseOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:309:1: bitwiseOr : bitwiseXor ( Pipe bitwiseXor )* ;
	[GrammarRule("bitwiseOr")]
	private Antlr3CstNode bitwiseOr()
	{
		EnterRule_bitwiseOr();
		EnterRule("bitwiseOr", 45);
		var retval = new Antlr3CstNode("bitwiseOr");
		
		retval.Start = (IToken)input.LT(1);
		int bitwiseOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Pipe271 = default(IToken);
		Antlr3CstNode bitwiseXor270 = default(Antlr3CstNode);
		Antlr3CstNode bitwiseXor272 = default(Antlr3CstNode);

		object Pipe271_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseOr");
		DebugLocation(309, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:310:2: ( bitwiseXor ( Pipe bitwiseXor )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:310:4: bitwiseXor ( Pipe bitwiseXor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(310, 4);
			PushFollow(Follow._bitwiseXor_in_bitwiseOr1586);
			bitwiseXor270=bitwiseXor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXor270.Tree, bitwiseXor270, "bitwiseXor270", retval);
			DebugLocation(310, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:310:15: ( Pipe bitwiseXor )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==Pipe))
				{
					int LA77_2 = input.LA(2);

					if ((EvaluatePredicate(synpred108_Php_fragment)))
					{
						alt77 = 1;
					}


				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:310:16: Pipe bitwiseXor
					{
					DebugLocation(310, 16);
					Pipe271=(IToken)Match(input,Pipe,Follow._Pipe_in_bitwiseOr1589); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Pipe271_tree = (object)adaptor.Create(Pipe271, "Pipe271", retval);
					adaptor.AddChild(root_0, Pipe271_tree);
					}
					DebugLocation(310, 21);
					PushFollow(Follow._bitwiseXor_in_bitwiseOr1591);
					bitwiseXor272=bitwiseXor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXor272.Tree, bitwiseXor272, "bitwiseXor272", retval);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseOr", 45);
			LeaveRule("bitwiseOr", 45);
			LeaveRule_bitwiseOr();
			if (state.backtracking > 0) { Memoize(input, 45, bitwiseOr_StartIndex); }

		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOr"); }
		return retval;

	}
	// $ANTLR end "bitwiseOr"

	partial void EnterRule_bitwiseXor();
	partial void LeaveRule_bitwiseXor();
	// $ANTLR start "bitwiseXor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:313:1: bitwiseXor : bitWiseAnd ( Hat bitWiseAnd )* ;
	[GrammarRule("bitwiseXor")]
	private Antlr3CstNode bitwiseXor()
	{
		EnterRule_bitwiseXor();
		EnterRule("bitwiseXor", 46);
		var retval = new Antlr3CstNode("bitwiseXor");
		
		retval.Start = (IToken)input.LT(1);
		int bitwiseXor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Hat274 = default(IToken);
		Antlr3CstNode bitWiseAnd273 = default(Antlr3CstNode);
		Antlr3CstNode bitWiseAnd275 = default(Antlr3CstNode);

		object Hat274_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseXor");
		DebugLocation(313, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:314:2: ( bitWiseAnd ( Hat bitWiseAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:314:4: bitWiseAnd ( Hat bitWiseAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(314, 4);
			PushFollow(Follow._bitWiseAnd_in_bitwiseXor1605);
			bitWiseAnd273=bitWiseAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd273.Tree, bitWiseAnd273, "bitWiseAnd273", retval);
			DebugLocation(314, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:314:15: ( Hat bitWiseAnd )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==Hat))
				{
					int LA78_2 = input.LA(2);

					if ((EvaluatePredicate(synpred109_Php_fragment)))
					{
						alt78 = 1;
					}


				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:314:16: Hat bitWiseAnd
					{
					DebugLocation(314, 16);
					Hat274=(IToken)Match(input,Hat,Follow._Hat_in_bitwiseXor1608); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Hat274_tree = (object)adaptor.Create(Hat274, "Hat274", retval);
					adaptor.AddChild(root_0, Hat274_tree);
					}
					DebugLocation(314, 20);
					PushFollow(Follow._bitWiseAnd_in_bitwiseXor1610);
					bitWiseAnd275=bitWiseAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd275.Tree, bitWiseAnd275, "bitWiseAnd275", retval);

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXor", 46);
			LeaveRule("bitwiseXor", 46);
			LeaveRule_bitwiseXor();
			if (state.backtracking > 0) { Memoize(input, 46, bitwiseXor_StartIndex); }

		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXor"); }
		return retval;

	}
	// $ANTLR end "bitwiseXor"

	partial void EnterRule_bitWiseAnd();
	partial void LeaveRule_bitWiseAnd();
	// $ANTLR start "bitWiseAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:317:1: bitWiseAnd : equalityCheck ( Ampersand equalityCheck )* ;
	[GrammarRule("bitWiseAnd")]
	private Antlr3CstNode bitWiseAnd()
	{
		EnterRule_bitWiseAnd();
		EnterRule("bitWiseAnd", 47);
		var retval = new Antlr3CstNode("bitWiseAnd");
		
		retval.Start = (IToken)input.LT(1);
		int bitWiseAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand277 = default(IToken);
		Antlr3CstNode equalityCheck276 = default(Antlr3CstNode);
		Antlr3CstNode equalityCheck278 = default(Antlr3CstNode);

		object Ampersand277_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseAnd");
		DebugLocation(317, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:318:2: ( equalityCheck ( Ampersand equalityCheck )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:318:4: equalityCheck ( Ampersand equalityCheck )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(318, 4);
			PushFollow(Follow._equalityCheck_in_bitWiseAnd1623);
			equalityCheck276=equalityCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck276.Tree, equalityCheck276, "equalityCheck276", retval);
			DebugLocation(318, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:318:18: ( Ampersand equalityCheck )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_1 = input.LA(1);

				if ((LA79_1==Ampersand))
				{
					int LA79_2 = input.LA(2);

					if ((EvaluatePredicate(synpred110_Php_fragment)))
					{
						alt79 = 1;
					}


				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:318:19: Ampersand equalityCheck
					{
					DebugLocation(318, 19);
					Ampersand277=(IToken)Match(input,Ampersand,Follow._Ampersand_in_bitWiseAnd1626); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Ampersand277_tree = (object)adaptor.Create(Ampersand277, "Ampersand277", retval);
					adaptor.AddChild(root_0, Ampersand277_tree);
					}
					DebugLocation(318, 29);
					PushFollow(Follow._equalityCheck_in_bitWiseAnd1628);
					equalityCheck278=equalityCheck();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck278.Tree, equalityCheck278, "equalityCheck278", retval);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseAnd", 47);
			LeaveRule("bitWiseAnd", 47);
			LeaveRule_bitWiseAnd();
			if (state.backtracking > 0) { Memoize(input, 47, bitWiseAnd_StartIndex); }

		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "bitWiseAnd"); }
		return retval;

	}
	// $ANTLR end "bitWiseAnd"

	partial void EnterRule_equalityCheck();
	partial void LeaveRule_equalityCheck();
	// $ANTLR start "equalityCheck"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:321:1: equalityCheck : comparisionCheck ( EqualityOperator comparisionCheck )? ;
	[GrammarRule("equalityCheck")]
	private Antlr3CstNode equalityCheck()
	{
		EnterRule_equalityCheck();
		EnterRule("equalityCheck", 48);
		var retval = new Antlr3CstNode("equalityCheck");
		
		retval.Start = (IToken)input.LT(1);
		int equalityCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken EqualityOperator280 = default(IToken);
		Antlr3CstNode comparisionCheck279 = default(Antlr3CstNode);
		Antlr3CstNode comparisionCheck281 = default(Antlr3CstNode);

		object EqualityOperator280_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityCheck");
		DebugLocation(321, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:322:2: ( comparisionCheck ( EqualityOperator comparisionCheck )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:322:4: comparisionCheck ( EqualityOperator comparisionCheck )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(322, 4);
			PushFollow(Follow._comparisionCheck_in_equalityCheck1641);
			comparisionCheck279=comparisionCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck279.Tree, comparisionCheck279, "comparisionCheck279", retval);
			DebugLocation(322, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:322:21: ( EqualityOperator comparisionCheck )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_1 = input.LA(1);

			if ((LA80_1==EqualityOperator))
			{
				int LA80_2 = input.LA(2);

				if ((EvaluatePredicate(synpred111_Php_fragment)))
				{
					alt80 = 1;
				}
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:322:22: EqualityOperator comparisionCheck
				{
				DebugLocation(322, 22);
				EqualityOperator280=(IToken)Match(input,EqualityOperator,Follow._EqualityOperator_in_equalityCheck1644); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EqualityOperator280_tree = (object)adaptor.Create(EqualityOperator280, "EqualityOperator280", retval);
				adaptor.AddChild(root_0, EqualityOperator280_tree);
				}
				DebugLocation(322, 39);
				PushFollow(Follow._comparisionCheck_in_equalityCheck1646);
				comparisionCheck281=comparisionCheck();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck281.Tree, comparisionCheck281, "comparisionCheck281", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityCheck", 48);
			LeaveRule("equalityCheck", 48);
			LeaveRule_equalityCheck();
			if (state.backtracking > 0) { Memoize(input, 48, equalityCheck_StartIndex); }

		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityCheck"); }
		return retval;

	}
	// $ANTLR end "equalityCheck"

	partial void EnterRule_comparisionCheck();
	partial void LeaveRule_comparisionCheck();
	// $ANTLR start "comparisionCheck"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:325:1: comparisionCheck : bitWiseShift ( ComparisionOperator bitWiseShift )? ;
	[GrammarRule("comparisionCheck")]
	private Antlr3CstNode comparisionCheck()
	{
		EnterRule_comparisionCheck();
		EnterRule("comparisionCheck", 49);
		var retval = new Antlr3CstNode("comparisionCheck");
		
		retval.Start = (IToken)input.LT(1);
		int comparisionCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ComparisionOperator283 = default(IToken);
		Antlr3CstNode bitWiseShift282 = default(Antlr3CstNode);
		Antlr3CstNode bitWiseShift284 = default(Antlr3CstNode);

		object ComparisionOperator283_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "comparisionCheck");
		DebugLocation(325, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:326:2: ( bitWiseShift ( ComparisionOperator bitWiseShift )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:326:4: bitWiseShift ( ComparisionOperator bitWiseShift )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(326, 4);
			PushFollow(Follow._bitWiseShift_in_comparisionCheck1660);
			bitWiseShift282=bitWiseShift();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift282.Tree, bitWiseShift282, "bitWiseShift282", retval);
			DebugLocation(326, 17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:326:17: ( ComparisionOperator bitWiseShift )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_1 = input.LA(1);

			if ((LA81_1==ComparisionOperator))
			{
				int LA81_2 = input.LA(2);

				if ((EvaluatePredicate(synpred112_Php_fragment)))
				{
					alt81 = 1;
				}
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:326:18: ComparisionOperator bitWiseShift
				{
				DebugLocation(326, 18);
				ComparisionOperator283=(IToken)Match(input,ComparisionOperator,Follow._ComparisionOperator_in_comparisionCheck1663); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ComparisionOperator283_tree = (object)adaptor.Create(ComparisionOperator283, "ComparisionOperator283", retval);
				adaptor.AddChild(root_0, ComparisionOperator283_tree);
				}
				DebugLocation(326, 38);
				PushFollow(Follow._bitWiseShift_in_comparisionCheck1665);
				bitWiseShift284=bitWiseShift();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift284.Tree, bitWiseShift284, "bitWiseShift284", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comparisionCheck", 49);
			LeaveRule("comparisionCheck", 49);
			LeaveRule_comparisionCheck();
			if (state.backtracking > 0) { Memoize(input, 49, comparisionCheck_StartIndex); }

		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "comparisionCheck"); }
		return retval;

	}
	// $ANTLR end "comparisionCheck"

	partial void EnterRule_bitWiseShift();
	partial void LeaveRule_bitWiseShift();
	// $ANTLR start "bitWiseShift"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:329:1: bitWiseShift : addition ( ShiftOperator addition )* ;
	[GrammarRule("bitWiseShift")]
	private Antlr3CstNode bitWiseShift()
	{
		EnterRule_bitWiseShift();
		EnterRule("bitWiseShift", 50);
		var retval = new Antlr3CstNode("bitWiseShift");
		
		retval.Start = (IToken)input.LT(1);
		int bitWiseShift_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ShiftOperator286 = default(IToken);
		Antlr3CstNode addition285 = default(Antlr3CstNode);
		Antlr3CstNode addition287 = default(Antlr3CstNode);

		object ShiftOperator286_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseShift");
		DebugLocation(329, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:330:2: ( addition ( ShiftOperator addition )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:330:4: addition ( ShiftOperator addition )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(330, 4);
			PushFollow(Follow._addition_in_bitWiseShift1678);
			addition285=addition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, addition285.Tree, addition285, "addition285", retval);
			DebugLocation(330, 13);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:330:13: ( ShiftOperator addition )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_1 = input.LA(1);

				if ((LA82_1==ShiftOperator))
				{
					int LA82_2 = input.LA(2);

					if ((EvaluatePredicate(synpred113_Php_fragment)))
					{
						alt82 = 1;
					}


				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:330:14: ShiftOperator addition
					{
					DebugLocation(330, 14);
					ShiftOperator286=(IToken)Match(input,ShiftOperator,Follow._ShiftOperator_in_bitWiseShift1681); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ShiftOperator286_tree = (object)adaptor.Create(ShiftOperator286, "ShiftOperator286", retval);
					adaptor.AddChild(root_0, ShiftOperator286_tree);
					}
					DebugLocation(330, 28);
					PushFollow(Follow._addition_in_bitWiseShift1683);
					addition287=addition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, addition287.Tree, addition287, "addition287", retval);

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseShift", 50);
			LeaveRule("bitWiseShift", 50);
			LeaveRule_bitWiseShift();
			if (state.backtracking > 0) { Memoize(input, 50, bitWiseShift_StartIndex); }

		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "bitWiseShift"); }
		return retval;

	}
	// $ANTLR end "bitWiseShift"

	partial void EnterRule_addition();
	partial void LeaveRule_addition();
	// $ANTLR start "addition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:333:1: addition : multiplication ( ( Plus | Minus | Dot ) multiplication )* ;
	[GrammarRule("addition")]
	private Antlr3CstNode addition()
	{
		EnterRule_addition();
		EnterRule("addition", 51);
		var retval = new Antlr3CstNode("addition");
		
		retval.Start = (IToken)input.LT(1);
		int addition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set289 = default(IToken);
		Antlr3CstNode multiplication288 = default(Antlr3CstNode);
		Antlr3CstNode multiplication290 = default(Antlr3CstNode);

		object set289_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "addition");
		DebugLocation(333, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:334:2: ( multiplication ( ( Plus | Minus | Dot ) multiplication )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:334:4: multiplication ( ( Plus | Minus | Dot ) multiplication )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(334, 4);
			PushFollow(Follow._multiplication_in_addition1697);
			multiplication288=multiplication();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication288.Tree, multiplication288, "multiplication288", retval);
			DebugLocation(334, 19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:334:19: ( ( Plus | Minus | Dot ) multiplication )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_1 = input.LA(1);

				if ((LA83_1==Dot||LA83_1==Minus||LA83_1==Plus))
				{
					int LA83_2 = input.LA(2);

					if ((EvaluatePredicate(synpred116_Php_fragment)))
					{
						alt83 = 1;
					}


				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:334:20: ( Plus | Minus | Dot ) multiplication
					{
					DebugLocation(334, 20);

					set289=(IToken)input.LT(1);
					if (input.LA(1)==Dot||input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set289, "set289", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(334, 41);
					PushFollow(Follow._multiplication_in_addition1712);
					multiplication290=multiplication();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication290.Tree, multiplication290, "multiplication290", retval);

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addition", 51);
			LeaveRule("addition", 51);
			LeaveRule_addition();
			if (state.backtracking > 0) { Memoize(input, 51, addition_StartIndex); }

		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "addition"); }
		return retval;

	}
	// $ANTLR end "addition"

	partial void EnterRule_multiplication();
	partial void LeaveRule_multiplication();
	// $ANTLR start "multiplication"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:337:1: multiplication : logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )* ;
	[GrammarRule("multiplication")]
	private Antlr3CstNode multiplication()
	{
		EnterRule_multiplication();
		EnterRule("multiplication", 52);
		var retval = new Antlr3CstNode("multiplication");
		
		retval.Start = (IToken)input.LT(1);
		int multiplication_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set292 = default(IToken);
		Antlr3CstNode logicalNot291 = default(Antlr3CstNode);
		Antlr3CstNode logicalNot293 = default(Antlr3CstNode);

		object set292_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplication");
		DebugLocation(337, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:338:2: ( logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:338:4: logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(338, 4);
			PushFollow(Follow._logicalNot_in_multiplication1725);
			logicalNot291=logicalNot();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot291.Tree, logicalNot291, "logicalNot291", retval);
			DebugLocation(338, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:338:15: ( ( Asterisk | Forwardslash | Percent ) logicalNot )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_1 = input.LA(1);

				if ((LA84_1==Asterisk||LA84_1==Forwardslash||LA84_1==Percent))
				{
					int LA84_2 = input.LA(2);

					if ((EvaluatePredicate(synpred119_Php_fragment)))
					{
						alt84 = 1;
					}


				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:338:16: ( Asterisk | Forwardslash | Percent ) logicalNot
					{
					DebugLocation(338, 16);

					set292=(IToken)input.LT(1);
					if (input.LA(1)==Asterisk||input.LA(1)==Forwardslash||input.LA(1)==Percent)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set292, "set292", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(338, 52);
					PushFollow(Follow._logicalNot_in_multiplication1740);
					logicalNot293=logicalNot();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot293.Tree, logicalNot293, "logicalNot293", retval);

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplication", 52);
			LeaveRule("multiplication", 52);
			LeaveRule_multiplication();
			if (state.backtracking > 0) { Memoize(input, 52, multiplication_StartIndex); }

		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplication"); }
		return retval;

	}
	// $ANTLR end "multiplication"

	partial void EnterRule_logicalNot();
	partial void LeaveRule_logicalNot();
	// $ANTLR start "logicalNot"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:341:1: logicalNot : ( Bang logicalNot | instanceOf );
	[GrammarRule("logicalNot")]
	private Antlr3CstNode logicalNot()
	{
		EnterRule_logicalNot();
		EnterRule("logicalNot", 53);
		var retval = new Antlr3CstNode("logicalNot");
		
		retval.Start = (IToken)input.LT(1);
		int logicalNot_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Bang294 = default(IToken);
		Antlr3CstNode logicalNot295 = default(Antlr3CstNode);
		Antlr3CstNode instanceOf296 = default(Antlr3CstNode);

		object Bang294_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalNot");
		DebugLocation(341, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:342:2: ( Bang logicalNot | instanceOf )
			int alt85=2;
			try { DebugEnterDecision(85, false);
			int LA85_1 = input.LA(1);

			if ((LA85_1==Bang))
			{
				alt85 = 1;
			}
			else if ((LA85_1==Ampersand||LA85_1==ArrayType||(LA85_1>=BoolType && LA85_1<=BooleanType)||LA85_1==Clone||LA85_1==Die||(LA85_1>=DoubleQuotedString && LA85_1<=DoubleType)||LA85_1==Empty||(LA85_1>=Eval && LA85_1<=Exit)||LA85_1==False||LA85_1==FloatType||LA85_1==Function||LA85_1==HaltCompiler||LA85_1==HereDoc||(LA85_1>=Include && LA85_1<=IncrementOperator)||(LA85_1>=IntType && LA85_1<=IntegerType)||(LA85_1>=Isset && LA85_1<=List)||LA85_1==Minus||(LA85_1>=New && LA85_1<=Null)||LA85_1==ObjectType||(LA85_1>=OpenRoundBracket && LA85_1<=OpenSquareBracket)||LA85_1==Plus||(LA85_1>=Real && LA85_1<=RequireOnce)||LA85_1==SingleQuotedString||(LA85_1>=Static && LA85_1<=SuppressWarnings)||(LA85_1>=Tilde && LA85_1<=True)||LA85_1==UnquotedString||LA85_1==UnsetType||LA85_1==VariableName||(LA85_1>=128 && LA85_1<=129)))
			{
				alt85 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 85, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:342:4: Bang logicalNot
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(342, 4);
				Bang294=(IToken)Match(input,Bang,Follow._Bang_in_logicalNot1753); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Bang294_tree = (object)adaptor.Create(Bang294, "Bang294", retval);
				adaptor.AddChild(root_0, Bang294_tree);
				}
				DebugLocation(342, 9);
				PushFollow(Follow._logicalNot_in_logicalNot1755);
				logicalNot295=logicalNot();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot295.Tree, logicalNot295, "logicalNot295", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:343:4: instanceOf
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(343, 4);
				PushFollow(Follow._instanceOf_in_logicalNot1760);
				instanceOf296=instanceOf();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOf296.Tree, instanceOf296, "instanceOf296", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalNot", 53);
			LeaveRule("logicalNot", 53);
			LeaveRule_logicalNot();
			if (state.backtracking > 0) { Memoize(input, 53, logicalNot_StartIndex); }

		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalNot"); }
		return retval;

	}
	// $ANTLR end "logicalNot"

	partial void EnterRule_instanceOf();
	partial void LeaveRule_instanceOf();
	// $ANTLR start "instanceOf"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:346:1: instanceOf : negateOrCast ( Instanceof negateOrCast )? ;
	[GrammarRule("instanceOf")]
	private Antlr3CstNode instanceOf()
	{
		EnterRule_instanceOf();
		EnterRule("instanceOf", 54);
		var retval = new Antlr3CstNode("instanceOf");
		
		retval.Start = (IToken)input.LT(1);
		int instanceOf_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Instanceof298 = default(IToken);
		Antlr3CstNode negateOrCast297 = default(Antlr3CstNode);
		Antlr3CstNode negateOrCast299 = default(Antlr3CstNode);

		object Instanceof298_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "instanceOf");
		DebugLocation(346, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:347:2: ( negateOrCast ( Instanceof negateOrCast )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:347:4: negateOrCast ( Instanceof negateOrCast )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(347, 4);
			PushFollow(Follow._negateOrCast_in_instanceOf1771);
			negateOrCast297=negateOrCast();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast297.Tree, negateOrCast297, "negateOrCast297", retval);
			DebugLocation(347, 17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:347:17: ( Instanceof negateOrCast )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_1 = input.LA(1);

			if ((LA86_1==Instanceof))
			{
				int LA86_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt86 = 1;
				}
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:347:18: Instanceof negateOrCast
				{
				DebugLocation(347, 18);
				Instanceof298=(IToken)Match(input,Instanceof,Follow._Instanceof_in_instanceOf1774); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Instanceof298_tree = (object)adaptor.Create(Instanceof298, "Instanceof298", retval);
				adaptor.AddChild(root_0, Instanceof298_tree);
				}
				DebugLocation(347, 29);
				PushFollow(Follow._negateOrCast_in_instanceOf1776);
				negateOrCast299=negateOrCast();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast299.Tree, negateOrCast299, "negateOrCast299", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOf", 54);
			LeaveRule("instanceOf", 54);
			LeaveRule_instanceOf();
			if (state.backtracking > 0) { Memoize(input, 54, instanceOf_StartIndex); }

		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "instanceOf"); }
		return retval;

	}
	// $ANTLR end "instanceOf"

	partial void EnterRule_negateOrCast();
	partial void LeaveRule_negateOrCast();
	// $ANTLR start "negateOrCast"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:350:1: negateOrCast : ( ( Tilde | Minus | SuppressWarnings ) increment | OpenRoundBracket primitiveType CloseRoundBracket increment | increment );
	[GrammarRule("negateOrCast")]
	private Antlr3CstNode negateOrCast()
	{
		EnterRule_negateOrCast();
		EnterRule("negateOrCast", 55);
		var retval = new Antlr3CstNode("negateOrCast");
		
		retval.Start = (IToken)input.LT(1);
		int negateOrCast_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set300 = default(IToken);
		IToken OpenRoundBracket302 = default(IToken);
		IToken CloseRoundBracket304 = default(IToken);
		Antlr3CstNode increment301 = default(Antlr3CstNode);
		Antlr3CstNode primitiveType303 = default(Antlr3CstNode);
		Antlr3CstNode increment305 = default(Antlr3CstNode);
		Antlr3CstNode increment306 = default(Antlr3CstNode);

		object set300_tree = default(object);
		object OpenRoundBracket302_tree = default(object);
		object CloseRoundBracket304_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "negateOrCast");
		DebugLocation(350, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:351:2: ( ( Tilde | Minus | SuppressWarnings ) increment | OpenRoundBracket primitiveType CloseRoundBracket increment | increment )
			int alt87=3;
			try { DebugEnterDecision(87, false);
			switch (input.LA(1))
			{
			case Minus:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred124_Php_fragment)))
				{
					alt87 = 1;
				}
				else if ((true))
				{
					alt87 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Php_fragment)))
				{
					alt87 = 2;
				}
				else if ((true))
				{
					alt87 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case ArrayType:
			case BoolType:
			case BooleanType:
			case Clone:
			case Die:
			case DoubleQuotedString:
			case DoubleType:
			case Empty:
			case Eval:
			case Exit:
			case False:
			case FloatType:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case IncrementOperator:
			case IntType:
			case Integer:
			case IntegerType:
			case Isset:
			case List:
			case New:
			case Null:
			case ObjectType:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case Static:
			case StringType:
			case True:
			case UnquotedString:
			case UnsetType:
			case VariableName:
			case 128:
			case 129:
				{
				alt87 = 3;
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				alt87 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:351:4: ( Tilde | Minus | SuppressWarnings ) increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(351, 4);

				set300=(IToken)input.LT(1);
				if (input.LA(1)==Minus||input.LA(1)==SuppressWarnings||input.LA(1)==Tilde)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set300, "set300", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(351, 39);
				PushFollow(Follow._increment_in_negateOrCast1801);
				increment301=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment301.Tree, increment301, "increment301", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:352:4: OpenRoundBracket primitiveType CloseRoundBracket increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(352, 4);
				OpenRoundBracket302=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_negateOrCast1806); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket302_tree = (object)adaptor.Create(OpenRoundBracket302, "OpenRoundBracket302", retval);
				adaptor.AddChild(root_0, OpenRoundBracket302_tree);
				}
				DebugLocation(352, 21);
				PushFollow(Follow._primitiveType_in_negateOrCast1808);
				primitiveType303=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType303.Tree, primitiveType303, "primitiveType303", retval);
				DebugLocation(352, 35);
				CloseRoundBracket304=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_negateOrCast1810); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket304_tree = (object)adaptor.Create(CloseRoundBracket304, "CloseRoundBracket304", retval);
				adaptor.AddChild(root_0, CloseRoundBracket304_tree);
				}
				DebugLocation(352, 53);
				PushFollow(Follow._increment_in_negateOrCast1812);
				increment305=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment305.Tree, increment305, "increment305", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:353:4: increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(353, 4);
				PushFollow(Follow._increment_in_negateOrCast1817);
				increment306=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment306.Tree, increment306, "increment306", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("negateOrCast", 55);
			LeaveRule("negateOrCast", 55);
			LeaveRule_negateOrCast();
			if (state.backtracking > 0) { Memoize(input, 55, negateOrCast_StartIndex); }

		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "negateOrCast"); }
		return retval;

	}
	// $ANTLR end "negateOrCast"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:356:1: primitiveType : ( IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ArrayType | ObjectType | UnsetType );
	[GrammarRule("primitiveType")]
	private Antlr3CstNode primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 56);
		var retval = new Antlr3CstNode("primitiveType");
		
		retval.Start = (IToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set307 = default(IToken);

		object set307_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(356, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:357:2: ( IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ArrayType | ObjectType | UnsetType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(357, 2);

			set307=(IToken)input.LT(1);
			if (input.LA(1)==ArrayType||(input.LA(1)>=BoolType && input.LA(1)<=BooleanType)||input.LA(1)==DoubleType||input.LA(1)==FloatType||input.LA(1)==IntType||input.LA(1)==IntegerType||input.LA(1)==ObjectType||input.LA(1)==RealType||input.LA(1)==StringType||input.LA(1)==UnsetType)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set307, "set307", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 56);
			LeaveRule("primitiveType", 56);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 56, primitiveType_StartIndex); }

		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_increment();
	partial void LeaveRule_increment();
	// $ANTLR start "increment"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:361:1: increment : ( IncrementOperator name | name IncrementOperator | listVariables ( Equals | AsignmentOperator ) assignment | newOrClone | OpenRoundBracket expression CloseRoundBracket );
	[GrammarRule("increment")]
	private Antlr3CstNode increment()
	{
		EnterRule_increment();
		EnterRule("increment", 57);
		var retval = new Antlr3CstNode("increment");
		
		retval.Start = (IToken)input.LT(1);
		int increment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IncrementOperator308 = default(IToken);
		IToken IncrementOperator311 = default(IToken);
		IToken set313 = default(IToken);
		IToken OpenRoundBracket316 = default(IToken);
		IToken CloseRoundBracket318 = default(IToken);
		Antlr3CstNode name309 = default(Antlr3CstNode);
		Antlr3CstNode name310 = default(Antlr3CstNode);
		Antlr3CstNode listVariables312 = default(Antlr3CstNode);
		Antlr3CstNode assignment314 = default(Antlr3CstNode);
		Antlr3CstNode newOrClone315 = default(Antlr3CstNode);
		Antlr3CstNode expression317 = default(Antlr3CstNode);

		object IncrementOperator308_tree = default(object);
		object IncrementOperator311_tree = default(object);
		object set313_tree = default(object);
		object OpenRoundBracket316_tree = default(object);
		object CloseRoundBracket318_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "increment");
		DebugLocation(361, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:362:2: ( IncrementOperator name | name IncrementOperator | listVariables ( Equals | AsignmentOperator ) assignment | newOrClone | OpenRoundBracket expression CloseRoundBracket )
			int alt88=5;
			try { DebugEnterDecision(88, false);
			switch (input.LA(1))
			{
			case IncrementOperator:
				{
				alt88 = 1;
				}
				break;
			case VariableName:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred137_Php_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred139_Php_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred140_Php_fragment)))
				{
					alt88 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred137_Php_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred139_Php_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred140_Php_fragment)))
				{
					alt88 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred137_Php_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred139_Php_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred140_Php_fragment)))
				{
					alt88 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred137_Php_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred139_Php_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred140_Php_fragment)))
				{
					alt88 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case List:
				{
				alt88 = 3;
				}
				break;
			case Ampersand:
			case ArrayType:
			case Clone:
			case Die:
			case DoubleQuotedString:
			case Empty:
			case Eval:
			case Exit:
			case False:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case Integer:
			case Isset:
			case Minus:
			case New:
			case Null:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case True:
			case UnsetType:
				{
				alt88 = 4;
				}
				break;
			case OpenRoundBracket:
				{
				alt88 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:362:4: IncrementOperator name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(362, 4);
				IncrementOperator308=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment1880); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncrementOperator308_tree = (object)adaptor.Create(IncrementOperator308, "IncrementOperator308", retval);
				adaptor.AddChild(root_0, IncrementOperator308_tree);
				}
				DebugLocation(362, 22);
				PushFollow(Follow._name_in_increment1882);
				name309=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name309.Tree, name309, "name309", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:363:4: name IncrementOperator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(363, 4);
				PushFollow(Follow._name_in_increment1887);
				name310=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name310.Tree, name310, "name310", retval);
				DebugLocation(363, 9);
				IncrementOperator311=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment1889); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncrementOperator311_tree = (object)adaptor.Create(IncrementOperator311, "IncrementOperator311", retval);
				adaptor.AddChild(root_0, IncrementOperator311_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:364:4: listVariables ( Equals | AsignmentOperator ) assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(364, 4);
				PushFollow(Follow._listVariables_in_increment1894);
				listVariables312=listVariables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, listVariables312.Tree, listVariables312, "listVariables312", retval);
				DebugLocation(364, 18);

				set313=(IToken)input.LT(1);
				if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set313, "set313", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(364, 47);
				PushFollow(Follow._assignment_in_increment1904);
				assignment314=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment314.Tree, assignment314, "assignment314", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:365:4: newOrClone
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(365, 4);
				PushFollow(Follow._newOrClone_in_increment1909);
				newOrClone315=newOrClone();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newOrClone315.Tree, newOrClone315, "newOrClone315", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:366:4: OpenRoundBracket expression CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(366, 4);
				OpenRoundBracket316=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_increment1914); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket316_tree = (object)adaptor.Create(OpenRoundBracket316, "OpenRoundBracket316", retval);
				adaptor.AddChild(root_0, OpenRoundBracket316_tree);
				}
				DebugLocation(366, 21);
				PushFollow(Follow._expression_in_increment1916);
				expression317=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression317.Tree, expression317, "expression317", retval);
				DebugLocation(366, 32);
				CloseRoundBracket318=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_increment1918); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket318_tree = (object)adaptor.Create(CloseRoundBracket318, "CloseRoundBracket318", retval);
				adaptor.AddChild(root_0, CloseRoundBracket318_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("increment", 57);
			LeaveRule("increment", 57);
			LeaveRule_increment();
			if (state.backtracking > 0) { Memoize(input, 57, increment_StartIndex); }

		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "increment"); }
		return retval;

	}
	// $ANTLR end "increment"

	partial void EnterRule_newOrClone();
	partial void LeaveRule_newOrClone();
	// $ANTLR start "newOrClone"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:371:1: newOrClone : ( New ( nameOrFunctionCall | constantOrStaticAccessor ) | New Static ( functionArguments )? | Clone name | atomOrReference );
	[GrammarRule("newOrClone")]
	private Antlr3CstNode newOrClone()
	{
		EnterRule_newOrClone();
		EnterRule("newOrClone", 58);
		var retval = new Antlr3CstNode("newOrClone");
		
		retval.Start = (IToken)input.LT(1);
		int newOrClone_StartIndex = input.Index;

		object root_0 = default(object);

		IToken New319 = default(IToken);
		IToken New322 = default(IToken);
		IToken Static323 = default(IToken);
		IToken Clone325 = default(IToken);
		Antlr3CstNode nameOrFunctionCall320 = default(Antlr3CstNode);
		Antlr3CstNode constantOrStaticAccessor321 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments324 = default(Antlr3CstNode);
		Antlr3CstNode name326 = default(Antlr3CstNode);
		Antlr3CstNode atomOrReference327 = default(Antlr3CstNode);

		object New319_tree = default(object);
		object New322_tree = default(object);
		object Static323_tree = default(object);
		object Clone325_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "newOrClone");
		DebugLocation(371, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:2: ( New ( nameOrFunctionCall | constantOrStaticAccessor ) | New Static ( functionArguments )? | Clone name | atomOrReference )
			int alt91=4;
			try { DebugEnterDecision(91, false);
			switch (input.LA(1))
			{
			case New:
				{
				int LA91_2 = input.LA(2);

				if ((LA91_2==Static))
				{
					int LA91_3 = input.LA(3);

					if ((EvaluatePredicate(synpred142_Php_fragment)))
					{
						alt91 = 1;
					}
					else if ((EvaluatePredicate(synpred144_Php_fragment)))
					{
						alt91 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 91, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if (((LA91_2>=BoolType && LA91_2<=BooleanType)||LA91_2==Die||LA91_2==DoubleType||LA91_2==Empty||(LA91_2>=Eval && LA91_2<=Exit)||LA91_2==FloatType||LA91_2==HaltCompiler||LA91_2==IntType||LA91_2==IntegerType||LA91_2==Isset||LA91_2==ObjectType||LA91_2==RealType||LA91_2==StringType||LA91_2==UnquotedString||LA91_2==UnsetType||LA91_2==VariableName||(LA91_2>=128 && LA91_2<=129)))
				{
					alt91 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				alt91 = 3;
				}
				break;
			case Ampersand:
			case ArrayType:
			case BoolType:
			case BooleanType:
			case Die:
			case DoubleQuotedString:
			case DoubleType:
			case Empty:
			case Eval:
			case Exit:
			case False:
			case FloatType:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case IntType:
			case Integer:
			case IntegerType:
			case Isset:
			case Minus:
			case Null:
			case ObjectType:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case Static:
			case StringType:
			case True:
			case UnquotedString:
			case UnsetType:
			case VariableName:
			case 128:
			case 129:
				{
				alt91 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:4: New ( nameOrFunctionCall | constantOrStaticAccessor )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(373, 4);
				New319=(IToken)Match(input,New,Follow._New_in_newOrClone1940); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New319_tree = (object)adaptor.Create(New319, "New319", retval);
				adaptor.AddChild(root_0, New319_tree);
				}
				DebugLocation(373, 8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:8: ( nameOrFunctionCall | constantOrStaticAccessor )
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				switch (input.LA(1))
				{
				case VariableName:
					{
					int LA89_2 = input.LA(2);

					if ((EvaluatePredicate(synpred141_Php_fragment)))
					{
						alt89 = 1;
					}
					else if ((true))
					{
						alt89 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 89, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 128:
					{
					int LA89_2 = input.LA(2);

					if ((EvaluatePredicate(synpred141_Php_fragment)))
					{
						alt89 = 1;
					}
					else if ((true))
					{
						alt89 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 89, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 129:
					{
					int LA89_2 = input.LA(2);

					if ((EvaluatePredicate(synpred141_Php_fragment)))
					{
						alt89 = 1;
					}
					else if ((true))
					{
						alt89 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 89, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BoolType:
				case BooleanType:
				case DoubleType:
				case FloatType:
				case IntType:
				case IntegerType:
				case ObjectType:
				case RealType:
				case Static:
				case StringType:
				case UnquotedString:
					{
					int LA89_2 = input.LA(2);

					if ((EvaluatePredicate(synpred141_Php_fragment)))
					{
						alt89 = 1;
					}
					else if ((true))
					{
						alt89 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 89, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Die:
				case Empty:
				case Eval:
				case Exit:
				case HaltCompiler:
				case Isset:
				case UnsetType:
					{
					alt89 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 89, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:9: nameOrFunctionCall
					{
					DebugLocation(373, 9);
					PushFollow(Follow._nameOrFunctionCall_in_newOrClone1943);
					nameOrFunctionCall320=nameOrFunctionCall();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall320.Tree, nameOrFunctionCall320, "nameOrFunctionCall320", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:30: constantOrStaticAccessor
					{
					DebugLocation(373, 30);
					PushFollow(Follow._constantOrStaticAccessor_in_newOrClone1947);
					constantOrStaticAccessor321=constantOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor321.Tree, constantOrStaticAccessor321, "constantOrStaticAccessor321", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(89); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:4: New Static ( functionArguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(374, 4);
				New322=(IToken)Match(input,New,Follow._New_in_newOrClone1953); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New322_tree = (object)adaptor.Create(New322, "New322", retval);
				adaptor.AddChild(root_0, New322_tree);
				}
				DebugLocation(374, 8);
				Static323=(IToken)Match(input,Static,Follow._Static_in_newOrClone1955); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static323_tree = (object)adaptor.Create(Static323, "Static323", retval);
				adaptor.AddChild(root_0, Static323_tree);
				}
				DebugLocation(374, 15);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:15: ( functionArguments )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==OpenRoundBracket))
				{
					int LA90_2 = input.LA(2);

					if ((EvaluatePredicate(synpred143_Php_fragment)))
					{
						alt90 = 1;
					}
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:15: functionArguments
					{
					DebugLocation(374, 15);
					PushFollow(Follow._functionArguments_in_newOrClone1957);
					functionArguments324=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments324.Tree, functionArguments324, "functionArguments324", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(90); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:375:4: Clone name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(375, 4);
				Clone325=(IToken)Match(input,Clone,Follow._Clone_in_newOrClone1963); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Clone325_tree = (object)adaptor.Create(Clone325, "Clone325", retval);
				adaptor.AddChild(root_0, Clone325_tree);
				}
				DebugLocation(375, 10);
				PushFollow(Follow._name_in_newOrClone1965);
				name326=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name326.Tree, name326, "name326", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:376:4: atomOrReference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(376, 4);
				PushFollow(Follow._atomOrReference_in_newOrClone1970);
				atomOrReference327=atomOrReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atomOrReference327.Tree, atomOrReference327, "atomOrReference327", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newOrClone", 58);
			LeaveRule("newOrClone", 58);
			LeaveRule_newOrClone();
			if (state.backtracking > 0) { Memoize(input, 58, newOrClone_StartIndex); }

		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "newOrClone"); }
		return retval;

	}
	// $ANTLR end "newOrClone"

	partial void EnterRule_atomOrReference();
	partial void LeaveRule_atomOrReference();
	// $ANTLR start "atomOrReference"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:379:1: atomOrReference : ( reference | atom );
	[GrammarRule("atomOrReference")]
	private Antlr3CstNode atomOrReference()
	{
		EnterRule_atomOrReference();
		EnterRule("atomOrReference", 59);
		var retval = new Antlr3CstNode("atomOrReference");
		
		retval.Start = (IToken)input.LT(1);
		int atomOrReference_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode reference328 = default(Antlr3CstNode);
		Antlr3CstNode atom329 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "atomOrReference");
		DebugLocation(379, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:380:2: ( reference | atom )
			int alt92=2;
			try { DebugEnterDecision(92, false);
			switch (input.LA(1))
			{
			case Ampersand:
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case Function:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				alt92 = 1;
				}
				break;
			case VariableName:
				{
				int LA92_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Php_fragment)))
				{
					alt92 = 1;
				}
				else if ((true))
				{
					alt92 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA92_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Php_fragment)))
				{
					alt92 = 1;
				}
				else if ((true))
				{
					alt92 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA92_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Php_fragment)))
				{
					alt92 = 1;
				}
				else if ((true))
				{
					alt92 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA92_2 = input.LA(2);

				if ((EvaluatePredicate(synpred146_Php_fragment)))
				{
					alt92 = 1;
				}
				else if ((true))
				{
					alt92 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
			case DoubleQuotedString:
			case False:
			case HereDoc:
			case Include:
			case IncludeOnce:
			case Integer:
			case Minus:
			case Null:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case True:
				{
				alt92 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:380:4: reference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(380, 4);
				PushFollow(Follow._reference_in_atomOrReference1981);
				reference328=reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, reference328.Tree, reference328, "reference328", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:381:4: atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(381, 4);
				PushFollow(Follow._atom_in_atomOrReference1986);
				atom329=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom329.Tree, atom329, "atom329", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atomOrReference", 59);
			LeaveRule("atomOrReference", 59);
			LeaveRule_atomOrReference();
			if (state.backtracking > 0) { Memoize(input, 59, atomOrReference_StartIndex); }

		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "atomOrReference"); }
		return retval;

	}
	// $ANTLR end "atomOrReference"

	partial void EnterRule_arrayDeclaration();
	partial void LeaveRule_arrayDeclaration();
	// $ANTLR start "arrayDeclaration"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:384:1: arrayDeclaration : ( ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket | OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket );
	[GrammarRule("arrayDeclaration")]
	private Antlr3CstNode arrayDeclaration()
	{
		EnterRule_arrayDeclaration();
		EnterRule("arrayDeclaration", 60);
		var retval = new Antlr3CstNode("arrayDeclaration");
		
		retval.Start = (IToken)input.LT(1);
		int arrayDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ArrayType330 = default(IToken);
		IToken OpenRoundBracket331 = default(IToken);
		IToken Comma333 = default(IToken);
		IToken Comma335 = default(IToken);
		IToken CloseRoundBracket336 = default(IToken);
		IToken OpenSquareBracket337 = default(IToken);
		IToken Comma339 = default(IToken);
		IToken Comma341 = default(IToken);
		IToken CloseSquareBracket342 = default(IToken);
		Antlr3CstNode arrayEntry332 = default(Antlr3CstNode);
		Antlr3CstNode arrayEntry334 = default(Antlr3CstNode);
		Antlr3CstNode arrayEntry338 = default(Antlr3CstNode);
		Antlr3CstNode arrayEntry340 = default(Antlr3CstNode);

		object ArrayType330_tree = default(object);
		object OpenRoundBracket331_tree = default(object);
		object Comma333_tree = default(object);
		object Comma335_tree = default(object);
		object CloseRoundBracket336_tree = default(object);
		object OpenSquareBracket337_tree = default(object);
		object Comma339_tree = default(object);
		object Comma341_tree = default(object);
		object CloseSquareBracket342_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayDeclaration");
		DebugLocation(384, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:2: ( ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket | OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket )
			int alt99=2;
			try { DebugEnterDecision(99, false);
			int LA99_1 = input.LA(1);

			if ((LA99_1==ArrayType))
			{
				alt99 = 1;
			}
			else if ((LA99_1==OpenSquareBracket))
			{
				alt99 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 99, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:4: ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(385, 4);
				ArrayType330=(IToken)Match(input,ArrayType,Follow._ArrayType_in_arrayDeclaration1997); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ArrayType330_tree = (object)adaptor.Create(ArrayType330, "ArrayType330", retval);
				adaptor.AddChild(root_0, ArrayType330_tree);
				}
				DebugLocation(385, 14);
				OpenRoundBracket331=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_arrayDeclaration1999); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket331_tree = (object)adaptor.Create(OpenRoundBracket331, "OpenRoundBracket331", retval);
				adaptor.AddChild(root_0, OpenRoundBracket331_tree);
				}
				DebugLocation(385, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:31: ( arrayEntry ( Comma arrayEntry )* ( Comma )? )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==Ampersand||LA95_1==ArrayType||LA95_1==Bang||(LA95_1>=BoolType && LA95_1<=BooleanType)||LA95_1==Clone||LA95_1==Die||(LA95_1>=DoubleQuotedString && LA95_1<=DoubleType)||LA95_1==Empty||(LA95_1>=Eval && LA95_1<=Exit)||LA95_1==False||LA95_1==FloatType||LA95_1==Function||LA95_1==HaltCompiler||LA95_1==HereDoc||(LA95_1>=Include && LA95_1<=IncrementOperator)||(LA95_1>=IntType && LA95_1<=IntegerType)||(LA95_1>=Isset && LA95_1<=List)||LA95_1==Minus||(LA95_1>=New && LA95_1<=Null)||LA95_1==ObjectType||(LA95_1>=OpenRoundBracket && LA95_1<=OpenSquareBracket)||LA95_1==Plus||(LA95_1>=Real && LA95_1<=RequireOnce)||LA95_1==SingleQuotedString||(LA95_1>=Static && LA95_1<=SuppressWarnings)||(LA95_1>=Tilde && LA95_1<=True)||LA95_1==UnquotedString||LA95_1==UnsetType||LA95_1==VariableName||(LA95_1>=128 && LA95_1<=129)))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:32: arrayEntry ( Comma arrayEntry )* ( Comma )?
					{
					DebugLocation(385, 32);
					PushFollow(Follow._arrayEntry_in_arrayDeclaration2002);
					arrayEntry332=arrayEntry();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry332.Tree, arrayEntry332, "arrayEntry332", retval);
					DebugLocation(385, 43);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:43: ( Comma arrayEntry )*
					try { DebugEnterSubRule(93);
					while (true)
					{
						int alt93=2;
						try { DebugEnterDecision(93, false);
						int LA93_1 = input.LA(1);

						if ((LA93_1==Comma))
						{
							int LA93_2 = input.LA(2);

							if ((LA93_2==Ampersand||LA93_2==ArrayType||LA93_2==Bang||(LA93_2>=BoolType && LA93_2<=BooleanType)||LA93_2==Clone||LA93_2==Die||(LA93_2>=DoubleQuotedString && LA93_2<=DoubleType)||LA93_2==Empty||(LA93_2>=Eval && LA93_2<=Exit)||LA93_2==False||LA93_2==FloatType||LA93_2==Function||LA93_2==HaltCompiler||LA93_2==HereDoc||(LA93_2>=Include && LA93_2<=IncrementOperator)||(LA93_2>=IntType && LA93_2<=IntegerType)||(LA93_2>=Isset && LA93_2<=List)||LA93_2==Minus||(LA93_2>=New && LA93_2<=Null)||LA93_2==ObjectType||(LA93_2>=OpenRoundBracket && LA93_2<=OpenSquareBracket)||LA93_2==Plus||(LA93_2>=Real && LA93_2<=RequireOnce)||LA93_2==SingleQuotedString||(LA93_2>=Static && LA93_2<=SuppressWarnings)||(LA93_2>=Tilde && LA93_2<=True)||LA93_2==UnquotedString||LA93_2==UnsetType||LA93_2==VariableName||(LA93_2>=128 && LA93_2<=129)))
							{
								alt93 = 1;
							}


						}


						} finally { DebugExitDecision(93); }
						switch ( alt93 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:44: Comma arrayEntry
							{
							DebugLocation(385, 44);
							Comma333=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2005); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Comma333_tree = (object)adaptor.Create(Comma333, "Comma333", retval);
							adaptor.AddChild(root_0, Comma333_tree);
							}
							DebugLocation(385, 50);
							PushFollow(Follow._arrayEntry_in_arrayDeclaration2007);
							arrayEntry334=arrayEntry();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry334.Tree, arrayEntry334, "arrayEntry334", retval);

							}
							break;

						default:
							goto loop93;
						}
					}

					loop93:
						;

					} finally { DebugExitSubRule(93); }

					DebugLocation(385, 63);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:63: ( Comma )?
					int alt94=2;
					try { DebugEnterSubRule(94);
					try { DebugEnterDecision(94, false);
					int LA94_1 = input.LA(1);

					if ((LA94_1==Comma))
					{
						alt94 = 1;
					}
					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:63: Comma
						{
						DebugLocation(385, 63);
						Comma335=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2011); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma335_tree = (object)adaptor.Create(Comma335, "Comma335", retval);
						adaptor.AddChild(root_0, Comma335_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(94); }


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(385, 72);
				CloseRoundBracket336=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_arrayDeclaration2016); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket336_tree = (object)adaptor.Create(CloseRoundBracket336, "CloseRoundBracket336", retval);
				adaptor.AddChild(root_0, CloseRoundBracket336_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:386:4: OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(386, 4);
				OpenSquareBracket337=(IToken)Match(input,OpenSquareBracket,Follow._OpenSquareBracket_in_arrayDeclaration2021); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenSquareBracket337_tree = (object)adaptor.Create(OpenSquareBracket337, "OpenSquareBracket337", retval);
				adaptor.AddChild(root_0, OpenSquareBracket337_tree);
				}
				DebugLocation(386, 22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:386:22: ( arrayEntry ( Comma arrayEntry )* ( Comma )? )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, false);
				int LA98_1 = input.LA(1);

				if ((LA98_1==Ampersand||LA98_1==ArrayType||LA98_1==Bang||(LA98_1>=BoolType && LA98_1<=BooleanType)||LA98_1==Clone||LA98_1==Die||(LA98_1>=DoubleQuotedString && LA98_1<=DoubleType)||LA98_1==Empty||(LA98_1>=Eval && LA98_1<=Exit)||LA98_1==False||LA98_1==FloatType||LA98_1==Function||LA98_1==HaltCompiler||LA98_1==HereDoc||(LA98_1>=Include && LA98_1<=IncrementOperator)||(LA98_1>=IntType && LA98_1<=IntegerType)||(LA98_1>=Isset && LA98_1<=List)||LA98_1==Minus||(LA98_1>=New && LA98_1<=Null)||LA98_1==ObjectType||(LA98_1>=OpenRoundBracket && LA98_1<=OpenSquareBracket)||LA98_1==Plus||(LA98_1>=Real && LA98_1<=RequireOnce)||LA98_1==SingleQuotedString||(LA98_1>=Static && LA98_1<=SuppressWarnings)||(LA98_1>=Tilde && LA98_1<=True)||LA98_1==UnquotedString||LA98_1==UnsetType||LA98_1==VariableName||(LA98_1>=128 && LA98_1<=129)))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:386:23: arrayEntry ( Comma arrayEntry )* ( Comma )?
					{
					DebugLocation(386, 23);
					PushFollow(Follow._arrayEntry_in_arrayDeclaration2024);
					arrayEntry338=arrayEntry();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry338.Tree, arrayEntry338, "arrayEntry338", retval);
					DebugLocation(386, 34);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:386:34: ( Comma arrayEntry )*
					try { DebugEnterSubRule(96);
					while (true)
					{
						int alt96=2;
						try { DebugEnterDecision(96, false);
						int LA96_1 = input.LA(1);

						if ((LA96_1==Comma))
						{
							int LA96_2 = input.LA(2);

							if ((LA96_2==Ampersand||LA96_2==ArrayType||LA96_2==Bang||(LA96_2>=BoolType && LA96_2<=BooleanType)||LA96_2==Clone||LA96_2==Die||(LA96_2>=DoubleQuotedString && LA96_2<=DoubleType)||LA96_2==Empty||(LA96_2>=Eval && LA96_2<=Exit)||LA96_2==False||LA96_2==FloatType||LA96_2==Function||LA96_2==HaltCompiler||LA96_2==HereDoc||(LA96_2>=Include && LA96_2<=IncrementOperator)||(LA96_2>=IntType && LA96_2<=IntegerType)||(LA96_2>=Isset && LA96_2<=List)||LA96_2==Minus||(LA96_2>=New && LA96_2<=Null)||LA96_2==ObjectType||(LA96_2>=OpenRoundBracket && LA96_2<=OpenSquareBracket)||LA96_2==Plus||(LA96_2>=Real && LA96_2<=RequireOnce)||LA96_2==SingleQuotedString||(LA96_2>=Static && LA96_2<=SuppressWarnings)||(LA96_2>=Tilde && LA96_2<=True)||LA96_2==UnquotedString||LA96_2==UnsetType||LA96_2==VariableName||(LA96_2>=128 && LA96_2<=129)))
							{
								alt96 = 1;
							}


						}


						} finally { DebugExitDecision(96); }
						switch ( alt96 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:386:35: Comma arrayEntry
							{
							DebugLocation(386, 35);
							Comma339=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2027); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Comma339_tree = (object)adaptor.Create(Comma339, "Comma339", retval);
							adaptor.AddChild(root_0, Comma339_tree);
							}
							DebugLocation(386, 41);
							PushFollow(Follow._arrayEntry_in_arrayDeclaration2029);
							arrayEntry340=arrayEntry();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry340.Tree, arrayEntry340, "arrayEntry340", retval);

							}
							break;

						default:
							goto loop96;
						}
					}

					loop96:
						;

					} finally { DebugExitSubRule(96); }

					DebugLocation(386, 54);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:386:54: ( Comma )?
					int alt97=2;
					try { DebugEnterSubRule(97);
					try { DebugEnterDecision(97, false);
					int LA97_1 = input.LA(1);

					if ((LA97_1==Comma))
					{
						alt97 = 1;
					}
					} finally { DebugExitDecision(97); }
					switch (alt97)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:386:54: Comma
						{
						DebugLocation(386, 54);
						Comma341=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2033); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma341_tree = (object)adaptor.Create(Comma341, "Comma341", retval);
						adaptor.AddChild(root_0, Comma341_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(97); }


					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(386, 63);
				CloseSquareBracket342=(IToken)Match(input,CloseSquareBracket,Follow._CloseSquareBracket_in_arrayDeclaration2038); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseSquareBracket342_tree = (object)adaptor.Create(CloseSquareBracket342, "CloseSquareBracket342", retval);
				adaptor.AddChild(root_0, CloseSquareBracket342_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclaration", 60);
			LeaveRule("arrayDeclaration", 60);
			LeaveRule_arrayDeclaration();
			if (state.backtracking > 0) { Memoize(input, 60, arrayDeclaration_StartIndex); }

		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaration"); }
		return retval;

	}
	// $ANTLR end "arrayDeclaration"

	partial void EnterRule_arrayEntry();
	partial void LeaveRule_arrayEntry();
	// $ANTLR start "arrayEntry"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:389:1: arrayEntry : ( keyValuePair | expression ) ;
	[GrammarRule("arrayEntry")]
	private Antlr3CstNode arrayEntry()
	{
		EnterRule_arrayEntry();
		EnterRule("arrayEntry", 61);
		var retval = new Antlr3CstNode("arrayEntry");
		
		retval.Start = (IToken)input.LT(1);
		int arrayEntry_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode keyValuePair343 = default(Antlr3CstNode);
		Antlr3CstNode expression344 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "arrayEntry");
		DebugLocation(389, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:390:2: ( ( keyValuePair | expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:390:4: ( keyValuePair | expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(390, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:390:4: ( keyValuePair | expression )
			int alt100=2;
			try { DebugEnterSubRule(100);
			try { DebugEnterDecision(100, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Bang:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA100_2 = input.LA(2);

				if ((EvaluatePredicate(synpred154_Php_fragment)))
				{
					alt100 = 1;
				}
				else if ((true))
				{
					alt100 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:390:5: keyValuePair
				{
				DebugLocation(390, 5);
				PushFollow(Follow._keyValuePair_in_arrayEntry2050);
				keyValuePair343=keyValuePair();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, keyValuePair343.Tree, keyValuePair343, "keyValuePair343", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:390:20: expression
				{
				DebugLocation(390, 20);
				PushFollow(Follow._expression_in_arrayEntry2054);
				expression344=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression344.Tree, expression344, "expression344", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayEntry", 61);
			LeaveRule("arrayEntry", 61);
			LeaveRule_arrayEntry();
			if (state.backtracking > 0) { Memoize(input, 61, arrayEntry_StartIndex); }

		}
		DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayEntry"); }
		return retval;

	}
	// $ANTLR end "arrayEntry"

	partial void EnterRule_keyValuePair();
	partial void LeaveRule_keyValuePair();
	// $ANTLR start "keyValuePair"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:393:1: keyValuePair : ( expression ArrayAssign expression ) ;
	[GrammarRule("keyValuePair")]
	private Antlr3CstNode keyValuePair()
	{
		EnterRule_keyValuePair();
		EnterRule("keyValuePair", 62);
		var retval = new Antlr3CstNode("keyValuePair");
		
		retval.Start = (IToken)input.LT(1);
		int keyValuePair_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ArrayAssign346 = default(IToken);
		Antlr3CstNode expression345 = default(Antlr3CstNode);
		Antlr3CstNode expression347 = default(Antlr3CstNode);

		object ArrayAssign346_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "keyValuePair");
		DebugLocation(393, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:394:2: ( ( expression ArrayAssign expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:394:4: ( expression ArrayAssign expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(394, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:394:4: ( expression ArrayAssign expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:394:5: expression ArrayAssign expression
			{
			DebugLocation(394, 5);
			PushFollow(Follow._expression_in_keyValuePair2067);
			expression345=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression345.Tree, expression345, "expression345", retval);
			DebugLocation(394, 16);
			ArrayAssign346=(IToken)Match(input,ArrayAssign,Follow._ArrayAssign_in_keyValuePair2069); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ArrayAssign346_tree = (object)adaptor.Create(ArrayAssign346, "ArrayAssign346", retval);
			adaptor.AddChild(root_0, ArrayAssign346_tree);
			}
			DebugLocation(394, 28);
			PushFollow(Follow._expression_in_keyValuePair2071);
			expression347=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression347.Tree, expression347, "expression347", retval);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyValuePair", 62);
			LeaveRule("keyValuePair", 62);
			LeaveRule_keyValuePair();
			if (state.backtracking > 0) { Memoize(input, 62, keyValuePair_StartIndex); }

		}
		DebugLocation(395, 1);
		} finally { DebugExitRule(GrammarFileName, "keyValuePair"); }
		return retval;

	}
	// $ANTLR end "keyValuePair"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:397:1: atom : ( SingleQuotedString | DoubleQuotedString | HereDoc | ( Plus | Minus )? Integer | ( Plus | Minus )? Real | boolean | Null | arrayDeclaration | requireOperator expression | constantOrStaticAccessor );
	[GrammarRule("atom")]
	private Antlr3CstNode atom()
	{
		EnterRule_atom();
		EnterRule("atom", 63);
		var retval = new Antlr3CstNode("atom");
		
		retval.Start = (IToken)input.LT(1);
		int atom_StartIndex = input.Index;

		object root_0 = default(object);

		IToken SingleQuotedString348 = default(IToken);
		IToken DoubleQuotedString349 = default(IToken);
		IToken HereDoc350 = default(IToken);
		IToken set351 = default(IToken);
		IToken Integer352 = default(IToken);
		IToken set353 = default(IToken);
		IToken Real354 = default(IToken);
		IToken Null356 = default(IToken);
		Antlr3CstNode boolean355 = default(Antlr3CstNode);
		Antlr3CstNode arrayDeclaration357 = default(Antlr3CstNode);
		Antlr3CstNode requireOperator358 = default(Antlr3CstNode);
		Antlr3CstNode expression359 = default(Antlr3CstNode);
		Antlr3CstNode constantOrStaticAccessor360 = default(Antlr3CstNode);

		object SingleQuotedString348_tree = default(object);
		object DoubleQuotedString349_tree = default(object);
		object HereDoc350_tree = default(object);
		object set351_tree = default(object);
		object Integer352_tree = default(object);
		object set353_tree = default(object);
		object Real354_tree = default(object);
		object Null356_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(397, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:397:5: ( SingleQuotedString | DoubleQuotedString | HereDoc | ( Plus | Minus )? Integer | ( Plus | Minus )? Real | boolean | Null | arrayDeclaration | requireOperator expression | constantOrStaticAccessor )
			int alt103=10;
			try { DebugEnterDecision(103, false);
			switch (input.LA(1))
			{
			case SingleQuotedString:
				{
				alt103 = 1;
				}
				break;
			case DoubleQuotedString:
				{
				alt103 = 2;
				}
				break;
			case HereDoc:
				{
				alt103 = 3;
				}
				break;
			case Minus:
			case Plus:
				{
				int LA103_2 = input.LA(2);

				if ((LA103_2==Integer))
				{
					alt103 = 4;
				}
				else if ((LA103_2==Real))
				{
					alt103 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				alt103 = 4;
				}
				break;
			case Real:
				{
				alt103 = 5;
				}
				break;
			case False:
			case True:
				{
				alt103 = 6;
				}
				break;
			case Null:
				{
				alt103 = 7;
				}
				break;
			case ArrayType:
			case OpenSquareBracket:
				{
				alt103 = 8;
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				alt103 = 9;
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
			case VariableName:
			case 128:
			case 129:
				{
				alt103 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:397:7: SingleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(397, 7);
				SingleQuotedString348=(IToken)Match(input,SingleQuotedString,Follow._SingleQuotedString_in_atom2081); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SingleQuotedString348_tree = (object)adaptor.Create(SingleQuotedString348, "SingleQuotedString348", retval);
				adaptor.AddChild(root_0, SingleQuotedString348_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:398:4: DoubleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(398, 4);
				DoubleQuotedString349=(IToken)Match(input,DoubleQuotedString,Follow._DoubleQuotedString_in_atom2086); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DoubleQuotedString349_tree = (object)adaptor.Create(DoubleQuotedString349, "DoubleQuotedString349", retval);
				adaptor.AddChild(root_0, DoubleQuotedString349_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:399:4: HereDoc
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(399, 4);
				HereDoc350=(IToken)Match(input,HereDoc,Follow._HereDoc_in_atom2091); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HereDoc350_tree = (object)adaptor.Create(HereDoc350, "HereDoc350", retval);
				adaptor.AddChild(root_0, HereDoc350_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:400:4: ( Plus | Minus )? Integer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(400, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:400:4: ( Plus | Minus )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				int LA101_1 = input.LA(1);

				if ((LA101_1==Minus||LA101_1==Plus))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
					{
					DebugLocation(400, 4);

					set351=(IToken)input.LT(1);
					if (input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set351, "set351", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(400, 18);
				Integer352=(IToken)Match(input,Integer,Follow._Integer_in_atom2103); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Integer352_tree = (object)adaptor.Create(Integer352, "Integer352", retval);
				adaptor.AddChild(root_0, Integer352_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:401:4: ( Plus | Minus )? Real
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(401, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:401:4: ( Plus | Minus )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, false);
				int LA102_1 = input.LA(1);

				if ((LA102_1==Minus||LA102_1==Plus))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
					{
					DebugLocation(401, 4);

					set353=(IToken)input.LT(1);
					if (input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set353, "set353", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(401, 18);
				Real354=(IToken)Match(input,Real,Follow._Real_in_atom2115); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Real354_tree = (object)adaptor.Create(Real354, "Real354", retval);
				adaptor.AddChild(root_0, Real354_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:402:4: boolean
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(402, 4);
				PushFollow(Follow._boolean_in_atom2120);
				boolean355=boolean();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolean355.Tree, boolean355, "boolean355", retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:403:4: Null
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(403, 4);
				Null356=(IToken)Match(input,Null,Follow._Null_in_atom2125); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Null356_tree = (object)adaptor.Create(Null356, "Null356", retval);
				adaptor.AddChild(root_0, Null356_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:404:4: arrayDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(404, 4);
				PushFollow(Follow._arrayDeclaration_in_atom2130);
				arrayDeclaration357=arrayDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaration357.Tree, arrayDeclaration357, "arrayDeclaration357", retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:405:4: requireOperator expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(405, 4);
				PushFollow(Follow._requireOperator_in_atom2135);
				requireOperator358=requireOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, requireOperator358.Tree, requireOperator358, "requireOperator358", retval);
				DebugLocation(405, 20);
				PushFollow(Follow._expression_in_atom2137);
				expression359=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression359.Tree, expression359, "expression359", retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:406:4: constantOrStaticAccessor
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(406, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_atom2142);
				constantOrStaticAccessor360=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor360.Tree, constantOrStaticAccessor360, "constantOrStaticAccessor360", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 63);
			LeaveRule("atom", 63);
			LeaveRule_atom();
			if (state.backtracking > 0) { Memoize(input, 63, atom_StartIndex); }

		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_reference();
	partial void LeaveRule_reference();
	// $ANTLR start "reference"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:410:1: reference : ( Ampersand nameOrFunctionCall | nameOrFunctionCall | anonymousFunctionDefinition );
	[GrammarRule("reference")]
	private Antlr3CstNode reference()
	{
		EnterRule_reference();
		EnterRule("reference", 64);
		var retval = new Antlr3CstNode("reference");
		
		retval.Start = (IToken)input.LT(1);
		int reference_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand361 = default(IToken);
		Antlr3CstNode nameOrFunctionCall362 = default(Antlr3CstNode);
		Antlr3CstNode nameOrFunctionCall363 = default(Antlr3CstNode);
		Antlr3CstNode anonymousFunctionDefinition364 = default(Antlr3CstNode);

		object Ampersand361_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "reference");
		DebugLocation(410, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:411:2: ( Ampersand nameOrFunctionCall | nameOrFunctionCall | anonymousFunctionDefinition )
			int alt104=3;
			try { DebugEnterDecision(104, false);
			switch (input.LA(1))
			{
			case Ampersand:
				{
				alt104 = 1;
				}
				break;
			case BoolType:
			case BooleanType:
			case Die:
			case DoubleType:
			case Empty:
			case Eval:
			case Exit:
			case FloatType:
			case HaltCompiler:
			case IntType:
			case IntegerType:
			case Isset:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
			case UnsetType:
			case VariableName:
			case 128:
			case 129:
				{
				alt104 = 2;
				}
				break;
			case Function:
				{
				alt104 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 104, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:411:4: Ampersand nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(411, 4);
				Ampersand361=(IToken)Match(input,Ampersand,Follow._Ampersand_in_reference2154); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand361_tree = (object)adaptor.Create(Ampersand361, "Ampersand361", retval);
				adaptor.AddChild(root_0, Ampersand361_tree);
				}
				DebugLocation(411, 14);
				PushFollow(Follow._nameOrFunctionCall_in_reference2156);
				nameOrFunctionCall362=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall362.Tree, nameOrFunctionCall362, "nameOrFunctionCall362", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:412:4: nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(412, 4);
				PushFollow(Follow._nameOrFunctionCall_in_reference2161);
				nameOrFunctionCall363=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall363.Tree, nameOrFunctionCall363, "nameOrFunctionCall363", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:413:4: anonymousFunctionDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(413, 4);
				PushFollow(Follow._anonymousFunctionDefinition_in_reference2166);
				anonymousFunctionDefinition364=anonymousFunctionDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, anonymousFunctionDefinition364.Tree, anonymousFunctionDefinition364, "anonymousFunctionDefinition364", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("reference", 64);
			LeaveRule("reference", 64);
			LeaveRule_reference();
			if (state.backtracking > 0) { Memoize(input, 64, reference_StartIndex); }

		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "reference"); }
		return retval;

	}
	// $ANTLR end "reference"

	partial void EnterRule_functionArguments();
	partial void LeaveRule_functionArguments();
	// $ANTLR start "functionArguments"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:416:1: functionArguments : OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket ;
	[GrammarRule("functionArguments")]
	private Antlr3CstNode functionArguments()
	{
		EnterRule_functionArguments();
		EnterRule("functionArguments", 65);
		var retval = new Antlr3CstNode("functionArguments");
		
		retval.Start = (IToken)input.LT(1);
		int functionArguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket365 = default(IToken);
		IToken Comma367 = default(IToken);
		IToken CloseRoundBracket369 = default(IToken);
		Antlr3CstNode expression366 = default(Antlr3CstNode);
		Antlr3CstNode expression368 = default(Antlr3CstNode);

		object OpenRoundBracket365_tree = default(object);
		object Comma367_tree = default(object);
		object CloseRoundBracket369_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionArguments");
		DebugLocation(416, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:417:2: ( OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:417:4: OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(417, 4);
			OpenRoundBracket365=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_functionArguments2177); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenRoundBracket365_tree = (object)adaptor.Create(OpenRoundBracket365, "OpenRoundBracket365", retval);
			adaptor.AddChild(root_0, OpenRoundBracket365_tree);
			}
			DebugLocation(417, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:417:21: ( expression ( Comma expression )* )?
			int alt106=2;
			try { DebugEnterSubRule(106);
			try { DebugEnterDecision(106, false);
			int LA106_1 = input.LA(1);

			if ((LA106_1==Ampersand||LA106_1==ArrayType||LA106_1==Bang||(LA106_1>=BoolType && LA106_1<=BooleanType)||LA106_1==Clone||LA106_1==Die||(LA106_1>=DoubleQuotedString && LA106_1<=DoubleType)||LA106_1==Empty||(LA106_1>=Eval && LA106_1<=Exit)||LA106_1==False||LA106_1==FloatType||LA106_1==Function||LA106_1==HaltCompiler||LA106_1==HereDoc||(LA106_1>=Include && LA106_1<=IncrementOperator)||(LA106_1>=IntType && LA106_1<=IntegerType)||(LA106_1>=Isset && LA106_1<=List)||LA106_1==Minus||(LA106_1>=New && LA106_1<=Null)||LA106_1==ObjectType||(LA106_1>=OpenRoundBracket && LA106_1<=OpenSquareBracket)||LA106_1==Plus||(LA106_1>=Real && LA106_1<=RequireOnce)||LA106_1==SingleQuotedString||(LA106_1>=Static && LA106_1<=SuppressWarnings)||(LA106_1>=Tilde && LA106_1<=True)||LA106_1==UnquotedString||LA106_1==UnsetType||LA106_1==VariableName||(LA106_1>=128 && LA106_1<=129)))
			{
				alt106 = 1;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:417:22: expression ( Comma expression )*
				{
				DebugLocation(417, 22);
				PushFollow(Follow._expression_in_functionArguments2180);
				expression366=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression366.Tree, expression366, "expression366", retval);
				DebugLocation(417, 33);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:417:33: ( Comma expression )*
				try { DebugEnterSubRule(105);
				while (true)
				{
					int alt105=2;
					try { DebugEnterDecision(105, false);
					int LA105_1 = input.LA(1);

					if ((LA105_1==Comma))
					{
						alt105 = 1;
					}


					} finally { DebugExitDecision(105); }
					switch ( alt105 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:417:34: Comma expression
						{
						DebugLocation(417, 34);
						Comma367=(IToken)Match(input,Comma,Follow._Comma_in_functionArguments2183); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma367_tree = (object)adaptor.Create(Comma367, "Comma367", retval);
						adaptor.AddChild(root_0, Comma367_tree);
						}
						DebugLocation(417, 40);
						PushFollow(Follow._expression_in_functionArguments2185);
						expression368=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression368.Tree, expression368, "expression368", retval);

						}
						break;

					default:
						goto loop105;
					}
				}

				loop105:
					;

				} finally { DebugExitSubRule(105); }


				}
				break;

			}
			} finally { DebugExitSubRule(106); }

			DebugLocation(417, 55);
			CloseRoundBracket369=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_functionArguments2191); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseRoundBracket369_tree = (object)adaptor.Create(CloseRoundBracket369, "CloseRoundBracket369", retval);
			adaptor.AddChild(root_0, CloseRoundBracket369_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionArguments", 65);
			LeaveRule("functionArguments", 65);
			LeaveRule_functionArguments();
			if (state.backtracking > 0) { Memoize(input, 65, functionArguments_StartIndex); }

		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "functionArguments"); }
		return retval;

	}
	// $ANTLR end "functionArguments"

	partial void EnterRule_indexer();
	partial void LeaveRule_indexer();
	// $ANTLR start "indexer"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:420:1: indexer : ( OpenSquareBracket ( expression )? CloseSquareBracket | OpenCurlyBracket ( expression )? CloseCurlyBracket );
	[GrammarRule("indexer")]
	private Antlr3CstNode indexer()
	{
		EnterRule_indexer();
		EnterRule("indexer", 66);
		var retval = new Antlr3CstNode("indexer");
		
		retval.Start = (IToken)input.LT(1);
		int indexer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenSquareBracket370 = default(IToken);
		IToken CloseSquareBracket372 = default(IToken);
		IToken OpenCurlyBracket373 = default(IToken);
		IToken CloseCurlyBracket375 = default(IToken);
		Antlr3CstNode expression371 = default(Antlr3CstNode);
		Antlr3CstNode expression374 = default(Antlr3CstNode);

		object OpenSquareBracket370_tree = default(object);
		object CloseSquareBracket372_tree = default(object);
		object OpenCurlyBracket373_tree = default(object);
		object CloseCurlyBracket375_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "indexer");
		DebugLocation(420, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:421:2: ( OpenSquareBracket ( expression )? CloseSquareBracket | OpenCurlyBracket ( expression )? CloseCurlyBracket )
			int alt109=2;
			try { DebugEnterDecision(109, false);
			int LA109_1 = input.LA(1);

			if ((LA109_1==OpenSquareBracket))
			{
				alt109 = 1;
			}
			else if ((LA109_1==OpenCurlyBracket))
			{
				alt109 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 109, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:421:4: OpenSquareBracket ( expression )? CloseSquareBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(421, 4);
				OpenSquareBracket370=(IToken)Match(input,OpenSquareBracket,Follow._OpenSquareBracket_in_indexer2202); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenSquareBracket370_tree = (object)adaptor.Create(OpenSquareBracket370, "OpenSquareBracket370", retval);
				adaptor.AddChild(root_0, OpenSquareBracket370_tree);
				}
				DebugLocation(421, 22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:421:22: ( expression )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				int LA107_1 = input.LA(1);

				if ((LA107_1==Ampersand||LA107_1==ArrayType||LA107_1==Bang||(LA107_1>=BoolType && LA107_1<=BooleanType)||LA107_1==Clone||LA107_1==Die||(LA107_1>=DoubleQuotedString && LA107_1<=DoubleType)||LA107_1==Empty||(LA107_1>=Eval && LA107_1<=Exit)||LA107_1==False||LA107_1==FloatType||LA107_1==Function||LA107_1==HaltCompiler||LA107_1==HereDoc||(LA107_1>=Include && LA107_1<=IncrementOperator)||(LA107_1>=IntType && LA107_1<=IntegerType)||(LA107_1>=Isset && LA107_1<=List)||LA107_1==Minus||(LA107_1>=New && LA107_1<=Null)||LA107_1==ObjectType||(LA107_1>=OpenRoundBracket && LA107_1<=OpenSquareBracket)||LA107_1==Plus||(LA107_1>=Real && LA107_1<=RequireOnce)||LA107_1==SingleQuotedString||(LA107_1>=Static && LA107_1<=SuppressWarnings)||(LA107_1>=Tilde && LA107_1<=True)||LA107_1==UnquotedString||LA107_1==UnsetType||LA107_1==VariableName||(LA107_1>=128 && LA107_1<=129)))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:421:22: expression
					{
					DebugLocation(421, 22);
					PushFollow(Follow._expression_in_indexer2204);
					expression371=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression371.Tree, expression371, "expression371", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(421, 34);
				CloseSquareBracket372=(IToken)Match(input,CloseSquareBracket,Follow._CloseSquareBracket_in_indexer2207); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseSquareBracket372_tree = (object)adaptor.Create(CloseSquareBracket372, "CloseSquareBracket372", retval);
				adaptor.AddChild(root_0, CloseSquareBracket372_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:422:4: OpenCurlyBracket ( expression )? CloseCurlyBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(422, 4);
				OpenCurlyBracket373=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_indexer2212); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenCurlyBracket373_tree = (object)adaptor.Create(OpenCurlyBracket373, "OpenCurlyBracket373", retval);
				adaptor.AddChild(root_0, OpenCurlyBracket373_tree);
				}
				DebugLocation(422, 21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:422:21: ( expression )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, false);
				int LA108_1 = input.LA(1);

				if ((LA108_1==Ampersand||LA108_1==ArrayType||LA108_1==Bang||(LA108_1>=BoolType && LA108_1<=BooleanType)||LA108_1==Clone||LA108_1==Die||(LA108_1>=DoubleQuotedString && LA108_1<=DoubleType)||LA108_1==Empty||(LA108_1>=Eval && LA108_1<=Exit)||LA108_1==False||LA108_1==FloatType||LA108_1==Function||LA108_1==HaltCompiler||LA108_1==HereDoc||(LA108_1>=Include && LA108_1<=IncrementOperator)||(LA108_1>=IntType && LA108_1<=IntegerType)||(LA108_1>=Isset && LA108_1<=List)||LA108_1==Minus||(LA108_1>=New && LA108_1<=Null)||LA108_1==ObjectType||(LA108_1>=OpenRoundBracket && LA108_1<=OpenSquareBracket)||LA108_1==Plus||(LA108_1>=Real && LA108_1<=RequireOnce)||LA108_1==SingleQuotedString||(LA108_1>=Static && LA108_1<=SuppressWarnings)||(LA108_1>=Tilde && LA108_1<=True)||LA108_1==UnquotedString||LA108_1==UnsetType||LA108_1==VariableName||(LA108_1>=128 && LA108_1<=129)))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:422:21: expression
					{
					DebugLocation(422, 21);
					PushFollow(Follow._expression_in_indexer2214);
					expression374=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression374.Tree, expression374, "expression374", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(422, 33);
				CloseCurlyBracket375=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_indexer2217); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseCurlyBracket375_tree = (object)adaptor.Create(CloseCurlyBracket375, "CloseCurlyBracket375", retval);
				adaptor.AddChild(root_0, CloseCurlyBracket375_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexer", 66);
			LeaveRule("indexer", 66);
			LeaveRule_indexer();
			if (state.backtracking > 0) { Memoize(input, 66, indexer_StartIndex); }

		}
		DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "indexer"); }
		return retval;

	}
	// $ANTLR end "indexer"

	partial void EnterRule_memberAccess();
	partial void LeaveRule_memberAccess();
	// $ANTLR start "memberAccess"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:426:1: memberAccess : '->' ( expression | '{' expression '}' | New | Clone | Echo | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) ;
	[GrammarRule("memberAccess")]
	private Antlr3CstNode memberAccess()
	{
		EnterRule_memberAccess();
		EnterRule("memberAccess", 67);
		var retval = new Antlr3CstNode("memberAccess");
		
		retval.Start = (IToken)input.LT(1);
		int memberAccess_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal376 = default(IToken);
		IToken char_literal378 = default(IToken);
		IToken char_literal380 = default(IToken);
		IToken New381 = default(IToken);
		IToken Clone382 = default(IToken);
		IToken Echo383 = default(IToken);
		IToken If384 = default(IToken);
		IToken Else385 = default(IToken);
		IToken ElseIf386 = default(IToken);
		IToken For387 = default(IToken);
		IToken Foreach388 = default(IToken);
		IToken While389 = default(IToken);
		IToken Do390 = default(IToken);
		IToken Try391 = default(IToken);
		IToken Catch392 = default(IToken);
		IToken Finally393 = default(IToken);
		IToken Switch394 = default(IToken);
		IToken Case395 = default(IToken);
		IToken Default396 = default(IToken);
		IToken Namespace397 = default(IToken);
		IToken Function398 = default(IToken);
		IToken Break399 = default(IToken);
		IToken Continue400 = default(IToken);
		IToken Goto401 = default(IToken);
		IToken Return402 = default(IToken);
		IToken Throw403 = default(IToken);
		IToken Global404 = default(IToken);
		IToken Static405 = default(IToken);
		IToken And406 = default(IToken);
		IToken Or407 = default(IToken);
		IToken Xor408 = default(IToken);
		IToken Instanceof409 = default(IToken);
		IToken Null410 = default(IToken);
		IToken List411 = default(IToken);
		IToken Class412 = default(IToken);
		IToken Interface413 = default(IToken);
		IToken Extends414 = default(IToken);
		IToken Implements415 = default(IToken);
		IToken Abstract416 = default(IToken);
		IToken Var417 = default(IToken);
		IToken Const418 = default(IToken);
		IToken As419 = default(IToken);
		IToken Use420 = default(IToken);
		IToken Require421 = default(IToken);
		IToken RequireOnce422 = default(IToken);
		IToken Include423 = default(IToken);
		IToken IncludeOnce424 = default(IToken);
		IToken Public425 = default(IToken);
		IToken Private426 = default(IToken);
		IToken Protected427 = default(IToken);
		IToken True428 = default(IToken);
		IToken False429 = default(IToken);
		IToken HaltCompiler430 = default(IToken);
		IToken Die431 = default(IToken);
		IToken Empty432 = default(IToken);
		IToken Exit433 = default(IToken);
		IToken Eval434 = default(IToken);
		IToken Isset435 = default(IToken);
		IToken IntType436 = default(IToken);
		IToken IntegerType437 = default(IToken);
		IToken BoolType438 = default(IToken);
		IToken BooleanType439 = default(IToken);
		IToken FloatType440 = default(IToken);
		IToken DoubleType441 = default(IToken);
		IToken RealType442 = default(IToken);
		IToken StringType443 = default(IToken);
		IToken ObjectType444 = default(IToken);
		Antlr3CstNode expression377 = default(Antlr3CstNode);
		Antlr3CstNode expression379 = default(Antlr3CstNode);

		object string_literal376_tree = default(object);
		object char_literal378_tree = default(object);
		object char_literal380_tree = default(object);
		object New381_tree = default(object);
		object Clone382_tree = default(object);
		object Echo383_tree = default(object);
		object If384_tree = default(object);
		object Else385_tree = default(object);
		object ElseIf386_tree = default(object);
		object For387_tree = default(object);
		object Foreach388_tree = default(object);
		object While389_tree = default(object);
		object Do390_tree = default(object);
		object Try391_tree = default(object);
		object Catch392_tree = default(object);
		object Finally393_tree = default(object);
		object Switch394_tree = default(object);
		object Case395_tree = default(object);
		object Default396_tree = default(object);
		object Namespace397_tree = default(object);
		object Function398_tree = default(object);
		object Break399_tree = default(object);
		object Continue400_tree = default(object);
		object Goto401_tree = default(object);
		object Return402_tree = default(object);
		object Throw403_tree = default(object);
		object Global404_tree = default(object);
		object Static405_tree = default(object);
		object And406_tree = default(object);
		object Or407_tree = default(object);
		object Xor408_tree = default(object);
		object Instanceof409_tree = default(object);
		object Null410_tree = default(object);
		object List411_tree = default(object);
		object Class412_tree = default(object);
		object Interface413_tree = default(object);
		object Extends414_tree = default(object);
		object Implements415_tree = default(object);
		object Abstract416_tree = default(object);
		object Var417_tree = default(object);
		object Const418_tree = default(object);
		object As419_tree = default(object);
		object Use420_tree = default(object);
		object Require421_tree = default(object);
		object RequireOnce422_tree = default(object);
		object Include423_tree = default(object);
		object IncludeOnce424_tree = default(object);
		object Public425_tree = default(object);
		object Private426_tree = default(object);
		object Protected427_tree = default(object);
		object True428_tree = default(object);
		object False429_tree = default(object);
		object HaltCompiler430_tree = default(object);
		object Die431_tree = default(object);
		object Empty432_tree = default(object);
		object Exit433_tree = default(object);
		object Eval434_tree = default(object);
		object Isset435_tree = default(object);
		object IntType436_tree = default(object);
		object IntegerType437_tree = default(object);
		object BoolType438_tree = default(object);
		object BooleanType439_tree = default(object);
		object FloatType440_tree = default(object);
		object DoubleType441_tree = default(object);
		object RealType442_tree = default(object);
		object StringType443_tree = default(object);
		object ObjectType444_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "memberAccess");
		DebugLocation(426, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:427:2: ( '->' ( expression | '{' expression '}' | New | Clone | Echo | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:427:4: '->' ( expression | '{' expression '}' | New | Clone | Echo | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(427, 4);
			string_literal376=(IToken)Match(input,InstanceMember,Follow._InstanceMember_in_memberAccess2229); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal376_tree = (object)adaptor.Create(string_literal376, "string_literal376", retval);
			adaptor.AddChild(root_0, string_literal376_tree);
			}
			DebugLocation(427, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:427:9: ( expression | '{' expression '}' | New | Clone | Echo | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
			int alt110=66;
			try { DebugEnterSubRule(110);
			try { DebugEnterDecision(110, false);
			try
			{
				alt110 = dfa110.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:427:10: expression
				{
				DebugLocation(427, 10);
				PushFollow(Follow._expression_in_memberAccess2232);
				expression377=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression377.Tree, expression377, "expression377", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:427:23: '{' expression '}'
				{
				DebugLocation(427, 23);
				char_literal378=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_memberAccess2236); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal378_tree = (object)adaptor.Create(char_literal378, "char_literal378", retval);
				adaptor.AddChild(root_0, char_literal378_tree);
				}
				DebugLocation(427, 27);
				PushFollow(Follow._expression_in_memberAccess2238);
				expression379=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression379.Tree, expression379, "expression379", retval);
				DebugLocation(427, 38);
				char_literal380=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_memberAccess2240); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal380_tree = (object)adaptor.Create(char_literal380, "char_literal380", retval);
				adaptor.AddChild(root_0, char_literal380_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:6: New
				{
				DebugLocation(428, 6);
				New381=(IToken)Match(input,New,Follow._New_in_memberAccess2247); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New381_tree = (object)adaptor.Create(New381, "New381", retval);
				adaptor.AddChild(root_0, New381_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:10: Clone
				{
				DebugLocation(428, 10);
				Clone382=(IToken)Match(input,Clone,Follow._Clone_in_memberAccess2249); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Clone382_tree = (object)adaptor.Create(Clone382, "Clone382", retval);
				adaptor.AddChild(root_0, Clone382_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:16: Echo
				{
				DebugLocation(428, 16);
				Echo383=(IToken)Match(input,Echo,Follow._Echo_in_memberAccess2251); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Echo383_tree = (object)adaptor.Create(Echo383, "Echo383", retval);
				adaptor.AddChild(root_0, Echo383_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:21: If
				{
				DebugLocation(428, 21);
				If384=(IToken)Match(input,If,Follow._If_in_memberAccess2253); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If384_tree = (object)adaptor.Create(If384, "If384", retval);
				adaptor.AddChild(root_0, If384_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:24: Else
				{
				DebugLocation(428, 24);
				Else385=(IToken)Match(input,Else,Follow._Else_in_memberAccess2255); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else385_tree = (object)adaptor.Create(Else385, "Else385", retval);
				adaptor.AddChild(root_0, Else385_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:29: ElseIf
				{
				DebugLocation(428, 29);
				ElseIf386=(IToken)Match(input,ElseIf,Follow._ElseIf_in_memberAccess2257); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf386_tree = (object)adaptor.Create(ElseIf386, "ElseIf386", retval);
				adaptor.AddChild(root_0, ElseIf386_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:36: For
				{
				DebugLocation(428, 36);
				For387=(IToken)Match(input,For,Follow._For_in_memberAccess2259); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For387_tree = (object)adaptor.Create(For387, "For387", retval);
				adaptor.AddChild(root_0, For387_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:40: Foreach
				{
				DebugLocation(428, 40);
				Foreach388=(IToken)Match(input,Foreach,Follow._Foreach_in_memberAccess2261); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach388_tree = (object)adaptor.Create(Foreach388, "Foreach388", retval);
				adaptor.AddChild(root_0, Foreach388_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:48: While
				{
				DebugLocation(428, 48);
				While389=(IToken)Match(input,While,Follow._While_in_memberAccess2263); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While389_tree = (object)adaptor.Create(While389, "While389", retval);
				adaptor.AddChild(root_0, While389_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:54: Do
				{
				DebugLocation(428, 54);
				Do390=(IToken)Match(input,Do,Follow._Do_in_memberAccess2265); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Do390_tree = (object)adaptor.Create(Do390, "Do390", retval);
				adaptor.AddChild(root_0, Do390_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:57: Try
				{
				DebugLocation(428, 57);
				Try391=(IToken)Match(input,Try,Follow._Try_in_memberAccess2267); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Try391_tree = (object)adaptor.Create(Try391, "Try391", retval);
				adaptor.AddChild(root_0, Try391_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:61: Catch
				{
				DebugLocation(428, 61);
				Catch392=(IToken)Match(input,Catch,Follow._Catch_in_memberAccess2269); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Catch392_tree = (object)adaptor.Create(Catch392, "Catch392", retval);
				adaptor.AddChild(root_0, Catch392_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:67: Finally
				{
				DebugLocation(428, 67);
				Finally393=(IToken)Match(input,Finally,Follow._Finally_in_memberAccess2271); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Finally393_tree = (object)adaptor.Create(Finally393, "Finally393", retval);
				adaptor.AddChild(root_0, Finally393_tree);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:75: Switch
				{
				DebugLocation(428, 75);
				Switch394=(IToken)Match(input,Switch,Follow._Switch_in_memberAccess2273); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Switch394_tree = (object)adaptor.Create(Switch394, "Switch394", retval);
				adaptor.AddChild(root_0, Switch394_tree);
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:82: Case
				{
				DebugLocation(428, 82);
				Case395=(IToken)Match(input,Case,Follow._Case_in_memberAccess2275); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Case395_tree = (object)adaptor.Create(Case395, "Case395", retval);
				adaptor.AddChild(root_0, Case395_tree);
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:87: Default
				{
				DebugLocation(428, 87);
				Default396=(IToken)Match(input,Default,Follow._Default_in_memberAccess2277); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Default396_tree = (object)adaptor.Create(Default396, "Default396", retval);
				adaptor.AddChild(root_0, Default396_tree);
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:95: Namespace
				{
				DebugLocation(428, 95);
				Namespace397=(IToken)Match(input,Namespace,Follow._Namespace_in_memberAccess2279); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Namespace397_tree = (object)adaptor.Create(Namespace397, "Namespace397", retval);
				adaptor.AddChild(root_0, Namespace397_tree);
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:105: Function
				{
				DebugLocation(428, 105);
				Function398=(IToken)Match(input,Function,Follow._Function_in_memberAccess2281); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function398_tree = (object)adaptor.Create(Function398, "Function398", retval);
				adaptor.AddChild(root_0, Function398_tree);
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:114: Break
				{
				DebugLocation(428, 114);
				Break399=(IToken)Match(input,Break,Follow._Break_in_memberAccess2283); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Break399_tree = (object)adaptor.Create(Break399, "Break399", retval);
				adaptor.AddChild(root_0, Break399_tree);
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:120: Continue
				{
				DebugLocation(428, 120);
				Continue400=(IToken)Match(input,Continue,Follow._Continue_in_memberAccess2285); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Continue400_tree = (object)adaptor.Create(Continue400, "Continue400", retval);
				adaptor.AddChild(root_0, Continue400_tree);
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:129: Goto
				{
				DebugLocation(428, 129);
				Goto401=(IToken)Match(input,Goto,Follow._Goto_in_memberAccess2287); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto401_tree = (object)adaptor.Create(Goto401, "Goto401", retval);
				adaptor.AddChild(root_0, Goto401_tree);
				}

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:134: Return
				{
				DebugLocation(428, 134);
				Return402=(IToken)Match(input,Return,Follow._Return_in_memberAccess2289); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Return402_tree = (object)adaptor.Create(Return402, "Return402", retval);
				adaptor.AddChild(root_0, Return402_tree);
				}

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:141: Throw
				{
				DebugLocation(428, 141);
				Throw403=(IToken)Match(input,Throw,Follow._Throw_in_memberAccess2291); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Throw403_tree = (object)adaptor.Create(Throw403, "Throw403", retval);
				adaptor.AddChild(root_0, Throw403_tree);
				}

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:147: Global
				{
				DebugLocation(428, 147);
				Global404=(IToken)Match(input,Global,Follow._Global_in_memberAccess2293); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Global404_tree = (object)adaptor.Create(Global404, "Global404", retval);
				adaptor.AddChild(root_0, Global404_tree);
				}

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:154: Static
				{
				DebugLocation(428, 154);
				Static405=(IToken)Match(input,Static,Follow._Static_in_memberAccess2295); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static405_tree = (object)adaptor.Create(Static405, "Static405", retval);
				adaptor.AddChild(root_0, Static405_tree);
				}

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:161: And
				{
				DebugLocation(428, 161);
				And406=(IToken)Match(input,And,Follow._And_in_memberAccess2297); if (state.failed) return retval;
				if (state.backtracking == 0) {
				And406_tree = (object)adaptor.Create(And406, "And406", retval);
				adaptor.AddChild(root_0, And406_tree);
				}

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:165: Or
				{
				DebugLocation(428, 165);
				Or407=(IToken)Match(input,Or,Follow._Or_in_memberAccess2299); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Or407_tree = (object)adaptor.Create(Or407, "Or407", retval);
				adaptor.AddChild(root_0, Or407_tree);
				}

				}
				break;
			case 30:
				DebugEnterAlt(30);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:168: Xor
				{
				DebugLocation(428, 168);
				Xor408=(IToken)Match(input,Xor,Follow._Xor_in_memberAccess2301); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Xor408_tree = (object)adaptor.Create(Xor408, "Xor408", retval);
				adaptor.AddChild(root_0, Xor408_tree);
				}

				}
				break;
			case 31:
				DebugEnterAlt(31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:172: Instanceof
				{
				DebugLocation(428, 172);
				Instanceof409=(IToken)Match(input,Instanceof,Follow._Instanceof_in_memberAccess2303); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Instanceof409_tree = (object)adaptor.Create(Instanceof409, "Instanceof409", retval);
				adaptor.AddChild(root_0, Instanceof409_tree);
				}

				}
				break;
			case 32:
				DebugEnterAlt(32);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:183: Null
				{
				DebugLocation(428, 183);
				Null410=(IToken)Match(input,Null,Follow._Null_in_memberAccess2305); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Null410_tree = (object)adaptor.Create(Null410, "Null410", retval);
				adaptor.AddChild(root_0, Null410_tree);
				}

				}
				break;
			case 33:
				DebugEnterAlt(33);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:188: List
				{
				DebugLocation(428, 188);
				List411=(IToken)Match(input,List,Follow._List_in_memberAccess2307); if (state.failed) return retval;
				if (state.backtracking == 0) {
				List411_tree = (object)adaptor.Create(List411, "List411", retval);
				adaptor.AddChild(root_0, List411_tree);
				}

				}
				break;
			case 34:
				DebugEnterAlt(34);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:193: Class
				{
				DebugLocation(428, 193);
				Class412=(IToken)Match(input,Class,Follow._Class_in_memberAccess2309); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Class412_tree = (object)adaptor.Create(Class412, "Class412", retval);
				adaptor.AddChild(root_0, Class412_tree);
				}

				}
				break;
			case 35:
				DebugEnterAlt(35);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:199: Interface
				{
				DebugLocation(428, 199);
				Interface413=(IToken)Match(input,Interface,Follow._Interface_in_memberAccess2311); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Interface413_tree = (object)adaptor.Create(Interface413, "Interface413", retval);
				adaptor.AddChild(root_0, Interface413_tree);
				}

				}
				break;
			case 36:
				DebugEnterAlt(36);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:209: Extends
				{
				DebugLocation(428, 209);
				Extends414=(IToken)Match(input,Extends,Follow._Extends_in_memberAccess2313); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Extends414_tree = (object)adaptor.Create(Extends414, "Extends414", retval);
				adaptor.AddChild(root_0, Extends414_tree);
				}

				}
				break;
			case 37:
				DebugEnterAlt(37);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:217: Implements
				{
				DebugLocation(428, 217);
				Implements415=(IToken)Match(input,Implements,Follow._Implements_in_memberAccess2315); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Implements415_tree = (object)adaptor.Create(Implements415, "Implements415", retval);
				adaptor.AddChild(root_0, Implements415_tree);
				}

				}
				break;
			case 38:
				DebugEnterAlt(38);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:228: Abstract
				{
				DebugLocation(428, 228);
				Abstract416=(IToken)Match(input,Abstract,Follow._Abstract_in_memberAccess2317); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Abstract416_tree = (object)adaptor.Create(Abstract416, "Abstract416", retval);
				adaptor.AddChild(root_0, Abstract416_tree);
				}

				}
				break;
			case 39:
				DebugEnterAlt(39);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:237: Var
				{
				DebugLocation(428, 237);
				Var417=(IToken)Match(input,Var,Follow._Var_in_memberAccess2319); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Var417_tree = (object)adaptor.Create(Var417, "Var417", retval);
				adaptor.AddChild(root_0, Var417_tree);
				}

				}
				break;
			case 40:
				DebugEnterAlt(40);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:241: Const
				{
				DebugLocation(428, 241);
				Const418=(IToken)Match(input,Const,Follow._Const_in_memberAccess2321); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Const418_tree = (object)adaptor.Create(Const418, "Const418", retval);
				adaptor.AddChild(root_0, Const418_tree);
				}

				}
				break;
			case 41:
				DebugEnterAlt(41);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:247: As
				{
				DebugLocation(428, 247);
				As419=(IToken)Match(input,As,Follow._As_in_memberAccess2323); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As419_tree = (object)adaptor.Create(As419, "As419", retval);
				adaptor.AddChild(root_0, As419_tree);
				}

				}
				break;
			case 42:
				DebugEnterAlt(42);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:250: Use
				{
				DebugLocation(428, 250);
				Use420=(IToken)Match(input,Use,Follow._Use_in_memberAccess2325); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Use420_tree = (object)adaptor.Create(Use420, "Use420", retval);
				adaptor.AddChild(root_0, Use420_tree);
				}

				}
				break;
			case 43:
				DebugEnterAlt(43);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:254: Require
				{
				DebugLocation(428, 254);
				Require421=(IToken)Match(input,Require,Follow._Require_in_memberAccess2327); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Require421_tree = (object)adaptor.Create(Require421, "Require421", retval);
				adaptor.AddChild(root_0, Require421_tree);
				}

				}
				break;
			case 44:
				DebugEnterAlt(44);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:262: RequireOnce
				{
				DebugLocation(428, 262);
				RequireOnce422=(IToken)Match(input,RequireOnce,Follow._RequireOnce_in_memberAccess2329); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RequireOnce422_tree = (object)adaptor.Create(RequireOnce422, "RequireOnce422", retval);
				adaptor.AddChild(root_0, RequireOnce422_tree);
				}

				}
				break;
			case 45:
				DebugEnterAlt(45);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:274: Include
				{
				DebugLocation(428, 274);
				Include423=(IToken)Match(input,Include,Follow._Include_in_memberAccess2331); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Include423_tree = (object)adaptor.Create(Include423, "Include423", retval);
				adaptor.AddChild(root_0, Include423_tree);
				}

				}
				break;
			case 46:
				DebugEnterAlt(46);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:282: IncludeOnce
				{
				DebugLocation(428, 282);
				IncludeOnce424=(IToken)Match(input,IncludeOnce,Follow._IncludeOnce_in_memberAccess2333); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncludeOnce424_tree = (object)adaptor.Create(IncludeOnce424, "IncludeOnce424", retval);
				adaptor.AddChild(root_0, IncludeOnce424_tree);
				}

				}
				break;
			case 47:
				DebugEnterAlt(47);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:294: Public
				{
				DebugLocation(428, 294);
				Public425=(IToken)Match(input,Public,Follow._Public_in_memberAccess2335); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Public425_tree = (object)adaptor.Create(Public425, "Public425", retval);
				adaptor.AddChild(root_0, Public425_tree);
				}

				}
				break;
			case 48:
				DebugEnterAlt(48);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:301: Private
				{
				DebugLocation(428, 301);
				Private426=(IToken)Match(input,Private,Follow._Private_in_memberAccess2337); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Private426_tree = (object)adaptor.Create(Private426, "Private426", retval);
				adaptor.AddChild(root_0, Private426_tree);
				}

				}
				break;
			case 49:
				DebugEnterAlt(49);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:309: Protected
				{
				DebugLocation(428, 309);
				Protected427=(IToken)Match(input,Protected,Follow._Protected_in_memberAccess2339); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Protected427_tree = (object)adaptor.Create(Protected427, "Protected427", retval);
				adaptor.AddChild(root_0, Protected427_tree);
				}

				}
				break;
			case 50:
				DebugEnterAlt(50);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:319: True
				{
				DebugLocation(428, 319);
				True428=(IToken)Match(input,True,Follow._True_in_memberAccess2341); if (state.failed) return retval;
				if (state.backtracking == 0) {
				True428_tree = (object)adaptor.Create(True428, "True428", retval);
				adaptor.AddChild(root_0, True428_tree);
				}

				}
				break;
			case 51:
				DebugEnterAlt(51);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:324: False
				{
				DebugLocation(428, 324);
				False429=(IToken)Match(input,False,Follow._False_in_memberAccess2343); if (state.failed) return retval;
				if (state.backtracking == 0) {
				False429_tree = (object)adaptor.Create(False429, "False429", retval);
				adaptor.AddChild(root_0, False429_tree);
				}

				}
				break;
			case 52:
				DebugEnterAlt(52);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:330: HaltCompiler
				{
				DebugLocation(428, 330);
				HaltCompiler430=(IToken)Match(input,HaltCompiler,Follow._HaltCompiler_in_memberAccess2345); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HaltCompiler430_tree = (object)adaptor.Create(HaltCompiler430, "HaltCompiler430", retval);
				adaptor.AddChild(root_0, HaltCompiler430_tree);
				}

				}
				break;
			case 53:
				DebugEnterAlt(53);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:343: Die
				{
				DebugLocation(428, 343);
				Die431=(IToken)Match(input,Die,Follow._Die_in_memberAccess2347); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Die431_tree = (object)adaptor.Create(Die431, "Die431", retval);
				adaptor.AddChild(root_0, Die431_tree);
				}

				}
				break;
			case 54:
				DebugEnterAlt(54);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:347: Empty
				{
				DebugLocation(428, 347);
				Empty432=(IToken)Match(input,Empty,Follow._Empty_in_memberAccess2349); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Empty432_tree = (object)adaptor.Create(Empty432, "Empty432", retval);
				adaptor.AddChild(root_0, Empty432_tree);
				}

				}
				break;
			case 55:
				DebugEnterAlt(55);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:353: Exit
				{
				DebugLocation(428, 353);
				Exit433=(IToken)Match(input,Exit,Follow._Exit_in_memberAccess2351); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Exit433_tree = (object)adaptor.Create(Exit433, "Exit433", retval);
				adaptor.AddChild(root_0, Exit433_tree);
				}

				}
				break;
			case 56:
				DebugEnterAlt(56);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:358: Eval
				{
				DebugLocation(428, 358);
				Eval434=(IToken)Match(input,Eval,Follow._Eval_in_memberAccess2353); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Eval434_tree = (object)adaptor.Create(Eval434, "Eval434", retval);
				adaptor.AddChild(root_0, Eval434_tree);
				}

				}
				break;
			case 57:
				DebugEnterAlt(57);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:363: Isset
				{
				DebugLocation(428, 363);
				Isset435=(IToken)Match(input,Isset,Follow._Isset_in_memberAccess2355); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Isset435_tree = (object)adaptor.Create(Isset435, "Isset435", retval);
				adaptor.AddChild(root_0, Isset435_tree);
				}

				}
				break;
			case 58:
				DebugEnterAlt(58);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:6: IntType
				{
				DebugLocation(429, 6);
				IntType436=(IToken)Match(input,IntType,Follow._IntType_in_memberAccess2362); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IntType436_tree = (object)adaptor.Create(IntType436, "IntType436", retval);
				adaptor.AddChild(root_0, IntType436_tree);
				}

				}
				break;
			case 59:
				DebugEnterAlt(59);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:16: IntegerType
				{
				DebugLocation(429, 16);
				IntegerType437=(IToken)Match(input,IntegerType,Follow._IntegerType_in_memberAccess2366); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IntegerType437_tree = (object)adaptor.Create(IntegerType437, "IntegerType437", retval);
				adaptor.AddChild(root_0, IntegerType437_tree);
				}

				}
				break;
			case 60:
				DebugEnterAlt(60);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:30: BoolType
				{
				DebugLocation(429, 30);
				BoolType438=(IToken)Match(input,BoolType,Follow._BoolType_in_memberAccess2370); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BoolType438_tree = (object)adaptor.Create(BoolType438, "BoolType438", retval);
				adaptor.AddChild(root_0, BoolType438_tree);
				}

				}
				break;
			case 61:
				DebugEnterAlt(61);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:41: BooleanType
				{
				DebugLocation(429, 41);
				BooleanType439=(IToken)Match(input,BooleanType,Follow._BooleanType_in_memberAccess2374); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BooleanType439_tree = (object)adaptor.Create(BooleanType439, "BooleanType439", retval);
				adaptor.AddChild(root_0, BooleanType439_tree);
				}

				}
				break;
			case 62:
				DebugEnterAlt(62);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:55: FloatType
				{
				DebugLocation(429, 55);
				FloatType440=(IToken)Match(input,FloatType,Follow._FloatType_in_memberAccess2378); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FloatType440_tree = (object)adaptor.Create(FloatType440, "FloatType440", retval);
				adaptor.AddChild(root_0, FloatType440_tree);
				}

				}
				break;
			case 63:
				DebugEnterAlt(63);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:67: DoubleType
				{
				DebugLocation(429, 67);
				DoubleType441=(IToken)Match(input,DoubleType,Follow._DoubleType_in_memberAccess2382); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DoubleType441_tree = (object)adaptor.Create(DoubleType441, "DoubleType441", retval);
				adaptor.AddChild(root_0, DoubleType441_tree);
				}

				}
				break;
			case 64:
				DebugEnterAlt(64);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:430:6: RealType
				{
				DebugLocation(430, 6);
				RealType442=(IToken)Match(input,RealType,Follow._RealType_in_memberAccess2389); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RealType442_tree = (object)adaptor.Create(RealType442, "RealType442", retval);
				adaptor.AddChild(root_0, RealType442_tree);
				}

				}
				break;
			case 65:
				DebugEnterAlt(65);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:430:17: StringType
				{
				DebugLocation(430, 17);
				StringType443=(IToken)Match(input,StringType,Follow._StringType_in_memberAccess2393); if (state.failed) return retval;
				if (state.backtracking == 0) {
				StringType443_tree = (object)adaptor.Create(StringType443, "StringType443", retval);
				adaptor.AddChild(root_0, StringType443_tree);
				}

				}
				break;
			case 66:
				DebugEnterAlt(66);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:430:30: ObjectType
				{
				DebugLocation(430, 30);
				ObjectType444=(IToken)Match(input,ObjectType,Follow._ObjectType_in_memberAccess2397); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ObjectType444_tree = (object)adaptor.Create(ObjectType444, "ObjectType444", retval);
				adaptor.AddChild(root_0, ObjectType444_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(110); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberAccess", 67);
			LeaveRule("memberAccess", 67);
			LeaveRule_memberAccess();
			if (state.backtracking > 0) { Memoize(input, 67, memberAccess_StartIndex); }

		}
		DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "memberAccess"); }
		return retval;

	}
	// $ANTLR end "memberAccess"

	partial void EnterRule_nameOrFunctionCall();
	partial void LeaveRule_nameOrFunctionCall();
	// $ANTLR start "nameOrFunctionCall"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:434:1: nameOrFunctionCall : ( variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )* | constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )* | constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+ | predefinedFunctionName ( functionArguments )? );
	[GrammarRule("nameOrFunctionCall")]
	private Antlr3CstNode nameOrFunctionCall()
	{
		EnterRule_nameOrFunctionCall();
		EnterRule("nameOrFunctionCall", 68);
		var retval = new Antlr3CstNode("nameOrFunctionCall");
		
		retval.Start = (IToken)input.LT(1);
		int nameOrFunctionCall_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode variableOrStaticAccessor445 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments446 = default(Antlr3CstNode);
		Antlr3CstNode indexer447 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess448 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments449 = default(Antlr3CstNode);
		Antlr3CstNode constantOrStaticAccessor450 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments451 = default(Antlr3CstNode);
		Antlr3CstNode indexer452 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess453 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments454 = default(Antlr3CstNode);
		Antlr3CstNode constantOrStaticAccessor455 = default(Antlr3CstNode);
		Antlr3CstNode indexer456 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess457 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments458 = default(Antlr3CstNode);
		Antlr3CstNode predefinedFunctionName459 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments460 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "nameOrFunctionCall");
		DebugLocation(434, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:2: ( variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )* | constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )* | constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+ | predefinedFunctionName ( functionArguments )? )
			int alt119=4;
			try { DebugEnterDecision(119, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA119_2 = input.LA(2);

				if ((EvaluatePredicate(synpred244_Php_fragment)))
				{
					alt119 = 1;
				}
				else if ((EvaluatePredicate(synpred248_Php_fragment)))
				{
					alt119 = 2;
				}
				else if ((EvaluatePredicate(synpred252_Php_fragment)))
				{
					alt119 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA119_2 = input.LA(2);

				if ((EvaluatePredicate(synpred244_Php_fragment)))
				{
					alt119 = 1;
				}
				else if ((EvaluatePredicate(synpred248_Php_fragment)))
				{
					alt119 = 2;
				}
				else if ((EvaluatePredicate(synpred252_Php_fragment)))
				{
					alt119 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA119_2 = input.LA(2);

				if ((EvaluatePredicate(synpred244_Php_fragment)))
				{
					alt119 = 1;
				}
				else if ((EvaluatePredicate(synpred248_Php_fragment)))
				{
					alt119 = 2;
				}
				else if ((EvaluatePredicate(synpred252_Php_fragment)))
				{
					alt119 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA119_2 = input.LA(2);

				if ((EvaluatePredicate(synpred244_Php_fragment)))
				{
					alt119 = 1;
				}
				else if ((EvaluatePredicate(synpred248_Php_fragment)))
				{
					alt119 = 2;
				}
				else if ((EvaluatePredicate(synpred252_Php_fragment)))
				{
					alt119 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				alt119 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:4: variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(435, 4);
				PushFollow(Follow._variableOrStaticAccessor_in_nameOrFunctionCall2413);
				variableOrStaticAccessor445=variableOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor445.Tree, variableOrStaticAccessor445, "variableOrStaticAccessor445", retval);
				DebugLocation(435, 29);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:29: ( functionArguments )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, false);
				int LA111_1 = input.LA(1);

				if ((LA111_1==OpenRoundBracket))
				{
					int LA111_2 = input.LA(2);

					if ((EvaluatePredicate(synpred240_Php_fragment)))
					{
						alt111 = 1;
					}
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:29: functionArguments
					{
					DebugLocation(435, 29);
					PushFollow(Follow._functionArguments_in_nameOrFunctionCall2415);
					functionArguments446=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments446.Tree, functionArguments446, "functionArguments446", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(435, 48);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:48: ( indexer | memberAccess ( functionArguments )? )*
				try { DebugEnterSubRule(113);
				while (true)
				{
					int alt113=3;
					try { DebugEnterDecision(113, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA113_2 = input.LA(2);

						if ((EvaluatePredicate(synpred241_Php_fragment)))
						{
							alt113 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA113_2 = input.LA(2);

						if ((EvaluatePredicate(synpred241_Php_fragment)))
						{
							alt113 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA113_2 = input.LA(2);

						if ((EvaluatePredicate(synpred243_Php_fragment)))
						{
							alt113 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(113); }
					switch ( alt113 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:49: indexer
						{
						DebugLocation(435, 49);
						PushFollow(Follow._indexer_in_nameOrFunctionCall2419);
						indexer447=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer447.Tree, indexer447, "indexer447", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:59: memberAccess ( functionArguments )?
						{
						DebugLocation(435, 59);
						PushFollow(Follow._memberAccess_in_nameOrFunctionCall2423);
						memberAccess448=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess448.Tree, memberAccess448, "memberAccess448", retval);
						DebugLocation(435, 72);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:72: ( functionArguments )?
						int alt112=2;
						try { DebugEnterSubRule(112);
						try { DebugEnterDecision(112, false);
						int LA112_1 = input.LA(1);

						if ((LA112_1==OpenRoundBracket))
						{
							int LA112_2 = input.LA(2);

							if ((EvaluatePredicate(synpred242_Php_fragment)))
							{
								alt112 = 1;
							}
						}
						} finally { DebugExitDecision(112); }
						switch (alt112)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:72: functionArguments
							{
							DebugLocation(435, 72);
							PushFollow(Follow._functionArguments_in_nameOrFunctionCall2425);
							functionArguments449=functionArguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments449.Tree, functionArguments449, "functionArguments449", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(112); }


						}
						break;

					default:
						goto loop113;
					}
				}

				loop113:
					;

				} finally { DebugExitSubRule(113); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:4: constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(436, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_nameOrFunctionCall2433);
				constantOrStaticAccessor450=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor450.Tree, constantOrStaticAccessor450, "constantOrStaticAccessor450", retval);
				DebugLocation(436, 29);
				PushFollow(Follow._functionArguments_in_nameOrFunctionCall2435);
				functionArguments451=functionArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments451.Tree, functionArguments451, "functionArguments451", retval);
				DebugLocation(436, 47);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:47: ( indexer | memberAccess ( functionArguments )? )*
				try { DebugEnterSubRule(115);
				while (true)
				{
					int alt115=3;
					try { DebugEnterDecision(115, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA115_2 = input.LA(2);

						if ((EvaluatePredicate(synpred245_Php_fragment)))
						{
							alt115 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA115_2 = input.LA(2);

						if ((EvaluatePredicate(synpred245_Php_fragment)))
						{
							alt115 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA115_2 = input.LA(2);

						if ((EvaluatePredicate(synpred247_Php_fragment)))
						{
							alt115 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(115); }
					switch ( alt115 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:48: indexer
						{
						DebugLocation(436, 48);
						PushFollow(Follow._indexer_in_nameOrFunctionCall2438);
						indexer452=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer452.Tree, indexer452, "indexer452", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:58: memberAccess ( functionArguments )?
						{
						DebugLocation(436, 58);
						PushFollow(Follow._memberAccess_in_nameOrFunctionCall2442);
						memberAccess453=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess453.Tree, memberAccess453, "memberAccess453", retval);
						DebugLocation(436, 71);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:71: ( functionArguments )?
						int alt114=2;
						try { DebugEnterSubRule(114);
						try { DebugEnterDecision(114, false);
						int LA114_1 = input.LA(1);

						if ((LA114_1==OpenRoundBracket))
						{
							int LA114_2 = input.LA(2);

							if ((EvaluatePredicate(synpred246_Php_fragment)))
							{
								alt114 = 1;
							}
						}
						} finally { DebugExitDecision(114); }
						switch (alt114)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:71: functionArguments
							{
							DebugLocation(436, 71);
							PushFollow(Follow._functionArguments_in_nameOrFunctionCall2444);
							functionArguments454=functionArguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments454.Tree, functionArguments454, "functionArguments454", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(114); }


						}
						break;

					default:
						goto loop115;
					}
				}

				loop115:
					;

				} finally { DebugExitSubRule(115); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:4: constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(437, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_nameOrFunctionCall2452);
				constantOrStaticAccessor455=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor455.Tree, constantOrStaticAccessor455, "constantOrStaticAccessor455", retval);
				DebugLocation(437, 29);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:29: ( indexer | memberAccess ( functionArguments )? )+
				int cnt117=0;
				try { DebugEnterSubRule(117);
				while (true)
				{
					int alt117=3;
					try { DebugEnterDecision(117, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA117_2 = input.LA(2);

						if ((EvaluatePredicate(synpred249_Php_fragment)))
						{
							alt117 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA117_2 = input.LA(2);

						if ((EvaluatePredicate(synpred249_Php_fragment)))
						{
							alt117 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA117_2 = input.LA(2);

						if ((EvaluatePredicate(synpred251_Php_fragment)))
						{
							alt117 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(117); }
					switch (alt117)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:30: indexer
						{
						DebugLocation(437, 30);
						PushFollow(Follow._indexer_in_nameOrFunctionCall2455);
						indexer456=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer456.Tree, indexer456, "indexer456", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:40: memberAccess ( functionArguments )?
						{
						DebugLocation(437, 40);
						PushFollow(Follow._memberAccess_in_nameOrFunctionCall2459);
						memberAccess457=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess457.Tree, memberAccess457, "memberAccess457", retval);
						DebugLocation(437, 53);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:53: ( functionArguments )?
						int alt116=2;
						try { DebugEnterSubRule(116);
						try { DebugEnterDecision(116, false);
						int LA116_1 = input.LA(1);

						if ((LA116_1==OpenRoundBracket))
						{
							int LA116_2 = input.LA(2);

							if ((EvaluatePredicate(synpred250_Php_fragment)))
							{
								alt116 = 1;
							}
						}
						} finally { DebugExitDecision(116); }
						switch (alt116)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:53: functionArguments
							{
							DebugLocation(437, 53);
							PushFollow(Follow._functionArguments_in_nameOrFunctionCall2461);
							functionArguments458=functionArguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments458.Tree, functionArguments458, "functionArguments458", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(116); }


						}
						break;

					default:
						if (cnt117 >= 1)
							goto loop117;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee117 = new EarlyExitException( 117, input );
						DebugRecognitionException(eee117);
						throw eee117;
					}
					cnt117++;
				}
				loop117:
					;

				} finally { DebugExitSubRule(117); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:438:4: predefinedFunctionName ( functionArguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(438, 4);
				PushFollow(Follow._predefinedFunctionName_in_nameOrFunctionCall2469);
				predefinedFunctionName459=predefinedFunctionName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefinedFunctionName459.Tree, predefinedFunctionName459, "predefinedFunctionName459", retval);
				DebugLocation(438, 27);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:438:27: ( functionArguments )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, false);
				int LA118_1 = input.LA(1);

				if ((LA118_1==OpenRoundBracket))
				{
					int LA118_2 = input.LA(2);

					if ((EvaluatePredicate(synpred253_Php_fragment)))
					{
						alt118 = 1;
					}
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:438:27: functionArguments
					{
					DebugLocation(438, 27);
					PushFollow(Follow._functionArguments_in_nameOrFunctionCall2471);
					functionArguments460=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments460.Tree, functionArguments460, "functionArguments460", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(118); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nameOrFunctionCall", 68);
			LeaveRule("nameOrFunctionCall", 68);
			LeaveRule_nameOrFunctionCall();
			if (state.backtracking > 0) { Memoize(input, 68, nameOrFunctionCall_StartIndex); }

		}
		DebugLocation(439, 1);
		} finally { DebugExitRule(GrammarFileName, "nameOrFunctionCall"); }
		return retval;

	}
	// $ANTLR end "nameOrFunctionCall"

	partial void EnterRule_name();
	partial void LeaveRule_name();
	// $ANTLR start "name"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:441:1: name : ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ | variableOrStaticAccessor );
	[GrammarRule("name")]
	private Antlr3CstNode name()
	{
		EnterRule_name();
		EnterRule("name", 69);
		var retval = new Antlr3CstNode("name");
		
		retval.Start = (IToken)input.LT(1);
		int name_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode variableOrStaticAccessor461 = default(Antlr3CstNode);
		Antlr3CstNode constantOrStaticAccessor462 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments463 = default(Antlr3CstNode);
		Antlr3CstNode indexer464 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess465 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess466 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments467 = default(Antlr3CstNode);
		Antlr3CstNode indexer468 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess469 = default(Antlr3CstNode);
		Antlr3CstNode variableOrStaticAccessor470 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(441, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:2: ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ | variableOrStaticAccessor )
			int alt125=2;
			try { DebugEnterDecision(125, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA125_2 = input.LA(2);

				if ((EvaluatePredicate(synpred261_Php_fragment)))
				{
					alt125 = 1;
				}
				else if ((true))
				{
					alt125 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA125_2 = input.LA(2);

				if ((EvaluatePredicate(synpred261_Php_fragment)))
				{
					alt125 = 1;
				}
				else if ((true))
				{
					alt125 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA125_2 = input.LA(2);

				if ((EvaluatePredicate(synpred261_Php_fragment)))
				{
					alt125 = 1;
				}
				else if ((true))
				{
					alt125 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA125_2 = input.LA(2);

				if ((EvaluatePredicate(synpred261_Php_fragment)))
				{
					alt125 = 1;
				}
				else if ((true))
				{
					alt125 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:4: ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(446, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:4: ( variableOrStaticAccessor | constantOrStaticAccessor )
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				switch (input.LA(1))
				{
				case VariableName:
					{
					int LA120_2 = input.LA(2);

					if ((EvaluatePredicate(synpred254_Php_fragment)))
					{
						alt120 = 1;
					}
					else if ((true))
					{
						alt120 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 120, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 128:
					{
					int LA120_2 = input.LA(2);

					if ((EvaluatePredicate(synpred254_Php_fragment)))
					{
						alt120 = 1;
					}
					else if ((true))
					{
						alt120 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 120, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 129:
					{
					int LA120_2 = input.LA(2);

					if ((EvaluatePredicate(synpred254_Php_fragment)))
					{
						alt120 = 1;
					}
					else if ((true))
					{
						alt120 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 120, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BoolType:
				case BooleanType:
				case DoubleType:
				case FloatType:
				case IntType:
				case IntegerType:
				case ObjectType:
				case RealType:
				case Static:
				case StringType:
				case UnquotedString:
					{
					int LA120_2 = input.LA(2);

					if ((EvaluatePredicate(synpred254_Php_fragment)))
					{
						alt120 = 1;
					}
					else if ((true))
					{
						alt120 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 120, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 120, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:5: variableOrStaticAccessor
					{
					DebugLocation(446, 5);
					PushFollow(Follow._variableOrStaticAccessor_in_name2492);
					variableOrStaticAccessor461=variableOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor461.Tree, variableOrStaticAccessor461, "variableOrStaticAccessor461", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:32: constantOrStaticAccessor
					{
					DebugLocation(446, 32);
					PushFollow(Follow._constantOrStaticAccessor_in_name2496);
					constantOrStaticAccessor462=constantOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor462.Tree, constantOrStaticAccessor462, "constantOrStaticAccessor462", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(120); }

				DebugLocation(447, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:447:4: ( functionArguments )?
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==OpenRoundBracket))
				{
					alt121 = 1;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:447:4: functionArguments
					{
					DebugLocation(447, 4);
					PushFollow(Follow._functionArguments_in_name2502);
					functionArguments463=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments463.Tree, functionArguments463, "functionArguments463", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(121); }

				DebugLocation(448, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:4: ( ( indexer | memberAccess )* memberAccess functionArguments )*
				try { DebugEnterSubRule(123);
				while (true)
				{
					int alt123=2;
					try { DebugEnterDecision(123, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA123_2 = input.LA(2);

						if ((EvaluatePredicate(synpred258_Php_fragment)))
						{
							alt123 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA123_2 = input.LA(2);

						if ((EvaluatePredicate(synpred258_Php_fragment)))
						{
							alt123 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA123_2 = input.LA(2);

						if ((EvaluatePredicate(synpred258_Php_fragment)))
						{
							alt123 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(123); }
					switch ( alt123 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:5: ( indexer | memberAccess )* memberAccess functionArguments
						{
						DebugLocation(448, 5);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:5: ( indexer | memberAccess )*
						try { DebugEnterSubRule(122);
						while (true)
						{
							int alt122=3;
							try { DebugEnterDecision(122, false);
							int LA122_1 = input.LA(1);

							if ((LA122_1==InstanceMember))
							{
								int LA122_2 = input.LA(2);

								if ((EvaluatePredicate(synpred257_Php_fragment)))
								{
									alt122 = 2;
								}


							}
							else if ((LA122_1==OpenCurlyBracket||LA122_1==OpenSquareBracket))
							{
								alt122 = 1;
							}


							} finally { DebugExitDecision(122); }
							switch ( alt122 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:6: indexer
								{
								DebugLocation(448, 6);
								PushFollow(Follow._indexer_in_name2510);
								indexer464=indexer();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, indexer464.Tree, indexer464, "indexer464", retval);

								}
								break;
							case 2:
								DebugEnterAlt(2);
								// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:16: memberAccess
								{
								DebugLocation(448, 16);
								PushFollow(Follow._memberAccess_in_name2514);
								memberAccess465=memberAccess();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess465.Tree, memberAccess465, "memberAccess465", retval);

								}
								break;

							default:
								goto loop122;
							}
						}

						loop122:
							;

						} finally { DebugExitSubRule(122); }

						DebugLocation(448, 31);
						PushFollow(Follow._memberAccess_in_name2518);
						memberAccess466=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess466.Tree, memberAccess466, "memberAccess466", retval);
						DebugLocation(448, 44);
						PushFollow(Follow._functionArguments_in_name2520);
						functionArguments467=functionArguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments467.Tree, functionArguments467, "functionArguments467", retval);

						}
						break;

					default:
						goto loop123;
					}
				}

				loop123:
					;

				} finally { DebugExitSubRule(123); }

				DebugLocation(449, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:449:4: ( indexer | memberAccess )+
				int cnt124=0;
				try { DebugEnterSubRule(124);
				while (true)
				{
					int alt124=3;
					try { DebugEnterDecision(124, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA124_2 = input.LA(2);

						if ((EvaluatePredicate(synpred259_Php_fragment)))
						{
							alt124 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA124_2 = input.LA(2);

						if ((EvaluatePredicate(synpred259_Php_fragment)))
						{
							alt124 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA124_2 = input.LA(2);

						if ((EvaluatePredicate(synpred260_Php_fragment)))
						{
							alt124 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(124); }
					switch (alt124)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:449:5: indexer
						{
						DebugLocation(449, 5);
						PushFollow(Follow._indexer_in_name2528);
						indexer468=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer468.Tree, indexer468, "indexer468", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:449:15: memberAccess
						{
						DebugLocation(449, 15);
						PushFollow(Follow._memberAccess_in_name2532);
						memberAccess469=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess469.Tree, memberAccess469, "memberAccess469", retval);

						}
						break;

					default:
						if (cnt124 >= 1)
							goto loop124;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee124 = new EarlyExitException( 124, input );
						DebugRecognitionException(eee124);
						throw eee124;
					}
					cnt124++;
				}
				loop124:
					;

				} finally { DebugExitSubRule(124); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:450:4: variableOrStaticAccessor
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(450, 4);
				PushFollow(Follow._variableOrStaticAccessor_in_name2539);
				variableOrStaticAccessor470=variableOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor470.Tree, variableOrStaticAccessor470, "variableOrStaticAccessor470", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("name", 69);
			LeaveRule("name", 69);
			LeaveRule_name();
			if (state.backtracking > 0) { Memoize(input, 69, name_StartIndex); }

		}
		DebugLocation(451, 1);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return retval;

	}
	// $ANTLR end "name"

	partial void EnterRule_variableOrStaticAccessor();
	partial void LeaveRule_variableOrStaticAccessor();
	// $ANTLR start "variableOrStaticAccessor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:1: variableOrStaticAccessor : ( ( variable | qualifiedName ) '::' variable | variable );
	[GrammarRule("variableOrStaticAccessor")]
	private Antlr3CstNode variableOrStaticAccessor()
	{
		EnterRule_variableOrStaticAccessor();
		EnterRule("variableOrStaticAccessor", 70);
		var retval = new Antlr3CstNode("variableOrStaticAccessor");
		
		retval.Start = (IToken)input.LT(1);
		int variableOrStaticAccessor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal473 = default(IToken);
		Antlr3CstNode variable471 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName472 = default(Antlr3CstNode);
		Antlr3CstNode variable474 = default(Antlr3CstNode);
		Antlr3CstNode variable475 = default(Antlr3CstNode);

		object string_literal473_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableOrStaticAccessor");
		DebugLocation(453, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:2: ( ( variable | qualifiedName ) '::' variable | variable )
			int alt127=2;
			try { DebugEnterDecision(127, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA127_2 = input.LA(2);

				if ((EvaluatePredicate(synpred263_Php_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA127_2 = input.LA(2);

				if ((EvaluatePredicate(synpred263_Php_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
			case 129:
				{
				alt127 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:4: ( variable | qualifiedName ) '::' variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(454, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:4: ( variable | qualifiedName )
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, false);
				int LA126_1 = input.LA(1);

				if ((LA126_1==VariableName||LA126_1==128))
				{
					alt126 = 1;
				}
				else if (((LA126_1>=BoolType && LA126_1<=BooleanType)||LA126_1==DoubleType||LA126_1==FloatType||LA126_1==IntType||LA126_1==IntegerType||LA126_1==ObjectType||LA126_1==RealType||(LA126_1>=Static && LA126_1<=StringType)||LA126_1==UnquotedString||LA126_1==129))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:5: variable
					{
					DebugLocation(454, 5);
					PushFollow(Follow._variable_in_variableOrStaticAccessor2551);
					variable471=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable471.Tree, variable471, "variable471", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:16: qualifiedName
					{
					DebugLocation(454, 16);
					PushFollow(Follow._qualifiedName_in_variableOrStaticAccessor2555);
					qualifiedName472=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName472.Tree, qualifiedName472, "qualifiedName472", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(126); }

				DebugLocation(454, 31);
				string_literal473=(IToken)Match(input,ClassMember,Follow._ClassMember_in_variableOrStaticAccessor2558); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal473_tree = (object)adaptor.Create(string_literal473, "string_literal473", retval);
				adaptor.AddChild(root_0, string_literal473_tree);
				}
				DebugLocation(454, 36);
				PushFollow(Follow._variable_in_variableOrStaticAccessor2560);
				variable474=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable474.Tree, variable474, "variable474", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:455:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(455, 4);
				PushFollow(Follow._variable_in_variableOrStaticAccessor2565);
				variable475=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable475.Tree, variable475, "variable475", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableOrStaticAccessor", 70);
			LeaveRule("variableOrStaticAccessor", 70);
			LeaveRule_variableOrStaticAccessor();
			if (state.backtracking > 0) { Memoize(input, 70, variableOrStaticAccessor_StartIndex); }

		}
		DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "variableOrStaticAccessor"); }
		return retval;

	}
	// $ANTLR end "variableOrStaticAccessor"

	partial void EnterRule_constantOrStaticAccessor();
	partial void LeaveRule_constantOrStaticAccessor();
	// $ANTLR start "constantOrStaticAccessor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:458:1: constantOrStaticAccessor : ( ( variable | qualifiedName ) '::' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName );
	[GrammarRule("constantOrStaticAccessor")]
	private Antlr3CstNode constantOrStaticAccessor()
	{
		EnterRule_constantOrStaticAccessor();
		EnterRule("constantOrStaticAccessor", 71);
		var retval = new Antlr3CstNode("constantOrStaticAccessor");
		
		retval.Start = (IToken)input.LT(1);
		int constantOrStaticAccessor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal478 = default(IToken);
		IToken set479 = default(IToken);
		Antlr3CstNode variable476 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName477 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName480 = default(Antlr3CstNode);

		object string_literal478_tree = default(object);
		object set479_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constantOrStaticAccessor");
		DebugLocation(458, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:459:2: ( ( variable | qualifiedName ) '::' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName )
			int alt129=2;
			try { DebugEnterDecision(129, false);
			try
			{
				alt129 = dfa129.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:459:4: ( variable | qualifiedName ) '::' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(459, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:459:4: ( variable | qualifiedName )
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, false);
				int LA128_1 = input.LA(1);

				if ((LA128_1==VariableName||LA128_1==128))
				{
					alt128 = 1;
				}
				else if (((LA128_1>=BoolType && LA128_1<=BooleanType)||LA128_1==DoubleType||LA128_1==FloatType||LA128_1==IntType||LA128_1==IntegerType||LA128_1==ObjectType||LA128_1==RealType||(LA128_1>=Static && LA128_1<=StringType)||LA128_1==UnquotedString||LA128_1==129))
				{
					alt128 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:459:5: variable
					{
					DebugLocation(459, 5);
					PushFollow(Follow._variable_in_constantOrStaticAccessor2577);
					variable476=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable476.Tree, variable476, "variable476", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:459:16: qualifiedName
					{
					DebugLocation(459, 16);
					PushFollow(Follow._qualifiedName_in_constantOrStaticAccessor2581);
					qualifiedName477=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName477.Tree, qualifiedName477, "qualifiedName477", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(128); }

				DebugLocation(459, 31);
				string_literal478=(IToken)Match(input,ClassMember,Follow._ClassMember_in_constantOrStaticAccessor2584); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal478_tree = (object)adaptor.Create(string_literal478, "string_literal478", retval);
				adaptor.AddChild(root_0, string_literal478_tree);
				}
				DebugLocation(459, 36);

				set479=(IToken)input.LT(1);
				if ((input.LA(1)>=BoolType && input.LA(1)<=BooleanType)||input.LA(1)==DoubleType||input.LA(1)==FloatType||input.LA(1)==IntType||input.LA(1)==IntegerType||input.LA(1)==ObjectType||input.LA(1)==RealType||input.LA(1)==StringType||input.LA(1)==UnquotedString)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set479, "set479", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:463:4: qualifiedName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(463, 4);
				PushFollow(Follow._qualifiedName_in_constantOrStaticAccessor2642);
				qualifiedName480=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName480.Tree, qualifiedName480, "qualifiedName480", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constantOrStaticAccessor", 71);
			LeaveRule("constantOrStaticAccessor", 71);
			LeaveRule_constantOrStaticAccessor();
			if (state.backtracking > 0) { Memoize(input, 71, constantOrStaticAccessor_StartIndex); }

		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "constantOrStaticAccessor"); }
		return retval;

	}
	// $ANTLR end "constantOrStaticAccessor"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();
	// $ANTLR start "variable"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:466:1: variable : variableVariable ;
	[GrammarRule("variable")]
	private Antlr3CstNode variable()
	{
		EnterRule_variable();
		EnterRule("variable", 72);
		var retval = new Antlr3CstNode("variable");
		
		retval.Start = (IToken)input.LT(1);
		int variable_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode variableVariable481 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(466, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:467:2: ( variableVariable )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:467:4: variableVariable
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(467, 4);
			PushFollow(Follow._variableVariable_in_variable2654);
			variableVariable481=variableVariable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableVariable481.Tree, variableVariable481, "variableVariable481", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 72);
			LeaveRule("variable", 72);
			LeaveRule_variable();
			if (state.backtracking > 0) { Memoize(input, 72, variable_StartIndex); }

		}
		DebugLocation(468, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_variableVariable();
	partial void LeaveRule_variableVariable();
	// $ANTLR start "variableVariable"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:1: variableVariable : ( VariableName | '$' ( variableVariable | '{' expression '}' ) );
	[GrammarRule("variableVariable")]
	private Antlr3CstNode variableVariable()
	{
		EnterRule_variableVariable();
		EnterRule("variableVariable", 73);
		var retval = new Antlr3CstNode("variableVariable");
		
		retval.Start = (IToken)input.LT(1);
		int variableVariable_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName482 = default(IToken);
		IToken char_literal483 = default(IToken);
		IToken char_literal485 = default(IToken);
		IToken char_literal487 = default(IToken);
		Antlr3CstNode variableVariable484 = default(Antlr3CstNode);
		Antlr3CstNode expression486 = default(Antlr3CstNode);

		object VariableName482_tree = default(object);
		object char_literal483_tree = default(object);
		object char_literal485_tree = default(object);
		object char_literal487_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableVariable");
		DebugLocation(470, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:471:2: ( VariableName | '$' ( variableVariable | '{' expression '}' ) )
			int alt131=2;
			try { DebugEnterDecision(131, false);
			int LA131_1 = input.LA(1);

			if ((LA131_1==VariableName))
			{
				alt131 = 1;
			}
			else if ((LA131_1==128))
			{
				alt131 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 131, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:471:4: VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(471, 4);
				VariableName482=(IToken)Match(input,VariableName,Follow._VariableName_in_variableVariable2665); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName482_tree = (object)adaptor.Create(VariableName482, "VariableName482", retval);
				adaptor.AddChild(root_0, VariableName482_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:472:4: '$' ( variableVariable | '{' expression '}' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(472, 4);
				char_literal483=(IToken)Match(input,128,Follow._128_in_variableVariable2670); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal483_tree = (object)adaptor.Create(char_literal483, "char_literal483", retval);
				adaptor.AddChild(root_0, char_literal483_tree);
				}
				DebugLocation(472, 8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:472:8: ( variableVariable | '{' expression '}' )
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, false);
				int LA130_1 = input.LA(1);

				if ((LA130_1==VariableName||LA130_1==128))
				{
					alt130 = 1;
				}
				else if ((LA130_1==OpenCurlyBracket))
				{
					alt130 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:472:9: variableVariable
					{
					DebugLocation(472, 9);
					PushFollow(Follow._variableVariable_in_variableVariable2673);
					variableVariable484=variableVariable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableVariable484.Tree, variableVariable484, "variableVariable484", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:472:28: '{' expression '}'
					{
					DebugLocation(472, 28);
					char_literal485=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_variableVariable2677); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal485_tree = (object)adaptor.Create(char_literal485, "char_literal485", retval);
					adaptor.AddChild(root_0, char_literal485_tree);
					}
					DebugLocation(472, 32);
					PushFollow(Follow._expression_in_variableVariable2679);
					expression486=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression486.Tree, expression486, "expression486", retval);
					DebugLocation(472, 43);
					char_literal487=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_variableVariable2681); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal487_tree = (object)adaptor.Create(char_literal487, "char_literal487", retval);
					adaptor.AddChild(root_0, char_literal487_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(130); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableVariable", 73);
			LeaveRule("variableVariable", 73);
			LeaveRule_variableVariable();
			if (state.backtracking > 0) { Memoize(input, 73, variableVariable_StartIndex); }

		}
		DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "variableVariable"); }
		return retval;

	}
	// $ANTLR end "variableVariable"

	partial void EnterRule_qualifiedName();
	partial void LeaveRule_qualifiedName();
	// $ANTLR start "qualifiedName"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:476:1: qualifiedName : ( '\\\\' )? ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Static ) ( '\\\\' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )* ;
	[GrammarRule("qualifiedName")]
	private Antlr3CstNode qualifiedName()
	{
		EnterRule_qualifiedName();
		EnterRule("qualifiedName", 74);
		var retval = new Antlr3CstNode("qualifiedName");
		
		retval.Start = (IToken)input.LT(1);
		int qualifiedName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal488 = default(IToken);
		IToken set489 = default(IToken);
		IToken char_literal490 = default(IToken);
		IToken set491 = default(IToken);

		object char_literal488_tree = default(object);
		object set489_tree = default(object);
		object char_literal490_tree = default(object);
		object set491_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedName");
		DebugLocation(476, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:477:2: ( ( '\\\\' )? ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Static ) ( '\\\\' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:477:4: ( '\\\\' )? ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Static ) ( '\\\\' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(477, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:477:4: ( '\\\\' )?
			int alt132=2;
			try { DebugEnterSubRule(132);
			try { DebugEnterDecision(132, false);
			int LA132_1 = input.LA(1);

			if ((LA132_1==129))
			{
				alt132 = 1;
			}
			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:477:4: '\\\\'
				{
				DebugLocation(477, 4);
				char_literal488=(IToken)Match(input,129,Follow._129_in_qualifiedName2694); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal488_tree = (object)adaptor.Create(char_literal488, "char_literal488", retval);
				adaptor.AddChild(root_0, char_literal488_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(132); }

			DebugLocation(477, 10);

			set489=(IToken)input.LT(1);
			if ((input.LA(1)>=BoolType && input.LA(1)<=BooleanType)||input.LA(1)==DoubleType||input.LA(1)==FloatType||input.LA(1)==IntType||input.LA(1)==IntegerType||input.LA(1)==ObjectType||input.LA(1)==RealType||(input.LA(1)>=Static && input.LA(1)<=StringType)||input.LA(1)==UnquotedString)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set489, "set489", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(481, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:481:2: ( '\\\\' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )*
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_1 = input.LA(1);

				if ((LA133_1==129))
				{
					alt133 = 1;
				}


				} finally { DebugExitDecision(133); }
				switch ( alt133 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:481:4: '\\\\' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
					{
					DebugLocation(481, 4);
					char_literal490=(IToken)Match(input,129,Follow._129_in_qualifiedName2757); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal490_tree = (object)adaptor.Create(char_literal490, "char_literal490", retval);
					adaptor.AddChild(root_0, char_literal490_tree);
					}
					DebugLocation(481, 9);

					set491=(IToken)input.LT(1);
					if ((input.LA(1)>=BoolType && input.LA(1)<=BooleanType)||input.LA(1)==DoubleType||input.LA(1)==FloatType||input.LA(1)==IntType||input.LA(1)==IntegerType||input.LA(1)==ObjectType||input.LA(1)==RealType||input.LA(1)==StringType||input.LA(1)==UnquotedString)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set491, "set491", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop133;
				}
			}

			loop133:
				;

			} finally { DebugExitSubRule(133); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedName", 74);
			LeaveRule("qualifiedName", 74);
			LeaveRule_qualifiedName();
			if (state.backtracking > 0) { Memoize(input, 74, qualifiedName_StartIndex); }

		}
		DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "qualifiedName"); }
		return retval;

	}
	// $ANTLR end "qualifiedName"

	partial void EnterRule_requireOperator();
	partial void LeaveRule_requireOperator();
	// $ANTLR start "requireOperator"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:487:1: requireOperator : ( Require | RequireOnce | Include | IncludeOnce );
	[GrammarRule("requireOperator")]
	private Antlr3CstNode requireOperator()
	{
		EnterRule_requireOperator();
		EnterRule("requireOperator", 75);
		var retval = new Antlr3CstNode("requireOperator");
		
		retval.Start = (IToken)input.LT(1);
		int requireOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set492 = default(IToken);

		object set492_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "requireOperator");
		DebugLocation(487, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:488:2: ( Require | RequireOnce | Include | IncludeOnce )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(488, 2);

			set492=(IToken)input.LT(1);
			if ((input.LA(1)>=Include && input.LA(1)<=IncludeOnce)||(input.LA(1)>=Require && input.LA(1)<=RequireOnce))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set492, "set492", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("requireOperator", 75);
			LeaveRule("requireOperator", 75);
			LeaveRule_requireOperator();
			if (state.backtracking > 0) { Memoize(input, 75, requireOperator_StartIndex); }

		}
		DebugLocation(489, 1);
		} finally { DebugExitRule(GrammarFileName, "requireOperator"); }
		return retval;

	}
	// $ANTLR end "requireOperator"

	partial void EnterRule_accessModifier();
	partial void LeaveRule_accessModifier();
	// $ANTLR start "accessModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:491:1: accessModifier : ( Public | Private | Protected );
	[GrammarRule("accessModifier")]
	private Antlr3CstNode accessModifier()
	{
		EnterRule_accessModifier();
		EnterRule("accessModifier", 76);
		var retval = new Antlr3CstNode("accessModifier");
		
		retval.Start = (IToken)input.LT(1);
		int accessModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set493 = default(IToken);

		object set493_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "accessModifier");
		DebugLocation(491, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:492:2: ( Public | Private | Protected )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(492, 2);

			set493=(IToken)input.LT(1);
			if ((input.LA(1)>=Private && input.LA(1)<=Public))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set493, "set493", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessModifier", 76);
			LeaveRule("accessModifier", 76);
			LeaveRule_accessModifier();
			if (state.backtracking > 0) { Memoize(input, 76, accessModifier_StartIndex); }

		}
		DebugLocation(493, 1);
		} finally { DebugExitRule(GrammarFileName, "accessModifier"); }
		return retval;

	}
	// $ANTLR end "accessModifier"

	partial void EnterRule_boolean();
	partial void LeaveRule_boolean();
	// $ANTLR start "boolean"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:495:1: boolean : ( True | False );
	[GrammarRule("boolean")]
	private Antlr3CstNode boolean()
	{
		EnterRule_boolean();
		EnterRule("boolean", 77);
		var retval = new Antlr3CstNode("boolean");
		
		retval.Start = (IToken)input.LT(1);
		int boolean_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set494 = default(IToken);

		object set494_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "boolean");
		DebugLocation(495, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:496:2: ( True | False )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(496, 2);

			set494=(IToken)input.LT(1);
			if (input.LA(1)==False||input.LA(1)==True)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set494, "set494", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolean", 77);
			LeaveRule("boolean", 77);
			LeaveRule_boolean();
			if (state.backtracking > 0) { Memoize(input, 77, boolean_StartIndex); }

		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "boolean"); }
		return retval;

	}
	// $ANTLR end "boolean"

	partial void EnterRule_predefinedFunctionName();
	partial void LeaveRule_predefinedFunctionName();
	// $ANTLR start "predefinedFunctionName"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:499:1: predefinedFunctionName : ( HaltCompiler | Die | Empty | UnsetType | Eval | Exit | Isset );
	[GrammarRule("predefinedFunctionName")]
	private Antlr3CstNode predefinedFunctionName()
	{
		EnterRule_predefinedFunctionName();
		EnterRule("predefinedFunctionName", 78);
		var retval = new Antlr3CstNode("predefinedFunctionName");
		
		retval.Start = (IToken)input.LT(1);
		int predefinedFunctionName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set495 = default(IToken);

		object set495_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "predefinedFunctionName");
		DebugLocation(499, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:500:2: ( HaltCompiler | Die | Empty | UnsetType | Eval | Exit | Isset )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(500, 2);

			set495=(IToken)input.LT(1);
			if (input.LA(1)==Die||input.LA(1)==Empty||(input.LA(1)>=Eval && input.LA(1)<=Exit)||input.LA(1)==HaltCompiler||input.LA(1)==Isset||input.LA(1)==UnsetType)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set495, "set495", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("predefinedFunctionName", 78);
			LeaveRule("predefinedFunctionName", 78);
			LeaveRule_predefinedFunctionName();
			if (state.backtracking > 0) { Memoize(input, 78, predefinedFunctionName_StartIndex); }

		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "predefinedFunctionName"); }
		return retval;

	}
	// $ANTLR end "predefinedFunctionName"

	partial void EnterRule_synpred3_Php_fragment();
	partial void LeaveRule_synpred3_Php_fragment();

	// $ANTLR start synpred3_Php
	private void synpred3_Php_fragment()
	{
		EnterRule_synpred3_Php_fragment();
		EnterRule("synpred3_Php_fragment", 81);
		var retval = new Antlr3CstNode("synpred3_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:18: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:18: statement
			{
			DebugLocation(90, 18);
			PushFollow(Follow._statement_in_synpred3_Php341);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_Php_fragment", 81);
			LeaveRule("synpred3_Php_fragment", 81);
			LeaveRule_synpred3_Php_fragment();
		}
	}
	// $ANTLR end synpred3_Php

	partial void EnterRule_synpred6_Php_fragment();
	partial void LeaveRule_synpred6_Php_fragment();

	// $ANTLR start synpred6_Php
	private void synpred6_Php_fragment()
	{
		EnterRule_synpred6_Php_fragment();
		EnterRule("synpred6_Php_fragment", 84);
		var retval = new Antlr3CstNode("synpred6_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:109:4: ({...}? => printExpr ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:109:4: {...}? => printExpr ';'
			{
			DebugLocation(109, 4);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred6_Php", "expressionFollowsBodyString");
			}
			DebugLocation(109, 74);
			PushFollow(Follow._printExpr_in_synpred6_Php427);
			printExpr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(109, 84);
			Match(input,SemiColon,Follow._SemiColon_in_synpred6_Php429); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_Php_fragment", 84);
			LeaveRule("synpred6_Php_fragment", 84);
			LeaveRule_synpred6_Php_fragment();
		}
	}
	// $ANTLR end synpred6_Php

	partial void EnterRule_synpred8_Php_fragment();
	partial void LeaveRule_synpred8_Php_fragment();

	// $ANTLR start synpred8_Php
	private void synpred8_Php_fragment()
	{
		EnterRule_synpred8_Php_fragment();
		EnterRule("synpred8_Php_fragment", 86);
		var retval = new Antlr3CstNode("synpred8_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:6: ({...}? => ( printExpr )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:6: {...}? => ( printExpr )?
			{
			DebugLocation(110, 6);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred8_Php", "expressionFollowsBodyString");
			}
			DebugLocation(110, 77);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: ( printExpr )?
			int alt134=2;
			try { DebugEnterSubRule(134);
			try { DebugEnterDecision(134, false);
			int LA134_1 = input.LA(1);

			if ((LA134_1==Ampersand||LA134_1==ArrayType||LA134_1==Bang||(LA134_1>=BoolType && LA134_1<=BooleanType)||LA134_1==Clone||LA134_1==Die||(LA134_1>=DoubleQuotedString && LA134_1<=DoubleType)||LA134_1==Empty||(LA134_1>=Eval && LA134_1<=Exit)||LA134_1==False||LA134_1==FloatType||LA134_1==Function||LA134_1==HaltCompiler||LA134_1==HereDoc||(LA134_1>=Include && LA134_1<=IncrementOperator)||(LA134_1>=IntType && LA134_1<=IntegerType)||(LA134_1>=Isset && LA134_1<=List)||LA134_1==Minus||(LA134_1>=New && LA134_1<=Null)||LA134_1==ObjectType||(LA134_1>=OpenRoundBracket && LA134_1<=OpenSquareBracket)||LA134_1==Plus||(LA134_1>=Real && LA134_1<=RequireOnce)||LA134_1==SingleQuotedString||(LA134_1>=Static && LA134_1<=SuppressWarnings)||(LA134_1>=Tilde && LA134_1<=True)||LA134_1==UnquotedString||LA134_1==UnsetType||LA134_1==VariableName||(LA134_1>=128 && LA134_1<=129)))
			{
				alt134 = 1;
			}
			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: printExpr
				{
				DebugLocation(110, 77);
				PushFollow(Follow._printExpr_in_synpred8_Php442);
				printExpr();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(134); }


			}

		}
		finally
		{
			TraceOut("synpred8_Php_fragment", 86);
			LeaveRule("synpred8_Php_fragment", 86);
			LeaveRule_synpred8_Php_fragment();
		}
	}
	// $ANTLR end synpred8_Php

	partial void EnterRule_synpred10_Php_fragment();
	partial void LeaveRule_synpred10_Php_fragment();

	// $ANTLR start synpred10_Php
	private void synpred10_Php_fragment()
	{
		EnterRule_synpred10_Php_fragment();
		EnterRule("synpred10_Php_fragment", 88);
		var retval = new Antlr3CstNode("synpred10_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:4: ( ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
			{
			DebugLocation(110, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? )
			int alt137=2;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Static:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Bang:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BodyString:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Break:
			case Const:
			case Continue:
			case Echo:
			case Global:
			case Goto:
			case Return:
			case Throw:
				{
				alt137 = 2;
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case StringType:
			case UnquotedString:
				{
				int LA137_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt137 = 1;
				}
				else if ((true))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 30, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:6: {...}? => ( printExpr )?
				{
				DebugLocation(110, 6);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return;}
					throw new FailedPredicateException(input, "synpred10_Php", "expressionFollowsBodyString");
				}
				DebugLocation(110, 77);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: ( printExpr )?
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, false);
				int LA135_1 = input.LA(1);

				if ((LA135_1==Ampersand||LA135_1==ArrayType||LA135_1==Bang||(LA135_1>=BoolType && LA135_1<=BooleanType)||LA135_1==Clone||LA135_1==Die||(LA135_1>=DoubleQuotedString && LA135_1<=DoubleType)||LA135_1==Empty||(LA135_1>=Eval && LA135_1<=Exit)||LA135_1==False||LA135_1==FloatType||LA135_1==Function||LA135_1==HaltCompiler||LA135_1==HereDoc||(LA135_1>=Include && LA135_1<=IncrementOperator)||(LA135_1>=IntType && LA135_1<=IntegerType)||(LA135_1>=Isset && LA135_1<=List)||LA135_1==Minus||(LA135_1>=New && LA135_1<=Null)||LA135_1==ObjectType||(LA135_1>=OpenRoundBracket && LA135_1<=OpenSquareBracket)||LA135_1==Plus||(LA135_1>=Real && LA135_1<=RequireOnce)||LA135_1==SingleQuotedString||(LA135_1>=Static && LA135_1<=SuppressWarnings)||(LA135_1>=Tilde && LA135_1<=True)||LA135_1==UnquotedString||LA135_1==UnsetType||LA135_1==VariableName||(LA135_1>=128 && LA135_1<=129)))
				{
					alt135 = 1;
				}
				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: printExpr
					{
					DebugLocation(110, 77);
					PushFollow(Follow._printExpr_in_synpred10_Php442);
					printExpr();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(135); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: ( simpleStatement )?
				{
				DebugLocation(110, 90);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: ( simpleStatement )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, false);
				int LA136_1 = input.LA(1);

				if ((LA136_1==Ampersand||LA136_1==ArrayType||LA136_1==Bang||(LA136_1>=BoolType && LA136_1<=Break)||LA136_1==Clone||(LA136_1>=Const && LA136_1<=Continue)||LA136_1==Die||(LA136_1>=DoubleQuotedString && LA136_1<=Echo)||LA136_1==Empty||(LA136_1>=Eval && LA136_1<=Exit)||LA136_1==False||LA136_1==FloatType||(LA136_1>=Function && LA136_1<=HaltCompiler)||LA136_1==HereDoc||(LA136_1>=Include && LA136_1<=IncrementOperator)||(LA136_1>=IntType && LA136_1<=IntegerType)||(LA136_1>=Isset && LA136_1<=List)||LA136_1==Minus||(LA136_1>=New && LA136_1<=Null)||LA136_1==ObjectType||(LA136_1>=OpenRoundBracket && LA136_1<=OpenSquareBracket)||LA136_1==Plus||(LA136_1>=Real && LA136_1<=Return)||LA136_1==SingleQuotedString||(LA136_1>=Static && LA136_1<=SuppressWarnings)||(LA136_1>=Throw && LA136_1<=True)||LA136_1==UnquotedString||LA136_1==UnsetType||LA136_1==VariableName||(LA136_1>=128 && LA136_1<=129)))
				{
					alt136 = 1;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: simpleStatement
					{
					DebugLocation(110, 90);
					PushFollow(Follow._simpleStatement_in_synpred10_Php447);
					simpleStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(136); }


				}
				break;

			}
			} finally { DebugExitSubRule(137); }

			DebugLocation(111, 3);
			Match(input,BodyString,Follow._BodyString_in_synpred10_Php453); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_Php_fragment", 88);
			LeaveRule("synpred10_Php_fragment", 88);
			LeaveRule_synpred10_Php_fragment();
		}
	}
	// $ANTLR end synpred10_Php

	partial void EnterRule_synpred13_Php_fragment();
	partial void LeaveRule_synpred13_Php_fragment();

	// $ANTLR start synpred13_Php
	private void synpred13_Php_fragment()
	{
		EnterRule_synpred13_Php_fragment();
		EnterRule("synpred13_Php_fragment", 91);
		var retval = new Antlr3CstNode("synpred13_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:114:4: ( UnquotedString Colon statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:114:4: UnquotedString Colon statement
			{
			DebugLocation(114, 4);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred13_Php470); if (state.failed) return;
			DebugLocation(114, 19);
			Match(input,Colon,Follow._Colon_in_synpred13_Php472); if (state.failed) return;
			DebugLocation(114, 25);
			PushFollow(Follow._statement_in_synpred13_Php474);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_Php_fragment", 91);
			LeaveRule("synpred13_Php_fragment", 91);
			LeaveRule_synpred13_Php_fragment();
		}
	}
	// $ANTLR end synpred13_Php

	partial void EnterRule_synpred16_Php_fragment();
	partial void LeaveRule_synpred16_Php_fragment();

	// $ANTLR start synpred16_Php
	private void synpred16_Php_fragment()
	{
		EnterRule_synpred16_Php_fragment();
		EnterRule("synpred16_Php_fragment", 94);
		var retval = new Antlr3CstNode("synpred16_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:117:4: ( complexStatement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:117:4: complexStatement
			{
			DebugLocation(117, 4);
			PushFollow(Follow._complexStatement_in_synpred16_Php489);
			complexStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_Php_fragment", 94);
			LeaveRule("synpred16_Php_fragment", 94);
			LeaveRule_synpred16_Php_fragment();
		}
	}
	// $ANTLR end synpred16_Php

	partial void EnterRule_synpred17_Php_fragment();
	partial void LeaveRule_synpred17_Php_fragment();

	// $ANTLR start synpred17_Php
	private void synpred17_Php_fragment()
	{
		EnterRule_synpred17_Php_fragment();
		EnterRule("synpred17_Php_fragment", 95);
		var retval = new Antlr3CstNode("synpred17_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:118:4: ( simpleStatement ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:118:4: simpleStatement ';'
			{
			DebugLocation(118, 4);
			PushFollow(Follow._simpleStatement_in_synpred17_Php494);
			simpleStatement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(118, 20);
			Match(input,SemiColon,Follow._SemiColon_in_synpred17_Php496); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_Php_fragment", 95);
			LeaveRule("synpred17_Php_fragment", 95);
			LeaveRule_synpred17_Php_fragment();
		}
	}
	// $ANTLR end synpred17_Php

	partial void EnterRule_synpred18_Php_fragment();
	partial void LeaveRule_synpred18_Php_fragment();

	// $ANTLR start synpred18_Php
	private void synpred18_Php_fragment()
	{
		EnterRule_synpred18_Php_fragment();
		EnterRule("synpred18_Php_fragment", 96);
		var retval = new Antlr3CstNode("synpred18_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:8: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:8: statement
			{
			DebugLocation(127, 8);
			PushFollow(Follow._statement_in_synpred18_Php525);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred18_Php_fragment", 96);
			LeaveRule("synpred18_Php_fragment", 96);
			LeaveRule_synpred18_Php_fragment();
		}
	}
	// $ANTLR end synpred18_Php

	partial void EnterRule_synpred46_Php_fragment();
	partial void LeaveRule_synpred46_Php_fragment();

	// $ANTLR start synpred46_Php
	private void synpred46_Php_fragment()
	{
		EnterRule_synpred46_Php_fragment();
		EnterRule("synpred46_Php_fragment", 124);
		var retval = new Antlr3CstNode("synpred46_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:36: ( conditional )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:36: conditional
			{
			DebugLocation(185, 36);
			PushFollow(Follow._conditional_in_synpred46_Php877);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred46_Php_fragment", 124);
			LeaveRule("synpred46_Php_fragment", 124);
			LeaveRule_synpred46_Php_fragment();
		}
	}
	// $ANTLR end synpred46_Php

	partial void EnterRule_synpred69_Php_fragment();
	partial void LeaveRule_synpred69_Php_fragment();

	// $ANTLR start synpred69_Php
	private void synpred69_Php_fragment()
	{
		EnterRule_synpred69_Php_fragment();
		EnterRule("synpred69_Php_fragment", 147);
		var retval = new Antlr3CstNode("synpred69_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:208:4: ( Goto UnquotedString )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:208:4: Goto UnquotedString
			{
			DebugLocation(208, 4);
			Match(input,Goto,Follow._Goto_in_synpred69_Php1092); if (state.failed) return;
			DebugLocation(208, 9);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred69_Php1094); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred69_Php_fragment", 147);
			LeaveRule("synpred69_Php_fragment", 147);
			LeaveRule_synpred69_Php_fragment();
		}
	}
	// $ANTLR end synpred69_Php

	partial void EnterRule_synpred72_Php_fragment();
	partial void LeaveRule_synpred72_Php_fragment();

	// $ANTLR start synpred72_Php
	private void synpred72_Php_fragment()
	{
		EnterRule_synpred72_Php_fragment();
		EnterRule("synpred72_Php_fragment", 150);
		var retval = new Antlr3CstNode("synpred72_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:210:4: ( Goto UnquotedString )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:210:4: Goto UnquotedString
			{
			DebugLocation(210, 4);
			Match(input,Goto,Follow._Goto_in_synpred72_Php1107); if (state.failed) return;
			DebugLocation(210, 9);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred72_Php1109); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred72_Php_fragment", 150);
			LeaveRule("synpred72_Php_fragment", 150);
			LeaveRule_synpred72_Php_fragment();
		}
	}
	// $ANTLR end synpred72_Php

	partial void EnterRule_synpred74_Php_fragment();
	partial void LeaveRule_synpred74_Php_fragment();

	// $ANTLR start synpred74_Php
	private void synpred74_Php_fragment()
	{
		EnterRule_synpred74_Php_fragment();
		EnterRule("synpred74_Php_fragment", 152);
		var retval = new Antlr3CstNode("synpred74_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:216:40: ( conditional )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:216:40: conditional
			{
			DebugLocation(216, 40);
			PushFollow(Follow._conditional_in_synpred74_Php1142);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred74_Php_fragment", 152);
			LeaveRule("synpred74_Php_fragment", 152);
			LeaveRule_synpred74_Php_fragment();
		}
	}
	// $ANTLR end synpred74_Php

	partial void EnterRule_synpred81_Php_fragment();
	partial void LeaveRule_synpred81_Php_fragment();

	// $ANTLR start synpred81_Php
	private void synpred81_Php_fragment()
	{
		EnterRule_synpred81_Php_fragment();
		EnterRule("synpred81_Php_fragment", 159);
		var retval = new Antlr3CstNode("synpred81_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:4: ( ( casestatement )* defaultcase ( casestatement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:4: ( casestatement )* defaultcase ( casestatement )*
			{
			DebugLocation(233, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:4: ( casestatement )*
			try { DebugEnterSubRule(154);
			while (true)
			{
				int alt154=2;
				try { DebugEnterDecision(154, false);
				int LA154_1 = input.LA(1);

				if ((LA154_1==Case))
				{
					alt154 = 1;
				}


				} finally { DebugExitDecision(154); }
				switch ( alt154 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:4: casestatement
					{
					DebugLocation(233, 4);
					PushFollow(Follow._casestatement_in_synpred81_Php1202);
					casestatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop154;
				}
			}

			loop154:
				;

			} finally { DebugExitSubRule(154); }

			DebugLocation(233, 19);
			PushFollow(Follow._defaultcase_in_synpred81_Php1205);
			defaultcase();
			PopFollow();
			if (state.failed) return;
			DebugLocation(233, 31);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:31: ( casestatement )*
			try { DebugEnterSubRule(155);
			while (true)
			{
				int alt155=2;
				try { DebugEnterDecision(155, false);
				int LA155_1 = input.LA(1);

				if ((LA155_1==Case))
				{
					alt155 = 1;
				}


				} finally { DebugExitDecision(155); }
				switch ( alt155 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:233:31: casestatement
					{
					DebugLocation(233, 31);
					PushFollow(Follow._casestatement_in_synpred81_Php1207);
					casestatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop155;
				}
			}

			loop155:
				;

			} finally { DebugExitSubRule(155); }


			}

		}
		finally
		{
			TraceOut("synpred81_Php_fragment", 159);
			LeaveRule("synpred81_Php_fragment", 159);
			LeaveRule_synpred81_Php_fragment();
		}
	}
	// $ANTLR end synpred81_Php

	partial void EnterRule_synpred84_Php_fragment();
	partial void LeaveRule_synpred84_Php_fragment();

	// $ANTLR start synpred84_Php
	private void synpred84_Php_fragment()
	{
		EnterRule_synpred84_Php_fragment();
		EnterRule("synpred84_Php_fragment", 162);
		var retval = new Antlr3CstNode("synpred84_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:238:30: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:238:30: statement
			{
			DebugLocation(238, 30);
			PushFollow(Follow._statement_in_synpred84_Php1235);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred84_Php_fragment", 162);
			LeaveRule("synpred84_Php_fragment", 162);
			LeaveRule_synpred84_Php_fragment();
		}
	}
	// $ANTLR end synpred84_Php

	partial void EnterRule_synpred86_Php_fragment();
	partial void LeaveRule_synpred86_Php_fragment();

	// $ANTLR start synpred86_Php
	private void synpred86_Php_fragment()
	{
		EnterRule_synpred86_Php_fragment();
		EnterRule("synpred86_Php_fragment", 164);
		var retval = new Antlr3CstNode("synpred86_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:242:23: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:242:23: statement
			{
			DebugLocation(242, 23);
			PushFollow(Follow._statement_in_synpred86_Php1257);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred86_Php_fragment", 164);
			LeaveRule("synpred86_Php_fragment", 164);
			LeaveRule_synpred86_Php_fragment();
		}
	}
	// $ANTLR end synpred86_Php

	partial void EnterRule_synpred90_Php_fragment();
	partial void LeaveRule_synpred90_Php_fragment();

	// $ANTLR start synpred90_Php
	private void synpred90_Php_fragment()
	{
		EnterRule_synpred90_Php_fragment();
		EnterRule("synpred90_Php_fragment", 168);
		var retval = new Antlr3CstNode("synpred90_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:5: ( primitiveType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:5: primitiveType
			{
			DebugLocation(258, 5);
			PushFollow(Follow._primitiveType_in_synpred90_Php1335);
			primitiveType();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred90_Php_fragment", 168);
			LeaveRule("synpred90_Php_fragment", 168);
			LeaveRule_synpred90_Php_fragment();
		}
	}
	// $ANTLR end synpred90_Php

	partial void EnterRule_synpred91_Php_fragment();
	partial void LeaveRule_synpred91_Php_fragment();

	// $ANTLR start synpred91_Php
	private void synpred91_Php_fragment()
	{
		EnterRule_synpred91_Php_fragment();
		EnterRule("synpred91_Php_fragment", 169);
		var retval = new Antlr3CstNode("synpred91_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:21: ( qualifiedName )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:258:21: qualifiedName
			{
			DebugLocation(258, 21);
			PushFollow(Follow._qualifiedName_in_synpred91_Php1339);
			qualifiedName();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred91_Php_fragment", 169);
			LeaveRule("synpred91_Php_fragment", 169);
			LeaveRule_synpred91_Php_fragment();
		}
	}
	// $ANTLR end synpred91_Php

	partial void EnterRule_synpred95_Php_fragment();
	partial void LeaveRule_synpred95_Php_fragment();

	// $ANTLR start synpred95_Php
	private void synpred95_Php_fragment()
	{
		EnterRule_synpred95_Php_fragment();
		EnterRule("synpred95_Php_fragment", 173);
		var retval = new Antlr3CstNode("synpred95_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:275:20: ( Or weakLogicalXor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:275:20: Or weakLogicalXor
			{
			DebugLocation(275, 20);
			Match(input,Or,Follow._Or_in_synpred95_Php1413); if (state.failed) return;
			DebugLocation(275, 23);
			PushFollow(Follow._weakLogicalXor_in_synpred95_Php1415);
			weakLogicalXor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred95_Php_fragment", 173);
			LeaveRule("synpred95_Php_fragment", 173);
			LeaveRule_synpred95_Php_fragment();
		}
	}
	// $ANTLR end synpred95_Php

	partial void EnterRule_synpred96_Php_fragment();
	partial void LeaveRule_synpred96_Php_fragment();

	// $ANTLR start synpred96_Php
	private void synpred96_Php_fragment()
	{
		EnterRule_synpred96_Php_fragment();
		EnterRule("synpred96_Php_fragment", 174);
		var retval = new Antlr3CstNode("synpred96_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:279:20: ( Xor weakLogicalAnd )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:279:20: Xor weakLogicalAnd
			{
			DebugLocation(279, 20);
			Match(input,Xor,Follow._Xor_in_synpred96_Php1431); if (state.failed) return;
			DebugLocation(279, 24);
			PushFollow(Follow._weakLogicalAnd_in_synpred96_Php1433);
			weakLogicalAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred96_Php_fragment", 174);
			LeaveRule("synpred96_Php_fragment", 174);
			LeaveRule_synpred96_Php_fragment();
		}
	}
	// $ANTLR end synpred96_Php

	partial void EnterRule_synpred97_Php_fragment();
	partial void LeaveRule_synpred97_Php_fragment();

	// $ANTLR start synpred97_Php
	private void synpred97_Php_fragment()
	{
		EnterRule_synpred97_Php_fragment();
		EnterRule("synpred97_Php_fragment", 175);
		var retval = new Antlr3CstNode("synpred97_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:283:16: ( And assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:283:16: And assignment
			{
			DebugLocation(283, 16);
			Match(input,And,Follow._And_in_synpred97_Php1450); if (state.failed) return;
			DebugLocation(283, 20);
			PushFollow(Follow._assignment_in_synpred97_Php1452);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred97_Php_fragment", 175);
			LeaveRule("synpred97_Php_fragment", 175);
			LeaveRule_synpred97_Php_fragment();
		}
	}
	// $ANTLR end synpred97_Php

	partial void EnterRule_synpred99_Php_fragment();
	partial void LeaveRule_synpred99_Php_fragment();

	// $ANTLR start synpred99_Php
	private void synpred99_Php_fragment()
	{
		EnterRule_synpred99_Php_fragment();
		EnterRule("synpred99_Php_fragment", 177);
		var retval = new Antlr3CstNode("synpred99_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:287:4: ( listVariables ( Equals | AsignmentOperator ) assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:287:4: listVariables ( Equals | AsignmentOperator ) assignment
			{
			DebugLocation(287, 4);
			PushFollow(Follow._listVariables_in_synpred99_Php1465);
			listVariables();
			PopFollow();
			if (state.failed) return;
			DebugLocation(287, 18);
			if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(287, 47);
			PushFollow(Follow._assignment_in_synpred99_Php1475);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Php_fragment", 177);
			LeaveRule("synpred99_Php_fragment", 177);
			LeaveRule_synpred99_Php_fragment();
		}
	}
	// $ANTLR end synpred99_Php

	partial void EnterRule_synpred105_Php_fragment();
	partial void LeaveRule_synpred105_Php_fragment();

	// $ANTLR start synpred105_Php
	private void synpred105_Php_fragment()
	{
		EnterRule_synpred105_Php_fragment();
		EnterRule("synpred105_Php_fragment", 183);
		var retval = new Antlr3CstNode("synpred105_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:4: ( logicalOr QuestionMark ( expression )? Colon expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:4: logicalOr QuestionMark ( expression )? Colon expression
			{
			DebugLocation(297, 4);
			PushFollow(Follow._logicalOr_in_synpred105_Php1523);
			logicalOr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(297, 14);
			Match(input,QuestionMark,Follow._QuestionMark_in_synpred105_Php1525); if (state.failed) return;
			DebugLocation(297, 27);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:27: ( expression )?
			int alt161=2;
			try { DebugEnterSubRule(161);
			try { DebugEnterDecision(161, false);
			int LA161_1 = input.LA(1);

			if ((LA161_1==Ampersand||LA161_1==ArrayType||LA161_1==Bang||(LA161_1>=BoolType && LA161_1<=BooleanType)||LA161_1==Clone||LA161_1==Die||(LA161_1>=DoubleQuotedString && LA161_1<=DoubleType)||LA161_1==Empty||(LA161_1>=Eval && LA161_1<=Exit)||LA161_1==False||LA161_1==FloatType||LA161_1==Function||LA161_1==HaltCompiler||LA161_1==HereDoc||(LA161_1>=Include && LA161_1<=IncrementOperator)||(LA161_1>=IntType && LA161_1<=IntegerType)||(LA161_1>=Isset && LA161_1<=List)||LA161_1==Minus||(LA161_1>=New && LA161_1<=Null)||LA161_1==ObjectType||(LA161_1>=OpenRoundBracket && LA161_1<=OpenSquareBracket)||LA161_1==Plus||(LA161_1>=Real && LA161_1<=RequireOnce)||LA161_1==SingleQuotedString||(LA161_1>=Static && LA161_1<=SuppressWarnings)||(LA161_1>=Tilde && LA161_1<=True)||LA161_1==UnquotedString||LA161_1==UnsetType||LA161_1==VariableName||(LA161_1>=128 && LA161_1<=129)))
			{
				alt161 = 1;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:27: expression
				{
				DebugLocation(297, 27);
				PushFollow(Follow._expression_in_synpred105_Php1527);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(161); }

			DebugLocation(297, 39);
			Match(input,Colon,Follow._Colon_in_synpred105_Php1530); if (state.failed) return;
			DebugLocation(297, 45);
			PushFollow(Follow._expression_in_synpred105_Php1532);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred105_Php_fragment", 183);
			LeaveRule("synpred105_Php_fragment", 183);
			LeaveRule_synpred105_Php_fragment();
		}
	}
	// $ANTLR end synpred105_Php

	partial void EnterRule_synpred106_Php_fragment();
	partial void LeaveRule_synpred106_Php_fragment();

	// $ANTLR start synpred106_Php
	private void synpred106_Php_fragment()
	{
		EnterRule_synpred106_Php_fragment();
		EnterRule("synpred106_Php_fragment", 184);
		var retval = new Antlr3CstNode("synpred106_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:16: ( LogicalOr logicalAnd )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:16: LogicalOr logicalAnd
			{
			DebugLocation(302, 16);
			Match(input,LogicalOr,Follow._LogicalOr_in_synpred106_Php1552); if (state.failed) return;
			DebugLocation(302, 26);
			PushFollow(Follow._logicalAnd_in_synpred106_Php1554);
			logicalAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred106_Php_fragment", 184);
			LeaveRule("synpred106_Php_fragment", 184);
			LeaveRule_synpred106_Php_fragment();
		}
	}
	// $ANTLR end synpred106_Php

	partial void EnterRule_synpred107_Php_fragment();
	partial void LeaveRule_synpred107_Php_fragment();

	// $ANTLR start synpred107_Php
	private void synpred107_Php_fragment()
	{
		EnterRule_synpred107_Php_fragment();
		EnterRule("synpred107_Php_fragment", 185);
		var retval = new Antlr3CstNode("synpred107_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:306:15: ( LogicalAnd bitwiseOr )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:306:15: LogicalAnd bitwiseOr
			{
			DebugLocation(306, 15);
			Match(input,LogicalAnd,Follow._LogicalAnd_in_synpred107_Php1570); if (state.failed) return;
			DebugLocation(306, 26);
			PushFollow(Follow._bitwiseOr_in_synpred107_Php1572);
			bitwiseOr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred107_Php_fragment", 185);
			LeaveRule("synpred107_Php_fragment", 185);
			LeaveRule_synpred107_Php_fragment();
		}
	}
	// $ANTLR end synpred107_Php

	partial void EnterRule_synpred108_Php_fragment();
	partial void LeaveRule_synpred108_Php_fragment();

	// $ANTLR start synpred108_Php
	private void synpred108_Php_fragment()
	{
		EnterRule_synpred108_Php_fragment();
		EnterRule("synpred108_Php_fragment", 186);
		var retval = new Antlr3CstNode("synpred108_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:310:16: ( Pipe bitwiseXor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:310:16: Pipe bitwiseXor
			{
			DebugLocation(310, 16);
			Match(input,Pipe,Follow._Pipe_in_synpred108_Php1589); if (state.failed) return;
			DebugLocation(310, 21);
			PushFollow(Follow._bitwiseXor_in_synpred108_Php1591);
			bitwiseXor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred108_Php_fragment", 186);
			LeaveRule("synpred108_Php_fragment", 186);
			LeaveRule_synpred108_Php_fragment();
		}
	}
	// $ANTLR end synpred108_Php

	partial void EnterRule_synpred109_Php_fragment();
	partial void LeaveRule_synpred109_Php_fragment();

	// $ANTLR start synpred109_Php
	private void synpred109_Php_fragment()
	{
		EnterRule_synpred109_Php_fragment();
		EnterRule("synpred109_Php_fragment", 187);
		var retval = new Antlr3CstNode("synpred109_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:314:16: ( Hat bitWiseAnd )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:314:16: Hat bitWiseAnd
			{
			DebugLocation(314, 16);
			Match(input,Hat,Follow._Hat_in_synpred109_Php1608); if (state.failed) return;
			DebugLocation(314, 20);
			PushFollow(Follow._bitWiseAnd_in_synpred109_Php1610);
			bitWiseAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred109_Php_fragment", 187);
			LeaveRule("synpred109_Php_fragment", 187);
			LeaveRule_synpred109_Php_fragment();
		}
	}
	// $ANTLR end synpred109_Php

	partial void EnterRule_synpred110_Php_fragment();
	partial void LeaveRule_synpred110_Php_fragment();

	// $ANTLR start synpred110_Php
	private void synpred110_Php_fragment()
	{
		EnterRule_synpred110_Php_fragment();
		EnterRule("synpred110_Php_fragment", 188);
		var retval = new Antlr3CstNode("synpred110_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:318:19: ( Ampersand equalityCheck )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:318:19: Ampersand equalityCheck
			{
			DebugLocation(318, 19);
			Match(input,Ampersand,Follow._Ampersand_in_synpred110_Php1626); if (state.failed) return;
			DebugLocation(318, 29);
			PushFollow(Follow._equalityCheck_in_synpred110_Php1628);
			equalityCheck();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred110_Php_fragment", 188);
			LeaveRule("synpred110_Php_fragment", 188);
			LeaveRule_synpred110_Php_fragment();
		}
	}
	// $ANTLR end synpred110_Php

	partial void EnterRule_synpred111_Php_fragment();
	partial void LeaveRule_synpred111_Php_fragment();

	// $ANTLR start synpred111_Php
	private void synpred111_Php_fragment()
	{
		EnterRule_synpred111_Php_fragment();
		EnterRule("synpred111_Php_fragment", 189);
		var retval = new Antlr3CstNode("synpred111_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:322:22: ( EqualityOperator comparisionCheck )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:322:22: EqualityOperator comparisionCheck
			{
			DebugLocation(322, 22);
			Match(input,EqualityOperator,Follow._EqualityOperator_in_synpred111_Php1644); if (state.failed) return;
			DebugLocation(322, 39);
			PushFollow(Follow._comparisionCheck_in_synpred111_Php1646);
			comparisionCheck();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred111_Php_fragment", 189);
			LeaveRule("synpred111_Php_fragment", 189);
			LeaveRule_synpred111_Php_fragment();
		}
	}
	// $ANTLR end synpred111_Php

	partial void EnterRule_synpred112_Php_fragment();
	partial void LeaveRule_synpred112_Php_fragment();

	// $ANTLR start synpred112_Php
	private void synpred112_Php_fragment()
	{
		EnterRule_synpred112_Php_fragment();
		EnterRule("synpred112_Php_fragment", 190);
		var retval = new Antlr3CstNode("synpred112_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:326:18: ( ComparisionOperator bitWiseShift )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:326:18: ComparisionOperator bitWiseShift
			{
			DebugLocation(326, 18);
			Match(input,ComparisionOperator,Follow._ComparisionOperator_in_synpred112_Php1663); if (state.failed) return;
			DebugLocation(326, 38);
			PushFollow(Follow._bitWiseShift_in_synpred112_Php1665);
			bitWiseShift();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred112_Php_fragment", 190);
			LeaveRule("synpred112_Php_fragment", 190);
			LeaveRule_synpred112_Php_fragment();
		}
	}
	// $ANTLR end synpred112_Php

	partial void EnterRule_synpred113_Php_fragment();
	partial void LeaveRule_synpred113_Php_fragment();

	// $ANTLR start synpred113_Php
	private void synpred113_Php_fragment()
	{
		EnterRule_synpred113_Php_fragment();
		EnterRule("synpred113_Php_fragment", 191);
		var retval = new Antlr3CstNode("synpred113_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:330:14: ( ShiftOperator addition )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:330:14: ShiftOperator addition
			{
			DebugLocation(330, 14);
			Match(input,ShiftOperator,Follow._ShiftOperator_in_synpred113_Php1681); if (state.failed) return;
			DebugLocation(330, 28);
			PushFollow(Follow._addition_in_synpred113_Php1683);
			addition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred113_Php_fragment", 191);
			LeaveRule("synpred113_Php_fragment", 191);
			LeaveRule_synpred113_Php_fragment();
		}
	}
	// $ANTLR end synpred113_Php

	partial void EnterRule_synpred116_Php_fragment();
	partial void LeaveRule_synpred116_Php_fragment();

	// $ANTLR start synpred116_Php
	private void synpred116_Php_fragment()
	{
		EnterRule_synpred116_Php_fragment();
		EnterRule("synpred116_Php_fragment", 194);
		var retval = new Antlr3CstNode("synpred116_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:334:20: ( ( Plus | Minus | Dot ) multiplication )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:334:20: ( Plus | Minus | Dot ) multiplication
			{
			DebugLocation(334, 20);
			if (input.LA(1)==Dot||input.LA(1)==Minus||input.LA(1)==Plus)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(334, 41);
			PushFollow(Follow._multiplication_in_synpred116_Php1712);
			multiplication();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred116_Php_fragment", 194);
			LeaveRule("synpred116_Php_fragment", 194);
			LeaveRule_synpred116_Php_fragment();
		}
	}
	// $ANTLR end synpred116_Php

	partial void EnterRule_synpred119_Php_fragment();
	partial void LeaveRule_synpred119_Php_fragment();

	// $ANTLR start synpred119_Php
	private void synpred119_Php_fragment()
	{
		EnterRule_synpred119_Php_fragment();
		EnterRule("synpred119_Php_fragment", 197);
		var retval = new Antlr3CstNode("synpred119_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:338:16: ( ( Asterisk | Forwardslash | Percent ) logicalNot )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:338:16: ( Asterisk | Forwardslash | Percent ) logicalNot
			{
			DebugLocation(338, 16);
			if (input.LA(1)==Asterisk||input.LA(1)==Forwardslash||input.LA(1)==Percent)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(338, 52);
			PushFollow(Follow._logicalNot_in_synpred119_Php1740);
			logicalNot();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred119_Php_fragment", 197);
			LeaveRule("synpred119_Php_fragment", 197);
			LeaveRule_synpred119_Php_fragment();
		}
	}
	// $ANTLR end synpred119_Php

	partial void EnterRule_synpred121_Php_fragment();
	partial void LeaveRule_synpred121_Php_fragment();

	// $ANTLR start synpred121_Php
	private void synpred121_Php_fragment()
	{
		EnterRule_synpred121_Php_fragment();
		EnterRule("synpred121_Php_fragment", 199);
		var retval = new Antlr3CstNode("synpred121_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:347:18: ( Instanceof negateOrCast )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:347:18: Instanceof negateOrCast
			{
			DebugLocation(347, 18);
			Match(input,Instanceof,Follow._Instanceof_in_synpred121_Php1774); if (state.failed) return;
			DebugLocation(347, 29);
			PushFollow(Follow._negateOrCast_in_synpred121_Php1776);
			negateOrCast();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_Php_fragment", 199);
			LeaveRule("synpred121_Php_fragment", 199);
			LeaveRule_synpred121_Php_fragment();
		}
	}
	// $ANTLR end synpred121_Php

	partial void EnterRule_synpred124_Php_fragment();
	partial void LeaveRule_synpred124_Php_fragment();

	// $ANTLR start synpred124_Php
	private void synpred124_Php_fragment()
	{
		EnterRule_synpred124_Php_fragment();
		EnterRule("synpred124_Php_fragment", 202);
		var retval = new Antlr3CstNode("synpred124_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:351:4: ( ( Tilde | Minus | SuppressWarnings ) increment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:351:4: ( Tilde | Minus | SuppressWarnings ) increment
			{
			DebugLocation(351, 4);
			if (input.LA(1)==Minus||input.LA(1)==SuppressWarnings||input.LA(1)==Tilde)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(351, 39);
			PushFollow(Follow._increment_in_synpred124_Php1801);
			increment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred124_Php_fragment", 202);
			LeaveRule("synpred124_Php_fragment", 202);
			LeaveRule_synpred124_Php_fragment();
		}
	}
	// $ANTLR end synpred124_Php

	partial void EnterRule_synpred125_Php_fragment();
	partial void LeaveRule_synpred125_Php_fragment();

	// $ANTLR start synpred125_Php
	private void synpred125_Php_fragment()
	{
		EnterRule_synpred125_Php_fragment();
		EnterRule("synpred125_Php_fragment", 203);
		var retval = new Antlr3CstNode("synpred125_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:352:4: ( OpenRoundBracket primitiveType CloseRoundBracket increment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:352:4: OpenRoundBracket primitiveType CloseRoundBracket increment
			{
			DebugLocation(352, 4);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred125_Php1806); if (state.failed) return;
			DebugLocation(352, 21);
			PushFollow(Follow._primitiveType_in_synpred125_Php1808);
			primitiveType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(352, 35);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred125_Php1810); if (state.failed) return;
			DebugLocation(352, 53);
			PushFollow(Follow._increment_in_synpred125_Php1812);
			increment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred125_Php_fragment", 203);
			LeaveRule("synpred125_Php_fragment", 203);
			LeaveRule_synpred125_Php_fragment();
		}
	}
	// $ANTLR end synpred125_Php

	partial void EnterRule_synpred137_Php_fragment();
	partial void LeaveRule_synpred137_Php_fragment();

	// $ANTLR start synpred137_Php
	private void synpred137_Php_fragment()
	{
		EnterRule_synpred137_Php_fragment();
		EnterRule("synpred137_Php_fragment", 215);
		var retval = new Antlr3CstNode("synpred137_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:363:4: ( name IncrementOperator )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:363:4: name IncrementOperator
			{
			DebugLocation(363, 4);
			PushFollow(Follow._name_in_synpred137_Php1887);
			name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(363, 9);
			Match(input,IncrementOperator,Follow._IncrementOperator_in_synpred137_Php1889); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred137_Php_fragment", 215);
			LeaveRule("synpred137_Php_fragment", 215);
			LeaveRule_synpred137_Php_fragment();
		}
	}
	// $ANTLR end synpred137_Php

	partial void EnterRule_synpred139_Php_fragment();
	partial void LeaveRule_synpred139_Php_fragment();

	// $ANTLR start synpred139_Php
	private void synpred139_Php_fragment()
	{
		EnterRule_synpred139_Php_fragment();
		EnterRule("synpred139_Php_fragment", 217);
		var retval = new Antlr3CstNode("synpred139_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:364:4: ( listVariables ( Equals | AsignmentOperator ) assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:364:4: listVariables ( Equals | AsignmentOperator ) assignment
			{
			DebugLocation(364, 4);
			PushFollow(Follow._listVariables_in_synpred139_Php1894);
			listVariables();
			PopFollow();
			if (state.failed) return;
			DebugLocation(364, 18);
			if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(364, 47);
			PushFollow(Follow._assignment_in_synpred139_Php1904);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred139_Php_fragment", 217);
			LeaveRule("synpred139_Php_fragment", 217);
			LeaveRule_synpred139_Php_fragment();
		}
	}
	// $ANTLR end synpred139_Php

	partial void EnterRule_synpred140_Php_fragment();
	partial void LeaveRule_synpred140_Php_fragment();

	// $ANTLR start synpred140_Php
	private void synpred140_Php_fragment()
	{
		EnterRule_synpred140_Php_fragment();
		EnterRule("synpred140_Php_fragment", 218);
		var retval = new Antlr3CstNode("synpred140_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:365:4: ( newOrClone )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:365:4: newOrClone
			{
			DebugLocation(365, 4);
			PushFollow(Follow._newOrClone_in_synpred140_Php1909);
			newOrClone();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred140_Php_fragment", 218);
			LeaveRule("synpred140_Php_fragment", 218);
			LeaveRule_synpred140_Php_fragment();
		}
	}
	// $ANTLR end synpred140_Php

	partial void EnterRule_synpred141_Php_fragment();
	partial void LeaveRule_synpred141_Php_fragment();

	// $ANTLR start synpred141_Php
	private void synpred141_Php_fragment()
	{
		EnterRule_synpred141_Php_fragment();
		EnterRule("synpred141_Php_fragment", 219);
		var retval = new Antlr3CstNode("synpred141_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:9: ( nameOrFunctionCall )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:9: nameOrFunctionCall
			{
			DebugLocation(373, 9);
			PushFollow(Follow._nameOrFunctionCall_in_synpred141_Php1943);
			nameOrFunctionCall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred141_Php_fragment", 219);
			LeaveRule("synpred141_Php_fragment", 219);
			LeaveRule_synpred141_Php_fragment();
		}
	}
	// $ANTLR end synpred141_Php

	partial void EnterRule_synpred142_Php_fragment();
	partial void LeaveRule_synpred142_Php_fragment();

	// $ANTLR start synpred142_Php
	private void synpred142_Php_fragment()
	{
		EnterRule_synpred142_Php_fragment();
		EnterRule("synpred142_Php_fragment", 220);
		var retval = new Antlr3CstNode("synpred142_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:4: ( New ( nameOrFunctionCall | constantOrStaticAccessor ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:4: New ( nameOrFunctionCall | constantOrStaticAccessor )
			{
			DebugLocation(373, 4);
			Match(input,New,Follow._New_in_synpred142_Php1940); if (state.failed) return;
			DebugLocation(373, 8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:8: ( nameOrFunctionCall | constantOrStaticAccessor )
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA162_2 = input.LA(2);

				if ((EvaluatePredicate(synpred141_Php_fragment)))
				{
					alt162 = 1;
				}
				else if ((true))
				{
					alt162 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 162, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA162_2 = input.LA(2);

				if ((EvaluatePredicate(synpred141_Php_fragment)))
				{
					alt162 = 1;
				}
				else if ((true))
				{
					alt162 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 162, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA162_2 = input.LA(2);

				if ((EvaluatePredicate(synpred141_Php_fragment)))
				{
					alt162 = 1;
				}
				else if ((true))
				{
					alt162 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 162, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA162_2 = input.LA(2);

				if ((EvaluatePredicate(synpred141_Php_fragment)))
				{
					alt162 = 1;
				}
				else if ((true))
				{
					alt162 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 162, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
			case UnsetType:
				{
				alt162 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 162, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:9: nameOrFunctionCall
				{
				DebugLocation(373, 9);
				PushFollow(Follow._nameOrFunctionCall_in_synpred142_Php1943);
				nameOrFunctionCall();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:30: constantOrStaticAccessor
				{
				DebugLocation(373, 30);
				PushFollow(Follow._constantOrStaticAccessor_in_synpred142_Php1947);
				constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(162); }


			}

		}
		finally
		{
			TraceOut("synpred142_Php_fragment", 220);
			LeaveRule("synpred142_Php_fragment", 220);
			LeaveRule_synpred142_Php_fragment();
		}
	}
	// $ANTLR end synpred142_Php

	partial void EnterRule_synpred143_Php_fragment();
	partial void LeaveRule_synpred143_Php_fragment();

	// $ANTLR start synpred143_Php
	private void synpred143_Php_fragment()
	{
		EnterRule_synpred143_Php_fragment();
		EnterRule("synpred143_Php_fragment", 221);
		var retval = new Antlr3CstNode("synpred143_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:15: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:15: functionArguments
			{
			DebugLocation(374, 15);
			PushFollow(Follow._functionArguments_in_synpred143_Php1957);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred143_Php_fragment", 221);
			LeaveRule("synpred143_Php_fragment", 221);
			LeaveRule_synpred143_Php_fragment();
		}
	}
	// $ANTLR end synpred143_Php

	partial void EnterRule_synpred144_Php_fragment();
	partial void LeaveRule_synpred144_Php_fragment();

	// $ANTLR start synpred144_Php
	private void synpred144_Php_fragment()
	{
		EnterRule_synpred144_Php_fragment();
		EnterRule("synpred144_Php_fragment", 222);
		var retval = new Antlr3CstNode("synpred144_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:4: ( New Static ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:4: New Static ( functionArguments )?
			{
			DebugLocation(374, 4);
			Match(input,New,Follow._New_in_synpred144_Php1953); if (state.failed) return;
			DebugLocation(374, 8);
			Match(input,Static,Follow._Static_in_synpred144_Php1955); if (state.failed) return;
			DebugLocation(374, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:15: ( functionArguments )?
			int alt163=2;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, false);
			int LA163_1 = input.LA(1);

			if ((LA163_1==OpenRoundBracket))
			{
				alt163 = 1;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:15: functionArguments
				{
				DebugLocation(374, 15);
				PushFollow(Follow._functionArguments_in_synpred144_Php1957);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(163); }


			}

		}
		finally
		{
			TraceOut("synpred144_Php_fragment", 222);
			LeaveRule("synpred144_Php_fragment", 222);
			LeaveRule_synpred144_Php_fragment();
		}
	}
	// $ANTLR end synpred144_Php

	partial void EnterRule_synpred146_Php_fragment();
	partial void LeaveRule_synpred146_Php_fragment();

	// $ANTLR start synpred146_Php
	private void synpred146_Php_fragment()
	{
		EnterRule_synpred146_Php_fragment();
		EnterRule("synpred146_Php_fragment", 224);
		var retval = new Antlr3CstNode("synpred146_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:380:4: ( reference )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:380:4: reference
			{
			DebugLocation(380, 4);
			PushFollow(Follow._reference_in_synpred146_Php1981);
			reference();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred146_Php_fragment", 224);
			LeaveRule("synpred146_Php_fragment", 224);
			LeaveRule_synpred146_Php_fragment();
		}
	}
	// $ANTLR end synpred146_Php

	partial void EnterRule_synpred154_Php_fragment();
	partial void LeaveRule_synpred154_Php_fragment();

	// $ANTLR start synpred154_Php
	private void synpred154_Php_fragment()
	{
		EnterRule_synpred154_Php_fragment();
		EnterRule("synpred154_Php_fragment", 232);
		var retval = new Antlr3CstNode("synpred154_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:390:5: ( keyValuePair )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:390:5: keyValuePair
			{
			DebugLocation(390, 5);
			PushFollow(Follow._keyValuePair_in_synpred154_Php2050);
			keyValuePair();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred154_Php_fragment", 232);
			LeaveRule("synpred154_Php_fragment", 232);
			LeaveRule_synpred154_Php_fragment();
		}
	}
	// $ANTLR end synpred154_Php

	partial void EnterRule_synpred175_Php_fragment();
	partial void LeaveRule_synpred175_Php_fragment();

	// $ANTLR start synpred175_Php
	private void synpred175_Php_fragment()
	{
		EnterRule_synpred175_Php_fragment();
		EnterRule("synpred175_Php_fragment", 253);
		var retval = new Antlr3CstNode("synpred175_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:427:10: ( expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:427:10: expression
			{
			DebugLocation(427, 10);
			PushFollow(Follow._expression_in_synpred175_Php2232);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred175_Php_fragment", 253);
			LeaveRule("synpred175_Php_fragment", 253);
			LeaveRule_synpred175_Php_fragment();
		}
	}
	// $ANTLR end synpred175_Php

	partial void EnterRule_synpred177_Php_fragment();
	partial void LeaveRule_synpred177_Php_fragment();

	// $ANTLR start synpred177_Php
	private void synpred177_Php_fragment()
	{
		EnterRule_synpred177_Php_fragment();
		EnterRule("synpred177_Php_fragment", 255);
		var retval = new Antlr3CstNode("synpred177_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:6: ( New )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:6: New
			{
			DebugLocation(428, 6);
			Match(input,New,Follow._New_in_synpred177_Php2247); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred177_Php_fragment", 255);
			LeaveRule("synpred177_Php_fragment", 255);
			LeaveRule_synpred177_Php_fragment();
		}
	}
	// $ANTLR end synpred177_Php

	partial void EnterRule_synpred178_Php_fragment();
	partial void LeaveRule_synpred178_Php_fragment();

	// $ANTLR start synpred178_Php
	private void synpred178_Php_fragment()
	{
		EnterRule_synpred178_Php_fragment();
		EnterRule("synpred178_Php_fragment", 256);
		var retval = new Antlr3CstNode("synpred178_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:10: ( Clone )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:10: Clone
			{
			DebugLocation(428, 10);
			Match(input,Clone,Follow._Clone_in_synpred178_Php2249); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred178_Php_fragment", 256);
			LeaveRule("synpred178_Php_fragment", 256);
			LeaveRule_synpred178_Php_fragment();
		}
	}
	// $ANTLR end synpred178_Php

	partial void EnterRule_synpred194_Php_fragment();
	partial void LeaveRule_synpred194_Php_fragment();

	// $ANTLR start synpred194_Php
	private void synpred194_Php_fragment()
	{
		EnterRule_synpred194_Php_fragment();
		EnterRule("synpred194_Php_fragment", 272);
		var retval = new Antlr3CstNode("synpred194_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:105: ( Function )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:105: Function
			{
			DebugLocation(428, 105);
			Match(input,Function,Follow._Function_in_synpred194_Php2281); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred194_Php_fragment", 272);
			LeaveRule("synpred194_Php_fragment", 272);
			LeaveRule_synpred194_Php_fragment();
		}
	}
	// $ANTLR end synpred194_Php

	partial void EnterRule_synpred201_Php_fragment();
	partial void LeaveRule_synpred201_Php_fragment();

	// $ANTLR start synpred201_Php
	private void synpred201_Php_fragment()
	{
		EnterRule_synpred201_Php_fragment();
		EnterRule("synpred201_Php_fragment", 279);
		var retval = new Antlr3CstNode("synpred201_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:154: ( Static )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:154: Static
			{
			DebugLocation(428, 154);
			Match(input,Static,Follow._Static_in_synpred201_Php2295); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred201_Php_fragment", 279);
			LeaveRule("synpred201_Php_fragment", 279);
			LeaveRule_synpred201_Php_fragment();
		}
	}
	// $ANTLR end synpred201_Php

	partial void EnterRule_synpred206_Php_fragment();
	partial void LeaveRule_synpred206_Php_fragment();

	// $ANTLR start synpred206_Php
	private void synpred206_Php_fragment()
	{
		EnterRule_synpred206_Php_fragment();
		EnterRule("synpred206_Php_fragment", 284);
		var retval = new Antlr3CstNode("synpred206_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:183: ( Null )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:183: Null
			{
			DebugLocation(428, 183);
			Match(input,Null,Follow._Null_in_synpred206_Php2305); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred206_Php_fragment", 284);
			LeaveRule("synpred206_Php_fragment", 284);
			LeaveRule_synpred206_Php_fragment();
		}
	}
	// $ANTLR end synpred206_Php

	partial void EnterRule_synpred207_Php_fragment();
	partial void LeaveRule_synpred207_Php_fragment();

	// $ANTLR start synpred207_Php
	private void synpred207_Php_fragment()
	{
		EnterRule_synpred207_Php_fragment();
		EnterRule("synpred207_Php_fragment", 285);
		var retval = new Antlr3CstNode("synpred207_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:188: ( List )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:188: List
			{
			DebugLocation(428, 188);
			Match(input,List,Follow._List_in_synpred207_Php2307); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred207_Php_fragment", 285);
			LeaveRule("synpred207_Php_fragment", 285);
			LeaveRule_synpred207_Php_fragment();
		}
	}
	// $ANTLR end synpred207_Php

	partial void EnterRule_synpred217_Php_fragment();
	partial void LeaveRule_synpred217_Php_fragment();

	// $ANTLR start synpred217_Php
	private void synpred217_Php_fragment()
	{
		EnterRule_synpred217_Php_fragment();
		EnterRule("synpred217_Php_fragment", 295);
		var retval = new Antlr3CstNode("synpred217_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:254: ( Require )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:254: Require
			{
			DebugLocation(428, 254);
			Match(input,Require,Follow._Require_in_synpred217_Php2327); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred217_Php_fragment", 295);
			LeaveRule("synpred217_Php_fragment", 295);
			LeaveRule_synpred217_Php_fragment();
		}
	}
	// $ANTLR end synpred217_Php

	partial void EnterRule_synpred218_Php_fragment();
	partial void LeaveRule_synpred218_Php_fragment();

	// $ANTLR start synpred218_Php
	private void synpred218_Php_fragment()
	{
		EnterRule_synpred218_Php_fragment();
		EnterRule("synpred218_Php_fragment", 296);
		var retval = new Antlr3CstNode("synpred218_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:262: ( RequireOnce )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:262: RequireOnce
			{
			DebugLocation(428, 262);
			Match(input,RequireOnce,Follow._RequireOnce_in_synpred218_Php2329); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred218_Php_fragment", 296);
			LeaveRule("synpred218_Php_fragment", 296);
			LeaveRule_synpred218_Php_fragment();
		}
	}
	// $ANTLR end synpred218_Php

	partial void EnterRule_synpred219_Php_fragment();
	partial void LeaveRule_synpred219_Php_fragment();

	// $ANTLR start synpred219_Php
	private void synpred219_Php_fragment()
	{
		EnterRule_synpred219_Php_fragment();
		EnterRule("synpred219_Php_fragment", 297);
		var retval = new Antlr3CstNode("synpred219_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:274: ( Include )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:274: Include
			{
			DebugLocation(428, 274);
			Match(input,Include,Follow._Include_in_synpred219_Php2331); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred219_Php_fragment", 297);
			LeaveRule("synpred219_Php_fragment", 297);
			LeaveRule_synpred219_Php_fragment();
		}
	}
	// $ANTLR end synpred219_Php

	partial void EnterRule_synpred220_Php_fragment();
	partial void LeaveRule_synpred220_Php_fragment();

	// $ANTLR start synpred220_Php
	private void synpred220_Php_fragment()
	{
		EnterRule_synpred220_Php_fragment();
		EnterRule("synpred220_Php_fragment", 298);
		var retval = new Antlr3CstNode("synpred220_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:282: ( IncludeOnce )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:282: IncludeOnce
			{
			DebugLocation(428, 282);
			Match(input,IncludeOnce,Follow._IncludeOnce_in_synpred220_Php2333); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred220_Php_fragment", 298);
			LeaveRule("synpred220_Php_fragment", 298);
			LeaveRule_synpred220_Php_fragment();
		}
	}
	// $ANTLR end synpred220_Php

	partial void EnterRule_synpred224_Php_fragment();
	partial void LeaveRule_synpred224_Php_fragment();

	// $ANTLR start synpred224_Php
	private void synpred224_Php_fragment()
	{
		EnterRule_synpred224_Php_fragment();
		EnterRule("synpred224_Php_fragment", 302);
		var retval = new Antlr3CstNode("synpred224_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:319: ( True )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:319: True
			{
			DebugLocation(428, 319);
			Match(input,True,Follow._True_in_synpred224_Php2341); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred224_Php_fragment", 302);
			LeaveRule("synpred224_Php_fragment", 302);
			LeaveRule_synpred224_Php_fragment();
		}
	}
	// $ANTLR end synpred224_Php

	partial void EnterRule_synpred225_Php_fragment();
	partial void LeaveRule_synpred225_Php_fragment();

	// $ANTLR start synpred225_Php
	private void synpred225_Php_fragment()
	{
		EnterRule_synpred225_Php_fragment();
		EnterRule("synpred225_Php_fragment", 303);
		var retval = new Antlr3CstNode("synpred225_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:324: ( False )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:324: False
			{
			DebugLocation(428, 324);
			Match(input,False,Follow._False_in_synpred225_Php2343); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred225_Php_fragment", 303);
			LeaveRule("synpred225_Php_fragment", 303);
			LeaveRule_synpred225_Php_fragment();
		}
	}
	// $ANTLR end synpred225_Php

	partial void EnterRule_synpred226_Php_fragment();
	partial void LeaveRule_synpred226_Php_fragment();

	// $ANTLR start synpred226_Php
	private void synpred226_Php_fragment()
	{
		EnterRule_synpred226_Php_fragment();
		EnterRule("synpred226_Php_fragment", 304);
		var retval = new Antlr3CstNode("synpred226_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:330: ( HaltCompiler )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:330: HaltCompiler
			{
			DebugLocation(428, 330);
			Match(input,HaltCompiler,Follow._HaltCompiler_in_synpred226_Php2345); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred226_Php_fragment", 304);
			LeaveRule("synpred226_Php_fragment", 304);
			LeaveRule_synpred226_Php_fragment();
		}
	}
	// $ANTLR end synpred226_Php

	partial void EnterRule_synpred227_Php_fragment();
	partial void LeaveRule_synpred227_Php_fragment();

	// $ANTLR start synpred227_Php
	private void synpred227_Php_fragment()
	{
		EnterRule_synpred227_Php_fragment();
		EnterRule("synpred227_Php_fragment", 305);
		var retval = new Antlr3CstNode("synpred227_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:343: ( Die )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:343: Die
			{
			DebugLocation(428, 343);
			Match(input,Die,Follow._Die_in_synpred227_Php2347); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred227_Php_fragment", 305);
			LeaveRule("synpred227_Php_fragment", 305);
			LeaveRule_synpred227_Php_fragment();
		}
	}
	// $ANTLR end synpred227_Php

	partial void EnterRule_synpred228_Php_fragment();
	partial void LeaveRule_synpred228_Php_fragment();

	// $ANTLR start synpred228_Php
	private void synpred228_Php_fragment()
	{
		EnterRule_synpred228_Php_fragment();
		EnterRule("synpred228_Php_fragment", 306);
		var retval = new Antlr3CstNode("synpred228_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:347: ( Empty )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:347: Empty
			{
			DebugLocation(428, 347);
			Match(input,Empty,Follow._Empty_in_synpred228_Php2349); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred228_Php_fragment", 306);
			LeaveRule("synpred228_Php_fragment", 306);
			LeaveRule_synpred228_Php_fragment();
		}
	}
	// $ANTLR end synpred228_Php

	partial void EnterRule_synpred229_Php_fragment();
	partial void LeaveRule_synpred229_Php_fragment();

	// $ANTLR start synpred229_Php
	private void synpred229_Php_fragment()
	{
		EnterRule_synpred229_Php_fragment();
		EnterRule("synpred229_Php_fragment", 307);
		var retval = new Antlr3CstNode("synpred229_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:353: ( Exit )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:353: Exit
			{
			DebugLocation(428, 353);
			Match(input,Exit,Follow._Exit_in_synpred229_Php2351); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred229_Php_fragment", 307);
			LeaveRule("synpred229_Php_fragment", 307);
			LeaveRule_synpred229_Php_fragment();
		}
	}
	// $ANTLR end synpred229_Php

	partial void EnterRule_synpred230_Php_fragment();
	partial void LeaveRule_synpred230_Php_fragment();

	// $ANTLR start synpred230_Php
	private void synpred230_Php_fragment()
	{
		EnterRule_synpred230_Php_fragment();
		EnterRule("synpred230_Php_fragment", 308);
		var retval = new Antlr3CstNode("synpred230_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:358: ( Eval )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:358: Eval
			{
			DebugLocation(428, 358);
			Match(input,Eval,Follow._Eval_in_synpred230_Php2353); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred230_Php_fragment", 308);
			LeaveRule("synpred230_Php_fragment", 308);
			LeaveRule_synpred230_Php_fragment();
		}
	}
	// $ANTLR end synpred230_Php

	partial void EnterRule_synpred231_Php_fragment();
	partial void LeaveRule_synpred231_Php_fragment();

	// $ANTLR start synpred231_Php
	private void synpred231_Php_fragment()
	{
		EnterRule_synpred231_Php_fragment();
		EnterRule("synpred231_Php_fragment", 309);
		var retval = new Antlr3CstNode("synpred231_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:363: ( Isset )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:363: Isset
			{
			DebugLocation(428, 363);
			Match(input,Isset,Follow._Isset_in_synpred231_Php2355); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred231_Php_fragment", 309);
			LeaveRule("synpred231_Php_fragment", 309);
			LeaveRule_synpred231_Php_fragment();
		}
	}
	// $ANTLR end synpred231_Php

	partial void EnterRule_synpred232_Php_fragment();
	partial void LeaveRule_synpred232_Php_fragment();

	// $ANTLR start synpred232_Php
	private void synpred232_Php_fragment()
	{
		EnterRule_synpred232_Php_fragment();
		EnterRule("synpred232_Php_fragment", 310);
		var retval = new Antlr3CstNode("synpred232_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:6: ( IntType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:6: IntType
			{
			DebugLocation(429, 6);
			Match(input,IntType,Follow._IntType_in_synpred232_Php2362); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred232_Php_fragment", 310);
			LeaveRule("synpred232_Php_fragment", 310);
			LeaveRule_synpred232_Php_fragment();
		}
	}
	// $ANTLR end synpred232_Php

	partial void EnterRule_synpred233_Php_fragment();
	partial void LeaveRule_synpred233_Php_fragment();

	// $ANTLR start synpred233_Php
	private void synpred233_Php_fragment()
	{
		EnterRule_synpred233_Php_fragment();
		EnterRule("synpred233_Php_fragment", 311);
		var retval = new Antlr3CstNode("synpred233_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:16: ( IntegerType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:16: IntegerType
			{
			DebugLocation(429, 16);
			Match(input,IntegerType,Follow._IntegerType_in_synpred233_Php2366); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred233_Php_fragment", 311);
			LeaveRule("synpred233_Php_fragment", 311);
			LeaveRule_synpred233_Php_fragment();
		}
	}
	// $ANTLR end synpred233_Php

	partial void EnterRule_synpred234_Php_fragment();
	partial void LeaveRule_synpred234_Php_fragment();

	// $ANTLR start synpred234_Php
	private void synpred234_Php_fragment()
	{
		EnterRule_synpred234_Php_fragment();
		EnterRule("synpred234_Php_fragment", 312);
		var retval = new Antlr3CstNode("synpred234_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:30: ( BoolType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:30: BoolType
			{
			DebugLocation(429, 30);
			Match(input,BoolType,Follow._BoolType_in_synpred234_Php2370); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred234_Php_fragment", 312);
			LeaveRule("synpred234_Php_fragment", 312);
			LeaveRule_synpred234_Php_fragment();
		}
	}
	// $ANTLR end synpred234_Php

	partial void EnterRule_synpred235_Php_fragment();
	partial void LeaveRule_synpred235_Php_fragment();

	// $ANTLR start synpred235_Php
	private void synpred235_Php_fragment()
	{
		EnterRule_synpred235_Php_fragment();
		EnterRule("synpred235_Php_fragment", 313);
		var retval = new Antlr3CstNode("synpred235_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:41: ( BooleanType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:41: BooleanType
			{
			DebugLocation(429, 41);
			Match(input,BooleanType,Follow._BooleanType_in_synpred235_Php2374); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred235_Php_fragment", 313);
			LeaveRule("synpred235_Php_fragment", 313);
			LeaveRule_synpred235_Php_fragment();
		}
	}
	// $ANTLR end synpred235_Php

	partial void EnterRule_synpred236_Php_fragment();
	partial void LeaveRule_synpred236_Php_fragment();

	// $ANTLR start synpred236_Php
	private void synpred236_Php_fragment()
	{
		EnterRule_synpred236_Php_fragment();
		EnterRule("synpred236_Php_fragment", 314);
		var retval = new Antlr3CstNode("synpred236_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:55: ( FloatType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:55: FloatType
			{
			DebugLocation(429, 55);
			Match(input,FloatType,Follow._FloatType_in_synpred236_Php2378); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred236_Php_fragment", 314);
			LeaveRule("synpred236_Php_fragment", 314);
			LeaveRule_synpred236_Php_fragment();
		}
	}
	// $ANTLR end synpred236_Php

	partial void EnterRule_synpred237_Php_fragment();
	partial void LeaveRule_synpred237_Php_fragment();

	// $ANTLR start synpred237_Php
	private void synpred237_Php_fragment()
	{
		EnterRule_synpred237_Php_fragment();
		EnterRule("synpred237_Php_fragment", 315);
		var retval = new Antlr3CstNode("synpred237_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:67: ( DoubleType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:67: DoubleType
			{
			DebugLocation(429, 67);
			Match(input,DoubleType,Follow._DoubleType_in_synpred237_Php2382); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred237_Php_fragment", 315);
			LeaveRule("synpred237_Php_fragment", 315);
			LeaveRule_synpred237_Php_fragment();
		}
	}
	// $ANTLR end synpred237_Php

	partial void EnterRule_synpred238_Php_fragment();
	partial void LeaveRule_synpred238_Php_fragment();

	// $ANTLR start synpred238_Php
	private void synpred238_Php_fragment()
	{
		EnterRule_synpred238_Php_fragment();
		EnterRule("synpred238_Php_fragment", 316);
		var retval = new Antlr3CstNode("synpred238_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:430:6: ( RealType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:430:6: RealType
			{
			DebugLocation(430, 6);
			Match(input,RealType,Follow._RealType_in_synpred238_Php2389); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred238_Php_fragment", 316);
			LeaveRule("synpred238_Php_fragment", 316);
			LeaveRule_synpred238_Php_fragment();
		}
	}
	// $ANTLR end synpred238_Php

	partial void EnterRule_synpred239_Php_fragment();
	partial void LeaveRule_synpred239_Php_fragment();

	// $ANTLR start synpred239_Php
	private void synpred239_Php_fragment()
	{
		EnterRule_synpred239_Php_fragment();
		EnterRule("synpred239_Php_fragment", 317);
		var retval = new Antlr3CstNode("synpred239_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:430:17: ( StringType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:430:17: StringType
			{
			DebugLocation(430, 17);
			Match(input,StringType,Follow._StringType_in_synpred239_Php2393); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred239_Php_fragment", 317);
			LeaveRule("synpred239_Php_fragment", 317);
			LeaveRule_synpred239_Php_fragment();
		}
	}
	// $ANTLR end synpred239_Php

	partial void EnterRule_synpred240_Php_fragment();
	partial void LeaveRule_synpred240_Php_fragment();

	// $ANTLR start synpred240_Php
	private void synpred240_Php_fragment()
	{
		EnterRule_synpred240_Php_fragment();
		EnterRule("synpred240_Php_fragment", 318);
		var retval = new Antlr3CstNode("synpred240_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:29: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:29: functionArguments
			{
			DebugLocation(435, 29);
			PushFollow(Follow._functionArguments_in_synpred240_Php2415);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred240_Php_fragment", 318);
			LeaveRule("synpred240_Php_fragment", 318);
			LeaveRule_synpred240_Php_fragment();
		}
	}
	// $ANTLR end synpred240_Php

	partial void EnterRule_synpred241_Php_fragment();
	partial void LeaveRule_synpred241_Php_fragment();

	// $ANTLR start synpred241_Php
	private void synpred241_Php_fragment()
	{
		EnterRule_synpred241_Php_fragment();
		EnterRule("synpred241_Php_fragment", 319);
		var retval = new Antlr3CstNode("synpred241_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:49: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:49: indexer
			{
			DebugLocation(435, 49);
			PushFollow(Follow._indexer_in_synpred241_Php2419);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred241_Php_fragment", 319);
			LeaveRule("synpred241_Php_fragment", 319);
			LeaveRule_synpred241_Php_fragment();
		}
	}
	// $ANTLR end synpred241_Php

	partial void EnterRule_synpred242_Php_fragment();
	partial void LeaveRule_synpred242_Php_fragment();

	// $ANTLR start synpred242_Php
	private void synpred242_Php_fragment()
	{
		EnterRule_synpred242_Php_fragment();
		EnterRule("synpred242_Php_fragment", 320);
		var retval = new Antlr3CstNode("synpred242_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:72: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:72: functionArguments
			{
			DebugLocation(435, 72);
			PushFollow(Follow._functionArguments_in_synpred242_Php2425);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred242_Php_fragment", 320);
			LeaveRule("synpred242_Php_fragment", 320);
			LeaveRule_synpred242_Php_fragment();
		}
	}
	// $ANTLR end synpred242_Php

	partial void EnterRule_synpred243_Php_fragment();
	partial void LeaveRule_synpred243_Php_fragment();

	// $ANTLR start synpred243_Php
	private void synpred243_Php_fragment()
	{
		EnterRule_synpred243_Php_fragment();
		EnterRule("synpred243_Php_fragment", 321);
		var retval = new Antlr3CstNode("synpred243_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:59: ( memberAccess ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:59: memberAccess ( functionArguments )?
			{
			DebugLocation(435, 59);
			PushFollow(Follow._memberAccess_in_synpred243_Php2423);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(435, 72);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:72: ( functionArguments )?
			int alt175=2;
			try { DebugEnterSubRule(175);
			try { DebugEnterDecision(175, false);
			int LA175_1 = input.LA(1);

			if ((LA175_1==OpenRoundBracket))
			{
				alt175 = 1;
			}
			} finally { DebugExitDecision(175); }
			switch (alt175)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:72: functionArguments
				{
				DebugLocation(435, 72);
				PushFollow(Follow._functionArguments_in_synpred243_Php2425);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(175); }


			}

		}
		finally
		{
			TraceOut("synpred243_Php_fragment", 321);
			LeaveRule("synpred243_Php_fragment", 321);
			LeaveRule_synpred243_Php_fragment();
		}
	}
	// $ANTLR end synpred243_Php

	partial void EnterRule_synpred244_Php_fragment();
	partial void LeaveRule_synpred244_Php_fragment();

	// $ANTLR start synpred244_Php
	private void synpred244_Php_fragment()
	{
		EnterRule_synpred244_Php_fragment();
		EnterRule("synpred244_Php_fragment", 322);
		var retval = new Antlr3CstNode("synpred244_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:4: ( variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:4: variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )*
			{
			DebugLocation(435, 4);
			PushFollow(Follow._variableOrStaticAccessor_in_synpred244_Php2413);
			variableOrStaticAccessor();
			PopFollow();
			if (state.failed) return;
			DebugLocation(435, 29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:29: ( functionArguments )?
			int alt176=2;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			int LA176_1 = input.LA(1);

			if ((LA176_1==OpenRoundBracket))
			{
				alt176 = 1;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:29: functionArguments
				{
				DebugLocation(435, 29);
				PushFollow(Follow._functionArguments_in_synpred244_Php2415);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(176); }

			DebugLocation(435, 48);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:48: ( indexer | memberAccess ( functionArguments )? )*
			try { DebugEnterSubRule(178);
			while (true)
			{
				int alt178=3;
				try { DebugEnterDecision(178, false);
				int LA178_1 = input.LA(1);

				if ((LA178_1==OpenCurlyBracket||LA178_1==OpenSquareBracket))
				{
					alt178 = 1;
				}
				else if ((LA178_1==InstanceMember))
				{
					alt178 = 2;
				}


				} finally { DebugExitDecision(178); }
				switch ( alt178 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:49: indexer
					{
					DebugLocation(435, 49);
					PushFollow(Follow._indexer_in_synpred244_Php2419);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:59: memberAccess ( functionArguments )?
					{
					DebugLocation(435, 59);
					PushFollow(Follow._memberAccess_in_synpred244_Php2423);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(435, 72);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:72: ( functionArguments )?
					int alt177=2;
					try { DebugEnterSubRule(177);
					try { DebugEnterDecision(177, false);
					int LA177_1 = input.LA(1);

					if ((LA177_1==OpenRoundBracket))
					{
						alt177 = 1;
					}
					} finally { DebugExitDecision(177); }
					switch (alt177)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:72: functionArguments
						{
						DebugLocation(435, 72);
						PushFollow(Follow._functionArguments_in_synpred244_Php2425);
						functionArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(177); }


					}
					break;

				default:
					goto loop178;
				}
			}

			loop178:
				;

			} finally { DebugExitSubRule(178); }


			}

		}
		finally
		{
			TraceOut("synpred244_Php_fragment", 322);
			LeaveRule("synpred244_Php_fragment", 322);
			LeaveRule_synpred244_Php_fragment();
		}
	}
	// $ANTLR end synpred244_Php

	partial void EnterRule_synpred245_Php_fragment();
	partial void LeaveRule_synpred245_Php_fragment();

	// $ANTLR start synpred245_Php
	private void synpred245_Php_fragment()
	{
		EnterRule_synpred245_Php_fragment();
		EnterRule("synpred245_Php_fragment", 323);
		var retval = new Antlr3CstNode("synpred245_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:48: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:48: indexer
			{
			DebugLocation(436, 48);
			PushFollow(Follow._indexer_in_synpred245_Php2438);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred245_Php_fragment", 323);
			LeaveRule("synpred245_Php_fragment", 323);
			LeaveRule_synpred245_Php_fragment();
		}
	}
	// $ANTLR end synpred245_Php

	partial void EnterRule_synpred246_Php_fragment();
	partial void LeaveRule_synpred246_Php_fragment();

	// $ANTLR start synpred246_Php
	private void synpred246_Php_fragment()
	{
		EnterRule_synpred246_Php_fragment();
		EnterRule("synpred246_Php_fragment", 324);
		var retval = new Antlr3CstNode("synpred246_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:71: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:71: functionArguments
			{
			DebugLocation(436, 71);
			PushFollow(Follow._functionArguments_in_synpred246_Php2444);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred246_Php_fragment", 324);
			LeaveRule("synpred246_Php_fragment", 324);
			LeaveRule_synpred246_Php_fragment();
		}
	}
	// $ANTLR end synpred246_Php

	partial void EnterRule_synpred247_Php_fragment();
	partial void LeaveRule_synpred247_Php_fragment();

	// $ANTLR start synpred247_Php
	private void synpred247_Php_fragment()
	{
		EnterRule_synpred247_Php_fragment();
		EnterRule("synpred247_Php_fragment", 325);
		var retval = new Antlr3CstNode("synpred247_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:58: ( memberAccess ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:58: memberAccess ( functionArguments )?
			{
			DebugLocation(436, 58);
			PushFollow(Follow._memberAccess_in_synpred247_Php2442);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(436, 71);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:71: ( functionArguments )?
			int alt179=2;
			try { DebugEnterSubRule(179);
			try { DebugEnterDecision(179, false);
			int LA179_1 = input.LA(1);

			if ((LA179_1==OpenRoundBracket))
			{
				alt179 = 1;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:71: functionArguments
				{
				DebugLocation(436, 71);
				PushFollow(Follow._functionArguments_in_synpred247_Php2444);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(179); }


			}

		}
		finally
		{
			TraceOut("synpred247_Php_fragment", 325);
			LeaveRule("synpred247_Php_fragment", 325);
			LeaveRule_synpred247_Php_fragment();
		}
	}
	// $ANTLR end synpred247_Php

	partial void EnterRule_synpred248_Php_fragment();
	partial void LeaveRule_synpred248_Php_fragment();

	// $ANTLR start synpred248_Php
	private void synpred248_Php_fragment()
	{
		EnterRule_synpred248_Php_fragment();
		EnterRule("synpred248_Php_fragment", 326);
		var retval = new Antlr3CstNode("synpred248_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:4: ( constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:4: constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )*
			{
			DebugLocation(436, 4);
			PushFollow(Follow._constantOrStaticAccessor_in_synpred248_Php2433);
			constantOrStaticAccessor();
			PopFollow();
			if (state.failed) return;
			DebugLocation(436, 29);
			PushFollow(Follow._functionArguments_in_synpred248_Php2435);
			functionArguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(436, 47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:47: ( indexer | memberAccess ( functionArguments )? )*
			try { DebugEnterSubRule(181);
			while (true)
			{
				int alt181=3;
				try { DebugEnterDecision(181, false);
				int LA181_1 = input.LA(1);

				if ((LA181_1==OpenCurlyBracket||LA181_1==OpenSquareBracket))
				{
					alt181 = 1;
				}
				else if ((LA181_1==InstanceMember))
				{
					alt181 = 2;
				}


				} finally { DebugExitDecision(181); }
				switch ( alt181 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:48: indexer
					{
					DebugLocation(436, 48);
					PushFollow(Follow._indexer_in_synpred248_Php2438);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:58: memberAccess ( functionArguments )?
					{
					DebugLocation(436, 58);
					PushFollow(Follow._memberAccess_in_synpred248_Php2442);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(436, 71);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:71: ( functionArguments )?
					int alt180=2;
					try { DebugEnterSubRule(180);
					try { DebugEnterDecision(180, false);
					int LA180_1 = input.LA(1);

					if ((LA180_1==OpenRoundBracket))
					{
						alt180 = 1;
					}
					} finally { DebugExitDecision(180); }
					switch (alt180)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:71: functionArguments
						{
						DebugLocation(436, 71);
						PushFollow(Follow._functionArguments_in_synpred248_Php2444);
						functionArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(180); }


					}
					break;

				default:
					goto loop181;
				}
			}

			loop181:
				;

			} finally { DebugExitSubRule(181); }


			}

		}
		finally
		{
			TraceOut("synpred248_Php_fragment", 326);
			LeaveRule("synpred248_Php_fragment", 326);
			LeaveRule_synpred248_Php_fragment();
		}
	}
	// $ANTLR end synpred248_Php

	partial void EnterRule_synpred249_Php_fragment();
	partial void LeaveRule_synpred249_Php_fragment();

	// $ANTLR start synpred249_Php
	private void synpred249_Php_fragment()
	{
		EnterRule_synpred249_Php_fragment();
		EnterRule("synpred249_Php_fragment", 327);
		var retval = new Antlr3CstNode("synpred249_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:30: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:30: indexer
			{
			DebugLocation(437, 30);
			PushFollow(Follow._indexer_in_synpred249_Php2455);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred249_Php_fragment", 327);
			LeaveRule("synpred249_Php_fragment", 327);
			LeaveRule_synpred249_Php_fragment();
		}
	}
	// $ANTLR end synpred249_Php

	partial void EnterRule_synpred250_Php_fragment();
	partial void LeaveRule_synpred250_Php_fragment();

	// $ANTLR start synpred250_Php
	private void synpred250_Php_fragment()
	{
		EnterRule_synpred250_Php_fragment();
		EnterRule("synpred250_Php_fragment", 328);
		var retval = new Antlr3CstNode("synpred250_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:53: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:53: functionArguments
			{
			DebugLocation(437, 53);
			PushFollow(Follow._functionArguments_in_synpred250_Php2461);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred250_Php_fragment", 328);
			LeaveRule("synpred250_Php_fragment", 328);
			LeaveRule_synpred250_Php_fragment();
		}
	}
	// $ANTLR end synpred250_Php

	partial void EnterRule_synpred251_Php_fragment();
	partial void LeaveRule_synpred251_Php_fragment();

	// $ANTLR start synpred251_Php
	private void synpred251_Php_fragment()
	{
		EnterRule_synpred251_Php_fragment();
		EnterRule("synpred251_Php_fragment", 329);
		var retval = new Antlr3CstNode("synpred251_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:40: ( memberAccess ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:40: memberAccess ( functionArguments )?
			{
			DebugLocation(437, 40);
			PushFollow(Follow._memberAccess_in_synpred251_Php2459);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(437, 53);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:53: ( functionArguments )?
			int alt182=2;
			try { DebugEnterSubRule(182);
			try { DebugEnterDecision(182, false);
			int LA182_1 = input.LA(1);

			if ((LA182_1==OpenRoundBracket))
			{
				alt182 = 1;
			}
			} finally { DebugExitDecision(182); }
			switch (alt182)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:53: functionArguments
				{
				DebugLocation(437, 53);
				PushFollow(Follow._functionArguments_in_synpred251_Php2461);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(182); }


			}

		}
		finally
		{
			TraceOut("synpred251_Php_fragment", 329);
			LeaveRule("synpred251_Php_fragment", 329);
			LeaveRule_synpred251_Php_fragment();
		}
	}
	// $ANTLR end synpred251_Php

	partial void EnterRule_synpred252_Php_fragment();
	partial void LeaveRule_synpred252_Php_fragment();

	// $ANTLR start synpred252_Php
	private void synpred252_Php_fragment()
	{
		EnterRule_synpred252_Php_fragment();
		EnterRule("synpred252_Php_fragment", 330);
		var retval = new Antlr3CstNode("synpred252_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:4: ( constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:4: constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+
			{
			DebugLocation(437, 4);
			PushFollow(Follow._constantOrStaticAccessor_in_synpred252_Php2452);
			constantOrStaticAccessor();
			PopFollow();
			if (state.failed) return;
			DebugLocation(437, 29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:29: ( indexer | memberAccess ( functionArguments )? )+
			int cnt184=0;
			try { DebugEnterSubRule(184);
			while (true)
			{
				int alt184=3;
				try { DebugEnterDecision(184, false);
				int LA184_1 = input.LA(1);

				if ((LA184_1==OpenCurlyBracket||LA184_1==OpenSquareBracket))
				{
					alt184 = 1;
				}
				else if ((LA184_1==InstanceMember))
				{
					alt184 = 2;
				}


				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:30: indexer
					{
					DebugLocation(437, 30);
					PushFollow(Follow._indexer_in_synpred252_Php2455);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:40: memberAccess ( functionArguments )?
					{
					DebugLocation(437, 40);
					PushFollow(Follow._memberAccess_in_synpred252_Php2459);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(437, 53);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:53: ( functionArguments )?
					int alt183=2;
					try { DebugEnterSubRule(183);
					try { DebugEnterDecision(183, false);
					int LA183_1 = input.LA(1);

					if ((LA183_1==OpenRoundBracket))
					{
						alt183 = 1;
					}
					} finally { DebugExitDecision(183); }
					switch (alt183)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:53: functionArguments
						{
						DebugLocation(437, 53);
						PushFollow(Follow._functionArguments_in_synpred252_Php2461);
						functionArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(183); }


					}
					break;

				default:
					if (cnt184 >= 1)
						goto loop184;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee184 = new EarlyExitException( 184, input );
					DebugRecognitionException(eee184);
					throw eee184;
				}
				cnt184++;
			}
			loop184:
				;

			} finally { DebugExitSubRule(184); }


			}

		}
		finally
		{
			TraceOut("synpred252_Php_fragment", 330);
			LeaveRule("synpred252_Php_fragment", 330);
			LeaveRule_synpred252_Php_fragment();
		}
	}
	// $ANTLR end synpred252_Php

	partial void EnterRule_synpred253_Php_fragment();
	partial void LeaveRule_synpred253_Php_fragment();

	// $ANTLR start synpred253_Php
	private void synpred253_Php_fragment()
	{
		EnterRule_synpred253_Php_fragment();
		EnterRule("synpred253_Php_fragment", 331);
		var retval = new Antlr3CstNode("synpred253_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:438:27: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:438:27: functionArguments
			{
			DebugLocation(438, 27);
			PushFollow(Follow._functionArguments_in_synpred253_Php2471);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred253_Php_fragment", 331);
			LeaveRule("synpred253_Php_fragment", 331);
			LeaveRule_synpred253_Php_fragment();
		}
	}
	// $ANTLR end synpred253_Php

	partial void EnterRule_synpred254_Php_fragment();
	partial void LeaveRule_synpred254_Php_fragment();

	// $ANTLR start synpred254_Php
	private void synpred254_Php_fragment()
	{
		EnterRule_synpred254_Php_fragment();
		EnterRule("synpred254_Php_fragment", 332);
		var retval = new Antlr3CstNode("synpred254_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:5: ( variableOrStaticAccessor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:5: variableOrStaticAccessor
			{
			DebugLocation(446, 5);
			PushFollow(Follow._variableOrStaticAccessor_in_synpred254_Php2492);
			variableOrStaticAccessor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred254_Php_fragment", 332);
			LeaveRule("synpred254_Php_fragment", 332);
			LeaveRule_synpred254_Php_fragment();
		}
	}
	// $ANTLR end synpred254_Php

	partial void EnterRule_synpred257_Php_fragment();
	partial void LeaveRule_synpred257_Php_fragment();

	// $ANTLR start synpred257_Php
	private void synpred257_Php_fragment()
	{
		EnterRule_synpred257_Php_fragment();
		EnterRule("synpred257_Php_fragment", 335);
		var retval = new Antlr3CstNode("synpred257_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:16: ( memberAccess )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:16: memberAccess
			{
			DebugLocation(448, 16);
			PushFollow(Follow._memberAccess_in_synpred257_Php2514);
			memberAccess();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred257_Php_fragment", 335);
			LeaveRule("synpred257_Php_fragment", 335);
			LeaveRule_synpred257_Php_fragment();
		}
	}
	// $ANTLR end synpred257_Php

	partial void EnterRule_synpred258_Php_fragment();
	partial void LeaveRule_synpred258_Php_fragment();

	// $ANTLR start synpred258_Php
	private void synpred258_Php_fragment()
	{
		EnterRule_synpred258_Php_fragment();
		EnterRule("synpred258_Php_fragment", 336);
		var retval = new Antlr3CstNode("synpred258_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:5: ( ( indexer | memberAccess )* memberAccess functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:5: ( indexer | memberAccess )* memberAccess functionArguments
			{
			DebugLocation(448, 5);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:5: ( indexer | memberAccess )*
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=3;
				try { DebugEnterDecision(185, false);
				int LA185_1 = input.LA(1);

				if ((LA185_1==InstanceMember))
				{
					int LA185_2 = input.LA(2);

					if ((EvaluatePredicate(synpred257_Php_fragment)))
					{
						alt185 = 2;
					}


				}
				else if ((LA185_1==OpenCurlyBracket||LA185_1==OpenSquareBracket))
				{
					alt185 = 1;
				}


				} finally { DebugExitDecision(185); }
				switch ( alt185 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:6: indexer
					{
					DebugLocation(448, 6);
					PushFollow(Follow._indexer_in_synpred258_Php2510);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:16: memberAccess
					{
					DebugLocation(448, 16);
					PushFollow(Follow._memberAccess_in_synpred258_Php2514);
					memberAccess();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop185;
				}
			}

			loop185:
				;

			} finally { DebugExitSubRule(185); }

			DebugLocation(448, 31);
			PushFollow(Follow._memberAccess_in_synpred258_Php2518);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(448, 44);
			PushFollow(Follow._functionArguments_in_synpred258_Php2520);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred258_Php_fragment", 336);
			LeaveRule("synpred258_Php_fragment", 336);
			LeaveRule_synpred258_Php_fragment();
		}
	}
	// $ANTLR end synpred258_Php

	partial void EnterRule_synpred259_Php_fragment();
	partial void LeaveRule_synpred259_Php_fragment();

	// $ANTLR start synpred259_Php
	private void synpred259_Php_fragment()
	{
		EnterRule_synpred259_Php_fragment();
		EnterRule("synpred259_Php_fragment", 337);
		var retval = new Antlr3CstNode("synpred259_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:449:5: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:449:5: indexer
			{
			DebugLocation(449, 5);
			PushFollow(Follow._indexer_in_synpred259_Php2528);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred259_Php_fragment", 337);
			LeaveRule("synpred259_Php_fragment", 337);
			LeaveRule_synpred259_Php_fragment();
		}
	}
	// $ANTLR end synpred259_Php

	partial void EnterRule_synpred260_Php_fragment();
	partial void LeaveRule_synpred260_Php_fragment();

	// $ANTLR start synpred260_Php
	private void synpred260_Php_fragment()
	{
		EnterRule_synpred260_Php_fragment();
		EnterRule("synpred260_Php_fragment", 338);
		var retval = new Antlr3CstNode("synpred260_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:449:15: ( memberAccess )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:449:15: memberAccess
			{
			DebugLocation(449, 15);
			PushFollow(Follow._memberAccess_in_synpred260_Php2532);
			memberAccess();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred260_Php_fragment", 338);
			LeaveRule("synpred260_Php_fragment", 338);
			LeaveRule_synpred260_Php_fragment();
		}
	}
	// $ANTLR end synpred260_Php

	partial void EnterRule_synpred261_Php_fragment();
	partial void LeaveRule_synpred261_Php_fragment();

	// $ANTLR start synpred261_Php
	private void synpred261_Php_fragment()
	{
		EnterRule_synpred261_Php_fragment();
		EnterRule("synpred261_Php_fragment", 339);
		var retval = new Antlr3CstNode("synpred261_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:4: ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:4: ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+
			{
			DebugLocation(446, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:4: ( variableOrStaticAccessor | constantOrStaticAccessor )
			int alt186=2;
			try { DebugEnterSubRule(186);
			try { DebugEnterDecision(186, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA186_2 = input.LA(2);

				if ((EvaluatePredicate(synpred254_Php_fragment)))
				{
					alt186 = 1;
				}
				else if ((true))
				{
					alt186 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 186, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 128:
				{
				int LA186_2 = input.LA(2);

				if ((EvaluatePredicate(synpred254_Php_fragment)))
				{
					alt186 = 1;
				}
				else if ((true))
				{
					alt186 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 186, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA186_2 = input.LA(2);

				if ((EvaluatePredicate(synpred254_Php_fragment)))
				{
					alt186 = 1;
				}
				else if ((true))
				{
					alt186 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 186, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case Static:
			case StringType:
			case UnquotedString:
				{
				int LA186_2 = input.LA(2);

				if ((EvaluatePredicate(synpred254_Php_fragment)))
				{
					alt186 = 1;
				}
				else if ((true))
				{
					alt186 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 186, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 186, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(186); }
			switch (alt186)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:5: variableOrStaticAccessor
				{
				DebugLocation(446, 5);
				PushFollow(Follow._variableOrStaticAccessor_in_synpred261_Php2492);
				variableOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:446:32: constantOrStaticAccessor
				{
				DebugLocation(446, 32);
				PushFollow(Follow._constantOrStaticAccessor_in_synpred261_Php2496);
				constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(186); }

			DebugLocation(447, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:447:4: ( functionArguments )?
			int alt187=2;
			try { DebugEnterSubRule(187);
			try { DebugEnterDecision(187, false);
			int LA187_1 = input.LA(1);

			if ((LA187_1==OpenRoundBracket))
			{
				alt187 = 1;
			}
			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:447:4: functionArguments
				{
				DebugLocation(447, 4);
				PushFollow(Follow._functionArguments_in_synpred261_Php2502);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(187); }

			DebugLocation(448, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:4: ( ( indexer | memberAccess )* memberAccess functionArguments )*
			try { DebugEnterSubRule(189);
			while (true)
			{
				int alt189=2;
				try { DebugEnterDecision(189, false);
				switch (input.LA(1))
				{
				case OpenSquareBracket:
					{
					int LA189_2 = input.LA(2);

					if ((EvaluatePredicate(synpred258_Php_fragment)))
					{
						alt189 = 1;
					}


					}
					break;
				case OpenCurlyBracket:
					{
					int LA189_2 = input.LA(2);

					if ((EvaluatePredicate(synpred258_Php_fragment)))
					{
						alt189 = 1;
					}


					}
					break;
				case InstanceMember:
					{
					int LA189_2 = input.LA(2);

					if ((EvaluatePredicate(synpred258_Php_fragment)))
					{
						alt189 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(189); }
				switch ( alt189 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:5: ( indexer | memberAccess )* memberAccess functionArguments
					{
					DebugLocation(448, 5);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:5: ( indexer | memberAccess )*
					try { DebugEnterSubRule(188);
					while (true)
					{
						int alt188=3;
						try { DebugEnterDecision(188, false);
						int LA188_1 = input.LA(1);

						if ((LA188_1==InstanceMember))
						{
							int LA188_2 = input.LA(2);

							if ((EvaluatePredicate(synpred257_Php_fragment)))
							{
								alt188 = 2;
							}


						}
						else if ((LA188_1==OpenCurlyBracket||LA188_1==OpenSquareBracket))
						{
							alt188 = 1;
						}


						} finally { DebugExitDecision(188); }
						switch ( alt188 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:6: indexer
							{
							DebugLocation(448, 6);
							PushFollow(Follow._indexer_in_synpred261_Php2510);
							indexer();
							PopFollow();
							if (state.failed) return;

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:16: memberAccess
							{
							DebugLocation(448, 16);
							PushFollow(Follow._memberAccess_in_synpred261_Php2514);
							memberAccess();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop188;
						}
					}

					loop188:
						;

					} finally { DebugExitSubRule(188); }

					DebugLocation(448, 31);
					PushFollow(Follow._memberAccess_in_synpred261_Php2518);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(448, 44);
					PushFollow(Follow._functionArguments_in_synpred261_Php2520);
					functionArguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop189;
				}
			}

			loop189:
				;

			} finally { DebugExitSubRule(189); }

			DebugLocation(449, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:449:4: ( indexer | memberAccess )+
			int cnt190=0;
			try { DebugEnterSubRule(190);
			while (true)
			{
				int alt190=3;
				try { DebugEnterDecision(190, false);
				int LA190_1 = input.LA(1);

				if ((LA190_1==OpenCurlyBracket||LA190_1==OpenSquareBracket))
				{
					alt190 = 1;
				}
				else if ((LA190_1==InstanceMember))
				{
					alt190 = 2;
				}


				} finally { DebugExitDecision(190); }
				switch (alt190)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:449:5: indexer
					{
					DebugLocation(449, 5);
					PushFollow(Follow._indexer_in_synpred261_Php2528);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:449:15: memberAccess
					{
					DebugLocation(449, 15);
					PushFollow(Follow._memberAccess_in_synpred261_Php2532);
					memberAccess();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt190 >= 1)
						goto loop190;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee190 = new EarlyExitException( 190, input );
					DebugRecognitionException(eee190);
					throw eee190;
				}
				cnt190++;
			}
			loop190:
				;

			} finally { DebugExitSubRule(190); }


			}

		}
		finally
		{
			TraceOut("synpred261_Php_fragment", 339);
			LeaveRule("synpred261_Php_fragment", 339);
			LeaveRule_synpred261_Php_fragment();
		}
	}
	// $ANTLR end synpred261_Php

	partial void EnterRule_synpred263_Php_fragment();
	partial void LeaveRule_synpred263_Php_fragment();

	// $ANTLR start synpred263_Php
	private void synpred263_Php_fragment()
	{
		EnterRule_synpred263_Php_fragment();
		EnterRule("synpred263_Php_fragment", 341);
		var retval = new Antlr3CstNode("synpred263_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:4: ( ( variable | qualifiedName ) '::' variable )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:4: ( variable | qualifiedName ) '::' variable
			{
			DebugLocation(454, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:4: ( variable | qualifiedName )
			int alt191=2;
			try { DebugEnterSubRule(191);
			try { DebugEnterDecision(191, false);
			int LA191_1 = input.LA(1);

			if ((LA191_1==VariableName||LA191_1==128))
			{
				alt191 = 1;
			}
			else if (((LA191_1>=BoolType && LA191_1<=BooleanType)||LA191_1==DoubleType||LA191_1==FloatType||LA191_1==IntType||LA191_1==IntegerType||LA191_1==ObjectType||LA191_1==RealType||(LA191_1>=Static && LA191_1<=StringType)||LA191_1==UnquotedString||LA191_1==129))
			{
				alt191 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 191, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(191); }
			switch (alt191)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:5: variable
				{
				DebugLocation(454, 5);
				PushFollow(Follow._variable_in_synpred263_Php2551);
				variable();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:16: qualifiedName
				{
				DebugLocation(454, 16);
				PushFollow(Follow._qualifiedName_in_synpred263_Php2555);
				qualifiedName();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(191); }

			DebugLocation(454, 31);
			Match(input,ClassMember,Follow._ClassMember_in_synpred263_Php2558); if (state.failed) return;
			DebugLocation(454, 36);
			PushFollow(Follow._variable_in_synpred263_Php2560);
			variable();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred263_Php_fragment", 341);
			LeaveRule("synpred263_Php_fragment", 341);
			LeaveRule_synpred263_Php_fragment();
		}
	}
	// $ANTLR end synpred263_Php
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA1 dfa1;
	private DFA22 dfa22;
	private DFA110 dfa110;
	private DFA129 dfa129;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa1 = new DFA1( this );
		dfa22 = new DFA22( this );
		dfa110 = new DFA110( this, SpecialStateTransition110 );
		dfa129 = new DFA129( this );
	}

	private class DFA1 : DFA
	{
		private const string DFA1_eotS =
			"\x9\xFFFF";
		private const string DFA1_eofS =
			"\x2\x2\x7\xFFFF";
		private const string DFA1_minS =
			"\x2\x4\x1\xFFFF\x2\x10\x1\x5A\x1\x10\x1\xFFFF\x1\x5A";
		private const string DFA1_maxS =
			"\x2\x81\x1\xFFFF\x1\x81\x1\x77\x1\x81\x1\x77\x1\xFFFF\x1\x81";
		private const string DFA1_acceptS =
			"\x2\xFFFF\x1\x2\x4\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA1_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA1_transitionS =
			{
				"\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\x1\x2\xFFFF\x3\x2\x2\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x3\x2\x2\xFFFF\x1\x2\x4\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1"+
				"\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x2\xFFFF\x6"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x1\x2\x4\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2",
				"\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x2\x2\x2\xFFFF\x3\x2\x2\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x2\x6\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3"+
				"\x2\x2\xFFFF\x1\x2\x4\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x2\xFFFF\x6\x2\x2"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x3\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x1\x2\x4\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2",
				"",
				"\x2\x5\x16\xFFFF\x1\x5\xE\xFFFF\x1\x5\x12\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\xB\xFFFF\x1\x5\xD\xFFFF\x1\x5\x7\xFFFF\x2\x5\x7\xFFFF\x1\x5\x9\xFFFF"+
				"\x1\x4",
				"\x2\x5\x16\xFFFF\x1\x5\xE\xFFFF\x1\x5\x12\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\xB\xFFFF\x1\x5\xD\xFFFF\x1\x5\x7\xFFFF\x2\x5\x7\xFFFF\x1\x5",
				"\x1\x2\xF\xFFFF\x1\x7\x16\xFFFF\x1\x6",
				"\x2\x8\x16\xFFFF\x1\x8\xE\xFFFF\x1\x8\x12\xFFFF\x1\x8\x1\xFFFF\x1\x8"+
				"\xB\xFFFF\x1\x8\xD\xFFFF\x1\x8\x8\xFFFF\x1\x8\x7\xFFFF\x1\x8",
				"",
				"\x1\x2\xF\xFFFF\x1\x7\x16\xFFFF\x1\x6"
			};

		private static readonly short[] DFA1_eot = DFA.UnpackEncodedString(DFA1_eotS);
		private static readonly short[] DFA1_eof = DFA.UnpackEncodedString(DFA1_eofS);
		private static readonly char[] DFA1_min = DFA.UnpackEncodedStringToUnsignedChars(DFA1_minS);
		private static readonly char[] DFA1_max = DFA.UnpackEncodedStringToUnsignedChars(DFA1_maxS);
		private static readonly short[] DFA1_accept = DFA.UnpackEncodedString(DFA1_acceptS);
		private static readonly short[] DFA1_special = DFA.UnpackEncodedString(DFA1_specialS);
		private static readonly short[][] DFA1_transition;

		static DFA1()
		{
			int numStates = DFA1_transitionS.Length;
			DFA1_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA1_transition[i] = DFA.UnpackEncodedString(DFA1_transitionS[i]);
			}
		}

		public DFA1( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 1;
			this.eot = DFA1_eot;
			this.eof = DFA1_eof;
			this.min = DFA1_min;
			this.max = DFA1_max;
			this.accept = DFA1_accept;
			this.special = DFA1_special;
			this.transition = DFA1_transition;
		}

		public override string Description { get { return "89:2: ( BodyString namespaceDefinition )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x8\xFFFF";
		private const string DFA22_eofS =
			"\x8\xFFFF";
		private const string DFA22_minS =
			"\x4\x4\x4\xFFFF";
		private const string DFA22_maxS =
			"\x4\x7C\x4\xFFFF";
		private const string DFA22_acceptS =
			"\x4\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4";
		private const string DFA22_specialS =
			"\x8\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x1\x2\x19\xFFFF\x1\x5\x1C\xFFFF\x1\x4\x25\xFFFF\x3\x1\xA\xFFFF\x1\x3"+
				"\xC\xFFFF\x1\x6\x1\x7",
				"\x1\x2\x36\xFFFF\x1\x4\x25\xFFFF\x3\x1\xA\xFFFF\x1\x3\xD\xFFFF\x1\x7",
				"\x1\x2\x36\xFFFF\x1\x4\x25\xFFFF\x3\x1\xA\xFFFF\x1\x3\xD\xFFFF\x1\x7",
				"\x1\x2\x36\xFFFF\x1\x4\x25\xFFFF\x3\x1\xA\xFFFF\x1\x3\xD\xFFFF\x1\x7",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "158:1: classMember : ( ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA110 : DFA
	{
		private const string DFA110_eotS =
			"\x70\xFFFF";
		private const string DFA110_eofS =
			"\x70\xFFFF";
		private const string DFA110_minS =
			"\x1\x4\x1\x0\x3\xFFFF\x1\x0\x4\xFFFF\x2\x0\x1\xFFFF\x2\x0\x7\xFFFF\x2"+
			"\x0\x2\xFFFF\x1\x0\x16\xFFFF\x1\x0\xD\xFFFF\x3\x0\x3\xFFFF\x6\x0\x1\xFFFF"+
			"\x8\x0\x1C\xFFFF";
		private const string DFA110_maxS =
			"\x1\x81\x1\x0\x3\xFFFF\x1\x0\x4\xFFFF\x2\x0\x1\xFFFF\x2\x0\x7\xFFFF\x2"+
			"\x0\x2\xFFFF\x1\x0\x16\xFFFF\x1\x0\xD\xFFFF\x3\x0\x3\xFFFF\x6\x0\x1\xFFFF"+
			"\x8\x0\x1C\xFFFF";
		private const string DFA110_acceptS =
			"\x2\xFFFF\x1\x1\x18\xFFFF\x1\x2\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1"+
			"\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x15\x1\x16"+
			"\x1\x17\x1\x18\x1\x19\x1\x1A\x1\xFFFF\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1"+
			"\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x3\xFFFF"+
			"\x1\x2F\x1\x30\x1\x31\x10\xFFFF\x1\x21\x1\x1B\x1\x3\x1\x4\x1\x34\x1\x14"+
			"\x1\x32\x1\x20\x1\x2B\x1\x3A\x1\x2C\x1\x2D\x1\x2E\x1\x33\x1\x35\x1\x36"+
			"\x1\x37\x1\x38\x1\x39\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41"+
			"\x1\x42";
		private const string DFA110_specialS =
			"\x1\xFFFF\x1\x0\x3\xFFFF\x1\x1\x4\xFFFF\x1\x2\x1\x3\x1\xFFFF\x1\x4\x1"+
			"\x5\x7\xFFFF\x1\x6\x1\x7\x2\xFFFF\x1\x8\x16\xFFFF\x1\x9\xD\xFFFF\x1\xA"+
			"\x1\xB\x1\xC\x3\xFFFF\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\xFFFF"+
			"\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1C\xFFFF}>";
		private static readonly string[] DFA110_transitionS =
			{
				"\x1\x3A\x1\x2\x1\x32\x1\xFFFF\x1\x2\x1\x3D\x2\xFFFF\x1\x2\x3\xFFFF\x1"+
				"\x4D\x1\x4E\x1\x2B\x1\x28\x1\x25\x1\x36\x1\xFFFF\x1\xB\x6\xFFFF\x1\x3C"+
				"\x1\x2C\x2\xFFFF\x1\x29\x1\x46\x1\xFFFF\x1\x23\x1\xFFFF\x1\x2\x1\x50"+
				"\x1\x1C\x1\x1E\x1\x1F\x1\x47\x4\xFFFF\x1\x49\x1\x48\x1\xFFFF\x1\x38"+
				"\x1\x45\x1\x26\x1\x4F\x1\x20\x1\x21\x1\xFFFF\x1\xE\x1\x30\x1\x2D\x1"+
				"\xD\x1\xFFFF\x1\x2\x2\xFFFF\x1\x1D\x1\x39\x1\x40\x1\x41\x1\x2\x1\xFFFF"+
				"\x1\x35\x1\x31\x1\x2\x1\x4C\x1\x37\x1\x4A\x1\x1\x2\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2A\x1\xA\x1\x17\x1\xFFFF\x1\x53\x1\xFFFF\x1\x1B\x2\x2\x1\x33\x2"+
				"\xFFFF\x1\x2\x1\x43\x1\x44\x1\x42\x1\xFFFF\x1\x2\x1\x51\x1\x1A\x1\x3F"+
				"\x1\x2E\x2\xFFFF\x1\x2\x1\xFFFF\x1\x5\x1\x52\x1\x2\x1\x27\x1\x2F\x1"+
				"\x2\x1\x16\x1\x24\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\x3E\x1\x3B\x1\x2"+
				"\x1\x22\x1\xFFFF\x1\x34\x2\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA110_eot = DFA.UnpackEncodedString(DFA110_eotS);
		private static readonly short[] DFA110_eof = DFA.UnpackEncodedString(DFA110_eofS);
		private static readonly char[] DFA110_min = DFA.UnpackEncodedStringToUnsignedChars(DFA110_minS);
		private static readonly char[] DFA110_max = DFA.UnpackEncodedStringToUnsignedChars(DFA110_maxS);
		private static readonly short[] DFA110_accept = DFA.UnpackEncodedString(DFA110_acceptS);
		private static readonly short[] DFA110_special = DFA.UnpackEncodedString(DFA110_specialS);
		private static readonly short[][] DFA110_transition;

		static DFA110()
		{
			int numStates = DFA110_transitionS.Length;
			DFA110_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA110_transition[i] = DFA.UnpackEncodedString(DFA110_transitionS[i]);
			}
		}

		public DFA110( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 110;
			this.eot = DFA110_eot;
			this.eof = DFA110_eof;
			this.min = DFA110_min;
			this.max = DFA110_max;
			this.accept = DFA110_accept;
			this.special = DFA110_special;
			this.transition = DFA110_transition;
		}

		public override string Description { get { return "427:9: ( expression | '{' expression '}' | New | Clone | Echo | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition110(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA110_1 = input.LA(1);
		int index110_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred207_Php_fragment))) {s = 85;}

				input.Seek(index110_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred201_Php_fragment))) {s = 86;}

				input.Seek(index110_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred177_Php_fragment))) {s = 87;}

				input.Seek(index110_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred178_Php_fragment))) {s = 88;}

				input.Seek(index110_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred226_Php_fragment))) {s = 89;}

				input.Seek(index110_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred194_Php_fragment))) {s = 90;}

				input.Seek(index110_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred224_Php_fragment))) {s = 91;}

				input.Seek(index110_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred206_Php_fragment))) {s = 92;}

				input.Seek(index110_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred217_Php_fragment))) {s = 93;}

				input.Seek(index110_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred232_Php_fragment))) {s = 94;}

				input.Seek(index110_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred218_Php_fragment))) {s = 95;}

				input.Seek(index110_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred219_Php_fragment))) {s = 96;}

				input.Seek(index110_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred220_Php_fragment))) {s = 97;}

				input.Seek(index110_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred225_Php_fragment))) {s = 98;}

				input.Seek(index110_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred227_Php_fragment))) {s = 99;}

				input.Seek(index110_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred228_Php_fragment))) {s = 100;}

				input.Seek(index110_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred229_Php_fragment))) {s = 101;}

				input.Seek(index110_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred230_Php_fragment))) {s = 102;}

				input.Seek(index110_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred231_Php_fragment))) {s = 103;}

				input.Seek(index110_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred233_Php_fragment))) {s = 104;}

				input.Seek(index110_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred234_Php_fragment))) {s = 105;}

				input.Seek(index110_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred235_Php_fragment))) {s = 106;}

				input.Seek(index110_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred236_Php_fragment))) {s = 107;}

				input.Seek(index110_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred237_Php_fragment))) {s = 108;}

				input.Seek(index110_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred238_Php_fragment))) {s = 109;}

				input.Seek(index110_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred239_Php_fragment))) {s = 110;}

				input.Seek(index110_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred175_Php_fragment))) {s = 2;}

				else if ((true)) {s = 111;}

				input.Seek(index110_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 110, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA129 : DFA
	{
		private const string DFA129_eotS =
			"\x7\xFFFF";
		private const string DFA129_eofS =
			"\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5";
		private const string DFA129_minS =
			"\x1\x10\x1\xFFFF\x1\x10\x1\x5\x1\x10\x1\xFFFF\x1\x5";
		private const string DFA129_maxS =
			"\x1\x81\x1\xFFFF\x1\x77\x1\x81\x1\x77\x1\xFFFF\x1\x81";
		private const string DFA129_acceptS =
			"\x1\xFFFF\x1\x1\x3\xFFFF\x1\x2\x1\xFFFF";
		private const string DFA129_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA129_transitionS =
			{
				"\x2\x3\x16\xFFFF\x1\x3\xE\xFFFF\x1\x3\x12\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\xB\xFFFF\x1\x3\xD\xFFFF\x1\x3\x7\xFFFF\x2\x3\x7\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x1\x1\x2",
				"",
				"\x2\x3\x16\xFFFF\x1\x3\xE\xFFFF\x1\x3\x12\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\xB\xFFFF\x1\x3\xD\xFFFF\x1\x3\x7\xFFFF\x2\x3\x7\xFFFF\x1\x3",
				"\x3\x5\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x8\xFFFF\x1\x1\x1\xFFFF\x6\x5\x8"+
				"\xFFFF\x1\x5\x7\xFFFF\x2\x5\xA\xFFFF\x1\x5\x4\xFFFF\x1\x5\x7\xFFFF\x3"+
				"\x5\x6\xFFFF\x3\x5\x7\xFFFF\x7\x5\x3\xFFFF\x1\x5\x5\xFFFF\x2\x5\x13"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x4",
				"\x2\x6\x16\xFFFF\x1\x6\xE\xFFFF\x1\x6\x12\xFFFF\x1\x6\x1\xFFFF\x1\x6"+
				"\xB\xFFFF\x1\x6\xD\xFFFF\x1\x6\x8\xFFFF\x1\x6\x7\xFFFF\x1\x6",
				"",
				"\x3\x5\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x8\xFFFF\x1\x1\x1\xFFFF\x6\x5\x8"+
				"\xFFFF\x1\x5\x7\xFFFF\x2\x5\xA\xFFFF\x1\x5\x4\xFFFF\x1\x5\x7\xFFFF\x3"+
				"\x5\x6\xFFFF\x3\x5\x7\xFFFF\x7\x5\x3\xFFFF\x1\x5\x5\xFFFF\x2\x5\x13"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x4"
			};

		private static readonly short[] DFA129_eot = DFA.UnpackEncodedString(DFA129_eotS);
		private static readonly short[] DFA129_eof = DFA.UnpackEncodedString(DFA129_eofS);
		private static readonly char[] DFA129_min = DFA.UnpackEncodedStringToUnsignedChars(DFA129_minS);
		private static readonly char[] DFA129_max = DFA.UnpackEncodedStringToUnsignedChars(DFA129_maxS);
		private static readonly short[] DFA129_accept = DFA.UnpackEncodedString(DFA129_acceptS);
		private static readonly short[] DFA129_special = DFA.UnpackEncodedString(DFA129_specialS);
		private static readonly short[][] DFA129_transition;

		static DFA129()
		{
			int numStates = DFA129_transitionS.Length;
			DFA129_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA129_transition[i] = DFA.UnpackEncodedString(DFA129_transitionS[i]);
			}
		}

		public DFA129( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 129;
			this.eot = DFA129_eot;
			this.eof = DFA129_eof;
			this.min = DFA129_min;
			this.max = DFA129_max;
			this.accept = DFA129_accept;
			this.special = DFA129_special;
			this.transition = DFA129_transition;
		}

		public override string Description { get { return "458:1: constantOrStaticAccessor : ( ( variable | qualifiedName ) '::' ( UnquotedString | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _BodyString_in_prog327 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _namespaceDefinition_in_prog331 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x36BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _useStatement_in_prog337 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x36BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_prog341 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x36BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameWithAs352 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _As_in_qualifiedNameWithAs355 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UnquotedString_in_qualifiedNameWithAs357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Use_in_useStatement370 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedNameWithAs_in_useStatement372 = new BitSet(new ulong[]{0x10000000UL,0x40000000000UL});
		public static readonly BitSet _Comma_in_useStatement375 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedNameWithAs_in_useStatement377 = new BitSet(new ulong[]{0x10000000UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_useStatement381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespaceDefinition392 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_namespaceDefinition394 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_namespaceDefinition396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespaceBlock407 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_namespaceBlock409 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_namespaceBlock411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_statement427 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_statement429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_statement442 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _simpleStatement_in_statement447 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BodyString_in_statement453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespaceBlock_in_statement460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracketedBlock_in_statement465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_statement470 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_statement472 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_statement474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_statement479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDefinition_in_statement484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _complexStatement_in_statement489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleStatement_in_statement494 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_statement496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_statement501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_printExpr512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_bracketedBlock523 = new BitSet(new ulong[]{0x7BA613A8C1A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_bracketedBlock525 = new BitSet(new ulong[]{0x7BA613A8C1A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _CloseCurlyBracket_in_bracketedBlock528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_interfaceDefinition539 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_interfaceDefinition541 = new BitSet(new ulong[]{0x10000000000000UL,0x4000000UL});
		public static readonly BitSet _interfaceExtends_in_interfaceDefinition543 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_interfaceDefinition549 = new BitSet(new ulong[]{0x800000041000010UL,0x400E00000000UL});
		public static readonly BitSet _interfaceMember_in_interfaceDefinition551 = new BitSet(new ulong[]{0x800000041000010UL,0x400E00000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_interfaceDefinition554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_interfaceExtends565 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_interfaceExtends567 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_interfaceExtends570 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_interfaceExtends572 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _constDefinition_in_interfaceMember585 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldModifier_in_interfaceMember592 = new BitSet(new ulong[]{0x800000000000010UL,0x400E00000000UL});
		public static readonly BitSet _Function_in_interfaceMember595 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_interfaceMember597 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_interfaceMember599 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classModifier_in_classDefinition614 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _Class_in_classDefinition620 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_classDefinition622 = new BitSet(new ulong[]{0x10000000000000UL,0x4000010UL});
		public static readonly BitSet _Extends_in_classDefinition628 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_classDefinition630 = new BitSet(new ulong[]{0x0UL,0x4000010UL});
		public static readonly BitSet _classImplements_in_classDefinition637 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_classDefinition642 = new BitSet(new ulong[]{0x800000041000010UL,0x1800400E00000000UL});
		public static readonly BitSet _classMember_in_classDefinition646 = new BitSet(new ulong[]{0x800000041000010UL,0x1800400E00000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_classDefinition651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_classImplements665 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_classImplements668 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_classImplements671 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_classImplements673 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _fieldModifier_in_classMember687 = new BitSet(new ulong[]{0x800000000000010UL,0x400E00000000UL});
		public static readonly BitSet _Function_in_classMember690 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_classMember692 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_classMember694 = new BitSet(new ulong[]{0x0UL,0x40004000000UL});
		public static readonly BitSet _bracketedBlock_in_classMember697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_classMember701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constDefinition_in_classMember707 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_classMember709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varDefinition_in_classMember714 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_classMember716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDefinition_in_classMember721 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_classMember723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_constDefinition734 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_constDefinition736 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_constDefinition739 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_constDefinition741 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_constDefinition746 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_constDefinition748 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_constDefinition751 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_constDefinition753 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Var_in_varDefinition768 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_varDefinition770 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_varDefinition773 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_varDefinition775 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_varDefinition780 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_varDefinition782 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_varDefinition785 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_varDefinition787 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _fieldModifier_in_fieldDefinition802 = new BitSet(new ulong[]{0x10UL,0x1000400E00000000UL});
		public static readonly BitSet _VariableName_in_fieldDefinition805 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_fieldDefinition808 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_fieldDefinition810 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_fieldDefinition815 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_fieldDefinition817 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_fieldDefinition820 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_fieldDefinition822 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Abstract_in_classModifier838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessModifier_in_fieldModifier848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_fieldModifier852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_fieldModifier856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_complexStatement867 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement869 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_complexStatement871 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement873 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_complexStatement875 = new BitSet(new ulong[]{0xC0000000002UL});
		public static readonly BitSet _conditional_in_complexStatement877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_complexStatement883 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement885 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D5E11964DCE1UL,0x3UL});
		public static readonly BitSet _forInit_in_complexStatement887 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D5E11964DCE1UL,0x3UL});
		public static readonly BitSet _forCondition_in_complexStatement889 = new BitSet(new ulong[]{0x48A6118802831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _forUpdate_in_complexStatement891 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement893 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_complexStatement895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_complexStatement900 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement902 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_complexStatement904 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _As_in_complexStatement906 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _arrayEntry_in_complexStatement908 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement910 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_complexStatement912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_complexStatement917 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement919 = new BitSet(new ulong[]{0x48A6118802831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_complexStatement921 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement924 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_complexStatement926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Do_in_complexStatement931 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_complexStatement933 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _While_in_complexStatement935 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement937 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_complexStatement939 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement941 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_complexStatement943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_complexStatement948 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement950 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_complexStatement952 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement954 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_complexStatement956 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _cases_in_complexStatement957 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_complexStatement958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_complexStatement963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDefinition_in_complexStatement968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Try_in_tryStatement980 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement982 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _Catch_in_tryStatement988 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_tryStatement990 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_tryStatement992 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_tryStatement994 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_tryStatement996 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement998 = new BitSet(new ulong[]{0x40000000100002UL});
		public static readonly BitSet _Finally_in_tryStatement1006 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement1008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_simpleStatement1021 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _commaList_in_simpleStatement1023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_simpleStatement1028 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_simpleStatement1030 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_simpleStatement1033 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_simpleStatement1035 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Static_in_simpleStatement1043 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_simpleStatement1045 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_simpleStatement1048 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_simpleStatement1050 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_simpleStatement1055 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_simpleStatement1057 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_simpleStatement1060 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_simpleStatement1062 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _constDefinition_in_simpleStatement1071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_simpleStatement1076 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _Integer_in_simpleStatement1078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_simpleStatement1084 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _Integer_in_simpleStatement1086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_simpleStatement1092 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UnquotedString_in_simpleStatement1094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_simpleStatement1099 = new BitSet(new ulong[]{0x48A6118800831122UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_simpleStatement1101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_simpleStatement1107 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UnquotedString_in_simpleStatement1109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_simpleStatement1114 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_simpleStatement1116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_simpleStatement1121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_conditional1132 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_conditional1134 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_conditional1136 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_conditional1138 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_conditional1140 = new BitSet(new ulong[]{0xC0000000002UL});
		public static readonly BitSet _conditional_in_conditional1142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_conditional1148 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_conditional1150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forInit1161 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_forInit1164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forCondition1175 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_forCondition1178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forUpdate1190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _casestatement_in_cases1202 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _defaultcase_in_cases1205 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_cases1207 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_cases1213 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _Case_in_casestatement1225 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_casestatement1227 = new BitSet(new ulong[]{0x8000000UL,0x40000000000UL});
		public static readonly BitSet _set_in_casestatement1229 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_casestatement1235 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _Default_in_defaultcase1249 = new BitSet(new ulong[]{0x8000000UL,0x40000000000UL});
		public static readonly BitSet _set_in_defaultcase1251 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_defaultcase1257 = new BitSet(new ulong[]{0x7BA613A8C0A73132UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _Function_in_anonymousFunctionDefinition1270 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_anonymousFunctionDefinition1272 = new BitSet(new ulong[]{0x0UL,0x400000004000000UL});
		public static readonly BitSet _Use_in_anonymousFunctionDefinition1275 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_anonymousFunctionDefinition1277 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_anonymousFunctionDefinition1281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_functionDefinition1292 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL,0x2UL});
		public static readonly BitSet _qualifiedName_in_functionDefinition1294 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_functionDefinition1296 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_functionDefinition1298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_parametersDefinition1309 = new BitSet(new ulong[]{0x80010002030120UL,0x1280C04001001400UL,0x2UL});
		public static readonly BitSet _paramDef_in_parametersDefinition1312 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_parametersDefinition1315 = new BitSet(new ulong[]{0x80010000030120UL,0x1280C04001001400UL,0x2UL});
		public static readonly BitSet _paramDef_in_parametersDefinition1317 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_parametersDefinition1323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_paramDef1335 = new BitSet(new ulong[]{0x20UL,0x1000000000000000UL});
		public static readonly BitSet _qualifiedName_in_paramDef1339 = new BitSet(new ulong[]{0x20UL,0x1000000000000000UL});
		public static readonly BitSet _paramName_in_paramDef1343 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _Equals_in_paramDef1346 = new BitSet(new ulong[]{0xA0018000030100UL,0x1090D1E111441C61UL,0x3UL});
		public static readonly BitSet _atom_in_paramDef1348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VariableName_in_paramName1361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_paramName1366 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VariableName_in_paramName1368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_commaList1379 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_commaList1382 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_commaList1384 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _weakLogicalOr_in_expression1399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr1410 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _Or_in_weakLogicalOr1413 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr1415 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor1428 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _Xor_in_weakLogicalXor1431 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor1433 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd1447 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _And_in_weakLogicalAnd1450 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd1452 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _listVariables_in_assignment1465 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_assignment1467 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_assignment1475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ternary_in_assignment1480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_listVariables1491 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_listVariables1493 = new BitSet(new ulong[]{0x12000000UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_listVariables1495 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_listVariables1499 = new BitSet(new ulong[]{0x12000000UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_listVariables1501 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_listVariables1506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_listVariables1512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary1523 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _QuestionMark_in_ternary1525 = new BitSet(new ulong[]{0x48A6118808831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_ternary1527 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_ternary1530 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_ternary1532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary1537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAnd_in_logicalOr1549 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _LogicalOr_in_logicalOr1552 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _logicalAnd_in_logicalOr1554 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd1567 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _LogicalAnd_in_logicalAnd1570 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd1572 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _bitwiseXor_in_bitwiseOr1586 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _Pipe_in_bitwiseOr1589 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitwiseXor_in_bitwiseOr1591 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseXor1605 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _Hat_in_bitwiseXor1608 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseXor1610 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd1623 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _Ampersand_in_bitWiseAnd1626 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd1628 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck1641 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _EqualityOperator_in_equalityCheck1644 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck1646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck1660 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _ComparisionOperator_in_comparisionCheck1663 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck1665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addition_in_bitWiseShift1678 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _ShiftOperator_in_bitWiseShift1681 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _addition_in_bitWiseShift1683 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _multiplication_in_addition1697 = new BitSet(new ulong[]{0x4000000002UL,0x100040000UL});
		public static readonly BitSet _set_in_addition1700 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _multiplication_in_addition1712 = new BitSet(new ulong[]{0x4000000002UL,0x100040000UL});
		public static readonly BitSet _logicalNot_in_multiplication1725 = new BitSet(new ulong[]{0x400000000000802UL,0x40000000UL});
		public static readonly BitSet _set_in_multiplication1728 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _logicalNot_in_multiplication1740 = new BitSet(new ulong[]{0x400000000000802UL,0x40000000UL});
		public static readonly BitSet _Bang_in_logicalNot1753 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _logicalNot_in_logicalNot1755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _instanceOf_in_logicalNot1760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _negateOrCast_in_instanceOf1771 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _Instanceof_in_instanceOf1774 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _negateOrCast_in_instanceOf1776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_negateOrCast1789 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1290D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _increment_in_negateOrCast1801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_negateOrCast1806 = new BitSet(new ulong[]{0x80010000030100UL,0x200804001001400UL});
		public static readonly BitSet _primitiveType_in_negateOrCast1808 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_negateOrCast1810 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1290D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _increment_in_negateOrCast1812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _increment_in_negateOrCast1817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncrementOperator_in_increment1880 = new BitSet(new ulong[]{0x80010000030000UL,0x1080C04001001400UL,0x3UL});
		public static readonly BitSet _name_in_increment1882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_increment1887 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IncrementOperator_in_increment1889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_increment1894 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_increment1896 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_increment1904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newOrClone_in_increment1909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_increment1914 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_increment1916 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_increment1918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_newOrClone1940 = new BitSet(new ulong[]{0x4086110800030000UL,0x1280C04001005400UL,0x3UL});
		public static readonly BitSet _nameOrFunctionCall_in_newOrClone1943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_newOrClone1947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_newOrClone1953 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _Static_in_newOrClone1955 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_newOrClone1957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_newOrClone1963 = new BitSet(new ulong[]{0x80010000030000UL,0x1080C04001001400UL,0x3UL});
		public static readonly BitSet _name_in_newOrClone1965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atomOrReference_in_newOrClone1970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _reference_in_atomOrReference1981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_atomOrReference1986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ArrayType_in_arrayDeclaration1997 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_arrayDeclaration1999 = new BitSet(new ulong[]{0x48A6118802831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2002 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2005 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2007 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2011 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_arrayDeclaration2016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenSquareBracket_in_arrayDeclaration2021 = new BitSet(new ulong[]{0x48A6118804831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2024 = new BitSet(new ulong[]{0x14000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2027 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2029 = new BitSet(new ulong[]{0x14000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2033 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseSquareBracket_in_arrayDeclaration2038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_arrayEntry2050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_arrayEntry2054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_keyValuePair2067 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ArrayAssign_in_keyValuePair2069 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_keyValuePair2071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SingleQuotedString_in_atom2081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleQuotedString_in_atom2086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HereDoc_in_atom2091 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Integer_in_atom2103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Real_in_atom2115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_in_atom2120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_atom2125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaration_in_atom2130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _requireOperator_in_atom2135 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_atom2137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_atom2142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_reference2154 = new BitSet(new ulong[]{0x4086110800030000UL,0x1280C04001005400UL,0x3UL});
		public static readonly BitSet _nameOrFunctionCall_in_reference2156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameOrFunctionCall_in_reference2161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymousFunctionDefinition_in_reference2166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_functionArguments2177 = new BitSet(new ulong[]{0x48A6118802831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_functionArguments2180 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_functionArguments2183 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_functionArguments2185 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_functionArguments2191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenSquareBracket_in_indexer2202 = new BitSet(new ulong[]{0x48A6118804831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_indexer2204 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseSquareBracket_in_indexer2207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_indexer2212 = new BitSet(new ulong[]{0x48A6118801831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_indexer2214 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_indexer2217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _InstanceMember_in_memberAccess2229 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0xBEBFD3EF3D74FEF9UL,0x3UL});
		public static readonly BitSet _expression_in_memberAccess2232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_memberAccess2236 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_memberAccess2238 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_memberAccess2240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_memberAccess2247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_memberAccess2249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_memberAccess2251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_memberAccess2253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_memberAccess2255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_memberAccess2257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_memberAccess2259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_memberAccess2261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_memberAccess2263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Do_in_memberAccess2265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Try_in_memberAccess2267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Catch_in_memberAccess2269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Finally_in_memberAccess2271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_memberAccess2273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Case_in_memberAccess2275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Default_in_memberAccess2277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_memberAccess2279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_memberAccess2281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_memberAccess2283 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_memberAccess2285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_memberAccess2287 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_memberAccess2289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_memberAccess2291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_memberAccess2293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_memberAccess2295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_memberAccess2297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_memberAccess2299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_memberAccess2301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Instanceof_in_memberAccess2303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_memberAccess2305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_memberAccess2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Class_in_memberAccess2309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_memberAccess2311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_memberAccess2313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_memberAccess2315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_memberAccess2317 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Var_in_memberAccess2319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_memberAccess2321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _As_in_memberAccess2323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Use_in_memberAccess2325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Require_in_memberAccess2327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RequireOnce_in_memberAccess2329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Include_in_memberAccess2331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncludeOnce_in_memberAccess2333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Public_in_memberAccess2335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Private_in_memberAccess2337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Protected_in_memberAccess2339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _True_in_memberAccess2341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _False_in_memberAccess2343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HaltCompiler_in_memberAccess2345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Die_in_memberAccess2347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Empty_in_memberAccess2349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Exit_in_memberAccess2351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Eval_in_memberAccess2353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Isset_in_memberAccess2355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntType_in_memberAccess2362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntegerType_in_memberAccess2366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BoolType_in_memberAccess2370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BooleanType_in_memberAccess2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FloatType_in_memberAccess2378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleType_in_memberAccess2382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealType_in_memberAccess2389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringType_in_memberAccess2393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ObjectType_in_memberAccess2397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_nameOrFunctionCall2413 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2415 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_nameOrFunctionCall2419 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_nameOrFunctionCall2423 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2425 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_nameOrFunctionCall2433 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2435 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_nameOrFunctionCall2438 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_nameOrFunctionCall2442 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2444 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_nameOrFunctionCall2452 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_nameOrFunctionCall2455 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_nameOrFunctionCall2459 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2461 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _predefinedFunctionName_in_nameOrFunctionCall2469 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_nameOrFunctionCall2471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_name2492 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_name2496 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_name2502 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_name2510 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_name2514 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_name2518 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_name2520 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_name2528 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_name2532 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _variableOrStaticAccessor_in_name2539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2551 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_variableOrStaticAccessor2555 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_variableOrStaticAccessor2558 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_constantOrStaticAccessor2577 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_constantOrStaticAccessor2581 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_constantOrStaticAccessor2584 = new BitSet(new ulong[]{0x80010000030000UL,0x80804001001400UL});
		public static readonly BitSet _set_in_constantOrStaticAccessor2586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_constantOrStaticAccessor2642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableVariable_in_variable2654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VariableName_in_variableVariable2665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_variableVariable2670 = new BitSet(new ulong[]{0x0UL,0x1000000004000000UL,0x1UL});
		public static readonly BitSet _variableVariable_in_variableVariable2673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_variableVariable2677 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_variableVariable2679 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_variableVariable2681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_qualifiedName2694 = new BitSet(new ulong[]{0x80010000030000UL,0x80C04001001400UL});
		public static readonly BitSet _set_in_qualifiedName2697 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_qualifiedName2757 = new BitSet(new ulong[]{0x80010000030000UL,0x80804001001400UL});
		public static readonly BitSet _set_in_qualifiedName2759 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _statement_in_synpred3_Php341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred6_Php427 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_synpred6_Php429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred8_Php442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred10_Php442 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _simpleStatement_in_synpred10_Php447 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BodyString_in_synpred10_Php453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_synpred13_Php470 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred13_Php472 = new BitSet(new ulong[]{0x7BA613A8C0A73130UL,0x32BFD7E11D74FCE9UL,0x3UL});
		public static readonly BitSet _statement_in_synpred13_Php474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _complexStatement_in_synpred16_Php489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleStatement_in_synpred17_Php494 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _SemiColon_in_synpred17_Php496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred18_Php525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred46_Php877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_synpred69_Php1092 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UnquotedString_in_synpred69_Php1094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_synpred72_Php1107 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _UnquotedString_in_synpred72_Php1109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred74_Php1142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _casestatement_in_synpred81_Php1202 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _defaultcase_in_synpred81_Php1205 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_synpred81_Php1207 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _statement_in_synpred84_Php1235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred86_Php1257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_synpred90_Php1335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_synpred91_Php1339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_synpred95_Php1413 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _weakLogicalXor_in_synpred95_Php1415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_synpred96_Php1431 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _weakLogicalAnd_in_synpred96_Php1433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_synpred97_Php1450 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_synpred97_Php1452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_synpred99_Php1465 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_synpred99_Php1467 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_synpred99_Php1475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_synpred105_Php1523 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _QuestionMark_in_synpred105_Php1525 = new BitSet(new ulong[]{0x48A6118808831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_synpred105_Php1527 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred105_Php1530 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _expression_in_synpred105_Php1532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LogicalOr_in_synpred106_Php1552 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _logicalAnd_in_synpred106_Php1554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LogicalAnd_in_synpred107_Php1570 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitwiseOr_in_synpred107_Php1572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Pipe_in_synpred108_Php1589 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitwiseXor_in_synpred108_Php1591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Hat_in_synpred109_Php1608 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitWiseAnd_in_synpred109_Php1610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_synpred110_Php1626 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _equalityCheck_in_synpred110_Php1628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EqualityOperator_in_synpred111_Php1644 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _comparisionCheck_in_synpred111_Php1646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ComparisionOperator_in_synpred112_Php1663 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _bitWiseShift_in_synpred112_Php1665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ShiftOperator_in_synpred113_Php1681 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _addition_in_synpred113_Php1683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred116_Php1700 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _multiplication_in_synpred116_Php1712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred119_Php1728 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _logicalNot_in_synpred119_Php1740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Instanceof_in_synpred121_Php1774 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _negateOrCast_in_synpred121_Php1776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred124_Php1789 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1290D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _increment_in_synpred124_Php1801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred125_Php1806 = new BitSet(new ulong[]{0x80010000030100UL,0x200804001001400UL});
		public static readonly BitSet _primitiveType_in_synpred125_Php1808 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred125_Php1810 = new BitSet(new ulong[]{0x48A6118800830120UL,0x1290D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _increment_in_synpred125_Php1812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred137_Php1887 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IncrementOperator_in_synpred137_Php1889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_synpred139_Php1894 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_synpred139_Php1896 = new BitSet(new ulong[]{0x48A6118800831120UL,0x1299D1E11964DCE1UL,0x3UL});
		public static readonly BitSet _assignment_in_synpred139_Php1904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newOrClone_in_synpred140_Php1909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameOrFunctionCall_in_synpred141_Php1943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred142_Php1940 = new BitSet(new ulong[]{0x4086110800030000UL,0x1280C04001005400UL,0x3UL});
		public static readonly BitSet _nameOrFunctionCall_in_synpred142_Php1943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred142_Php1947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred143_Php1957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred144_Php1953 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _Static_in_synpred144_Php1955 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred144_Php1957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _reference_in_synpred146_Php1981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_synpred154_Php2050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred175_Php2232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred177_Php2247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_synpred178_Php2249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_synpred194_Php2281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_synpred201_Php2295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_synpred206_Php2305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_synpred207_Php2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Require_in_synpred217_Php2327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RequireOnce_in_synpred218_Php2329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Include_in_synpred219_Php2331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncludeOnce_in_synpred220_Php2333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _True_in_synpred224_Php2341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _False_in_synpred225_Php2343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HaltCompiler_in_synpred226_Php2345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Die_in_synpred227_Php2347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Empty_in_synpred228_Php2349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Exit_in_synpred229_Php2351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Eval_in_synpred230_Php2353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Isset_in_synpred231_Php2355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntType_in_synpred232_Php2362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntegerType_in_synpred233_Php2366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BoolType_in_synpred234_Php2370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BooleanType_in_synpred235_Php2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FloatType_in_synpred236_Php2378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleType_in_synpred237_Php2382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealType_in_synpred238_Php2389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringType_in_synpred239_Php2393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred240_Php2415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred241_Php2419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred242_Php2425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred243_Php2423 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred243_Php2425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_synpred244_Php2413 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred244_Php2415 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred244_Php2419 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred244_Php2423 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred244_Php2425 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred245_Php2438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred246_Php2444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred247_Php2442 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred247_Php2444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred248_Php2433 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred248_Php2435 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred248_Php2438 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred248_Php2442 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred248_Php2444 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred249_Php2455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred250_Php2461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred251_Php2459 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred251_Php2461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred252_Php2452 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred252_Php2455 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred252_Php2459 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred252_Php2461 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _functionArguments_in_synpred253_Php2471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_synpred254_Php2492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred257_Php2514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred258_Php2510 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred258_Php2514 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred258_Php2518 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred258_Php2520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred259_Php2528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred260_Php2532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_synpred261_Php2492 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred261_Php2496 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred261_Php2502 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred261_Php2510 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred261_Php2514 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred261_Php2518 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred261_Php2520 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred261_Php2528 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred261_Php2532 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _variable_in_synpred263_Php2551 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_synpred263_Php2555 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_synpred263_Php2558 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x1UL});
		public static readonly BitSet _variable_in_synpred263_Php2560 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
