using Code2Xml.Languages.ANTLRv3.Core;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g 2014-04-13 14:01:13

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PhpParser : Antlr.Runtime.Parser, ICustomizedAntlr3Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Abstract", "Ampersand", "And", "ArrayAssign", "ArrayType", "As", "AsignmentOperator", "Asterisk", "Bang", "BodyString", "BodyStringRest", "BodyStringRestShortTag", "BoolType", "BooleanType", "Break", "Case", "Catch", "Class", "ClassMember", "Clone", "CloseCurlyBracket", "CloseRoundBracket", "CloseSquareBracket", "Colon", "Comma", "ComparisionOperator", "Const", "Continue", "DNum", "Decimal", "Default", "Die", "Digits", "Do", "Dot", "DoubleQuotedString", "DoubleType", "Echo", "Else", "ElseIf", "Empty", "Eol", "EqualityOperator", "Equals", "EscapeCharector", "Eval", "Exit", "Exponent_DNum", "Extends", "False", "Finally", "FloatType", "For", "Foreach", "Forwardslash", "Function", "Global", "Goto", "HaltCompiler", "Hat", "HereDoc", "HereDocContents", "Hexadecimal", "If", "Implements", "Include", "IncludeOnce", "IncrementOperator", "InstanceMember", "Instanceof", "IntType", "Integer", "IntegerType", "Interface", "Isset", "List", "LogicalAnd", "LogicalOr", "Minus", "MultilineComment", "Namespace", "New", "Null", "OP", "ObjectType", "Octal", "OpenCurlyBracket", "OpenRoundBracket", "OpenSquareBracket", "Or", "Percent", "Pipe", "Plus", "Print", "Private", "Protected", "Public", "QuestionMark", "Real", "RealType", "Require", "RequireOnce", "Return", "SemiColon", "ShiftOperator", "SingleQuotedString", "SinglelineComment", "Static", "StringType", "SuppressWarnings", "Switch", "Throw", "Tilde", "True", "Try", "UnixComment", "UnquotedString", "UnquotedStringBody", "UnsetType", "Use", "Var", "VariableName", "While", "WhiteSpace", "Xor", "'$'", "'\\\\'"
	};
	public const int EOF=-1;
	public const int Abstract=4;
	public const int Ampersand=5;
	public const int And=6;
	public const int ArrayAssign=7;
	public const int ArrayType=8;
	public const int As=9;
	public const int AsignmentOperator=10;
	public const int Asterisk=11;
	public const int Bang=12;
	public const int BodyString=13;
	public const int BodyStringRest=14;
	public const int BodyStringRestShortTag=15;
	public const int BoolType=16;
	public const int BooleanType=17;
	public const int Break=18;
	public const int Case=19;
	public const int Catch=20;
	public const int Class=21;
	public const int ClassMember=22;
	public const int Clone=23;
	public const int CloseCurlyBracket=24;
	public const int CloseRoundBracket=25;
	public const int CloseSquareBracket=26;
	public const int Colon=27;
	public const int Comma=28;
	public const int ComparisionOperator=29;
	public const int Const=30;
	public const int Continue=31;
	public const int DNum=32;
	public const int Decimal=33;
	public const int Default=34;
	public const int Die=35;
	public const int Digits=36;
	public const int Do=37;
	public const int Dot=38;
	public const int DoubleQuotedString=39;
	public const int DoubleType=40;
	public const int Echo=41;
	public const int Else=42;
	public const int ElseIf=43;
	public const int Empty=44;
	public const int Eol=45;
	public const int EqualityOperator=46;
	public const int Equals=47;
	public const int EscapeCharector=48;
	public const int Eval=49;
	public const int Exit=50;
	public const int Exponent_DNum=51;
	public const int Extends=52;
	public const int False=53;
	public const int Finally=54;
	public const int FloatType=55;
	public const int For=56;
	public const int Foreach=57;
	public const int Forwardslash=58;
	public const int Function=59;
	public const int Global=60;
	public const int Goto=61;
	public const int HaltCompiler=62;
	public const int Hat=63;
	public const int HereDoc=64;
	public const int HereDocContents=65;
	public const int Hexadecimal=66;
	public const int If=67;
	public const int Implements=68;
	public const int Include=69;
	public const int IncludeOnce=70;
	public const int IncrementOperator=71;
	public const int InstanceMember=72;
	public const int Instanceof=73;
	public const int IntType=74;
	public const int Integer=75;
	public const int IntegerType=76;
	public const int Interface=77;
	public const int Isset=78;
	public const int List=79;
	public const int LogicalAnd=80;
	public const int LogicalOr=81;
	public const int Minus=82;
	public const int MultilineComment=83;
	public const int Namespace=84;
	public const int New=85;
	public const int Null=86;
	public const int OP=87;
	public const int ObjectType=88;
	public const int Octal=89;
	public const int OpenCurlyBracket=90;
	public const int OpenRoundBracket=91;
	public const int OpenSquareBracket=92;
	public const int Or=93;
	public const int Percent=94;
	public const int Pipe=95;
	public const int Plus=96;
	public const int Print=97;
	public const int Private=98;
	public const int Protected=99;
	public const int Public=100;
	public const int QuestionMark=101;
	public const int Real=102;
	public const int RealType=103;
	public const int Require=104;
	public const int RequireOnce=105;
	public const int Return=106;
	public const int SemiColon=107;
	public const int ShiftOperator=108;
	public const int SingleQuotedString=109;
	public const int SinglelineComment=110;
	public const int Static=111;
	public const int StringType=112;
	public const int SuppressWarnings=113;
	public const int Switch=114;
	public const int Throw=115;
	public const int Tilde=116;
	public const int True=117;
	public const int Try=118;
	public const int UnixComment=119;
	public const int UnquotedString=120;
	public const int UnquotedStringBody=121;
	public const int UnsetType=122;
	public const int Use=123;
	public const int Var=124;
	public const int VariableName=125;
	public const int While=126;
	public const int WhiteSpace=127;
	public const int Xor=128;
	public const int T__129=129;
	public const int T__130=130;

	public PhpParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public PhpParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[574+1];


		CstBuilderForAntlr3 treeAdaptor = default(CstBuilderForAntlr3);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CstBuilderForAntlr3();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref CstBuilderForAntlr3 adaptor);

	private CstBuilderForAntlr3 adaptor;

	public CstBuilderForAntlr3 TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return PhpParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g"; } }


		private bool expressionFollowsBodyString = false;


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:88:1: public prog : ( BodyString namespaceDefinition )? ( useStatement | statement )* ;
	[GrammarRule("prog")]
	public Antlr3CstNode prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		var retval = new Antlr3CstNode("prog");
		
		retval.Start = (IToken)input.LT(1);
		int prog_StartIndex = input.Index;

		object root_0 = default(object);

		IToken BodyString1 = default(IToken);
		Antlr3CstNode namespaceDefinition2 = default(Antlr3CstNode);
		Antlr3CstNode useStatement3 = default(Antlr3CstNode);
		Antlr3CstNode statement4 = default(Antlr3CstNode);

		object BodyString1_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(88, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:88:6: ( ( BodyString namespaceDefinition )? ( useStatement | statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:89:2: ( BodyString namespaceDefinition )? ( useStatement | statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(89, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:89:2: ( BodyString namespaceDefinition )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			try
			{
				alt1 = dfa1.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:89:3: BodyString namespaceDefinition
				{
				DebugLocation(89, 3);
				BodyString1=(IToken)Match(input,BodyString,Follow._BodyString_in_prog327); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BodyString1_tree = (object)adaptor.Create(BodyString1, "BodyString1", retval);
				adaptor.AddChild(root_0, BodyString1_tree);
				}
				DebugLocation(89, 14);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString = (BodyString1!=null?BodyString1.Text:default(string)).endsWith("<?=");
				}
				DebugLocation(89, 80);
				PushFollow(Follow._namespaceDefinition_in_prog331);
				namespaceDefinition2=namespaceDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespaceDefinition2.Tree, namespaceDefinition2, "namespaceDefinition2", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(90, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:2: ( useStatement | statement )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=3;
				try { DebugEnterDecision(2, false);
				try
				{
					alt2 = dfa2.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:3: useStatement
					{
					DebugLocation(90, 3);
					PushFollow(Follow._useStatement_in_prog337);
					useStatement3=useStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, useStatement3.Tree, useStatement3, "useStatement3", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:18: statement
					{
					DebugLocation(90, 18);
					PushFollow(Follow._statement_in_prog341);
					statement4=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement4.Tree, statement4, "statement4", retval);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
			if (state.backtracking > 0) { Memoize(input, 1, prog_StartIndex); }

		}
		DebugLocation(90, 28);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_qualifiedNameWithAs();
	partial void LeaveRule_qualifiedNameWithAs();
	// $ANTLR start "qualifiedNameWithAs"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:92:1: qualifiedNameWithAs : qualifiedName ( As UnquotedString )? ;
	[GrammarRule("qualifiedNameWithAs")]
	private Antlr3CstNode qualifiedNameWithAs()
	{
		EnterRule_qualifiedNameWithAs();
		EnterRule("qualifiedNameWithAs", 2);
		var retval = new Antlr3CstNode("qualifiedNameWithAs");
		
		retval.Start = (IToken)input.LT(1);
		int qualifiedNameWithAs_StartIndex = input.Index;

		object root_0 = default(object);

		IToken As6 = default(IToken);
		IToken UnquotedString7 = default(IToken);
		Antlr3CstNode qualifiedName5 = default(Antlr3CstNode);

		object As6_tree = default(object);
		object UnquotedString7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedNameWithAs");
		DebugLocation(92, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:93:2: ( qualifiedName ( As UnquotedString )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:93:4: qualifiedName ( As UnquotedString )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(93, 4);
			PushFollow(Follow._qualifiedName_in_qualifiedNameWithAs352);
			qualifiedName5=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName5.Tree, qualifiedName5, "qualifiedName5", retval);
			DebugLocation(93, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:93:18: ( As UnquotedString )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==As))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:93:19: As UnquotedString
				{
				DebugLocation(93, 19);
				As6=(IToken)Match(input,As,Follow._As_in_qualifiedNameWithAs355); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As6_tree = (object)adaptor.Create(As6, "As6", retval);
				adaptor.AddChild(root_0, As6_tree);
				}
				DebugLocation(93, 22);
				UnquotedString7=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_qualifiedNameWithAs357); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString7_tree = (object)adaptor.Create(UnquotedString7, "UnquotedString7", retval);
				adaptor.AddChild(root_0, UnquotedString7_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedNameWithAs", 2);
			LeaveRule("qualifiedNameWithAs", 2);
			LeaveRule_qualifiedNameWithAs();
			if (state.backtracking > 0) { Memoize(input, 2, qualifiedNameWithAs_StartIndex); }

		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "qualifiedNameWithAs"); }
		return retval;

	}
	// $ANTLR end "qualifiedNameWithAs"

	partial void EnterRule_useStatement();
	partial void LeaveRule_useStatement();
	// $ANTLR start "useStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:96:1: useStatement : Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';' ;
	[GrammarRule("useStatement")]
	private Antlr3CstNode useStatement()
	{
		EnterRule_useStatement();
		EnterRule("useStatement", 3);
		var retval = new Antlr3CstNode("useStatement");
		
		retval.Start = (IToken)input.LT(1);
		int useStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Use8 = default(IToken);
		IToken char_literal10 = default(IToken);
		IToken char_literal12 = default(IToken);
		Antlr3CstNode qualifiedNameWithAs9 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedNameWithAs11 = default(Antlr3CstNode);

		object Use8_tree = default(object);
		object char_literal10_tree = default(object);
		object char_literal12_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "useStatement");
		DebugLocation(96, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:97:2: ( Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:97:4: Use qualifiedNameWithAs ( ',' qualifiedNameWithAs )* ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(97, 4);
			Use8=(IToken)Match(input,Use,Follow._Use_in_useStatement370); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Use8_tree = (object)adaptor.Create(Use8, "Use8", retval);
			adaptor.AddChild(root_0, Use8_tree);
			}
			DebugLocation(97, 8);
			PushFollow(Follow._qualifiedNameWithAs_in_useStatement372);
			qualifiedNameWithAs9=qualifiedNameWithAs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameWithAs9.Tree, qualifiedNameWithAs9, "qualifiedNameWithAs9", retval);
			DebugLocation(97, 28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:97:28: ( ',' qualifiedNameWithAs )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==Comma))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:97:29: ',' qualifiedNameWithAs
					{
					DebugLocation(97, 29);
					char_literal10=(IToken)Match(input,Comma,Follow._Comma_in_useStatement375); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal10_tree = (object)adaptor.Create(char_literal10, "char_literal10", retval);
					adaptor.AddChild(root_0, char_literal10_tree);
					}
					DebugLocation(97, 33);
					PushFollow(Follow._qualifiedNameWithAs_in_useStatement377);
					qualifiedNameWithAs11=qualifiedNameWithAs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameWithAs11.Tree, qualifiedNameWithAs11, "qualifiedNameWithAs11", retval);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(97, 55);
			char_literal12=(IToken)Match(input,SemiColon,Follow._SemiColon_in_useStatement381); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal12_tree = (object)adaptor.Create(char_literal12, "char_literal12", retval);
			adaptor.AddChild(root_0, char_literal12_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("useStatement", 3);
			LeaveRule("useStatement", 3);
			LeaveRule_useStatement();
			if (state.backtracking > 0) { Memoize(input, 3, useStatement_StartIndex); }

		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "useStatement"); }
		return retval;

	}
	// $ANTLR end "useStatement"

	partial void EnterRule_namespaceDefinition();
	partial void LeaveRule_namespaceDefinition();
	// $ANTLR start "namespaceDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:100:1: namespaceDefinition : Namespace qualifiedName ';' ;
	[GrammarRule("namespaceDefinition")]
	private Antlr3CstNode namespaceDefinition()
	{
		EnterRule_namespaceDefinition();
		EnterRule("namespaceDefinition", 4);
		var retval = new Antlr3CstNode("namespaceDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int namespaceDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Namespace13 = default(IToken);
		IToken char_literal15 = default(IToken);
		Antlr3CstNode qualifiedName14 = default(Antlr3CstNode);

		object Namespace13_tree = default(object);
		object char_literal15_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespaceDefinition");
		DebugLocation(100, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:101:2: ( Namespace qualifiedName ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:101:4: Namespace qualifiedName ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(101, 4);
			Namespace13=(IToken)Match(input,Namespace,Follow._Namespace_in_namespaceDefinition392); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Namespace13_tree = (object)adaptor.Create(Namespace13, "Namespace13", retval);
			adaptor.AddChild(root_0, Namespace13_tree);
			}
			DebugLocation(101, 14);
			PushFollow(Follow._qualifiedName_in_namespaceDefinition394);
			qualifiedName14=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName14.Tree, qualifiedName14, "qualifiedName14", retval);
			DebugLocation(101, 28);
			char_literal15=(IToken)Match(input,SemiColon,Follow._SemiColon_in_namespaceDefinition396); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal15_tree = (object)adaptor.Create(char_literal15, "char_literal15", retval);
			adaptor.AddChild(root_0, char_literal15_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespaceDefinition", 4);
			LeaveRule("namespaceDefinition", 4);
			LeaveRule_namespaceDefinition();
			if (state.backtracking > 0) { Memoize(input, 4, namespaceDefinition_StartIndex); }

		}
		DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceDefinition"); }
		return retval;

	}
	// $ANTLR end "namespaceDefinition"

	partial void EnterRule_namespaceBlock();
	partial void LeaveRule_namespaceBlock();
	// $ANTLR start "namespaceBlock"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:104:1: namespaceBlock : Namespace qualifiedName bracketedBlock ;
	[GrammarRule("namespaceBlock")]
	private Antlr3CstNode namespaceBlock()
	{
		EnterRule_namespaceBlock();
		EnterRule("namespaceBlock", 5);
		var retval = new Antlr3CstNode("namespaceBlock");
		
		retval.Start = (IToken)input.LT(1);
		int namespaceBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Namespace16 = default(IToken);
		Antlr3CstNode qualifiedName17 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock18 = default(Antlr3CstNode);

		object Namespace16_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespaceBlock");
		DebugLocation(104, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:105:2: ( Namespace qualifiedName bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:105:4: Namespace qualifiedName bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(105, 4);
			Namespace16=(IToken)Match(input,Namespace,Follow._Namespace_in_namespaceBlock407); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Namespace16_tree = (object)adaptor.Create(Namespace16, "Namespace16", retval);
			adaptor.AddChild(root_0, Namespace16_tree);
			}
			DebugLocation(105, 14);
			PushFollow(Follow._qualifiedName_in_namespaceBlock409);
			qualifiedName17=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName17.Tree, qualifiedName17, "qualifiedName17", retval);
			DebugLocation(105, 28);
			PushFollow(Follow._bracketedBlock_in_namespaceBlock411);
			bracketedBlock18=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock18.Tree, bracketedBlock18, "bracketedBlock18", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespaceBlock", 5);
			LeaveRule("namespaceBlock", 5);
			LeaveRule_namespaceBlock();
			if (state.backtracking > 0) { Memoize(input, 5, namespaceBlock_StartIndex); }

		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceBlock"); }
		return retval;

	}
	// $ANTLR end "namespaceBlock"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:108:1: statement : ({...}? => printExpr ';' | ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | namespaceBlock | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' | ';' );
	[GrammarRule("statement")]
	private Antlr3CstNode statement()
	{
		EnterRule_statement();
		EnterRule("statement", 6);
		var retval = new Antlr3CstNode("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal20 = default(IToken);
		IToken BodyString23 = default(IToken);
		IToken UnquotedString26 = default(IToken);
		IToken Colon27 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken char_literal34 = default(IToken);
		Antlr3CstNode printExpr19 = default(Antlr3CstNode);
		Antlr3CstNode printExpr21 = default(Antlr3CstNode);
		Antlr3CstNode simpleStatement22 = default(Antlr3CstNode);
		Antlr3CstNode namespaceBlock24 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock25 = default(Antlr3CstNode);
		Antlr3CstNode statement28 = default(Antlr3CstNode);
		Antlr3CstNode classDefinition29 = default(Antlr3CstNode);
		Antlr3CstNode interfaceDefinition30 = default(Antlr3CstNode);
		Antlr3CstNode complexStatement31 = default(Antlr3CstNode);
		Antlr3CstNode simpleStatement32 = default(Antlr3CstNode);

		object char_literal20_tree = default(object);
		object BodyString23_tree = default(object);
		object UnquotedString26_tree = default(object);
		object Colon27_tree = default(object);
		object char_literal33_tree = default(object);
		object char_literal34_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(108, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:109:2: ({...}? => printExpr ';' | ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | namespaceBlock | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' | ';' )
			int alt8=10;
			try { DebugEnterDecision(8, false);
			try
			{
				alt8 = dfa8.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:109:4: {...}? => printExpr ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(109, 4);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
				}
				DebugLocation(109, 37);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString=false;
				}
				DebugLocation(109, 74);
				PushFollow(Follow._printExpr_in_statement427);
				printExpr19=printExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr19.Tree, printExpr19, "printExpr19", retval);
				DebugLocation(109, 84);
				char_literal20=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement429); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal20_tree = (object)adaptor.Create(char_literal20, "char_literal20", retval);
				adaptor.AddChild(root_0, char_literal20_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(110, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? )
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				switch (input.LA(1))
				{
				case List:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case VariableName:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 129:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 130:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case New:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 5, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Bang:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 6, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Minus:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 7, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenRoundBracket:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 8, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IncrementOperator:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 9, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Clone:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 10, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Function:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 11, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Ampersand:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 12, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Die:
				case Empty:
				case Eval:
				case Exit:
				case HaltCompiler:
				case Isset:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 13, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case False:
				case True:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 14, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case UnsetType:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 15, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case SingleQuotedString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 16, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case DoubleQuotedString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 17, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case HereDoc:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 18, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case SuppressWarnings:
				case Tilde:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 19, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Plus:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 20, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Integer:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 21, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Real:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 22, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Null:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 23, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Include:
				case IncludeOnce:
				case Require:
				case RequireOnce:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 24, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case ArrayType:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 25, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenSquareBracket:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 26, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Echo:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 27, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case BodyString:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 28, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Print:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 29, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Global:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 30, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Static:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 31, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Const:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 32, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Break:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 33, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Continue:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 34, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Goto:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 35, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Return:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 36, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Throw:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 37, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Abstract:
				case And:
				case As:
				case BoolType:
				case BooleanType:
				case Case:
				case Catch:
				case Class:
				case Default:
				case Do:
				case DoubleType:
				case Else:
				case ElseIf:
				case Extends:
				case Finally:
				case FloatType:
				case For:
				case Foreach:
				case If:
				case Implements:
				case Instanceof:
				case IntType:
				case IntegerType:
				case Interface:
				case Namespace:
				case ObjectType:
				case Or:
				case Private:
				case Protected:
				case Public:
				case RealType:
				case StringType:
				case Switch:
				case Try:
				case UnquotedString:
				case Use:
				case Var:
				case While:
				case Xor:
					{
					int LA7_2 = input.LA(2);

					if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
					{
						alt7 = 1;
					}
					else if ((true))
					{
						alt7 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 38, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:6: {...}? => ( printExpr )?
					{
					DebugLocation(110, 6);
					if (!((expressionFollowsBodyString)))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
					}
					DebugLocation(110, 40);
					if (state.backtracking == 0)
					{
						expressionFollowsBodyString=false;
					}
					DebugLocation(110, 77);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: ( printExpr )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if (((LA5_1>=Abstract && LA5_1<=And)||(LA5_1>=ArrayType && LA5_1<=As)||LA5_1==Bang||(LA5_1>=BoolType && LA5_1<=Class)||LA5_1==Clone||(LA5_1>=Const && LA5_1<=Continue)||(LA5_1>=Default && LA5_1<=Die)||LA5_1==Do||(LA5_1>=DoubleQuotedString && LA5_1<=Empty)||(LA5_1>=Eval && LA5_1<=Exit)||(LA5_1>=Extends && LA5_1<=Foreach)||(LA5_1>=Function && LA5_1<=HaltCompiler)||LA5_1==HereDoc||(LA5_1>=If && LA5_1<=IncrementOperator)||(LA5_1>=Instanceof && LA5_1<=List)||LA5_1==Minus||(LA5_1>=Namespace && LA5_1<=Null)||LA5_1==ObjectType||(LA5_1>=OpenRoundBracket && LA5_1<=Or)||(LA5_1>=Plus && LA5_1<=Public)||(LA5_1>=Real && LA5_1<=Return)||LA5_1==SingleQuotedString||(LA5_1>=Static && LA5_1<=Try)||LA5_1==UnquotedString||(LA5_1>=UnsetType && LA5_1<=While)||(LA5_1>=Xor && LA5_1<=130)))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: printExpr
						{
						DebugLocation(110, 77);
						PushFollow(Follow._printExpr_in_statement442);
						printExpr21=printExpr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr21.Tree, printExpr21, "printExpr21", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(5); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: ( simpleStatement )?
					{
					DebugLocation(110, 90);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: ( simpleStatement )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if (((LA6_1>=Abstract && LA6_1<=And)||(LA6_1>=ArrayType && LA6_1<=As)||LA6_1==Bang||(LA6_1>=BoolType && LA6_1<=Class)||LA6_1==Clone||(LA6_1>=Const && LA6_1<=Continue)||(LA6_1>=Default && LA6_1<=Die)||LA6_1==Do||(LA6_1>=DoubleQuotedString && LA6_1<=Empty)||(LA6_1>=Eval && LA6_1<=Exit)||(LA6_1>=Extends && LA6_1<=Foreach)||(LA6_1>=Function && LA6_1<=HaltCompiler)||LA6_1==HereDoc||(LA6_1>=If && LA6_1<=IncrementOperator)||(LA6_1>=Instanceof && LA6_1<=List)||LA6_1==Minus||(LA6_1>=Namespace && LA6_1<=Null)||LA6_1==ObjectType||(LA6_1>=OpenRoundBracket && LA6_1<=Or)||(LA6_1>=Plus && LA6_1<=Public)||(LA6_1>=Real && LA6_1<=Return)||LA6_1==SingleQuotedString||(LA6_1>=Static && LA6_1<=Try)||LA6_1==UnquotedString||(LA6_1>=UnsetType && LA6_1<=While)||(LA6_1>=Xor && LA6_1<=130)))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: simpleStatement
						{
						DebugLocation(110, 90);
						PushFollow(Follow._simpleStatement_in_statement447);
						simpleStatement22=simpleStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement22.Tree, simpleStatement22, "simpleStatement22", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(6); }


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(111, 3);
				BodyString23=(IToken)Match(input,BodyString,Follow._BodyString_in_statement453); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BodyString23_tree = (object)adaptor.Create(BodyString23, "BodyString23", retval);
				adaptor.AddChild(root_0, BodyString23_tree);
				}
				DebugLocation(111, 14);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString = (BodyString23!=null?BodyString23.Text:default(string)).endsWith("<?=");
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:112:4: namespaceBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._namespaceBlock_in_statement460);
				namespaceBlock24=namespaceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespaceBlock24.Tree, namespaceBlock24, "namespaceBlock24", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:113:4: bracketedBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 4);
				PushFollow(Follow._bracketedBlock_in_statement465);
				bracketedBlock25=bracketedBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock25.Tree, bracketedBlock25, "bracketedBlock25", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:114:4: UnquotedString Colon statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 4);
				UnquotedString26=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_statement470); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString26_tree = (object)adaptor.Create(UnquotedString26, "UnquotedString26", retval);
				adaptor.AddChild(root_0, UnquotedString26_tree);
				}
				DebugLocation(114, 19);
				Colon27=(IToken)Match(input,Colon,Follow._Colon_in_statement472); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Colon27_tree = (object)adaptor.Create(Colon27, "Colon27", retval);
				adaptor.AddChild(root_0, Colon27_tree);
				}
				DebugLocation(114, 25);
				PushFollow(Follow._statement_in_statement474);
				statement28=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement28.Tree, statement28, "statement28", retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:115:4: classDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._classDefinition_in_statement479);
				classDefinition29=classDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDefinition29.Tree, classDefinition29, "classDefinition29", retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:116:4: interfaceDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(116, 4);
				PushFollow(Follow._interfaceDefinition_in_statement484);
				interfaceDefinition30=interfaceDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDefinition30.Tree, interfaceDefinition30, "interfaceDefinition30", retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:117:4: complexStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(117, 4);
				PushFollow(Follow._complexStatement_in_statement489);
				complexStatement31=complexStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, complexStatement31.Tree, complexStatement31, "complexStatement31", retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:118:4: simpleStatement ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(118, 4);
				PushFollow(Follow._simpleStatement_in_statement494);
				simpleStatement32=simpleStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement32.Tree, simpleStatement32, "simpleStatement32", retval);
				DebugLocation(118, 20);
				char_literal33=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement496); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal33_tree = (object)adaptor.Create(char_literal33, "char_literal33", retval);
				adaptor.AddChild(root_0, char_literal33_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:119:4: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(119, 4);
				char_literal34=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement501); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal34_tree = (object)adaptor.Create(char_literal34, "char_literal34", retval);
				adaptor.AddChild(root_0, char_literal34_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 6);
			LeaveRule("statement", 6);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 6, statement_StartIndex); }

		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_printExpr();
	partial void LeaveRule_printExpr();
	// $ANTLR start "printExpr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:122:1: printExpr : expression ;
	[GrammarRule("printExpr")]
	private Antlr3CstNode printExpr()
	{
		EnterRule_printExpr();
		EnterRule("printExpr", 7);
		var retval = new Antlr3CstNode("printExpr");
		
		retval.Start = (IToken)input.LT(1);
		int printExpr_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode expression35 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "printExpr");
		DebugLocation(122, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:123:2: ( expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:123:4: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(123, 4);
			PushFollow(Follow._expression_in_printExpr512);
			expression35=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression35.Tree, expression35, "expression35", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("printExpr", 7);
			LeaveRule("printExpr", 7);
			LeaveRule_printExpr();
			if (state.backtracking > 0) { Memoize(input, 7, printExpr_StartIndex); }

		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "printExpr"); }
		return retval;

	}
	// $ANTLR end "printExpr"

	partial void EnterRule_bracketedBlock();
	partial void LeaveRule_bracketedBlock();
	// $ANTLR start "bracketedBlock"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:126:1: bracketedBlock : '{' ( statement )* '}' ;
	[GrammarRule("bracketedBlock")]
	private Antlr3CstNode bracketedBlock()
	{
		EnterRule_bracketedBlock();
		EnterRule("bracketedBlock", 8);
		var retval = new Antlr3CstNode("bracketedBlock");
		
		retval.Start = (IToken)input.LT(1);
		int bracketedBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		Antlr3CstNode statement37 = default(Antlr3CstNode);

		object char_literal36_tree = default(object);
		object char_literal38_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bracketedBlock");
		DebugLocation(126, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:2: ( '{' ( statement )* '}' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:4: '{' ( statement )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(127, 4);
			char_literal36=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_bracketedBlock523); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal36_tree = (object)adaptor.Create(char_literal36, "char_literal36", retval);
			adaptor.AddChild(root_0, char_literal36_tree);
			}
			DebugLocation(127, 8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:8: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if (((LA9_1>=Abstract && LA9_1<=And)||(LA9_1>=ArrayType && LA9_1<=As)||(LA9_1>=Bang && LA9_1<=BodyString)||(LA9_1>=BoolType && LA9_1<=Class)||LA9_1==Clone||(LA9_1>=Const && LA9_1<=Continue)||(LA9_1>=Default && LA9_1<=Die)||LA9_1==Do||(LA9_1>=DoubleQuotedString && LA9_1<=Empty)||(LA9_1>=Eval && LA9_1<=Exit)||(LA9_1>=Extends && LA9_1<=Foreach)||(LA9_1>=Function && LA9_1<=HaltCompiler)||LA9_1==HereDoc||(LA9_1>=If && LA9_1<=IncrementOperator)||(LA9_1>=Instanceof && LA9_1<=List)||LA9_1==Minus||(LA9_1>=Namespace && LA9_1<=Null)||LA9_1==ObjectType||(LA9_1>=OpenCurlyBracket && LA9_1<=Or)||(LA9_1>=Plus && LA9_1<=Public)||(LA9_1>=Real && LA9_1<=SemiColon)||LA9_1==SingleQuotedString||(LA9_1>=Static && LA9_1<=Try)||LA9_1==UnquotedString||(LA9_1>=UnsetType && LA9_1<=While)||(LA9_1>=Xor && LA9_1<=130)))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:8: statement
					{
					DebugLocation(127, 8);
					PushFollow(Follow._statement_in_bracketedBlock525);
					statement37=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement37.Tree, statement37, "statement37", retval);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(127, 19);
			char_literal38=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_bracketedBlock528); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal38_tree = (object)adaptor.Create(char_literal38, "char_literal38", retval);
			adaptor.AddChild(root_0, char_literal38_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracketedBlock", 8);
			LeaveRule("bracketedBlock", 8);
			LeaveRule_bracketedBlock();
			if (state.backtracking > 0) { Memoize(input, 8, bracketedBlock_StartIndex); }

		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "bracketedBlock"); }
		return retval;

	}
	// $ANTLR end "bracketedBlock"

	partial void EnterRule_interfaceDefinition();
	partial void LeaveRule_interfaceDefinition();
	// $ANTLR start "interfaceDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:130:1: interfaceDefinition : Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket ;
	[GrammarRule("interfaceDefinition")]
	private Antlr3CstNode interfaceDefinition()
	{
		EnterRule_interfaceDefinition();
		EnterRule("interfaceDefinition", 9);
		var retval = new Antlr3CstNode("interfaceDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Interface39 = default(IToken);
		IToken OpenCurlyBracket42 = default(IToken);
		IToken CloseCurlyBracket44 = default(IToken);
		Antlr3CstNode qualifiedName40 = default(Antlr3CstNode);
		Antlr3CstNode interfaceExtends41 = default(Antlr3CstNode);
		Antlr3CstNode interfaceMember43 = default(Antlr3CstNode);

		object Interface39_tree = default(object);
		object OpenCurlyBracket42_tree = default(object);
		object CloseCurlyBracket44_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceDefinition");
		DebugLocation(130, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:131:2: ( Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:131:4: Interface qualifiedName ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(131, 4);
			Interface39=(IToken)Match(input,Interface,Follow._Interface_in_interfaceDefinition539); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Interface39_tree = (object)adaptor.Create(Interface39, "Interface39", retval);
			adaptor.AddChild(root_0, Interface39_tree);
			}
			DebugLocation(131, 14);
			PushFollow(Follow._qualifiedName_in_interfaceDefinition541);
			qualifiedName40=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName40.Tree, qualifiedName40, "qualifiedName40", retval);
			DebugLocation(131, 28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:131:28: ( interfaceExtends )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==Extends))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:131:28: interfaceExtends
				{
				DebugLocation(131, 28);
				PushFollow(Follow._interfaceExtends_in_interfaceDefinition543);
				interfaceExtends41=interfaceExtends();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceExtends41.Tree, interfaceExtends41, "interfaceExtends41", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(132, 4);
			OpenCurlyBracket42=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_interfaceDefinition549); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenCurlyBracket42_tree = (object)adaptor.Create(OpenCurlyBracket42, "OpenCurlyBracket42", retval);
			adaptor.AddChild(root_0, OpenCurlyBracket42_tree);
			}
			DebugLocation(132, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:132:21: ( interfaceMember )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==Abstract||LA11_1==Const||LA11_1==Function||(LA11_1>=Private && LA11_1<=Public)||LA11_1==Static))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:132:21: interfaceMember
					{
					DebugLocation(132, 21);
					PushFollow(Follow._interfaceMember_in_interfaceDefinition551);
					interfaceMember43=interfaceMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceMember43.Tree, interfaceMember43, "interfaceMember43", retval);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(132, 38);
			CloseCurlyBracket44=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_interfaceDefinition554); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseCurlyBracket44_tree = (object)adaptor.Create(CloseCurlyBracket44, "CloseCurlyBracket44", retval);
			adaptor.AddChild(root_0, CloseCurlyBracket44_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceDefinition", 9);
			LeaveRule("interfaceDefinition", 9);
			LeaveRule_interfaceDefinition();
			if (state.backtracking > 0) { Memoize(input, 9, interfaceDefinition_StartIndex); }

		}
		DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceDefinition"); }
		return retval;

	}
	// $ANTLR end "interfaceDefinition"

	partial void EnterRule_interfaceExtends();
	partial void LeaveRule_interfaceExtends();
	// $ANTLR start "interfaceExtends"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:135:1: interfaceExtends : Extends qualifiedName ( Comma qualifiedName )* ;
	[GrammarRule("interfaceExtends")]
	private Antlr3CstNode interfaceExtends()
	{
		EnterRule_interfaceExtends();
		EnterRule("interfaceExtends", 10);
		var retval = new Antlr3CstNode("interfaceExtends");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceExtends_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Extends45 = default(IToken);
		IToken Comma47 = default(IToken);
		Antlr3CstNode qualifiedName46 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName48 = default(Antlr3CstNode);

		object Extends45_tree = default(object);
		object Comma47_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceExtends");
		DebugLocation(135, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:136:2: ( Extends qualifiedName ( Comma qualifiedName )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:136:4: Extends qualifiedName ( Comma qualifiedName )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(136, 4);
			Extends45=(IToken)Match(input,Extends,Follow._Extends_in_interfaceExtends565); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Extends45_tree = (object)adaptor.Create(Extends45, "Extends45", retval);
			adaptor.AddChild(root_0, Extends45_tree);
			}
			DebugLocation(136, 12);
			PushFollow(Follow._qualifiedName_in_interfaceExtends567);
			qualifiedName46=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName46.Tree, qualifiedName46, "qualifiedName46", retval);
			DebugLocation(136, 26);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:136:26: ( Comma qualifiedName )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==Comma))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:136:27: Comma qualifiedName
					{
					DebugLocation(136, 27);
					Comma47=(IToken)Match(input,Comma,Follow._Comma_in_interfaceExtends570); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Comma47_tree = (object)adaptor.Create(Comma47, "Comma47", retval);
					adaptor.AddChild(root_0, Comma47_tree);
					}
					DebugLocation(136, 33);
					PushFollow(Follow._qualifiedName_in_interfaceExtends572);
					qualifiedName48=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName48.Tree, qualifiedName48, "qualifiedName48", retval);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceExtends", 10);
			LeaveRule("interfaceExtends", 10);
			LeaveRule_interfaceExtends();
			if (state.backtracking > 0) { Memoize(input, 10, interfaceExtends_StartIndex); }

		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtends"); }
		return retval;

	}
	// $ANTLR end "interfaceExtends"

	partial void EnterRule_interfaceMember();
	partial void LeaveRule_interfaceMember();
	// $ANTLR start "interfaceMember"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:139:1: interfaceMember : ( constDefinition ';' | ( fieldModifier )* Function qualifiedName parametersDefinition ';' );
	[GrammarRule("interfaceMember")]
	private Antlr3CstNode interfaceMember()
	{
		EnterRule_interfaceMember();
		EnterRule("interfaceMember", 11);
		var retval = new Antlr3CstNode("interfaceMember");
		
		retval.Start = (IToken)input.LT(1);
		int interfaceMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal50 = default(IToken);
		IToken Function52 = default(IToken);
		IToken char_literal55 = default(IToken);
		Antlr3CstNode constDefinition49 = default(Antlr3CstNode);
		Antlr3CstNode fieldModifier51 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName53 = default(Antlr3CstNode);
		Antlr3CstNode parametersDefinition54 = default(Antlr3CstNode);

		object char_literal50_tree = default(object);
		object Function52_tree = default(object);
		object char_literal55_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceMember");
		DebugLocation(139, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:140:2: ( constDefinition ';' | ( fieldModifier )* Function qualifiedName parametersDefinition ';' )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==Const))
			{
				alt14 = 1;
			}
			else if ((LA14_1==Abstract||LA14_1==Function||(LA14_1>=Private && LA14_1<=Public)||LA14_1==Static))
			{
				alt14 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:140:4: constDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 4);
				PushFollow(Follow._constDefinition_in_interfaceMember585);
				constDefinition49=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition49.Tree, constDefinition49, "constDefinition49", retval);
				DebugLocation(140, 20);
				char_literal50=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember587); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal50_tree = (object)adaptor.Create(char_literal50, "char_literal50", retval);
				adaptor.AddChild(root_0, char_literal50_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:141:4: ( fieldModifier )* Function qualifiedName parametersDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:141:4: ( fieldModifier )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1==Abstract||(LA13_1>=Private && LA13_1<=Public)||LA13_1==Static))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:141:4: fieldModifier
						{
						DebugLocation(141, 4);
						PushFollow(Follow._fieldModifier_in_interfaceMember592);
						fieldModifier51=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier51.Tree, fieldModifier51, "fieldModifier51", retval);

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }

				DebugLocation(141, 19);
				Function52=(IToken)Match(input,Function,Follow._Function_in_interfaceMember595); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function52_tree = (object)adaptor.Create(Function52, "Function52", retval);
				adaptor.AddChild(root_0, Function52_tree);
				}
				DebugLocation(141, 28);
				PushFollow(Follow._qualifiedName_in_interfaceMember597);
				qualifiedName53=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName53.Tree, qualifiedName53, "qualifiedName53", retval);
				DebugLocation(141, 42);
				PushFollow(Follow._parametersDefinition_in_interfaceMember599);
				parametersDefinition54=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition54.Tree, parametersDefinition54, "parametersDefinition54", retval);
				DebugLocation(141, 63);
				char_literal55=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember601); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal55_tree = (object)adaptor.Create(char_literal55, "char_literal55", retval);
				adaptor.AddChild(root_0, char_literal55_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceMember", 11);
			LeaveRule("interfaceMember", 11);
			LeaveRule_interfaceMember();
			if (state.backtracking > 0) { Memoize(input, 11, interfaceMember_StartIndex); }

		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "interfaceMember"); }
		return retval;

	}
	// $ANTLR end "interfaceMember"

	partial void EnterRule_classDefinition();
	partial void LeaveRule_classDefinition();
	// $ANTLR start "classDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:144:1: classDefinition : ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket ;
	[GrammarRule("classDefinition")]
	private Antlr3CstNode classDefinition()
	{
		EnterRule_classDefinition();
		EnterRule("classDefinition", 12);
		var retval = new Antlr3CstNode("classDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int classDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Class57 = default(IToken);
		IToken Extends59 = default(IToken);
		IToken OpenCurlyBracket62 = default(IToken);
		IToken CloseCurlyBracket64 = default(IToken);
		Antlr3CstNode classModifier56 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName58 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName60 = default(Antlr3CstNode);
		Antlr3CstNode classImplements61 = default(Antlr3CstNode);
		Antlr3CstNode classMember63 = default(Antlr3CstNode);

		object Class57_tree = default(object);
		object Extends59_tree = default(object);
		object OpenCurlyBracket62_tree = default(object);
		object CloseCurlyBracket64_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classDefinition");
		DebugLocation(144, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:145:2: ( ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:145:6: ( classModifier )? Class qualifiedName ( Extends qualifiedName )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(145, 6);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:145:6: ( classModifier )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==Abstract))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:145:6: classModifier
				{
				DebugLocation(145, 6);
				PushFollow(Follow._classModifier_in_classDefinition614);
				classModifier56=classModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classModifier56.Tree, classModifier56, "classModifier56", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(146, 3);
			Class57=(IToken)Match(input,Class,Follow._Class_in_classDefinition620); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Class57_tree = (object)adaptor.Create(Class57, "Class57", retval);
			adaptor.AddChild(root_0, Class57_tree);
			}
			DebugLocation(146, 9);
			PushFollow(Follow._qualifiedName_in_classDefinition622);
			qualifiedName58=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName58.Tree, qualifiedName58, "qualifiedName58", retval);
			DebugLocation(147, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:147:3: ( Extends qualifiedName )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==Extends))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:147:4: Extends qualifiedName
				{
				DebugLocation(147, 4);
				Extends59=(IToken)Match(input,Extends,Follow._Extends_in_classDefinition628); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Extends59_tree = (object)adaptor.Create(Extends59, "Extends59", retval);
				adaptor.AddChild(root_0, Extends59_tree);
				}
				DebugLocation(147, 12);
				PushFollow(Follow._qualifiedName_in_classDefinition630);
				qualifiedName60=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName60.Tree, qualifiedName60, "qualifiedName60", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(148, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:148:3: ( classImplements )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==Implements))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:148:3: classImplements
				{
				DebugLocation(148, 3);
				PushFollow(Follow._classImplements_in_classDefinition637);
				classImplements61=classImplements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classImplements61.Tree, classImplements61, "classImplements61", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(149, 3);
			OpenCurlyBracket62=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_classDefinition642); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenCurlyBracket62_tree = (object)adaptor.Create(OpenCurlyBracket62, "OpenCurlyBracket62", retval);
			adaptor.AddChild(root_0, OpenCurlyBracket62_tree);
			}
			DebugLocation(150, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:150:3: ( classMember )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==Abstract||LA18_1==Const||LA18_1==Function||(LA18_1>=Private && LA18_1<=Public)||LA18_1==Static||(LA18_1>=Var && LA18_1<=VariableName)))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:150:3: classMember
					{
					DebugLocation(150, 3);
					PushFollow(Follow._classMember_in_classDefinition646);
					classMember63=classMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classMember63.Tree, classMember63, "classMember63", retval);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }

			DebugLocation(151, 3);
			CloseCurlyBracket64=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_classDefinition651); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseCurlyBracket64_tree = (object)adaptor.Create(CloseCurlyBracket64, "CloseCurlyBracket64", retval);
			adaptor.AddChild(root_0, CloseCurlyBracket64_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classDefinition", 12);
			LeaveRule("classDefinition", 12);
			LeaveRule_classDefinition();
			if (state.backtracking > 0) { Memoize(input, 12, classDefinition_StartIndex); }

		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "classDefinition"); }
		return retval;

	}
	// $ANTLR end "classDefinition"

	partial void EnterRule_classImplements();
	partial void LeaveRule_classImplements();
	// $ANTLR start "classImplements"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:154:1: classImplements : Implements ( qualifiedName ( Comma qualifiedName )* ) ;
	[GrammarRule("classImplements")]
	private Antlr3CstNode classImplements()
	{
		EnterRule_classImplements();
		EnterRule("classImplements", 13);
		var retval = new Antlr3CstNode("classImplements");
		
		retval.Start = (IToken)input.LT(1);
		int classImplements_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Implements65 = default(IToken);
		IToken Comma67 = default(IToken);
		Antlr3CstNode qualifiedName66 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName68 = default(Antlr3CstNode);

		object Implements65_tree = default(object);
		object Comma67_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classImplements");
		DebugLocation(154, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:2: ( Implements ( qualifiedName ( Comma qualifiedName )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:5: Implements ( qualifiedName ( Comma qualifiedName )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(155, 5);
			Implements65=(IToken)Match(input,Implements,Follow._Implements_in_classImplements665); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Implements65_tree = (object)adaptor.Create(Implements65, "Implements65", retval);
			adaptor.AddChild(root_0, Implements65_tree);
			}
			DebugLocation(155, 16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:16: ( qualifiedName ( Comma qualifiedName )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:17: qualifiedName ( Comma qualifiedName )*
			{
			DebugLocation(155, 17);
			PushFollow(Follow._qualifiedName_in_classImplements668);
			qualifiedName66=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName66.Tree, qualifiedName66, "qualifiedName66", retval);
			DebugLocation(155, 31);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:31: ( Comma qualifiedName )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==Comma))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:155:32: Comma qualifiedName
					{
					DebugLocation(155, 32);
					Comma67=(IToken)Match(input,Comma,Follow._Comma_in_classImplements671); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Comma67_tree = (object)adaptor.Create(Comma67, "Comma67", retval);
					adaptor.AddChild(root_0, Comma67_tree);
					}
					DebugLocation(155, 38);
					PushFollow(Follow._qualifiedName_in_classImplements673);
					qualifiedName68=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName68.Tree, qualifiedName68, "qualifiedName68", retval);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classImplements", 13);
			LeaveRule("classImplements", 13);
			LeaveRule_classImplements();
			if (state.backtracking > 0) { Memoize(input, 13, classImplements_StartIndex); }

		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "classImplements"); }
		return retval;

	}
	// $ANTLR end "classImplements"

	partial void EnterRule_classMember();
	partial void LeaveRule_classMember();
	// $ANTLR start "classMember"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:158:1: classMember : ( ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' );
	[GrammarRule("classMember")]
	private Antlr3CstNode classMember()
	{
		EnterRule_classMember();
		EnterRule("classMember", 14);
		var retval = new Antlr3CstNode("classMember");
		
		retval.Start = (IToken)input.LT(1);
		int classMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function70 = default(IToken);
		IToken char_literal74 = default(IToken);
		IToken char_literal76 = default(IToken);
		IToken char_literal78 = default(IToken);
		IToken char_literal80 = default(IToken);
		Antlr3CstNode fieldModifier69 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName71 = default(Antlr3CstNode);
		Antlr3CstNode parametersDefinition72 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock73 = default(Antlr3CstNode);
		Antlr3CstNode constDefinition75 = default(Antlr3CstNode);
		Antlr3CstNode varDefinition77 = default(Antlr3CstNode);
		Antlr3CstNode fieldDefinition79 = default(Antlr3CstNode);

		object Function70_tree = default(object);
		object char_literal74_tree = default(object);
		object char_literal76_tree = default(object);
		object char_literal78_tree = default(object);
		object char_literal80_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classMember");
		DebugLocation(158, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:2: ( ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' )
			int alt22=4;
			try { DebugEnterDecision(22, false);
			try
			{
				alt22 = dfa22.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:4: ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(159, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:4: ( fieldModifier )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_1 = input.LA(1);

					if ((LA20_1==Abstract||(LA20_1>=Private && LA20_1<=Public)||LA20_1==Static))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:4: fieldModifier
						{
						DebugLocation(159, 4);
						PushFollow(Follow._fieldModifier_in_classMember687);
						fieldModifier69=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier69.Tree, fieldModifier69, "fieldModifier69", retval);

						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }

				DebugLocation(159, 19);
				Function70=(IToken)Match(input,Function,Follow._Function_in_classMember690); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function70_tree = (object)adaptor.Create(Function70, "Function70", retval);
				adaptor.AddChild(root_0, Function70_tree);
				}
				DebugLocation(159, 28);
				PushFollow(Follow._qualifiedName_in_classMember692);
				qualifiedName71=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName71.Tree, qualifiedName71, "qualifiedName71", retval);
				DebugLocation(159, 42);
				PushFollow(Follow._parametersDefinition_in_classMember694);
				parametersDefinition72=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition72.Tree, parametersDefinition72, "parametersDefinition72", retval);
				DebugLocation(159, 63);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:63: ( bracketedBlock | ';' )
				int alt21=2;
				try { DebugEnterSubRule(21);
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==OpenCurlyBracket))
				{
					alt21 = 1;
				}
				else if ((LA21_1==SemiColon))
				{
					alt21 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:64: bracketedBlock
					{
					DebugLocation(159, 64);
					PushFollow(Follow._bracketedBlock_in_classMember697);
					bracketedBlock73=bracketedBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock73.Tree, bracketedBlock73, "bracketedBlock73", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:159:81: ';'
					{
					DebugLocation(159, 81);
					char_literal74=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember701); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal74_tree = (object)adaptor.Create(char_literal74, "char_literal74", retval);
					adaptor.AddChild(root_0, char_literal74_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(21); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:160:4: constDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._constDefinition_in_classMember707);
				constDefinition75=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition75.Tree, constDefinition75, "constDefinition75", retval);
				DebugLocation(160, 20);
				char_literal76=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember709); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal76_tree = (object)adaptor.Create(char_literal76, "char_literal76", retval);
				adaptor.AddChild(root_0, char_literal76_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:161:4: varDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._varDefinition_in_classMember714);
				varDefinition77=varDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, varDefinition77.Tree, varDefinition77, "varDefinition77", retval);
				DebugLocation(161, 18);
				char_literal78=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember716); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal78_tree = (object)adaptor.Create(char_literal78, "char_literal78", retval);
				adaptor.AddChild(root_0, char_literal78_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:162:4: fieldDefinition ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._fieldDefinition_in_classMember721);
				fieldDefinition79=fieldDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fieldDefinition79.Tree, fieldDefinition79, "fieldDefinition79", retval);
				DebugLocation(162, 20);
				char_literal80=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember723); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal80_tree = (object)adaptor.Create(char_literal80, "char_literal80", retval);
				adaptor.AddChild(root_0, char_literal80_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classMember", 14);
			LeaveRule("classMember", 14);
			LeaveRule_classMember();
			if (state.backtracking > 0) { Memoize(input, 14, classMember_StartIndex); }

		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "classMember"); }
		return retval;

	}
	// $ANTLR end "classMember"

	partial void EnterRule_constDefinition();
	partial void LeaveRule_constDefinition();
	// $ANTLR start "constDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:165:1: constDefinition : Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )* ;
	[GrammarRule("constDefinition")]
	private Antlr3CstNode constDefinition()
	{
		EnterRule_constDefinition();
		EnterRule("constDefinition", 15);
		var retval = new Antlr3CstNode("constDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int constDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Const81 = default(IToken);
		IToken Equals83 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken Equals87 = default(IToken);
		Antlr3CstNode qualifiedName82 = default(Antlr3CstNode);
		Antlr3CstNode atom84 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName86 = default(Antlr3CstNode);
		Antlr3CstNode atom88 = default(Antlr3CstNode);

		object Const81_tree = default(object);
		object Equals83_tree = default(object);
		object char_literal85_tree = default(object);
		object Equals87_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constDefinition");
		DebugLocation(165, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:2: ( Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:4: Const qualifiedName ( Equals atom )? ( ',' qualifiedName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(166, 4);
			Const81=(IToken)Match(input,Const,Follow._Const_in_constDefinition734); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Const81_tree = (object)adaptor.Create(Const81, "Const81", retval);
			adaptor.AddChild(root_0, Const81_tree);
			}
			DebugLocation(166, 10);
			PushFollow(Follow._qualifiedName_in_constDefinition736);
			qualifiedName82=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName82.Tree, qualifiedName82, "qualifiedName82", retval);
			DebugLocation(166, 24);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:24: ( Equals atom )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==Equals))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:25: Equals atom
				{
				DebugLocation(166, 25);
				Equals83=(IToken)Match(input,Equals,Follow._Equals_in_constDefinition739); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals83_tree = (object)adaptor.Create(Equals83, "Equals83", retval);
				adaptor.AddChild(root_0, Equals83_tree);
				}
				DebugLocation(166, 32);
				PushFollow(Follow._atom_in_constDefinition741);
				atom84=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom84.Tree, atom84, "atom84", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(166, 39);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:39: ( ',' qualifiedName ( Equals atom )? )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==Comma))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:40: ',' qualifiedName ( Equals atom )?
					{
					DebugLocation(166, 40);
					char_literal85=(IToken)Match(input,Comma,Follow._Comma_in_constDefinition746); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal85_tree = (object)adaptor.Create(char_literal85, "char_literal85", retval);
					adaptor.AddChild(root_0, char_literal85_tree);
					}
					DebugLocation(166, 44);
					PushFollow(Follow._qualifiedName_in_constDefinition748);
					qualifiedName86=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName86.Tree, qualifiedName86, "qualifiedName86", retval);
					DebugLocation(166, 58);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:58: ( Equals atom )?
					int alt24=2;
					try { DebugEnterSubRule(24);
					try { DebugEnterDecision(24, false);
					int LA24_1 = input.LA(1);

					if ((LA24_1==Equals))
					{
						alt24 = 1;
					}
					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:166:59: Equals atom
						{
						DebugLocation(166, 59);
						Equals87=(IToken)Match(input,Equals,Follow._Equals_in_constDefinition751); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals87_tree = (object)adaptor.Create(Equals87, "Equals87", retval);
						adaptor.AddChild(root_0, Equals87_tree);
						}
						DebugLocation(166, 66);
						PushFollow(Follow._atom_in_constDefinition753);
						atom88=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom88.Tree, atom88, "atom88", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(24); }


					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constDefinition", 15);
			LeaveRule("constDefinition", 15);
			LeaveRule_constDefinition();
			if (state.backtracking > 0) { Memoize(input, 15, constDefinition_StartIndex); }

		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "constDefinition"); }
		return retval;

	}
	// $ANTLR end "constDefinition"

	partial void EnterRule_varDefinition();
	partial void LeaveRule_varDefinition();
	// $ANTLR start "varDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:169:1: varDefinition : Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* ;
	[GrammarRule("varDefinition")]
	private Antlr3CstNode varDefinition()
	{
		EnterRule_varDefinition();
		EnterRule("varDefinition", 16);
		var retval = new Antlr3CstNode("varDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int varDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Var89 = default(IToken);
		IToken VariableName90 = default(IToken);
		IToken Equals91 = default(IToken);
		IToken char_literal93 = default(IToken);
		IToken VariableName94 = default(IToken);
		IToken Equals95 = default(IToken);
		Antlr3CstNode atom92 = default(Antlr3CstNode);
		Antlr3CstNode atom96 = default(Antlr3CstNode);

		object Var89_tree = default(object);
		object VariableName90_tree = default(object);
		object Equals91_tree = default(object);
		object char_literal93_tree = default(object);
		object VariableName94_tree = default(object);
		object Equals95_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "varDefinition");
		DebugLocation(169, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:2: ( Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:4: Var VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(170, 4);
			Var89=(IToken)Match(input,Var,Follow._Var_in_varDefinition768); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Var89_tree = (object)adaptor.Create(Var89, "Var89", retval);
			adaptor.AddChild(root_0, Var89_tree);
			}
			DebugLocation(170, 8);
			VariableName90=(IToken)Match(input,VariableName,Follow._VariableName_in_varDefinition770); if (state.failed) return retval;
			if (state.backtracking == 0) {
			VariableName90_tree = (object)adaptor.Create(VariableName90, "VariableName90", retval);
			adaptor.AddChild(root_0, VariableName90_tree);
			}
			DebugLocation(170, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:21: ( Equals atom )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==Equals))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:22: Equals atom
				{
				DebugLocation(170, 22);
				Equals91=(IToken)Match(input,Equals,Follow._Equals_in_varDefinition773); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals91_tree = (object)adaptor.Create(Equals91, "Equals91", retval);
				adaptor.AddChild(root_0, Equals91_tree);
				}
				DebugLocation(170, 29);
				PushFollow(Follow._atom_in_varDefinition775);
				atom92=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom92.Tree, atom92, "atom92", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(170, 36);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:36: ( ',' VariableName ( Equals atom )? )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==Comma))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:37: ',' VariableName ( Equals atom )?
					{
					DebugLocation(170, 37);
					char_literal93=(IToken)Match(input,Comma,Follow._Comma_in_varDefinition780); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal93_tree = (object)adaptor.Create(char_literal93, "char_literal93", retval);
					adaptor.AddChild(root_0, char_literal93_tree);
					}
					DebugLocation(170, 41);
					VariableName94=(IToken)Match(input,VariableName,Follow._VariableName_in_varDefinition782); if (state.failed) return retval;
					if (state.backtracking == 0) {
					VariableName94_tree = (object)adaptor.Create(VariableName94, "VariableName94", retval);
					adaptor.AddChild(root_0, VariableName94_tree);
					}
					DebugLocation(170, 54);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:54: ( Equals atom )?
					int alt27=2;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, false);
					int LA27_1 = input.LA(1);

					if ((LA27_1==Equals))
					{
						alt27 = 1;
					}
					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:170:55: Equals atom
						{
						DebugLocation(170, 55);
						Equals95=(IToken)Match(input,Equals,Follow._Equals_in_varDefinition785); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals95_tree = (object)adaptor.Create(Equals95, "Equals95", retval);
						adaptor.AddChild(root_0, Equals95_tree);
						}
						DebugLocation(170, 62);
						PushFollow(Follow._atom_in_varDefinition787);
						atom96=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom96.Tree, atom96, "atom96", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(27); }


					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("varDefinition", 16);
			LeaveRule("varDefinition", 16);
			LeaveRule_varDefinition();
			if (state.backtracking > 0) { Memoize(input, 16, varDefinition_StartIndex); }

		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "varDefinition"); }
		return retval;

	}
	// $ANTLR end "varDefinition"

	partial void EnterRule_fieldDefinition();
	partial void LeaveRule_fieldDefinition();
	// $ANTLR start "fieldDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:173:1: fieldDefinition : ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* ;
	[GrammarRule("fieldDefinition")]
	private Antlr3CstNode fieldDefinition()
	{
		EnterRule_fieldDefinition();
		EnterRule("fieldDefinition", 17);
		var retval = new Antlr3CstNode("fieldDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int fieldDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName98 = default(IToken);
		IToken Equals99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken VariableName102 = default(IToken);
		IToken Equals103 = default(IToken);
		Antlr3CstNode fieldModifier97 = default(Antlr3CstNode);
		Antlr3CstNode atom100 = default(Antlr3CstNode);
		Antlr3CstNode atom104 = default(Antlr3CstNode);

		object VariableName98_tree = default(object);
		object Equals99_tree = default(object);
		object char_literal101_tree = default(object);
		object VariableName102_tree = default(object);
		object Equals103_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldDefinition");
		DebugLocation(173, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:2: ( ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:4: ( fieldModifier )* VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(174, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:4: ( fieldModifier )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==Abstract||(LA29_1>=Private && LA29_1<=Public)||LA29_1==Static))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:4: fieldModifier
					{
					DebugLocation(174, 4);
					PushFollow(Follow._fieldModifier_in_fieldDefinition802);
					fieldModifier97=fieldModifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fieldModifier97.Tree, fieldModifier97, "fieldModifier97", retval);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(174, 19);
			VariableName98=(IToken)Match(input,VariableName,Follow._VariableName_in_fieldDefinition805); if (state.failed) return retval;
			if (state.backtracking == 0) {
			VariableName98_tree = (object)adaptor.Create(VariableName98, "VariableName98", retval);
			adaptor.AddChild(root_0, VariableName98_tree);
			}
			DebugLocation(174, 32);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:32: ( Equals atom )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==Equals))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:33: Equals atom
				{
				DebugLocation(174, 33);
				Equals99=(IToken)Match(input,Equals,Follow._Equals_in_fieldDefinition808); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals99_tree = (object)adaptor.Create(Equals99, "Equals99", retval);
				adaptor.AddChild(root_0, Equals99_tree);
				}
				DebugLocation(174, 40);
				PushFollow(Follow._atom_in_fieldDefinition810);
				atom100=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom100.Tree, atom100, "atom100", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(174, 47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:47: ( ',' VariableName ( Equals atom )? )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==Comma))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:48: ',' VariableName ( Equals atom )?
					{
					DebugLocation(174, 48);
					char_literal101=(IToken)Match(input,Comma,Follow._Comma_in_fieldDefinition815); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal101_tree = (object)adaptor.Create(char_literal101, "char_literal101", retval);
					adaptor.AddChild(root_0, char_literal101_tree);
					}
					DebugLocation(174, 52);
					VariableName102=(IToken)Match(input,VariableName,Follow._VariableName_in_fieldDefinition817); if (state.failed) return retval;
					if (state.backtracking == 0) {
					VariableName102_tree = (object)adaptor.Create(VariableName102, "VariableName102", retval);
					adaptor.AddChild(root_0, VariableName102_tree);
					}
					DebugLocation(174, 65);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:65: ( Equals atom )?
					int alt31=2;
					try { DebugEnterSubRule(31);
					try { DebugEnterDecision(31, false);
					int LA31_1 = input.LA(1);

					if ((LA31_1==Equals))
					{
						alt31 = 1;
					}
					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:174:66: Equals atom
						{
						DebugLocation(174, 66);
						Equals103=(IToken)Match(input,Equals,Follow._Equals_in_fieldDefinition820); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Equals103_tree = (object)adaptor.Create(Equals103, "Equals103", retval);
						adaptor.AddChild(root_0, Equals103_tree);
						}
						DebugLocation(174, 73);
						PushFollow(Follow._atom_in_fieldDefinition822);
						atom104=atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, atom104.Tree, atom104, "atom104", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(31); }


					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldDefinition", 17);
			LeaveRule("fieldDefinition", 17);
			LeaveRule_fieldDefinition();
			if (state.backtracking > 0) { Memoize(input, 17, fieldDefinition_StartIndex); }

		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "fieldDefinition"); }
		return retval;

	}
	// $ANTLR end "fieldDefinition"

	partial void EnterRule_classModifier();
	partial void LeaveRule_classModifier();
	// $ANTLR start "classModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:177:1: classModifier : Abstract ;
	[GrammarRule("classModifier")]
	private Antlr3CstNode classModifier()
	{
		EnterRule_classModifier();
		EnterRule("classModifier", 18);
		var retval = new Antlr3CstNode("classModifier");
		
		retval.Start = (IToken)input.LT(1);
		int classModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Abstract105 = default(IToken);

		object Abstract105_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classModifier");
		DebugLocation(177, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:178:2: ( Abstract )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:178:4: Abstract
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(178, 4);
			Abstract105=(IToken)Match(input,Abstract,Follow._Abstract_in_classModifier838); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Abstract105_tree = (object)adaptor.Create(Abstract105, "Abstract105", retval);
			adaptor.AddChild(root_0, Abstract105_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classModifier", 18);
			LeaveRule("classModifier", 18);
			LeaveRule_classModifier();
			if (state.backtracking > 0) { Memoize(input, 18, classModifier_StartIndex); }

		}
		DebugLocation(178, 11);
		} finally { DebugExitRule(GrammarFileName, "classModifier"); }
		return retval;

	}
	// $ANTLR end "classModifier"

	partial void EnterRule_fieldModifier();
	partial void LeaveRule_fieldModifier();
	// $ANTLR start "fieldModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:180:1: fieldModifier : ( accessModifier | Abstract | Static );
	[GrammarRule("fieldModifier")]
	private Antlr3CstNode fieldModifier()
	{
		EnterRule_fieldModifier();
		EnterRule("fieldModifier", 19);
		var retval = new Antlr3CstNode("fieldModifier");
		
		retval.Start = (IToken)input.LT(1);
		int fieldModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Abstract107 = default(IToken);
		IToken Static108 = default(IToken);
		Antlr3CstNode accessModifier106 = default(Antlr3CstNode);

		object Abstract107_tree = default(object);
		object Static108_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldModifier");
		DebugLocation(180, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:181:2: ( accessModifier | Abstract | Static )
			int alt33=3;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case Private:
			case Protected:
			case Public:
				{
				alt33 = 1;
				}
				break;
			case Abstract:
				{
				alt33 = 2;
				}
				break;
			case Static:
				{
				alt33 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:181:4: accessModifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._accessModifier_in_fieldModifier848);
				accessModifier106=accessModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessModifier106.Tree, accessModifier106, "accessModifier106", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:181:21: Abstract
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 21);
				Abstract107=(IToken)Match(input,Abstract,Follow._Abstract_in_fieldModifier852); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Abstract107_tree = (object)adaptor.Create(Abstract107, "Abstract107", retval);
				adaptor.AddChild(root_0, Abstract107_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:181:32: Static
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 32);
				Static108=(IToken)Match(input,Static,Follow._Static_in_fieldModifier856); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static108_tree = (object)adaptor.Create(Static108, "Static108", retval);
				adaptor.AddChild(root_0, Static108_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldModifier", 19);
			LeaveRule("fieldModifier", 19);
			LeaveRule_fieldModifier();
			if (state.backtracking > 0) { Memoize(input, 19, fieldModifier_StartIndex); }

		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "fieldModifier"); }
		return retval;

	}
	// $ANTLR end "fieldModifier"

	partial void EnterRule_complexStatement();
	partial void LeaveRule_complexStatement();
	// $ANTLR start "complexStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:184:1: complexStatement : ( If '(' expression ')' statement ( conditional )? | For '(' forInit forCondition forUpdate ')' statement | Foreach '(' expression As arrayEntry ')' statement | While '(' ( expression )? ')' statement | If '(' expression ')' ':' ( statement )* ( conditionalWithColon )? | For '(' forInit forCondition forUpdate ')' ':' ( statement )* | Foreach '(' expression As arrayEntry ')' ':' ( statement )* | While '(' ( expression )? ')' ':' ( statement )* | Do statement While '(' expression ')' ';' | Switch '(' expression ')' '{' cases '}' | tryStatement | functionDefinition );
	[GrammarRule("complexStatement")]
	private Antlr3CstNode complexStatement()
	{
		EnterRule_complexStatement();
		EnterRule("complexStatement", 20);
		var retval = new Antlr3CstNode("complexStatement");
		
		retval.Start = (IToken)input.LT(1);
		int complexStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken If109 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken char_literal112 = default(IToken);
		IToken For115 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken Foreach122 = default(IToken);
		IToken char_literal123 = default(IToken);
		IToken As125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken While129 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal132 = default(IToken);
		IToken If134 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal137 = default(IToken);
		IToken char_literal138 = default(IToken);
		IToken For141 = default(IToken);
		IToken char_literal142 = default(IToken);
		IToken char_literal146 = default(IToken);
		IToken char_literal147 = default(IToken);
		IToken Foreach149 = default(IToken);
		IToken char_literal150 = default(IToken);
		IToken As152 = default(IToken);
		IToken char_literal154 = default(IToken);
		IToken char_literal155 = default(IToken);
		IToken While157 = default(IToken);
		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		IToken char_literal161 = default(IToken);
		IToken Do163 = default(IToken);
		IToken While165 = default(IToken);
		IToken char_literal166 = default(IToken);
		IToken char_literal168 = default(IToken);
		IToken char_literal169 = default(IToken);
		IToken Switch170 = default(IToken);
		IToken char_literal171 = default(IToken);
		IToken char_literal173 = default(IToken);
		IToken char_literal174 = default(IToken);
		IToken char_literal176 = default(IToken);
		Antlr3CstNode expression111 = default(Antlr3CstNode);
		Antlr3CstNode statement113 = default(Antlr3CstNode);
		Antlr3CstNode conditional114 = default(Antlr3CstNode);
		Antlr3CstNode forInit117 = default(Antlr3CstNode);
		Antlr3CstNode forCondition118 = default(Antlr3CstNode);
		Antlr3CstNode forUpdate119 = default(Antlr3CstNode);
		Antlr3CstNode statement121 = default(Antlr3CstNode);
		Antlr3CstNode expression124 = default(Antlr3CstNode);
		Antlr3CstNode arrayEntry126 = default(Antlr3CstNode);
		Antlr3CstNode statement128 = default(Antlr3CstNode);
		Antlr3CstNode expression131 = default(Antlr3CstNode);
		Antlr3CstNode statement133 = default(Antlr3CstNode);
		Antlr3CstNode expression136 = default(Antlr3CstNode);
		Antlr3CstNode statement139 = default(Antlr3CstNode);
		Antlr3CstNode conditionalWithColon140 = default(Antlr3CstNode);
		Antlr3CstNode forInit143 = default(Antlr3CstNode);
		Antlr3CstNode forCondition144 = default(Antlr3CstNode);
		Antlr3CstNode forUpdate145 = default(Antlr3CstNode);
		Antlr3CstNode statement148 = default(Antlr3CstNode);
		Antlr3CstNode expression151 = default(Antlr3CstNode);
		Antlr3CstNode arrayEntry153 = default(Antlr3CstNode);
		Antlr3CstNode statement156 = default(Antlr3CstNode);
		Antlr3CstNode expression159 = default(Antlr3CstNode);
		Antlr3CstNode statement162 = default(Antlr3CstNode);
		Antlr3CstNode statement164 = default(Antlr3CstNode);
		Antlr3CstNode expression167 = default(Antlr3CstNode);
		Antlr3CstNode expression172 = default(Antlr3CstNode);
		Antlr3CstNode cases175 = default(Antlr3CstNode);
		Antlr3CstNode tryStatement177 = default(Antlr3CstNode);
		Antlr3CstNode functionDefinition178 = default(Antlr3CstNode);

		object If109_tree = default(object);
		object char_literal110_tree = default(object);
		object char_literal112_tree = default(object);
		object For115_tree = default(object);
		object char_literal116_tree = default(object);
		object char_literal120_tree = default(object);
		object Foreach122_tree = default(object);
		object char_literal123_tree = default(object);
		object As125_tree = default(object);
		object char_literal127_tree = default(object);
		object While129_tree = default(object);
		object char_literal130_tree = default(object);
		object char_literal132_tree = default(object);
		object If134_tree = default(object);
		object char_literal135_tree = default(object);
		object char_literal137_tree = default(object);
		object char_literal138_tree = default(object);
		object For141_tree = default(object);
		object char_literal142_tree = default(object);
		object char_literal146_tree = default(object);
		object char_literal147_tree = default(object);
		object Foreach149_tree = default(object);
		object char_literal150_tree = default(object);
		object As152_tree = default(object);
		object char_literal154_tree = default(object);
		object char_literal155_tree = default(object);
		object While157_tree = default(object);
		object char_literal158_tree = default(object);
		object char_literal160_tree = default(object);
		object char_literal161_tree = default(object);
		object Do163_tree = default(object);
		object While165_tree = default(object);
		object char_literal166_tree = default(object);
		object char_literal168_tree = default(object);
		object char_literal169_tree = default(object);
		object Switch170_tree = default(object);
		object char_literal171_tree = default(object);
		object char_literal173_tree = default(object);
		object char_literal174_tree = default(object);
		object char_literal176_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "complexStatement");
		DebugLocation(184, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:2: ( If '(' expression ')' statement ( conditional )? | For '(' forInit forCondition forUpdate ')' statement | Foreach '(' expression As arrayEntry ')' statement | While '(' ( expression )? ')' statement | If '(' expression ')' ':' ( statement )* ( conditionalWithColon )? | For '(' forInit forCondition forUpdate ')' ':' ( statement )* | Foreach '(' expression As arrayEntry ')' ':' ( statement )* | While '(' ( expression )? ')' ':' ( statement )* | Do statement While '(' expression ')' ';' | Switch '(' expression ')' '{' cases '}' | tryStatement | functionDefinition )
			int alt42=12;
			try { DebugEnterDecision(42, false);
			switch (input.LA(1))
			{
			case If:
				{
				int LA42_2 = input.LA(2);

				if ((EvaluatePredicate(synpred47_Php_fragment)))
				{
					alt42 = 1;
				}
				else if ((EvaluatePredicate(synpred54_Php_fragment)))
				{
					alt42 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 42, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case For:
				{
				int LA42_2 = input.LA(2);

				if ((EvaluatePredicate(synpred48_Php_fragment)))
				{
					alt42 = 2;
				}
				else if ((EvaluatePredicate(synpred56_Php_fragment)))
				{
					alt42 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 42, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Foreach:
				{
				int LA42_2 = input.LA(2);

				if ((EvaluatePredicate(synpred49_Php_fragment)))
				{
					alt42 = 3;
				}
				else if ((EvaluatePredicate(synpred58_Php_fragment)))
				{
					alt42 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 42, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case While:
				{
				int LA42_2 = input.LA(2);

				if ((EvaluatePredicate(synpred51_Php_fragment)))
				{
					alt42 = 4;
				}
				else if ((EvaluatePredicate(synpred61_Php_fragment)))
				{
					alt42 = 8;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 42, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Do:
				{
				alt42 = 9;
				}
				break;
			case Switch:
				{
				alt42 = 10;
				}
				break;
			case Try:
				{
				alt42 = 11;
				}
				break;
			case Function:
				{
				alt42 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:4: If '(' expression ')' statement ( conditional )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(185, 4);
				If109=(IToken)Match(input,If,Follow._If_in_complexStatement867); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If109_tree = (object)adaptor.Create(If109, "If109", retval);
				adaptor.AddChild(root_0, If109_tree);
				}
				DebugLocation(185, 7);
				char_literal110=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement869); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal110_tree = (object)adaptor.Create(char_literal110, "char_literal110", retval);
				adaptor.AddChild(root_0, char_literal110_tree);
				}
				DebugLocation(185, 11);
				PushFollow(Follow._expression_in_complexStatement871);
				expression111=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression111.Tree, expression111, "expression111", retval);
				DebugLocation(185, 22);
				char_literal112=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement873); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal112_tree = (object)adaptor.Create(char_literal112, "char_literal112", retval);
				adaptor.AddChild(root_0, char_literal112_tree);
				}
				DebugLocation(185, 26);
				PushFollow(Follow._statement_in_complexStatement875);
				statement113=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement113.Tree, statement113, "statement113", retval);
				DebugLocation(185, 36);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:36: ( conditional )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==ElseIf))
				{
					int LA34_2 = input.LA(2);

					if ((EvaluatePredicate(synpred46_Php_fragment)))
					{
						alt34 = 1;
					}
				}
				else if ((LA34_1==Else))
				{
					int LA34_2 = input.LA(2);

					if ((EvaluatePredicate(synpred46_Php_fragment)))
					{
						alt34 = 1;
					}
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:36: conditional
					{
					DebugLocation(185, 36);
					PushFollow(Follow._conditional_in_complexStatement877);
					conditional114=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional114.Tree, conditional114, "conditional114", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(34); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:186:4: For '(' forInit forCondition forUpdate ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(186, 4);
				For115=(IToken)Match(input,For,Follow._For_in_complexStatement883); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For115_tree = (object)adaptor.Create(For115, "For115", retval);
				adaptor.AddChild(root_0, For115_tree);
				}
				DebugLocation(186, 8);
				char_literal116=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement885); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal116_tree = (object)adaptor.Create(char_literal116, "char_literal116", retval);
				adaptor.AddChild(root_0, char_literal116_tree);
				}
				DebugLocation(186, 12);
				PushFollow(Follow._forInit_in_complexStatement887);
				forInit117=forInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forInit117.Tree, forInit117, "forInit117", retval);
				DebugLocation(186, 20);
				PushFollow(Follow._forCondition_in_complexStatement889);
				forCondition118=forCondition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forCondition118.Tree, forCondition118, "forCondition118", retval);
				DebugLocation(186, 33);
				PushFollow(Follow._forUpdate_in_complexStatement891);
				forUpdate119=forUpdate();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forUpdate119.Tree, forUpdate119, "forUpdate119", retval);
				DebugLocation(186, 43);
				char_literal120=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement893); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal120_tree = (object)adaptor.Create(char_literal120, "char_literal120", retval);
				adaptor.AddChild(root_0, char_literal120_tree);
				}
				DebugLocation(186, 47);
				PushFollow(Follow._statement_in_complexStatement895);
				statement121=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement121.Tree, statement121, "statement121", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:187:4: Foreach '(' expression As arrayEntry ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(187, 4);
				Foreach122=(IToken)Match(input,Foreach,Follow._Foreach_in_complexStatement900); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach122_tree = (object)adaptor.Create(Foreach122, "Foreach122", retval);
				adaptor.AddChild(root_0, Foreach122_tree);
				}
				DebugLocation(187, 12);
				char_literal123=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement902); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal123_tree = (object)adaptor.Create(char_literal123, "char_literal123", retval);
				adaptor.AddChild(root_0, char_literal123_tree);
				}
				DebugLocation(187, 16);
				PushFollow(Follow._expression_in_complexStatement904);
				expression124=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression124.Tree, expression124, "expression124", retval);
				DebugLocation(187, 27);
				As125=(IToken)Match(input,As,Follow._As_in_complexStatement906); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As125_tree = (object)adaptor.Create(As125, "As125", retval);
				adaptor.AddChild(root_0, As125_tree);
				}
				DebugLocation(187, 30);
				PushFollow(Follow._arrayEntry_in_complexStatement908);
				arrayEntry126=arrayEntry();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry126.Tree, arrayEntry126, "arrayEntry126", retval);
				DebugLocation(187, 41);
				char_literal127=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement910); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal127_tree = (object)adaptor.Create(char_literal127, "char_literal127", retval);
				adaptor.AddChild(root_0, char_literal127_tree);
				}
				DebugLocation(187, 45);
				PushFollow(Follow._statement_in_complexStatement912);
				statement128=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement128.Tree, statement128, "statement128", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:188:4: While '(' ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(188, 4);
				While129=(IToken)Match(input,While,Follow._While_in_complexStatement917); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While129_tree = (object)adaptor.Create(While129, "While129", retval);
				adaptor.AddChild(root_0, While129_tree);
				}
				DebugLocation(188, 10);
				char_literal130=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement919); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal130_tree = (object)adaptor.Create(char_literal130, "char_literal130", retval);
				adaptor.AddChild(root_0, char_literal130_tree);
				}
				DebugLocation(188, 14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:188:14: ( expression )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if (((LA35_1>=Abstract && LA35_1<=And)||(LA35_1>=ArrayType && LA35_1<=As)||LA35_1==Bang||(LA35_1>=BoolType && LA35_1<=Class)||LA35_1==Clone||(LA35_1>=Const && LA35_1<=Continue)||(LA35_1>=Default && LA35_1<=Die)||LA35_1==Do||(LA35_1>=DoubleQuotedString && LA35_1<=Empty)||(LA35_1>=Eval && LA35_1<=Exit)||(LA35_1>=Extends && LA35_1<=Foreach)||(LA35_1>=Function && LA35_1<=HaltCompiler)||LA35_1==HereDoc||(LA35_1>=If && LA35_1<=IncrementOperator)||(LA35_1>=Instanceof && LA35_1<=List)||LA35_1==Minus||(LA35_1>=Namespace && LA35_1<=Null)||LA35_1==ObjectType||(LA35_1>=OpenRoundBracket && LA35_1<=Or)||(LA35_1>=Plus && LA35_1<=Public)||(LA35_1>=Real && LA35_1<=Return)||LA35_1==SingleQuotedString||(LA35_1>=Static && LA35_1<=Try)||LA35_1==UnquotedString||(LA35_1>=UnsetType && LA35_1<=While)||(LA35_1>=Xor && LA35_1<=130)))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:188:14: expression
					{
					DebugLocation(188, 14);
					PushFollow(Follow._expression_in_complexStatement921);
					expression131=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression131.Tree, expression131, "expression131", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(188, 26);
				char_literal132=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement924); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal132_tree = (object)adaptor.Create(char_literal132, "char_literal132", retval);
				adaptor.AddChild(root_0, char_literal132_tree);
				}
				DebugLocation(188, 30);
				PushFollow(Follow._statement_in_complexStatement926);
				statement133=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement133.Tree, statement133, "statement133", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:4: If '(' expression ')' ':' ( statement )* ( conditionalWithColon )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(189, 4);
				If134=(IToken)Match(input,If,Follow._If_in_complexStatement931); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If134_tree = (object)adaptor.Create(If134, "If134", retval);
				adaptor.AddChild(root_0, If134_tree);
				}
				DebugLocation(189, 7);
				char_literal135=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement933); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal135_tree = (object)adaptor.Create(char_literal135, "char_literal135", retval);
				adaptor.AddChild(root_0, char_literal135_tree);
				}
				DebugLocation(189, 11);
				PushFollow(Follow._expression_in_complexStatement935);
				expression136=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression136.Tree, expression136, "expression136", retval);
				DebugLocation(189, 22);
				char_literal137=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement937); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal137_tree = (object)adaptor.Create(char_literal137, "char_literal137", retval);
				adaptor.AddChild(root_0, char_literal137_tree);
				}
				DebugLocation(189, 26);
				char_literal138=(IToken)Match(input,Colon,Follow._Colon_in_complexStatement939); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal138_tree = (object)adaptor.Create(char_literal138, "char_literal138", retval);
				adaptor.AddChild(root_0, char_literal138_tree);
				}
				DebugLocation(189, 30);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:30: ( statement )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					try
					{
						alt36 = dfa36.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:30: statement
						{
						DebugLocation(189, 30);
						PushFollow(Follow._statement_in_complexStatement941);
						statement139=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement139.Tree, statement139, "statement139", retval);

						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(189, 41);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:41: ( conditionalWithColon )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==ElseIf))
				{
					int LA37_2 = input.LA(2);

					if ((EvaluatePredicate(synpred53_Php_fragment)))
					{
						alt37 = 1;
					}
				}
				else if ((LA37_1==Else))
				{
					int LA37_2 = input.LA(2);

					if ((EvaluatePredicate(synpred53_Php_fragment)))
					{
						alt37 = 1;
					}
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:41: conditionalWithColon
					{
					DebugLocation(189, 41);
					PushFollow(Follow._conditionalWithColon_in_complexStatement944);
					conditionalWithColon140=conditionalWithColon();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalWithColon140.Tree, conditionalWithColon140, "conditionalWithColon140", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:190:4: For '(' forInit forCondition forUpdate ')' ':' ( statement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 4);
				For141=(IToken)Match(input,For,Follow._For_in_complexStatement950); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For141_tree = (object)adaptor.Create(For141, "For141", retval);
				adaptor.AddChild(root_0, For141_tree);
				}
				DebugLocation(190, 8);
				char_literal142=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement952); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal142_tree = (object)adaptor.Create(char_literal142, "char_literal142", retval);
				adaptor.AddChild(root_0, char_literal142_tree);
				}
				DebugLocation(190, 12);
				PushFollow(Follow._forInit_in_complexStatement954);
				forInit143=forInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forInit143.Tree, forInit143, "forInit143", retval);
				DebugLocation(190, 20);
				PushFollow(Follow._forCondition_in_complexStatement956);
				forCondition144=forCondition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forCondition144.Tree, forCondition144, "forCondition144", retval);
				DebugLocation(190, 33);
				PushFollow(Follow._forUpdate_in_complexStatement958);
				forUpdate145=forUpdate();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forUpdate145.Tree, forUpdate145, "forUpdate145", retval);
				DebugLocation(190, 43);
				char_literal146=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement960); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal146_tree = (object)adaptor.Create(char_literal146, "char_literal146", retval);
				adaptor.AddChild(root_0, char_literal146_tree);
				}
				DebugLocation(190, 47);
				char_literal147=(IToken)Match(input,Colon,Follow._Colon_in_complexStatement962); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal147_tree = (object)adaptor.Create(char_literal147, "char_literal147", retval);
				adaptor.AddChild(root_0, char_literal147_tree);
				}
				DebugLocation(190, 51);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:190:51: ( statement )*
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					try
					{
						alt38 = dfa38.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(38); }
					switch ( alt38 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:190:51: statement
						{
						DebugLocation(190, 51);
						PushFollow(Follow._statement_in_complexStatement964);
						statement148=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement148.Tree, statement148, "statement148", retval);

						}
						break;

					default:
						goto loop38;
					}
				}

				loop38:
					;

				} finally { DebugExitSubRule(38); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:191:4: Foreach '(' expression As arrayEntry ')' ':' ( statement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(191, 4);
				Foreach149=(IToken)Match(input,Foreach,Follow._Foreach_in_complexStatement970); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach149_tree = (object)adaptor.Create(Foreach149, "Foreach149", retval);
				adaptor.AddChild(root_0, Foreach149_tree);
				}
				DebugLocation(191, 12);
				char_literal150=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement972); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal150_tree = (object)adaptor.Create(char_literal150, "char_literal150", retval);
				adaptor.AddChild(root_0, char_literal150_tree);
				}
				DebugLocation(191, 16);
				PushFollow(Follow._expression_in_complexStatement974);
				expression151=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression151.Tree, expression151, "expression151", retval);
				DebugLocation(191, 27);
				As152=(IToken)Match(input,As,Follow._As_in_complexStatement976); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As152_tree = (object)adaptor.Create(As152, "As152", retval);
				adaptor.AddChild(root_0, As152_tree);
				}
				DebugLocation(191, 30);
				PushFollow(Follow._arrayEntry_in_complexStatement978);
				arrayEntry153=arrayEntry();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry153.Tree, arrayEntry153, "arrayEntry153", retval);
				DebugLocation(191, 41);
				char_literal154=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement980); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal154_tree = (object)adaptor.Create(char_literal154, "char_literal154", retval);
				adaptor.AddChild(root_0, char_literal154_tree);
				}
				DebugLocation(191, 45);
				char_literal155=(IToken)Match(input,Colon,Follow._Colon_in_complexStatement982); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal155_tree = (object)adaptor.Create(char_literal155, "char_literal155", retval);
				adaptor.AddChild(root_0, char_literal155_tree);
				}
				DebugLocation(191, 49);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:191:49: ( statement )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					try
					{
						alt39 = dfa39.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:191:49: statement
						{
						DebugLocation(191, 49);
						PushFollow(Follow._statement_in_complexStatement984);
						statement156=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement156.Tree, statement156, "statement156", retval);

						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:4: While '(' ( expression )? ')' ':' ( statement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(192, 4);
				While157=(IToken)Match(input,While,Follow._While_in_complexStatement990); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While157_tree = (object)adaptor.Create(While157, "While157", retval);
				adaptor.AddChild(root_0, While157_tree);
				}
				DebugLocation(192, 10);
				char_literal158=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement992); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal158_tree = (object)adaptor.Create(char_literal158, "char_literal158", retval);
				adaptor.AddChild(root_0, char_literal158_tree);
				}
				DebugLocation(192, 14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:14: ( expression )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if (((LA40_1>=Abstract && LA40_1<=And)||(LA40_1>=ArrayType && LA40_1<=As)||LA40_1==Bang||(LA40_1>=BoolType && LA40_1<=Class)||LA40_1==Clone||(LA40_1>=Const && LA40_1<=Continue)||(LA40_1>=Default && LA40_1<=Die)||LA40_1==Do||(LA40_1>=DoubleQuotedString && LA40_1<=Empty)||(LA40_1>=Eval && LA40_1<=Exit)||(LA40_1>=Extends && LA40_1<=Foreach)||(LA40_1>=Function && LA40_1<=HaltCompiler)||LA40_1==HereDoc||(LA40_1>=If && LA40_1<=IncrementOperator)||(LA40_1>=Instanceof && LA40_1<=List)||LA40_1==Minus||(LA40_1>=Namespace && LA40_1<=Null)||LA40_1==ObjectType||(LA40_1>=OpenRoundBracket && LA40_1<=Or)||(LA40_1>=Plus && LA40_1<=Public)||(LA40_1>=Real && LA40_1<=Return)||LA40_1==SingleQuotedString||(LA40_1>=Static && LA40_1<=Try)||LA40_1==UnquotedString||(LA40_1>=UnsetType && LA40_1<=While)||(LA40_1>=Xor && LA40_1<=130)))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:14: expression
					{
					DebugLocation(192, 14);
					PushFollow(Follow._expression_in_complexStatement994);
					expression159=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression159.Tree, expression159, "expression159", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(192, 26);
				char_literal160=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement997); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal160_tree = (object)adaptor.Create(char_literal160, "char_literal160", retval);
				adaptor.AddChild(root_0, char_literal160_tree);
				}
				DebugLocation(192, 30);
				char_literal161=(IToken)Match(input,Colon,Follow._Colon_in_complexStatement999); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal161_tree = (object)adaptor.Create(char_literal161, "char_literal161", retval);
				adaptor.AddChild(root_0, char_literal161_tree);
				}
				DebugLocation(192, 34);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:34: ( statement )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					try
					{
						alt41 = dfa41.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:34: statement
						{
						DebugLocation(192, 34);
						PushFollow(Follow._statement_in_complexStatement1001);
						statement162=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement162.Tree, statement162, "statement162", retval);

						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:193:4: Do statement While '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(193, 4);
				Do163=(IToken)Match(input,Do,Follow._Do_in_complexStatement1007); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Do163_tree = (object)adaptor.Create(Do163, "Do163", retval);
				adaptor.AddChild(root_0, Do163_tree);
				}
				DebugLocation(193, 7);
				PushFollow(Follow._statement_in_complexStatement1009);
				statement164=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement164.Tree, statement164, "statement164", retval);
				DebugLocation(193, 17);
				While165=(IToken)Match(input,While,Follow._While_in_complexStatement1011); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While165_tree = (object)adaptor.Create(While165, "While165", retval);
				adaptor.AddChild(root_0, While165_tree);
				}
				DebugLocation(193, 23);
				char_literal166=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1013); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal166_tree = (object)adaptor.Create(char_literal166, "char_literal166", retval);
				adaptor.AddChild(root_0, char_literal166_tree);
				}
				DebugLocation(193, 27);
				PushFollow(Follow._expression_in_complexStatement1015);
				expression167=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression167.Tree, expression167, "expression167", retval);
				DebugLocation(193, 38);
				char_literal168=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1017); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal168_tree = (object)adaptor.Create(char_literal168, "char_literal168", retval);
				adaptor.AddChild(root_0, char_literal168_tree);
				}
				DebugLocation(193, 42);
				char_literal169=(IToken)Match(input,SemiColon,Follow._SemiColon_in_complexStatement1019); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal169_tree = (object)adaptor.Create(char_literal169, "char_literal169", retval);
				adaptor.AddChild(root_0, char_literal169_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:194:4: Switch '(' expression ')' '{' cases '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(194, 4);
				Switch170=(IToken)Match(input,Switch,Follow._Switch_in_complexStatement1024); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Switch170_tree = (object)adaptor.Create(Switch170, "Switch170", retval);
				adaptor.AddChild(root_0, Switch170_tree);
				}
				DebugLocation(194, 11);
				char_literal171=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1026); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal171_tree = (object)adaptor.Create(char_literal171, "char_literal171", retval);
				adaptor.AddChild(root_0, char_literal171_tree);
				}
				DebugLocation(194, 15);
				PushFollow(Follow._expression_in_complexStatement1028);
				expression172=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression172.Tree, expression172, "expression172", retval);
				DebugLocation(194, 26);
				char_literal173=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1030); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal173_tree = (object)adaptor.Create(char_literal173, "char_literal173", retval);
				adaptor.AddChild(root_0, char_literal173_tree);
				}
				DebugLocation(194, 30);
				char_literal174=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_complexStatement1032); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal174_tree = (object)adaptor.Create(char_literal174, "char_literal174", retval);
				adaptor.AddChild(root_0, char_literal174_tree);
				}
				DebugLocation(194, 34);
				PushFollow(Follow._cases_in_complexStatement1034);
				cases175=cases();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cases175.Tree, cases175, "cases175", retval);
				DebugLocation(194, 40);
				char_literal176=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_complexStatement1036); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal176_tree = (object)adaptor.Create(char_literal176, "char_literal176", retval);
				adaptor.AddChild(root_0, char_literal176_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:195:4: tryStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 4);
				PushFollow(Follow._tryStatement_in_complexStatement1041);
				tryStatement177=tryStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tryStatement177.Tree, tryStatement177, "tryStatement177", retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:196:4: functionDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(196, 4);
				PushFollow(Follow._functionDefinition_in_complexStatement1046);
				functionDefinition178=functionDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionDefinition178.Tree, functionDefinition178, "functionDefinition178", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("complexStatement", 20);
			LeaveRule("complexStatement", 20);
			LeaveRule_complexStatement();
			if (state.backtracking > 0) { Memoize(input, 20, complexStatement_StartIndex); }

		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "complexStatement"); }
		return retval;

	}
	// $ANTLR end "complexStatement"

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();
	// $ANTLR start "tryStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:199:1: tryStatement : Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )? ;
	[GrammarRule("tryStatement")]
	private Antlr3CstNode tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 21);
		var retval = new Antlr3CstNode("tryStatement");
		
		retval.Start = (IToken)input.LT(1);
		int tryStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Try179 = default(IToken);
		IToken Catch181 = default(IToken);
		IToken char_literal182 = default(IToken);
		IToken char_literal185 = default(IToken);
		IToken Finally187 = default(IToken);
		Antlr3CstNode bracketedBlock180 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName183 = default(Antlr3CstNode);
		Antlr3CstNode variable184 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock186 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock188 = default(Antlr3CstNode);

		object Try179_tree = default(object);
		object Catch181_tree = default(object);
		object char_literal182_tree = default(object);
		object char_literal185_tree = default(object);
		object Finally187_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(199, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:200:2: ( Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:200:4: Try bracketedBlock ( Catch '(' qualifiedName variable ')' bracketedBlock )+ ( Finally bracketedBlock )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(200, 4);
			Try179=(IToken)Match(input,Try,Follow._Try_in_tryStatement1058); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Try179_tree = (object)adaptor.Create(Try179, "Try179", retval);
			adaptor.AddChild(root_0, Try179_tree);
			}
			DebugLocation(200, 8);
			PushFollow(Follow._bracketedBlock_in_tryStatement1060);
			bracketedBlock180=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock180.Tree, bracketedBlock180, "bracketedBlock180", retval);
			DebugLocation(201, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:201:4: ( Catch '(' qualifiedName variable ')' bracketedBlock )+
			int cnt43=0;
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				try
				{
					alt43 = dfa43.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:201:5: Catch '(' qualifiedName variable ')' bracketedBlock
					{
					DebugLocation(201, 5);
					Catch181=(IToken)Match(input,Catch,Follow._Catch_in_tryStatement1066); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Catch181_tree = (object)adaptor.Create(Catch181, "Catch181", retval);
					adaptor.AddChild(root_0, Catch181_tree);
					}
					DebugLocation(201, 11);
					char_literal182=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_tryStatement1068); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal182_tree = (object)adaptor.Create(char_literal182, "char_literal182", retval);
					adaptor.AddChild(root_0, char_literal182_tree);
					}
					DebugLocation(201, 15);
					PushFollow(Follow._qualifiedName_in_tryStatement1070);
					qualifiedName183=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName183.Tree, qualifiedName183, "qualifiedName183", retval);
					DebugLocation(201, 29);
					PushFollow(Follow._variable_in_tryStatement1072);
					variable184=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable184.Tree, variable184, "variable184", retval);
					DebugLocation(201, 38);
					char_literal185=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_tryStatement1074); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal185_tree = (object)adaptor.Create(char_literal185, "char_literal185", retval);
					adaptor.AddChild(root_0, char_literal185_tree);
					}
					DebugLocation(201, 42);
					PushFollow(Follow._bracketedBlock_in_tryStatement1076);
					bracketedBlock186=bracketedBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock186.Tree, bracketedBlock186, "bracketedBlock186", retval);

					}
					break;

				default:
					if (cnt43 >= 1)
						goto loop43;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee43 = new EarlyExitException( 43, input );
					DebugRecognitionException(eee43);
					throw eee43;
				}
				cnt43++;
			}
			loop43:
				;

			} finally { DebugExitSubRule(43); }

			DebugLocation(202, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:202:4: ( Finally bracketedBlock )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:202:5: Finally bracketedBlock
				{
				DebugLocation(202, 5);
				Finally187=(IToken)Match(input,Finally,Follow._Finally_in_tryStatement1084); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Finally187_tree = (object)adaptor.Create(Finally187, "Finally187", retval);
				adaptor.AddChild(root_0, Finally187_tree);
				}
				DebugLocation(202, 13);
				PushFollow(Follow._bracketedBlock_in_tryStatement1086);
				bracketedBlock188=bracketedBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock188.Tree, bracketedBlock188, "bracketedBlock188", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryStatement", 21);
			LeaveRule("tryStatement", 21);
			LeaveRule_tryStatement();
			if (state.backtracking > 0) { Memoize(input, 21, tryStatement_StartIndex); }

		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return retval;

	}
	// $ANTLR end "tryStatement"

	partial void EnterRule_simpleStatement();
	partial void LeaveRule_simpleStatement();
	// $ANTLR start "simpleStatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:205:1: simpleStatement : ( Echo commaList | Print expression | Global variable ( ',' variable )* | Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* | constDefinition | Break ( Integer )? | Continue ( Integer )? | Goto UnquotedString | Return ( expression )? | Goto UnquotedString | Throw expression | expression );
	[GrammarRule("simpleStatement")]
	private Antlr3CstNode simpleStatement()
	{
		EnterRule_simpleStatement();
		EnterRule("simpleStatement", 22);
		var retval = new Antlr3CstNode("simpleStatement");
		
		retval.Start = (IToken)input.LT(1);
		int simpleStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Echo189 = default(IToken);
		IToken Print191 = default(IToken);
		IToken Global193 = default(IToken);
		IToken char_literal195 = default(IToken);
		IToken Static197 = default(IToken);
		IToken VariableName198 = default(IToken);
		IToken Equals199 = default(IToken);
		IToken char_literal201 = default(IToken);
		IToken VariableName202 = default(IToken);
		IToken Equals203 = default(IToken);
		IToken Break206 = default(IToken);
		IToken Integer207 = default(IToken);
		IToken Continue208 = default(IToken);
		IToken Integer209 = default(IToken);
		IToken Goto210 = default(IToken);
		IToken UnquotedString211 = default(IToken);
		IToken Return212 = default(IToken);
		IToken Goto214 = default(IToken);
		IToken UnquotedString215 = default(IToken);
		IToken Throw216 = default(IToken);
		Antlr3CstNode commaList190 = default(Antlr3CstNode);
		Antlr3CstNode expression192 = default(Antlr3CstNode);
		Antlr3CstNode variable194 = default(Antlr3CstNode);
		Antlr3CstNode variable196 = default(Antlr3CstNode);
		Antlr3CstNode atom200 = default(Antlr3CstNode);
		Antlr3CstNode atom204 = default(Antlr3CstNode);
		Antlr3CstNode constDefinition205 = default(Antlr3CstNode);
		Antlr3CstNode expression213 = default(Antlr3CstNode);
		Antlr3CstNode expression217 = default(Antlr3CstNode);
		Antlr3CstNode expression218 = default(Antlr3CstNode);

		object Echo189_tree = default(object);
		object Print191_tree = default(object);
		object Global193_tree = default(object);
		object char_literal195_tree = default(object);
		object Static197_tree = default(object);
		object VariableName198_tree = default(object);
		object Equals199_tree = default(object);
		object char_literal201_tree = default(object);
		object VariableName202_tree = default(object);
		object Equals203_tree = default(object);
		object Break206_tree = default(object);
		object Integer207_tree = default(object);
		object Continue208_tree = default(object);
		object Integer209_tree = default(object);
		object Goto210_tree = default(object);
		object UnquotedString211_tree = default(object);
		object Return212_tree = default(object);
		object Goto214_tree = default(object);
		object UnquotedString215_tree = default(object);
		object Throw216_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "simpleStatement");
		DebugLocation(205, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:206:2: ( Echo commaList | Print expression | Global variable ( ',' variable )* | Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* | constDefinition | Break ( Integer )? | Continue ( Integer )? | Goto UnquotedString | Return ( expression )? | Goto UnquotedString | Throw expression | expression )
			int alt52=12;
			try { DebugEnterDecision(52, false);
			switch (input.LA(1))
			{
			case Echo:
				{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred67_Php_fragment)))
				{
					alt52 = 1;
				}
				else if ((true))
				{
					alt52 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Print:
				{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Php_fragment)))
				{
					alt52 = 2;
				}
				else if ((true))
				{
					alt52 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Global:
				{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred70_Php_fragment)))
				{
					alt52 = 3;
				}
				else if ((true))
				{
					alt52 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Static:
				{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred74_Php_fragment)))
				{
					alt52 = 4;
				}
				else if ((true))
				{
					alt52 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Const:
				{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred75_Php_fragment)))
				{
					alt52 = 5;
				}
				else if ((true))
				{
					alt52 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Break:
				{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred77_Php_fragment)))
				{
					alt52 = 6;
				}
				else if ((true))
				{
					alt52 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Continue:
				{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred79_Php_fragment)))
				{
					alt52 = 7;
				}
				else if ((true))
				{
					alt52 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Goto:
				{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred80_Php_fragment)))
				{
					alt52 = 8;
				}
				else if ((EvaluatePredicate(synpred83_Php_fragment)))
				{
					alt52 = 10;
				}
				else if ((true))
				{
					alt52 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Return:
				{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred82_Php_fragment)))
				{
					alt52 = 9;
				}
				else if ((true))
				{
					alt52 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Throw:
				{
				int LA52_2 = input.LA(2);

				if ((EvaluatePredicate(synpred84_Php_fragment)))
				{
					alt52 = 11;
				}
				else if ((true))
				{
					alt52 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case Ampersand:
			case And:
			case ArrayType:
			case As:
			case Bang:
			case BoolType:
			case BooleanType:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Default:
			case Die:
			case Do:
			case DoubleQuotedString:
			case DoubleType:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case HaltCompiler:
			case HereDoc:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case IncrementOperator:
			case Instanceof:
			case IntType:
			case Integer:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Minus:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case Or:
			case Plus:
			case Private:
			case Protected:
			case Public:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case SingleQuotedString:
			case StringType:
			case SuppressWarnings:
			case Switch:
			case Tilde:
			case True:
			case Try:
			case UnquotedString:
			case UnsetType:
			case Use:
			case Var:
			case VariableName:
			case While:
			case Xor:
			case 129:
			case 130:
				{
				alt52 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:206:4: Echo commaList
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(206, 4);
				Echo189=(IToken)Match(input,Echo,Follow._Echo_in_simpleStatement1099); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Echo189_tree = (object)adaptor.Create(Echo189, "Echo189", retval);
				adaptor.AddChild(root_0, Echo189_tree);
				}
				DebugLocation(206, 9);
				PushFollow(Follow._commaList_in_simpleStatement1101);
				commaList190=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList190.Tree, commaList190, "commaList190", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:207:4: Print expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(207, 4);
				Print191=(IToken)Match(input,Print,Follow._Print_in_simpleStatement1106); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Print191_tree = (object)adaptor.Create(Print191, "Print191", retval);
				adaptor.AddChild(root_0, Print191_tree);
				}
				DebugLocation(207, 10);
				PushFollow(Follow._expression_in_simpleStatement1108);
				expression192=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression192.Tree, expression192, "expression192", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:208:4: Global variable ( ',' variable )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(208, 4);
				Global193=(IToken)Match(input,Global,Follow._Global_in_simpleStatement1113); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Global193_tree = (object)adaptor.Create(Global193, "Global193", retval);
				adaptor.AddChild(root_0, Global193_tree);
				}
				DebugLocation(208, 11);
				PushFollow(Follow._variable_in_simpleStatement1115);
				variable194=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable194.Tree, variable194, "variable194", retval);
				DebugLocation(208, 20);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:208:20: ( ',' variable )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_1 = input.LA(1);

					if ((LA45_1==Comma))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:208:21: ',' variable
						{
						DebugLocation(208, 21);
						char_literal195=(IToken)Match(input,Comma,Follow._Comma_in_simpleStatement1118); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal195_tree = (object)adaptor.Create(char_literal195, "char_literal195", retval);
						adaptor.AddChild(root_0, char_literal195_tree);
						}
						DebugLocation(208, 25);
						PushFollow(Follow._variable_in_simpleStatement1120);
						variable196=variable();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, variable196.Tree, variable196, "variable196", retval);

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:4: Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(209, 4);
				Static197=(IToken)Match(input,Static,Follow._Static_in_simpleStatement1128); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static197_tree = (object)adaptor.Create(Static197, "Static197", retval);
				adaptor.AddChild(root_0, Static197_tree);
				}
				DebugLocation(209, 11);
				VariableName198=(IToken)Match(input,VariableName,Follow._VariableName_in_simpleStatement1130); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName198_tree = (object)adaptor.Create(VariableName198, "VariableName198", retval);
				adaptor.AddChild(root_0, VariableName198_tree);
				}
				DebugLocation(209, 24);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:24: ( Equals atom )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==Equals))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:25: Equals atom
					{
					DebugLocation(209, 25);
					Equals199=(IToken)Match(input,Equals,Follow._Equals_in_simpleStatement1133); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Equals199_tree = (object)adaptor.Create(Equals199, "Equals199", retval);
					adaptor.AddChild(root_0, Equals199_tree);
					}
					DebugLocation(209, 32);
					PushFollow(Follow._atom_in_simpleStatement1135);
					atom200=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom200.Tree, atom200, "atom200", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(209, 39);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:39: ( ',' VariableName ( Equals atom )? )*
				try { DebugEnterSubRule(48);
				while (true)
				{
					int alt48=2;
					try { DebugEnterDecision(48, false);
					int LA48_1 = input.LA(1);

					if ((LA48_1==Comma))
					{
						alt48 = 1;
					}


					} finally { DebugExitDecision(48); }
					switch ( alt48 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:40: ',' VariableName ( Equals atom )?
						{
						DebugLocation(209, 40);
						char_literal201=(IToken)Match(input,Comma,Follow._Comma_in_simpleStatement1140); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal201_tree = (object)adaptor.Create(char_literal201, "char_literal201", retval);
						adaptor.AddChild(root_0, char_literal201_tree);
						}
						DebugLocation(209, 44);
						VariableName202=(IToken)Match(input,VariableName,Follow._VariableName_in_simpleStatement1142); if (state.failed) return retval;
						if (state.backtracking == 0) {
						VariableName202_tree = (object)adaptor.Create(VariableName202, "VariableName202", retval);
						adaptor.AddChild(root_0, VariableName202_tree);
						}
						DebugLocation(209, 57);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:57: ( Equals atom )?
						int alt47=2;
						try { DebugEnterSubRule(47);
						try { DebugEnterDecision(47, false);
						int LA47_1 = input.LA(1);

						if ((LA47_1==Equals))
						{
							alt47 = 1;
						}
						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:58: Equals atom
							{
							DebugLocation(209, 58);
							Equals203=(IToken)Match(input,Equals,Follow._Equals_in_simpleStatement1145); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Equals203_tree = (object)adaptor.Create(Equals203, "Equals203", retval);
							adaptor.AddChild(root_0, Equals203_tree);
							}
							DebugLocation(209, 65);
							PushFollow(Follow._atom_in_simpleStatement1147);
							atom204=atom();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, atom204.Tree, atom204, "atom204", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(47); }


						}
						break;

					default:
						goto loop48;
					}
				}

				loop48:
					;

				} finally { DebugExitSubRule(48); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:210:4: constDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._constDefinition_in_simpleStatement1156);
				constDefinition205=constDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constDefinition205.Tree, constDefinition205, "constDefinition205", retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:211:4: Break ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(211, 4);
				Break206=(IToken)Match(input,Break,Follow._Break_in_simpleStatement1161); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Break206_tree = (object)adaptor.Create(Break206, "Break206", retval);
				adaptor.AddChild(root_0, Break206_tree);
				}
				DebugLocation(211, 10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:211:10: ( Integer )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==Integer))
				{
					alt49 = 1;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:211:10: Integer
					{
					DebugLocation(211, 10);
					Integer207=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement1163); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer207_tree = (object)adaptor.Create(Integer207, "Integer207", retval);
					adaptor.AddChild(root_0, Integer207_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(49); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:212:4: Continue ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(212, 4);
				Continue208=(IToken)Match(input,Continue,Follow._Continue_in_simpleStatement1169); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Continue208_tree = (object)adaptor.Create(Continue208, "Continue208", retval);
				adaptor.AddChild(root_0, Continue208_tree);
				}
				DebugLocation(212, 13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:212:13: ( Integer )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_1 = input.LA(1);

				if ((LA50_1==Integer))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:212:13: Integer
					{
					DebugLocation(212, 13);
					Integer209=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement1171); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer209_tree = (object)adaptor.Create(Integer209, "Integer209", retval);
					adaptor.AddChild(root_0, Integer209_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:213:4: Goto UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(213, 4);
				Goto210=(IToken)Match(input,Goto,Follow._Goto_in_simpleStatement1177); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto210_tree = (object)adaptor.Create(Goto210, "Goto210", retval);
				adaptor.AddChild(root_0, Goto210_tree);
				}
				DebugLocation(213, 9);
				UnquotedString211=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_simpleStatement1179); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString211_tree = (object)adaptor.Create(UnquotedString211, "UnquotedString211", retval);
				adaptor.AddChild(root_0, UnquotedString211_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:214:4: Return ( expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(214, 4);
				Return212=(IToken)Match(input,Return,Follow._Return_in_simpleStatement1184); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Return212_tree = (object)adaptor.Create(Return212, "Return212", retval);
				adaptor.AddChild(root_0, Return212_tree);
				}
				DebugLocation(214, 11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:214:11: ( expression )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if (((LA51_1>=Abstract && LA51_1<=And)||(LA51_1>=ArrayType && LA51_1<=As)||LA51_1==Bang||(LA51_1>=BoolType && LA51_1<=Class)||LA51_1==Clone||(LA51_1>=Const && LA51_1<=Continue)||(LA51_1>=Default && LA51_1<=Die)||LA51_1==Do||(LA51_1>=DoubleQuotedString && LA51_1<=Empty)||(LA51_1>=Eval && LA51_1<=Exit)||(LA51_1>=Extends && LA51_1<=Foreach)||(LA51_1>=Function && LA51_1<=HaltCompiler)||LA51_1==HereDoc||(LA51_1>=If && LA51_1<=IncrementOperator)||(LA51_1>=Instanceof && LA51_1<=List)||LA51_1==Minus||(LA51_1>=Namespace && LA51_1<=Null)||LA51_1==ObjectType||(LA51_1>=OpenRoundBracket && LA51_1<=Or)||(LA51_1>=Plus && LA51_1<=Public)||(LA51_1>=Real && LA51_1<=Return)||LA51_1==SingleQuotedString||(LA51_1>=Static && LA51_1<=Try)||LA51_1==UnquotedString||(LA51_1>=UnsetType && LA51_1<=While)||(LA51_1>=Xor && LA51_1<=130)))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:214:11: expression
					{
					DebugLocation(214, 11);
					PushFollow(Follow._expression_in_simpleStatement1186);
					expression213=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression213.Tree, expression213, "expression213", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:215:4: Goto UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(215, 4);
				Goto214=(IToken)Match(input,Goto,Follow._Goto_in_simpleStatement1192); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto214_tree = (object)adaptor.Create(Goto214, "Goto214", retval);
				adaptor.AddChild(root_0, Goto214_tree);
				}
				DebugLocation(215, 9);
				UnquotedString215=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_simpleStatement1194); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString215_tree = (object)adaptor.Create(UnquotedString215, "UnquotedString215", retval);
				adaptor.AddChild(root_0, UnquotedString215_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:216:4: Throw expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(216, 4);
				Throw216=(IToken)Match(input,Throw,Follow._Throw_in_simpleStatement1199); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Throw216_tree = (object)adaptor.Create(Throw216, "Throw216", retval);
				adaptor.AddChild(root_0, Throw216_tree);
				}
				DebugLocation(216, 10);
				PushFollow(Follow._expression_in_simpleStatement1201);
				expression217=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression217.Tree, expression217, "expression217", retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:217:4: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(217, 4);
				PushFollow(Follow._expression_in_simpleStatement1206);
				expression218=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression218.Tree, expression218, "expression218", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleStatement", 22);
			LeaveRule("simpleStatement", 22);
			LeaveRule_simpleStatement();
			if (state.backtracking > 0) { Memoize(input, 22, simpleStatement_StartIndex); }

		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "simpleStatement"); }
		return retval;

	}
	// $ANTLR end "simpleStatement"

	partial void EnterRule_conditional();
	partial void LeaveRule_conditional();
	// $ANTLR start "conditional"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:220:1: conditional : ( ElseIf '(' expression ')' statement ( conditional )? | Else statement );
	[GrammarRule("conditional")]
	private Antlr3CstNode conditional()
	{
		EnterRule_conditional();
		EnterRule("conditional", 23);
		var retval = new Antlr3CstNode("conditional");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ElseIf219 = default(IToken);
		IToken char_literal220 = default(IToken);
		IToken char_literal222 = default(IToken);
		IToken Else225 = default(IToken);
		Antlr3CstNode expression221 = default(Antlr3CstNode);
		Antlr3CstNode statement223 = default(Antlr3CstNode);
		Antlr3CstNode conditional224 = default(Antlr3CstNode);
		Antlr3CstNode statement226 = default(Antlr3CstNode);

		object ElseIf219_tree = default(object);
		object char_literal220_tree = default(object);
		object char_literal222_tree = default(object);
		object Else225_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional");
		DebugLocation(220, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:221:2: ( ElseIf '(' expression ')' statement ( conditional )? | Else statement )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==ElseIf))
			{
				alt54 = 1;
			}
			else if ((LA54_1==Else))
			{
				alt54 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:221:4: ElseIf '(' expression ')' statement ( conditional )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(221, 4);
				ElseIf219=(IToken)Match(input,ElseIf,Follow._ElseIf_in_conditional1217); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf219_tree = (object)adaptor.Create(ElseIf219, "ElseIf219", retval);
				adaptor.AddChild(root_0, ElseIf219_tree);
				}
				DebugLocation(221, 11);
				char_literal220=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_conditional1219); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal220_tree = (object)adaptor.Create(char_literal220, "char_literal220", retval);
				adaptor.AddChild(root_0, char_literal220_tree);
				}
				DebugLocation(221, 15);
				PushFollow(Follow._expression_in_conditional1221);
				expression221=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression221.Tree, expression221, "expression221", retval);
				DebugLocation(221, 26);
				char_literal222=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_conditional1223); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal222_tree = (object)adaptor.Create(char_literal222, "char_literal222", retval);
				adaptor.AddChild(root_0, char_literal222_tree);
				}
				DebugLocation(221, 30);
				PushFollow(Follow._statement_in_conditional1225);
				statement223=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement223.Tree, statement223, "statement223", retval);
				DebugLocation(221, 40);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:221:40: ( conditional )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==ElseIf))
				{
					int LA53_2 = input.LA(2);

					if ((EvaluatePredicate(synpred85_Php_fragment)))
					{
						alt53 = 1;
					}
				}
				else if ((LA53_1==Else))
				{
					int LA53_2 = input.LA(2);

					if ((EvaluatePredicate(synpred85_Php_fragment)))
					{
						alt53 = 1;
					}
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:221:40: conditional
					{
					DebugLocation(221, 40);
					PushFollow(Follow._conditional_in_conditional1227);
					conditional224=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional224.Tree, conditional224, "conditional224", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:222:4: Else statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(222, 4);
				Else225=(IToken)Match(input,Else,Follow._Else_in_conditional1233); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else225_tree = (object)adaptor.Create(Else225, "Else225", retval);
				adaptor.AddChild(root_0, Else225_tree);
				}
				DebugLocation(222, 9);
				PushFollow(Follow._statement_in_conditional1235);
				statement226=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement226.Tree, statement226, "statement226", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional", 23);
			LeaveRule("conditional", 23);
			LeaveRule_conditional();
			if (state.backtracking > 0) { Memoize(input, 23, conditional_StartIndex); }

		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional"); }
		return retval;

	}
	// $ANTLR end "conditional"

	partial void EnterRule_conditionalWithColon();
	partial void LeaveRule_conditionalWithColon();
	// $ANTLR start "conditionalWithColon"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:225:1: conditionalWithColon : ( ElseIf '(' expression ')' ':' ( statement )* ( conditionalWithColon )? | Else ':' ( statement )* );
	[GrammarRule("conditionalWithColon")]
	private Antlr3CstNode conditionalWithColon()
	{
		EnterRule_conditionalWithColon();
		EnterRule("conditionalWithColon", 24);
		var retval = new Antlr3CstNode("conditionalWithColon");
		
		retval.Start = (IToken)input.LT(1);
		int conditionalWithColon_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ElseIf227 = default(IToken);
		IToken char_literal228 = default(IToken);
		IToken char_literal230 = default(IToken);
		IToken char_literal231 = default(IToken);
		IToken Else234 = default(IToken);
		IToken char_literal235 = default(IToken);
		Antlr3CstNode expression229 = default(Antlr3CstNode);
		Antlr3CstNode statement232 = default(Antlr3CstNode);
		Antlr3CstNode conditionalWithColon233 = default(Antlr3CstNode);
		Antlr3CstNode statement236 = default(Antlr3CstNode);

		object ElseIf227_tree = default(object);
		object char_literal228_tree = default(object);
		object char_literal230_tree = default(object);
		object char_literal231_tree = default(object);
		object Else234_tree = default(object);
		object char_literal235_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditionalWithColon");
		DebugLocation(225, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:226:2: ( ElseIf '(' expression ')' ':' ( statement )* ( conditionalWithColon )? | Else ':' ( statement )* )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==ElseIf))
			{
				alt58 = 1;
			}
			else if ((LA58_1==Else))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:226:4: ElseIf '(' expression ')' ':' ( statement )* ( conditionalWithColon )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(226, 4);
				ElseIf227=(IToken)Match(input,ElseIf,Follow._ElseIf_in_conditionalWithColon1246); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf227_tree = (object)adaptor.Create(ElseIf227, "ElseIf227", retval);
				adaptor.AddChild(root_0, ElseIf227_tree);
				}
				DebugLocation(226, 11);
				char_literal228=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_conditionalWithColon1248); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal228_tree = (object)adaptor.Create(char_literal228, "char_literal228", retval);
				adaptor.AddChild(root_0, char_literal228_tree);
				}
				DebugLocation(226, 15);
				PushFollow(Follow._expression_in_conditionalWithColon1250);
				expression229=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression229.Tree, expression229, "expression229", retval);
				DebugLocation(226, 26);
				char_literal230=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_conditionalWithColon1252); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal230_tree = (object)adaptor.Create(char_literal230, "char_literal230", retval);
				adaptor.AddChild(root_0, char_literal230_tree);
				}
				DebugLocation(226, 30);
				char_literal231=(IToken)Match(input,Colon,Follow._Colon_in_conditionalWithColon1254); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal231_tree = (object)adaptor.Create(char_literal231, "char_literal231", retval);
				adaptor.AddChild(root_0, char_literal231_tree);
				}
				DebugLocation(226, 34);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:226:34: ( statement )*
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=2;
					try { DebugEnterDecision(55, false);
					try
					{
						alt55 = dfa55.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(55); }
					switch ( alt55 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:226:34: statement
						{
						DebugLocation(226, 34);
						PushFollow(Follow._statement_in_conditionalWithColon1256);
						statement232=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement232.Tree, statement232, "statement232", retval);

						}
						break;

					default:
						goto loop55;
					}
				}

				loop55:
					;

				} finally { DebugExitSubRule(55); }

				DebugLocation(226, 45);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:226:45: ( conditionalWithColon )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==ElseIf))
				{
					int LA56_2 = input.LA(2);

					if ((EvaluatePredicate(synpred88_Php_fragment)))
					{
						alt56 = 1;
					}
				}
				else if ((LA56_1==Else))
				{
					int LA56_2 = input.LA(2);

					if ((EvaluatePredicate(synpred88_Php_fragment)))
					{
						alt56 = 1;
					}
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:226:45: conditionalWithColon
					{
					DebugLocation(226, 45);
					PushFollow(Follow._conditionalWithColon_in_conditionalWithColon1259);
					conditionalWithColon233=conditionalWithColon();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalWithColon233.Tree, conditionalWithColon233, "conditionalWithColon233", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:227:4: Else ':' ( statement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(227, 4);
				Else234=(IToken)Match(input,Else,Follow._Else_in_conditionalWithColon1265); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else234_tree = (object)adaptor.Create(Else234, "Else234", retval);
				adaptor.AddChild(root_0, Else234_tree);
				}
				DebugLocation(227, 9);
				char_literal235=(IToken)Match(input,Colon,Follow._Colon_in_conditionalWithColon1267); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal235_tree = (object)adaptor.Create(char_literal235, "char_literal235", retval);
				adaptor.AddChild(root_0, char_literal235_tree);
				}
				DebugLocation(227, 13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:227:13: ( statement )*
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					try
					{
						alt57 = dfa57.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(57); }
					switch ( alt57 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:227:13: statement
						{
						DebugLocation(227, 13);
						PushFollow(Follow._statement_in_conditionalWithColon1269);
						statement236=statement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, statement236.Tree, statement236, "statement236", retval);

						}
						break;

					default:
						goto loop57;
					}
				}

				loop57:
					;

				} finally { DebugExitSubRule(57); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalWithColon", 24);
			LeaveRule("conditionalWithColon", 24);
			LeaveRule_conditionalWithColon();
			if (state.backtracking > 0) { Memoize(input, 24, conditionalWithColon_StartIndex); }

		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalWithColon"); }
		return retval;

	}
	// $ANTLR end "conditionalWithColon"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:230:1: forInit : ( commaList )? ';' ;
	[GrammarRule("forInit")]
	private Antlr3CstNode forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 25);
		var retval = new Antlr3CstNode("forInit");
		
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal238 = default(IToken);
		Antlr3CstNode commaList237 = default(Antlr3CstNode);

		object char_literal238_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(230, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:231:2: ( ( commaList )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:231:4: ( commaList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(231, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:231:4: ( commaList )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_1 = input.LA(1);

			if (((LA59_1>=Abstract && LA59_1<=And)||(LA59_1>=ArrayType && LA59_1<=As)||LA59_1==Bang||(LA59_1>=BoolType && LA59_1<=Class)||LA59_1==Clone||(LA59_1>=Const && LA59_1<=Continue)||(LA59_1>=Default && LA59_1<=Die)||LA59_1==Do||(LA59_1>=DoubleQuotedString && LA59_1<=Empty)||(LA59_1>=Eval && LA59_1<=Exit)||(LA59_1>=Extends && LA59_1<=Foreach)||(LA59_1>=Function && LA59_1<=HaltCompiler)||LA59_1==HereDoc||(LA59_1>=If && LA59_1<=IncrementOperator)||(LA59_1>=Instanceof && LA59_1<=List)||LA59_1==Minus||(LA59_1>=Namespace && LA59_1<=Null)||LA59_1==ObjectType||(LA59_1>=OpenRoundBracket && LA59_1<=Or)||(LA59_1>=Plus && LA59_1<=Public)||(LA59_1>=Real && LA59_1<=Return)||LA59_1==SingleQuotedString||(LA59_1>=Static && LA59_1<=Try)||LA59_1==UnquotedString||(LA59_1>=UnsetType && LA59_1<=While)||(LA59_1>=Xor && LA59_1<=130)))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:231:4: commaList
				{
				DebugLocation(231, 4);
				PushFollow(Follow._commaList_in_forInit1281);
				commaList237=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList237.Tree, commaList237, "commaList237", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(231, 15);
			char_literal238=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forInit1284); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal238_tree = (object)adaptor.Create(char_literal238, "char_literal238", retval);
			adaptor.AddChild(root_0, char_literal238_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 25);
			LeaveRule("forInit", 25);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 25, forInit_StartIndex); }

		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:234:1: forCondition : ( commaList )? ';' ;
	[GrammarRule("forCondition")]
	private Antlr3CstNode forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 26);
		var retval = new Antlr3CstNode("forCondition");
		
		retval.Start = (IToken)input.LT(1);
		int forCondition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal240 = default(IToken);
		Antlr3CstNode commaList239 = default(Antlr3CstNode);

		object char_literal240_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(234, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:235:2: ( ( commaList )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:235:4: ( commaList )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(235, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:235:4: ( commaList )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_1 = input.LA(1);

			if (((LA60_1>=Abstract && LA60_1<=And)||(LA60_1>=ArrayType && LA60_1<=As)||LA60_1==Bang||(LA60_1>=BoolType && LA60_1<=Class)||LA60_1==Clone||(LA60_1>=Const && LA60_1<=Continue)||(LA60_1>=Default && LA60_1<=Die)||LA60_1==Do||(LA60_1>=DoubleQuotedString && LA60_1<=Empty)||(LA60_1>=Eval && LA60_1<=Exit)||(LA60_1>=Extends && LA60_1<=Foreach)||(LA60_1>=Function && LA60_1<=HaltCompiler)||LA60_1==HereDoc||(LA60_1>=If && LA60_1<=IncrementOperator)||(LA60_1>=Instanceof && LA60_1<=List)||LA60_1==Minus||(LA60_1>=Namespace && LA60_1<=Null)||LA60_1==ObjectType||(LA60_1>=OpenRoundBracket && LA60_1<=Or)||(LA60_1>=Plus && LA60_1<=Public)||(LA60_1>=Real && LA60_1<=Return)||LA60_1==SingleQuotedString||(LA60_1>=Static && LA60_1<=Try)||LA60_1==UnquotedString||(LA60_1>=UnsetType && LA60_1<=While)||(LA60_1>=Xor && LA60_1<=130)))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:235:4: commaList
				{
				DebugLocation(235, 4);
				PushFollow(Follow._commaList_in_forCondition1295);
				commaList239=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList239.Tree, commaList239, "commaList239", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(235, 15);
			char_literal240=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forCondition1298); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal240_tree = (object)adaptor.Create(char_literal240, "char_literal240", retval);
			adaptor.AddChild(root_0, char_literal240_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forCondition", 26);
			LeaveRule("forCondition", 26);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 26, forCondition_StartIndex); }

		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return retval;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdate();
	partial void LeaveRule_forUpdate();
	// $ANTLR start "forUpdate"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:238:1: forUpdate : ( commaList )? ;
	[GrammarRule("forUpdate")]
	private Antlr3CstNode forUpdate()
	{
		EnterRule_forUpdate();
		EnterRule("forUpdate", 27);
		var retval = new Antlr3CstNode("forUpdate");
		
		retval.Start = (IToken)input.LT(1);
		int forUpdate_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode commaList241 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "forUpdate");
		DebugLocation(238, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:239:2: ( ( commaList )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:239:4: ( commaList )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(239, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:239:4: ( commaList )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if (((LA61_1>=Abstract && LA61_1<=And)||(LA61_1>=ArrayType && LA61_1<=As)||LA61_1==Bang||(LA61_1>=BoolType && LA61_1<=Class)||LA61_1==Clone||(LA61_1>=Const && LA61_1<=Continue)||(LA61_1>=Default && LA61_1<=Die)||LA61_1==Do||(LA61_1>=DoubleQuotedString && LA61_1<=Empty)||(LA61_1>=Eval && LA61_1<=Exit)||(LA61_1>=Extends && LA61_1<=Foreach)||(LA61_1>=Function && LA61_1<=HaltCompiler)||LA61_1==HereDoc||(LA61_1>=If && LA61_1<=IncrementOperator)||(LA61_1>=Instanceof && LA61_1<=List)||LA61_1==Minus||(LA61_1>=Namespace && LA61_1<=Null)||LA61_1==ObjectType||(LA61_1>=OpenRoundBracket && LA61_1<=Or)||(LA61_1>=Plus && LA61_1<=Public)||(LA61_1>=Real && LA61_1<=Return)||LA61_1==SingleQuotedString||(LA61_1>=Static && LA61_1<=Try)||LA61_1==UnquotedString||(LA61_1>=UnsetType && LA61_1<=While)||(LA61_1>=Xor && LA61_1<=130)))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:239:4: commaList
				{
				DebugLocation(239, 4);
				PushFollow(Follow._commaList_in_forUpdate1310);
				commaList241=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList241.Tree, commaList241, "commaList241", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forUpdate", 27);
			LeaveRule("forUpdate", 27);
			LeaveRule_forUpdate();
			if (state.backtracking > 0) { Memoize(input, 27, forUpdate_StartIndex); }

		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "forUpdate"); }
		return retval;

	}
	// $ANTLR end "forUpdate"

	partial void EnterRule_cases();
	partial void LeaveRule_cases();
	// $ANTLR start "cases"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:242:1: cases : ( ( casestatement )* defaultcase ( casestatement )* | ( casestatement )+ );
	[GrammarRule("cases")]
	private Antlr3CstNode cases()
	{
		EnterRule_cases();
		EnterRule("cases", 28);
		var retval = new Antlr3CstNode("cases");
		
		retval.Start = (IToken)input.LT(1);
		int cases_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode casestatement242 = default(Antlr3CstNode);
		Antlr3CstNode defaultcase243 = default(Antlr3CstNode);
		Antlr3CstNode casestatement244 = default(Antlr3CstNode);
		Antlr3CstNode casestatement245 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "cases");
		DebugLocation(242, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:2: ( ( casestatement )* defaultcase ( casestatement )* | ( casestatement )+ )
			int alt65=2;
			try { DebugEnterDecision(65, false);
			int LA65_1 = input.LA(1);

			if ((LA65_1==Case))
			{
				int LA65_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Php_fragment)))
				{
					alt65 = 1;
				}
				else if ((true))
				{
					alt65 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA65_1==Default))
			{
				alt65 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:4: ( casestatement )* defaultcase ( casestatement )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(243, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:4: ( casestatement )*
				try { DebugEnterSubRule(62);
				while (true)
				{
					int alt62=2;
					try { DebugEnterDecision(62, false);
					int LA62_1 = input.LA(1);

					if ((LA62_1==Case))
					{
						alt62 = 1;
					}


					} finally { DebugExitDecision(62); }
					switch ( alt62 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:4: casestatement
						{
						DebugLocation(243, 4);
						PushFollow(Follow._casestatement_in_cases1322);
						casestatement242=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement242.Tree, casestatement242, "casestatement242", retval);

						}
						break;

					default:
						goto loop62;
					}
				}

				loop62:
					;

				} finally { DebugExitSubRule(62); }

				DebugLocation(243, 19);
				PushFollow(Follow._defaultcase_in_cases1325);
				defaultcase243=defaultcase();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defaultcase243.Tree, defaultcase243, "defaultcase243", retval);
				DebugLocation(243, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:31: ( casestatement )*
				try { DebugEnterSubRule(63);
				while (true)
				{
					int alt63=2;
					try { DebugEnterDecision(63, false);
					int LA63_1 = input.LA(1);

					if ((LA63_1==Case))
					{
						alt63 = 1;
					}


					} finally { DebugExitDecision(63); }
					switch ( alt63 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:31: casestatement
						{
						DebugLocation(243, 31);
						PushFollow(Follow._casestatement_in_cases1327);
						casestatement244=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement244.Tree, casestatement244, "casestatement244", retval);

						}
						break;

					default:
						goto loop63;
					}
				}

				loop63:
					;

				} finally { DebugExitSubRule(63); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:244:4: ( casestatement )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(244, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:244:4: ( casestatement )+
				int cnt64=0;
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=2;
					try { DebugEnterDecision(64, false);
					int LA64_1 = input.LA(1);

					if ((LA64_1==Case))
					{
						alt64 = 1;
					}


					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:244:4: casestatement
						{
						DebugLocation(244, 4);
						PushFollow(Follow._casestatement_in_cases1333);
						casestatement245=casestatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement245.Tree, casestatement245, "casestatement245", retval);

						}
						break;

					default:
						if (cnt64 >= 1)
							goto loop64;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee64 = new EarlyExitException( 64, input );
						DebugRecognitionException(eee64);
						throw eee64;
					}
					cnt64++;
				}
				loop64:
					;

				} finally { DebugExitSubRule(64); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cases", 28);
			LeaveRule("cases", 28);
			LeaveRule_cases();
			if (state.backtracking > 0) { Memoize(input, 28, cases_StartIndex); }

		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "cases"); }
		return retval;

	}
	// $ANTLR end "cases"

	partial void EnterRule_casestatement();
	partial void LeaveRule_casestatement();
	// $ANTLR start "casestatement"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:247:1: casestatement : Case expression ( ':' | ';' ) ( statement )* ;
	[GrammarRule("casestatement")]
	private Antlr3CstNode casestatement()
	{
		EnterRule_casestatement();
		EnterRule("casestatement", 29);
		var retval = new Antlr3CstNode("casestatement");
		
		retval.Start = (IToken)input.LT(1);
		int casestatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Case246 = default(IToken);
		IToken set248 = default(IToken);
		Antlr3CstNode expression247 = default(Antlr3CstNode);
		Antlr3CstNode statement249 = default(Antlr3CstNode);

		object Case246_tree = default(object);
		object set248_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "casestatement");
		DebugLocation(247, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:248:2: ( Case expression ( ':' | ';' ) ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:248:4: Case expression ( ':' | ';' ) ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(248, 4);
			Case246=(IToken)Match(input,Case,Follow._Case_in_casestatement1345); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Case246_tree = (object)adaptor.Create(Case246, "Case246", retval);
			adaptor.AddChild(root_0, Case246_tree);
			}
			DebugLocation(248, 9);
			PushFollow(Follow._expression_in_casestatement1347);
			expression247=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression247.Tree, expression247, "expression247", retval);
			DebugLocation(248, 20);

			set248=(IToken)input.LT(1);
			if (input.LA(1)==Colon||input.LA(1)==SemiColon)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set248, "set248", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(248, 30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:248:30: ( statement )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				switch (input.LA(1))
				{
				case Default:
					{
					int LA66_2 = input.LA(2);

					if ((EvaluatePredicate(synpred99_Php_fragment)))
					{
						alt66 = 1;
					}


					}
					break;
				case Case:
					{
					int LA66_2 = input.LA(2);

					if ((EvaluatePredicate(synpred99_Php_fragment)))
					{
						alt66 = 1;
					}


					}
					break;
				case Abstract:
				case Ampersand:
				case And:
				case ArrayType:
				case As:
				case Bang:
				case BodyString:
				case BoolType:
				case BooleanType:
				case Break:
				case Catch:
				case Class:
				case Clone:
				case Const:
				case Continue:
				case Die:
				case Do:
				case DoubleQuotedString:
				case DoubleType:
				case Echo:
				case Else:
				case ElseIf:
				case Empty:
				case Eval:
				case Exit:
				case Extends:
				case False:
				case Finally:
				case FloatType:
				case For:
				case Foreach:
				case Function:
				case Global:
				case Goto:
				case HaltCompiler:
				case HereDoc:
				case If:
				case Implements:
				case Include:
				case IncludeOnce:
				case IncrementOperator:
				case Instanceof:
				case IntType:
				case Integer:
				case IntegerType:
				case Interface:
				case Isset:
				case List:
				case Minus:
				case Namespace:
				case New:
				case Null:
				case ObjectType:
				case OpenCurlyBracket:
				case OpenRoundBracket:
				case OpenSquareBracket:
				case Or:
				case Plus:
				case Print:
				case Private:
				case Protected:
				case Public:
				case Real:
				case RealType:
				case Require:
				case RequireOnce:
				case Return:
				case SemiColon:
				case SingleQuotedString:
				case Static:
				case StringType:
				case SuppressWarnings:
				case Switch:
				case Throw:
				case Tilde:
				case True:
				case Try:
				case UnquotedString:
				case UnsetType:
				case Use:
				case Var:
				case VariableName:
				case While:
				case Xor:
				case 129:
				case 130:
					{
					alt66 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:248:30: statement
					{
					DebugLocation(248, 30);
					PushFollow(Follow._statement_in_casestatement1355);
					statement249=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement249.Tree, statement249, "statement249", retval);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("casestatement", 29);
			LeaveRule("casestatement", 29);
			LeaveRule_casestatement();
			if (state.backtracking > 0) { Memoize(input, 29, casestatement_StartIndex); }

		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "casestatement"); }
		return retval;

	}
	// $ANTLR end "casestatement"

	partial void EnterRule_defaultcase();
	partial void LeaveRule_defaultcase();
	// $ANTLR start "defaultcase"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:251:1: defaultcase : ( Default ( ':' | ';' ) ( statement )* ) ;
	[GrammarRule("defaultcase")]
	private Antlr3CstNode defaultcase()
	{
		EnterRule_defaultcase();
		EnterRule("defaultcase", 30);
		var retval = new Antlr3CstNode("defaultcase");
		
		retval.Start = (IToken)input.LT(1);
		int defaultcase_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Default250 = default(IToken);
		IToken set251 = default(IToken);
		Antlr3CstNode statement252 = default(Antlr3CstNode);

		object Default250_tree = default(object);
		object set251_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "defaultcase");
		DebugLocation(251, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:252:2: ( ( Default ( ':' | ';' ) ( statement )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:252:4: ( Default ( ':' | ';' ) ( statement )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(252, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:252:4: ( Default ( ':' | ';' ) ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:252:5: Default ( ':' | ';' ) ( statement )*
			{
			DebugLocation(252, 5);
			Default250=(IToken)Match(input,Default,Follow._Default_in_defaultcase1369); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Default250_tree = (object)adaptor.Create(Default250, "Default250", retval);
			adaptor.AddChild(root_0, Default250_tree);
			}
			DebugLocation(252, 13);

			set251=(IToken)input.LT(1);
			if (input.LA(1)==Colon||input.LA(1)==SemiColon)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set251, "set251", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(252, 23);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:252:23: ( statement )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_1 = input.LA(1);

				if ((LA67_1==Case))
				{
					int LA67_2 = input.LA(2);

					if ((EvaluatePredicate(synpred101_Php_fragment)))
					{
						alt67 = 1;
					}


				}
				else if (((LA67_1>=Abstract && LA67_1<=And)||(LA67_1>=ArrayType && LA67_1<=As)||(LA67_1>=Bang && LA67_1<=BodyString)||(LA67_1>=BoolType && LA67_1<=Break)||(LA67_1>=Catch && LA67_1<=Class)||LA67_1==Clone||(LA67_1>=Const && LA67_1<=Continue)||(LA67_1>=Default && LA67_1<=Die)||LA67_1==Do||(LA67_1>=DoubleQuotedString && LA67_1<=Empty)||(LA67_1>=Eval && LA67_1<=Exit)||(LA67_1>=Extends && LA67_1<=Foreach)||(LA67_1>=Function && LA67_1<=HaltCompiler)||LA67_1==HereDoc||(LA67_1>=If && LA67_1<=IncrementOperator)||(LA67_1>=Instanceof && LA67_1<=List)||LA67_1==Minus||(LA67_1>=Namespace && LA67_1<=Null)||LA67_1==ObjectType||(LA67_1>=OpenCurlyBracket && LA67_1<=Or)||(LA67_1>=Plus && LA67_1<=Public)||(LA67_1>=Real && LA67_1<=SemiColon)||LA67_1==SingleQuotedString||(LA67_1>=Static && LA67_1<=Try)||LA67_1==UnquotedString||(LA67_1>=UnsetType && LA67_1<=While)||(LA67_1>=Xor && LA67_1<=130)))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:252:23: statement
					{
					DebugLocation(252, 23);
					PushFollow(Follow._statement_in_defaultcase1377);
					statement252=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement252.Tree, statement252, "statement252", retval);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defaultcase", 30);
			LeaveRule("defaultcase", 30);
			LeaveRule_defaultcase();
			if (state.backtracking > 0) { Memoize(input, 30, defaultcase_StartIndex); }

		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultcase"); }
		return retval;

	}
	// $ANTLR end "defaultcase"

	partial void EnterRule_anonymousFunctionDefinition();
	partial void LeaveRule_anonymousFunctionDefinition();
	// $ANTLR start "anonymousFunctionDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:255:1: anonymousFunctionDefinition : Function parametersDefinition ( Use parametersDefinition )? bracketedBlock ;
	[GrammarRule("anonymousFunctionDefinition")]
	private Antlr3CstNode anonymousFunctionDefinition()
	{
		EnterRule_anonymousFunctionDefinition();
		EnterRule("anonymousFunctionDefinition", 31);
		var retval = new Antlr3CstNode("anonymousFunctionDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int anonymousFunctionDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function253 = default(IToken);
		IToken Use255 = default(IToken);
		Antlr3CstNode parametersDefinition254 = default(Antlr3CstNode);
		Antlr3CstNode parametersDefinition256 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock257 = default(Antlr3CstNode);

		object Function253_tree = default(object);
		object Use255_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymousFunctionDefinition");
		DebugLocation(255, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:256:2: ( Function parametersDefinition ( Use parametersDefinition )? bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:256:4: Function parametersDefinition ( Use parametersDefinition )? bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(256, 4);
			Function253=(IToken)Match(input,Function,Follow._Function_in_anonymousFunctionDefinition1390); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Function253_tree = (object)adaptor.Create(Function253, "Function253", retval);
			adaptor.AddChild(root_0, Function253_tree);
			}
			DebugLocation(256, 13);
			PushFollow(Follow._parametersDefinition_in_anonymousFunctionDefinition1392);
			parametersDefinition254=parametersDefinition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition254.Tree, parametersDefinition254, "parametersDefinition254", retval);
			DebugLocation(256, 34);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:256:34: ( Use parametersDefinition )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_1 = input.LA(1);

			if ((LA68_1==Use))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:256:35: Use parametersDefinition
				{
				DebugLocation(256, 35);
				Use255=(IToken)Match(input,Use,Follow._Use_in_anonymousFunctionDefinition1395); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Use255_tree = (object)adaptor.Create(Use255, "Use255", retval);
				adaptor.AddChild(root_0, Use255_tree);
				}
				DebugLocation(256, 39);
				PushFollow(Follow._parametersDefinition_in_anonymousFunctionDefinition1397);
				parametersDefinition256=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition256.Tree, parametersDefinition256, "parametersDefinition256", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(256, 62);
			PushFollow(Follow._bracketedBlock_in_anonymousFunctionDefinition1401);
			bracketedBlock257=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock257.Tree, bracketedBlock257, "bracketedBlock257", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymousFunctionDefinition", 31);
			LeaveRule("anonymousFunctionDefinition", 31);
			LeaveRule_anonymousFunctionDefinition();
			if (state.backtracking > 0) { Memoize(input, 31, anonymousFunctionDefinition_StartIndex); }

		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymousFunctionDefinition"); }
		return retval;

	}
	// $ANTLR end "anonymousFunctionDefinition"

	partial void EnterRule_functionDefinition();
	partial void LeaveRule_functionDefinition();
	// $ANTLR start "functionDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:259:1: functionDefinition : Function ( '&' )? qualifiedName parametersDefinition bracketedBlock ;
	[GrammarRule("functionDefinition")]
	private Antlr3CstNode functionDefinition()
	{
		EnterRule_functionDefinition();
		EnterRule("functionDefinition", 32);
		var retval = new Antlr3CstNode("functionDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int functionDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function258 = default(IToken);
		IToken char_literal259 = default(IToken);
		Antlr3CstNode qualifiedName260 = default(Antlr3CstNode);
		Antlr3CstNode parametersDefinition261 = default(Antlr3CstNode);
		Antlr3CstNode bracketedBlock262 = default(Antlr3CstNode);

		object Function258_tree = default(object);
		object char_literal259_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionDefinition");
		DebugLocation(259, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:260:2: ( Function ( '&' )? qualifiedName parametersDefinition bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:260:4: Function ( '&' )? qualifiedName parametersDefinition bracketedBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(260, 4);
			Function258=(IToken)Match(input,Function,Follow._Function_in_functionDefinition1412); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Function258_tree = (object)adaptor.Create(Function258, "Function258", retval);
			adaptor.AddChild(root_0, Function258_tree);
			}
			DebugLocation(260, 13);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:260:13: ( '&' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==Ampersand))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:260:13: '&'
				{
				DebugLocation(260, 13);
				char_literal259=(IToken)Match(input,Ampersand,Follow._Ampersand_in_functionDefinition1414); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal259_tree = (object)adaptor.Create(char_literal259, "char_literal259", retval);
				adaptor.AddChild(root_0, char_literal259_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(260, 18);
			PushFollow(Follow._qualifiedName_in_functionDefinition1417);
			qualifiedName260=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName260.Tree, qualifiedName260, "qualifiedName260", retval);
			DebugLocation(260, 32);
			PushFollow(Follow._parametersDefinition_in_functionDefinition1419);
			parametersDefinition261=parametersDefinition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parametersDefinition261.Tree, parametersDefinition261, "parametersDefinition261", retval);
			DebugLocation(260, 53);
			PushFollow(Follow._bracketedBlock_in_functionDefinition1421);
			bracketedBlock262=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock262.Tree, bracketedBlock262, "bracketedBlock262", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDefinition", 32);
			LeaveRule("functionDefinition", 32);
			LeaveRule_functionDefinition();
			if (state.backtracking > 0) { Memoize(input, 32, functionDefinition_StartIndex); }

		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDefinition"); }
		return retval;

	}
	// $ANTLR end "functionDefinition"

	partial void EnterRule_parametersDefinition();
	partial void LeaveRule_parametersDefinition();
	// $ANTLR start "parametersDefinition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:263:1: parametersDefinition : OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket ;
	[GrammarRule("parametersDefinition")]
	private Antlr3CstNode parametersDefinition()
	{
		EnterRule_parametersDefinition();
		EnterRule("parametersDefinition", 33);
		var retval = new Antlr3CstNode("parametersDefinition");
		
		retval.Start = (IToken)input.LT(1);
		int parametersDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket263 = default(IToken);
		IToken Comma265 = default(IToken);
		IToken CloseRoundBracket267 = default(IToken);
		Antlr3CstNode paramDef264 = default(Antlr3CstNode);
		Antlr3CstNode paramDef266 = default(Antlr3CstNode);

		object OpenRoundBracket263_tree = default(object);
		object Comma265_tree = default(object);
		object CloseRoundBracket267_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parametersDefinition");
		DebugLocation(263, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:264:2: ( OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:264:4: OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(264, 4);
			OpenRoundBracket263=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_parametersDefinition1432); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenRoundBracket263_tree = (object)adaptor.Create(OpenRoundBracket263, "OpenRoundBracket263", retval);
			adaptor.AddChild(root_0, OpenRoundBracket263_tree);
			}
			DebugLocation(264, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:264:21: ( paramDef ( Comma paramDef )* )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_1 = input.LA(1);

			if (((LA71_1>=Abstract && LA71_1<=And)||(LA71_1>=ArrayType && LA71_1<=As)||(LA71_1>=BoolType && LA71_1<=Class)||LA71_1==Clone||(LA71_1>=Const && LA71_1<=Continue)||(LA71_1>=Default && LA71_1<=Die)||LA71_1==Do||(LA71_1>=DoubleType && LA71_1<=Empty)||(LA71_1>=Eval && LA71_1<=Exit)||(LA71_1>=Extends && LA71_1<=Foreach)||(LA71_1>=Function && LA71_1<=HaltCompiler)||(LA71_1>=If && LA71_1<=IncludeOnce)||(LA71_1>=Instanceof && LA71_1<=IntType)||(LA71_1>=IntegerType && LA71_1<=List)||(LA71_1>=Namespace && LA71_1<=Null)||LA71_1==ObjectType||LA71_1==Or||(LA71_1>=Print && LA71_1<=Public)||(LA71_1>=RealType && LA71_1<=Return)||(LA71_1>=Static && LA71_1<=StringType)||(LA71_1>=Switch && LA71_1<=Throw)||(LA71_1>=True && LA71_1<=Try)||LA71_1==UnquotedString||(LA71_1>=UnsetType && LA71_1<=While)||LA71_1==Xor||LA71_1==130))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:264:22: paramDef ( Comma paramDef )*
				{
				DebugLocation(264, 22);
				PushFollow(Follow._paramDef_in_parametersDefinition1435);
				paramDef264=paramDef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, paramDef264.Tree, paramDef264, "paramDef264", retval);
				DebugLocation(264, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:264:31: ( Comma paramDef )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_1 = input.LA(1);

					if ((LA70_1==Comma))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:264:32: Comma paramDef
						{
						DebugLocation(264, 32);
						Comma265=(IToken)Match(input,Comma,Follow._Comma_in_parametersDefinition1438); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma265_tree = (object)adaptor.Create(Comma265, "Comma265", retval);
						adaptor.AddChild(root_0, Comma265_tree);
						}
						DebugLocation(264, 38);
						PushFollow(Follow._paramDef_in_parametersDefinition1440);
						paramDef266=paramDef();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, paramDef266.Tree, paramDef266, "paramDef266", retval);

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }


				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(264, 51);
			CloseRoundBracket267=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_parametersDefinition1446); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseRoundBracket267_tree = (object)adaptor.Create(CloseRoundBracket267, "CloseRoundBracket267", retval);
			adaptor.AddChild(root_0, CloseRoundBracket267_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parametersDefinition", 33);
			LeaveRule("parametersDefinition", 33);
			LeaveRule_parametersDefinition();
			if (state.backtracking > 0) { Memoize(input, 33, parametersDefinition_StartIndex); }

		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "parametersDefinition"); }
		return retval;

	}
	// $ANTLR end "parametersDefinition"

	partial void EnterRule_paramDef();
	partial void LeaveRule_paramDef();
	// $ANTLR start "paramDef"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:267:1: paramDef : ( primitiveType | qualifiedName )? paramName ( Equals atom )? ;
	[GrammarRule("paramDef")]
	private Antlr3CstNode paramDef()
	{
		EnterRule_paramDef();
		EnterRule("paramDef", 34);
		var retval = new Antlr3CstNode("paramDef");
		
		retval.Start = (IToken)input.LT(1);
		int paramDef_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Equals271 = default(IToken);
		Antlr3CstNode primitiveType268 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName269 = default(Antlr3CstNode);
		Antlr3CstNode paramName270 = default(Antlr3CstNode);
		Antlr3CstNode atom272 = default(Antlr3CstNode);

		object Equals271_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramDef");
		DebugLocation(267, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:2: ( ( primitiveType | qualifiedName )? paramName ( Equals atom )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:4: ( primitiveType | qualifiedName )? paramName ( Equals atom )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(268, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:4: ( primitiveType | qualifiedName )?
			int alt72=3;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case BoolType:
			case BooleanType:
			case DoubleType:
			case FloatType:
			case IntType:
			case IntegerType:
			case ObjectType:
			case RealType:
			case StringType:
				{
				int LA72_2 = input.LA(2);

				if ((EvaluatePredicate(synpred106_Php_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred107_Php_fragment)))
				{
					alt72 = 2;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Finally:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case Null:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
			case 130:
				{
				alt72 = 2;
				}
				break;
			case ArrayType:
			case UnsetType:
				{
				alt72 = 1;
				}
				break;
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:5: primitiveType
				{
				DebugLocation(268, 5);
				PushFollow(Follow._primitiveType_in_paramDef1458);
				primitiveType268=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType268.Tree, primitiveType268, "primitiveType268", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:21: qualifiedName
				{
				DebugLocation(268, 21);
				PushFollow(Follow._qualifiedName_in_paramDef1462);
				qualifiedName269=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName269.Tree, qualifiedName269, "qualifiedName269", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(268, 37);
			PushFollow(Follow._paramName_in_paramDef1466);
			paramName270=paramName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, paramName270.Tree, paramName270, "paramName270", retval);
			DebugLocation(268, 47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:47: ( Equals atom )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_1 = input.LA(1);

			if ((LA73_1==Equals))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:48: Equals atom
				{
				DebugLocation(268, 48);
				Equals271=(IToken)Match(input,Equals,Follow._Equals_in_paramDef1469); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals271_tree = (object)adaptor.Create(Equals271, "Equals271", retval);
				adaptor.AddChild(root_0, Equals271_tree);
				}
				DebugLocation(268, 55);
				PushFollow(Follow._atom_in_paramDef1471);
				atom272=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom272.Tree, atom272, "atom272", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramDef", 34);
			LeaveRule("paramDef", 34);
			LeaveRule_paramDef();
			if (state.backtracking > 0) { Memoize(input, 34, paramDef_StartIndex); }

		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "paramDef"); }
		return retval;

	}
	// $ANTLR end "paramDef"

	partial void EnterRule_paramName();
	partial void LeaveRule_paramName();
	// $ANTLR start "paramName"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:271:1: paramName : ( VariableName | Ampersand VariableName );
	[GrammarRule("paramName")]
	private Antlr3CstNode paramName()
	{
		EnterRule_paramName();
		EnterRule("paramName", 35);
		var retval = new Antlr3CstNode("paramName");
		
		retval.Start = (IToken)input.LT(1);
		int paramName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName273 = default(IToken);
		IToken Ampersand274 = default(IToken);
		IToken VariableName275 = default(IToken);

		object VariableName273_tree = default(object);
		object Ampersand274_tree = default(object);
		object VariableName275_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramName");
		DebugLocation(271, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:272:2: ( VariableName | Ampersand VariableName )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			int LA74_1 = input.LA(1);

			if ((LA74_1==VariableName))
			{
				alt74 = 1;
			}
			else if ((LA74_1==Ampersand))
			{
				alt74 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:272:4: VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(272, 4);
				VariableName273=(IToken)Match(input,VariableName,Follow._VariableName_in_paramName1484); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName273_tree = (object)adaptor.Create(VariableName273, "VariableName273", retval);
				adaptor.AddChild(root_0, VariableName273_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:273:4: Ampersand VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(273, 4);
				Ampersand274=(IToken)Match(input,Ampersand,Follow._Ampersand_in_paramName1489); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand274_tree = (object)adaptor.Create(Ampersand274, "Ampersand274", retval);
				adaptor.AddChild(root_0, Ampersand274_tree);
				}
				DebugLocation(273, 14);
				VariableName275=(IToken)Match(input,VariableName,Follow._VariableName_in_paramName1491); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName275_tree = (object)adaptor.Create(VariableName275, "VariableName275", retval);
				adaptor.AddChild(root_0, VariableName275_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramName", 35);
			LeaveRule("paramName", 35);
			LeaveRule_paramName();
			if (state.backtracking > 0) { Memoize(input, 35, paramName_StartIndex); }

		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "paramName"); }
		return retval;

	}
	// $ANTLR end "paramName"

	partial void EnterRule_commaList();
	partial void LeaveRule_commaList();
	// $ANTLR start "commaList"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:276:1: commaList : expression ( ',' expression )* ;
	[GrammarRule("commaList")]
	private Antlr3CstNode commaList()
	{
		EnterRule_commaList();
		EnterRule("commaList", 36);
		var retval = new Antlr3CstNode("commaList");
		
		retval.Start = (IToken)input.LT(1);
		int commaList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal277 = default(IToken);
		Antlr3CstNode expression276 = default(Antlr3CstNode);
		Antlr3CstNode expression278 = default(Antlr3CstNode);

		object char_literal277_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "commaList");
		DebugLocation(276, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:277:2: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:277:4: expression ( ',' expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(277, 4);
			PushFollow(Follow._expression_in_commaList1502);
			expression276=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression276.Tree, expression276, "expression276", retval);
			DebugLocation(277, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:277:15: ( ',' expression )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==Comma))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:277:16: ',' expression
					{
					DebugLocation(277, 16);
					char_literal277=(IToken)Match(input,Comma,Follow._Comma_in_commaList1505); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal277_tree = (object)adaptor.Create(char_literal277, "char_literal277", retval);
					adaptor.AddChild(root_0, char_literal277_tree);
					}
					DebugLocation(277, 20);
					PushFollow(Follow._expression_in_commaList1507);
					expression278=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression278.Tree, expression278, "expression278", retval);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commaList", 36);
			LeaveRule("commaList", 36);
			LeaveRule_commaList();
			if (state.backtracking > 0) { Memoize(input, 36, commaList_StartIndex); }

		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "commaList"); }
		return retval;

	}
	// $ANTLR end "commaList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:280:1: expression : weakLogicalOr ;
	[GrammarRule("expression")]
	private Antlr3CstNode expression()
	{
		EnterRule_expression();
		EnterRule("expression", 37);
		var retval = new Antlr3CstNode("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode weakLogicalOr279 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(280, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:281:2: ( weakLogicalOr )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:281:4: weakLogicalOr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(281, 4);
			PushFollow(Follow._weakLogicalOr_in_expression1522);
			weakLogicalOr279=weakLogicalOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalOr279.Tree, weakLogicalOr279, "weakLogicalOr279", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 37);
			LeaveRule("expression", 37);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 37, expression_StartIndex); }

		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_weakLogicalOr();
	partial void LeaveRule_weakLogicalOr();
	// $ANTLR start "weakLogicalOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:284:1: weakLogicalOr : weakLogicalXor ( Or weakLogicalXor )* ;
	[GrammarRule("weakLogicalOr")]
	private Antlr3CstNode weakLogicalOr()
	{
		EnterRule_weakLogicalOr();
		EnterRule("weakLogicalOr", 38);
		var retval = new Antlr3CstNode("weakLogicalOr");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Or281 = default(IToken);
		Antlr3CstNode weakLogicalXor280 = default(Antlr3CstNode);
		Antlr3CstNode weakLogicalXor282 = default(Antlr3CstNode);

		object Or281_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalOr");
		DebugLocation(284, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:285:2: ( weakLogicalXor ( Or weakLogicalXor )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:285:4: weakLogicalXor ( Or weakLogicalXor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(285, 4);
			PushFollow(Follow._weakLogicalXor_in_weakLogicalOr1533);
			weakLogicalXor280=weakLogicalXor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor280.Tree, weakLogicalXor280, "weakLogicalXor280", retval);
			DebugLocation(285, 19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:285:19: ( Or weakLogicalXor )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==Or))
				{
					int LA76_2 = input.LA(2);

					if ((EvaluatePredicate(synpred111_Php_fragment)))
					{
						alt76 = 1;
					}


				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:285:20: Or weakLogicalXor
					{
					DebugLocation(285, 20);
					Or281=(IToken)Match(input,Or,Follow._Or_in_weakLogicalOr1536); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Or281_tree = (object)adaptor.Create(Or281, "Or281", retval);
					adaptor.AddChild(root_0, Or281_tree);
					}
					DebugLocation(285, 23);
					PushFollow(Follow._weakLogicalXor_in_weakLogicalOr1538);
					weakLogicalXor282=weakLogicalXor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor282.Tree, weakLogicalXor282, "weakLogicalXor282", retval);

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalOr", 38);
			LeaveRule("weakLogicalOr", 38);
			LeaveRule_weakLogicalOr();
			if (state.backtracking > 0) { Memoize(input, 38, weakLogicalOr_StartIndex); }

		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalOr"); }
		return retval;

	}
	// $ANTLR end "weakLogicalOr"

	partial void EnterRule_weakLogicalXor();
	partial void LeaveRule_weakLogicalXor();
	// $ANTLR start "weakLogicalXor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:288:1: weakLogicalXor : weakLogicalAnd ( Xor weakLogicalAnd )* ;
	[GrammarRule("weakLogicalXor")]
	private Antlr3CstNode weakLogicalXor()
	{
		EnterRule_weakLogicalXor();
		EnterRule("weakLogicalXor", 39);
		var retval = new Antlr3CstNode("weakLogicalXor");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalXor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Xor284 = default(IToken);
		Antlr3CstNode weakLogicalAnd283 = default(Antlr3CstNode);
		Antlr3CstNode weakLogicalAnd285 = default(Antlr3CstNode);

		object Xor284_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalXor");
		DebugLocation(288, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:289:2: ( weakLogicalAnd ( Xor weakLogicalAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:289:4: weakLogicalAnd ( Xor weakLogicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(289, 4);
			PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor1551);
			weakLogicalAnd283=weakLogicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd283.Tree, weakLogicalAnd283, "weakLogicalAnd283", retval);
			DebugLocation(289, 19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:289:19: ( Xor weakLogicalAnd )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==Xor))
				{
					int LA77_2 = input.LA(2);

					if ((EvaluatePredicate(synpred112_Php_fragment)))
					{
						alt77 = 1;
					}


				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:289:20: Xor weakLogicalAnd
					{
					DebugLocation(289, 20);
					Xor284=(IToken)Match(input,Xor,Follow._Xor_in_weakLogicalXor1554); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Xor284_tree = (object)adaptor.Create(Xor284, "Xor284", retval);
					adaptor.AddChild(root_0, Xor284_tree);
					}
					DebugLocation(289, 24);
					PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor1556);
					weakLogicalAnd285=weakLogicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd285.Tree, weakLogicalAnd285, "weakLogicalAnd285", retval);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalXor", 39);
			LeaveRule("weakLogicalXor", 39);
			LeaveRule_weakLogicalXor();
			if (state.backtracking > 0) { Memoize(input, 39, weakLogicalXor_StartIndex); }

		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalXor"); }
		return retval;

	}
	// $ANTLR end "weakLogicalXor"

	partial void EnterRule_weakLogicalAnd();
	partial void LeaveRule_weakLogicalAnd();
	// $ANTLR start "weakLogicalAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:292:1: weakLogicalAnd : assignment ( And assignment )* ;
	[GrammarRule("weakLogicalAnd")]
	private Antlr3CstNode weakLogicalAnd()
	{
		EnterRule_weakLogicalAnd();
		EnterRule("weakLogicalAnd", 40);
		var retval = new Antlr3CstNode("weakLogicalAnd");
		
		retval.Start = (IToken)input.LT(1);
		int weakLogicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken And287 = default(IToken);
		Antlr3CstNode assignment286 = default(Antlr3CstNode);
		Antlr3CstNode assignment288 = default(Antlr3CstNode);

		object And287_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalAnd");
		DebugLocation(292, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:293:2: ( assignment ( And assignment )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:293:4: assignment ( And assignment )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(293, 4);
			PushFollow(Follow._assignment_in_weakLogicalAnd1570);
			assignment286=assignment();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment286.Tree, assignment286, "assignment286", retval);
			DebugLocation(293, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:293:15: ( And assignment )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==And))
				{
					int LA78_2 = input.LA(2);

					if ((EvaluatePredicate(synpred113_Php_fragment)))
					{
						alt78 = 1;
					}


				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:293:16: And assignment
					{
					DebugLocation(293, 16);
					And287=(IToken)Match(input,And,Follow._And_in_weakLogicalAnd1573); if (state.failed) return retval;
					if (state.backtracking == 0) {
					And287_tree = (object)adaptor.Create(And287, "And287", retval);
					adaptor.AddChild(root_0, And287_tree);
					}
					DebugLocation(293, 20);
					PushFollow(Follow._assignment_in_weakLogicalAnd1575);
					assignment288=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment288.Tree, assignment288, "assignment288", retval);

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalAnd", 40);
			LeaveRule("weakLogicalAnd", 40);
			LeaveRule_weakLogicalAnd();
			if (state.backtracking > 0) { Memoize(input, 40, weakLogicalAnd_StartIndex); }

		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalAnd"); }
		return retval;

	}
	// $ANTLR end "weakLogicalAnd"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:296:1: assignment : ( listVariables ( Equals | AsignmentOperator ) assignment | ternary );
	[GrammarRule("assignment")]
	private Antlr3CstNode assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 41);
		var retval = new Antlr3CstNode("assignment");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set290 = default(IToken);
		Antlr3CstNode listVariables289 = default(Antlr3CstNode);
		Antlr3CstNode assignment291 = default(Antlr3CstNode);
		Antlr3CstNode ternary292 = default(Antlr3CstNode);

		object set290_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(296, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:2: ( listVariables ( Equals | AsignmentOperator ) assignment | ternary )
			int alt79=2;
			try { DebugEnterDecision(79, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case ArrayType:
			case Bang:
			case DoubleQuotedString:
			case HereDoc:
			case IncrementOperator:
			case Integer:
			case Minus:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case SingleQuotedString:
			case SuppressWarnings:
			case Tilde:
			case UnsetType:
				{
				alt79 = 2;
				}
				break;
			case Clone:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Namespace:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA79_2 = input.LA(2);

				if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt79 = 1;
				}
				else if ((true))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:4: listVariables ( Equals | AsignmentOperator ) assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(297, 4);
				PushFollow(Follow._listVariables_in_assignment1588);
				listVariables289=listVariables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, listVariables289.Tree, listVariables289, "listVariables289", retval);
				DebugLocation(297, 18);

				set290=(IToken)input.LT(1);
				if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set290, "set290", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(297, 47);
				PushFollow(Follow._assignment_in_assignment1598);
				assignment291=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment291.Tree, assignment291, "assignment291", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:298:4: ternary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(298, 4);
				PushFollow(Follow._ternary_in_assignment1603);
				ternary292=ternary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ternary292.Tree, ternary292, "ternary292", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 41);
			LeaveRule("assignment", 41);
			LeaveRule_assignment();
			if (state.backtracking > 0) { Memoize(input, 41, assignment_StartIndex); }

		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_listVariables();
	partial void LeaveRule_listVariables();
	// $ANTLR start "listVariables"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:301:1: listVariables : ( List OpenRoundBracket ( name )? ( ',' ( name )? )* CloseRoundBracket | name );
	[GrammarRule("listVariables")]
	private Antlr3CstNode listVariables()
	{
		EnterRule_listVariables();
		EnterRule("listVariables", 42);
		var retval = new Antlr3CstNode("listVariables");
		
		retval.Start = (IToken)input.LT(1);
		int listVariables_StartIndex = input.Index;

		object root_0 = default(object);

		IToken List293 = default(IToken);
		IToken OpenRoundBracket294 = default(IToken);
		IToken char_literal296 = default(IToken);
		IToken CloseRoundBracket298 = default(IToken);
		Antlr3CstNode name295 = default(Antlr3CstNode);
		Antlr3CstNode name297 = default(Antlr3CstNode);
		Antlr3CstNode name299 = default(Antlr3CstNode);

		object List293_tree = default(object);
		object OpenRoundBracket294_tree = default(object);
		object char_literal296_tree = default(object);
		object CloseRoundBracket298_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "listVariables");
		DebugLocation(301, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:2: ( List OpenRoundBracket ( name )? ( ',' ( name )? )* CloseRoundBracket | name )
			int alt83=2;
			try { DebugEnterDecision(83, false);
			int LA83_1 = input.LA(1);

			if ((LA83_1==List))
			{
				int LA83_2 = input.LA(2);

				if ((EvaluatePredicate(synpred119_Php_fragment)))
				{
					alt83 = 1;
				}
				else if ((true))
				{
					alt83 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 83, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA83_1==Abstract||LA83_1==And||LA83_1==As||(LA83_1>=BoolType && LA83_1<=Class)||LA83_1==Clone||(LA83_1>=Const && LA83_1<=Continue)||(LA83_1>=Default && LA83_1<=Die)||LA83_1==Do||(LA83_1>=DoubleType && LA83_1<=Empty)||(LA83_1>=Eval && LA83_1<=Exit)||(LA83_1>=Extends && LA83_1<=Foreach)||(LA83_1>=Function && LA83_1<=HaltCompiler)||(LA83_1>=If && LA83_1<=IncludeOnce)||(LA83_1>=Instanceof && LA83_1<=IntType)||(LA83_1>=IntegerType && LA83_1<=Isset)||(LA83_1>=Namespace && LA83_1<=Null)||LA83_1==ObjectType||LA83_1==Or||(LA83_1>=Print && LA83_1<=Public)||(LA83_1>=RealType && LA83_1<=Return)||(LA83_1>=Static && LA83_1<=StringType)||(LA83_1>=Switch && LA83_1<=Throw)||(LA83_1>=True && LA83_1<=Try)||LA83_1==UnquotedString||(LA83_1>=Use && LA83_1<=While)||(LA83_1>=Xor && LA83_1<=130)))
			{
				alt83 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 83, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:4: List OpenRoundBracket ( name )? ( ',' ( name )? )* CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(302, 4);
				List293=(IToken)Match(input,List,Follow._List_in_listVariables1614); if (state.failed) return retval;
				if (state.backtracking == 0) {
				List293_tree = (object)adaptor.Create(List293, "List293", retval);
				adaptor.AddChild(root_0, List293_tree);
				}
				DebugLocation(302, 9);
				OpenRoundBracket294=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_listVariables1616); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket294_tree = (object)adaptor.Create(OpenRoundBracket294, "OpenRoundBracket294", retval);
				adaptor.AddChild(root_0, OpenRoundBracket294_tree);
				}
				DebugLocation(302, 26);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:26: ( name )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				int LA80_1 = input.LA(1);

				if ((LA80_1==Abstract||LA80_1==And||LA80_1==As||(LA80_1>=BoolType && LA80_1<=Class)||LA80_1==Clone||(LA80_1>=Const && LA80_1<=Continue)||(LA80_1>=Default && LA80_1<=Die)||LA80_1==Do||(LA80_1>=DoubleType && LA80_1<=Empty)||(LA80_1>=Eval && LA80_1<=Exit)||(LA80_1>=Extends && LA80_1<=Foreach)||(LA80_1>=Function && LA80_1<=HaltCompiler)||(LA80_1>=If && LA80_1<=IncludeOnce)||(LA80_1>=Instanceof && LA80_1<=IntType)||(LA80_1>=IntegerType && LA80_1<=List)||(LA80_1>=Namespace && LA80_1<=Null)||LA80_1==ObjectType||LA80_1==Or||(LA80_1>=Print && LA80_1<=Public)||(LA80_1>=RealType && LA80_1<=Return)||(LA80_1>=Static && LA80_1<=StringType)||(LA80_1>=Switch && LA80_1<=Throw)||(LA80_1>=True && LA80_1<=Try)||LA80_1==UnquotedString||(LA80_1>=Use && LA80_1<=While)||(LA80_1>=Xor && LA80_1<=130)))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:26: name
					{
					DebugLocation(302, 26);
					PushFollow(Follow._name_in_listVariables1618);
					name295=name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, name295.Tree, name295, "name295", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(302, 32);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:32: ( ',' ( name )? )*
				try { DebugEnterSubRule(82);
				while (true)
				{
					int alt82=2;
					try { DebugEnterDecision(82, false);
					int LA82_1 = input.LA(1);

					if ((LA82_1==Comma))
					{
						alt82 = 1;
					}


					} finally { DebugExitDecision(82); }
					switch ( alt82 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:33: ',' ( name )?
						{
						DebugLocation(302, 33);
						char_literal296=(IToken)Match(input,Comma,Follow._Comma_in_listVariables1622); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal296_tree = (object)adaptor.Create(char_literal296, "char_literal296", retval);
						adaptor.AddChild(root_0, char_literal296_tree);
						}
						DebugLocation(302, 37);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:37: ( name )?
						int alt81=2;
						try { DebugEnterSubRule(81);
						try { DebugEnterDecision(81, false);
						int LA81_1 = input.LA(1);

						if ((LA81_1==Abstract||LA81_1==And||LA81_1==As||(LA81_1>=BoolType && LA81_1<=Class)||LA81_1==Clone||(LA81_1>=Const && LA81_1<=Continue)||(LA81_1>=Default && LA81_1<=Die)||LA81_1==Do||(LA81_1>=DoubleType && LA81_1<=Empty)||(LA81_1>=Eval && LA81_1<=Exit)||(LA81_1>=Extends && LA81_1<=Foreach)||(LA81_1>=Function && LA81_1<=HaltCompiler)||(LA81_1>=If && LA81_1<=IncludeOnce)||(LA81_1>=Instanceof && LA81_1<=IntType)||(LA81_1>=IntegerType && LA81_1<=List)||(LA81_1>=Namespace && LA81_1<=Null)||LA81_1==ObjectType||LA81_1==Or||(LA81_1>=Print && LA81_1<=Public)||(LA81_1>=RealType && LA81_1<=Return)||(LA81_1>=Static && LA81_1<=StringType)||(LA81_1>=Switch && LA81_1<=Throw)||(LA81_1>=True && LA81_1<=Try)||LA81_1==UnquotedString||(LA81_1>=Use && LA81_1<=While)||(LA81_1>=Xor && LA81_1<=130)))
						{
							alt81 = 1;
						}
						} finally { DebugExitDecision(81); }
						switch (alt81)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:37: name
							{
							DebugLocation(302, 37);
							PushFollow(Follow._name_in_listVariables1624);
							name297=name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, name297.Tree, name297, "name297", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(81); }


						}
						break;

					default:
						goto loop82;
					}
				}

				loop82:
					;

				} finally { DebugExitSubRule(82); }

				DebugLocation(302, 45);
				CloseRoundBracket298=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_listVariables1629); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket298_tree = (object)adaptor.Create(CloseRoundBracket298, "CloseRoundBracket298", retval);
				adaptor.AddChild(root_0, CloseRoundBracket298_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:303:4: name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(303, 4);
				PushFollow(Follow._name_in_listVariables1635);
				name299=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name299.Tree, name299, "name299", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("listVariables", 42);
			LeaveRule("listVariables", 42);
			LeaveRule_listVariables();
			if (state.backtracking > 0) { Memoize(input, 42, listVariables_StartIndex); }

		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "listVariables"); }
		return retval;

	}
	// $ANTLR end "listVariables"

	partial void EnterRule_ternary();
	partial void LeaveRule_ternary();
	// $ANTLR start "ternary"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:306:1: ternary : ( logicalOr QuestionMark ( expression )? Colon expression | logicalOr );
	[GrammarRule("ternary")]
	private Antlr3CstNode ternary()
	{
		EnterRule_ternary();
		EnterRule("ternary", 43);
		var retval = new Antlr3CstNode("ternary");
		
		retval.Start = (IToken)input.LT(1);
		int ternary_StartIndex = input.Index;

		object root_0 = default(object);

		IToken QuestionMark301 = default(IToken);
		IToken Colon303 = default(IToken);
		Antlr3CstNode logicalOr300 = default(Antlr3CstNode);
		Antlr3CstNode expression302 = default(Antlr3CstNode);
		Antlr3CstNode expression304 = default(Antlr3CstNode);
		Antlr3CstNode logicalOr305 = default(Antlr3CstNode);

		object QuestionMark301_tree = default(object);
		object Colon303_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ternary");
		DebugLocation(306, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:307:2: ( logicalOr QuestionMark ( expression )? Colon expression | logicalOr )
			int alt85=2;
			try { DebugEnterDecision(85, false);
			switch (input.LA(1))
			{
			case Bang:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case List:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Namespace:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA85_2 = input.LA(2);

				if ((EvaluatePredicate(synpred121_Php_fragment)))
				{
					alt85 = 1;
				}
				else if ((true))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:307:4: logicalOr QuestionMark ( expression )? Colon expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(307, 4);
				PushFollow(Follow._logicalOr_in_ternary1646);
				logicalOr300=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr300.Tree, logicalOr300, "logicalOr300", retval);
				DebugLocation(307, 14);
				QuestionMark301=(IToken)Match(input,QuestionMark,Follow._QuestionMark_in_ternary1648); if (state.failed) return retval;
				if (state.backtracking == 0) {
				QuestionMark301_tree = (object)adaptor.Create(QuestionMark301, "QuestionMark301", retval);
				adaptor.AddChild(root_0, QuestionMark301_tree);
				}
				DebugLocation(307, 27);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:307:27: ( expression )?
				int alt84=2;
				try { DebugEnterSubRule(84);
				try { DebugEnterDecision(84, false);
				int LA84_1 = input.LA(1);

				if (((LA84_1>=Abstract && LA84_1<=And)||(LA84_1>=ArrayType && LA84_1<=As)||LA84_1==Bang||(LA84_1>=BoolType && LA84_1<=Class)||LA84_1==Clone||(LA84_1>=Const && LA84_1<=Continue)||(LA84_1>=Default && LA84_1<=Die)||LA84_1==Do||(LA84_1>=DoubleQuotedString && LA84_1<=Empty)||(LA84_1>=Eval && LA84_1<=Exit)||(LA84_1>=Extends && LA84_1<=Foreach)||(LA84_1>=Function && LA84_1<=HaltCompiler)||LA84_1==HereDoc||(LA84_1>=If && LA84_1<=IncrementOperator)||(LA84_1>=Instanceof && LA84_1<=List)||LA84_1==Minus||(LA84_1>=Namespace && LA84_1<=Null)||LA84_1==ObjectType||(LA84_1>=OpenRoundBracket && LA84_1<=Or)||(LA84_1>=Plus && LA84_1<=Public)||(LA84_1>=Real && LA84_1<=Return)||LA84_1==SingleQuotedString||(LA84_1>=Static && LA84_1<=Try)||LA84_1==UnquotedString||(LA84_1>=UnsetType && LA84_1<=While)||(LA84_1>=Xor && LA84_1<=130)))
				{
					alt84 = 1;
				}
				} finally { DebugExitDecision(84); }
				switch (alt84)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:307:27: expression
					{
					DebugLocation(307, 27);
					PushFollow(Follow._expression_in_ternary1650);
					expression302=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression302.Tree, expression302, "expression302", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(84); }

				DebugLocation(307, 39);
				Colon303=(IToken)Match(input,Colon,Follow._Colon_in_ternary1653); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Colon303_tree = (object)adaptor.Create(Colon303, "Colon303", retval);
				adaptor.AddChild(root_0, Colon303_tree);
				}
				DebugLocation(307, 45);
				PushFollow(Follow._expression_in_ternary1655);
				expression304=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression304.Tree, expression304, "expression304", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:308:4: logicalOr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(308, 4);
				PushFollow(Follow._logicalOr_in_ternary1660);
				logicalOr305=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr305.Tree, logicalOr305, "logicalOr305", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ternary", 43);
			LeaveRule("ternary", 43);
			LeaveRule_ternary();
			if (state.backtracking > 0) { Memoize(input, 43, ternary_StartIndex); }

		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "ternary"); }
		return retval;

	}
	// $ANTLR end "ternary"

	partial void EnterRule_logicalOr();
	partial void LeaveRule_logicalOr();
	// $ANTLR start "logicalOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:311:1: logicalOr : logicalAnd ( LogicalOr logicalAnd )* ;
	[GrammarRule("logicalOr")]
	private Antlr3CstNode logicalOr()
	{
		EnterRule_logicalOr();
		EnterRule("logicalOr", 44);
		var retval = new Antlr3CstNode("logicalOr");
		
		retval.Start = (IToken)input.LT(1);
		int logicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalOr307 = default(IToken);
		Antlr3CstNode logicalAnd306 = default(Antlr3CstNode);
		Antlr3CstNode logicalAnd308 = default(Antlr3CstNode);

		object LogicalOr307_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalOr");
		DebugLocation(311, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:312:2: ( logicalAnd ( LogicalOr logicalAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:312:4: logicalAnd ( LogicalOr logicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(312, 4);
			PushFollow(Follow._logicalAnd_in_logicalOr1672);
			logicalAnd306=logicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd306.Tree, logicalAnd306, "logicalAnd306", retval);
			DebugLocation(312, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:312:15: ( LogicalOr logicalAnd )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_1 = input.LA(1);

				if ((LA86_1==LogicalOr))
				{
					int LA86_2 = input.LA(2);

					if ((EvaluatePredicate(synpred122_Php_fragment)))
					{
						alt86 = 1;
					}


				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:312:16: LogicalOr logicalAnd
					{
					DebugLocation(312, 16);
					LogicalOr307=(IToken)Match(input,LogicalOr,Follow._LogicalOr_in_logicalOr1675); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalOr307_tree = (object)adaptor.Create(LogicalOr307, "LogicalOr307", retval);
					adaptor.AddChild(root_0, LogicalOr307_tree);
					}
					DebugLocation(312, 26);
					PushFollow(Follow._logicalAnd_in_logicalOr1677);
					logicalAnd308=logicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd308.Tree, logicalAnd308, "logicalAnd308", retval);

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOr", 44);
			LeaveRule("logicalOr", 44);
			LeaveRule_logicalOr();
			if (state.backtracking > 0) { Memoize(input, 44, logicalOr_StartIndex); }

		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOr"); }
		return retval;

	}
	// $ANTLR end "logicalOr"

	partial void EnterRule_logicalAnd();
	partial void LeaveRule_logicalAnd();
	// $ANTLR start "logicalAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:315:1: logicalAnd : bitwiseOr ( LogicalAnd bitwiseOr )* ;
	[GrammarRule("logicalAnd")]
	private Antlr3CstNode logicalAnd()
	{
		EnterRule_logicalAnd();
		EnterRule("logicalAnd", 45);
		var retval = new Antlr3CstNode("logicalAnd");
		
		retval.Start = (IToken)input.LT(1);
		int logicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalAnd310 = default(IToken);
		Antlr3CstNode bitwiseOr309 = default(Antlr3CstNode);
		Antlr3CstNode bitwiseOr311 = default(Antlr3CstNode);

		object LogicalAnd310_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalAnd");
		DebugLocation(315, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:316:2: ( bitwiseOr ( LogicalAnd bitwiseOr )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:316:4: bitwiseOr ( LogicalAnd bitwiseOr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(316, 4);
			PushFollow(Follow._bitwiseOr_in_logicalAnd1690);
			bitwiseOr309=bitwiseOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr309.Tree, bitwiseOr309, "bitwiseOr309", retval);
			DebugLocation(316, 14);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:316:14: ( LogicalAnd bitwiseOr )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if ((LA87_1==LogicalAnd))
				{
					int LA87_2 = input.LA(2);

					if ((EvaluatePredicate(synpred123_Php_fragment)))
					{
						alt87 = 1;
					}


				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:316:15: LogicalAnd bitwiseOr
					{
					DebugLocation(316, 15);
					LogicalAnd310=(IToken)Match(input,LogicalAnd,Follow._LogicalAnd_in_logicalAnd1693); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalAnd310_tree = (object)adaptor.Create(LogicalAnd310, "LogicalAnd310", retval);
					adaptor.AddChild(root_0, LogicalAnd310_tree);
					}
					DebugLocation(316, 26);
					PushFollow(Follow._bitwiseOr_in_logicalAnd1695);
					bitwiseOr311=bitwiseOr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr311.Tree, bitwiseOr311, "bitwiseOr311", retval);

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAnd", 45);
			LeaveRule("logicalAnd", 45);
			LeaveRule_logicalAnd();
			if (state.backtracking > 0) { Memoize(input, 45, logicalAnd_StartIndex); }

		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAnd"); }
		return retval;

	}
	// $ANTLR end "logicalAnd"

	partial void EnterRule_bitwiseOr();
	partial void LeaveRule_bitwiseOr();
	// $ANTLR start "bitwiseOr"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:319:1: bitwiseOr : bitwiseXor ( Pipe bitwiseXor )* ;
	[GrammarRule("bitwiseOr")]
	private Antlr3CstNode bitwiseOr()
	{
		EnterRule_bitwiseOr();
		EnterRule("bitwiseOr", 46);
		var retval = new Antlr3CstNode("bitwiseOr");
		
		retval.Start = (IToken)input.LT(1);
		int bitwiseOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Pipe313 = default(IToken);
		Antlr3CstNode bitwiseXor312 = default(Antlr3CstNode);
		Antlr3CstNode bitwiseXor314 = default(Antlr3CstNode);

		object Pipe313_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseOr");
		DebugLocation(319, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:320:2: ( bitwiseXor ( Pipe bitwiseXor )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:320:4: bitwiseXor ( Pipe bitwiseXor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(320, 4);
			PushFollow(Follow._bitwiseXor_in_bitwiseOr1709);
			bitwiseXor312=bitwiseXor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXor312.Tree, bitwiseXor312, "bitwiseXor312", retval);
			DebugLocation(320, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:320:15: ( Pipe bitwiseXor )*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_1 = input.LA(1);

				if ((LA88_1==Pipe))
				{
					int LA88_2 = input.LA(2);

					if ((EvaluatePredicate(synpred124_Php_fragment)))
					{
						alt88 = 1;
					}


				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:320:16: Pipe bitwiseXor
					{
					DebugLocation(320, 16);
					Pipe313=(IToken)Match(input,Pipe,Follow._Pipe_in_bitwiseOr1712); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Pipe313_tree = (object)adaptor.Create(Pipe313, "Pipe313", retval);
					adaptor.AddChild(root_0, Pipe313_tree);
					}
					DebugLocation(320, 21);
					PushFollow(Follow._bitwiseXor_in_bitwiseOr1714);
					bitwiseXor314=bitwiseXor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXor314.Tree, bitwiseXor314, "bitwiseXor314", retval);

					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseOr", 46);
			LeaveRule("bitwiseOr", 46);
			LeaveRule_bitwiseOr();
			if (state.backtracking > 0) { Memoize(input, 46, bitwiseOr_StartIndex); }

		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOr"); }
		return retval;

	}
	// $ANTLR end "bitwiseOr"

	partial void EnterRule_bitwiseXor();
	partial void LeaveRule_bitwiseXor();
	// $ANTLR start "bitwiseXor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:323:1: bitwiseXor : bitWiseAnd ( Hat bitWiseAnd )* ;
	[GrammarRule("bitwiseXor")]
	private Antlr3CstNode bitwiseXor()
	{
		EnterRule_bitwiseXor();
		EnterRule("bitwiseXor", 47);
		var retval = new Antlr3CstNode("bitwiseXor");
		
		retval.Start = (IToken)input.LT(1);
		int bitwiseXor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Hat316 = default(IToken);
		Antlr3CstNode bitWiseAnd315 = default(Antlr3CstNode);
		Antlr3CstNode bitWiseAnd317 = default(Antlr3CstNode);

		object Hat316_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseXor");
		DebugLocation(323, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:324:2: ( bitWiseAnd ( Hat bitWiseAnd )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:324:4: bitWiseAnd ( Hat bitWiseAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(324, 4);
			PushFollow(Follow._bitWiseAnd_in_bitwiseXor1728);
			bitWiseAnd315=bitWiseAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd315.Tree, bitWiseAnd315, "bitWiseAnd315", retval);
			DebugLocation(324, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:324:15: ( Hat bitWiseAnd )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_1 = input.LA(1);

				if ((LA89_1==Hat))
				{
					int LA89_2 = input.LA(2);

					if ((EvaluatePredicate(synpred125_Php_fragment)))
					{
						alt89 = 1;
					}


				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:324:16: Hat bitWiseAnd
					{
					DebugLocation(324, 16);
					Hat316=(IToken)Match(input,Hat,Follow._Hat_in_bitwiseXor1731); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Hat316_tree = (object)adaptor.Create(Hat316, "Hat316", retval);
					adaptor.AddChild(root_0, Hat316_tree);
					}
					DebugLocation(324, 20);
					PushFollow(Follow._bitWiseAnd_in_bitwiseXor1733);
					bitWiseAnd317=bitWiseAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd317.Tree, bitWiseAnd317, "bitWiseAnd317", retval);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXor", 47);
			LeaveRule("bitwiseXor", 47);
			LeaveRule_bitwiseXor();
			if (state.backtracking > 0) { Memoize(input, 47, bitwiseXor_StartIndex); }

		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXor"); }
		return retval;

	}
	// $ANTLR end "bitwiseXor"

	partial void EnterRule_bitWiseAnd();
	partial void LeaveRule_bitWiseAnd();
	// $ANTLR start "bitWiseAnd"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:327:1: bitWiseAnd : equalityCheck ( Ampersand equalityCheck )* ;
	[GrammarRule("bitWiseAnd")]
	private Antlr3CstNode bitWiseAnd()
	{
		EnterRule_bitWiseAnd();
		EnterRule("bitWiseAnd", 48);
		var retval = new Antlr3CstNode("bitWiseAnd");
		
		retval.Start = (IToken)input.LT(1);
		int bitWiseAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand319 = default(IToken);
		Antlr3CstNode equalityCheck318 = default(Antlr3CstNode);
		Antlr3CstNode equalityCheck320 = default(Antlr3CstNode);

		object Ampersand319_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseAnd");
		DebugLocation(327, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:328:2: ( equalityCheck ( Ampersand equalityCheck )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:328:4: equalityCheck ( Ampersand equalityCheck )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(328, 4);
			PushFollow(Follow._equalityCheck_in_bitWiseAnd1746);
			equalityCheck318=equalityCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck318.Tree, equalityCheck318, "equalityCheck318", retval);
			DebugLocation(328, 18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:328:18: ( Ampersand equalityCheck )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==Ampersand))
				{
					int LA90_2 = input.LA(2);

					if ((EvaluatePredicate(synpred126_Php_fragment)))
					{
						alt90 = 1;
					}


				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:328:19: Ampersand equalityCheck
					{
					DebugLocation(328, 19);
					Ampersand319=(IToken)Match(input,Ampersand,Follow._Ampersand_in_bitWiseAnd1749); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Ampersand319_tree = (object)adaptor.Create(Ampersand319, "Ampersand319", retval);
					adaptor.AddChild(root_0, Ampersand319_tree);
					}
					DebugLocation(328, 29);
					PushFollow(Follow._equalityCheck_in_bitWiseAnd1751);
					equalityCheck320=equalityCheck();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck320.Tree, equalityCheck320, "equalityCheck320", retval);

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseAnd", 48);
			LeaveRule("bitWiseAnd", 48);
			LeaveRule_bitWiseAnd();
			if (state.backtracking > 0) { Memoize(input, 48, bitWiseAnd_StartIndex); }

		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "bitWiseAnd"); }
		return retval;

	}
	// $ANTLR end "bitWiseAnd"

	partial void EnterRule_equalityCheck();
	partial void LeaveRule_equalityCheck();
	// $ANTLR start "equalityCheck"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:331:1: equalityCheck : comparisionCheck ( EqualityOperator comparisionCheck )? ;
	[GrammarRule("equalityCheck")]
	private Antlr3CstNode equalityCheck()
	{
		EnterRule_equalityCheck();
		EnterRule("equalityCheck", 49);
		var retval = new Antlr3CstNode("equalityCheck");
		
		retval.Start = (IToken)input.LT(1);
		int equalityCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken EqualityOperator322 = default(IToken);
		Antlr3CstNode comparisionCheck321 = default(Antlr3CstNode);
		Antlr3CstNode comparisionCheck323 = default(Antlr3CstNode);

		object EqualityOperator322_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityCheck");
		DebugLocation(331, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:332:2: ( comparisionCheck ( EqualityOperator comparisionCheck )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:332:4: comparisionCheck ( EqualityOperator comparisionCheck )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(332, 4);
			PushFollow(Follow._comparisionCheck_in_equalityCheck1764);
			comparisionCheck321=comparisionCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck321.Tree, comparisionCheck321, "comparisionCheck321", retval);
			DebugLocation(332, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:332:21: ( EqualityOperator comparisionCheck )?
			int alt91=2;
			try { DebugEnterSubRule(91);
			try { DebugEnterDecision(91, false);
			int LA91_1 = input.LA(1);

			if ((LA91_1==EqualityOperator))
			{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred127_Php_fragment)))
				{
					alt91 = 1;
				}
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:332:22: EqualityOperator comparisionCheck
				{
				DebugLocation(332, 22);
				EqualityOperator322=(IToken)Match(input,EqualityOperator,Follow._EqualityOperator_in_equalityCheck1767); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EqualityOperator322_tree = (object)adaptor.Create(EqualityOperator322, "EqualityOperator322", retval);
				adaptor.AddChild(root_0, EqualityOperator322_tree);
				}
				DebugLocation(332, 39);
				PushFollow(Follow._comparisionCheck_in_equalityCheck1769);
				comparisionCheck323=comparisionCheck();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck323.Tree, comparisionCheck323, "comparisionCheck323", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityCheck", 49);
			LeaveRule("equalityCheck", 49);
			LeaveRule_equalityCheck();
			if (state.backtracking > 0) { Memoize(input, 49, equalityCheck_StartIndex); }

		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityCheck"); }
		return retval;

	}
	// $ANTLR end "equalityCheck"

	partial void EnterRule_comparisionCheck();
	partial void LeaveRule_comparisionCheck();
	// $ANTLR start "comparisionCheck"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:335:1: comparisionCheck : bitWiseShift ( ComparisionOperator bitWiseShift )? ;
	[GrammarRule("comparisionCheck")]
	private Antlr3CstNode comparisionCheck()
	{
		EnterRule_comparisionCheck();
		EnterRule("comparisionCheck", 50);
		var retval = new Antlr3CstNode("comparisionCheck");
		
		retval.Start = (IToken)input.LT(1);
		int comparisionCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ComparisionOperator325 = default(IToken);
		Antlr3CstNode bitWiseShift324 = default(Antlr3CstNode);
		Antlr3CstNode bitWiseShift326 = default(Antlr3CstNode);

		object ComparisionOperator325_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "comparisionCheck");
		DebugLocation(335, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:336:2: ( bitWiseShift ( ComparisionOperator bitWiseShift )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:336:4: bitWiseShift ( ComparisionOperator bitWiseShift )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(336, 4);
			PushFollow(Follow._bitWiseShift_in_comparisionCheck1783);
			bitWiseShift324=bitWiseShift();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift324.Tree, bitWiseShift324, "bitWiseShift324", retval);
			DebugLocation(336, 17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:336:17: ( ComparisionOperator bitWiseShift )?
			int alt92=2;
			try { DebugEnterSubRule(92);
			try { DebugEnterDecision(92, false);
			int LA92_1 = input.LA(1);

			if ((LA92_1==ComparisionOperator))
			{
				int LA92_2 = input.LA(2);

				if ((EvaluatePredicate(synpred128_Php_fragment)))
				{
					alt92 = 1;
				}
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:336:18: ComparisionOperator bitWiseShift
				{
				DebugLocation(336, 18);
				ComparisionOperator325=(IToken)Match(input,ComparisionOperator,Follow._ComparisionOperator_in_comparisionCheck1786); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ComparisionOperator325_tree = (object)adaptor.Create(ComparisionOperator325, "ComparisionOperator325", retval);
				adaptor.AddChild(root_0, ComparisionOperator325_tree);
				}
				DebugLocation(336, 38);
				PushFollow(Follow._bitWiseShift_in_comparisionCheck1788);
				bitWiseShift326=bitWiseShift();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift326.Tree, bitWiseShift326, "bitWiseShift326", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comparisionCheck", 50);
			LeaveRule("comparisionCheck", 50);
			LeaveRule_comparisionCheck();
			if (state.backtracking > 0) { Memoize(input, 50, comparisionCheck_StartIndex); }

		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "comparisionCheck"); }
		return retval;

	}
	// $ANTLR end "comparisionCheck"

	partial void EnterRule_bitWiseShift();
	partial void LeaveRule_bitWiseShift();
	// $ANTLR start "bitWiseShift"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:339:1: bitWiseShift : addition ( ShiftOperator addition )* ;
	[GrammarRule("bitWiseShift")]
	private Antlr3CstNode bitWiseShift()
	{
		EnterRule_bitWiseShift();
		EnterRule("bitWiseShift", 51);
		var retval = new Antlr3CstNode("bitWiseShift");
		
		retval.Start = (IToken)input.LT(1);
		int bitWiseShift_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ShiftOperator328 = default(IToken);
		Antlr3CstNode addition327 = default(Antlr3CstNode);
		Antlr3CstNode addition329 = default(Antlr3CstNode);

		object ShiftOperator328_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseShift");
		DebugLocation(339, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:340:2: ( addition ( ShiftOperator addition )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:340:4: addition ( ShiftOperator addition )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(340, 4);
			PushFollow(Follow._addition_in_bitWiseShift1801);
			addition327=addition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, addition327.Tree, addition327, "addition327", retval);
			DebugLocation(340, 13);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:340:13: ( ShiftOperator addition )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				int LA93_1 = input.LA(1);

				if ((LA93_1==ShiftOperator))
				{
					int LA93_2 = input.LA(2);

					if ((EvaluatePredicate(synpred129_Php_fragment)))
					{
						alt93 = 1;
					}


				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:340:14: ShiftOperator addition
					{
					DebugLocation(340, 14);
					ShiftOperator328=(IToken)Match(input,ShiftOperator,Follow._ShiftOperator_in_bitWiseShift1804); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ShiftOperator328_tree = (object)adaptor.Create(ShiftOperator328, "ShiftOperator328", retval);
					adaptor.AddChild(root_0, ShiftOperator328_tree);
					}
					DebugLocation(340, 28);
					PushFollow(Follow._addition_in_bitWiseShift1806);
					addition329=addition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, addition329.Tree, addition329, "addition329", retval);

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseShift", 51);
			LeaveRule("bitWiseShift", 51);
			LeaveRule_bitWiseShift();
			if (state.backtracking > 0) { Memoize(input, 51, bitWiseShift_StartIndex); }

		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "bitWiseShift"); }
		return retval;

	}
	// $ANTLR end "bitWiseShift"

	partial void EnterRule_addition();
	partial void LeaveRule_addition();
	// $ANTLR start "addition"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:343:1: addition : multiplication ( ( Plus | Minus | Dot ) multiplication )* ;
	[GrammarRule("addition")]
	private Antlr3CstNode addition()
	{
		EnterRule_addition();
		EnterRule("addition", 52);
		var retval = new Antlr3CstNode("addition");
		
		retval.Start = (IToken)input.LT(1);
		int addition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set331 = default(IToken);
		Antlr3CstNode multiplication330 = default(Antlr3CstNode);
		Antlr3CstNode multiplication332 = default(Antlr3CstNode);

		object set331_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "addition");
		DebugLocation(343, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:344:2: ( multiplication ( ( Plus | Minus | Dot ) multiplication )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:344:4: multiplication ( ( Plus | Minus | Dot ) multiplication )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(344, 4);
			PushFollow(Follow._multiplication_in_addition1820);
			multiplication330=multiplication();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication330.Tree, multiplication330, "multiplication330", retval);
			DebugLocation(344, 19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:344:19: ( ( Plus | Minus | Dot ) multiplication )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, false);
				int LA94_1 = input.LA(1);

				if ((LA94_1==Dot||LA94_1==Minus||LA94_1==Plus))
				{
					int LA94_2 = input.LA(2);

					if ((EvaluatePredicate(synpred132_Php_fragment)))
					{
						alt94 = 1;
					}


				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:344:20: ( Plus | Minus | Dot ) multiplication
					{
					DebugLocation(344, 20);

					set331=(IToken)input.LT(1);
					if (input.LA(1)==Dot||input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set331, "set331", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(344, 41);
					PushFollow(Follow._multiplication_in_addition1835);
					multiplication332=multiplication();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication332.Tree, multiplication332, "multiplication332", retval);

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addition", 52);
			LeaveRule("addition", 52);
			LeaveRule_addition();
			if (state.backtracking > 0) { Memoize(input, 52, addition_StartIndex); }

		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "addition"); }
		return retval;

	}
	// $ANTLR end "addition"

	partial void EnterRule_multiplication();
	partial void LeaveRule_multiplication();
	// $ANTLR start "multiplication"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:347:1: multiplication : logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )* ;
	[GrammarRule("multiplication")]
	private Antlr3CstNode multiplication()
	{
		EnterRule_multiplication();
		EnterRule("multiplication", 53);
		var retval = new Antlr3CstNode("multiplication");
		
		retval.Start = (IToken)input.LT(1);
		int multiplication_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set334 = default(IToken);
		Antlr3CstNode logicalNot333 = default(Antlr3CstNode);
		Antlr3CstNode logicalNot335 = default(Antlr3CstNode);

		object set334_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplication");
		DebugLocation(347, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:348:2: ( logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:348:4: logicalNot ( ( Asterisk | Forwardslash | Percent ) logicalNot )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(348, 4);
			PushFollow(Follow._logicalNot_in_multiplication1848);
			logicalNot333=logicalNot();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot333.Tree, logicalNot333, "logicalNot333", retval);
			DebugLocation(348, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:348:15: ( ( Asterisk | Forwardslash | Percent ) logicalNot )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=2;
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==Asterisk||LA95_1==Forwardslash||LA95_1==Percent))
				{
					int LA95_2 = input.LA(2);

					if ((EvaluatePredicate(synpred135_Php_fragment)))
					{
						alt95 = 1;
					}


				}


				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:348:16: ( Asterisk | Forwardslash | Percent ) logicalNot
					{
					DebugLocation(348, 16);

					set334=(IToken)input.LT(1);
					if (input.LA(1)==Asterisk||input.LA(1)==Forwardslash||input.LA(1)==Percent)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set334, "set334", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(348, 52);
					PushFollow(Follow._logicalNot_in_multiplication1863);
					logicalNot335=logicalNot();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot335.Tree, logicalNot335, "logicalNot335", retval);

					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplication", 53);
			LeaveRule("multiplication", 53);
			LeaveRule_multiplication();
			if (state.backtracking > 0) { Memoize(input, 53, multiplication_StartIndex); }

		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplication"); }
		return retval;

	}
	// $ANTLR end "multiplication"

	partial void EnterRule_logicalNot();
	partial void LeaveRule_logicalNot();
	// $ANTLR start "logicalNot"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:351:1: logicalNot : ( Bang logicalNot | instanceOf );
	[GrammarRule("logicalNot")]
	private Antlr3CstNode logicalNot()
	{
		EnterRule_logicalNot();
		EnterRule("logicalNot", 54);
		var retval = new Antlr3CstNode("logicalNot");
		
		retval.Start = (IToken)input.LT(1);
		int logicalNot_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Bang336 = default(IToken);
		Antlr3CstNode logicalNot337 = default(Antlr3CstNode);
		Antlr3CstNode instanceOf338 = default(Antlr3CstNode);

		object Bang336_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalNot");
		DebugLocation(351, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:352:2: ( Bang logicalNot | instanceOf )
			int alt96=2;
			try { DebugEnterDecision(96, false);
			int LA96_1 = input.LA(1);

			if ((LA96_1==Bang))
			{
				alt96 = 1;
			}
			else if (((LA96_1>=Abstract && LA96_1<=And)||(LA96_1>=ArrayType && LA96_1<=As)||(LA96_1>=BoolType && LA96_1<=Class)||LA96_1==Clone||(LA96_1>=Const && LA96_1<=Continue)||(LA96_1>=Default && LA96_1<=Die)||LA96_1==Do||(LA96_1>=DoubleQuotedString && LA96_1<=Empty)||(LA96_1>=Eval && LA96_1<=Exit)||(LA96_1>=Extends && LA96_1<=Foreach)||(LA96_1>=Function && LA96_1<=HaltCompiler)||LA96_1==HereDoc||(LA96_1>=If && LA96_1<=IncrementOperator)||(LA96_1>=Instanceof && LA96_1<=List)||LA96_1==Minus||(LA96_1>=Namespace && LA96_1<=Null)||LA96_1==ObjectType||(LA96_1>=OpenRoundBracket && LA96_1<=Or)||(LA96_1>=Plus && LA96_1<=Public)||(LA96_1>=Real && LA96_1<=Return)||LA96_1==SingleQuotedString||(LA96_1>=Static && LA96_1<=Try)||LA96_1==UnquotedString||(LA96_1>=UnsetType && LA96_1<=While)||(LA96_1>=Xor && LA96_1<=130)))
			{
				alt96 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:352:4: Bang logicalNot
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(352, 4);
				Bang336=(IToken)Match(input,Bang,Follow._Bang_in_logicalNot1876); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Bang336_tree = (object)adaptor.Create(Bang336, "Bang336", retval);
				adaptor.AddChild(root_0, Bang336_tree);
				}
				DebugLocation(352, 9);
				PushFollow(Follow._logicalNot_in_logicalNot1878);
				logicalNot337=logicalNot();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot337.Tree, logicalNot337, "logicalNot337", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:353:4: instanceOf
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(353, 4);
				PushFollow(Follow._instanceOf_in_logicalNot1883);
				instanceOf338=instanceOf();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOf338.Tree, instanceOf338, "instanceOf338", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalNot", 54);
			LeaveRule("logicalNot", 54);
			LeaveRule_logicalNot();
			if (state.backtracking > 0) { Memoize(input, 54, logicalNot_StartIndex); }

		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalNot"); }
		return retval;

	}
	// $ANTLR end "logicalNot"

	partial void EnterRule_instanceOf();
	partial void LeaveRule_instanceOf();
	// $ANTLR start "instanceOf"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:356:1: instanceOf : negateOrCast ( Instanceof negateOrCast )? ;
	[GrammarRule("instanceOf")]
	private Antlr3CstNode instanceOf()
	{
		EnterRule_instanceOf();
		EnterRule("instanceOf", 55);
		var retval = new Antlr3CstNode("instanceOf");
		
		retval.Start = (IToken)input.LT(1);
		int instanceOf_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Instanceof340 = default(IToken);
		Antlr3CstNode negateOrCast339 = default(Antlr3CstNode);
		Antlr3CstNode negateOrCast341 = default(Antlr3CstNode);

		object Instanceof340_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "instanceOf");
		DebugLocation(356, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:357:2: ( negateOrCast ( Instanceof negateOrCast )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:357:4: negateOrCast ( Instanceof negateOrCast )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(357, 4);
			PushFollow(Follow._negateOrCast_in_instanceOf1894);
			negateOrCast339=negateOrCast();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast339.Tree, negateOrCast339, "negateOrCast339", retval);
			DebugLocation(357, 17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:357:17: ( Instanceof negateOrCast )?
			int alt97=2;
			try { DebugEnterSubRule(97);
			try { DebugEnterDecision(97, false);
			int LA97_1 = input.LA(1);

			if ((LA97_1==Instanceof))
			{
				int LA97_2 = input.LA(2);

				if ((EvaluatePredicate(synpred137_Php_fragment)))
				{
					alt97 = 1;
				}
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:357:18: Instanceof negateOrCast
				{
				DebugLocation(357, 18);
				Instanceof340=(IToken)Match(input,Instanceof,Follow._Instanceof_in_instanceOf1897); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Instanceof340_tree = (object)adaptor.Create(Instanceof340, "Instanceof340", retval);
				adaptor.AddChild(root_0, Instanceof340_tree);
				}
				DebugLocation(357, 29);
				PushFollow(Follow._negateOrCast_in_instanceOf1899);
				negateOrCast341=negateOrCast();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast341.Tree, negateOrCast341, "negateOrCast341", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(97); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOf", 55);
			LeaveRule("instanceOf", 55);
			LeaveRule_instanceOf();
			if (state.backtracking > 0) { Memoize(input, 55, instanceOf_StartIndex); }

		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "instanceOf"); }
		return retval;

	}
	// $ANTLR end "instanceOf"

	partial void EnterRule_negateOrCast();
	partial void LeaveRule_negateOrCast();
	// $ANTLR start "negateOrCast"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:360:1: negateOrCast : ( ( Tilde | Minus | SuppressWarnings ) increment | OpenRoundBracket primitiveType CloseRoundBracket increment | increment );
	[GrammarRule("negateOrCast")]
	private Antlr3CstNode negateOrCast()
	{
		EnterRule_negateOrCast();
		EnterRule("negateOrCast", 56);
		var retval = new Antlr3CstNode("negateOrCast");
		
		retval.Start = (IToken)input.LT(1);
		int negateOrCast_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set342 = default(IToken);
		IToken OpenRoundBracket344 = default(IToken);
		IToken CloseRoundBracket346 = default(IToken);
		Antlr3CstNode increment343 = default(Antlr3CstNode);
		Antlr3CstNode primitiveType345 = default(Antlr3CstNode);
		Antlr3CstNode increment347 = default(Antlr3CstNode);
		Antlr3CstNode increment348 = default(Antlr3CstNode);

		object set342_tree = default(object);
		object OpenRoundBracket344_tree = default(object);
		object CloseRoundBracket346_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "negateOrCast");
		DebugLocation(360, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:361:2: ( ( Tilde | Minus | SuppressWarnings ) increment | OpenRoundBracket primitiveType CloseRoundBracket increment | increment )
			int alt98=3;
			try { DebugEnterDecision(98, false);
			switch (input.LA(1))
			{
			case Minus:
				{
				int LA98_2 = input.LA(2);

				if ((EvaluatePredicate(synpred140_Php_fragment)))
				{
					alt98 = 1;
				}
				else if ((true))
				{
					alt98 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA98_2 = input.LA(2);

				if ((EvaluatePredicate(synpred141_Php_fragment)))
				{
					alt98 = 2;
				}
				else if ((true))
				{
					alt98 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case Ampersand:
			case And:
			case ArrayType:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleQuotedString:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case HereDoc:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case IncrementOperator:
			case Instanceof:
			case IntType:
			case Integer:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case OpenSquareBracket:
			case Or:
			case Plus:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case SingleQuotedString:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case UnsetType:
			case Use:
			case Var:
			case VariableName:
			case While:
			case Xor:
			case 129:
			case 130:
				{
				alt98 = 3;
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				alt98 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:361:4: ( Tilde | Minus | SuppressWarnings ) increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(361, 4);

				set342=(IToken)input.LT(1);
				if (input.LA(1)==Minus||input.LA(1)==SuppressWarnings||input.LA(1)==Tilde)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set342, "set342", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(361, 39);
				PushFollow(Follow._increment_in_negateOrCast1924);
				increment343=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment343.Tree, increment343, "increment343", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:362:4: OpenRoundBracket primitiveType CloseRoundBracket increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(362, 4);
				OpenRoundBracket344=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_negateOrCast1929); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket344_tree = (object)adaptor.Create(OpenRoundBracket344, "OpenRoundBracket344", retval);
				adaptor.AddChild(root_0, OpenRoundBracket344_tree);
				}
				DebugLocation(362, 21);
				PushFollow(Follow._primitiveType_in_negateOrCast1931);
				primitiveType345=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType345.Tree, primitiveType345, "primitiveType345", retval);
				DebugLocation(362, 35);
				CloseRoundBracket346=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_negateOrCast1933); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket346_tree = (object)adaptor.Create(CloseRoundBracket346, "CloseRoundBracket346", retval);
				adaptor.AddChild(root_0, CloseRoundBracket346_tree);
				}
				DebugLocation(362, 53);
				PushFollow(Follow._increment_in_negateOrCast1935);
				increment347=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment347.Tree, increment347, "increment347", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:363:4: increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(363, 4);
				PushFollow(Follow._increment_in_negateOrCast1940);
				increment348=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment348.Tree, increment348, "increment348", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("negateOrCast", 56);
			LeaveRule("negateOrCast", 56);
			LeaveRule_negateOrCast();
			if (state.backtracking > 0) { Memoize(input, 56, negateOrCast_StartIndex); }

		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "negateOrCast"); }
		return retval;

	}
	// $ANTLR end "negateOrCast"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:366:1: primitiveType : ( IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ArrayType | ObjectType | UnsetType );
	[GrammarRule("primitiveType")]
	private Antlr3CstNode primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 57);
		var retval = new Antlr3CstNode("primitiveType");
		
		retval.Start = (IToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set349 = default(IToken);

		object set349_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(366, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:367:2: ( IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ArrayType | ObjectType | UnsetType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(367, 2);

			set349=(IToken)input.LT(1);
			if (input.LA(1)==ArrayType||(input.LA(1)>=BoolType && input.LA(1)<=BooleanType)||input.LA(1)==DoubleType||input.LA(1)==FloatType||input.LA(1)==IntType||input.LA(1)==IntegerType||input.LA(1)==ObjectType||input.LA(1)==RealType||input.LA(1)==StringType||input.LA(1)==UnsetType)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set349, "set349", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 57);
			LeaveRule("primitiveType", 57);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 57, primitiveType_StartIndex); }

		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_increment();
	partial void LeaveRule_increment();
	// $ANTLR start "increment"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:371:1: increment : ( IncrementOperator name | name IncrementOperator | listVariables ( Equals | AsignmentOperator ) assignment | newOrClone | OpenRoundBracket expression CloseRoundBracket );
	[GrammarRule("increment")]
	private Antlr3CstNode increment()
	{
		EnterRule_increment();
		EnterRule("increment", 58);
		var retval = new Antlr3CstNode("increment");
		
		retval.Start = (IToken)input.LT(1);
		int increment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IncrementOperator350 = default(IToken);
		IToken IncrementOperator353 = default(IToken);
		IToken set355 = default(IToken);
		IToken OpenRoundBracket358 = default(IToken);
		IToken CloseRoundBracket360 = default(IToken);
		Antlr3CstNode name351 = default(Antlr3CstNode);
		Antlr3CstNode name352 = default(Antlr3CstNode);
		Antlr3CstNode listVariables354 = default(Antlr3CstNode);
		Antlr3CstNode assignment356 = default(Antlr3CstNode);
		Antlr3CstNode newOrClone357 = default(Antlr3CstNode);
		Antlr3CstNode expression359 = default(Antlr3CstNode);

		object IncrementOperator350_tree = default(object);
		object IncrementOperator353_tree = default(object);
		object set355_tree = default(object);
		object OpenRoundBracket358_tree = default(object);
		object CloseRoundBracket360_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "increment");
		DebugLocation(371, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:372:2: ( IncrementOperator name | name IncrementOperator | listVariables ( Equals | AsignmentOperator ) assignment | newOrClone | OpenRoundBracket expression CloseRoundBracket )
			int alt99=5;
			try { DebugEnterDecision(99, false);
			switch (input.LA(1))
			{
			case IncrementOperator:
				{
				alt99 = 1;
				}
				break;
			case VariableName:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case List:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case ArrayType:
			case DoubleQuotedString:
			case HereDoc:
			case Integer:
			case Minus:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case SingleQuotedString:
			case UnsetType:
				{
				alt99 = 4;
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Namespace:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Php_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred155_Php_fragment)))
				{
					alt99 = 3;
				}
				else if ((EvaluatePredicate(synpred156_Php_fragment)))
				{
					alt99 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				alt99 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:372:4: IncrementOperator name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(372, 4);
				IncrementOperator350=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment2003); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncrementOperator350_tree = (object)adaptor.Create(IncrementOperator350, "IncrementOperator350", retval);
				adaptor.AddChild(root_0, IncrementOperator350_tree);
				}
				DebugLocation(372, 22);
				PushFollow(Follow._name_in_increment2005);
				name351=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name351.Tree, name351, "name351", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:4: name IncrementOperator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(373, 4);
				PushFollow(Follow._name_in_increment2010);
				name352=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name352.Tree, name352, "name352", retval);
				DebugLocation(373, 9);
				IncrementOperator353=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment2012); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncrementOperator353_tree = (object)adaptor.Create(IncrementOperator353, "IncrementOperator353", retval);
				adaptor.AddChild(root_0, IncrementOperator353_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:4: listVariables ( Equals | AsignmentOperator ) assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(374, 4);
				PushFollow(Follow._listVariables_in_increment2017);
				listVariables354=listVariables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, listVariables354.Tree, listVariables354, "listVariables354", retval);
				DebugLocation(374, 18);

				set355=(IToken)input.LT(1);
				if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set355, "set355", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(374, 47);
				PushFollow(Follow._assignment_in_increment2027);
				assignment356=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment356.Tree, assignment356, "assignment356", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:375:4: newOrClone
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(375, 4);
				PushFollow(Follow._newOrClone_in_increment2032);
				newOrClone357=newOrClone();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newOrClone357.Tree, newOrClone357, "newOrClone357", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:376:4: OpenRoundBracket expression CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(376, 4);
				OpenRoundBracket358=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_increment2037); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket358_tree = (object)adaptor.Create(OpenRoundBracket358, "OpenRoundBracket358", retval);
				adaptor.AddChild(root_0, OpenRoundBracket358_tree);
				}
				DebugLocation(376, 21);
				PushFollow(Follow._expression_in_increment2039);
				expression359=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression359.Tree, expression359, "expression359", retval);
				DebugLocation(376, 32);
				CloseRoundBracket360=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_increment2041); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket360_tree = (object)adaptor.Create(CloseRoundBracket360, "CloseRoundBracket360", retval);
				adaptor.AddChild(root_0, CloseRoundBracket360_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("increment", 58);
			LeaveRule("increment", 58);
			LeaveRule_increment();
			if (state.backtracking > 0) { Memoize(input, 58, increment_StartIndex); }

		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "increment"); }
		return retval;

	}
	// $ANTLR end "increment"

	partial void EnterRule_newOrClone();
	partial void LeaveRule_newOrClone();
	// $ANTLR start "newOrClone"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:381:1: newOrClone : ( New ( nameOrFunctionCall | constantOrStaticAccessor ) | New Static ( functionArguments )? | Clone name | atomOrReference );
	[GrammarRule("newOrClone")]
	private Antlr3CstNode newOrClone()
	{
		EnterRule_newOrClone();
		EnterRule("newOrClone", 59);
		var retval = new Antlr3CstNode("newOrClone");
		
		retval.Start = (IToken)input.LT(1);
		int newOrClone_StartIndex = input.Index;

		object root_0 = default(object);

		IToken New361 = default(IToken);
		IToken New364 = default(IToken);
		IToken Static365 = default(IToken);
		IToken Clone367 = default(IToken);
		Antlr3CstNode nameOrFunctionCall362 = default(Antlr3CstNode);
		Antlr3CstNode constantOrStaticAccessor363 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments366 = default(Antlr3CstNode);
		Antlr3CstNode name368 = default(Antlr3CstNode);
		Antlr3CstNode atomOrReference369 = default(Antlr3CstNode);

		object New361_tree = default(object);
		object New364_tree = default(object);
		object Static365_tree = default(object);
		object Clone367_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "newOrClone");
		DebugLocation(381, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:2: ( New ( nameOrFunctionCall | constantOrStaticAccessor ) | New Static ( functionArguments )? | Clone name | atomOrReference )
			int alt102=4;
			try { DebugEnterDecision(102, false);
			switch (input.LA(1))
			{
			case New:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred158_Php_fragment)))
				{
					alt102 = 1;
				}
				else if ((EvaluatePredicate(synpred160_Php_fragment)))
				{
					alt102 = 2;
				}
				else if ((true))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Php_fragment)))
				{
					alt102 = 3;
				}
				else if ((true))
				{
					alt102 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case Ampersand:
			case And:
			case ArrayType:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleQuotedString:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case HereDoc:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case Integer:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Minus:
			case Namespace:
			case Null:
			case ObjectType:
			case OpenSquareBracket:
			case Or:
			case Plus:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Real:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case SingleQuotedString:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case UnsetType:
			case Use:
			case Var:
			case VariableName:
			case While:
			case Xor:
			case 129:
			case 130:
				{
				alt102 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:4: New ( nameOrFunctionCall | constantOrStaticAccessor )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(383, 4);
				New361=(IToken)Match(input,New,Follow._New_in_newOrClone2063); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New361_tree = (object)adaptor.Create(New361, "New361", retval);
				adaptor.AddChild(root_0, New361_tree);
				}
				DebugLocation(383, 8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:8: ( nameOrFunctionCall | constantOrStaticAccessor )
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, false);
				switch (input.LA(1))
				{
				case VariableName:
					{
					int LA100_2 = input.LA(2);

					if ((EvaluatePredicate(synpred157_Php_fragment)))
					{
						alt100 = 1;
					}
					else if ((true))
					{
						alt100 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 100, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 129:
					{
					int LA100_2 = input.LA(2);

					if ((EvaluatePredicate(synpred157_Php_fragment)))
					{
						alt100 = 1;
					}
					else if ((true))
					{
						alt100 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 100, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 130:
					{
					int LA100_2 = input.LA(2);

					if ((EvaluatePredicate(synpred157_Php_fragment)))
					{
						alt100 = 1;
					}
					else if ((true))
					{
						alt100 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 100, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Die:
				case Empty:
				case Eval:
				case Exit:
				case HaltCompiler:
				case Isset:
					{
					int LA100_2 = input.LA(2);

					if ((EvaluatePredicate(synpred157_Php_fragment)))
					{
						alt100 = 1;
					}
					else if ((true))
					{
						alt100 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 100, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Abstract:
				case And:
				case As:
				case BoolType:
				case BooleanType:
				case Break:
				case Case:
				case Catch:
				case Class:
				case Clone:
				case Const:
				case Continue:
				case Default:
				case Do:
				case DoubleType:
				case Echo:
				case Else:
				case ElseIf:
				case Extends:
				case False:
				case Finally:
				case FloatType:
				case For:
				case Foreach:
				case Function:
				case Global:
				case Goto:
				case If:
				case Implements:
				case Include:
				case IncludeOnce:
				case Instanceof:
				case IntType:
				case IntegerType:
				case Interface:
				case List:
				case Namespace:
				case New:
				case Null:
				case ObjectType:
				case Or:
				case Print:
				case Private:
				case Protected:
				case Public:
				case RealType:
				case Require:
				case RequireOnce:
				case Return:
				case Static:
				case StringType:
				case Switch:
				case Throw:
				case True:
				case Try:
				case UnquotedString:
				case Use:
				case Var:
				case While:
				case Xor:
					{
					int LA100_2 = input.LA(2);

					if ((EvaluatePredicate(synpred157_Php_fragment)))
					{
						alt100 = 1;
					}
					else if ((true))
					{
						alt100 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 100, 5, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case UnsetType:
					{
					alt100 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 100, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:9: nameOrFunctionCall
					{
					DebugLocation(383, 9);
					PushFollow(Follow._nameOrFunctionCall_in_newOrClone2066);
					nameOrFunctionCall362=nameOrFunctionCall();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall362.Tree, nameOrFunctionCall362, "nameOrFunctionCall362", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:30: constantOrStaticAccessor
					{
					DebugLocation(383, 30);
					PushFollow(Follow._constantOrStaticAccessor_in_newOrClone2070);
					constantOrStaticAccessor363=constantOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor363.Tree, constantOrStaticAccessor363, "constantOrStaticAccessor363", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(100); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:384:4: New Static ( functionArguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(384, 4);
				New364=(IToken)Match(input,New,Follow._New_in_newOrClone2076); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New364_tree = (object)adaptor.Create(New364, "New364", retval);
				adaptor.AddChild(root_0, New364_tree);
				}
				DebugLocation(384, 8);
				Static365=(IToken)Match(input,Static,Follow._Static_in_newOrClone2078); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static365_tree = (object)adaptor.Create(Static365, "Static365", retval);
				adaptor.AddChild(root_0, Static365_tree);
				}
				DebugLocation(384, 15);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:384:15: ( functionArguments )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				int LA101_1 = input.LA(1);

				if ((LA101_1==OpenRoundBracket))
				{
					int LA101_2 = input.LA(2);

					if ((EvaluatePredicate(synpred159_Php_fragment)))
					{
						alt101 = 1;
					}
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:384:15: functionArguments
					{
					DebugLocation(384, 15);
					PushFollow(Follow._functionArguments_in_newOrClone2080);
					functionArguments366=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments366.Tree, functionArguments366, "functionArguments366", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(101); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:4: Clone name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(385, 4);
				Clone367=(IToken)Match(input,Clone,Follow._Clone_in_newOrClone2086); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Clone367_tree = (object)adaptor.Create(Clone367, "Clone367", retval);
				adaptor.AddChild(root_0, Clone367_tree);
				}
				DebugLocation(385, 10);
				PushFollow(Follow._name_in_newOrClone2088);
				name368=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name368.Tree, name368, "name368", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:386:4: atomOrReference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(386, 4);
				PushFollow(Follow._atomOrReference_in_newOrClone2093);
				atomOrReference369=atomOrReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atomOrReference369.Tree, atomOrReference369, "atomOrReference369", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newOrClone", 59);
			LeaveRule("newOrClone", 59);
			LeaveRule_newOrClone();
			if (state.backtracking > 0) { Memoize(input, 59, newOrClone_StartIndex); }

		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "newOrClone"); }
		return retval;

	}
	// $ANTLR end "newOrClone"

	partial void EnterRule_atomOrReference();
	partial void LeaveRule_atomOrReference();
	// $ANTLR start "atomOrReference"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:389:1: atomOrReference : ( Ampersand nameOrFunctionCall | anonymousFunctionDefinition | constantOrFunctionCall | atom | variableOrFunctionCall );
	[GrammarRule("atomOrReference")]
	private Antlr3CstNode atomOrReference()
	{
		EnterRule_atomOrReference();
		EnterRule("atomOrReference", 60);
		var retval = new Antlr3CstNode("atomOrReference");
		
		retval.Start = (IToken)input.LT(1);
		int atomOrReference_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand370 = default(IToken);
		Antlr3CstNode nameOrFunctionCall371 = default(Antlr3CstNode);
		Antlr3CstNode anonymousFunctionDefinition372 = default(Antlr3CstNode);
		Antlr3CstNode constantOrFunctionCall373 = default(Antlr3CstNode);
		Antlr3CstNode atom374 = default(Antlr3CstNode);
		Antlr3CstNode variableOrFunctionCall375 = default(Antlr3CstNode);

		object Ampersand370_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "atomOrReference");
		DebugLocation(389, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:391:2: ( Ampersand nameOrFunctionCall | anonymousFunctionDefinition | constantOrFunctionCall | atom | variableOrFunctionCall )
			int alt103=5;
			try { DebugEnterDecision(103, false);
			switch (input.LA(1))
			{
			case Ampersand:
				{
				alt103 = 1;
				}
				break;
			case Function:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred163_Php_fragment)))
				{
					alt103 = 2;
				}
				else if ((EvaluatePredicate(synpred164_Php_fragment)))
				{
					alt103 = 3;
				}
				else if ((EvaluatePredicate(synpred165_Php_fragment)))
				{
					alt103 = 4;
				}
				else if ((true))
				{
					alt103 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Php_fragment)))
				{
					alt103 = 3;
				}
				else if ((EvaluatePredicate(synpred165_Php_fragment)))
				{
					alt103 = 4;
				}
				else if ((true))
				{
					alt103 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Php_fragment)))
				{
					alt103 = 3;
				}
				else if ((EvaluatePredicate(synpred165_Php_fragment)))
				{
					alt103 = 4;
				}
				else if ((true))
				{
					alt103 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Php_fragment)))
				{
					alt103 = 3;
				}
				else if ((EvaluatePredicate(synpred165_Php_fragment)))
				{
					alt103 = 4;
				}
				else if ((true))
				{
					alt103 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Php_fragment)))
				{
					alt103 = 3;
				}
				else if ((EvaluatePredicate(synpred165_Php_fragment)))
				{
					alt103 = 4;
				}
				else if ((true))
				{
					alt103 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Php_fragment)))
				{
					alt103 = 3;
				}
				else if ((EvaluatePredicate(synpred165_Php_fragment)))
				{
					alt103 = 4;
				}
				else if ((true))
				{
					alt103 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				alt103 = 3;
				}
				break;
			case ArrayType:
			case DoubleQuotedString:
			case HereDoc:
			case Integer:
			case Minus:
			case OpenSquareBracket:
			case Plus:
			case Real:
			case SingleQuotedString:
				{
				alt103 = 4;
				}
				break;
			case Null:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Php_fragment)))
				{
					alt103 = 3;
				}
				else if ((EvaluatePredicate(synpred165_Php_fragment)))
				{
					alt103 = 4;
				}
				else if ((true))
				{
					alt103 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Php_fragment)))
				{
					alt103 = 3;
				}
				else if ((EvaluatePredicate(synpred165_Php_fragment)))
				{
					alt103 = 4;
				}
				else if ((true))
				{
					alt103 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case List:
			case Namespace:
			case New:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred164_Php_fragment)))
				{
					alt103 = 3;
				}
				else if ((EvaluatePredicate(synpred165_Php_fragment)))
				{
					alt103 = 4;
				}
				else if ((true))
				{
					alt103 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:391:4: Ampersand nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(391, 4);
				Ampersand370=(IToken)Match(input,Ampersand,Follow._Ampersand_in_atomOrReference2105); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand370_tree = (object)adaptor.Create(Ampersand370, "Ampersand370", retval);
				adaptor.AddChild(root_0, Ampersand370_tree);
				}
				DebugLocation(391, 14);
				PushFollow(Follow._nameOrFunctionCall_in_atomOrReference2107);
				nameOrFunctionCall371=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall371.Tree, nameOrFunctionCall371, "nameOrFunctionCall371", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:392:4: anonymousFunctionDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(392, 4);
				PushFollow(Follow._anonymousFunctionDefinition_in_atomOrReference2112);
				anonymousFunctionDefinition372=anonymousFunctionDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, anonymousFunctionDefinition372.Tree, anonymousFunctionDefinition372, "anonymousFunctionDefinition372", retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:393:4: constantOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(393, 4);
				PushFollow(Follow._constantOrFunctionCall_in_atomOrReference2117);
				constantOrFunctionCall373=constantOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrFunctionCall373.Tree, constantOrFunctionCall373, "constantOrFunctionCall373", retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:394:4: atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 4);
				PushFollow(Follow._atom_in_atomOrReference2122);
				atom374=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom374.Tree, atom374, "atom374", retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:395:4: variableOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._variableOrFunctionCall_in_atomOrReference2127);
				variableOrFunctionCall375=variableOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrFunctionCall375.Tree, variableOrFunctionCall375, "variableOrFunctionCall375", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atomOrReference", 60);
			LeaveRule("atomOrReference", 60);
			LeaveRule_atomOrReference();
			if (state.backtracking > 0) { Memoize(input, 60, atomOrReference_StartIndex); }

		}
		DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "atomOrReference"); }
		return retval;

	}
	// $ANTLR end "atomOrReference"

	partial void EnterRule_arrayDeclaration();
	partial void LeaveRule_arrayDeclaration();
	// $ANTLR start "arrayDeclaration"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:398:1: arrayDeclaration : ( ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket | OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket );
	[GrammarRule("arrayDeclaration")]
	private Antlr3CstNode arrayDeclaration()
	{
		EnterRule_arrayDeclaration();
		EnterRule("arrayDeclaration", 61);
		var retval = new Antlr3CstNode("arrayDeclaration");
		
		retval.Start = (IToken)input.LT(1);
		int arrayDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ArrayType376 = default(IToken);
		IToken OpenRoundBracket377 = default(IToken);
		IToken Comma379 = default(IToken);
		IToken Comma381 = default(IToken);
		IToken CloseRoundBracket382 = default(IToken);
		IToken OpenSquareBracket383 = default(IToken);
		IToken Comma385 = default(IToken);
		IToken Comma387 = default(IToken);
		IToken CloseSquareBracket388 = default(IToken);
		Antlr3CstNode arrayEntry378 = default(Antlr3CstNode);
		Antlr3CstNode arrayEntry380 = default(Antlr3CstNode);
		Antlr3CstNode arrayEntry384 = default(Antlr3CstNode);
		Antlr3CstNode arrayEntry386 = default(Antlr3CstNode);

		object ArrayType376_tree = default(object);
		object OpenRoundBracket377_tree = default(object);
		object Comma379_tree = default(object);
		object Comma381_tree = default(object);
		object CloseRoundBracket382_tree = default(object);
		object OpenSquareBracket383_tree = default(object);
		object Comma385_tree = default(object);
		object Comma387_tree = default(object);
		object CloseSquareBracket388_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayDeclaration");
		DebugLocation(398, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:399:2: ( ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket | OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket )
			int alt110=2;
			try { DebugEnterDecision(110, false);
			int LA110_1 = input.LA(1);

			if ((LA110_1==ArrayType))
			{
				alt110 = 1;
			}
			else if ((LA110_1==OpenSquareBracket))
			{
				alt110 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 110, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:399:4: ArrayType OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseRoundBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(399, 4);
				ArrayType376=(IToken)Match(input,ArrayType,Follow._ArrayType_in_arrayDeclaration2138); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ArrayType376_tree = (object)adaptor.Create(ArrayType376, "ArrayType376", retval);
				adaptor.AddChild(root_0, ArrayType376_tree);
				}
				DebugLocation(399, 14);
				OpenRoundBracket377=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_arrayDeclaration2140); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenRoundBracket377_tree = (object)adaptor.Create(OpenRoundBracket377, "OpenRoundBracket377", retval);
				adaptor.AddChild(root_0, OpenRoundBracket377_tree);
				}
				DebugLocation(399, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:399:31: ( arrayEntry ( Comma arrayEntry )* ( Comma )? )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, false);
				int LA106_1 = input.LA(1);

				if (((LA106_1>=Abstract && LA106_1<=And)||(LA106_1>=ArrayType && LA106_1<=As)||LA106_1==Bang||(LA106_1>=BoolType && LA106_1<=Class)||LA106_1==Clone||(LA106_1>=Const && LA106_1<=Continue)||(LA106_1>=Default && LA106_1<=Die)||LA106_1==Do||(LA106_1>=DoubleQuotedString && LA106_1<=Empty)||(LA106_1>=Eval && LA106_1<=Exit)||(LA106_1>=Extends && LA106_1<=Foreach)||(LA106_1>=Function && LA106_1<=HaltCompiler)||LA106_1==HereDoc||(LA106_1>=If && LA106_1<=IncrementOperator)||(LA106_1>=Instanceof && LA106_1<=List)||LA106_1==Minus||(LA106_1>=Namespace && LA106_1<=Null)||LA106_1==ObjectType||(LA106_1>=OpenRoundBracket && LA106_1<=Or)||(LA106_1>=Plus && LA106_1<=Public)||(LA106_1>=Real && LA106_1<=Return)||LA106_1==SingleQuotedString||(LA106_1>=Static && LA106_1<=Try)||LA106_1==UnquotedString||(LA106_1>=UnsetType && LA106_1<=While)||(LA106_1>=Xor && LA106_1<=130)))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:399:32: arrayEntry ( Comma arrayEntry )* ( Comma )?
					{
					DebugLocation(399, 32);
					PushFollow(Follow._arrayEntry_in_arrayDeclaration2143);
					arrayEntry378=arrayEntry();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry378.Tree, arrayEntry378, "arrayEntry378", retval);
					DebugLocation(399, 43);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:399:43: ( Comma arrayEntry )*
					try { DebugEnterSubRule(104);
					while (true)
					{
						int alt104=2;
						try { DebugEnterDecision(104, false);
						int LA104_1 = input.LA(1);

						if ((LA104_1==Comma))
						{
							int LA104_2 = input.LA(2);

							if (((LA104_2>=Abstract && LA104_2<=And)||(LA104_2>=ArrayType && LA104_2<=As)||LA104_2==Bang||(LA104_2>=BoolType && LA104_2<=Class)||LA104_2==Clone||(LA104_2>=Const && LA104_2<=Continue)||(LA104_2>=Default && LA104_2<=Die)||LA104_2==Do||(LA104_2>=DoubleQuotedString && LA104_2<=Empty)||(LA104_2>=Eval && LA104_2<=Exit)||(LA104_2>=Extends && LA104_2<=Foreach)||(LA104_2>=Function && LA104_2<=HaltCompiler)||LA104_2==HereDoc||(LA104_2>=If && LA104_2<=IncrementOperator)||(LA104_2>=Instanceof && LA104_2<=List)||LA104_2==Minus||(LA104_2>=Namespace && LA104_2<=Null)||LA104_2==ObjectType||(LA104_2>=OpenRoundBracket && LA104_2<=Or)||(LA104_2>=Plus && LA104_2<=Public)||(LA104_2>=Real && LA104_2<=Return)||LA104_2==SingleQuotedString||(LA104_2>=Static && LA104_2<=Try)||LA104_2==UnquotedString||(LA104_2>=UnsetType && LA104_2<=While)||(LA104_2>=Xor && LA104_2<=130)))
							{
								alt104 = 1;
							}


						}


						} finally { DebugExitDecision(104); }
						switch ( alt104 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:399:44: Comma arrayEntry
							{
							DebugLocation(399, 44);
							Comma379=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2146); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Comma379_tree = (object)adaptor.Create(Comma379, "Comma379", retval);
							adaptor.AddChild(root_0, Comma379_tree);
							}
							DebugLocation(399, 50);
							PushFollow(Follow._arrayEntry_in_arrayDeclaration2148);
							arrayEntry380=arrayEntry();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry380.Tree, arrayEntry380, "arrayEntry380", retval);

							}
							break;

						default:
							goto loop104;
						}
					}

					loop104:
						;

					} finally { DebugExitSubRule(104); }

					DebugLocation(399, 63);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:399:63: ( Comma )?
					int alt105=2;
					try { DebugEnterSubRule(105);
					try { DebugEnterDecision(105, false);
					int LA105_1 = input.LA(1);

					if ((LA105_1==Comma))
					{
						alt105 = 1;
					}
					} finally { DebugExitDecision(105); }
					switch (alt105)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:399:63: Comma
						{
						DebugLocation(399, 63);
						Comma381=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2152); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma381_tree = (object)adaptor.Create(Comma381, "Comma381", retval);
						adaptor.AddChild(root_0, Comma381_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(105); }


					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(399, 72);
				CloseRoundBracket382=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_arrayDeclaration2157); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseRoundBracket382_tree = (object)adaptor.Create(CloseRoundBracket382, "CloseRoundBracket382", retval);
				adaptor.AddChild(root_0, CloseRoundBracket382_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:400:4: OpenSquareBracket ( arrayEntry ( Comma arrayEntry )* ( Comma )? )? CloseSquareBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(400, 4);
				OpenSquareBracket383=(IToken)Match(input,OpenSquareBracket,Follow._OpenSquareBracket_in_arrayDeclaration2162); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenSquareBracket383_tree = (object)adaptor.Create(OpenSquareBracket383, "OpenSquareBracket383", retval);
				adaptor.AddChild(root_0, OpenSquareBracket383_tree);
				}
				DebugLocation(400, 22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:400:22: ( arrayEntry ( Comma arrayEntry )* ( Comma )? )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, false);
				int LA109_1 = input.LA(1);

				if (((LA109_1>=Abstract && LA109_1<=And)||(LA109_1>=ArrayType && LA109_1<=As)||LA109_1==Bang||(LA109_1>=BoolType && LA109_1<=Class)||LA109_1==Clone||(LA109_1>=Const && LA109_1<=Continue)||(LA109_1>=Default && LA109_1<=Die)||LA109_1==Do||(LA109_1>=DoubleQuotedString && LA109_1<=Empty)||(LA109_1>=Eval && LA109_1<=Exit)||(LA109_1>=Extends && LA109_1<=Foreach)||(LA109_1>=Function && LA109_1<=HaltCompiler)||LA109_1==HereDoc||(LA109_1>=If && LA109_1<=IncrementOperator)||(LA109_1>=Instanceof && LA109_1<=List)||LA109_1==Minus||(LA109_1>=Namespace && LA109_1<=Null)||LA109_1==ObjectType||(LA109_1>=OpenRoundBracket && LA109_1<=Or)||(LA109_1>=Plus && LA109_1<=Public)||(LA109_1>=Real && LA109_1<=Return)||LA109_1==SingleQuotedString||(LA109_1>=Static && LA109_1<=Try)||LA109_1==UnquotedString||(LA109_1>=UnsetType && LA109_1<=While)||(LA109_1>=Xor && LA109_1<=130)))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:400:23: arrayEntry ( Comma arrayEntry )* ( Comma )?
					{
					DebugLocation(400, 23);
					PushFollow(Follow._arrayEntry_in_arrayDeclaration2165);
					arrayEntry384=arrayEntry();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry384.Tree, arrayEntry384, "arrayEntry384", retval);
					DebugLocation(400, 34);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:400:34: ( Comma arrayEntry )*
					try { DebugEnterSubRule(107);
					while (true)
					{
						int alt107=2;
						try { DebugEnterDecision(107, false);
						int LA107_1 = input.LA(1);

						if ((LA107_1==Comma))
						{
							int LA107_2 = input.LA(2);

							if (((LA107_2>=Abstract && LA107_2<=And)||(LA107_2>=ArrayType && LA107_2<=As)||LA107_2==Bang||(LA107_2>=BoolType && LA107_2<=Class)||LA107_2==Clone||(LA107_2>=Const && LA107_2<=Continue)||(LA107_2>=Default && LA107_2<=Die)||LA107_2==Do||(LA107_2>=DoubleQuotedString && LA107_2<=Empty)||(LA107_2>=Eval && LA107_2<=Exit)||(LA107_2>=Extends && LA107_2<=Foreach)||(LA107_2>=Function && LA107_2<=HaltCompiler)||LA107_2==HereDoc||(LA107_2>=If && LA107_2<=IncrementOperator)||(LA107_2>=Instanceof && LA107_2<=List)||LA107_2==Minus||(LA107_2>=Namespace && LA107_2<=Null)||LA107_2==ObjectType||(LA107_2>=OpenRoundBracket && LA107_2<=Or)||(LA107_2>=Plus && LA107_2<=Public)||(LA107_2>=Real && LA107_2<=Return)||LA107_2==SingleQuotedString||(LA107_2>=Static && LA107_2<=Try)||LA107_2==UnquotedString||(LA107_2>=UnsetType && LA107_2<=While)||(LA107_2>=Xor && LA107_2<=130)))
							{
								alt107 = 1;
							}


						}


						} finally { DebugExitDecision(107); }
						switch ( alt107 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:400:35: Comma arrayEntry
							{
							DebugLocation(400, 35);
							Comma385=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2168); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Comma385_tree = (object)adaptor.Create(Comma385, "Comma385", retval);
							adaptor.AddChild(root_0, Comma385_tree);
							}
							DebugLocation(400, 41);
							PushFollow(Follow._arrayEntry_in_arrayDeclaration2170);
							arrayEntry386=arrayEntry();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, arrayEntry386.Tree, arrayEntry386, "arrayEntry386", retval);

							}
							break;

						default:
							goto loop107;
						}
					}

					loop107:
						;

					} finally { DebugExitSubRule(107); }

					DebugLocation(400, 54);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:400:54: ( Comma )?
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, false);
					int LA108_1 = input.LA(1);

					if ((LA108_1==Comma))
					{
						alt108 = 1;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:400:54: Comma
						{
						DebugLocation(400, 54);
						Comma387=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration2174); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma387_tree = (object)adaptor.Create(Comma387, "Comma387", retval);
						adaptor.AddChild(root_0, Comma387_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(108); }


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(400, 63);
				CloseSquareBracket388=(IToken)Match(input,CloseSquareBracket,Follow._CloseSquareBracket_in_arrayDeclaration2179); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseSquareBracket388_tree = (object)adaptor.Create(CloseSquareBracket388, "CloseSquareBracket388", retval);
				adaptor.AddChild(root_0, CloseSquareBracket388_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclaration", 61);
			LeaveRule("arrayDeclaration", 61);
			LeaveRule_arrayDeclaration();
			if (state.backtracking > 0) { Memoize(input, 61, arrayDeclaration_StartIndex); }

		}
		DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaration"); }
		return retval;

	}
	// $ANTLR end "arrayDeclaration"

	partial void EnterRule_arrayEntry();
	partial void LeaveRule_arrayEntry();
	// $ANTLR start "arrayEntry"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:403:1: arrayEntry : ( keyValuePair | expression ) ;
	[GrammarRule("arrayEntry")]
	private Antlr3CstNode arrayEntry()
	{
		EnterRule_arrayEntry();
		EnterRule("arrayEntry", 62);
		var retval = new Antlr3CstNode("arrayEntry");
		
		retval.Start = (IToken)input.LT(1);
		int arrayEntry_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode keyValuePair389 = default(Antlr3CstNode);
		Antlr3CstNode expression390 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "arrayEntry");
		DebugLocation(403, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:404:2: ( ( keyValuePair | expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:404:4: ( keyValuePair | expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(404, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:404:4: ( keyValuePair | expression )
			int alt111=2;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Bang:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Namespace:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA111_2 = input.LA(2);

				if ((EvaluatePredicate(synpred173_Php_fragment)))
				{
					alt111 = 1;
				}
				else if ((true))
				{
					alt111 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:404:5: keyValuePair
				{
				DebugLocation(404, 5);
				PushFollow(Follow._keyValuePair_in_arrayEntry2191);
				keyValuePair389=keyValuePair();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, keyValuePair389.Tree, keyValuePair389, "keyValuePair389", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:404:20: expression
				{
				DebugLocation(404, 20);
				PushFollow(Follow._expression_in_arrayEntry2195);
				expression390=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression390.Tree, expression390, "expression390", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayEntry", 62);
			LeaveRule("arrayEntry", 62);
			LeaveRule_arrayEntry();
			if (state.backtracking > 0) { Memoize(input, 62, arrayEntry_StartIndex); }

		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayEntry"); }
		return retval;

	}
	// $ANTLR end "arrayEntry"

	partial void EnterRule_keyValuePair();
	partial void LeaveRule_keyValuePair();
	// $ANTLR start "keyValuePair"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:407:1: keyValuePair : ( expression ArrayAssign expression ) ;
	[GrammarRule("keyValuePair")]
	private Antlr3CstNode keyValuePair()
	{
		EnterRule_keyValuePair();
		EnterRule("keyValuePair", 63);
		var retval = new Antlr3CstNode("keyValuePair");
		
		retval.Start = (IToken)input.LT(1);
		int keyValuePair_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ArrayAssign392 = default(IToken);
		Antlr3CstNode expression391 = default(Antlr3CstNode);
		Antlr3CstNode expression393 = default(Antlr3CstNode);

		object ArrayAssign392_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "keyValuePair");
		DebugLocation(407, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:408:2: ( ( expression ArrayAssign expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:408:4: ( expression ArrayAssign expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(408, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:408:4: ( expression ArrayAssign expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:408:5: expression ArrayAssign expression
			{
			DebugLocation(408, 5);
			PushFollow(Follow._expression_in_keyValuePair2208);
			expression391=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression391.Tree, expression391, "expression391", retval);
			DebugLocation(408, 16);
			ArrayAssign392=(IToken)Match(input,ArrayAssign,Follow._ArrayAssign_in_keyValuePair2210); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ArrayAssign392_tree = (object)adaptor.Create(ArrayAssign392, "ArrayAssign392", retval);
			adaptor.AddChild(root_0, ArrayAssign392_tree);
			}
			DebugLocation(408, 28);
			PushFollow(Follow._expression_in_keyValuePair2212);
			expression393=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression393.Tree, expression393, "expression393", retval);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyValuePair", 63);
			LeaveRule("keyValuePair", 63);
			LeaveRule_keyValuePair();
			if (state.backtracking > 0) { Memoize(input, 63, keyValuePair_StartIndex); }

		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "keyValuePair"); }
		return retval;

	}
	// $ANTLR end "keyValuePair"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:411:1: atom : ( SingleQuotedString | DoubleQuotedString | HereDoc | ( Plus | Minus )? Integer | ( Plus | Minus )? Real | boolean | Null | arrayDeclaration | requireOperator expression | constantOrStaticAccessor );
	[GrammarRule("atom")]
	private Antlr3CstNode atom()
	{
		EnterRule_atom();
		EnterRule("atom", 64);
		var retval = new Antlr3CstNode("atom");
		
		retval.Start = (IToken)input.LT(1);
		int atom_StartIndex = input.Index;

		object root_0 = default(object);

		IToken SingleQuotedString394 = default(IToken);
		IToken DoubleQuotedString395 = default(IToken);
		IToken HereDoc396 = default(IToken);
		IToken set397 = default(IToken);
		IToken Integer398 = default(IToken);
		IToken set399 = default(IToken);
		IToken Real400 = default(IToken);
		IToken Null402 = default(IToken);
		Antlr3CstNode boolean401 = default(Antlr3CstNode);
		Antlr3CstNode arrayDeclaration403 = default(Antlr3CstNode);
		Antlr3CstNode requireOperator404 = default(Antlr3CstNode);
		Antlr3CstNode expression405 = default(Antlr3CstNode);
		Antlr3CstNode constantOrStaticAccessor406 = default(Antlr3CstNode);

		object SingleQuotedString394_tree = default(object);
		object DoubleQuotedString395_tree = default(object);
		object HereDoc396_tree = default(object);
		object set397_tree = default(object);
		object Integer398_tree = default(object);
		object set399_tree = default(object);
		object Real400_tree = default(object);
		object Null402_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(411, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:411:5: ( SingleQuotedString | DoubleQuotedString | HereDoc | ( Plus | Minus )? Integer | ( Plus | Minus )? Real | boolean | Null | arrayDeclaration | requireOperator expression | constantOrStaticAccessor )
			int alt114=10;
			try { DebugEnterDecision(114, false);
			switch (input.LA(1))
			{
			case SingleQuotedString:
				{
				alt114 = 1;
				}
				break;
			case DoubleQuotedString:
				{
				alt114 = 2;
				}
				break;
			case HereDoc:
				{
				alt114 = 3;
				}
				break;
			case Minus:
			case Plus:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred179_Php_fragment)))
				{
					alt114 = 4;
				}
				else if ((EvaluatePredicate(synpred182_Php_fragment)))
				{
					alt114 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				alt114 = 4;
				}
				break;
			case Real:
				{
				alt114 = 5;
				}
				break;
			case False:
			case True:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred183_Php_fragment)))
				{
					alt114 = 6;
				}
				else if ((true))
				{
					alt114 = 10;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred184_Php_fragment)))
				{
					alt114 = 7;
				}
				else if ((true))
				{
					alt114 = 10;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
			case OpenSquareBracket:
				{
				alt114 = 8;
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA114_2 = input.LA(2);

				if ((EvaluatePredicate(synpred186_Php_fragment)))
				{
					alt114 = 9;
				}
				else if ((true))
				{
					alt114 = 10;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case VariableName:
			case While:
			case Xor:
			case 129:
			case 130:
				{
				alt114 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:411:7: SingleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(411, 7);
				SingleQuotedString394=(IToken)Match(input,SingleQuotedString,Follow._SingleQuotedString_in_atom2222); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SingleQuotedString394_tree = (object)adaptor.Create(SingleQuotedString394, "SingleQuotedString394", retval);
				adaptor.AddChild(root_0, SingleQuotedString394_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:412:4: DoubleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(412, 4);
				DoubleQuotedString395=(IToken)Match(input,DoubleQuotedString,Follow._DoubleQuotedString_in_atom2227); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DoubleQuotedString395_tree = (object)adaptor.Create(DoubleQuotedString395, "DoubleQuotedString395", retval);
				adaptor.AddChild(root_0, DoubleQuotedString395_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:413:4: HereDoc
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(413, 4);
				HereDoc396=(IToken)Match(input,HereDoc,Follow._HereDoc_in_atom2232); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HereDoc396_tree = (object)adaptor.Create(HereDoc396, "HereDoc396", retval);
				adaptor.AddChild(root_0, HereDoc396_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:414:4: ( Plus | Minus )? Integer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(414, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:414:4: ( Plus | Minus )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				int LA112_1 = input.LA(1);

				if ((LA112_1==Minus||LA112_1==Plus))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
					{
					DebugLocation(414, 4);

					set397=(IToken)input.LT(1);
					if (input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set397, "set397", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(414, 18);
				Integer398=(IToken)Match(input,Integer,Follow._Integer_in_atom2244); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Integer398_tree = (object)adaptor.Create(Integer398, "Integer398", retval);
				adaptor.AddChild(root_0, Integer398_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:415:4: ( Plus | Minus )? Real
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(415, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:415:4: ( Plus | Minus )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, false);
				int LA113_1 = input.LA(1);

				if ((LA113_1==Minus||LA113_1==Plus))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
					{
					DebugLocation(415, 4);

					set399=(IToken)input.LT(1);
					if (input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set399, "set399", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(415, 18);
				Real400=(IToken)Match(input,Real,Follow._Real_in_atom2256); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Real400_tree = (object)adaptor.Create(Real400, "Real400", retval);
				adaptor.AddChild(root_0, Real400_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:416:4: boolean
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(416, 4);
				PushFollow(Follow._boolean_in_atom2261);
				boolean401=boolean();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolean401.Tree, boolean401, "boolean401", retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:417:4: Null
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(417, 4);
				Null402=(IToken)Match(input,Null,Follow._Null_in_atom2266); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Null402_tree = (object)adaptor.Create(Null402, "Null402", retval);
				adaptor.AddChild(root_0, Null402_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:418:4: arrayDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 4);
				PushFollow(Follow._arrayDeclaration_in_atom2271);
				arrayDeclaration403=arrayDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaration403.Tree, arrayDeclaration403, "arrayDeclaration403", retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:419:4: requireOperator expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(419, 4);
				PushFollow(Follow._requireOperator_in_atom2276);
				requireOperator404=requireOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, requireOperator404.Tree, requireOperator404, "requireOperator404", retval);
				DebugLocation(419, 20);
				PushFollow(Follow._expression_in_atom2278);
				expression405=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression405.Tree, expression405, "expression405", retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:420:4: constantOrStaticAccessor
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(420, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_atom2283);
				constantOrStaticAccessor406=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor406.Tree, constantOrStaticAccessor406, "constantOrStaticAccessor406", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 64);
			LeaveRule("atom", 64);
			LeaveRule_atom();
			if (state.backtracking > 0) { Memoize(input, 64, atom_StartIndex); }

		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_functionArguments();
	partial void LeaveRule_functionArguments();
	// $ANTLR start "functionArguments"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:423:1: functionArguments : OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket ;
	[GrammarRule("functionArguments")]
	private Antlr3CstNode functionArguments()
	{
		EnterRule_functionArguments();
		EnterRule("functionArguments", 65);
		var retval = new Antlr3CstNode("functionArguments");
		
		retval.Start = (IToken)input.LT(1);
		int functionArguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket407 = default(IToken);
		IToken Comma409 = default(IToken);
		IToken CloseRoundBracket411 = default(IToken);
		Antlr3CstNode expression408 = default(Antlr3CstNode);
		Antlr3CstNode expression410 = default(Antlr3CstNode);

		object OpenRoundBracket407_tree = default(object);
		object Comma409_tree = default(object);
		object CloseRoundBracket411_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionArguments");
		DebugLocation(423, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:424:2: ( OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:424:4: OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(424, 4);
			OpenRoundBracket407=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_functionArguments2294); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OpenRoundBracket407_tree = (object)adaptor.Create(OpenRoundBracket407, "OpenRoundBracket407", retval);
			adaptor.AddChild(root_0, OpenRoundBracket407_tree);
			}
			DebugLocation(424, 21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:424:21: ( expression ( Comma expression )* )?
			int alt116=2;
			try { DebugEnterSubRule(116);
			try { DebugEnterDecision(116, false);
			int LA116_1 = input.LA(1);

			if (((LA116_1>=Abstract && LA116_1<=And)||(LA116_1>=ArrayType && LA116_1<=As)||LA116_1==Bang||(LA116_1>=BoolType && LA116_1<=Class)||LA116_1==Clone||(LA116_1>=Const && LA116_1<=Continue)||(LA116_1>=Default && LA116_1<=Die)||LA116_1==Do||(LA116_1>=DoubleQuotedString && LA116_1<=Empty)||(LA116_1>=Eval && LA116_1<=Exit)||(LA116_1>=Extends && LA116_1<=Foreach)||(LA116_1>=Function && LA116_1<=HaltCompiler)||LA116_1==HereDoc||(LA116_1>=If && LA116_1<=IncrementOperator)||(LA116_1>=Instanceof && LA116_1<=List)||LA116_1==Minus||(LA116_1>=Namespace && LA116_1<=Null)||LA116_1==ObjectType||(LA116_1>=OpenRoundBracket && LA116_1<=Or)||(LA116_1>=Plus && LA116_1<=Public)||(LA116_1>=Real && LA116_1<=Return)||LA116_1==SingleQuotedString||(LA116_1>=Static && LA116_1<=Try)||LA116_1==UnquotedString||(LA116_1>=UnsetType && LA116_1<=While)||(LA116_1>=Xor && LA116_1<=130)))
			{
				alt116 = 1;
			}
			} finally { DebugExitDecision(116); }
			switch (alt116)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:424:22: expression ( Comma expression )*
				{
				DebugLocation(424, 22);
				PushFollow(Follow._expression_in_functionArguments2297);
				expression408=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression408.Tree, expression408, "expression408", retval);
				DebugLocation(424, 33);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:424:33: ( Comma expression )*
				try { DebugEnterSubRule(115);
				while (true)
				{
					int alt115=2;
					try { DebugEnterDecision(115, false);
					int LA115_1 = input.LA(1);

					if ((LA115_1==Comma))
					{
						alt115 = 1;
					}


					} finally { DebugExitDecision(115); }
					switch ( alt115 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:424:34: Comma expression
						{
						DebugLocation(424, 34);
						Comma409=(IToken)Match(input,Comma,Follow._Comma_in_functionArguments2300); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Comma409_tree = (object)adaptor.Create(Comma409, "Comma409", retval);
						adaptor.AddChild(root_0, Comma409_tree);
						}
						DebugLocation(424, 40);
						PushFollow(Follow._expression_in_functionArguments2302);
						expression410=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression410.Tree, expression410, "expression410", retval);

						}
						break;

					default:
						goto loop115;
					}
				}

				loop115:
					;

				} finally { DebugExitSubRule(115); }


				}
				break;

			}
			} finally { DebugExitSubRule(116); }

			DebugLocation(424, 55);
			CloseRoundBracket411=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_functionArguments2308); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CloseRoundBracket411_tree = (object)adaptor.Create(CloseRoundBracket411, "CloseRoundBracket411", retval);
			adaptor.AddChild(root_0, CloseRoundBracket411_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionArguments", 65);
			LeaveRule("functionArguments", 65);
			LeaveRule_functionArguments();
			if (state.backtracking > 0) { Memoize(input, 65, functionArguments_StartIndex); }

		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "functionArguments"); }
		return retval;

	}
	// $ANTLR end "functionArguments"

	partial void EnterRule_indexer();
	partial void LeaveRule_indexer();
	// $ANTLR start "indexer"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:427:1: indexer : ( OpenSquareBracket ( expression )? CloseSquareBracket | OpenCurlyBracket ( expression )? CloseCurlyBracket );
	[GrammarRule("indexer")]
	private Antlr3CstNode indexer()
	{
		EnterRule_indexer();
		EnterRule("indexer", 66);
		var retval = new Antlr3CstNode("indexer");
		
		retval.Start = (IToken)input.LT(1);
		int indexer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenSquareBracket412 = default(IToken);
		IToken CloseSquareBracket414 = default(IToken);
		IToken OpenCurlyBracket415 = default(IToken);
		IToken CloseCurlyBracket417 = default(IToken);
		Antlr3CstNode expression413 = default(Antlr3CstNode);
		Antlr3CstNode expression416 = default(Antlr3CstNode);

		object OpenSquareBracket412_tree = default(object);
		object CloseSquareBracket414_tree = default(object);
		object OpenCurlyBracket415_tree = default(object);
		object CloseCurlyBracket417_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "indexer");
		DebugLocation(427, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:2: ( OpenSquareBracket ( expression )? CloseSquareBracket | OpenCurlyBracket ( expression )? CloseCurlyBracket )
			int alt119=2;
			try { DebugEnterDecision(119, false);
			int LA119_1 = input.LA(1);

			if ((LA119_1==OpenSquareBracket))
			{
				alt119 = 1;
			}
			else if ((LA119_1==OpenCurlyBracket))
			{
				alt119 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 119, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:4: OpenSquareBracket ( expression )? CloseSquareBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(428, 4);
				OpenSquareBracket412=(IToken)Match(input,OpenSquareBracket,Follow._OpenSquareBracket_in_indexer2319); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenSquareBracket412_tree = (object)adaptor.Create(OpenSquareBracket412, "OpenSquareBracket412", retval);
				adaptor.AddChild(root_0, OpenSquareBracket412_tree);
				}
				DebugLocation(428, 22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:22: ( expression )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				int LA117_1 = input.LA(1);

				if (((LA117_1>=Abstract && LA117_1<=And)||(LA117_1>=ArrayType && LA117_1<=As)||LA117_1==Bang||(LA117_1>=BoolType && LA117_1<=Class)||LA117_1==Clone||(LA117_1>=Const && LA117_1<=Continue)||(LA117_1>=Default && LA117_1<=Die)||LA117_1==Do||(LA117_1>=DoubleQuotedString && LA117_1<=Empty)||(LA117_1>=Eval && LA117_1<=Exit)||(LA117_1>=Extends && LA117_1<=Foreach)||(LA117_1>=Function && LA117_1<=HaltCompiler)||LA117_1==HereDoc||(LA117_1>=If && LA117_1<=IncrementOperator)||(LA117_1>=Instanceof && LA117_1<=List)||LA117_1==Minus||(LA117_1>=Namespace && LA117_1<=Null)||LA117_1==ObjectType||(LA117_1>=OpenRoundBracket && LA117_1<=Or)||(LA117_1>=Plus && LA117_1<=Public)||(LA117_1>=Real && LA117_1<=Return)||LA117_1==SingleQuotedString||(LA117_1>=Static && LA117_1<=Try)||LA117_1==UnquotedString||(LA117_1>=UnsetType && LA117_1<=While)||(LA117_1>=Xor && LA117_1<=130)))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:428:22: expression
					{
					DebugLocation(428, 22);
					PushFollow(Follow._expression_in_indexer2321);
					expression413=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression413.Tree, expression413, "expression413", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(428, 34);
				CloseSquareBracket414=(IToken)Match(input,CloseSquareBracket,Follow._CloseSquareBracket_in_indexer2324); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseSquareBracket414_tree = (object)adaptor.Create(CloseSquareBracket414, "CloseSquareBracket414", retval);
				adaptor.AddChild(root_0, CloseSquareBracket414_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:4: OpenCurlyBracket ( expression )? CloseCurlyBracket
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(429, 4);
				OpenCurlyBracket415=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_indexer2329); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OpenCurlyBracket415_tree = (object)adaptor.Create(OpenCurlyBracket415, "OpenCurlyBracket415", retval);
				adaptor.AddChild(root_0, OpenCurlyBracket415_tree);
				}
				DebugLocation(429, 21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:21: ( expression )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, false);
				int LA118_1 = input.LA(1);

				if (((LA118_1>=Abstract && LA118_1<=And)||(LA118_1>=ArrayType && LA118_1<=As)||LA118_1==Bang||(LA118_1>=BoolType && LA118_1<=Class)||LA118_1==Clone||(LA118_1>=Const && LA118_1<=Continue)||(LA118_1>=Default && LA118_1<=Die)||LA118_1==Do||(LA118_1>=DoubleQuotedString && LA118_1<=Empty)||(LA118_1>=Eval && LA118_1<=Exit)||(LA118_1>=Extends && LA118_1<=Foreach)||(LA118_1>=Function && LA118_1<=HaltCompiler)||LA118_1==HereDoc||(LA118_1>=If && LA118_1<=IncrementOperator)||(LA118_1>=Instanceof && LA118_1<=List)||LA118_1==Minus||(LA118_1>=Namespace && LA118_1<=Null)||LA118_1==ObjectType||(LA118_1>=OpenRoundBracket && LA118_1<=Or)||(LA118_1>=Plus && LA118_1<=Public)||(LA118_1>=Real && LA118_1<=Return)||LA118_1==SingleQuotedString||(LA118_1>=Static && LA118_1<=Try)||LA118_1==UnquotedString||(LA118_1>=UnsetType && LA118_1<=While)||(LA118_1>=Xor && LA118_1<=130)))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:429:21: expression
					{
					DebugLocation(429, 21);
					PushFollow(Follow._expression_in_indexer2331);
					expression416=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression416.Tree, expression416, "expression416", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(429, 33);
				CloseCurlyBracket417=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_indexer2334); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CloseCurlyBracket417_tree = (object)adaptor.Create(CloseCurlyBracket417, "CloseCurlyBracket417", retval);
				adaptor.AddChild(root_0, CloseCurlyBracket417_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexer", 66);
			LeaveRule("indexer", 66);
			LeaveRule_indexer();
			if (state.backtracking > 0) { Memoize(input, 66, indexer_StartIndex); }

		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "indexer"); }
		return retval;

	}
	// $ANTLR end "indexer"

	partial void EnterRule_memberAccess();
	partial void LeaveRule_memberAccess();
	// $ANTLR start "memberAccess"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:433:1: memberAccess : '->' ( expression | '{' expression '}' | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Use ) ;
	[GrammarRule("memberAccess")]
	private Antlr3CstNode memberAccess()
	{
		EnterRule_memberAccess();
		EnterRule("memberAccess", 67);
		var retval = new Antlr3CstNode("memberAccess");
		
		retval.Start = (IToken)input.LT(1);
		int memberAccess_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal418 = default(IToken);
		IToken char_literal420 = default(IToken);
		IToken char_literal422 = default(IToken);
		IToken New423 = default(IToken);
		IToken Clone424 = default(IToken);
		IToken Echo425 = default(IToken);
		IToken Print426 = default(IToken);
		IToken If427 = default(IToken);
		IToken Else428 = default(IToken);
		IToken ElseIf429 = default(IToken);
		IToken For430 = default(IToken);
		IToken Foreach431 = default(IToken);
		IToken While432 = default(IToken);
		IToken Do433 = default(IToken);
		IToken Try434 = default(IToken);
		IToken Catch435 = default(IToken);
		IToken Finally436 = default(IToken);
		IToken Switch437 = default(IToken);
		IToken Case438 = default(IToken);
		IToken Default439 = default(IToken);
		IToken Namespace440 = default(IToken);
		IToken Function441 = default(IToken);
		IToken Break442 = default(IToken);
		IToken Continue443 = default(IToken);
		IToken Goto444 = default(IToken);
		IToken Return445 = default(IToken);
		IToken Throw446 = default(IToken);
		IToken Global447 = default(IToken);
		IToken Static448 = default(IToken);
		IToken And449 = default(IToken);
		IToken Or450 = default(IToken);
		IToken Xor451 = default(IToken);
		IToken Instanceof452 = default(IToken);
		IToken Null453 = default(IToken);
		IToken List454 = default(IToken);
		IToken Class455 = default(IToken);
		IToken Interface456 = default(IToken);
		IToken Extends457 = default(IToken);
		IToken Implements458 = default(IToken);
		IToken Abstract459 = default(IToken);
		IToken Var460 = default(IToken);
		IToken Const461 = default(IToken);
		IToken As462 = default(IToken);
		IToken Require463 = default(IToken);
		IToken RequireOnce464 = default(IToken);
		IToken Include465 = default(IToken);
		IToken IncludeOnce466 = default(IToken);
		IToken Public467 = default(IToken);
		IToken Private468 = default(IToken);
		IToken Protected469 = default(IToken);
		IToken True470 = default(IToken);
		IToken False471 = default(IToken);
		IToken HaltCompiler472 = default(IToken);
		IToken Die473 = default(IToken);
		IToken Empty474 = default(IToken);
		IToken Exit475 = default(IToken);
		IToken Eval476 = default(IToken);
		IToken Isset477 = default(IToken);
		IToken IntType478 = default(IToken);
		IToken IntegerType479 = default(IToken);
		IToken BoolType480 = default(IToken);
		IToken BooleanType481 = default(IToken);
		IToken FloatType482 = default(IToken);
		IToken DoubleType483 = default(IToken);
		IToken RealType484 = default(IToken);
		IToken StringType485 = default(IToken);
		IToken ObjectType486 = default(IToken);
		IToken Use487 = default(IToken);
		Antlr3CstNode expression419 = default(Antlr3CstNode);
		Antlr3CstNode expression421 = default(Antlr3CstNode);

		object string_literal418_tree = default(object);
		object char_literal420_tree = default(object);
		object char_literal422_tree = default(object);
		object New423_tree = default(object);
		object Clone424_tree = default(object);
		object Echo425_tree = default(object);
		object Print426_tree = default(object);
		object If427_tree = default(object);
		object Else428_tree = default(object);
		object ElseIf429_tree = default(object);
		object For430_tree = default(object);
		object Foreach431_tree = default(object);
		object While432_tree = default(object);
		object Do433_tree = default(object);
		object Try434_tree = default(object);
		object Catch435_tree = default(object);
		object Finally436_tree = default(object);
		object Switch437_tree = default(object);
		object Case438_tree = default(object);
		object Default439_tree = default(object);
		object Namespace440_tree = default(object);
		object Function441_tree = default(object);
		object Break442_tree = default(object);
		object Continue443_tree = default(object);
		object Goto444_tree = default(object);
		object Return445_tree = default(object);
		object Throw446_tree = default(object);
		object Global447_tree = default(object);
		object Static448_tree = default(object);
		object And449_tree = default(object);
		object Or450_tree = default(object);
		object Xor451_tree = default(object);
		object Instanceof452_tree = default(object);
		object Null453_tree = default(object);
		object List454_tree = default(object);
		object Class455_tree = default(object);
		object Interface456_tree = default(object);
		object Extends457_tree = default(object);
		object Implements458_tree = default(object);
		object Abstract459_tree = default(object);
		object Var460_tree = default(object);
		object Const461_tree = default(object);
		object As462_tree = default(object);
		object Require463_tree = default(object);
		object RequireOnce464_tree = default(object);
		object Include465_tree = default(object);
		object IncludeOnce466_tree = default(object);
		object Public467_tree = default(object);
		object Private468_tree = default(object);
		object Protected469_tree = default(object);
		object True470_tree = default(object);
		object False471_tree = default(object);
		object HaltCompiler472_tree = default(object);
		object Die473_tree = default(object);
		object Empty474_tree = default(object);
		object Exit475_tree = default(object);
		object Eval476_tree = default(object);
		object Isset477_tree = default(object);
		object IntType478_tree = default(object);
		object IntegerType479_tree = default(object);
		object BoolType480_tree = default(object);
		object BooleanType481_tree = default(object);
		object FloatType482_tree = default(object);
		object DoubleType483_tree = default(object);
		object RealType484_tree = default(object);
		object StringType485_tree = default(object);
		object ObjectType486_tree = default(object);
		object Use487_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "memberAccess");
		DebugLocation(433, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:434:2: ( '->' ( expression | '{' expression '}' | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Use ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:434:4: '->' ( expression | '{' expression '}' | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Use )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(434, 4);
			string_literal418=(IToken)Match(input,InstanceMember,Follow._InstanceMember_in_memberAccess2346); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal418_tree = (object)adaptor.Create(string_literal418, "string_literal418", retval);
			adaptor.AddChild(root_0, string_literal418_tree);
			}
			DebugLocation(434, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:434:9: ( expression | '{' expression '}' | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Use )
			int alt120=67;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			try
			{
				alt120 = dfa120.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:434:10: expression
				{
				DebugLocation(434, 10);
				PushFollow(Follow._expression_in_memberAccess2349);
				expression419=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression419.Tree, expression419, "expression419", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:434:23: '{' expression '}'
				{
				DebugLocation(434, 23);
				char_literal420=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_memberAccess2353); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal420_tree = (object)adaptor.Create(char_literal420, "char_literal420", retval);
				adaptor.AddChild(root_0, char_literal420_tree);
				}
				DebugLocation(434, 27);
				PushFollow(Follow._expression_in_memberAccess2355);
				expression421=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression421.Tree, expression421, "expression421", retval);
				DebugLocation(434, 38);
				char_literal422=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_memberAccess2357); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal422_tree = (object)adaptor.Create(char_literal422, "char_literal422", retval);
				adaptor.AddChild(root_0, char_literal422_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:6: New
				{
				DebugLocation(435, 6);
				New423=(IToken)Match(input,New,Follow._New_in_memberAccess2364); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New423_tree = (object)adaptor.Create(New423, "New423", retval);
				adaptor.AddChild(root_0, New423_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:10: Clone
				{
				DebugLocation(435, 10);
				Clone424=(IToken)Match(input,Clone,Follow._Clone_in_memberAccess2366); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Clone424_tree = (object)adaptor.Create(Clone424, "Clone424", retval);
				adaptor.AddChild(root_0, Clone424_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:16: Echo
				{
				DebugLocation(435, 16);
				Echo425=(IToken)Match(input,Echo,Follow._Echo_in_memberAccess2368); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Echo425_tree = (object)adaptor.Create(Echo425, "Echo425", retval);
				adaptor.AddChild(root_0, Echo425_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:21: Print
				{
				DebugLocation(435, 21);
				Print426=(IToken)Match(input,Print,Follow._Print_in_memberAccess2370); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Print426_tree = (object)adaptor.Create(Print426, "Print426", retval);
				adaptor.AddChild(root_0, Print426_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:27: If
				{
				DebugLocation(435, 27);
				If427=(IToken)Match(input,If,Follow._If_in_memberAccess2372); if (state.failed) return retval;
				if (state.backtracking == 0) {
				If427_tree = (object)adaptor.Create(If427, "If427", retval);
				adaptor.AddChild(root_0, If427_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:30: Else
				{
				DebugLocation(435, 30);
				Else428=(IToken)Match(input,Else,Follow._Else_in_memberAccess2374); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Else428_tree = (object)adaptor.Create(Else428, "Else428", retval);
				adaptor.AddChild(root_0, Else428_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:35: ElseIf
				{
				DebugLocation(435, 35);
				ElseIf429=(IToken)Match(input,ElseIf,Follow._ElseIf_in_memberAccess2376); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ElseIf429_tree = (object)adaptor.Create(ElseIf429, "ElseIf429", retval);
				adaptor.AddChild(root_0, ElseIf429_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:42: For
				{
				DebugLocation(435, 42);
				For430=(IToken)Match(input,For,Follow._For_in_memberAccess2378); if (state.failed) return retval;
				if (state.backtracking == 0) {
				For430_tree = (object)adaptor.Create(For430, "For430", retval);
				adaptor.AddChild(root_0, For430_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:46: Foreach
				{
				DebugLocation(435, 46);
				Foreach431=(IToken)Match(input,Foreach,Follow._Foreach_in_memberAccess2380); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Foreach431_tree = (object)adaptor.Create(Foreach431, "Foreach431", retval);
				adaptor.AddChild(root_0, Foreach431_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:54: While
				{
				DebugLocation(435, 54);
				While432=(IToken)Match(input,While,Follow._While_in_memberAccess2382); if (state.failed) return retval;
				if (state.backtracking == 0) {
				While432_tree = (object)adaptor.Create(While432, "While432", retval);
				adaptor.AddChild(root_0, While432_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:60: Do
				{
				DebugLocation(435, 60);
				Do433=(IToken)Match(input,Do,Follow._Do_in_memberAccess2384); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Do433_tree = (object)adaptor.Create(Do433, "Do433", retval);
				adaptor.AddChild(root_0, Do433_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:63: Try
				{
				DebugLocation(435, 63);
				Try434=(IToken)Match(input,Try,Follow._Try_in_memberAccess2386); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Try434_tree = (object)adaptor.Create(Try434, "Try434", retval);
				adaptor.AddChild(root_0, Try434_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:67: Catch
				{
				DebugLocation(435, 67);
				Catch435=(IToken)Match(input,Catch,Follow._Catch_in_memberAccess2388); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Catch435_tree = (object)adaptor.Create(Catch435, "Catch435", retval);
				adaptor.AddChild(root_0, Catch435_tree);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:73: Finally
				{
				DebugLocation(435, 73);
				Finally436=(IToken)Match(input,Finally,Follow._Finally_in_memberAccess2390); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Finally436_tree = (object)adaptor.Create(Finally436, "Finally436", retval);
				adaptor.AddChild(root_0, Finally436_tree);
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:81: Switch
				{
				DebugLocation(435, 81);
				Switch437=(IToken)Match(input,Switch,Follow._Switch_in_memberAccess2392); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Switch437_tree = (object)adaptor.Create(Switch437, "Switch437", retval);
				adaptor.AddChild(root_0, Switch437_tree);
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:88: Case
				{
				DebugLocation(435, 88);
				Case438=(IToken)Match(input,Case,Follow._Case_in_memberAccess2394); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Case438_tree = (object)adaptor.Create(Case438, "Case438", retval);
				adaptor.AddChild(root_0, Case438_tree);
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:93: Default
				{
				DebugLocation(435, 93);
				Default439=(IToken)Match(input,Default,Follow._Default_in_memberAccess2396); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Default439_tree = (object)adaptor.Create(Default439, "Default439", retval);
				adaptor.AddChild(root_0, Default439_tree);
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:101: Namespace
				{
				DebugLocation(435, 101);
				Namespace440=(IToken)Match(input,Namespace,Follow._Namespace_in_memberAccess2398); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Namespace440_tree = (object)adaptor.Create(Namespace440, "Namespace440", retval);
				adaptor.AddChild(root_0, Namespace440_tree);
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:111: Function
				{
				DebugLocation(435, 111);
				Function441=(IToken)Match(input,Function,Follow._Function_in_memberAccess2400); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Function441_tree = (object)adaptor.Create(Function441, "Function441", retval);
				adaptor.AddChild(root_0, Function441_tree);
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:120: Break
				{
				DebugLocation(435, 120);
				Break442=(IToken)Match(input,Break,Follow._Break_in_memberAccess2402); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Break442_tree = (object)adaptor.Create(Break442, "Break442", retval);
				adaptor.AddChild(root_0, Break442_tree);
				}

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:126: Continue
				{
				DebugLocation(435, 126);
				Continue443=(IToken)Match(input,Continue,Follow._Continue_in_memberAccess2404); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Continue443_tree = (object)adaptor.Create(Continue443, "Continue443", retval);
				adaptor.AddChild(root_0, Continue443_tree);
				}

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:135: Goto
				{
				DebugLocation(435, 135);
				Goto444=(IToken)Match(input,Goto,Follow._Goto_in_memberAccess2406); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Goto444_tree = (object)adaptor.Create(Goto444, "Goto444", retval);
				adaptor.AddChild(root_0, Goto444_tree);
				}

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:140: Return
				{
				DebugLocation(435, 140);
				Return445=(IToken)Match(input,Return,Follow._Return_in_memberAccess2408); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Return445_tree = (object)adaptor.Create(Return445, "Return445", retval);
				adaptor.AddChild(root_0, Return445_tree);
				}

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:147: Throw
				{
				DebugLocation(435, 147);
				Throw446=(IToken)Match(input,Throw,Follow._Throw_in_memberAccess2410); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Throw446_tree = (object)adaptor.Create(Throw446, "Throw446", retval);
				adaptor.AddChild(root_0, Throw446_tree);
				}

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:153: Global
				{
				DebugLocation(435, 153);
				Global447=(IToken)Match(input,Global,Follow._Global_in_memberAccess2412); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Global447_tree = (object)adaptor.Create(Global447, "Global447", retval);
				adaptor.AddChild(root_0, Global447_tree);
				}

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:160: Static
				{
				DebugLocation(435, 160);
				Static448=(IToken)Match(input,Static,Follow._Static_in_memberAccess2414); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static448_tree = (object)adaptor.Create(Static448, "Static448", retval);
				adaptor.AddChild(root_0, Static448_tree);
				}

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:167: And
				{
				DebugLocation(435, 167);
				And449=(IToken)Match(input,And,Follow._And_in_memberAccess2416); if (state.failed) return retval;
				if (state.backtracking == 0) {
				And449_tree = (object)adaptor.Create(And449, "And449", retval);
				adaptor.AddChild(root_0, And449_tree);
				}

				}
				break;
			case 30:
				DebugEnterAlt(30);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:171: Or
				{
				DebugLocation(435, 171);
				Or450=(IToken)Match(input,Or,Follow._Or_in_memberAccess2418); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Or450_tree = (object)adaptor.Create(Or450, "Or450", retval);
				adaptor.AddChild(root_0, Or450_tree);
				}

				}
				break;
			case 31:
				DebugEnterAlt(31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:174: Xor
				{
				DebugLocation(435, 174);
				Xor451=(IToken)Match(input,Xor,Follow._Xor_in_memberAccess2420); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Xor451_tree = (object)adaptor.Create(Xor451, "Xor451", retval);
				adaptor.AddChild(root_0, Xor451_tree);
				}

				}
				break;
			case 32:
				DebugEnterAlt(32);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:178: Instanceof
				{
				DebugLocation(435, 178);
				Instanceof452=(IToken)Match(input,Instanceof,Follow._Instanceof_in_memberAccess2422); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Instanceof452_tree = (object)adaptor.Create(Instanceof452, "Instanceof452", retval);
				adaptor.AddChild(root_0, Instanceof452_tree);
				}

				}
				break;
			case 33:
				DebugEnterAlt(33);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:189: Null
				{
				DebugLocation(435, 189);
				Null453=(IToken)Match(input,Null,Follow._Null_in_memberAccess2424); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Null453_tree = (object)adaptor.Create(Null453, "Null453", retval);
				adaptor.AddChild(root_0, Null453_tree);
				}

				}
				break;
			case 34:
				DebugEnterAlt(34);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:194: List
				{
				DebugLocation(435, 194);
				List454=(IToken)Match(input,List,Follow._List_in_memberAccess2426); if (state.failed) return retval;
				if (state.backtracking == 0) {
				List454_tree = (object)adaptor.Create(List454, "List454", retval);
				adaptor.AddChild(root_0, List454_tree);
				}

				}
				break;
			case 35:
				DebugEnterAlt(35);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:199: Class
				{
				DebugLocation(435, 199);
				Class455=(IToken)Match(input,Class,Follow._Class_in_memberAccess2428); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Class455_tree = (object)adaptor.Create(Class455, "Class455", retval);
				adaptor.AddChild(root_0, Class455_tree);
				}

				}
				break;
			case 36:
				DebugEnterAlt(36);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:205: Interface
				{
				DebugLocation(435, 205);
				Interface456=(IToken)Match(input,Interface,Follow._Interface_in_memberAccess2430); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Interface456_tree = (object)adaptor.Create(Interface456, "Interface456", retval);
				adaptor.AddChild(root_0, Interface456_tree);
				}

				}
				break;
			case 37:
				DebugEnterAlt(37);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:215: Extends
				{
				DebugLocation(435, 215);
				Extends457=(IToken)Match(input,Extends,Follow._Extends_in_memberAccess2432); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Extends457_tree = (object)adaptor.Create(Extends457, "Extends457", retval);
				adaptor.AddChild(root_0, Extends457_tree);
				}

				}
				break;
			case 38:
				DebugEnterAlt(38);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:223: Implements
				{
				DebugLocation(435, 223);
				Implements458=(IToken)Match(input,Implements,Follow._Implements_in_memberAccess2434); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Implements458_tree = (object)adaptor.Create(Implements458, "Implements458", retval);
				adaptor.AddChild(root_0, Implements458_tree);
				}

				}
				break;
			case 39:
				DebugEnterAlt(39);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:234: Abstract
				{
				DebugLocation(435, 234);
				Abstract459=(IToken)Match(input,Abstract,Follow._Abstract_in_memberAccess2436); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Abstract459_tree = (object)adaptor.Create(Abstract459, "Abstract459", retval);
				adaptor.AddChild(root_0, Abstract459_tree);
				}

				}
				break;
			case 40:
				DebugEnterAlt(40);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:243: Var
				{
				DebugLocation(435, 243);
				Var460=(IToken)Match(input,Var,Follow._Var_in_memberAccess2438); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Var460_tree = (object)adaptor.Create(Var460, "Var460", retval);
				adaptor.AddChild(root_0, Var460_tree);
				}

				}
				break;
			case 41:
				DebugEnterAlt(41);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:247: Const
				{
				DebugLocation(435, 247);
				Const461=(IToken)Match(input,Const,Follow._Const_in_memberAccess2440); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Const461_tree = (object)adaptor.Create(Const461, "Const461", retval);
				adaptor.AddChild(root_0, Const461_tree);
				}

				}
				break;
			case 42:
				DebugEnterAlt(42);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:253: As
				{
				DebugLocation(435, 253);
				As462=(IToken)Match(input,As,Follow._As_in_memberAccess2442); if (state.failed) return retval;
				if (state.backtracking == 0) {
				As462_tree = (object)adaptor.Create(As462, "As462", retval);
				adaptor.AddChild(root_0, As462_tree);
				}

				}
				break;
			case 43:
				DebugEnterAlt(43);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:256: Require
				{
				DebugLocation(435, 256);
				Require463=(IToken)Match(input,Require,Follow._Require_in_memberAccess2444); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Require463_tree = (object)adaptor.Create(Require463, "Require463", retval);
				adaptor.AddChild(root_0, Require463_tree);
				}

				}
				break;
			case 44:
				DebugEnterAlt(44);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:264: RequireOnce
				{
				DebugLocation(435, 264);
				RequireOnce464=(IToken)Match(input,RequireOnce,Follow._RequireOnce_in_memberAccess2446); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RequireOnce464_tree = (object)adaptor.Create(RequireOnce464, "RequireOnce464", retval);
				adaptor.AddChild(root_0, RequireOnce464_tree);
				}

				}
				break;
			case 45:
				DebugEnterAlt(45);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:276: Include
				{
				DebugLocation(435, 276);
				Include465=(IToken)Match(input,Include,Follow._Include_in_memberAccess2448); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Include465_tree = (object)adaptor.Create(Include465, "Include465", retval);
				adaptor.AddChild(root_0, Include465_tree);
				}

				}
				break;
			case 46:
				DebugEnterAlt(46);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:284: IncludeOnce
				{
				DebugLocation(435, 284);
				IncludeOnce466=(IToken)Match(input,IncludeOnce,Follow._IncludeOnce_in_memberAccess2450); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IncludeOnce466_tree = (object)adaptor.Create(IncludeOnce466, "IncludeOnce466", retval);
				adaptor.AddChild(root_0, IncludeOnce466_tree);
				}

				}
				break;
			case 47:
				DebugEnterAlt(47);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:296: Public
				{
				DebugLocation(435, 296);
				Public467=(IToken)Match(input,Public,Follow._Public_in_memberAccess2452); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Public467_tree = (object)adaptor.Create(Public467, "Public467", retval);
				adaptor.AddChild(root_0, Public467_tree);
				}

				}
				break;
			case 48:
				DebugEnterAlt(48);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:303: Private
				{
				DebugLocation(435, 303);
				Private468=(IToken)Match(input,Private,Follow._Private_in_memberAccess2454); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Private468_tree = (object)adaptor.Create(Private468, "Private468", retval);
				adaptor.AddChild(root_0, Private468_tree);
				}

				}
				break;
			case 49:
				DebugEnterAlt(49);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:311: Protected
				{
				DebugLocation(435, 311);
				Protected469=(IToken)Match(input,Protected,Follow._Protected_in_memberAccess2456); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Protected469_tree = (object)adaptor.Create(Protected469, "Protected469", retval);
				adaptor.AddChild(root_0, Protected469_tree);
				}

				}
				break;
			case 50:
				DebugEnterAlt(50);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:321: True
				{
				DebugLocation(435, 321);
				True470=(IToken)Match(input,True,Follow._True_in_memberAccess2458); if (state.failed) return retval;
				if (state.backtracking == 0) {
				True470_tree = (object)adaptor.Create(True470, "True470", retval);
				adaptor.AddChild(root_0, True470_tree);
				}

				}
				break;
			case 51:
				DebugEnterAlt(51);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:326: False
				{
				DebugLocation(435, 326);
				False471=(IToken)Match(input,False,Follow._False_in_memberAccess2460); if (state.failed) return retval;
				if (state.backtracking == 0) {
				False471_tree = (object)adaptor.Create(False471, "False471", retval);
				adaptor.AddChild(root_0, False471_tree);
				}

				}
				break;
			case 52:
				DebugEnterAlt(52);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:332: HaltCompiler
				{
				DebugLocation(435, 332);
				HaltCompiler472=(IToken)Match(input,HaltCompiler,Follow._HaltCompiler_in_memberAccess2462); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HaltCompiler472_tree = (object)adaptor.Create(HaltCompiler472, "HaltCompiler472", retval);
				adaptor.AddChild(root_0, HaltCompiler472_tree);
				}

				}
				break;
			case 53:
				DebugEnterAlt(53);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:345: Die
				{
				DebugLocation(435, 345);
				Die473=(IToken)Match(input,Die,Follow._Die_in_memberAccess2464); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Die473_tree = (object)adaptor.Create(Die473, "Die473", retval);
				adaptor.AddChild(root_0, Die473_tree);
				}

				}
				break;
			case 54:
				DebugEnterAlt(54);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:349: Empty
				{
				DebugLocation(435, 349);
				Empty474=(IToken)Match(input,Empty,Follow._Empty_in_memberAccess2466); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Empty474_tree = (object)adaptor.Create(Empty474, "Empty474", retval);
				adaptor.AddChild(root_0, Empty474_tree);
				}

				}
				break;
			case 55:
				DebugEnterAlt(55);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:355: Exit
				{
				DebugLocation(435, 355);
				Exit475=(IToken)Match(input,Exit,Follow._Exit_in_memberAccess2468); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Exit475_tree = (object)adaptor.Create(Exit475, "Exit475", retval);
				adaptor.AddChild(root_0, Exit475_tree);
				}

				}
				break;
			case 56:
				DebugEnterAlt(56);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:360: Eval
				{
				DebugLocation(435, 360);
				Eval476=(IToken)Match(input,Eval,Follow._Eval_in_memberAccess2470); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Eval476_tree = (object)adaptor.Create(Eval476, "Eval476", retval);
				adaptor.AddChild(root_0, Eval476_tree);
				}

				}
				break;
			case 57:
				DebugEnterAlt(57);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:365: Isset
				{
				DebugLocation(435, 365);
				Isset477=(IToken)Match(input,Isset,Follow._Isset_in_memberAccess2472); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Isset477_tree = (object)adaptor.Create(Isset477, "Isset477", retval);
				adaptor.AddChild(root_0, Isset477_tree);
				}

				}
				break;
			case 58:
				DebugEnterAlt(58);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:6: IntType
				{
				DebugLocation(436, 6);
				IntType478=(IToken)Match(input,IntType,Follow._IntType_in_memberAccess2479); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IntType478_tree = (object)adaptor.Create(IntType478, "IntType478", retval);
				adaptor.AddChild(root_0, IntType478_tree);
				}

				}
				break;
			case 59:
				DebugEnterAlt(59);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:16: IntegerType
				{
				DebugLocation(436, 16);
				IntegerType479=(IToken)Match(input,IntegerType,Follow._IntegerType_in_memberAccess2483); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IntegerType479_tree = (object)adaptor.Create(IntegerType479, "IntegerType479", retval);
				adaptor.AddChild(root_0, IntegerType479_tree);
				}

				}
				break;
			case 60:
				DebugEnterAlt(60);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:30: BoolType
				{
				DebugLocation(436, 30);
				BoolType480=(IToken)Match(input,BoolType,Follow._BoolType_in_memberAccess2487); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BoolType480_tree = (object)adaptor.Create(BoolType480, "BoolType480", retval);
				adaptor.AddChild(root_0, BoolType480_tree);
				}

				}
				break;
			case 61:
				DebugEnterAlt(61);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:41: BooleanType
				{
				DebugLocation(436, 41);
				BooleanType481=(IToken)Match(input,BooleanType,Follow._BooleanType_in_memberAccess2491); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BooleanType481_tree = (object)adaptor.Create(BooleanType481, "BooleanType481", retval);
				adaptor.AddChild(root_0, BooleanType481_tree);
				}

				}
				break;
			case 62:
				DebugEnterAlt(62);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:55: FloatType
				{
				DebugLocation(436, 55);
				FloatType482=(IToken)Match(input,FloatType,Follow._FloatType_in_memberAccess2495); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FloatType482_tree = (object)adaptor.Create(FloatType482, "FloatType482", retval);
				adaptor.AddChild(root_0, FloatType482_tree);
				}

				}
				break;
			case 63:
				DebugEnterAlt(63);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:67: DoubleType
				{
				DebugLocation(436, 67);
				DoubleType483=(IToken)Match(input,DoubleType,Follow._DoubleType_in_memberAccess2499); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DoubleType483_tree = (object)adaptor.Create(DoubleType483, "DoubleType483", retval);
				adaptor.AddChild(root_0, DoubleType483_tree);
				}

				}
				break;
			case 64:
				DebugEnterAlt(64);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:6: RealType
				{
				DebugLocation(437, 6);
				RealType484=(IToken)Match(input,RealType,Follow._RealType_in_memberAccess2506); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RealType484_tree = (object)adaptor.Create(RealType484, "RealType484", retval);
				adaptor.AddChild(root_0, RealType484_tree);
				}

				}
				break;
			case 65:
				DebugEnterAlt(65);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:17: StringType
				{
				DebugLocation(437, 17);
				StringType485=(IToken)Match(input,StringType,Follow._StringType_in_memberAccess2510); if (state.failed) return retval;
				if (state.backtracking == 0) {
				StringType485_tree = (object)adaptor.Create(StringType485, "StringType485", retval);
				adaptor.AddChild(root_0, StringType485_tree);
				}

				}
				break;
			case 66:
				DebugEnterAlt(66);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:30: ObjectType
				{
				DebugLocation(437, 30);
				ObjectType486=(IToken)Match(input,ObjectType,Follow._ObjectType_in_memberAccess2514); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ObjectType486_tree = (object)adaptor.Create(ObjectType486, "ObjectType486", retval);
				adaptor.AddChild(root_0, ObjectType486_tree);
				}

				}
				break;
			case 67:
				DebugEnterAlt(67);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:438:5: Use
				{
				DebugLocation(438, 5);
				Use487=(IToken)Match(input,Use,Follow._Use_in_memberAccess2520); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Use487_tree = (object)adaptor.Create(Use487, "Use487", retval);
				adaptor.AddChild(root_0, Use487_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberAccess", 67);
			LeaveRule("memberAccess", 67);
			LeaveRule_memberAccess();
			if (state.backtracking > 0) { Memoize(input, 67, memberAccess_StartIndex); }

		}
		DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "memberAccess"); }
		return retval;

	}
	// $ANTLR end "memberAccess"

	partial void EnterRule_nameOrFunctionCall();
	partial void LeaveRule_nameOrFunctionCall();
	// $ANTLR start "nameOrFunctionCall"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:442:1: nameOrFunctionCall : ( constantOrFunctionCall | variableOrFunctionCall );
	[GrammarRule("nameOrFunctionCall")]
	private Antlr3CstNode nameOrFunctionCall()
	{
		EnterRule_nameOrFunctionCall();
		EnterRule("nameOrFunctionCall", 68);
		var retval = new Antlr3CstNode("nameOrFunctionCall");
		
		retval.Start = (IToken)input.LT(1);
		int nameOrFunctionCall_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode constantOrFunctionCall488 = default(Antlr3CstNode);
		Antlr3CstNode variableOrFunctionCall489 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "nameOrFunctionCall");
		DebugLocation(442, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:443:2: ( constantOrFunctionCall | variableOrFunctionCall )
			int alt121=2;
			try { DebugEnterDecision(121, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA121_2 = input.LA(2);

				if ((EvaluatePredicate(synpred258_Php_fragment)))
				{
					alt121 = 1;
				}
				else if ((true))
				{
					alt121 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 121, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA121_2 = input.LA(2);

				if ((EvaluatePredicate(synpred258_Php_fragment)))
				{
					alt121 = 1;
				}
				else if ((true))
				{
					alt121 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 121, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA121_2 = input.LA(2);

				if ((EvaluatePredicate(synpred258_Php_fragment)))
				{
					alt121 = 1;
				}
				else if ((true))
				{
					alt121 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 121, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA121_2 = input.LA(2);

				if ((EvaluatePredicate(synpred258_Php_fragment)))
				{
					alt121 = 1;
				}
				else if ((true))
				{
					alt121 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 121, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case False:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA121_2 = input.LA(2);

				if ((EvaluatePredicate(synpred258_Php_fragment)))
				{
					alt121 = 1;
				}
				else if ((true))
				{
					alt121 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 121, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				alt121 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 121, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:443:4: constantOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(443, 4);
				PushFollow(Follow._constantOrFunctionCall_in_nameOrFunctionCall2536);
				constantOrFunctionCall488=constantOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrFunctionCall488.Tree, constantOrFunctionCall488, "constantOrFunctionCall488", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:444:4: variableOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(444, 4);
				PushFollow(Follow._variableOrFunctionCall_in_nameOrFunctionCall2541);
				variableOrFunctionCall489=variableOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrFunctionCall489.Tree, variableOrFunctionCall489, "variableOrFunctionCall489", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nameOrFunctionCall", 68);
			LeaveRule("nameOrFunctionCall", 68);
			LeaveRule_nameOrFunctionCall();
			if (state.backtracking > 0) { Memoize(input, 68, nameOrFunctionCall_StartIndex); }

		}
		DebugLocation(445, 1);
		} finally { DebugExitRule(GrammarFileName, "nameOrFunctionCall"); }
		return retval;

	}
	// $ANTLR end "nameOrFunctionCall"

	partial void EnterRule_variableOrFunctionCall();
	partial void LeaveRule_variableOrFunctionCall();
	// $ANTLR start "variableOrFunctionCall"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:447:1: variableOrFunctionCall : variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )* ;
	[GrammarRule("variableOrFunctionCall")]
	private Antlr3CstNode variableOrFunctionCall()
	{
		EnterRule_variableOrFunctionCall();
		EnterRule("variableOrFunctionCall", 69);
		var retval = new Antlr3CstNode("variableOrFunctionCall");
		
		retval.Start = (IToken)input.LT(1);
		int variableOrFunctionCall_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode variableOrStaticAccessor490 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments491 = default(Antlr3CstNode);
		Antlr3CstNode indexer492 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess493 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments494 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "variableOrFunctionCall");
		DebugLocation(447, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:2: ( variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:4: variableOrStaticAccessor ( functionArguments )? ( indexer | memberAccess ( functionArguments )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(448, 4);
			PushFollow(Follow._variableOrStaticAccessor_in_variableOrFunctionCall2552);
			variableOrStaticAccessor490=variableOrStaticAccessor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor490.Tree, variableOrStaticAccessor490, "variableOrStaticAccessor490", retval);
			DebugLocation(448, 29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:29: ( functionArguments )?
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_1 = input.LA(1);

			if ((LA122_1==OpenRoundBracket))
			{
				int LA122_2 = input.LA(2);

				if ((EvaluatePredicate(synpred259_Php_fragment)))
				{
					alt122 = 1;
				}
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:29: functionArguments
				{
				DebugLocation(448, 29);
				PushFollow(Follow._functionArguments_in_variableOrFunctionCall2554);
				functionArguments491=functionArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments491.Tree, functionArguments491, "functionArguments491", retval);

				}
				break;

			}
			} finally { DebugExitSubRule(122); }

			DebugLocation(448, 48);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:48: ( indexer | memberAccess ( functionArguments )? )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=3;
				try { DebugEnterDecision(124, false);
				switch (input.LA(1))
				{
				case OpenSquareBracket:
					{
					int LA124_2 = input.LA(2);

					if ((EvaluatePredicate(synpred260_Php_fragment)))
					{
						alt124 = 1;
					}


					}
					break;
				case OpenCurlyBracket:
					{
					int LA124_2 = input.LA(2);

					if ((EvaluatePredicate(synpred260_Php_fragment)))
					{
						alt124 = 1;
					}


					}
					break;
				case InstanceMember:
					{
					int LA124_2 = input.LA(2);

					if ((EvaluatePredicate(synpred262_Php_fragment)))
					{
						alt124 = 2;
					}


					}
					break;
				}

				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:49: indexer
					{
					DebugLocation(448, 49);
					PushFollow(Follow._indexer_in_variableOrFunctionCall2558);
					indexer492=indexer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer492.Tree, indexer492, "indexer492", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:59: memberAccess ( functionArguments )?
					{
					DebugLocation(448, 59);
					PushFollow(Follow._memberAccess_in_variableOrFunctionCall2562);
					memberAccess493=memberAccess();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess493.Tree, memberAccess493, "memberAccess493", retval);
					DebugLocation(448, 72);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:72: ( functionArguments )?
					int alt123=2;
					try { DebugEnterSubRule(123);
					try { DebugEnterDecision(123, false);
					int LA123_1 = input.LA(1);

					if ((LA123_1==OpenRoundBracket))
					{
						int LA123_2 = input.LA(2);

						if ((EvaluatePredicate(synpred261_Php_fragment)))
						{
							alt123 = 1;
						}
					}
					} finally { DebugExitDecision(123); }
					switch (alt123)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:72: functionArguments
						{
						DebugLocation(448, 72);
						PushFollow(Follow._functionArguments_in_variableOrFunctionCall2564);
						functionArguments494=functionArguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments494.Tree, functionArguments494, "functionArguments494", retval);

						}
						break;

					}
					} finally { DebugExitSubRule(123); }


					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableOrFunctionCall", 69);
			LeaveRule("variableOrFunctionCall", 69);
			LeaveRule_variableOrFunctionCall();
			if (state.backtracking > 0) { Memoize(input, 69, variableOrFunctionCall_StartIndex); }

		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "variableOrFunctionCall"); }
		return retval;

	}
	// $ANTLR end "variableOrFunctionCall"

	partial void EnterRule_constantOrFunctionCall();
	partial void LeaveRule_constantOrFunctionCall();
	// $ANTLR start "constantOrFunctionCall"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:451:1: constantOrFunctionCall : ( constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )* | constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+ | predefinedFunctionName ( functionArguments )? );
	[GrammarRule("constantOrFunctionCall")]
	private Antlr3CstNode constantOrFunctionCall()
	{
		EnterRule_constantOrFunctionCall();
		EnterRule("constantOrFunctionCall", 70);
		var retval = new Antlr3CstNode("constantOrFunctionCall");
		
		retval.Start = (IToken)input.LT(1);
		int constantOrFunctionCall_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode constantOrStaticAccessor495 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments496 = default(Antlr3CstNode);
		Antlr3CstNode indexer497 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess498 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments499 = default(Antlr3CstNode);
		Antlr3CstNode constantOrStaticAccessor500 = default(Antlr3CstNode);
		Antlr3CstNode indexer501 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess502 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments503 = default(Antlr3CstNode);
		Antlr3CstNode predefinedFunctionName504 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments505 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "constantOrFunctionCall");
		DebugLocation(451, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:2: ( constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )* | constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+ | predefinedFunctionName ( functionArguments )? )
			int alt130=3;
			try { DebugEnterDecision(130, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA130_2 = input.LA(2);

				if ((EvaluatePredicate(synpred266_Php_fragment)))
				{
					alt130 = 1;
				}
				else if ((EvaluatePredicate(synpred270_Php_fragment)))
				{
					alt130 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA130_2 = input.LA(2);

				if ((EvaluatePredicate(synpred266_Php_fragment)))
				{
					alt130 = 1;
				}
				else if ((EvaluatePredicate(synpred270_Php_fragment)))
				{
					alt130 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA130_2 = input.LA(2);

				if ((EvaluatePredicate(synpred266_Php_fragment)))
				{
					alt130 = 1;
				}
				else if ((EvaluatePredicate(synpred270_Php_fragment)))
				{
					alt130 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA130_2 = input.LA(2);

				if ((EvaluatePredicate(synpred266_Php_fragment)))
				{
					alt130 = 1;
				}
				else if ((EvaluatePredicate(synpred270_Php_fragment)))
				{
					alt130 = 2;
				}
				else if ((true))
				{
					alt130 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case False:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA130_2 = input.LA(2);

				if ((EvaluatePredicate(synpred266_Php_fragment)))
				{
					alt130 = 1;
				}
				else if ((EvaluatePredicate(synpred270_Php_fragment)))
				{
					alt130 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				alt130 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:4: constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(452, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_constantOrFunctionCall2578);
				constantOrStaticAccessor495=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor495.Tree, constantOrStaticAccessor495, "constantOrStaticAccessor495", retval);
				DebugLocation(452, 29);
				PushFollow(Follow._functionArguments_in_constantOrFunctionCall2580);
				functionArguments496=functionArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments496.Tree, functionArguments496, "functionArguments496", retval);
				DebugLocation(452, 47);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:47: ( indexer | memberAccess ( functionArguments )? )*
				try { DebugEnterSubRule(126);
				while (true)
				{
					int alt126=3;
					try { DebugEnterDecision(126, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA126_2 = input.LA(2);

						if ((EvaluatePredicate(synpred263_Php_fragment)))
						{
							alt126 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA126_2 = input.LA(2);

						if ((EvaluatePredicate(synpred263_Php_fragment)))
						{
							alt126 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA126_2 = input.LA(2);

						if ((EvaluatePredicate(synpred265_Php_fragment)))
						{
							alt126 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(126); }
					switch ( alt126 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:48: indexer
						{
						DebugLocation(452, 48);
						PushFollow(Follow._indexer_in_constantOrFunctionCall2583);
						indexer497=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer497.Tree, indexer497, "indexer497", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:58: memberAccess ( functionArguments )?
						{
						DebugLocation(452, 58);
						PushFollow(Follow._memberAccess_in_constantOrFunctionCall2587);
						memberAccess498=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess498.Tree, memberAccess498, "memberAccess498", retval);
						DebugLocation(452, 71);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:71: ( functionArguments )?
						int alt125=2;
						try { DebugEnterSubRule(125);
						try { DebugEnterDecision(125, false);
						int LA125_1 = input.LA(1);

						if ((LA125_1==OpenRoundBracket))
						{
							int LA125_2 = input.LA(2);

							if ((EvaluatePredicate(synpred264_Php_fragment)))
							{
								alt125 = 1;
							}
						}
						} finally { DebugExitDecision(125); }
						switch (alt125)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:71: functionArguments
							{
							DebugLocation(452, 71);
							PushFollow(Follow._functionArguments_in_constantOrFunctionCall2589);
							functionArguments499=functionArguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments499.Tree, functionArguments499, "functionArguments499", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(125); }


						}
						break;

					default:
						goto loop126;
					}
				}

				loop126:
					;

				} finally { DebugExitSubRule(126); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:4: constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(453, 4);
				PushFollow(Follow._constantOrStaticAccessor_in_constantOrFunctionCall2597);
				constantOrStaticAccessor500=constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor500.Tree, constantOrStaticAccessor500, "constantOrStaticAccessor500", retval);
				DebugLocation(453, 29);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:29: ( indexer | memberAccess ( functionArguments )? )+
				int cnt128=0;
				try { DebugEnterSubRule(128);
				while (true)
				{
					int alt128=3;
					try { DebugEnterDecision(128, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA128_2 = input.LA(2);

						if ((EvaluatePredicate(synpred267_Php_fragment)))
						{
							alt128 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA128_2 = input.LA(2);

						if ((EvaluatePredicate(synpred267_Php_fragment)))
						{
							alt128 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA128_2 = input.LA(2);

						if ((EvaluatePredicate(synpred269_Php_fragment)))
						{
							alt128 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(128); }
					switch (alt128)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:30: indexer
						{
						DebugLocation(453, 30);
						PushFollow(Follow._indexer_in_constantOrFunctionCall2600);
						indexer501=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer501.Tree, indexer501, "indexer501", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:40: memberAccess ( functionArguments )?
						{
						DebugLocation(453, 40);
						PushFollow(Follow._memberAccess_in_constantOrFunctionCall2604);
						memberAccess502=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess502.Tree, memberAccess502, "memberAccess502", retval);
						DebugLocation(453, 53);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:53: ( functionArguments )?
						int alt127=2;
						try { DebugEnterSubRule(127);
						try { DebugEnterDecision(127, false);
						int LA127_1 = input.LA(1);

						if ((LA127_1==OpenRoundBracket))
						{
							int LA127_2 = input.LA(2);

							if ((EvaluatePredicate(synpred268_Php_fragment)))
							{
								alt127 = 1;
							}
						}
						} finally { DebugExitDecision(127); }
						switch (alt127)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:53: functionArguments
							{
							DebugLocation(453, 53);
							PushFollow(Follow._functionArguments_in_constantOrFunctionCall2606);
							functionArguments503=functionArguments();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments503.Tree, functionArguments503, "functionArguments503", retval);

							}
							break;

						}
						} finally { DebugExitSubRule(127); }


						}
						break;

					default:
						if (cnt128 >= 1)
							goto loop128;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee128 = new EarlyExitException( 128, input );
						DebugRecognitionException(eee128);
						throw eee128;
					}
					cnt128++;
				}
				loop128:
					;

				} finally { DebugExitSubRule(128); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:4: predefinedFunctionName ( functionArguments )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(454, 4);
				PushFollow(Follow._predefinedFunctionName_in_constantOrFunctionCall2614);
				predefinedFunctionName504=predefinedFunctionName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefinedFunctionName504.Tree, predefinedFunctionName504, "predefinedFunctionName504", retval);
				DebugLocation(454, 27);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:27: ( functionArguments )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, false);
				int LA129_1 = input.LA(1);

				if ((LA129_1==OpenRoundBracket))
				{
					int LA129_2 = input.LA(2);

					if ((EvaluatePredicate(synpred271_Php_fragment)))
					{
						alt129 = 1;
					}
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:27: functionArguments
					{
					DebugLocation(454, 27);
					PushFollow(Follow._functionArguments_in_constantOrFunctionCall2616);
					functionArguments505=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments505.Tree, functionArguments505, "functionArguments505", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(129); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constantOrFunctionCall", 70);
			LeaveRule("constantOrFunctionCall", 70);
			LeaveRule_constantOrFunctionCall();
			if (state.backtracking > 0) { Memoize(input, 70, constantOrFunctionCall_StartIndex); }

		}
		DebugLocation(455, 1);
		} finally { DebugExitRule(GrammarFileName, "constantOrFunctionCall"); }
		return retval;

	}
	// $ANTLR end "constantOrFunctionCall"

	partial void EnterRule_name();
	partial void LeaveRule_name();
	// $ANTLR start "name"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:457:1: name : ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ | variableOrStaticAccessor );
	[GrammarRule("name")]
	private Antlr3CstNode name()
	{
		EnterRule_name();
		EnterRule("name", 71);
		var retval = new Antlr3CstNode("name");
		
		retval.Start = (IToken)input.LT(1);
		int name_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode variableOrStaticAccessor506 = default(Antlr3CstNode);
		Antlr3CstNode constantOrStaticAccessor507 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments508 = default(Antlr3CstNode);
		Antlr3CstNode indexer509 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess510 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess511 = default(Antlr3CstNode);
		Antlr3CstNode functionArguments512 = default(Antlr3CstNode);
		Antlr3CstNode indexer513 = default(Antlr3CstNode);
		Antlr3CstNode memberAccess514 = default(Antlr3CstNode);
		Antlr3CstNode variableOrStaticAccessor515 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(457, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:2: ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ | variableOrStaticAccessor )
			int alt136=2;
			try { DebugEnterDecision(136, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred279_Php_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred279_Php_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred279_Php_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA136_2 = input.LA(2);

				if ((EvaluatePredicate(synpred279_Php_fragment)))
				{
					alt136 = 1;
				}
				else if ((true))
				{
					alt136 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 136, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:4: ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(462, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:4: ( variableOrStaticAccessor | constantOrStaticAccessor )
				int alt131=2;
				try { DebugEnterSubRule(131);
				try { DebugEnterDecision(131, false);
				switch (input.LA(1))
				{
				case VariableName:
					{
					int LA131_2 = input.LA(2);

					if ((EvaluatePredicate(synpred272_Php_fragment)))
					{
						alt131 = 1;
					}
					else if ((true))
					{
						alt131 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 131, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 129:
					{
					int LA131_2 = input.LA(2);

					if ((EvaluatePredicate(synpred272_Php_fragment)))
					{
						alt131 = 1;
					}
					else if ((true))
					{
						alt131 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 131, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 130:
					{
					int LA131_2 = input.LA(2);

					if ((EvaluatePredicate(synpred272_Php_fragment)))
					{
						alt131 = 1;
					}
					else if ((true))
					{
						alt131 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 131, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Abstract:
				case And:
				case As:
				case BoolType:
				case BooleanType:
				case Break:
				case Case:
				case Catch:
				case Class:
				case Clone:
				case Const:
				case Continue:
				case Default:
				case Die:
				case Do:
				case DoubleType:
				case Echo:
				case Else:
				case ElseIf:
				case Empty:
				case Eval:
				case Exit:
				case Extends:
				case False:
				case Finally:
				case FloatType:
				case For:
				case Foreach:
				case Function:
				case Global:
				case Goto:
				case HaltCompiler:
				case If:
				case Implements:
				case Include:
				case IncludeOnce:
				case Instanceof:
				case IntType:
				case IntegerType:
				case Interface:
				case Isset:
				case List:
				case Namespace:
				case New:
				case Null:
				case ObjectType:
				case Or:
				case Print:
				case Private:
				case Protected:
				case Public:
				case RealType:
				case Require:
				case RequireOnce:
				case Return:
				case Static:
				case StringType:
				case Switch:
				case Throw:
				case True:
				case Try:
				case UnquotedString:
				case Use:
				case Var:
				case While:
				case Xor:
					{
					int LA131_2 = input.LA(2);

					if ((EvaluatePredicate(synpred272_Php_fragment)))
					{
						alt131 = 1;
					}
					else if ((true))
					{
						alt131 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 131, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 131, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:5: variableOrStaticAccessor
					{
					DebugLocation(462, 5);
					PushFollow(Follow._variableOrStaticAccessor_in_name2637);
					variableOrStaticAccessor506=variableOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor506.Tree, variableOrStaticAccessor506, "variableOrStaticAccessor506", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:32: constantOrStaticAccessor
					{
					DebugLocation(462, 32);
					PushFollow(Follow._constantOrStaticAccessor_in_name2641);
					constantOrStaticAccessor507=constantOrStaticAccessor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constantOrStaticAccessor507.Tree, constantOrStaticAccessor507, "constantOrStaticAccessor507", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(131); }

				DebugLocation(463, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:463:4: ( functionArguments )?
				int alt132=2;
				try { DebugEnterSubRule(132);
				try { DebugEnterDecision(132, false);
				int LA132_1 = input.LA(1);

				if ((LA132_1==OpenRoundBracket))
				{
					alt132 = 1;
				}
				} finally { DebugExitDecision(132); }
				switch (alt132)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:463:4: functionArguments
					{
					DebugLocation(463, 4);
					PushFollow(Follow._functionArguments_in_name2647);
					functionArguments508=functionArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments508.Tree, functionArguments508, "functionArguments508", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(132); }

				DebugLocation(464, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:4: ( ( indexer | memberAccess )* memberAccess functionArguments )*
				try { DebugEnterSubRule(134);
				while (true)
				{
					int alt134=2;
					try { DebugEnterDecision(134, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA134_2 = input.LA(2);

						if ((EvaluatePredicate(synpred276_Php_fragment)))
						{
							alt134 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA134_2 = input.LA(2);

						if ((EvaluatePredicate(synpred276_Php_fragment)))
						{
							alt134 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA134_2 = input.LA(2);

						if ((EvaluatePredicate(synpred276_Php_fragment)))
						{
							alt134 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(134); }
					switch ( alt134 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:5: ( indexer | memberAccess )* memberAccess functionArguments
						{
						DebugLocation(464, 5);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:5: ( indexer | memberAccess )*
						try { DebugEnterSubRule(133);
						while (true)
						{
							int alt133=3;
							try { DebugEnterDecision(133, false);
							int LA133_1 = input.LA(1);

							if ((LA133_1==InstanceMember))
							{
								int LA133_2 = input.LA(2);

								if ((EvaluatePredicate(synpred275_Php_fragment)))
								{
									alt133 = 2;
								}


							}
							else if ((LA133_1==OpenCurlyBracket||LA133_1==OpenSquareBracket))
							{
								alt133 = 1;
							}


							} finally { DebugExitDecision(133); }
							switch ( alt133 )
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:6: indexer
								{
								DebugLocation(464, 6);
								PushFollow(Follow._indexer_in_name2655);
								indexer509=indexer();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, indexer509.Tree, indexer509, "indexer509", retval);

								}
								break;
							case 2:
								DebugEnterAlt(2);
								// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:16: memberAccess
								{
								DebugLocation(464, 16);
								PushFollow(Follow._memberAccess_in_name2659);
								memberAccess510=memberAccess();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess510.Tree, memberAccess510, "memberAccess510", retval);

								}
								break;

							default:
								goto loop133;
							}
						}

						loop133:
							;

						} finally { DebugExitSubRule(133); }

						DebugLocation(464, 31);
						PushFollow(Follow._memberAccess_in_name2663);
						memberAccess511=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess511.Tree, memberAccess511, "memberAccess511", retval);
						DebugLocation(464, 44);
						PushFollow(Follow._functionArguments_in_name2665);
						functionArguments512=functionArguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, functionArguments512.Tree, functionArguments512, "functionArguments512", retval);

						}
						break;

					default:
						goto loop134;
					}
				}

				loop134:
					;

				} finally { DebugExitSubRule(134); }

				DebugLocation(465, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:465:4: ( indexer | memberAccess )+
				int cnt135=0;
				try { DebugEnterSubRule(135);
				while (true)
				{
					int alt135=3;
					try { DebugEnterDecision(135, false);
					switch (input.LA(1))
					{
					case OpenSquareBracket:
						{
						int LA135_2 = input.LA(2);

						if ((EvaluatePredicate(synpred277_Php_fragment)))
						{
							alt135 = 1;
						}


						}
						break;
					case OpenCurlyBracket:
						{
						int LA135_2 = input.LA(2);

						if ((EvaluatePredicate(synpred277_Php_fragment)))
						{
							alt135 = 1;
						}


						}
						break;
					case InstanceMember:
						{
						int LA135_2 = input.LA(2);

						if ((EvaluatePredicate(synpred278_Php_fragment)))
						{
							alt135 = 2;
						}


						}
						break;
					}

					} finally { DebugExitDecision(135); }
					switch (alt135)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:465:5: indexer
						{
						DebugLocation(465, 5);
						PushFollow(Follow._indexer_in_name2673);
						indexer513=indexer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, indexer513.Tree, indexer513, "indexer513", retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:465:15: memberAccess
						{
						DebugLocation(465, 15);
						PushFollow(Follow._memberAccess_in_name2677);
						memberAccess514=memberAccess();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess514.Tree, memberAccess514, "memberAccess514", retval);

						}
						break;

					default:
						if (cnt135 >= 1)
							goto loop135;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee135 = new EarlyExitException( 135, input );
						DebugRecognitionException(eee135);
						throw eee135;
					}
					cnt135++;
				}
				loop135:
					;

				} finally { DebugExitSubRule(135); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:466:4: variableOrStaticAccessor
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(466, 4);
				PushFollow(Follow._variableOrStaticAccessor_in_name2684);
				variableOrStaticAccessor515=variableOrStaticAccessor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableOrStaticAccessor515.Tree, variableOrStaticAccessor515, "variableOrStaticAccessor515", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("name", 71);
			LeaveRule("name", 71);
			LeaveRule_name();
			if (state.backtracking > 0) { Memoize(input, 71, name_StartIndex); }

		}
		DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return retval;

	}
	// $ANTLR end "name"

	partial void EnterRule_variableOrStaticAccessor();
	partial void LeaveRule_variableOrStaticAccessor();
	// $ANTLR start "variableOrStaticAccessor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:469:1: variableOrStaticAccessor : ( ( variable | qualifiedName ) '::' variable | variable );
	[GrammarRule("variableOrStaticAccessor")]
	private Antlr3CstNode variableOrStaticAccessor()
	{
		EnterRule_variableOrStaticAccessor();
		EnterRule("variableOrStaticAccessor", 72);
		var retval = new Antlr3CstNode("variableOrStaticAccessor");
		
		retval.Start = (IToken)input.LT(1);
		int variableOrStaticAccessor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal518 = default(IToken);
		Antlr3CstNode variable516 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName517 = default(Antlr3CstNode);
		Antlr3CstNode variable519 = default(Antlr3CstNode);
		Antlr3CstNode variable520 = default(Antlr3CstNode);

		object string_literal518_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableOrStaticAccessor");
		DebugLocation(469, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:2: ( ( variable | qualifiedName ) '::' variable | variable )
			int alt138=2;
			try { DebugEnterDecision(138, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA138_2 = input.LA(2);

				if ((EvaluatePredicate(synpred281_Php_fragment)))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 138, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA138_2 = input.LA(2);

				if ((EvaluatePredicate(synpred281_Php_fragment)))
				{
					alt138 = 1;
				}
				else if ((true))
				{
					alt138 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 138, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
			case 130:
				{
				alt138 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 138, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:4: ( variable | qualifiedName ) '::' variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(470, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:4: ( variable | qualifiedName )
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, false);
				int LA137_1 = input.LA(1);

				if ((LA137_1==VariableName||LA137_1==129))
				{
					alt137 = 1;
				}
				else if ((LA137_1==Abstract||LA137_1==And||LA137_1==As||(LA137_1>=BoolType && LA137_1<=Class)||LA137_1==Clone||(LA137_1>=Const && LA137_1<=Continue)||(LA137_1>=Default && LA137_1<=Die)||LA137_1==Do||(LA137_1>=DoubleType && LA137_1<=Empty)||(LA137_1>=Eval && LA137_1<=Exit)||(LA137_1>=Extends && LA137_1<=Foreach)||(LA137_1>=Function && LA137_1<=HaltCompiler)||(LA137_1>=If && LA137_1<=IncludeOnce)||(LA137_1>=Instanceof && LA137_1<=IntType)||(LA137_1>=IntegerType && LA137_1<=List)||(LA137_1>=Namespace && LA137_1<=Null)||LA137_1==ObjectType||LA137_1==Or||(LA137_1>=Print && LA137_1<=Public)||(LA137_1>=RealType && LA137_1<=Return)||(LA137_1>=Static && LA137_1<=StringType)||(LA137_1>=Switch && LA137_1<=Throw)||(LA137_1>=True && LA137_1<=Try)||LA137_1==UnquotedString||(LA137_1>=Use && LA137_1<=Var)||LA137_1==While||LA137_1==Xor||LA137_1==130))
				{
					alt137 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:5: variable
					{
					DebugLocation(470, 5);
					PushFollow(Follow._variable_in_variableOrStaticAccessor2696);
					variable516=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable516.Tree, variable516, "variable516", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:16: qualifiedName
					{
					DebugLocation(470, 16);
					PushFollow(Follow._qualifiedName_in_variableOrStaticAccessor2700);
					qualifiedName517=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName517.Tree, qualifiedName517, "qualifiedName517", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(137); }

				DebugLocation(470, 31);
				string_literal518=(IToken)Match(input,ClassMember,Follow._ClassMember_in_variableOrStaticAccessor2703); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal518_tree = (object)adaptor.Create(string_literal518, "string_literal518", retval);
				adaptor.AddChild(root_0, string_literal518_tree);
				}
				DebugLocation(470, 36);
				PushFollow(Follow._variable_in_variableOrStaticAccessor2705);
				variable519=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable519.Tree, variable519, "variable519", retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:471:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(471, 4);
				PushFollow(Follow._variable_in_variableOrStaticAccessor2710);
				variable520=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable520.Tree, variable520, "variable520", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableOrStaticAccessor", 72);
			LeaveRule("variableOrStaticAccessor", 72);
			LeaveRule_variableOrStaticAccessor();
			if (state.backtracking > 0) { Memoize(input, 72, variableOrStaticAccessor_StartIndex); }

		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "variableOrStaticAccessor"); }
		return retval;

	}
	// $ANTLR end "variableOrStaticAccessor"

	partial void EnterRule_constantOrStaticAccessor();
	partial void LeaveRule_constantOrStaticAccessor();
	// $ANTLR start "constantOrStaticAccessor"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:474:1: constantOrStaticAccessor : ( ( variable | qualifiedName ) '::' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName );
	[GrammarRule("constantOrStaticAccessor")]
	private Antlr3CstNode constantOrStaticAccessor()
	{
		EnterRule_constantOrStaticAccessor();
		EnterRule("constantOrStaticAccessor", 73);
		var retval = new Antlr3CstNode("constantOrStaticAccessor");
		
		retval.Start = (IToken)input.LT(1);
		int constantOrStaticAccessor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal523 = default(IToken);
		IToken set524 = default(IToken);
		Antlr3CstNode variable521 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName522 = default(Antlr3CstNode);
		Antlr3CstNode qualifiedName525 = default(Antlr3CstNode);

		object string_literal523_tree = default(object);
		object set524_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constantOrStaticAccessor");
		DebugLocation(474, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:475:2: ( ( variable | qualifiedName ) '::' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName )
			int alt140=2;
			try { DebugEnterDecision(140, false);
			try
			{
				alt140 = dfa140.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:475:4: ( variable | qualifiedName ) '::' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(475, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:475:4: ( variable | qualifiedName )
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, false);
				int LA139_1 = input.LA(1);

				if ((LA139_1==VariableName||LA139_1==129))
				{
					alt139 = 1;
				}
				else if ((LA139_1==Abstract||LA139_1==And||LA139_1==As||(LA139_1>=BoolType && LA139_1<=Class)||LA139_1==Clone||(LA139_1>=Const && LA139_1<=Continue)||(LA139_1>=Default && LA139_1<=Die)||LA139_1==Do||(LA139_1>=DoubleType && LA139_1<=Empty)||(LA139_1>=Eval && LA139_1<=Exit)||(LA139_1>=Extends && LA139_1<=Foreach)||(LA139_1>=Function && LA139_1<=HaltCompiler)||(LA139_1>=If && LA139_1<=IncludeOnce)||(LA139_1>=Instanceof && LA139_1<=IntType)||(LA139_1>=IntegerType && LA139_1<=List)||(LA139_1>=Namespace && LA139_1<=Null)||LA139_1==ObjectType||LA139_1==Or||(LA139_1>=Print && LA139_1<=Public)||(LA139_1>=RealType && LA139_1<=Return)||(LA139_1>=Static && LA139_1<=StringType)||(LA139_1>=Switch && LA139_1<=Throw)||(LA139_1>=True && LA139_1<=Try)||LA139_1==UnquotedString||(LA139_1>=Use && LA139_1<=Var)||LA139_1==While||LA139_1==Xor||LA139_1==130))
				{
					alt139 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:475:5: variable
					{
					DebugLocation(475, 5);
					PushFollow(Follow._variable_in_constantOrStaticAccessor2722);
					variable521=variable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable521.Tree, variable521, "variable521", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:475:16: qualifiedName
					{
					DebugLocation(475, 16);
					PushFollow(Follow._qualifiedName_in_constantOrStaticAccessor2726);
					qualifiedName522=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName522.Tree, qualifiedName522, "qualifiedName522", retval);

					}
					break;

				}
				} finally { DebugExitSubRule(139); }

				DebugLocation(475, 31);
				string_literal523=(IToken)Match(input,ClassMember,Follow._ClassMember_in_constantOrStaticAccessor2729); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal523_tree = (object)adaptor.Create(string_literal523, "string_literal523", retval);
				adaptor.AddChild(root_0, string_literal523_tree);
				}
				DebugLocation(475, 36);

				set524=(IToken)input.LT(1);
				if (input.LA(1)==Abstract||input.LA(1)==And||input.LA(1)==As||(input.LA(1)>=BoolType && input.LA(1)<=Class)||input.LA(1)==Clone||(input.LA(1)>=Const && input.LA(1)<=Continue)||(input.LA(1)>=Default && input.LA(1)<=Die)||input.LA(1)==Do||(input.LA(1)>=DoubleType && input.LA(1)<=Empty)||(input.LA(1)>=Eval && input.LA(1)<=Exit)||(input.LA(1)>=Extends && input.LA(1)<=Foreach)||(input.LA(1)>=Function && input.LA(1)<=HaltCompiler)||(input.LA(1)>=If && input.LA(1)<=IncludeOnce)||(input.LA(1)>=Instanceof && input.LA(1)<=IntType)||(input.LA(1)>=IntegerType && input.LA(1)<=List)||(input.LA(1)>=Namespace && input.LA(1)<=Null)||input.LA(1)==ObjectType||input.LA(1)==Or||(input.LA(1)>=Print && input.LA(1)<=Public)||(input.LA(1)>=RealType && input.LA(1)<=Return)||(input.LA(1)>=Static && input.LA(1)<=StringType)||(input.LA(1)>=Switch && input.LA(1)<=Throw)||(input.LA(1)>=True && input.LA(1)<=Try)||input.LA(1)==UnquotedString||(input.LA(1)>=Use && input.LA(1)<=Var)||input.LA(1)==While||input.LA(1)==Xor)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set524, "set524", retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:480:4: qualifiedName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(480, 4);
				PushFollow(Follow._qualifiedName_in_constantOrStaticAccessor2905);
				qualifiedName525=qualifiedName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName525.Tree, qualifiedName525, "qualifiedName525", retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constantOrStaticAccessor", 73);
			LeaveRule("constantOrStaticAccessor", 73);
			LeaveRule_constantOrStaticAccessor();
			if (state.backtracking > 0) { Memoize(input, 73, constantOrStaticAccessor_StartIndex); }

		}
		DebugLocation(481, 1);
		} finally { DebugExitRule(GrammarFileName, "constantOrStaticAccessor"); }
		return retval;

	}
	// $ANTLR end "constantOrStaticAccessor"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();
	// $ANTLR start "variable"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:483:1: variable : variableVariable ;
	[GrammarRule("variable")]
	private Antlr3CstNode variable()
	{
		EnterRule_variable();
		EnterRule("variable", 74);
		var retval = new Antlr3CstNode("variable");
		
		retval.Start = (IToken)input.LT(1);
		int variable_StartIndex = input.Index;

		object root_0 = default(object);

		Antlr3CstNode variableVariable526 = default(Antlr3CstNode);

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(483, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:484:2: ( variableVariable )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:484:4: variableVariable
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(484, 4);
			PushFollow(Follow._variableVariable_in_variable2917);
			variableVariable526=variableVariable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableVariable526.Tree, variableVariable526, "variableVariable526", retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 74);
			LeaveRule("variable", 74);
			LeaveRule_variable();
			if (state.backtracking > 0) { Memoize(input, 74, variable_StartIndex); }

		}
		DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_variableVariable();
	partial void LeaveRule_variableVariable();
	// $ANTLR start "variableVariable"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:487:1: variableVariable : ( VariableName | '$' ( variableVariable | '{' expression '}' ) );
	[GrammarRule("variableVariable")]
	private Antlr3CstNode variableVariable()
	{
		EnterRule_variableVariable();
		EnterRule("variableVariable", 75);
		var retval = new Antlr3CstNode("variableVariable");
		
		retval.Start = (IToken)input.LT(1);
		int variableVariable_StartIndex = input.Index;

		object root_0 = default(object);

		IToken VariableName527 = default(IToken);
		IToken char_literal528 = default(IToken);
		IToken char_literal530 = default(IToken);
		IToken char_literal532 = default(IToken);
		Antlr3CstNode variableVariable529 = default(Antlr3CstNode);
		Antlr3CstNode expression531 = default(Antlr3CstNode);

		object VariableName527_tree = default(object);
		object char_literal528_tree = default(object);
		object char_literal530_tree = default(object);
		object char_literal532_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableVariable");
		DebugLocation(487, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:488:2: ( VariableName | '$' ( variableVariable | '{' expression '}' ) )
			int alt142=2;
			try { DebugEnterDecision(142, false);
			int LA142_1 = input.LA(1);

			if ((LA142_1==VariableName))
			{
				alt142 = 1;
			}
			else if ((LA142_1==129))
			{
				alt142 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 142, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:488:4: VariableName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(488, 4);
				VariableName527=(IToken)Match(input,VariableName,Follow._VariableName_in_variableVariable2928); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VariableName527_tree = (object)adaptor.Create(VariableName527, "VariableName527", retval);
				adaptor.AddChild(root_0, VariableName527_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:489:4: '$' ( variableVariable | '{' expression '}' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(489, 4);
				char_literal528=(IToken)Match(input,129,Follow._129_in_variableVariable2933); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal528_tree = (object)adaptor.Create(char_literal528, "char_literal528", retval);
				adaptor.AddChild(root_0, char_literal528_tree);
				}
				DebugLocation(489, 8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:489:8: ( variableVariable | '{' expression '}' )
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, false);
				int LA141_1 = input.LA(1);

				if ((LA141_1==VariableName||LA141_1==129))
				{
					alt141 = 1;
				}
				else if ((LA141_1==OpenCurlyBracket))
				{
					alt141 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 141, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:489:9: variableVariable
					{
					DebugLocation(489, 9);
					PushFollow(Follow._variableVariable_in_variableVariable2936);
					variableVariable529=variableVariable();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableVariable529.Tree, variableVariable529, "variableVariable529", retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:489:28: '{' expression '}'
					{
					DebugLocation(489, 28);
					char_literal530=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_variableVariable2940); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal530_tree = (object)adaptor.Create(char_literal530, "char_literal530", retval);
					adaptor.AddChild(root_0, char_literal530_tree);
					}
					DebugLocation(489, 32);
					PushFollow(Follow._expression_in_variableVariable2942);
					expression531=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression531.Tree, expression531, "expression531", retval);
					DebugLocation(489, 43);
					char_literal532=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_variableVariable2944); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal532_tree = (object)adaptor.Create(char_literal532, "char_literal532", retval);
					adaptor.AddChild(root_0, char_literal532_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(141); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableVariable", 75);
			LeaveRule("variableVariable", 75);
			LeaveRule_variableVariable();
			if (state.backtracking > 0) { Memoize(input, 75, variableVariable_StartIndex); }

		}
		DebugLocation(490, 1);
		} finally { DebugExitRule(GrammarFileName, "variableVariable"); }
		return retval;

	}
	// $ANTLR end "variableVariable"

	partial void EnterRule_qualifiedName();
	partial void LeaveRule_qualifiedName();
	// $ANTLR start "qualifiedName"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:493:1: qualifiedName : ( '\\\\' )? ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) ( '\\\\' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )* ;
	[GrammarRule("qualifiedName")]
	private Antlr3CstNode qualifiedName()
	{
		EnterRule_qualifiedName();
		EnterRule("qualifiedName", 76);
		var retval = new Antlr3CstNode("qualifiedName");
		
		retval.Start = (IToken)input.LT(1);
		int qualifiedName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal533 = default(IToken);
		IToken set534 = default(IToken);
		IToken char_literal535 = default(IToken);
		IToken set536 = default(IToken);

		object char_literal533_tree = default(object);
		object set534_tree = default(object);
		object char_literal535_tree = default(object);
		object set536_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualifiedName");
		DebugLocation(493, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:494:2: ( ( '\\\\' )? ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) ( '\\\\' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:494:4: ( '\\\\' )? ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) ( '\\\\' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(494, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:494:4: ( '\\\\' )?
			int alt143=2;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			int LA143_1 = input.LA(1);

			if ((LA143_1==130))
			{
				alt143 = 1;
			}
			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:494:4: '\\\\'
				{
				DebugLocation(494, 4);
				char_literal533=(IToken)Match(input,130,Follow._130_in_qualifiedName2957); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal533_tree = (object)adaptor.Create(char_literal533, "char_literal533", retval);
				adaptor.AddChild(root_0, char_literal533_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(143); }

			DebugLocation(494, 10);

			set534=(IToken)input.LT(1);
			if (input.LA(1)==Abstract||input.LA(1)==And||input.LA(1)==As||(input.LA(1)>=BoolType && input.LA(1)<=Class)||input.LA(1)==Clone||(input.LA(1)>=Const && input.LA(1)<=Continue)||(input.LA(1)>=Default && input.LA(1)<=Die)||input.LA(1)==Do||(input.LA(1)>=DoubleType && input.LA(1)<=Empty)||(input.LA(1)>=Eval && input.LA(1)<=Exit)||(input.LA(1)>=Extends && input.LA(1)<=Foreach)||(input.LA(1)>=Function && input.LA(1)<=HaltCompiler)||(input.LA(1)>=If && input.LA(1)<=IncludeOnce)||(input.LA(1)>=Instanceof && input.LA(1)<=IntType)||(input.LA(1)>=IntegerType && input.LA(1)<=List)||(input.LA(1)>=Namespace && input.LA(1)<=Null)||input.LA(1)==ObjectType||input.LA(1)==Or||(input.LA(1)>=Print && input.LA(1)<=Public)||(input.LA(1)>=RealType && input.LA(1)<=Return)||(input.LA(1)>=Static && input.LA(1)<=StringType)||(input.LA(1)>=Switch && input.LA(1)<=Throw)||(input.LA(1)>=True && input.LA(1)<=Try)||input.LA(1)==UnquotedString||(input.LA(1)>=Use && input.LA(1)<=Var)||input.LA(1)==While||input.LA(1)==Xor)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set534, "set534", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(500, 2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:500:2: ( '\\\\' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) )*
			try { DebugEnterSubRule(144);
			while (true)
			{
				int alt144=2;
				try { DebugEnterDecision(144, false);
				int LA144_1 = input.LA(1);

				if ((LA144_1==130))
				{
					alt144 = 1;
				}


				} finally { DebugExitDecision(144); }
				switch ( alt144 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:500:4: '\\\\' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType )
					{
					DebugLocation(500, 4);
					char_literal535=(IToken)Match(input,130,Follow._130_in_qualifiedName3139); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal535_tree = (object)adaptor.Create(char_literal535, "char_literal535", retval);
					adaptor.AddChild(root_0, char_literal535_tree);
					}
					DebugLocation(500, 9);

					set536=(IToken)input.LT(1);
					if (input.LA(1)==Abstract||input.LA(1)==And||input.LA(1)==As||(input.LA(1)>=BoolType && input.LA(1)<=Class)||input.LA(1)==Clone||(input.LA(1)>=Const && input.LA(1)<=Continue)||(input.LA(1)>=Default && input.LA(1)<=Die)||input.LA(1)==Do||(input.LA(1)>=DoubleType && input.LA(1)<=Empty)||(input.LA(1)>=Eval && input.LA(1)<=Exit)||(input.LA(1)>=Extends && input.LA(1)<=Foreach)||(input.LA(1)>=Function && input.LA(1)<=HaltCompiler)||(input.LA(1)>=If && input.LA(1)<=IncludeOnce)||(input.LA(1)>=Instanceof && input.LA(1)<=IntType)||(input.LA(1)>=IntegerType && input.LA(1)<=List)||(input.LA(1)>=Namespace && input.LA(1)<=Null)||input.LA(1)==ObjectType||input.LA(1)==Or||(input.LA(1)>=Print && input.LA(1)<=Public)||(input.LA(1)>=RealType && input.LA(1)<=Return)||(input.LA(1)>=Static && input.LA(1)<=StringType)||(input.LA(1)>=Switch && input.LA(1)<=Throw)||(input.LA(1)>=True && input.LA(1)<=Try)||input.LA(1)==UnquotedString||(input.LA(1)>=Use && input.LA(1)<=Var)||input.LA(1)==While||input.LA(1)==Xor)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set536, "set536", retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop144;
				}
			}

			loop144:
				;

			} finally { DebugExitSubRule(144); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedName", 76);
			LeaveRule("qualifiedName", 76);
			LeaveRule_qualifiedName();
			if (state.backtracking > 0) { Memoize(input, 76, qualifiedName_StartIndex); }

		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "qualifiedName"); }
		return retval;

	}
	// $ANTLR end "qualifiedName"

	partial void EnterRule_requireOperator();
	partial void LeaveRule_requireOperator();
	// $ANTLR start "requireOperator"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:507:1: requireOperator : ( Require | RequireOnce | Include | IncludeOnce );
	[GrammarRule("requireOperator")]
	private Antlr3CstNode requireOperator()
	{
		EnterRule_requireOperator();
		EnterRule("requireOperator", 77);
		var retval = new Antlr3CstNode("requireOperator");
		
		retval.Start = (IToken)input.LT(1);
		int requireOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set537 = default(IToken);

		object set537_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "requireOperator");
		DebugLocation(507, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:508:2: ( Require | RequireOnce | Include | IncludeOnce )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(508, 2);

			set537=(IToken)input.LT(1);
			if ((input.LA(1)>=Include && input.LA(1)<=IncludeOnce)||(input.LA(1)>=Require && input.LA(1)<=RequireOnce))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set537, "set537", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("requireOperator", 77);
			LeaveRule("requireOperator", 77);
			LeaveRule_requireOperator();
			if (state.backtracking > 0) { Memoize(input, 77, requireOperator_StartIndex); }

		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "requireOperator"); }
		return retval;

	}
	// $ANTLR end "requireOperator"

	partial void EnterRule_accessModifier();
	partial void LeaveRule_accessModifier();
	// $ANTLR start "accessModifier"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:511:1: accessModifier : ( Public | Private | Protected );
	[GrammarRule("accessModifier")]
	private Antlr3CstNode accessModifier()
	{
		EnterRule_accessModifier();
		EnterRule("accessModifier", 78);
		var retval = new Antlr3CstNode("accessModifier");
		
		retval.Start = (IToken)input.LT(1);
		int accessModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set538 = default(IToken);

		object set538_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "accessModifier");
		DebugLocation(511, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:512:2: ( Public | Private | Protected )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(512, 2);

			set538=(IToken)input.LT(1);
			if ((input.LA(1)>=Private && input.LA(1)<=Public))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set538, "set538", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessModifier", 78);
			LeaveRule("accessModifier", 78);
			LeaveRule_accessModifier();
			if (state.backtracking > 0) { Memoize(input, 78, accessModifier_StartIndex); }

		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "accessModifier"); }
		return retval;

	}
	// $ANTLR end "accessModifier"

	partial void EnterRule_boolean();
	partial void LeaveRule_boolean();
	// $ANTLR start "boolean"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:515:1: boolean : ( True | False );
	[GrammarRule("boolean")]
	private Antlr3CstNode boolean()
	{
		EnterRule_boolean();
		EnterRule("boolean", 79);
		var retval = new Antlr3CstNode("boolean");
		
		retval.Start = (IToken)input.LT(1);
		int boolean_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set539 = default(IToken);

		object set539_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "boolean");
		DebugLocation(515, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:516:2: ( True | False )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(516, 2);

			set539=(IToken)input.LT(1);
			if (input.LA(1)==False||input.LA(1)==True)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set539, "set539", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolean", 79);
			LeaveRule("boolean", 79);
			LeaveRule_boolean();
			if (state.backtracking > 0) { Memoize(input, 79, boolean_StartIndex); }

		}
		DebugLocation(517, 1);
		} finally { DebugExitRule(GrammarFileName, "boolean"); }
		return retval;

	}
	// $ANTLR end "boolean"

	partial void EnterRule_predefinedFunctionName();
	partial void LeaveRule_predefinedFunctionName();
	// $ANTLR start "predefinedFunctionName"
	// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:519:1: predefinedFunctionName : ( HaltCompiler | Die | Empty | UnsetType | Eval | Exit | Isset );
	[GrammarRule("predefinedFunctionName")]
	private Antlr3CstNode predefinedFunctionName()
	{
		EnterRule_predefinedFunctionName();
		EnterRule("predefinedFunctionName", 80);
		var retval = new Antlr3CstNode("predefinedFunctionName");
		
		retval.Start = (IToken)input.LT(1);
		int predefinedFunctionName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set540 = default(IToken);

		object set540_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "predefinedFunctionName");
		DebugLocation(519, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:520:2: ( HaltCompiler | Die | Empty | UnsetType | Eval | Exit | Isset )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(520, 2);

			set540=(IToken)input.LT(1);
			if (input.LA(1)==Die||input.LA(1)==Empty||(input.LA(1)>=Eval && input.LA(1)<=Exit)||input.LA(1)==HaltCompiler||input.LA(1)==Isset||input.LA(1)==UnsetType)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set540, "set540", retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("predefinedFunctionName", 80);
			LeaveRule("predefinedFunctionName", 80);
			LeaveRule_predefinedFunctionName();
			if (state.backtracking > 0) { Memoize(input, 80, predefinedFunctionName_StartIndex); }

		}
		DebugLocation(521, 1);
		} finally { DebugExitRule(GrammarFileName, "predefinedFunctionName"); }
		return retval;

	}
	// $ANTLR end "predefinedFunctionName"

	partial void EnterRule_synpred1_Php_fragment();
	partial void LeaveRule_synpred1_Php_fragment();

	// $ANTLR start synpred1_Php
	private void synpred1_Php_fragment()
	{
		EnterRule_synpred1_Php_fragment();
		EnterRule("synpred1_Php_fragment", 81);
		var retval = new Antlr3CstNode("synpred1_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:89:3: ( BodyString namespaceDefinition )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:89:3: BodyString namespaceDefinition
			{
			DebugLocation(89, 3);
			Match(input,BodyString,Follow._BodyString_in_synpred1_Php327); if (state.failed) return;
			DebugLocation(89, 80);
			PushFollow(Follow._namespaceDefinition_in_synpred1_Php331);
			namespaceDefinition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_Php_fragment", 81);
			LeaveRule("synpred1_Php_fragment", 81);
			LeaveRule_synpred1_Php_fragment();
		}
	}
	// $ANTLR end synpred1_Php

	partial void EnterRule_synpred2_Php_fragment();
	partial void LeaveRule_synpred2_Php_fragment();

	// $ANTLR start synpred2_Php
	private void synpred2_Php_fragment()
	{
		EnterRule_synpred2_Php_fragment();
		EnterRule("synpred2_Php_fragment", 82);
		var retval = new Antlr3CstNode("synpred2_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:3: ( useStatement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:3: useStatement
			{
			DebugLocation(90, 3);
			PushFollow(Follow._useStatement_in_synpred2_Php337);
			useStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Php_fragment", 82);
			LeaveRule("synpred2_Php_fragment", 82);
			LeaveRule_synpred2_Php_fragment();
		}
	}
	// $ANTLR end synpred2_Php

	partial void EnterRule_synpred3_Php_fragment();
	partial void LeaveRule_synpred3_Php_fragment();

	// $ANTLR start synpred3_Php
	private void synpred3_Php_fragment()
	{
		EnterRule_synpred3_Php_fragment();
		EnterRule("synpred3_Php_fragment", 83);
		var retval = new Antlr3CstNode("synpred3_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:18: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:90:18: statement
			{
			DebugLocation(90, 18);
			PushFollow(Follow._statement_in_synpred3_Php341);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_Php_fragment", 83);
			LeaveRule("synpred3_Php_fragment", 83);
			LeaveRule_synpred3_Php_fragment();
		}
	}
	// $ANTLR end synpred3_Php

	partial void EnterRule_synpred6_Php_fragment();
	partial void LeaveRule_synpred6_Php_fragment();

	// $ANTLR start synpred6_Php
	private void synpred6_Php_fragment()
	{
		EnterRule_synpred6_Php_fragment();
		EnterRule("synpred6_Php_fragment", 86);
		var retval = new Antlr3CstNode("synpred6_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:109:4: ({...}? => printExpr ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:109:4: {...}? => printExpr ';'
			{
			DebugLocation(109, 4);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred6_Php", "expressionFollowsBodyString");
			}
			DebugLocation(109, 74);
			PushFollow(Follow._printExpr_in_synpred6_Php427);
			printExpr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(109, 84);
			Match(input,SemiColon,Follow._SemiColon_in_synpred6_Php429); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_Php_fragment", 86);
			LeaveRule("synpred6_Php_fragment", 86);
			LeaveRule_synpred6_Php_fragment();
		}
	}
	// $ANTLR end synpred6_Php

	partial void EnterRule_synpred8_Php_fragment();
	partial void LeaveRule_synpred8_Php_fragment();

	// $ANTLR start synpred8_Php
	private void synpred8_Php_fragment()
	{
		EnterRule_synpred8_Php_fragment();
		EnterRule("synpred8_Php_fragment", 88);
		var retval = new Antlr3CstNode("synpred8_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:6: ({...}? => ( printExpr )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:6: {...}? => ( printExpr )?
			{
			DebugLocation(110, 6);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred8_Php", "expressionFollowsBodyString");
			}
			DebugLocation(110, 77);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: ( printExpr )?
			int alt145=2;
			try { DebugEnterSubRule(145);
			try { DebugEnterDecision(145, false);
			int LA145_1 = input.LA(1);

			if (((LA145_1>=Abstract && LA145_1<=And)||(LA145_1>=ArrayType && LA145_1<=As)||LA145_1==Bang||(LA145_1>=BoolType && LA145_1<=Class)||LA145_1==Clone||(LA145_1>=Const && LA145_1<=Continue)||(LA145_1>=Default && LA145_1<=Die)||LA145_1==Do||(LA145_1>=DoubleQuotedString && LA145_1<=Empty)||(LA145_1>=Eval && LA145_1<=Exit)||(LA145_1>=Extends && LA145_1<=Foreach)||(LA145_1>=Function && LA145_1<=HaltCompiler)||LA145_1==HereDoc||(LA145_1>=If && LA145_1<=IncrementOperator)||(LA145_1>=Instanceof && LA145_1<=List)||LA145_1==Minus||(LA145_1>=Namespace && LA145_1<=Null)||LA145_1==ObjectType||(LA145_1>=OpenRoundBracket && LA145_1<=Or)||(LA145_1>=Plus && LA145_1<=Public)||(LA145_1>=Real && LA145_1<=Return)||LA145_1==SingleQuotedString||(LA145_1>=Static && LA145_1<=Try)||LA145_1==UnquotedString||(LA145_1>=UnsetType && LA145_1<=While)||(LA145_1>=Xor && LA145_1<=130)))
			{
				alt145 = 1;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: printExpr
				{
				DebugLocation(110, 77);
				PushFollow(Follow._printExpr_in_synpred8_Php442);
				printExpr();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(145); }


			}

		}
		finally
		{
			TraceOut("synpred8_Php_fragment", 88);
			LeaveRule("synpred8_Php_fragment", 88);
			LeaveRule_synpred8_Php_fragment();
		}
	}
	// $ANTLR end synpred8_Php

	partial void EnterRule_synpred10_Php_fragment();
	partial void LeaveRule_synpred10_Php_fragment();

	// $ANTLR start synpred10_Php
	private void synpred10_Php_fragment()
	{
		EnterRule_synpred10_Php_fragment();
		EnterRule("synpred10_Php_fragment", 90);
		var retval = new Antlr3CstNode("synpred10_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:4: ( ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
			{
			DebugLocation(110, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:4: ({...}? => ( printExpr )? | ( simpleStatement )? )
			int alt148=2;
			try { DebugEnterSubRule(148);
			try { DebugEnterDecision(148, false);
			switch (input.LA(1))
			{
			case List:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VariableName:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case New:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Bang:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Minus:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenRoundBracket:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IncrementOperator:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Clone:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Function:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case False:
			case True:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SingleQuotedString:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DoubleQuotedString:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case HereDoc:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SuppressWarnings:
			case Tilde:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Plus:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Integer:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Real:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Null:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 23, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Include:
			case IncludeOnce:
			case Require:
			case RequireOnce:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 24, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ArrayType:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 25, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OpenSquareBracket:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 26, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Echo:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 27, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BodyString:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 28, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Print:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 29, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Global:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 30, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Static:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 31, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Const:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 32, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Break:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 33, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Continue:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 34, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Goto:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 35, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Return:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 36, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Throw:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 37, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Case:
			case Catch:
			case Class:
			case Default:
			case Do:
			case DoubleType:
			case Else:
			case ElseIf:
			case Extends:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case If:
			case Implements:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Namespace:
			case ObjectType:
			case Or:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case StringType:
			case Switch:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA148_2 = input.LA(2);

				if (((EvaluatePredicate(synpred8_Php_fragment)&&(expressionFollowsBodyString))))
				{
					alt148 = 1;
				}
				else if ((true))
				{
					alt148 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 38, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 148, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:6: {...}? => ( printExpr )?
				{
				DebugLocation(110, 6);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return;}
					throw new FailedPredicateException(input, "synpred10_Php", "expressionFollowsBodyString");
				}
				DebugLocation(110, 77);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: ( printExpr )?
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, false);
				int LA146_1 = input.LA(1);

				if (((LA146_1>=Abstract && LA146_1<=And)||(LA146_1>=ArrayType && LA146_1<=As)||LA146_1==Bang||(LA146_1>=BoolType && LA146_1<=Class)||LA146_1==Clone||(LA146_1>=Const && LA146_1<=Continue)||(LA146_1>=Default && LA146_1<=Die)||LA146_1==Do||(LA146_1>=DoubleQuotedString && LA146_1<=Empty)||(LA146_1>=Eval && LA146_1<=Exit)||(LA146_1>=Extends && LA146_1<=Foreach)||(LA146_1>=Function && LA146_1<=HaltCompiler)||LA146_1==HereDoc||(LA146_1>=If && LA146_1<=IncrementOperator)||(LA146_1>=Instanceof && LA146_1<=List)||LA146_1==Minus||(LA146_1>=Namespace && LA146_1<=Null)||LA146_1==ObjectType||(LA146_1>=OpenRoundBracket && LA146_1<=Or)||(LA146_1>=Plus && LA146_1<=Public)||(LA146_1>=Real && LA146_1<=Return)||LA146_1==SingleQuotedString||(LA146_1>=Static && LA146_1<=Try)||LA146_1==UnquotedString||(LA146_1>=UnsetType && LA146_1<=While)||(LA146_1>=Xor && LA146_1<=130)))
				{
					alt146 = 1;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:77: printExpr
					{
					DebugLocation(110, 77);
					PushFollow(Follow._printExpr_in_synpred10_Php442);
					printExpr();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(146); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: ( simpleStatement )?
				{
				DebugLocation(110, 90);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: ( simpleStatement )?
				int alt147=2;
				try { DebugEnterSubRule(147);
				try { DebugEnterDecision(147, false);
				int LA147_1 = input.LA(1);

				if (((LA147_1>=Abstract && LA147_1<=And)||(LA147_1>=ArrayType && LA147_1<=As)||LA147_1==Bang||(LA147_1>=BoolType && LA147_1<=Class)||LA147_1==Clone||(LA147_1>=Const && LA147_1<=Continue)||(LA147_1>=Default && LA147_1<=Die)||LA147_1==Do||(LA147_1>=DoubleQuotedString && LA147_1<=Empty)||(LA147_1>=Eval && LA147_1<=Exit)||(LA147_1>=Extends && LA147_1<=Foreach)||(LA147_1>=Function && LA147_1<=HaltCompiler)||LA147_1==HereDoc||(LA147_1>=If && LA147_1<=IncrementOperator)||(LA147_1>=Instanceof && LA147_1<=List)||LA147_1==Minus||(LA147_1>=Namespace && LA147_1<=Null)||LA147_1==ObjectType||(LA147_1>=OpenRoundBracket && LA147_1<=Or)||(LA147_1>=Plus && LA147_1<=Public)||(LA147_1>=Real && LA147_1<=Return)||LA147_1==SingleQuotedString||(LA147_1>=Static && LA147_1<=Try)||LA147_1==UnquotedString||(LA147_1>=UnsetType && LA147_1<=While)||(LA147_1>=Xor && LA147_1<=130)))
				{
					alt147 = 1;
				}
				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:110:90: simpleStatement
					{
					DebugLocation(110, 90);
					PushFollow(Follow._simpleStatement_in_synpred10_Php447);
					simpleStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(147); }


				}
				break;

			}
			} finally { DebugExitSubRule(148); }

			DebugLocation(111, 3);
			Match(input,BodyString,Follow._BodyString_in_synpred10_Php453); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_Php_fragment", 90);
			LeaveRule("synpred10_Php_fragment", 90);
			LeaveRule_synpred10_Php_fragment();
		}
	}
	// $ANTLR end synpred10_Php

	partial void EnterRule_synpred11_Php_fragment();
	partial void LeaveRule_synpred11_Php_fragment();

	// $ANTLR start synpred11_Php
	private void synpred11_Php_fragment()
	{
		EnterRule_synpred11_Php_fragment();
		EnterRule("synpred11_Php_fragment", 91);
		var retval = new Antlr3CstNode("synpred11_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:112:4: ( namespaceBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:112:4: namespaceBlock
			{
			DebugLocation(112, 4);
			PushFollow(Follow._namespaceBlock_in_synpred11_Php460);
			namespaceBlock();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred11_Php_fragment", 91);
			LeaveRule("synpred11_Php_fragment", 91);
			LeaveRule_synpred11_Php_fragment();
		}
	}
	// $ANTLR end synpred11_Php

	partial void EnterRule_synpred13_Php_fragment();
	partial void LeaveRule_synpred13_Php_fragment();

	// $ANTLR start synpred13_Php
	private void synpred13_Php_fragment()
	{
		EnterRule_synpred13_Php_fragment();
		EnterRule("synpred13_Php_fragment", 93);
		var retval = new Antlr3CstNode("synpred13_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:114:4: ( UnquotedString Colon statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:114:4: UnquotedString Colon statement
			{
			DebugLocation(114, 4);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred13_Php470); if (state.failed) return;
			DebugLocation(114, 19);
			Match(input,Colon,Follow._Colon_in_synpred13_Php472); if (state.failed) return;
			DebugLocation(114, 25);
			PushFollow(Follow._statement_in_synpred13_Php474);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_Php_fragment", 93);
			LeaveRule("synpred13_Php_fragment", 93);
			LeaveRule_synpred13_Php_fragment();
		}
	}
	// $ANTLR end synpred13_Php

	partial void EnterRule_synpred14_Php_fragment();
	partial void LeaveRule_synpred14_Php_fragment();

	// $ANTLR start synpred14_Php
	private void synpred14_Php_fragment()
	{
		EnterRule_synpred14_Php_fragment();
		EnterRule("synpred14_Php_fragment", 94);
		var retval = new Antlr3CstNode("synpred14_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:115:4: ( classDefinition )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:115:4: classDefinition
			{
			DebugLocation(115, 4);
			PushFollow(Follow._classDefinition_in_synpred14_Php479);
			classDefinition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_Php_fragment", 94);
			LeaveRule("synpred14_Php_fragment", 94);
			LeaveRule_synpred14_Php_fragment();
		}
	}
	// $ANTLR end synpred14_Php

	partial void EnterRule_synpred15_Php_fragment();
	partial void LeaveRule_synpred15_Php_fragment();

	// $ANTLR start synpred15_Php
	private void synpred15_Php_fragment()
	{
		EnterRule_synpred15_Php_fragment();
		EnterRule("synpred15_Php_fragment", 95);
		var retval = new Antlr3CstNode("synpred15_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:116:4: ( interfaceDefinition )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:116:4: interfaceDefinition
			{
			DebugLocation(116, 4);
			PushFollow(Follow._interfaceDefinition_in_synpred15_Php484);
			interfaceDefinition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_Php_fragment", 95);
			LeaveRule("synpred15_Php_fragment", 95);
			LeaveRule_synpred15_Php_fragment();
		}
	}
	// $ANTLR end synpred15_Php

	partial void EnterRule_synpred16_Php_fragment();
	partial void LeaveRule_synpred16_Php_fragment();

	// $ANTLR start synpred16_Php
	private void synpred16_Php_fragment()
	{
		EnterRule_synpred16_Php_fragment();
		EnterRule("synpred16_Php_fragment", 96);
		var retval = new Antlr3CstNode("synpred16_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:117:4: ( complexStatement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:117:4: complexStatement
			{
			DebugLocation(117, 4);
			PushFollow(Follow._complexStatement_in_synpred16_Php489);
			complexStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_Php_fragment", 96);
			LeaveRule("synpred16_Php_fragment", 96);
			LeaveRule_synpred16_Php_fragment();
		}
	}
	// $ANTLR end synpred16_Php

	partial void EnterRule_synpred17_Php_fragment();
	partial void LeaveRule_synpred17_Php_fragment();

	// $ANTLR start synpred17_Php
	private void synpred17_Php_fragment()
	{
		EnterRule_synpred17_Php_fragment();
		EnterRule("synpred17_Php_fragment", 97);
		var retval = new Antlr3CstNode("synpred17_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:118:4: ( simpleStatement ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:118:4: simpleStatement ';'
			{
			DebugLocation(118, 4);
			PushFollow(Follow._simpleStatement_in_synpred17_Php494);
			simpleStatement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(118, 20);
			Match(input,SemiColon,Follow._SemiColon_in_synpred17_Php496); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_Php_fragment", 97);
			LeaveRule("synpred17_Php_fragment", 97);
			LeaveRule_synpred17_Php_fragment();
		}
	}
	// $ANTLR end synpred17_Php

	partial void EnterRule_synpred18_Php_fragment();
	partial void LeaveRule_synpred18_Php_fragment();

	// $ANTLR start synpred18_Php
	private void synpred18_Php_fragment()
	{
		EnterRule_synpred18_Php_fragment();
		EnterRule("synpred18_Php_fragment", 98);
		var retval = new Antlr3CstNode("synpred18_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:8: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:127:8: statement
			{
			DebugLocation(127, 8);
			PushFollow(Follow._statement_in_synpred18_Php525);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred18_Php_fragment", 98);
			LeaveRule("synpred18_Php_fragment", 98);
			LeaveRule_synpred18_Php_fragment();
		}
	}
	// $ANTLR end synpred18_Php

	partial void EnterRule_synpred46_Php_fragment();
	partial void LeaveRule_synpred46_Php_fragment();

	// $ANTLR start synpred46_Php
	private void synpred46_Php_fragment()
	{
		EnterRule_synpred46_Php_fragment();
		EnterRule("synpred46_Php_fragment", 126);
		var retval = new Antlr3CstNode("synpred46_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:36: ( conditional )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:36: conditional
			{
			DebugLocation(185, 36);
			PushFollow(Follow._conditional_in_synpred46_Php877);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred46_Php_fragment", 126);
			LeaveRule("synpred46_Php_fragment", 126);
			LeaveRule_synpred46_Php_fragment();
		}
	}
	// $ANTLR end synpred46_Php

	partial void EnterRule_synpred47_Php_fragment();
	partial void LeaveRule_synpred47_Php_fragment();

	// $ANTLR start synpred47_Php
	private void synpred47_Php_fragment()
	{
		EnterRule_synpred47_Php_fragment();
		EnterRule("synpred47_Php_fragment", 127);
		var retval = new Antlr3CstNode("synpred47_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:4: ( If '(' expression ')' statement ( conditional )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:4: If '(' expression ')' statement ( conditional )?
			{
			DebugLocation(185, 4);
			Match(input,If,Follow._If_in_synpred47_Php867); if (state.failed) return;
			DebugLocation(185, 7);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred47_Php869); if (state.failed) return;
			DebugLocation(185, 11);
			PushFollow(Follow._expression_in_synpred47_Php871);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(185, 22);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred47_Php873); if (state.failed) return;
			DebugLocation(185, 26);
			PushFollow(Follow._statement_in_synpred47_Php875);
			statement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(185, 36);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:36: ( conditional )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			int LA154_1 = input.LA(1);

			if (((LA154_1>=Else && LA154_1<=ElseIf)))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:185:36: conditional
				{
				DebugLocation(185, 36);
				PushFollow(Follow._conditional_in_synpred47_Php877);
				conditional();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(154); }


			}

		}
		finally
		{
			TraceOut("synpred47_Php_fragment", 127);
			LeaveRule("synpred47_Php_fragment", 127);
			LeaveRule_synpred47_Php_fragment();
		}
	}
	// $ANTLR end synpred47_Php

	partial void EnterRule_synpred48_Php_fragment();
	partial void LeaveRule_synpred48_Php_fragment();

	// $ANTLR start synpred48_Php
	private void synpred48_Php_fragment()
	{
		EnterRule_synpred48_Php_fragment();
		EnterRule("synpred48_Php_fragment", 128);
		var retval = new Antlr3CstNode("synpred48_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:186:4: ( For '(' forInit forCondition forUpdate ')' statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:186:4: For '(' forInit forCondition forUpdate ')' statement
			{
			DebugLocation(186, 4);
			Match(input,For,Follow._For_in_synpred48_Php883); if (state.failed) return;
			DebugLocation(186, 8);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred48_Php885); if (state.failed) return;
			DebugLocation(186, 12);
			PushFollow(Follow._forInit_in_synpred48_Php887);
			forInit();
			PopFollow();
			if (state.failed) return;
			DebugLocation(186, 20);
			PushFollow(Follow._forCondition_in_synpred48_Php889);
			forCondition();
			PopFollow();
			if (state.failed) return;
			DebugLocation(186, 33);
			PushFollow(Follow._forUpdate_in_synpred48_Php891);
			forUpdate();
			PopFollow();
			if (state.failed) return;
			DebugLocation(186, 43);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred48_Php893); if (state.failed) return;
			DebugLocation(186, 47);
			PushFollow(Follow._statement_in_synpred48_Php895);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred48_Php_fragment", 128);
			LeaveRule("synpred48_Php_fragment", 128);
			LeaveRule_synpred48_Php_fragment();
		}
	}
	// $ANTLR end synpred48_Php

	partial void EnterRule_synpred49_Php_fragment();
	partial void LeaveRule_synpred49_Php_fragment();

	// $ANTLR start synpred49_Php
	private void synpred49_Php_fragment()
	{
		EnterRule_synpred49_Php_fragment();
		EnterRule("synpred49_Php_fragment", 129);
		var retval = new Antlr3CstNode("synpred49_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:187:4: ( Foreach '(' expression As arrayEntry ')' statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:187:4: Foreach '(' expression As arrayEntry ')' statement
			{
			DebugLocation(187, 4);
			Match(input,Foreach,Follow._Foreach_in_synpred49_Php900); if (state.failed) return;
			DebugLocation(187, 12);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred49_Php902); if (state.failed) return;
			DebugLocation(187, 16);
			PushFollow(Follow._expression_in_synpred49_Php904);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(187, 27);
			Match(input,As,Follow._As_in_synpred49_Php906); if (state.failed) return;
			DebugLocation(187, 30);
			PushFollow(Follow._arrayEntry_in_synpred49_Php908);
			arrayEntry();
			PopFollow();
			if (state.failed) return;
			DebugLocation(187, 41);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred49_Php910); if (state.failed) return;
			DebugLocation(187, 45);
			PushFollow(Follow._statement_in_synpred49_Php912);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred49_Php_fragment", 129);
			LeaveRule("synpred49_Php_fragment", 129);
			LeaveRule_synpred49_Php_fragment();
		}
	}
	// $ANTLR end synpred49_Php

	partial void EnterRule_synpred51_Php_fragment();
	partial void LeaveRule_synpred51_Php_fragment();

	// $ANTLR start synpred51_Php
	private void synpred51_Php_fragment()
	{
		EnterRule_synpred51_Php_fragment();
		EnterRule("synpred51_Php_fragment", 131);
		var retval = new Antlr3CstNode("synpred51_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:188:4: ( While '(' ( expression )? ')' statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:188:4: While '(' ( expression )? ')' statement
			{
			DebugLocation(188, 4);
			Match(input,While,Follow._While_in_synpred51_Php917); if (state.failed) return;
			DebugLocation(188, 10);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred51_Php919); if (state.failed) return;
			DebugLocation(188, 14);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:188:14: ( expression )?
			int alt155=2;
			try { DebugEnterSubRule(155);
			try { DebugEnterDecision(155, false);
			int LA155_1 = input.LA(1);

			if (((LA155_1>=Abstract && LA155_1<=And)||(LA155_1>=ArrayType && LA155_1<=As)||LA155_1==Bang||(LA155_1>=BoolType && LA155_1<=Class)||LA155_1==Clone||(LA155_1>=Const && LA155_1<=Continue)||(LA155_1>=Default && LA155_1<=Die)||LA155_1==Do||(LA155_1>=DoubleQuotedString && LA155_1<=Empty)||(LA155_1>=Eval && LA155_1<=Exit)||(LA155_1>=Extends && LA155_1<=Foreach)||(LA155_1>=Function && LA155_1<=HaltCompiler)||LA155_1==HereDoc||(LA155_1>=If && LA155_1<=IncrementOperator)||(LA155_1>=Instanceof && LA155_1<=List)||LA155_1==Minus||(LA155_1>=Namespace && LA155_1<=Null)||LA155_1==ObjectType||(LA155_1>=OpenRoundBracket && LA155_1<=Or)||(LA155_1>=Plus && LA155_1<=Public)||(LA155_1>=Real && LA155_1<=Return)||LA155_1==SingleQuotedString||(LA155_1>=Static && LA155_1<=Try)||LA155_1==UnquotedString||(LA155_1>=UnsetType && LA155_1<=While)||(LA155_1>=Xor && LA155_1<=130)))
			{
				alt155 = 1;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:188:14: expression
				{
				DebugLocation(188, 14);
				PushFollow(Follow._expression_in_synpred51_Php921);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(155); }

			DebugLocation(188, 26);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred51_Php924); if (state.failed) return;
			DebugLocation(188, 30);
			PushFollow(Follow._statement_in_synpred51_Php926);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred51_Php_fragment", 131);
			LeaveRule("synpred51_Php_fragment", 131);
			LeaveRule_synpred51_Php_fragment();
		}
	}
	// $ANTLR end synpred51_Php

	partial void EnterRule_synpred52_Php_fragment();
	partial void LeaveRule_synpred52_Php_fragment();

	// $ANTLR start synpred52_Php
	private void synpred52_Php_fragment()
	{
		EnterRule_synpred52_Php_fragment();
		EnterRule("synpred52_Php_fragment", 132);
		var retval = new Antlr3CstNode("synpred52_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:30: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:30: statement
			{
			DebugLocation(189, 30);
			PushFollow(Follow._statement_in_synpred52_Php941);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred52_Php_fragment", 132);
			LeaveRule("synpred52_Php_fragment", 132);
			LeaveRule_synpred52_Php_fragment();
		}
	}
	// $ANTLR end synpred52_Php

	partial void EnterRule_synpred53_Php_fragment();
	partial void LeaveRule_synpred53_Php_fragment();

	// $ANTLR start synpred53_Php
	private void synpred53_Php_fragment()
	{
		EnterRule_synpred53_Php_fragment();
		EnterRule("synpred53_Php_fragment", 133);
		var retval = new Antlr3CstNode("synpred53_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:41: ( conditionalWithColon )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:41: conditionalWithColon
			{
			DebugLocation(189, 41);
			PushFollow(Follow._conditionalWithColon_in_synpred53_Php944);
			conditionalWithColon();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_Php_fragment", 133);
			LeaveRule("synpred53_Php_fragment", 133);
			LeaveRule_synpred53_Php_fragment();
		}
	}
	// $ANTLR end synpred53_Php

	partial void EnterRule_synpred54_Php_fragment();
	partial void LeaveRule_synpred54_Php_fragment();

	// $ANTLR start synpred54_Php
	private void synpred54_Php_fragment()
	{
		EnterRule_synpred54_Php_fragment();
		EnterRule("synpred54_Php_fragment", 134);
		var retval = new Antlr3CstNode("synpred54_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:4: ( If '(' expression ')' ':' ( statement )* ( conditionalWithColon )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:4: If '(' expression ')' ':' ( statement )* ( conditionalWithColon )?
			{
			DebugLocation(189, 4);
			Match(input,If,Follow._If_in_synpred54_Php931); if (state.failed) return;
			DebugLocation(189, 7);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred54_Php933); if (state.failed) return;
			DebugLocation(189, 11);
			PushFollow(Follow._expression_in_synpred54_Php935);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(189, 22);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred54_Php937); if (state.failed) return;
			DebugLocation(189, 26);
			Match(input,Colon,Follow._Colon_in_synpred54_Php939); if (state.failed) return;
			DebugLocation(189, 30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:30: ( statement )*
			try { DebugEnterSubRule(156);
			while (true)
			{
				int alt156=2;
				try { DebugEnterDecision(156, false);
				switch (input.LA(1))
				{
				case ElseIf:
					{
					int LA156_2 = input.LA(2);

					if ((EvaluatePredicate(synpred52_Php_fragment)))
					{
						alt156 = 1;
					}


					}
					break;
				case Else:
					{
					int LA156_2 = input.LA(2);

					if ((EvaluatePredicate(synpred52_Php_fragment)))
					{
						alt156 = 1;
					}


					}
					break;
				case Abstract:
				case Ampersand:
				case And:
				case ArrayType:
				case As:
				case Bang:
				case BodyString:
				case BoolType:
				case BooleanType:
				case Break:
				case Case:
				case Catch:
				case Class:
				case Clone:
				case Const:
				case Continue:
				case Default:
				case Die:
				case Do:
				case DoubleQuotedString:
				case DoubleType:
				case Echo:
				case Empty:
				case Eval:
				case Exit:
				case Extends:
				case False:
				case Finally:
				case FloatType:
				case For:
				case Foreach:
				case Function:
				case Global:
				case Goto:
				case HaltCompiler:
				case HereDoc:
				case If:
				case Implements:
				case Include:
				case IncludeOnce:
				case IncrementOperator:
				case Instanceof:
				case IntType:
				case Integer:
				case IntegerType:
				case Interface:
				case Isset:
				case List:
				case Minus:
				case Namespace:
				case New:
				case Null:
				case ObjectType:
				case OpenCurlyBracket:
				case OpenRoundBracket:
				case OpenSquareBracket:
				case Or:
				case Plus:
				case Print:
				case Private:
				case Protected:
				case Public:
				case Real:
				case RealType:
				case Require:
				case RequireOnce:
				case Return:
				case SemiColon:
				case SingleQuotedString:
				case Static:
				case StringType:
				case SuppressWarnings:
				case Switch:
				case Throw:
				case Tilde:
				case True:
				case Try:
				case UnquotedString:
				case UnsetType:
				case Use:
				case Var:
				case VariableName:
				case While:
				case Xor:
				case 129:
				case 130:
					{
					alt156 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(156); }
				switch ( alt156 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:30: statement
					{
					DebugLocation(189, 30);
					PushFollow(Follow._statement_in_synpred54_Php941);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop156;
				}
			}

			loop156:
				;

			} finally { DebugExitSubRule(156); }

			DebugLocation(189, 41);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:41: ( conditionalWithColon )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, false);
			int LA157_1 = input.LA(1);

			if (((LA157_1>=Else && LA157_1<=ElseIf)))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:189:41: conditionalWithColon
				{
				DebugLocation(189, 41);
				PushFollow(Follow._conditionalWithColon_in_synpred54_Php944);
				conditionalWithColon();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(157); }


			}

		}
		finally
		{
			TraceOut("synpred54_Php_fragment", 134);
			LeaveRule("synpred54_Php_fragment", 134);
			LeaveRule_synpred54_Php_fragment();
		}
	}
	// $ANTLR end synpred54_Php

	partial void EnterRule_synpred55_Php_fragment();
	partial void LeaveRule_synpred55_Php_fragment();

	// $ANTLR start synpred55_Php
	private void synpred55_Php_fragment()
	{
		EnterRule_synpred55_Php_fragment();
		EnterRule("synpred55_Php_fragment", 135);
		var retval = new Antlr3CstNode("synpred55_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:190:51: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:190:51: statement
			{
			DebugLocation(190, 51);
			PushFollow(Follow._statement_in_synpred55_Php964);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred55_Php_fragment", 135);
			LeaveRule("synpred55_Php_fragment", 135);
			LeaveRule_synpred55_Php_fragment();
		}
	}
	// $ANTLR end synpred55_Php

	partial void EnterRule_synpred56_Php_fragment();
	partial void LeaveRule_synpred56_Php_fragment();

	// $ANTLR start synpred56_Php
	private void synpred56_Php_fragment()
	{
		EnterRule_synpred56_Php_fragment();
		EnterRule("synpred56_Php_fragment", 136);
		var retval = new Antlr3CstNode("synpred56_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:190:4: ( For '(' forInit forCondition forUpdate ')' ':' ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:190:4: For '(' forInit forCondition forUpdate ')' ':' ( statement )*
			{
			DebugLocation(190, 4);
			Match(input,For,Follow._For_in_synpred56_Php950); if (state.failed) return;
			DebugLocation(190, 8);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred56_Php952); if (state.failed) return;
			DebugLocation(190, 12);
			PushFollow(Follow._forInit_in_synpred56_Php954);
			forInit();
			PopFollow();
			if (state.failed) return;
			DebugLocation(190, 20);
			PushFollow(Follow._forCondition_in_synpred56_Php956);
			forCondition();
			PopFollow();
			if (state.failed) return;
			DebugLocation(190, 33);
			PushFollow(Follow._forUpdate_in_synpred56_Php958);
			forUpdate();
			PopFollow();
			if (state.failed) return;
			DebugLocation(190, 43);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred56_Php960); if (state.failed) return;
			DebugLocation(190, 47);
			Match(input,Colon,Follow._Colon_in_synpred56_Php962); if (state.failed) return;
			DebugLocation(190, 51);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:190:51: ( statement )*
			try { DebugEnterSubRule(158);
			while (true)
			{
				int alt158=2;
				try { DebugEnterDecision(158, false);
				int LA158_1 = input.LA(1);

				if (((LA158_1>=Abstract && LA158_1<=And)||(LA158_1>=ArrayType && LA158_1<=As)||(LA158_1>=Bang && LA158_1<=BodyString)||(LA158_1>=BoolType && LA158_1<=Class)||LA158_1==Clone||(LA158_1>=Const && LA158_1<=Continue)||(LA158_1>=Default && LA158_1<=Die)||LA158_1==Do||(LA158_1>=DoubleQuotedString && LA158_1<=Empty)||(LA158_1>=Eval && LA158_1<=Exit)||(LA158_1>=Extends && LA158_1<=Foreach)||(LA158_1>=Function && LA158_1<=HaltCompiler)||LA158_1==HereDoc||(LA158_1>=If && LA158_1<=IncrementOperator)||(LA158_1>=Instanceof && LA158_1<=List)||LA158_1==Minus||(LA158_1>=Namespace && LA158_1<=Null)||LA158_1==ObjectType||(LA158_1>=OpenCurlyBracket && LA158_1<=Or)||(LA158_1>=Plus && LA158_1<=Public)||(LA158_1>=Real && LA158_1<=SemiColon)||LA158_1==SingleQuotedString||(LA158_1>=Static && LA158_1<=Try)||LA158_1==UnquotedString||(LA158_1>=UnsetType && LA158_1<=While)||(LA158_1>=Xor && LA158_1<=130)))
				{
					alt158 = 1;
				}


				} finally { DebugExitDecision(158); }
				switch ( alt158 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:190:51: statement
					{
					DebugLocation(190, 51);
					PushFollow(Follow._statement_in_synpred56_Php964);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop158;
				}
			}

			loop158:
				;

			} finally { DebugExitSubRule(158); }


			}

		}
		finally
		{
			TraceOut("synpred56_Php_fragment", 136);
			LeaveRule("synpred56_Php_fragment", 136);
			LeaveRule_synpred56_Php_fragment();
		}
	}
	// $ANTLR end synpred56_Php

	partial void EnterRule_synpred57_Php_fragment();
	partial void LeaveRule_synpred57_Php_fragment();

	// $ANTLR start synpred57_Php
	private void synpred57_Php_fragment()
	{
		EnterRule_synpred57_Php_fragment();
		EnterRule("synpred57_Php_fragment", 137);
		var retval = new Antlr3CstNode("synpred57_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:191:49: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:191:49: statement
			{
			DebugLocation(191, 49);
			PushFollow(Follow._statement_in_synpred57_Php984);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred57_Php_fragment", 137);
			LeaveRule("synpred57_Php_fragment", 137);
			LeaveRule_synpred57_Php_fragment();
		}
	}
	// $ANTLR end synpred57_Php

	partial void EnterRule_synpred58_Php_fragment();
	partial void LeaveRule_synpred58_Php_fragment();

	// $ANTLR start synpred58_Php
	private void synpred58_Php_fragment()
	{
		EnterRule_synpred58_Php_fragment();
		EnterRule("synpred58_Php_fragment", 138);
		var retval = new Antlr3CstNode("synpred58_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:191:4: ( Foreach '(' expression As arrayEntry ')' ':' ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:191:4: Foreach '(' expression As arrayEntry ')' ':' ( statement )*
			{
			DebugLocation(191, 4);
			Match(input,Foreach,Follow._Foreach_in_synpred58_Php970); if (state.failed) return;
			DebugLocation(191, 12);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred58_Php972); if (state.failed) return;
			DebugLocation(191, 16);
			PushFollow(Follow._expression_in_synpred58_Php974);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(191, 27);
			Match(input,As,Follow._As_in_synpred58_Php976); if (state.failed) return;
			DebugLocation(191, 30);
			PushFollow(Follow._arrayEntry_in_synpred58_Php978);
			arrayEntry();
			PopFollow();
			if (state.failed) return;
			DebugLocation(191, 41);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred58_Php980); if (state.failed) return;
			DebugLocation(191, 45);
			Match(input,Colon,Follow._Colon_in_synpred58_Php982); if (state.failed) return;
			DebugLocation(191, 49);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:191:49: ( statement )*
			try { DebugEnterSubRule(159);
			while (true)
			{
				int alt159=2;
				try { DebugEnterDecision(159, false);
				int LA159_1 = input.LA(1);

				if (((LA159_1>=Abstract && LA159_1<=And)||(LA159_1>=ArrayType && LA159_1<=As)||(LA159_1>=Bang && LA159_1<=BodyString)||(LA159_1>=BoolType && LA159_1<=Class)||LA159_1==Clone||(LA159_1>=Const && LA159_1<=Continue)||(LA159_1>=Default && LA159_1<=Die)||LA159_1==Do||(LA159_1>=DoubleQuotedString && LA159_1<=Empty)||(LA159_1>=Eval && LA159_1<=Exit)||(LA159_1>=Extends && LA159_1<=Foreach)||(LA159_1>=Function && LA159_1<=HaltCompiler)||LA159_1==HereDoc||(LA159_1>=If && LA159_1<=IncrementOperator)||(LA159_1>=Instanceof && LA159_1<=List)||LA159_1==Minus||(LA159_1>=Namespace && LA159_1<=Null)||LA159_1==ObjectType||(LA159_1>=OpenCurlyBracket && LA159_1<=Or)||(LA159_1>=Plus && LA159_1<=Public)||(LA159_1>=Real && LA159_1<=SemiColon)||LA159_1==SingleQuotedString||(LA159_1>=Static && LA159_1<=Try)||LA159_1==UnquotedString||(LA159_1>=UnsetType && LA159_1<=While)||(LA159_1>=Xor && LA159_1<=130)))
				{
					alt159 = 1;
				}


				} finally { DebugExitDecision(159); }
				switch ( alt159 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:191:49: statement
					{
					DebugLocation(191, 49);
					PushFollow(Follow._statement_in_synpred58_Php984);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop159;
				}
			}

			loop159:
				;

			} finally { DebugExitSubRule(159); }


			}

		}
		finally
		{
			TraceOut("synpred58_Php_fragment", 138);
			LeaveRule("synpred58_Php_fragment", 138);
			LeaveRule_synpred58_Php_fragment();
		}
	}
	// $ANTLR end synpred58_Php

	partial void EnterRule_synpred60_Php_fragment();
	partial void LeaveRule_synpred60_Php_fragment();

	// $ANTLR start synpred60_Php
	private void synpred60_Php_fragment()
	{
		EnterRule_synpred60_Php_fragment();
		EnterRule("synpred60_Php_fragment", 140);
		var retval = new Antlr3CstNode("synpred60_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:34: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:34: statement
			{
			DebugLocation(192, 34);
			PushFollow(Follow._statement_in_synpred60_Php1001);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred60_Php_fragment", 140);
			LeaveRule("synpred60_Php_fragment", 140);
			LeaveRule_synpred60_Php_fragment();
		}
	}
	// $ANTLR end synpred60_Php

	partial void EnterRule_synpred61_Php_fragment();
	partial void LeaveRule_synpred61_Php_fragment();

	// $ANTLR start synpred61_Php
	private void synpred61_Php_fragment()
	{
		EnterRule_synpred61_Php_fragment();
		EnterRule("synpred61_Php_fragment", 141);
		var retval = new Antlr3CstNode("synpred61_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:4: ( While '(' ( expression )? ')' ':' ( statement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:4: While '(' ( expression )? ')' ':' ( statement )*
			{
			DebugLocation(192, 4);
			Match(input,While,Follow._While_in_synpred61_Php990); if (state.failed) return;
			DebugLocation(192, 10);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred61_Php992); if (state.failed) return;
			DebugLocation(192, 14);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:14: ( expression )?
			int alt160=2;
			try { DebugEnterSubRule(160);
			try { DebugEnterDecision(160, false);
			int LA160_1 = input.LA(1);

			if (((LA160_1>=Abstract && LA160_1<=And)||(LA160_1>=ArrayType && LA160_1<=As)||LA160_1==Bang||(LA160_1>=BoolType && LA160_1<=Class)||LA160_1==Clone||(LA160_1>=Const && LA160_1<=Continue)||(LA160_1>=Default && LA160_1<=Die)||LA160_1==Do||(LA160_1>=DoubleQuotedString && LA160_1<=Empty)||(LA160_1>=Eval && LA160_1<=Exit)||(LA160_1>=Extends && LA160_1<=Foreach)||(LA160_1>=Function && LA160_1<=HaltCompiler)||LA160_1==HereDoc||(LA160_1>=If && LA160_1<=IncrementOperator)||(LA160_1>=Instanceof && LA160_1<=List)||LA160_1==Minus||(LA160_1>=Namespace && LA160_1<=Null)||LA160_1==ObjectType||(LA160_1>=OpenRoundBracket && LA160_1<=Or)||(LA160_1>=Plus && LA160_1<=Public)||(LA160_1>=Real && LA160_1<=Return)||LA160_1==SingleQuotedString||(LA160_1>=Static && LA160_1<=Try)||LA160_1==UnquotedString||(LA160_1>=UnsetType && LA160_1<=While)||(LA160_1>=Xor && LA160_1<=130)))
			{
				alt160 = 1;
			}
			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:14: expression
				{
				DebugLocation(192, 14);
				PushFollow(Follow._expression_in_synpred61_Php994);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(160); }

			DebugLocation(192, 26);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred61_Php997); if (state.failed) return;
			DebugLocation(192, 30);
			Match(input,Colon,Follow._Colon_in_synpred61_Php999); if (state.failed) return;
			DebugLocation(192, 34);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:34: ( statement )*
			try { DebugEnterSubRule(161);
			while (true)
			{
				int alt161=2;
				try { DebugEnterDecision(161, false);
				int LA161_1 = input.LA(1);

				if (((LA161_1>=Abstract && LA161_1<=And)||(LA161_1>=ArrayType && LA161_1<=As)||(LA161_1>=Bang && LA161_1<=BodyString)||(LA161_1>=BoolType && LA161_1<=Class)||LA161_1==Clone||(LA161_1>=Const && LA161_1<=Continue)||(LA161_1>=Default && LA161_1<=Die)||LA161_1==Do||(LA161_1>=DoubleQuotedString && LA161_1<=Empty)||(LA161_1>=Eval && LA161_1<=Exit)||(LA161_1>=Extends && LA161_1<=Foreach)||(LA161_1>=Function && LA161_1<=HaltCompiler)||LA161_1==HereDoc||(LA161_1>=If && LA161_1<=IncrementOperator)||(LA161_1>=Instanceof && LA161_1<=List)||LA161_1==Minus||(LA161_1>=Namespace && LA161_1<=Null)||LA161_1==ObjectType||(LA161_1>=OpenCurlyBracket && LA161_1<=Or)||(LA161_1>=Plus && LA161_1<=Public)||(LA161_1>=Real && LA161_1<=SemiColon)||LA161_1==SingleQuotedString||(LA161_1>=Static && LA161_1<=Try)||LA161_1==UnquotedString||(LA161_1>=UnsetType && LA161_1<=While)||(LA161_1>=Xor && LA161_1<=130)))
				{
					alt161 = 1;
				}


				} finally { DebugExitDecision(161); }
				switch ( alt161 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:192:34: statement
					{
					DebugLocation(192, 34);
					PushFollow(Follow._statement_in_synpred61_Php1001);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop161;
				}
			}

			loop161:
				;

			} finally { DebugExitSubRule(161); }


			}

		}
		finally
		{
			TraceOut("synpred61_Php_fragment", 141);
			LeaveRule("synpred61_Php_fragment", 141);
			LeaveRule_synpred61_Php_fragment();
		}
	}
	// $ANTLR end synpred61_Php

	partial void EnterRule_synpred65_Php_fragment();
	partial void LeaveRule_synpred65_Php_fragment();

	// $ANTLR start synpred65_Php
	private void synpred65_Php_fragment()
	{
		EnterRule_synpred65_Php_fragment();
		EnterRule("synpred65_Php_fragment", 145);
		var retval = new Antlr3CstNode("synpred65_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:201:5: ( Catch '(' qualifiedName variable ')' bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:201:5: Catch '(' qualifiedName variable ')' bracketedBlock
			{
			DebugLocation(201, 5);
			Match(input,Catch,Follow._Catch_in_synpred65_Php1066); if (state.failed) return;
			DebugLocation(201, 11);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred65_Php1068); if (state.failed) return;
			DebugLocation(201, 15);
			PushFollow(Follow._qualifiedName_in_synpred65_Php1070);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(201, 29);
			PushFollow(Follow._variable_in_synpred65_Php1072);
			variable();
			PopFollow();
			if (state.failed) return;
			DebugLocation(201, 38);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred65_Php1074); if (state.failed) return;
			DebugLocation(201, 42);
			PushFollow(Follow._bracketedBlock_in_synpred65_Php1076);
			bracketedBlock();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred65_Php_fragment", 145);
			LeaveRule("synpred65_Php_fragment", 145);
			LeaveRule_synpred65_Php_fragment();
		}
	}
	// $ANTLR end synpred65_Php

	partial void EnterRule_synpred66_Php_fragment();
	partial void LeaveRule_synpred66_Php_fragment();

	// $ANTLR start synpred66_Php
	private void synpred66_Php_fragment()
	{
		EnterRule_synpred66_Php_fragment();
		EnterRule("synpred66_Php_fragment", 146);
		var retval = new Antlr3CstNode("synpred66_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:202:5: ( Finally bracketedBlock )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:202:5: Finally bracketedBlock
			{
			DebugLocation(202, 5);
			Match(input,Finally,Follow._Finally_in_synpred66_Php1084); if (state.failed) return;
			DebugLocation(202, 13);
			PushFollow(Follow._bracketedBlock_in_synpred66_Php1086);
			bracketedBlock();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred66_Php_fragment", 146);
			LeaveRule("synpred66_Php_fragment", 146);
			LeaveRule_synpred66_Php_fragment();
		}
	}
	// $ANTLR end synpred66_Php

	partial void EnterRule_synpred67_Php_fragment();
	partial void LeaveRule_synpred67_Php_fragment();

	// $ANTLR start synpred67_Php
	private void synpred67_Php_fragment()
	{
		EnterRule_synpred67_Php_fragment();
		EnterRule("synpred67_Php_fragment", 147);
		var retval = new Antlr3CstNode("synpred67_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:206:4: ( Echo commaList )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:206:4: Echo commaList
			{
			DebugLocation(206, 4);
			Match(input,Echo,Follow._Echo_in_synpred67_Php1099); if (state.failed) return;
			DebugLocation(206, 9);
			PushFollow(Follow._commaList_in_synpred67_Php1101);
			commaList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred67_Php_fragment", 147);
			LeaveRule("synpred67_Php_fragment", 147);
			LeaveRule_synpred67_Php_fragment();
		}
	}
	// $ANTLR end synpred67_Php

	partial void EnterRule_synpred68_Php_fragment();
	partial void LeaveRule_synpred68_Php_fragment();

	// $ANTLR start synpred68_Php
	private void synpred68_Php_fragment()
	{
		EnterRule_synpred68_Php_fragment();
		EnterRule("synpred68_Php_fragment", 148);
		var retval = new Antlr3CstNode("synpred68_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:207:4: ( Print expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:207:4: Print expression
			{
			DebugLocation(207, 4);
			Match(input,Print,Follow._Print_in_synpred68_Php1106); if (state.failed) return;
			DebugLocation(207, 10);
			PushFollow(Follow._expression_in_synpred68_Php1108);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_Php_fragment", 148);
			LeaveRule("synpred68_Php_fragment", 148);
			LeaveRule_synpred68_Php_fragment();
		}
	}
	// $ANTLR end synpred68_Php

	partial void EnterRule_synpred70_Php_fragment();
	partial void LeaveRule_synpred70_Php_fragment();

	// $ANTLR start synpred70_Php
	private void synpred70_Php_fragment()
	{
		EnterRule_synpred70_Php_fragment();
		EnterRule("synpred70_Php_fragment", 150);
		var retval = new Antlr3CstNode("synpred70_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:208:4: ( Global variable ( ',' variable )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:208:4: Global variable ( ',' variable )*
			{
			DebugLocation(208, 4);
			Match(input,Global,Follow._Global_in_synpred70_Php1113); if (state.failed) return;
			DebugLocation(208, 11);
			PushFollow(Follow._variable_in_synpred70_Php1115);
			variable();
			PopFollow();
			if (state.failed) return;
			DebugLocation(208, 20);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:208:20: ( ',' variable )*
			try { DebugEnterSubRule(162);
			while (true)
			{
				int alt162=2;
				try { DebugEnterDecision(162, false);
				int LA162_1 = input.LA(1);

				if ((LA162_1==Comma))
				{
					alt162 = 1;
				}


				} finally { DebugExitDecision(162); }
				switch ( alt162 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:208:21: ',' variable
					{
					DebugLocation(208, 21);
					Match(input,Comma,Follow._Comma_in_synpred70_Php1118); if (state.failed) return;
					DebugLocation(208, 25);
					PushFollow(Follow._variable_in_synpred70_Php1120);
					variable();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop162;
				}
			}

			loop162:
				;

			} finally { DebugExitSubRule(162); }


			}

		}
		finally
		{
			TraceOut("synpred70_Php_fragment", 150);
			LeaveRule("synpred70_Php_fragment", 150);
			LeaveRule_synpred70_Php_fragment();
		}
	}
	// $ANTLR end synpred70_Php

	partial void EnterRule_synpred74_Php_fragment();
	partial void LeaveRule_synpred74_Php_fragment();

	// $ANTLR start synpred74_Php
	private void synpred74_Php_fragment()
	{
		EnterRule_synpred74_Php_fragment();
		EnterRule("synpred74_Php_fragment", 154);
		var retval = new Antlr3CstNode("synpred74_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:4: ( Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:4: Static VariableName ( Equals atom )? ( ',' VariableName ( Equals atom )? )*
			{
			DebugLocation(209, 4);
			Match(input,Static,Follow._Static_in_synpred74_Php1128); if (state.failed) return;
			DebugLocation(209, 11);
			Match(input,VariableName,Follow._VariableName_in_synpred74_Php1130); if (state.failed) return;
			DebugLocation(209, 24);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:24: ( Equals atom )?
			int alt164=2;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, false);
			int LA164_1 = input.LA(1);

			if ((LA164_1==Equals))
			{
				alt164 = 1;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:25: Equals atom
				{
				DebugLocation(209, 25);
				Match(input,Equals,Follow._Equals_in_synpred74_Php1133); if (state.failed) return;
				DebugLocation(209, 32);
				PushFollow(Follow._atom_in_synpred74_Php1135);
				atom();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(164); }

			DebugLocation(209, 39);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:39: ( ',' VariableName ( Equals atom )? )*
			try { DebugEnterSubRule(166);
			while (true)
			{
				int alt166=2;
				try { DebugEnterDecision(166, false);
				int LA166_1 = input.LA(1);

				if ((LA166_1==Comma))
				{
					alt166 = 1;
				}


				} finally { DebugExitDecision(166); }
				switch ( alt166 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:40: ',' VariableName ( Equals atom )?
					{
					DebugLocation(209, 40);
					Match(input,Comma,Follow._Comma_in_synpred74_Php1140); if (state.failed) return;
					DebugLocation(209, 44);
					Match(input,VariableName,Follow._VariableName_in_synpred74_Php1142); if (state.failed) return;
					DebugLocation(209, 57);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:57: ( Equals atom )?
					int alt165=2;
					try { DebugEnterSubRule(165);
					try { DebugEnterDecision(165, false);
					int LA165_1 = input.LA(1);

					if ((LA165_1==Equals))
					{
						alt165 = 1;
					}
					} finally { DebugExitDecision(165); }
					switch (alt165)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:209:58: Equals atom
						{
						DebugLocation(209, 58);
						Match(input,Equals,Follow._Equals_in_synpred74_Php1145); if (state.failed) return;
						DebugLocation(209, 65);
						PushFollow(Follow._atom_in_synpred74_Php1147);
						atom();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(165); }


					}
					break;

				default:
					goto loop166;
				}
			}

			loop166:
				;

			} finally { DebugExitSubRule(166); }


			}

		}
		finally
		{
			TraceOut("synpred74_Php_fragment", 154);
			LeaveRule("synpred74_Php_fragment", 154);
			LeaveRule_synpred74_Php_fragment();
		}
	}
	// $ANTLR end synpred74_Php

	partial void EnterRule_synpred75_Php_fragment();
	partial void LeaveRule_synpred75_Php_fragment();

	// $ANTLR start synpred75_Php
	private void synpred75_Php_fragment()
	{
		EnterRule_synpred75_Php_fragment();
		EnterRule("synpred75_Php_fragment", 155);
		var retval = new Antlr3CstNode("synpred75_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:210:4: ( constDefinition )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:210:4: constDefinition
			{
			DebugLocation(210, 4);
			PushFollow(Follow._constDefinition_in_synpred75_Php1156);
			constDefinition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred75_Php_fragment", 155);
			LeaveRule("synpred75_Php_fragment", 155);
			LeaveRule_synpred75_Php_fragment();
		}
	}
	// $ANTLR end synpred75_Php

	partial void EnterRule_synpred77_Php_fragment();
	partial void LeaveRule_synpred77_Php_fragment();

	// $ANTLR start synpred77_Php
	private void synpred77_Php_fragment()
	{
		EnterRule_synpred77_Php_fragment();
		EnterRule("synpred77_Php_fragment", 157);
		var retval = new Antlr3CstNode("synpred77_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:211:4: ( Break ( Integer )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:211:4: Break ( Integer )?
			{
			DebugLocation(211, 4);
			Match(input,Break,Follow._Break_in_synpred77_Php1161); if (state.failed) return;
			DebugLocation(211, 10);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:211:10: ( Integer )?
			int alt167=2;
			try { DebugEnterSubRule(167);
			try { DebugEnterDecision(167, false);
			int LA167_1 = input.LA(1);

			if ((LA167_1==Integer))
			{
				alt167 = 1;
			}
			} finally { DebugExitDecision(167); }
			switch (alt167)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:211:10: Integer
				{
				DebugLocation(211, 10);
				Match(input,Integer,Follow._Integer_in_synpred77_Php1163); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(167); }


			}

		}
		finally
		{
			TraceOut("synpred77_Php_fragment", 157);
			LeaveRule("synpred77_Php_fragment", 157);
			LeaveRule_synpred77_Php_fragment();
		}
	}
	// $ANTLR end synpred77_Php

	partial void EnterRule_synpred79_Php_fragment();
	partial void LeaveRule_synpred79_Php_fragment();

	// $ANTLR start synpred79_Php
	private void synpred79_Php_fragment()
	{
		EnterRule_synpred79_Php_fragment();
		EnterRule("synpred79_Php_fragment", 159);
		var retval = new Antlr3CstNode("synpred79_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:212:4: ( Continue ( Integer )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:212:4: Continue ( Integer )?
			{
			DebugLocation(212, 4);
			Match(input,Continue,Follow._Continue_in_synpred79_Php1169); if (state.failed) return;
			DebugLocation(212, 13);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:212:13: ( Integer )?
			int alt168=2;
			try { DebugEnterSubRule(168);
			try { DebugEnterDecision(168, false);
			int LA168_1 = input.LA(1);

			if ((LA168_1==Integer))
			{
				alt168 = 1;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:212:13: Integer
				{
				DebugLocation(212, 13);
				Match(input,Integer,Follow._Integer_in_synpred79_Php1171); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(168); }


			}

		}
		finally
		{
			TraceOut("synpred79_Php_fragment", 159);
			LeaveRule("synpred79_Php_fragment", 159);
			LeaveRule_synpred79_Php_fragment();
		}
	}
	// $ANTLR end synpred79_Php

	partial void EnterRule_synpred80_Php_fragment();
	partial void LeaveRule_synpred80_Php_fragment();

	// $ANTLR start synpred80_Php
	private void synpred80_Php_fragment()
	{
		EnterRule_synpred80_Php_fragment();
		EnterRule("synpred80_Php_fragment", 160);
		var retval = new Antlr3CstNode("synpred80_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:213:4: ( Goto UnquotedString )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:213:4: Goto UnquotedString
			{
			DebugLocation(213, 4);
			Match(input,Goto,Follow._Goto_in_synpred80_Php1177); if (state.failed) return;
			DebugLocation(213, 9);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred80_Php1179); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred80_Php_fragment", 160);
			LeaveRule("synpred80_Php_fragment", 160);
			LeaveRule_synpred80_Php_fragment();
		}
	}
	// $ANTLR end synpred80_Php

	partial void EnterRule_synpred82_Php_fragment();
	partial void LeaveRule_synpred82_Php_fragment();

	// $ANTLR start synpred82_Php
	private void synpred82_Php_fragment()
	{
		EnterRule_synpred82_Php_fragment();
		EnterRule("synpred82_Php_fragment", 162);
		var retval = new Antlr3CstNode("synpred82_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:214:4: ( Return ( expression )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:214:4: Return ( expression )?
			{
			DebugLocation(214, 4);
			Match(input,Return,Follow._Return_in_synpred82_Php1184); if (state.failed) return;
			DebugLocation(214, 11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:214:11: ( expression )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, false);
			int LA169_1 = input.LA(1);

			if (((LA169_1>=Abstract && LA169_1<=And)||(LA169_1>=ArrayType && LA169_1<=As)||LA169_1==Bang||(LA169_1>=BoolType && LA169_1<=Class)||LA169_1==Clone||(LA169_1>=Const && LA169_1<=Continue)||(LA169_1>=Default && LA169_1<=Die)||LA169_1==Do||(LA169_1>=DoubleQuotedString && LA169_1<=Empty)||(LA169_1>=Eval && LA169_1<=Exit)||(LA169_1>=Extends && LA169_1<=Foreach)||(LA169_1>=Function && LA169_1<=HaltCompiler)||LA169_1==HereDoc||(LA169_1>=If && LA169_1<=IncrementOperator)||(LA169_1>=Instanceof && LA169_1<=List)||LA169_1==Minus||(LA169_1>=Namespace && LA169_1<=Null)||LA169_1==ObjectType||(LA169_1>=OpenRoundBracket && LA169_1<=Or)||(LA169_1>=Plus && LA169_1<=Public)||(LA169_1>=Real && LA169_1<=Return)||LA169_1==SingleQuotedString||(LA169_1>=Static && LA169_1<=Try)||LA169_1==UnquotedString||(LA169_1>=UnsetType && LA169_1<=While)||(LA169_1>=Xor && LA169_1<=130)))
			{
				alt169 = 1;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:214:11: expression
				{
				DebugLocation(214, 11);
				PushFollow(Follow._expression_in_synpred82_Php1186);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(169); }


			}

		}
		finally
		{
			TraceOut("synpred82_Php_fragment", 162);
			LeaveRule("synpred82_Php_fragment", 162);
			LeaveRule_synpred82_Php_fragment();
		}
	}
	// $ANTLR end synpred82_Php

	partial void EnterRule_synpred83_Php_fragment();
	partial void LeaveRule_synpred83_Php_fragment();

	// $ANTLR start synpred83_Php
	private void synpred83_Php_fragment()
	{
		EnterRule_synpred83_Php_fragment();
		EnterRule("synpred83_Php_fragment", 163);
		var retval = new Antlr3CstNode("synpred83_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:215:4: ( Goto UnquotedString )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:215:4: Goto UnquotedString
			{
			DebugLocation(215, 4);
			Match(input,Goto,Follow._Goto_in_synpred83_Php1192); if (state.failed) return;
			DebugLocation(215, 9);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred83_Php1194); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred83_Php_fragment", 163);
			LeaveRule("synpred83_Php_fragment", 163);
			LeaveRule_synpred83_Php_fragment();
		}
	}
	// $ANTLR end synpred83_Php

	partial void EnterRule_synpred84_Php_fragment();
	partial void LeaveRule_synpred84_Php_fragment();

	// $ANTLR start synpred84_Php
	private void synpred84_Php_fragment()
	{
		EnterRule_synpred84_Php_fragment();
		EnterRule("synpred84_Php_fragment", 164);
		var retval = new Antlr3CstNode("synpred84_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:216:4: ( Throw expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:216:4: Throw expression
			{
			DebugLocation(216, 4);
			Match(input,Throw,Follow._Throw_in_synpred84_Php1199); if (state.failed) return;
			DebugLocation(216, 10);
			PushFollow(Follow._expression_in_synpred84_Php1201);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred84_Php_fragment", 164);
			LeaveRule("synpred84_Php_fragment", 164);
			LeaveRule_synpred84_Php_fragment();
		}
	}
	// $ANTLR end synpred84_Php

	partial void EnterRule_synpred85_Php_fragment();
	partial void LeaveRule_synpred85_Php_fragment();

	// $ANTLR start synpred85_Php
	private void synpred85_Php_fragment()
	{
		EnterRule_synpred85_Php_fragment();
		EnterRule("synpred85_Php_fragment", 165);
		var retval = new Antlr3CstNode("synpred85_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:221:40: ( conditional )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:221:40: conditional
			{
			DebugLocation(221, 40);
			PushFollow(Follow._conditional_in_synpred85_Php1227);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred85_Php_fragment", 165);
			LeaveRule("synpred85_Php_fragment", 165);
			LeaveRule_synpred85_Php_fragment();
		}
	}
	// $ANTLR end synpred85_Php

	partial void EnterRule_synpred87_Php_fragment();
	partial void LeaveRule_synpred87_Php_fragment();

	// $ANTLR start synpred87_Php
	private void synpred87_Php_fragment()
	{
		EnterRule_synpred87_Php_fragment();
		EnterRule("synpred87_Php_fragment", 167);
		var retval = new Antlr3CstNode("synpred87_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:226:34: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:226:34: statement
			{
			DebugLocation(226, 34);
			PushFollow(Follow._statement_in_synpred87_Php1256);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred87_Php_fragment", 167);
			LeaveRule("synpred87_Php_fragment", 167);
			LeaveRule_synpred87_Php_fragment();
		}
	}
	// $ANTLR end synpred87_Php

	partial void EnterRule_synpred88_Php_fragment();
	partial void LeaveRule_synpred88_Php_fragment();

	// $ANTLR start synpred88_Php
	private void synpred88_Php_fragment()
	{
		EnterRule_synpred88_Php_fragment();
		EnterRule("synpred88_Php_fragment", 168);
		var retval = new Antlr3CstNode("synpred88_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:226:45: ( conditionalWithColon )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:226:45: conditionalWithColon
			{
			DebugLocation(226, 45);
			PushFollow(Follow._conditionalWithColon_in_synpred88_Php1259);
			conditionalWithColon();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred88_Php_fragment", 168);
			LeaveRule("synpred88_Php_fragment", 168);
			LeaveRule_synpred88_Php_fragment();
		}
	}
	// $ANTLR end synpred88_Php

	partial void EnterRule_synpred90_Php_fragment();
	partial void LeaveRule_synpred90_Php_fragment();

	// $ANTLR start synpred90_Php
	private void synpred90_Php_fragment()
	{
		EnterRule_synpred90_Php_fragment();
		EnterRule("synpred90_Php_fragment", 170);
		var retval = new Antlr3CstNode("synpred90_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:227:13: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:227:13: statement
			{
			DebugLocation(227, 13);
			PushFollow(Follow._statement_in_synpred90_Php1269);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred90_Php_fragment", 170);
			LeaveRule("synpred90_Php_fragment", 170);
			LeaveRule_synpred90_Php_fragment();
		}
	}
	// $ANTLR end synpred90_Php

	partial void EnterRule_synpred96_Php_fragment();
	partial void LeaveRule_synpred96_Php_fragment();

	// $ANTLR start synpred96_Php
	private void synpred96_Php_fragment()
	{
		EnterRule_synpred96_Php_fragment();
		EnterRule("synpred96_Php_fragment", 176);
		var retval = new Antlr3CstNode("synpred96_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:4: ( ( casestatement )* defaultcase ( casestatement )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:4: ( casestatement )* defaultcase ( casestatement )*
			{
			DebugLocation(243, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:4: ( casestatement )*
			try { DebugEnterSubRule(173);
			while (true)
			{
				int alt173=2;
				try { DebugEnterDecision(173, false);
				int LA173_1 = input.LA(1);

				if ((LA173_1==Case))
				{
					alt173 = 1;
				}


				} finally { DebugExitDecision(173); }
				switch ( alt173 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:4: casestatement
					{
					DebugLocation(243, 4);
					PushFollow(Follow._casestatement_in_synpred96_Php1322);
					casestatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop173;
				}
			}

			loop173:
				;

			} finally { DebugExitSubRule(173); }

			DebugLocation(243, 19);
			PushFollow(Follow._defaultcase_in_synpred96_Php1325);
			defaultcase();
			PopFollow();
			if (state.failed) return;
			DebugLocation(243, 31);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:31: ( casestatement )*
			try { DebugEnterSubRule(174);
			while (true)
			{
				int alt174=2;
				try { DebugEnterDecision(174, false);
				int LA174_1 = input.LA(1);

				if ((LA174_1==Case))
				{
					alt174 = 1;
				}


				} finally { DebugExitDecision(174); }
				switch ( alt174 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:243:31: casestatement
					{
					DebugLocation(243, 31);
					PushFollow(Follow._casestatement_in_synpred96_Php1327);
					casestatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop174;
				}
			}

			loop174:
				;

			} finally { DebugExitSubRule(174); }


			}

		}
		finally
		{
			TraceOut("synpred96_Php_fragment", 176);
			LeaveRule("synpred96_Php_fragment", 176);
			LeaveRule_synpred96_Php_fragment();
		}
	}
	// $ANTLR end synpred96_Php

	partial void EnterRule_synpred99_Php_fragment();
	partial void LeaveRule_synpred99_Php_fragment();

	// $ANTLR start synpred99_Php
	private void synpred99_Php_fragment()
	{
		EnterRule_synpred99_Php_fragment();
		EnterRule("synpred99_Php_fragment", 179);
		var retval = new Antlr3CstNode("synpred99_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:248:30: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:248:30: statement
			{
			DebugLocation(248, 30);
			PushFollow(Follow._statement_in_synpred99_Php1355);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Php_fragment", 179);
			LeaveRule("synpred99_Php_fragment", 179);
			LeaveRule_synpred99_Php_fragment();
		}
	}
	// $ANTLR end synpred99_Php

	partial void EnterRule_synpred101_Php_fragment();
	partial void LeaveRule_synpred101_Php_fragment();

	// $ANTLR start synpred101_Php
	private void synpred101_Php_fragment()
	{
		EnterRule_synpred101_Php_fragment();
		EnterRule("synpred101_Php_fragment", 181);
		var retval = new Antlr3CstNode("synpred101_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:252:23: ( statement )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:252:23: statement
			{
			DebugLocation(252, 23);
			PushFollow(Follow._statement_in_synpred101_Php1377);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred101_Php_fragment", 181);
			LeaveRule("synpred101_Php_fragment", 181);
			LeaveRule_synpred101_Php_fragment();
		}
	}
	// $ANTLR end synpred101_Php

	partial void EnterRule_synpred106_Php_fragment();
	partial void LeaveRule_synpred106_Php_fragment();

	// $ANTLR start synpred106_Php
	private void synpred106_Php_fragment()
	{
		EnterRule_synpred106_Php_fragment();
		EnterRule("synpred106_Php_fragment", 186);
		var retval = new Antlr3CstNode("synpred106_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:5: ( primitiveType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:5: primitiveType
			{
			DebugLocation(268, 5);
			PushFollow(Follow._primitiveType_in_synpred106_Php1458);
			primitiveType();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred106_Php_fragment", 186);
			LeaveRule("synpred106_Php_fragment", 186);
			LeaveRule_synpred106_Php_fragment();
		}
	}
	// $ANTLR end synpred106_Php

	partial void EnterRule_synpred107_Php_fragment();
	partial void LeaveRule_synpred107_Php_fragment();

	// $ANTLR start synpred107_Php
	private void synpred107_Php_fragment()
	{
		EnterRule_synpred107_Php_fragment();
		EnterRule("synpred107_Php_fragment", 187);
		var retval = new Antlr3CstNode("synpred107_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:21: ( qualifiedName )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:268:21: qualifiedName
			{
			DebugLocation(268, 21);
			PushFollow(Follow._qualifiedName_in_synpred107_Php1462);
			qualifiedName();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred107_Php_fragment", 187);
			LeaveRule("synpred107_Php_fragment", 187);
			LeaveRule_synpred107_Php_fragment();
		}
	}
	// $ANTLR end synpred107_Php

	partial void EnterRule_synpred111_Php_fragment();
	partial void LeaveRule_synpred111_Php_fragment();

	// $ANTLR start synpred111_Php
	private void synpred111_Php_fragment()
	{
		EnterRule_synpred111_Php_fragment();
		EnterRule("synpred111_Php_fragment", 191);
		var retval = new Antlr3CstNode("synpred111_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:285:20: ( Or weakLogicalXor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:285:20: Or weakLogicalXor
			{
			DebugLocation(285, 20);
			Match(input,Or,Follow._Or_in_synpred111_Php1536); if (state.failed) return;
			DebugLocation(285, 23);
			PushFollow(Follow._weakLogicalXor_in_synpred111_Php1538);
			weakLogicalXor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred111_Php_fragment", 191);
			LeaveRule("synpred111_Php_fragment", 191);
			LeaveRule_synpred111_Php_fragment();
		}
	}
	// $ANTLR end synpred111_Php

	partial void EnterRule_synpred112_Php_fragment();
	partial void LeaveRule_synpred112_Php_fragment();

	// $ANTLR start synpred112_Php
	private void synpred112_Php_fragment()
	{
		EnterRule_synpred112_Php_fragment();
		EnterRule("synpred112_Php_fragment", 192);
		var retval = new Antlr3CstNode("synpred112_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:289:20: ( Xor weakLogicalAnd )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:289:20: Xor weakLogicalAnd
			{
			DebugLocation(289, 20);
			Match(input,Xor,Follow._Xor_in_synpred112_Php1554); if (state.failed) return;
			DebugLocation(289, 24);
			PushFollow(Follow._weakLogicalAnd_in_synpred112_Php1556);
			weakLogicalAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred112_Php_fragment", 192);
			LeaveRule("synpred112_Php_fragment", 192);
			LeaveRule_synpred112_Php_fragment();
		}
	}
	// $ANTLR end synpred112_Php

	partial void EnterRule_synpred113_Php_fragment();
	partial void LeaveRule_synpred113_Php_fragment();

	// $ANTLR start synpred113_Php
	private void synpred113_Php_fragment()
	{
		EnterRule_synpred113_Php_fragment();
		EnterRule("synpred113_Php_fragment", 193);
		var retval = new Antlr3CstNode("synpred113_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:293:16: ( And assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:293:16: And assignment
			{
			DebugLocation(293, 16);
			Match(input,And,Follow._And_in_synpred113_Php1573); if (state.failed) return;
			DebugLocation(293, 20);
			PushFollow(Follow._assignment_in_synpred113_Php1575);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred113_Php_fragment", 193);
			LeaveRule("synpred113_Php_fragment", 193);
			LeaveRule_synpred113_Php_fragment();
		}
	}
	// $ANTLR end synpred113_Php

	partial void EnterRule_synpred115_Php_fragment();
	partial void LeaveRule_synpred115_Php_fragment();

	// $ANTLR start synpred115_Php
	private void synpred115_Php_fragment()
	{
		EnterRule_synpred115_Php_fragment();
		EnterRule("synpred115_Php_fragment", 195);
		var retval = new Antlr3CstNode("synpred115_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:4: ( listVariables ( Equals | AsignmentOperator ) assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:297:4: listVariables ( Equals | AsignmentOperator ) assignment
			{
			DebugLocation(297, 4);
			PushFollow(Follow._listVariables_in_synpred115_Php1588);
			listVariables();
			PopFollow();
			if (state.failed) return;
			DebugLocation(297, 18);
			if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(297, 47);
			PushFollow(Follow._assignment_in_synpred115_Php1598);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred115_Php_fragment", 195);
			LeaveRule("synpred115_Php_fragment", 195);
			LeaveRule_synpred115_Php_fragment();
		}
	}
	// $ANTLR end synpred115_Php

	partial void EnterRule_synpred119_Php_fragment();
	partial void LeaveRule_synpred119_Php_fragment();

	// $ANTLR start synpred119_Php
	private void synpred119_Php_fragment()
	{
		EnterRule_synpred119_Php_fragment();
		EnterRule("synpred119_Php_fragment", 199);
		var retval = new Antlr3CstNode("synpred119_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:4: ( List OpenRoundBracket ( name )? ( ',' ( name )? )* CloseRoundBracket )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:4: List OpenRoundBracket ( name )? ( ',' ( name )? )* CloseRoundBracket
			{
			DebugLocation(302, 4);
			Match(input,List,Follow._List_in_synpred119_Php1614); if (state.failed) return;
			DebugLocation(302, 9);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred119_Php1616); if (state.failed) return;
			DebugLocation(302, 26);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:26: ( name )?
			int alt177=2;
			try { DebugEnterSubRule(177);
			try { DebugEnterDecision(177, false);
			int LA177_1 = input.LA(1);

			if ((LA177_1==Abstract||LA177_1==And||LA177_1==As||(LA177_1>=BoolType && LA177_1<=Class)||LA177_1==Clone||(LA177_1>=Const && LA177_1<=Continue)||(LA177_1>=Default && LA177_1<=Die)||LA177_1==Do||(LA177_1>=DoubleType && LA177_1<=Empty)||(LA177_1>=Eval && LA177_1<=Exit)||(LA177_1>=Extends && LA177_1<=Foreach)||(LA177_1>=Function && LA177_1<=HaltCompiler)||(LA177_1>=If && LA177_1<=IncludeOnce)||(LA177_1>=Instanceof && LA177_1<=IntType)||(LA177_1>=IntegerType && LA177_1<=List)||(LA177_1>=Namespace && LA177_1<=Null)||LA177_1==ObjectType||LA177_1==Or||(LA177_1>=Print && LA177_1<=Public)||(LA177_1>=RealType && LA177_1<=Return)||(LA177_1>=Static && LA177_1<=StringType)||(LA177_1>=Switch && LA177_1<=Throw)||(LA177_1>=True && LA177_1<=Try)||LA177_1==UnquotedString||(LA177_1>=Use && LA177_1<=While)||(LA177_1>=Xor && LA177_1<=130)))
			{
				alt177 = 1;
			}
			} finally { DebugExitDecision(177); }
			switch (alt177)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:26: name
				{
				DebugLocation(302, 26);
				PushFollow(Follow._name_in_synpred119_Php1618);
				name();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(177); }

			DebugLocation(302, 32);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:32: ( ',' ( name )? )*
			try { DebugEnterSubRule(179);
			while (true)
			{
				int alt179=2;
				try { DebugEnterDecision(179, false);
				int LA179_1 = input.LA(1);

				if ((LA179_1==Comma))
				{
					alt179 = 1;
				}


				} finally { DebugExitDecision(179); }
				switch ( alt179 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:33: ',' ( name )?
					{
					DebugLocation(302, 33);
					Match(input,Comma,Follow._Comma_in_synpred119_Php1622); if (state.failed) return;
					DebugLocation(302, 37);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:37: ( name )?
					int alt178=2;
					try { DebugEnterSubRule(178);
					try { DebugEnterDecision(178, false);
					int LA178_1 = input.LA(1);

					if ((LA178_1==Abstract||LA178_1==And||LA178_1==As||(LA178_1>=BoolType && LA178_1<=Class)||LA178_1==Clone||(LA178_1>=Const && LA178_1<=Continue)||(LA178_1>=Default && LA178_1<=Die)||LA178_1==Do||(LA178_1>=DoubleType && LA178_1<=Empty)||(LA178_1>=Eval && LA178_1<=Exit)||(LA178_1>=Extends && LA178_1<=Foreach)||(LA178_1>=Function && LA178_1<=HaltCompiler)||(LA178_1>=If && LA178_1<=IncludeOnce)||(LA178_1>=Instanceof && LA178_1<=IntType)||(LA178_1>=IntegerType && LA178_1<=List)||(LA178_1>=Namespace && LA178_1<=Null)||LA178_1==ObjectType||LA178_1==Or||(LA178_1>=Print && LA178_1<=Public)||(LA178_1>=RealType && LA178_1<=Return)||(LA178_1>=Static && LA178_1<=StringType)||(LA178_1>=Switch && LA178_1<=Throw)||(LA178_1>=True && LA178_1<=Try)||LA178_1==UnquotedString||(LA178_1>=Use && LA178_1<=While)||(LA178_1>=Xor && LA178_1<=130)))
					{
						alt178 = 1;
					}
					} finally { DebugExitDecision(178); }
					switch (alt178)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:302:37: name
						{
						DebugLocation(302, 37);
						PushFollow(Follow._name_in_synpred119_Php1624);
						name();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(178); }


					}
					break;

				default:
					goto loop179;
				}
			}

			loop179:
				;

			} finally { DebugExitSubRule(179); }

			DebugLocation(302, 45);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred119_Php1629); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred119_Php_fragment", 199);
			LeaveRule("synpred119_Php_fragment", 199);
			LeaveRule_synpred119_Php_fragment();
		}
	}
	// $ANTLR end synpred119_Php

	partial void EnterRule_synpred121_Php_fragment();
	partial void LeaveRule_synpred121_Php_fragment();

	// $ANTLR start synpred121_Php
	private void synpred121_Php_fragment()
	{
		EnterRule_synpred121_Php_fragment();
		EnterRule("synpred121_Php_fragment", 201);
		var retval = new Antlr3CstNode("synpred121_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:307:4: ( logicalOr QuestionMark ( expression )? Colon expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:307:4: logicalOr QuestionMark ( expression )? Colon expression
			{
			DebugLocation(307, 4);
			PushFollow(Follow._logicalOr_in_synpred121_Php1646);
			logicalOr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(307, 14);
			Match(input,QuestionMark,Follow._QuestionMark_in_synpred121_Php1648); if (state.failed) return;
			DebugLocation(307, 27);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:307:27: ( expression )?
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			int LA180_1 = input.LA(1);

			if (((LA180_1>=Abstract && LA180_1<=And)||(LA180_1>=ArrayType && LA180_1<=As)||LA180_1==Bang||(LA180_1>=BoolType && LA180_1<=Class)||LA180_1==Clone||(LA180_1>=Const && LA180_1<=Continue)||(LA180_1>=Default && LA180_1<=Die)||LA180_1==Do||(LA180_1>=DoubleQuotedString && LA180_1<=Empty)||(LA180_1>=Eval && LA180_1<=Exit)||(LA180_1>=Extends && LA180_1<=Foreach)||(LA180_1>=Function && LA180_1<=HaltCompiler)||LA180_1==HereDoc||(LA180_1>=If && LA180_1<=IncrementOperator)||(LA180_1>=Instanceof && LA180_1<=List)||LA180_1==Minus||(LA180_1>=Namespace && LA180_1<=Null)||LA180_1==ObjectType||(LA180_1>=OpenRoundBracket && LA180_1<=Or)||(LA180_1>=Plus && LA180_1<=Public)||(LA180_1>=Real && LA180_1<=Return)||LA180_1==SingleQuotedString||(LA180_1>=Static && LA180_1<=Try)||LA180_1==UnquotedString||(LA180_1>=UnsetType && LA180_1<=While)||(LA180_1>=Xor && LA180_1<=130)))
			{
				alt180 = 1;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:307:27: expression
				{
				DebugLocation(307, 27);
				PushFollow(Follow._expression_in_synpred121_Php1650);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(180); }

			DebugLocation(307, 39);
			Match(input,Colon,Follow._Colon_in_synpred121_Php1653); if (state.failed) return;
			DebugLocation(307, 45);
			PushFollow(Follow._expression_in_synpred121_Php1655);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_Php_fragment", 201);
			LeaveRule("synpred121_Php_fragment", 201);
			LeaveRule_synpred121_Php_fragment();
		}
	}
	// $ANTLR end synpred121_Php

	partial void EnterRule_synpred122_Php_fragment();
	partial void LeaveRule_synpred122_Php_fragment();

	// $ANTLR start synpred122_Php
	private void synpred122_Php_fragment()
	{
		EnterRule_synpred122_Php_fragment();
		EnterRule("synpred122_Php_fragment", 202);
		var retval = new Antlr3CstNode("synpred122_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:312:16: ( LogicalOr logicalAnd )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:312:16: LogicalOr logicalAnd
			{
			DebugLocation(312, 16);
			Match(input,LogicalOr,Follow._LogicalOr_in_synpred122_Php1675); if (state.failed) return;
			DebugLocation(312, 26);
			PushFollow(Follow._logicalAnd_in_synpred122_Php1677);
			logicalAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred122_Php_fragment", 202);
			LeaveRule("synpred122_Php_fragment", 202);
			LeaveRule_synpred122_Php_fragment();
		}
	}
	// $ANTLR end synpred122_Php

	partial void EnterRule_synpred123_Php_fragment();
	partial void LeaveRule_synpred123_Php_fragment();

	// $ANTLR start synpred123_Php
	private void synpred123_Php_fragment()
	{
		EnterRule_synpred123_Php_fragment();
		EnterRule("synpred123_Php_fragment", 203);
		var retval = new Antlr3CstNode("synpred123_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:316:15: ( LogicalAnd bitwiseOr )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:316:15: LogicalAnd bitwiseOr
			{
			DebugLocation(316, 15);
			Match(input,LogicalAnd,Follow._LogicalAnd_in_synpred123_Php1693); if (state.failed) return;
			DebugLocation(316, 26);
			PushFollow(Follow._bitwiseOr_in_synpred123_Php1695);
			bitwiseOr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred123_Php_fragment", 203);
			LeaveRule("synpred123_Php_fragment", 203);
			LeaveRule_synpred123_Php_fragment();
		}
	}
	// $ANTLR end synpred123_Php

	partial void EnterRule_synpred124_Php_fragment();
	partial void LeaveRule_synpred124_Php_fragment();

	// $ANTLR start synpred124_Php
	private void synpred124_Php_fragment()
	{
		EnterRule_synpred124_Php_fragment();
		EnterRule("synpred124_Php_fragment", 204);
		var retval = new Antlr3CstNode("synpred124_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:320:16: ( Pipe bitwiseXor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:320:16: Pipe bitwiseXor
			{
			DebugLocation(320, 16);
			Match(input,Pipe,Follow._Pipe_in_synpred124_Php1712); if (state.failed) return;
			DebugLocation(320, 21);
			PushFollow(Follow._bitwiseXor_in_synpred124_Php1714);
			bitwiseXor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred124_Php_fragment", 204);
			LeaveRule("synpred124_Php_fragment", 204);
			LeaveRule_synpred124_Php_fragment();
		}
	}
	// $ANTLR end synpred124_Php

	partial void EnterRule_synpred125_Php_fragment();
	partial void LeaveRule_synpred125_Php_fragment();

	// $ANTLR start synpred125_Php
	private void synpred125_Php_fragment()
	{
		EnterRule_synpred125_Php_fragment();
		EnterRule("synpred125_Php_fragment", 205);
		var retval = new Antlr3CstNode("synpred125_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:324:16: ( Hat bitWiseAnd )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:324:16: Hat bitWiseAnd
			{
			DebugLocation(324, 16);
			Match(input,Hat,Follow._Hat_in_synpred125_Php1731); if (state.failed) return;
			DebugLocation(324, 20);
			PushFollow(Follow._bitWiseAnd_in_synpred125_Php1733);
			bitWiseAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred125_Php_fragment", 205);
			LeaveRule("synpred125_Php_fragment", 205);
			LeaveRule_synpred125_Php_fragment();
		}
	}
	// $ANTLR end synpred125_Php

	partial void EnterRule_synpred126_Php_fragment();
	partial void LeaveRule_synpred126_Php_fragment();

	// $ANTLR start synpred126_Php
	private void synpred126_Php_fragment()
	{
		EnterRule_synpred126_Php_fragment();
		EnterRule("synpred126_Php_fragment", 206);
		var retval = new Antlr3CstNode("synpred126_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:328:19: ( Ampersand equalityCheck )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:328:19: Ampersand equalityCheck
			{
			DebugLocation(328, 19);
			Match(input,Ampersand,Follow._Ampersand_in_synpred126_Php1749); if (state.failed) return;
			DebugLocation(328, 29);
			PushFollow(Follow._equalityCheck_in_synpred126_Php1751);
			equalityCheck();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred126_Php_fragment", 206);
			LeaveRule("synpred126_Php_fragment", 206);
			LeaveRule_synpred126_Php_fragment();
		}
	}
	// $ANTLR end synpred126_Php

	partial void EnterRule_synpred127_Php_fragment();
	partial void LeaveRule_synpred127_Php_fragment();

	// $ANTLR start synpred127_Php
	private void synpred127_Php_fragment()
	{
		EnterRule_synpred127_Php_fragment();
		EnterRule("synpred127_Php_fragment", 207);
		var retval = new Antlr3CstNode("synpred127_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:332:22: ( EqualityOperator comparisionCheck )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:332:22: EqualityOperator comparisionCheck
			{
			DebugLocation(332, 22);
			Match(input,EqualityOperator,Follow._EqualityOperator_in_synpred127_Php1767); if (state.failed) return;
			DebugLocation(332, 39);
			PushFollow(Follow._comparisionCheck_in_synpred127_Php1769);
			comparisionCheck();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred127_Php_fragment", 207);
			LeaveRule("synpred127_Php_fragment", 207);
			LeaveRule_synpred127_Php_fragment();
		}
	}
	// $ANTLR end synpred127_Php

	partial void EnterRule_synpred128_Php_fragment();
	partial void LeaveRule_synpred128_Php_fragment();

	// $ANTLR start synpred128_Php
	private void synpred128_Php_fragment()
	{
		EnterRule_synpred128_Php_fragment();
		EnterRule("synpred128_Php_fragment", 208);
		var retval = new Antlr3CstNode("synpred128_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:336:18: ( ComparisionOperator bitWiseShift )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:336:18: ComparisionOperator bitWiseShift
			{
			DebugLocation(336, 18);
			Match(input,ComparisionOperator,Follow._ComparisionOperator_in_synpred128_Php1786); if (state.failed) return;
			DebugLocation(336, 38);
			PushFollow(Follow._bitWiseShift_in_synpred128_Php1788);
			bitWiseShift();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred128_Php_fragment", 208);
			LeaveRule("synpred128_Php_fragment", 208);
			LeaveRule_synpred128_Php_fragment();
		}
	}
	// $ANTLR end synpred128_Php

	partial void EnterRule_synpred129_Php_fragment();
	partial void LeaveRule_synpred129_Php_fragment();

	// $ANTLR start synpred129_Php
	private void synpred129_Php_fragment()
	{
		EnterRule_synpred129_Php_fragment();
		EnterRule("synpred129_Php_fragment", 209);
		var retval = new Antlr3CstNode("synpred129_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:340:14: ( ShiftOperator addition )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:340:14: ShiftOperator addition
			{
			DebugLocation(340, 14);
			Match(input,ShiftOperator,Follow._ShiftOperator_in_synpred129_Php1804); if (state.failed) return;
			DebugLocation(340, 28);
			PushFollow(Follow._addition_in_synpred129_Php1806);
			addition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred129_Php_fragment", 209);
			LeaveRule("synpred129_Php_fragment", 209);
			LeaveRule_synpred129_Php_fragment();
		}
	}
	// $ANTLR end synpred129_Php

	partial void EnterRule_synpred132_Php_fragment();
	partial void LeaveRule_synpred132_Php_fragment();

	// $ANTLR start synpred132_Php
	private void synpred132_Php_fragment()
	{
		EnterRule_synpred132_Php_fragment();
		EnterRule("synpred132_Php_fragment", 212);
		var retval = new Antlr3CstNode("synpred132_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:344:20: ( ( Plus | Minus | Dot ) multiplication )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:344:20: ( Plus | Minus | Dot ) multiplication
			{
			DebugLocation(344, 20);
			if (input.LA(1)==Dot||input.LA(1)==Minus||input.LA(1)==Plus)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(344, 41);
			PushFollow(Follow._multiplication_in_synpred132_Php1835);
			multiplication();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred132_Php_fragment", 212);
			LeaveRule("synpred132_Php_fragment", 212);
			LeaveRule_synpred132_Php_fragment();
		}
	}
	// $ANTLR end synpred132_Php

	partial void EnterRule_synpred135_Php_fragment();
	partial void LeaveRule_synpred135_Php_fragment();

	// $ANTLR start synpred135_Php
	private void synpred135_Php_fragment()
	{
		EnterRule_synpred135_Php_fragment();
		EnterRule("synpred135_Php_fragment", 215);
		var retval = new Antlr3CstNode("synpred135_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:348:16: ( ( Asterisk | Forwardslash | Percent ) logicalNot )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:348:16: ( Asterisk | Forwardslash | Percent ) logicalNot
			{
			DebugLocation(348, 16);
			if (input.LA(1)==Asterisk||input.LA(1)==Forwardslash||input.LA(1)==Percent)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(348, 52);
			PushFollow(Follow._logicalNot_in_synpred135_Php1863);
			logicalNot();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred135_Php_fragment", 215);
			LeaveRule("synpred135_Php_fragment", 215);
			LeaveRule_synpred135_Php_fragment();
		}
	}
	// $ANTLR end synpred135_Php

	partial void EnterRule_synpred137_Php_fragment();
	partial void LeaveRule_synpred137_Php_fragment();

	// $ANTLR start synpred137_Php
	private void synpred137_Php_fragment()
	{
		EnterRule_synpred137_Php_fragment();
		EnterRule("synpred137_Php_fragment", 217);
		var retval = new Antlr3CstNode("synpred137_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:357:18: ( Instanceof negateOrCast )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:357:18: Instanceof negateOrCast
			{
			DebugLocation(357, 18);
			Match(input,Instanceof,Follow._Instanceof_in_synpred137_Php1897); if (state.failed) return;
			DebugLocation(357, 29);
			PushFollow(Follow._negateOrCast_in_synpred137_Php1899);
			negateOrCast();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred137_Php_fragment", 217);
			LeaveRule("synpred137_Php_fragment", 217);
			LeaveRule_synpred137_Php_fragment();
		}
	}
	// $ANTLR end synpred137_Php

	partial void EnterRule_synpred140_Php_fragment();
	partial void LeaveRule_synpred140_Php_fragment();

	// $ANTLR start synpred140_Php
	private void synpred140_Php_fragment()
	{
		EnterRule_synpred140_Php_fragment();
		EnterRule("synpred140_Php_fragment", 220);
		var retval = new Antlr3CstNode("synpred140_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:361:4: ( ( Tilde | Minus | SuppressWarnings ) increment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:361:4: ( Tilde | Minus | SuppressWarnings ) increment
			{
			DebugLocation(361, 4);
			if (input.LA(1)==Minus||input.LA(1)==SuppressWarnings||input.LA(1)==Tilde)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(361, 39);
			PushFollow(Follow._increment_in_synpred140_Php1924);
			increment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred140_Php_fragment", 220);
			LeaveRule("synpred140_Php_fragment", 220);
			LeaveRule_synpred140_Php_fragment();
		}
	}
	// $ANTLR end synpred140_Php

	partial void EnterRule_synpred141_Php_fragment();
	partial void LeaveRule_synpred141_Php_fragment();

	// $ANTLR start synpred141_Php
	private void synpred141_Php_fragment()
	{
		EnterRule_synpred141_Php_fragment();
		EnterRule("synpred141_Php_fragment", 221);
		var retval = new Antlr3CstNode("synpred141_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:362:4: ( OpenRoundBracket primitiveType CloseRoundBracket increment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:362:4: OpenRoundBracket primitiveType CloseRoundBracket increment
			{
			DebugLocation(362, 4);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred141_Php1929); if (state.failed) return;
			DebugLocation(362, 21);
			PushFollow(Follow._primitiveType_in_synpred141_Php1931);
			primitiveType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(362, 35);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred141_Php1933); if (state.failed) return;
			DebugLocation(362, 53);
			PushFollow(Follow._increment_in_synpred141_Php1935);
			increment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred141_Php_fragment", 221);
			LeaveRule("synpred141_Php_fragment", 221);
			LeaveRule_synpred141_Php_fragment();
		}
	}
	// $ANTLR end synpred141_Php

	partial void EnterRule_synpred153_Php_fragment();
	partial void LeaveRule_synpred153_Php_fragment();

	// $ANTLR start synpred153_Php
	private void synpred153_Php_fragment()
	{
		EnterRule_synpred153_Php_fragment();
		EnterRule("synpred153_Php_fragment", 233);
		var retval = new Antlr3CstNode("synpred153_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:4: ( name IncrementOperator )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:373:4: name IncrementOperator
			{
			DebugLocation(373, 4);
			PushFollow(Follow._name_in_synpred153_Php2010);
			name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(373, 9);
			Match(input,IncrementOperator,Follow._IncrementOperator_in_synpred153_Php2012); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred153_Php_fragment", 233);
			LeaveRule("synpred153_Php_fragment", 233);
			LeaveRule_synpred153_Php_fragment();
		}
	}
	// $ANTLR end synpred153_Php

	partial void EnterRule_synpred155_Php_fragment();
	partial void LeaveRule_synpred155_Php_fragment();

	// $ANTLR start synpred155_Php
	private void synpred155_Php_fragment()
	{
		EnterRule_synpred155_Php_fragment();
		EnterRule("synpred155_Php_fragment", 235);
		var retval = new Antlr3CstNode("synpred155_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:4: ( listVariables ( Equals | AsignmentOperator ) assignment )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:374:4: listVariables ( Equals | AsignmentOperator ) assignment
			{
			DebugLocation(374, 4);
			PushFollow(Follow._listVariables_in_synpred155_Php2017);
			listVariables();
			PopFollow();
			if (state.failed) return;
			DebugLocation(374, 18);
			if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(374, 47);
			PushFollow(Follow._assignment_in_synpred155_Php2027);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred155_Php_fragment", 235);
			LeaveRule("synpred155_Php_fragment", 235);
			LeaveRule_synpred155_Php_fragment();
		}
	}
	// $ANTLR end synpred155_Php

	partial void EnterRule_synpred156_Php_fragment();
	partial void LeaveRule_synpred156_Php_fragment();

	// $ANTLR start synpred156_Php
	private void synpred156_Php_fragment()
	{
		EnterRule_synpred156_Php_fragment();
		EnterRule("synpred156_Php_fragment", 236);
		var retval = new Antlr3CstNode("synpred156_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:375:4: ( newOrClone )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:375:4: newOrClone
			{
			DebugLocation(375, 4);
			PushFollow(Follow._newOrClone_in_synpred156_Php2032);
			newOrClone();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred156_Php_fragment", 236);
			LeaveRule("synpred156_Php_fragment", 236);
			LeaveRule_synpred156_Php_fragment();
		}
	}
	// $ANTLR end synpred156_Php

	partial void EnterRule_synpred157_Php_fragment();
	partial void LeaveRule_synpred157_Php_fragment();

	// $ANTLR start synpred157_Php
	private void synpred157_Php_fragment()
	{
		EnterRule_synpred157_Php_fragment();
		EnterRule("synpred157_Php_fragment", 237);
		var retval = new Antlr3CstNode("synpred157_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:9: ( nameOrFunctionCall )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:9: nameOrFunctionCall
			{
			DebugLocation(383, 9);
			PushFollow(Follow._nameOrFunctionCall_in_synpred157_Php2066);
			nameOrFunctionCall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred157_Php_fragment", 237);
			LeaveRule("synpred157_Php_fragment", 237);
			LeaveRule_synpred157_Php_fragment();
		}
	}
	// $ANTLR end synpred157_Php

	partial void EnterRule_synpred158_Php_fragment();
	partial void LeaveRule_synpred158_Php_fragment();

	// $ANTLR start synpred158_Php
	private void synpred158_Php_fragment()
	{
		EnterRule_synpred158_Php_fragment();
		EnterRule("synpred158_Php_fragment", 238);
		var retval = new Antlr3CstNode("synpred158_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:4: ( New ( nameOrFunctionCall | constantOrStaticAccessor ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:4: New ( nameOrFunctionCall | constantOrStaticAccessor )
			{
			DebugLocation(383, 4);
			Match(input,New,Follow._New_in_synpred158_Php2063); if (state.failed) return;
			DebugLocation(383, 8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:8: ( nameOrFunctionCall | constantOrStaticAccessor )
			int alt181=2;
			try { DebugEnterSubRule(181);
			try { DebugEnterDecision(181, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA181_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Php_fragment)))
				{
					alt181 = 1;
				}
				else if ((true))
				{
					alt181 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 181, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA181_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Php_fragment)))
				{
					alt181 = 1;
				}
				else if ((true))
				{
					alt181 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 181, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA181_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Php_fragment)))
				{
					alt181 = 1;
				}
				else if ((true))
				{
					alt181 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 181, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Die:
			case Empty:
			case Eval:
			case Exit:
			case HaltCompiler:
			case Isset:
				{
				int LA181_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Php_fragment)))
				{
					alt181 = 1;
				}
				else if ((true))
				{
					alt181 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 181, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Extends:
			case False:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA181_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Php_fragment)))
				{
					alt181 = 1;
				}
				else if ((true))
				{
					alt181 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 181, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UnsetType:
				{
				alt181 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 181, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(181); }
			switch (alt181)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:9: nameOrFunctionCall
				{
				DebugLocation(383, 9);
				PushFollow(Follow._nameOrFunctionCall_in_synpred158_Php2066);
				nameOrFunctionCall();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:383:30: constantOrStaticAccessor
				{
				DebugLocation(383, 30);
				PushFollow(Follow._constantOrStaticAccessor_in_synpred158_Php2070);
				constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(181); }


			}

		}
		finally
		{
			TraceOut("synpred158_Php_fragment", 238);
			LeaveRule("synpred158_Php_fragment", 238);
			LeaveRule_synpred158_Php_fragment();
		}
	}
	// $ANTLR end synpred158_Php

	partial void EnterRule_synpred159_Php_fragment();
	partial void LeaveRule_synpred159_Php_fragment();

	// $ANTLR start synpred159_Php
	private void synpred159_Php_fragment()
	{
		EnterRule_synpred159_Php_fragment();
		EnterRule("synpred159_Php_fragment", 239);
		var retval = new Antlr3CstNode("synpred159_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:384:15: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:384:15: functionArguments
			{
			DebugLocation(384, 15);
			PushFollow(Follow._functionArguments_in_synpred159_Php2080);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred159_Php_fragment", 239);
			LeaveRule("synpred159_Php_fragment", 239);
			LeaveRule_synpred159_Php_fragment();
		}
	}
	// $ANTLR end synpred159_Php

	partial void EnterRule_synpred160_Php_fragment();
	partial void LeaveRule_synpred160_Php_fragment();

	// $ANTLR start synpred160_Php
	private void synpred160_Php_fragment()
	{
		EnterRule_synpred160_Php_fragment();
		EnterRule("synpred160_Php_fragment", 240);
		var retval = new Antlr3CstNode("synpred160_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:384:4: ( New Static ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:384:4: New Static ( functionArguments )?
			{
			DebugLocation(384, 4);
			Match(input,New,Follow._New_in_synpred160_Php2076); if (state.failed) return;
			DebugLocation(384, 8);
			Match(input,Static,Follow._Static_in_synpred160_Php2078); if (state.failed) return;
			DebugLocation(384, 15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:384:15: ( functionArguments )?
			int alt182=2;
			try { DebugEnterSubRule(182);
			try { DebugEnterDecision(182, false);
			int LA182_1 = input.LA(1);

			if ((LA182_1==OpenRoundBracket))
			{
				alt182 = 1;
			}
			} finally { DebugExitDecision(182); }
			switch (alt182)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:384:15: functionArguments
				{
				DebugLocation(384, 15);
				PushFollow(Follow._functionArguments_in_synpred160_Php2080);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(182); }


			}

		}
		finally
		{
			TraceOut("synpred160_Php_fragment", 240);
			LeaveRule("synpred160_Php_fragment", 240);
			LeaveRule_synpred160_Php_fragment();
		}
	}
	// $ANTLR end synpred160_Php

	partial void EnterRule_synpred161_Php_fragment();
	partial void LeaveRule_synpred161_Php_fragment();

	// $ANTLR start synpred161_Php
	private void synpred161_Php_fragment()
	{
		EnterRule_synpred161_Php_fragment();
		EnterRule("synpred161_Php_fragment", 241);
		var retval = new Antlr3CstNode("synpred161_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:4: ( Clone name )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:385:4: Clone name
			{
			DebugLocation(385, 4);
			Match(input,Clone,Follow._Clone_in_synpred161_Php2086); if (state.failed) return;
			DebugLocation(385, 10);
			PushFollow(Follow._name_in_synpred161_Php2088);
			name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred161_Php_fragment", 241);
			LeaveRule("synpred161_Php_fragment", 241);
			LeaveRule_synpred161_Php_fragment();
		}
	}
	// $ANTLR end synpred161_Php

	partial void EnterRule_synpred163_Php_fragment();
	partial void LeaveRule_synpred163_Php_fragment();

	// $ANTLR start synpred163_Php
	private void synpred163_Php_fragment()
	{
		EnterRule_synpred163_Php_fragment();
		EnterRule("synpred163_Php_fragment", 243);
		var retval = new Antlr3CstNode("synpred163_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:392:4: ( anonymousFunctionDefinition )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:392:4: anonymousFunctionDefinition
			{
			DebugLocation(392, 4);
			PushFollow(Follow._anonymousFunctionDefinition_in_synpred163_Php2112);
			anonymousFunctionDefinition();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred163_Php_fragment", 243);
			LeaveRule("synpred163_Php_fragment", 243);
			LeaveRule_synpred163_Php_fragment();
		}
	}
	// $ANTLR end synpred163_Php

	partial void EnterRule_synpred164_Php_fragment();
	partial void LeaveRule_synpred164_Php_fragment();

	// $ANTLR start synpred164_Php
	private void synpred164_Php_fragment()
	{
		EnterRule_synpred164_Php_fragment();
		EnterRule("synpred164_Php_fragment", 244);
		var retval = new Antlr3CstNode("synpred164_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:393:4: ( constantOrFunctionCall )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:393:4: constantOrFunctionCall
			{
			DebugLocation(393, 4);
			PushFollow(Follow._constantOrFunctionCall_in_synpred164_Php2117);
			constantOrFunctionCall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred164_Php_fragment", 244);
			LeaveRule("synpred164_Php_fragment", 244);
			LeaveRule_synpred164_Php_fragment();
		}
	}
	// $ANTLR end synpred164_Php

	partial void EnterRule_synpred165_Php_fragment();
	partial void LeaveRule_synpred165_Php_fragment();

	// $ANTLR start synpred165_Php
	private void synpred165_Php_fragment()
	{
		EnterRule_synpred165_Php_fragment();
		EnterRule("synpred165_Php_fragment", 245);
		var retval = new Antlr3CstNode("synpred165_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:394:4: ( atom )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:394:4: atom
			{
			DebugLocation(394, 4);
			PushFollow(Follow._atom_in_synpred165_Php2122);
			atom();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred165_Php_fragment", 245);
			LeaveRule("synpred165_Php_fragment", 245);
			LeaveRule_synpred165_Php_fragment();
		}
	}
	// $ANTLR end synpred165_Php

	partial void EnterRule_synpred173_Php_fragment();
	partial void LeaveRule_synpred173_Php_fragment();

	// $ANTLR start synpred173_Php
	private void synpred173_Php_fragment()
	{
		EnterRule_synpred173_Php_fragment();
		EnterRule("synpred173_Php_fragment", 253);
		var retval = new Antlr3CstNode("synpred173_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:404:5: ( keyValuePair )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:404:5: keyValuePair
			{
			DebugLocation(404, 5);
			PushFollow(Follow._keyValuePair_in_synpred173_Php2191);
			keyValuePair();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred173_Php_fragment", 253);
			LeaveRule("synpred173_Php_fragment", 253);
			LeaveRule_synpred173_Php_fragment();
		}
	}
	// $ANTLR end synpred173_Php

	partial void EnterRule_synpred179_Php_fragment();
	partial void LeaveRule_synpred179_Php_fragment();

	// $ANTLR start synpred179_Php
	private void synpred179_Php_fragment()
	{
		EnterRule_synpred179_Php_fragment();
		EnterRule("synpred179_Php_fragment", 259);
		var retval = new Antlr3CstNode("synpred179_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:414:4: ( ( Plus | Minus )? Integer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:414:4: ( Plus | Minus )? Integer
			{
			DebugLocation(414, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:414:4: ( Plus | Minus )?
			int alt190=2;
			try { DebugEnterSubRule(190);
			try { DebugEnterDecision(190, false);
			int LA190_1 = input.LA(1);

			if ((LA190_1==Minus||LA190_1==Plus))
			{
				alt190 = 1;
			}
			} finally { DebugExitDecision(190); }
			switch (alt190)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
				{
				DebugLocation(414, 4);
				if (input.LA(1)==Minus||input.LA(1)==Plus)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(190); }

			DebugLocation(414, 18);
			Match(input,Integer,Follow._Integer_in_synpred179_Php2244); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred179_Php_fragment", 259);
			LeaveRule("synpred179_Php_fragment", 259);
			LeaveRule_synpred179_Php_fragment();
		}
	}
	// $ANTLR end synpred179_Php

	partial void EnterRule_synpred182_Php_fragment();
	partial void LeaveRule_synpred182_Php_fragment();

	// $ANTLR start synpred182_Php
	private void synpred182_Php_fragment()
	{
		EnterRule_synpred182_Php_fragment();
		EnterRule("synpred182_Php_fragment", 262);
		var retval = new Antlr3CstNode("synpred182_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:415:4: ( ( Plus | Minus )? Real )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:415:4: ( Plus | Minus )? Real
			{
			DebugLocation(415, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:415:4: ( Plus | Minus )?
			int alt191=2;
			try { DebugEnterSubRule(191);
			try { DebugEnterDecision(191, false);
			int LA191_1 = input.LA(1);

			if ((LA191_1==Minus||LA191_1==Plus))
			{
				alt191 = 1;
			}
			} finally { DebugExitDecision(191); }
			switch (alt191)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:
				{
				DebugLocation(415, 4);
				if (input.LA(1)==Minus||input.LA(1)==Plus)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(191); }

			DebugLocation(415, 18);
			Match(input,Real,Follow._Real_in_synpred182_Php2256); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred182_Php_fragment", 262);
			LeaveRule("synpred182_Php_fragment", 262);
			LeaveRule_synpred182_Php_fragment();
		}
	}
	// $ANTLR end synpred182_Php

	partial void EnterRule_synpred183_Php_fragment();
	partial void LeaveRule_synpred183_Php_fragment();

	// $ANTLR start synpred183_Php
	private void synpred183_Php_fragment()
	{
		EnterRule_synpred183_Php_fragment();
		EnterRule("synpred183_Php_fragment", 263);
		var retval = new Antlr3CstNode("synpred183_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:416:4: ( boolean )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:416:4: boolean
			{
			DebugLocation(416, 4);
			PushFollow(Follow._boolean_in_synpred183_Php2261);
			boolean();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred183_Php_fragment", 263);
			LeaveRule("synpred183_Php_fragment", 263);
			LeaveRule_synpred183_Php_fragment();
		}
	}
	// $ANTLR end synpred183_Php

	partial void EnterRule_synpred184_Php_fragment();
	partial void LeaveRule_synpred184_Php_fragment();

	// $ANTLR start synpred184_Php
	private void synpred184_Php_fragment()
	{
		EnterRule_synpred184_Php_fragment();
		EnterRule("synpred184_Php_fragment", 264);
		var retval = new Antlr3CstNode("synpred184_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:417:4: ( Null )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:417:4: Null
			{
			DebugLocation(417, 4);
			Match(input,Null,Follow._Null_in_synpred184_Php2266); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred184_Php_fragment", 264);
			LeaveRule("synpred184_Php_fragment", 264);
			LeaveRule_synpred184_Php_fragment();
		}
	}
	// $ANTLR end synpred184_Php

	partial void EnterRule_synpred186_Php_fragment();
	partial void LeaveRule_synpred186_Php_fragment();

	// $ANTLR start synpred186_Php
	private void synpred186_Php_fragment()
	{
		EnterRule_synpred186_Php_fragment();
		EnterRule("synpred186_Php_fragment", 266);
		var retval = new Antlr3CstNode("synpred186_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:419:4: ( requireOperator expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:419:4: requireOperator expression
			{
			DebugLocation(419, 4);
			PushFollow(Follow._requireOperator_in_synpred186_Php2276);
			requireOperator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(419, 20);
			PushFollow(Follow._expression_in_synpred186_Php2278);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred186_Php_fragment", 266);
			LeaveRule("synpred186_Php_fragment", 266);
			LeaveRule_synpred186_Php_fragment();
		}
	}
	// $ANTLR end synpred186_Php

	partial void EnterRule_synpred192_Php_fragment();
	partial void LeaveRule_synpred192_Php_fragment();

	// $ANTLR start synpred192_Php
	private void synpred192_Php_fragment()
	{
		EnterRule_synpred192_Php_fragment();
		EnterRule("synpred192_Php_fragment", 272);
		var retval = new Antlr3CstNode("synpred192_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:434:10: ( expression )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:434:10: expression
			{
			DebugLocation(434, 10);
			PushFollow(Follow._expression_in_synpred192_Php2349);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred192_Php_fragment", 272);
			LeaveRule("synpred192_Php_fragment", 272);
			LeaveRule_synpred192_Php_fragment();
		}
	}
	// $ANTLR end synpred192_Php

	partial void EnterRule_synpred194_Php_fragment();
	partial void LeaveRule_synpred194_Php_fragment();

	// $ANTLR start synpred194_Php
	private void synpred194_Php_fragment()
	{
		EnterRule_synpred194_Php_fragment();
		EnterRule("synpred194_Php_fragment", 274);
		var retval = new Antlr3CstNode("synpred194_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:6: ( New )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:6: New
			{
			DebugLocation(435, 6);
			Match(input,New,Follow._New_in_synpred194_Php2364); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred194_Php_fragment", 274);
			LeaveRule("synpred194_Php_fragment", 274);
			LeaveRule_synpred194_Php_fragment();
		}
	}
	// $ANTLR end synpred194_Php

	partial void EnterRule_synpred195_Php_fragment();
	partial void LeaveRule_synpred195_Php_fragment();

	// $ANTLR start synpred195_Php
	private void synpred195_Php_fragment()
	{
		EnterRule_synpred195_Php_fragment();
		EnterRule("synpred195_Php_fragment", 275);
		var retval = new Antlr3CstNode("synpred195_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:10: ( Clone )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:10: Clone
			{
			DebugLocation(435, 10);
			Match(input,Clone,Follow._Clone_in_synpred195_Php2366); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred195_Php_fragment", 275);
			LeaveRule("synpred195_Php_fragment", 275);
			LeaveRule_synpred195_Php_fragment();
		}
	}
	// $ANTLR end synpred195_Php

	partial void EnterRule_synpred196_Php_fragment();
	partial void LeaveRule_synpred196_Php_fragment();

	// $ANTLR start synpred196_Php
	private void synpred196_Php_fragment()
	{
		EnterRule_synpred196_Php_fragment();
		EnterRule("synpred196_Php_fragment", 276);
		var retval = new Antlr3CstNode("synpred196_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:16: ( Echo )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:16: Echo
			{
			DebugLocation(435, 16);
			Match(input,Echo,Follow._Echo_in_synpred196_Php2368); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred196_Php_fragment", 276);
			LeaveRule("synpred196_Php_fragment", 276);
			LeaveRule_synpred196_Php_fragment();
		}
	}
	// $ANTLR end synpred196_Php

	partial void EnterRule_synpred197_Php_fragment();
	partial void LeaveRule_synpred197_Php_fragment();

	// $ANTLR start synpred197_Php
	private void synpred197_Php_fragment()
	{
		EnterRule_synpred197_Php_fragment();
		EnterRule("synpred197_Php_fragment", 277);
		var retval = new Antlr3CstNode("synpred197_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:21: ( Print )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:21: Print
			{
			DebugLocation(435, 21);
			Match(input,Print,Follow._Print_in_synpred197_Php2370); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred197_Php_fragment", 277);
			LeaveRule("synpred197_Php_fragment", 277);
			LeaveRule_synpred197_Php_fragment();
		}
	}
	// $ANTLR end synpred197_Php

	partial void EnterRule_synpred198_Php_fragment();
	partial void LeaveRule_synpred198_Php_fragment();

	// $ANTLR start synpred198_Php
	private void synpred198_Php_fragment()
	{
		EnterRule_synpred198_Php_fragment();
		EnterRule("synpred198_Php_fragment", 278);
		var retval = new Antlr3CstNode("synpred198_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:27: ( If )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:27: If
			{
			DebugLocation(435, 27);
			Match(input,If,Follow._If_in_synpred198_Php2372); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred198_Php_fragment", 278);
			LeaveRule("synpred198_Php_fragment", 278);
			LeaveRule_synpred198_Php_fragment();
		}
	}
	// $ANTLR end synpred198_Php

	partial void EnterRule_synpred199_Php_fragment();
	partial void LeaveRule_synpred199_Php_fragment();

	// $ANTLR start synpred199_Php
	private void synpred199_Php_fragment()
	{
		EnterRule_synpred199_Php_fragment();
		EnterRule("synpred199_Php_fragment", 279);
		var retval = new Antlr3CstNode("synpred199_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:30: ( Else )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:30: Else
			{
			DebugLocation(435, 30);
			Match(input,Else,Follow._Else_in_synpred199_Php2374); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred199_Php_fragment", 279);
			LeaveRule("synpred199_Php_fragment", 279);
			LeaveRule_synpred199_Php_fragment();
		}
	}
	// $ANTLR end synpred199_Php

	partial void EnterRule_synpred200_Php_fragment();
	partial void LeaveRule_synpred200_Php_fragment();

	// $ANTLR start synpred200_Php
	private void synpred200_Php_fragment()
	{
		EnterRule_synpred200_Php_fragment();
		EnterRule("synpred200_Php_fragment", 280);
		var retval = new Antlr3CstNode("synpred200_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:35: ( ElseIf )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:35: ElseIf
			{
			DebugLocation(435, 35);
			Match(input,ElseIf,Follow._ElseIf_in_synpred200_Php2376); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred200_Php_fragment", 280);
			LeaveRule("synpred200_Php_fragment", 280);
			LeaveRule_synpred200_Php_fragment();
		}
	}
	// $ANTLR end synpred200_Php

	partial void EnterRule_synpred201_Php_fragment();
	partial void LeaveRule_synpred201_Php_fragment();

	// $ANTLR start synpred201_Php
	private void synpred201_Php_fragment()
	{
		EnterRule_synpred201_Php_fragment();
		EnterRule("synpred201_Php_fragment", 281);
		var retval = new Antlr3CstNode("synpred201_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:42: ( For )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:42: For
			{
			DebugLocation(435, 42);
			Match(input,For,Follow._For_in_synpred201_Php2378); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred201_Php_fragment", 281);
			LeaveRule("synpred201_Php_fragment", 281);
			LeaveRule_synpred201_Php_fragment();
		}
	}
	// $ANTLR end synpred201_Php

	partial void EnterRule_synpred202_Php_fragment();
	partial void LeaveRule_synpred202_Php_fragment();

	// $ANTLR start synpred202_Php
	private void synpred202_Php_fragment()
	{
		EnterRule_synpred202_Php_fragment();
		EnterRule("synpred202_Php_fragment", 282);
		var retval = new Antlr3CstNode("synpred202_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:46: ( Foreach )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:46: Foreach
			{
			DebugLocation(435, 46);
			Match(input,Foreach,Follow._Foreach_in_synpred202_Php2380); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred202_Php_fragment", 282);
			LeaveRule("synpred202_Php_fragment", 282);
			LeaveRule_synpred202_Php_fragment();
		}
	}
	// $ANTLR end synpred202_Php

	partial void EnterRule_synpred203_Php_fragment();
	partial void LeaveRule_synpred203_Php_fragment();

	// $ANTLR start synpred203_Php
	private void synpred203_Php_fragment()
	{
		EnterRule_synpred203_Php_fragment();
		EnterRule("synpred203_Php_fragment", 283);
		var retval = new Antlr3CstNode("synpred203_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:54: ( While )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:54: While
			{
			DebugLocation(435, 54);
			Match(input,While,Follow._While_in_synpred203_Php2382); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred203_Php_fragment", 283);
			LeaveRule("synpred203_Php_fragment", 283);
			LeaveRule_synpred203_Php_fragment();
		}
	}
	// $ANTLR end synpred203_Php

	partial void EnterRule_synpred204_Php_fragment();
	partial void LeaveRule_synpred204_Php_fragment();

	// $ANTLR start synpred204_Php
	private void synpred204_Php_fragment()
	{
		EnterRule_synpred204_Php_fragment();
		EnterRule("synpred204_Php_fragment", 284);
		var retval = new Antlr3CstNode("synpred204_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:60: ( Do )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:60: Do
			{
			DebugLocation(435, 60);
			Match(input,Do,Follow._Do_in_synpred204_Php2384); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred204_Php_fragment", 284);
			LeaveRule("synpred204_Php_fragment", 284);
			LeaveRule_synpred204_Php_fragment();
		}
	}
	// $ANTLR end synpred204_Php

	partial void EnterRule_synpred205_Php_fragment();
	partial void LeaveRule_synpred205_Php_fragment();

	// $ANTLR start synpred205_Php
	private void synpred205_Php_fragment()
	{
		EnterRule_synpred205_Php_fragment();
		EnterRule("synpred205_Php_fragment", 285);
		var retval = new Antlr3CstNode("synpred205_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:63: ( Try )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:63: Try
			{
			DebugLocation(435, 63);
			Match(input,Try,Follow._Try_in_synpred205_Php2386); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred205_Php_fragment", 285);
			LeaveRule("synpred205_Php_fragment", 285);
			LeaveRule_synpred205_Php_fragment();
		}
	}
	// $ANTLR end synpred205_Php

	partial void EnterRule_synpred206_Php_fragment();
	partial void LeaveRule_synpred206_Php_fragment();

	// $ANTLR start synpred206_Php
	private void synpred206_Php_fragment()
	{
		EnterRule_synpred206_Php_fragment();
		EnterRule("synpred206_Php_fragment", 286);
		var retval = new Antlr3CstNode("synpred206_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:67: ( Catch )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:67: Catch
			{
			DebugLocation(435, 67);
			Match(input,Catch,Follow._Catch_in_synpred206_Php2388); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred206_Php_fragment", 286);
			LeaveRule("synpred206_Php_fragment", 286);
			LeaveRule_synpred206_Php_fragment();
		}
	}
	// $ANTLR end synpred206_Php

	partial void EnterRule_synpred207_Php_fragment();
	partial void LeaveRule_synpred207_Php_fragment();

	// $ANTLR start synpred207_Php
	private void synpred207_Php_fragment()
	{
		EnterRule_synpred207_Php_fragment();
		EnterRule("synpred207_Php_fragment", 287);
		var retval = new Antlr3CstNode("synpred207_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:73: ( Finally )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:73: Finally
			{
			DebugLocation(435, 73);
			Match(input,Finally,Follow._Finally_in_synpred207_Php2390); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred207_Php_fragment", 287);
			LeaveRule("synpred207_Php_fragment", 287);
			LeaveRule_synpred207_Php_fragment();
		}
	}
	// $ANTLR end synpred207_Php

	partial void EnterRule_synpred208_Php_fragment();
	partial void LeaveRule_synpred208_Php_fragment();

	// $ANTLR start synpred208_Php
	private void synpred208_Php_fragment()
	{
		EnterRule_synpred208_Php_fragment();
		EnterRule("synpred208_Php_fragment", 288);
		var retval = new Antlr3CstNode("synpred208_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:81: ( Switch )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:81: Switch
			{
			DebugLocation(435, 81);
			Match(input,Switch,Follow._Switch_in_synpred208_Php2392); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred208_Php_fragment", 288);
			LeaveRule("synpred208_Php_fragment", 288);
			LeaveRule_synpred208_Php_fragment();
		}
	}
	// $ANTLR end synpred208_Php

	partial void EnterRule_synpred209_Php_fragment();
	partial void LeaveRule_synpred209_Php_fragment();

	// $ANTLR start synpred209_Php
	private void synpred209_Php_fragment()
	{
		EnterRule_synpred209_Php_fragment();
		EnterRule("synpred209_Php_fragment", 289);
		var retval = new Antlr3CstNode("synpred209_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:88: ( Case )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:88: Case
			{
			DebugLocation(435, 88);
			Match(input,Case,Follow._Case_in_synpred209_Php2394); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred209_Php_fragment", 289);
			LeaveRule("synpred209_Php_fragment", 289);
			LeaveRule_synpred209_Php_fragment();
		}
	}
	// $ANTLR end synpred209_Php

	partial void EnterRule_synpred210_Php_fragment();
	partial void LeaveRule_synpred210_Php_fragment();

	// $ANTLR start synpred210_Php
	private void synpred210_Php_fragment()
	{
		EnterRule_synpred210_Php_fragment();
		EnterRule("synpred210_Php_fragment", 290);
		var retval = new Antlr3CstNode("synpred210_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:93: ( Default )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:93: Default
			{
			DebugLocation(435, 93);
			Match(input,Default,Follow._Default_in_synpred210_Php2396); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred210_Php_fragment", 290);
			LeaveRule("synpred210_Php_fragment", 290);
			LeaveRule_synpred210_Php_fragment();
		}
	}
	// $ANTLR end synpred210_Php

	partial void EnterRule_synpred211_Php_fragment();
	partial void LeaveRule_synpred211_Php_fragment();

	// $ANTLR start synpred211_Php
	private void synpred211_Php_fragment()
	{
		EnterRule_synpred211_Php_fragment();
		EnterRule("synpred211_Php_fragment", 291);
		var retval = new Antlr3CstNode("synpred211_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:101: ( Namespace )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:101: Namespace
			{
			DebugLocation(435, 101);
			Match(input,Namespace,Follow._Namespace_in_synpred211_Php2398); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred211_Php_fragment", 291);
			LeaveRule("synpred211_Php_fragment", 291);
			LeaveRule_synpred211_Php_fragment();
		}
	}
	// $ANTLR end synpred211_Php

	partial void EnterRule_synpred212_Php_fragment();
	partial void LeaveRule_synpred212_Php_fragment();

	// $ANTLR start synpred212_Php
	private void synpred212_Php_fragment()
	{
		EnterRule_synpred212_Php_fragment();
		EnterRule("synpred212_Php_fragment", 292);
		var retval = new Antlr3CstNode("synpred212_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:111: ( Function )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:111: Function
			{
			DebugLocation(435, 111);
			Match(input,Function,Follow._Function_in_synpred212_Php2400); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred212_Php_fragment", 292);
			LeaveRule("synpred212_Php_fragment", 292);
			LeaveRule_synpred212_Php_fragment();
		}
	}
	// $ANTLR end synpred212_Php

	partial void EnterRule_synpred213_Php_fragment();
	partial void LeaveRule_synpred213_Php_fragment();

	// $ANTLR start synpred213_Php
	private void synpred213_Php_fragment()
	{
		EnterRule_synpred213_Php_fragment();
		EnterRule("synpred213_Php_fragment", 293);
		var retval = new Antlr3CstNode("synpred213_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:120: ( Break )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:120: Break
			{
			DebugLocation(435, 120);
			Match(input,Break,Follow._Break_in_synpred213_Php2402); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred213_Php_fragment", 293);
			LeaveRule("synpred213_Php_fragment", 293);
			LeaveRule_synpred213_Php_fragment();
		}
	}
	// $ANTLR end synpred213_Php

	partial void EnterRule_synpred214_Php_fragment();
	partial void LeaveRule_synpred214_Php_fragment();

	// $ANTLR start synpred214_Php
	private void synpred214_Php_fragment()
	{
		EnterRule_synpred214_Php_fragment();
		EnterRule("synpred214_Php_fragment", 294);
		var retval = new Antlr3CstNode("synpred214_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:126: ( Continue )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:126: Continue
			{
			DebugLocation(435, 126);
			Match(input,Continue,Follow._Continue_in_synpred214_Php2404); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred214_Php_fragment", 294);
			LeaveRule("synpred214_Php_fragment", 294);
			LeaveRule_synpred214_Php_fragment();
		}
	}
	// $ANTLR end synpred214_Php

	partial void EnterRule_synpred215_Php_fragment();
	partial void LeaveRule_synpred215_Php_fragment();

	// $ANTLR start synpred215_Php
	private void synpred215_Php_fragment()
	{
		EnterRule_synpred215_Php_fragment();
		EnterRule("synpred215_Php_fragment", 295);
		var retval = new Antlr3CstNode("synpred215_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:135: ( Goto )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:135: Goto
			{
			DebugLocation(435, 135);
			Match(input,Goto,Follow._Goto_in_synpred215_Php2406); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred215_Php_fragment", 295);
			LeaveRule("synpred215_Php_fragment", 295);
			LeaveRule_synpred215_Php_fragment();
		}
	}
	// $ANTLR end synpred215_Php

	partial void EnterRule_synpred216_Php_fragment();
	partial void LeaveRule_synpred216_Php_fragment();

	// $ANTLR start synpred216_Php
	private void synpred216_Php_fragment()
	{
		EnterRule_synpred216_Php_fragment();
		EnterRule("synpred216_Php_fragment", 296);
		var retval = new Antlr3CstNode("synpred216_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:140: ( Return )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:140: Return
			{
			DebugLocation(435, 140);
			Match(input,Return,Follow._Return_in_synpred216_Php2408); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred216_Php_fragment", 296);
			LeaveRule("synpred216_Php_fragment", 296);
			LeaveRule_synpred216_Php_fragment();
		}
	}
	// $ANTLR end synpred216_Php

	partial void EnterRule_synpred217_Php_fragment();
	partial void LeaveRule_synpred217_Php_fragment();

	// $ANTLR start synpred217_Php
	private void synpred217_Php_fragment()
	{
		EnterRule_synpred217_Php_fragment();
		EnterRule("synpred217_Php_fragment", 297);
		var retval = new Antlr3CstNode("synpred217_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:147: ( Throw )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:147: Throw
			{
			DebugLocation(435, 147);
			Match(input,Throw,Follow._Throw_in_synpred217_Php2410); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred217_Php_fragment", 297);
			LeaveRule("synpred217_Php_fragment", 297);
			LeaveRule_synpred217_Php_fragment();
		}
	}
	// $ANTLR end synpred217_Php

	partial void EnterRule_synpred218_Php_fragment();
	partial void LeaveRule_synpred218_Php_fragment();

	// $ANTLR start synpred218_Php
	private void synpred218_Php_fragment()
	{
		EnterRule_synpred218_Php_fragment();
		EnterRule("synpred218_Php_fragment", 298);
		var retval = new Antlr3CstNode("synpred218_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:153: ( Global )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:153: Global
			{
			DebugLocation(435, 153);
			Match(input,Global,Follow._Global_in_synpred218_Php2412); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred218_Php_fragment", 298);
			LeaveRule("synpred218_Php_fragment", 298);
			LeaveRule_synpred218_Php_fragment();
		}
	}
	// $ANTLR end synpred218_Php

	partial void EnterRule_synpred219_Php_fragment();
	partial void LeaveRule_synpred219_Php_fragment();

	// $ANTLR start synpred219_Php
	private void synpred219_Php_fragment()
	{
		EnterRule_synpred219_Php_fragment();
		EnterRule("synpred219_Php_fragment", 299);
		var retval = new Antlr3CstNode("synpred219_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:160: ( Static )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:160: Static
			{
			DebugLocation(435, 160);
			Match(input,Static,Follow._Static_in_synpred219_Php2414); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred219_Php_fragment", 299);
			LeaveRule("synpred219_Php_fragment", 299);
			LeaveRule_synpred219_Php_fragment();
		}
	}
	// $ANTLR end synpred219_Php

	partial void EnterRule_synpred220_Php_fragment();
	partial void LeaveRule_synpred220_Php_fragment();

	// $ANTLR start synpred220_Php
	private void synpred220_Php_fragment()
	{
		EnterRule_synpred220_Php_fragment();
		EnterRule("synpred220_Php_fragment", 300);
		var retval = new Antlr3CstNode("synpred220_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:167: ( And )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:167: And
			{
			DebugLocation(435, 167);
			Match(input,And,Follow._And_in_synpred220_Php2416); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred220_Php_fragment", 300);
			LeaveRule("synpred220_Php_fragment", 300);
			LeaveRule_synpred220_Php_fragment();
		}
	}
	// $ANTLR end synpred220_Php

	partial void EnterRule_synpred221_Php_fragment();
	partial void LeaveRule_synpred221_Php_fragment();

	// $ANTLR start synpred221_Php
	private void synpred221_Php_fragment()
	{
		EnterRule_synpred221_Php_fragment();
		EnterRule("synpred221_Php_fragment", 301);
		var retval = new Antlr3CstNode("synpred221_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:171: ( Or )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:171: Or
			{
			DebugLocation(435, 171);
			Match(input,Or,Follow._Or_in_synpred221_Php2418); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred221_Php_fragment", 301);
			LeaveRule("synpred221_Php_fragment", 301);
			LeaveRule_synpred221_Php_fragment();
		}
	}
	// $ANTLR end synpred221_Php

	partial void EnterRule_synpred222_Php_fragment();
	partial void LeaveRule_synpred222_Php_fragment();

	// $ANTLR start synpred222_Php
	private void synpred222_Php_fragment()
	{
		EnterRule_synpred222_Php_fragment();
		EnterRule("synpred222_Php_fragment", 302);
		var retval = new Antlr3CstNode("synpred222_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:174: ( Xor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:174: Xor
			{
			DebugLocation(435, 174);
			Match(input,Xor,Follow._Xor_in_synpred222_Php2420); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred222_Php_fragment", 302);
			LeaveRule("synpred222_Php_fragment", 302);
			LeaveRule_synpred222_Php_fragment();
		}
	}
	// $ANTLR end synpred222_Php

	partial void EnterRule_synpred223_Php_fragment();
	partial void LeaveRule_synpred223_Php_fragment();

	// $ANTLR start synpred223_Php
	private void synpred223_Php_fragment()
	{
		EnterRule_synpred223_Php_fragment();
		EnterRule("synpred223_Php_fragment", 303);
		var retval = new Antlr3CstNode("synpred223_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:178: ( Instanceof )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:178: Instanceof
			{
			DebugLocation(435, 178);
			Match(input,Instanceof,Follow._Instanceof_in_synpred223_Php2422); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred223_Php_fragment", 303);
			LeaveRule("synpred223_Php_fragment", 303);
			LeaveRule_synpred223_Php_fragment();
		}
	}
	// $ANTLR end synpred223_Php

	partial void EnterRule_synpred224_Php_fragment();
	partial void LeaveRule_synpred224_Php_fragment();

	// $ANTLR start synpred224_Php
	private void synpred224_Php_fragment()
	{
		EnterRule_synpred224_Php_fragment();
		EnterRule("synpred224_Php_fragment", 304);
		var retval = new Antlr3CstNode("synpred224_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:189: ( Null )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:189: Null
			{
			DebugLocation(435, 189);
			Match(input,Null,Follow._Null_in_synpred224_Php2424); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred224_Php_fragment", 304);
			LeaveRule("synpred224_Php_fragment", 304);
			LeaveRule_synpred224_Php_fragment();
		}
	}
	// $ANTLR end synpred224_Php

	partial void EnterRule_synpred225_Php_fragment();
	partial void LeaveRule_synpred225_Php_fragment();

	// $ANTLR start synpred225_Php
	private void synpred225_Php_fragment()
	{
		EnterRule_synpred225_Php_fragment();
		EnterRule("synpred225_Php_fragment", 305);
		var retval = new Antlr3CstNode("synpred225_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:194: ( List )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:194: List
			{
			DebugLocation(435, 194);
			Match(input,List,Follow._List_in_synpred225_Php2426); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred225_Php_fragment", 305);
			LeaveRule("synpred225_Php_fragment", 305);
			LeaveRule_synpred225_Php_fragment();
		}
	}
	// $ANTLR end synpred225_Php

	partial void EnterRule_synpred226_Php_fragment();
	partial void LeaveRule_synpred226_Php_fragment();

	// $ANTLR start synpred226_Php
	private void synpred226_Php_fragment()
	{
		EnterRule_synpred226_Php_fragment();
		EnterRule("synpred226_Php_fragment", 306);
		var retval = new Antlr3CstNode("synpred226_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:199: ( Class )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:199: Class
			{
			DebugLocation(435, 199);
			Match(input,Class,Follow._Class_in_synpred226_Php2428); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred226_Php_fragment", 306);
			LeaveRule("synpred226_Php_fragment", 306);
			LeaveRule_synpred226_Php_fragment();
		}
	}
	// $ANTLR end synpred226_Php

	partial void EnterRule_synpred227_Php_fragment();
	partial void LeaveRule_synpred227_Php_fragment();

	// $ANTLR start synpred227_Php
	private void synpred227_Php_fragment()
	{
		EnterRule_synpred227_Php_fragment();
		EnterRule("synpred227_Php_fragment", 307);
		var retval = new Antlr3CstNode("synpred227_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:205: ( Interface )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:205: Interface
			{
			DebugLocation(435, 205);
			Match(input,Interface,Follow._Interface_in_synpred227_Php2430); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred227_Php_fragment", 307);
			LeaveRule("synpred227_Php_fragment", 307);
			LeaveRule_synpred227_Php_fragment();
		}
	}
	// $ANTLR end synpred227_Php

	partial void EnterRule_synpred228_Php_fragment();
	partial void LeaveRule_synpred228_Php_fragment();

	// $ANTLR start synpred228_Php
	private void synpred228_Php_fragment()
	{
		EnterRule_synpred228_Php_fragment();
		EnterRule("synpred228_Php_fragment", 308);
		var retval = new Antlr3CstNode("synpred228_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:215: ( Extends )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:215: Extends
			{
			DebugLocation(435, 215);
			Match(input,Extends,Follow._Extends_in_synpred228_Php2432); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred228_Php_fragment", 308);
			LeaveRule("synpred228_Php_fragment", 308);
			LeaveRule_synpred228_Php_fragment();
		}
	}
	// $ANTLR end synpred228_Php

	partial void EnterRule_synpred229_Php_fragment();
	partial void LeaveRule_synpred229_Php_fragment();

	// $ANTLR start synpred229_Php
	private void synpred229_Php_fragment()
	{
		EnterRule_synpred229_Php_fragment();
		EnterRule("synpred229_Php_fragment", 309);
		var retval = new Antlr3CstNode("synpred229_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:223: ( Implements )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:223: Implements
			{
			DebugLocation(435, 223);
			Match(input,Implements,Follow._Implements_in_synpred229_Php2434); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred229_Php_fragment", 309);
			LeaveRule("synpred229_Php_fragment", 309);
			LeaveRule_synpred229_Php_fragment();
		}
	}
	// $ANTLR end synpred229_Php

	partial void EnterRule_synpred230_Php_fragment();
	partial void LeaveRule_synpred230_Php_fragment();

	// $ANTLR start synpred230_Php
	private void synpred230_Php_fragment()
	{
		EnterRule_synpred230_Php_fragment();
		EnterRule("synpred230_Php_fragment", 310);
		var retval = new Antlr3CstNode("synpred230_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:234: ( Abstract )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:234: Abstract
			{
			DebugLocation(435, 234);
			Match(input,Abstract,Follow._Abstract_in_synpred230_Php2436); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred230_Php_fragment", 310);
			LeaveRule("synpred230_Php_fragment", 310);
			LeaveRule_synpred230_Php_fragment();
		}
	}
	// $ANTLR end synpred230_Php

	partial void EnterRule_synpred231_Php_fragment();
	partial void LeaveRule_synpred231_Php_fragment();

	// $ANTLR start synpred231_Php
	private void synpred231_Php_fragment()
	{
		EnterRule_synpred231_Php_fragment();
		EnterRule("synpred231_Php_fragment", 311);
		var retval = new Antlr3CstNode("synpred231_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:243: ( Var )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:243: Var
			{
			DebugLocation(435, 243);
			Match(input,Var,Follow._Var_in_synpred231_Php2438); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred231_Php_fragment", 311);
			LeaveRule("synpred231_Php_fragment", 311);
			LeaveRule_synpred231_Php_fragment();
		}
	}
	// $ANTLR end synpred231_Php

	partial void EnterRule_synpred232_Php_fragment();
	partial void LeaveRule_synpred232_Php_fragment();

	// $ANTLR start synpred232_Php
	private void synpred232_Php_fragment()
	{
		EnterRule_synpred232_Php_fragment();
		EnterRule("synpred232_Php_fragment", 312);
		var retval = new Antlr3CstNode("synpred232_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:247: ( Const )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:247: Const
			{
			DebugLocation(435, 247);
			Match(input,Const,Follow._Const_in_synpred232_Php2440); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred232_Php_fragment", 312);
			LeaveRule("synpred232_Php_fragment", 312);
			LeaveRule_synpred232_Php_fragment();
		}
	}
	// $ANTLR end synpred232_Php

	partial void EnterRule_synpred233_Php_fragment();
	partial void LeaveRule_synpred233_Php_fragment();

	// $ANTLR start synpred233_Php
	private void synpred233_Php_fragment()
	{
		EnterRule_synpred233_Php_fragment();
		EnterRule("synpred233_Php_fragment", 313);
		var retval = new Antlr3CstNode("synpred233_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:253: ( As )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:253: As
			{
			DebugLocation(435, 253);
			Match(input,As,Follow._As_in_synpred233_Php2442); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred233_Php_fragment", 313);
			LeaveRule("synpred233_Php_fragment", 313);
			LeaveRule_synpred233_Php_fragment();
		}
	}
	// $ANTLR end synpred233_Php

	partial void EnterRule_synpred234_Php_fragment();
	partial void LeaveRule_synpred234_Php_fragment();

	// $ANTLR start synpred234_Php
	private void synpred234_Php_fragment()
	{
		EnterRule_synpred234_Php_fragment();
		EnterRule("synpred234_Php_fragment", 314);
		var retval = new Antlr3CstNode("synpred234_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:256: ( Require )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:256: Require
			{
			DebugLocation(435, 256);
			Match(input,Require,Follow._Require_in_synpred234_Php2444); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred234_Php_fragment", 314);
			LeaveRule("synpred234_Php_fragment", 314);
			LeaveRule_synpred234_Php_fragment();
		}
	}
	// $ANTLR end synpred234_Php

	partial void EnterRule_synpred235_Php_fragment();
	partial void LeaveRule_synpred235_Php_fragment();

	// $ANTLR start synpred235_Php
	private void synpred235_Php_fragment()
	{
		EnterRule_synpred235_Php_fragment();
		EnterRule("synpred235_Php_fragment", 315);
		var retval = new Antlr3CstNode("synpred235_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:264: ( RequireOnce )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:264: RequireOnce
			{
			DebugLocation(435, 264);
			Match(input,RequireOnce,Follow._RequireOnce_in_synpred235_Php2446); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred235_Php_fragment", 315);
			LeaveRule("synpred235_Php_fragment", 315);
			LeaveRule_synpred235_Php_fragment();
		}
	}
	// $ANTLR end synpred235_Php

	partial void EnterRule_synpred236_Php_fragment();
	partial void LeaveRule_synpred236_Php_fragment();

	// $ANTLR start synpred236_Php
	private void synpred236_Php_fragment()
	{
		EnterRule_synpred236_Php_fragment();
		EnterRule("synpred236_Php_fragment", 316);
		var retval = new Antlr3CstNode("synpred236_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:276: ( Include )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:276: Include
			{
			DebugLocation(435, 276);
			Match(input,Include,Follow._Include_in_synpred236_Php2448); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred236_Php_fragment", 316);
			LeaveRule("synpred236_Php_fragment", 316);
			LeaveRule_synpred236_Php_fragment();
		}
	}
	// $ANTLR end synpred236_Php

	partial void EnterRule_synpred237_Php_fragment();
	partial void LeaveRule_synpred237_Php_fragment();

	// $ANTLR start synpred237_Php
	private void synpred237_Php_fragment()
	{
		EnterRule_synpred237_Php_fragment();
		EnterRule("synpred237_Php_fragment", 317);
		var retval = new Antlr3CstNode("synpred237_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:284: ( IncludeOnce )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:284: IncludeOnce
			{
			DebugLocation(435, 284);
			Match(input,IncludeOnce,Follow._IncludeOnce_in_synpred237_Php2450); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred237_Php_fragment", 317);
			LeaveRule("synpred237_Php_fragment", 317);
			LeaveRule_synpred237_Php_fragment();
		}
	}
	// $ANTLR end synpred237_Php

	partial void EnterRule_synpred238_Php_fragment();
	partial void LeaveRule_synpred238_Php_fragment();

	// $ANTLR start synpred238_Php
	private void synpred238_Php_fragment()
	{
		EnterRule_synpred238_Php_fragment();
		EnterRule("synpred238_Php_fragment", 318);
		var retval = new Antlr3CstNode("synpred238_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:296: ( Public )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:296: Public
			{
			DebugLocation(435, 296);
			Match(input,Public,Follow._Public_in_synpred238_Php2452); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred238_Php_fragment", 318);
			LeaveRule("synpred238_Php_fragment", 318);
			LeaveRule_synpred238_Php_fragment();
		}
	}
	// $ANTLR end synpred238_Php

	partial void EnterRule_synpred239_Php_fragment();
	partial void LeaveRule_synpred239_Php_fragment();

	// $ANTLR start synpred239_Php
	private void synpred239_Php_fragment()
	{
		EnterRule_synpred239_Php_fragment();
		EnterRule("synpred239_Php_fragment", 319);
		var retval = new Antlr3CstNode("synpred239_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:303: ( Private )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:303: Private
			{
			DebugLocation(435, 303);
			Match(input,Private,Follow._Private_in_synpred239_Php2454); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred239_Php_fragment", 319);
			LeaveRule("synpred239_Php_fragment", 319);
			LeaveRule_synpred239_Php_fragment();
		}
	}
	// $ANTLR end synpred239_Php

	partial void EnterRule_synpred240_Php_fragment();
	partial void LeaveRule_synpred240_Php_fragment();

	// $ANTLR start synpred240_Php
	private void synpred240_Php_fragment()
	{
		EnterRule_synpred240_Php_fragment();
		EnterRule("synpred240_Php_fragment", 320);
		var retval = new Antlr3CstNode("synpred240_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:311: ( Protected )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:311: Protected
			{
			DebugLocation(435, 311);
			Match(input,Protected,Follow._Protected_in_synpred240_Php2456); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred240_Php_fragment", 320);
			LeaveRule("synpred240_Php_fragment", 320);
			LeaveRule_synpred240_Php_fragment();
		}
	}
	// $ANTLR end synpred240_Php

	partial void EnterRule_synpred241_Php_fragment();
	partial void LeaveRule_synpred241_Php_fragment();

	// $ANTLR start synpred241_Php
	private void synpred241_Php_fragment()
	{
		EnterRule_synpred241_Php_fragment();
		EnterRule("synpred241_Php_fragment", 321);
		var retval = new Antlr3CstNode("synpred241_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:321: ( True )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:321: True
			{
			DebugLocation(435, 321);
			Match(input,True,Follow._True_in_synpred241_Php2458); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred241_Php_fragment", 321);
			LeaveRule("synpred241_Php_fragment", 321);
			LeaveRule_synpred241_Php_fragment();
		}
	}
	// $ANTLR end synpred241_Php

	partial void EnterRule_synpred242_Php_fragment();
	partial void LeaveRule_synpred242_Php_fragment();

	// $ANTLR start synpred242_Php
	private void synpred242_Php_fragment()
	{
		EnterRule_synpred242_Php_fragment();
		EnterRule("synpred242_Php_fragment", 322);
		var retval = new Antlr3CstNode("synpred242_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:326: ( False )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:326: False
			{
			DebugLocation(435, 326);
			Match(input,False,Follow._False_in_synpred242_Php2460); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred242_Php_fragment", 322);
			LeaveRule("synpred242_Php_fragment", 322);
			LeaveRule_synpred242_Php_fragment();
		}
	}
	// $ANTLR end synpred242_Php

	partial void EnterRule_synpred243_Php_fragment();
	partial void LeaveRule_synpred243_Php_fragment();

	// $ANTLR start synpred243_Php
	private void synpred243_Php_fragment()
	{
		EnterRule_synpred243_Php_fragment();
		EnterRule("synpred243_Php_fragment", 323);
		var retval = new Antlr3CstNode("synpred243_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:332: ( HaltCompiler )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:332: HaltCompiler
			{
			DebugLocation(435, 332);
			Match(input,HaltCompiler,Follow._HaltCompiler_in_synpred243_Php2462); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred243_Php_fragment", 323);
			LeaveRule("synpred243_Php_fragment", 323);
			LeaveRule_synpred243_Php_fragment();
		}
	}
	// $ANTLR end synpred243_Php

	partial void EnterRule_synpred244_Php_fragment();
	partial void LeaveRule_synpred244_Php_fragment();

	// $ANTLR start synpred244_Php
	private void synpred244_Php_fragment()
	{
		EnterRule_synpred244_Php_fragment();
		EnterRule("synpred244_Php_fragment", 324);
		var retval = new Antlr3CstNode("synpred244_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:345: ( Die )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:345: Die
			{
			DebugLocation(435, 345);
			Match(input,Die,Follow._Die_in_synpred244_Php2464); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred244_Php_fragment", 324);
			LeaveRule("synpred244_Php_fragment", 324);
			LeaveRule_synpred244_Php_fragment();
		}
	}
	// $ANTLR end synpred244_Php

	partial void EnterRule_synpred245_Php_fragment();
	partial void LeaveRule_synpred245_Php_fragment();

	// $ANTLR start synpred245_Php
	private void synpred245_Php_fragment()
	{
		EnterRule_synpred245_Php_fragment();
		EnterRule("synpred245_Php_fragment", 325);
		var retval = new Antlr3CstNode("synpred245_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:349: ( Empty )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:349: Empty
			{
			DebugLocation(435, 349);
			Match(input,Empty,Follow._Empty_in_synpred245_Php2466); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred245_Php_fragment", 325);
			LeaveRule("synpred245_Php_fragment", 325);
			LeaveRule_synpred245_Php_fragment();
		}
	}
	// $ANTLR end synpred245_Php

	partial void EnterRule_synpred246_Php_fragment();
	partial void LeaveRule_synpred246_Php_fragment();

	// $ANTLR start synpred246_Php
	private void synpred246_Php_fragment()
	{
		EnterRule_synpred246_Php_fragment();
		EnterRule("synpred246_Php_fragment", 326);
		var retval = new Antlr3CstNode("synpred246_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:355: ( Exit )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:355: Exit
			{
			DebugLocation(435, 355);
			Match(input,Exit,Follow._Exit_in_synpred246_Php2468); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred246_Php_fragment", 326);
			LeaveRule("synpred246_Php_fragment", 326);
			LeaveRule_synpred246_Php_fragment();
		}
	}
	// $ANTLR end synpred246_Php

	partial void EnterRule_synpred247_Php_fragment();
	partial void LeaveRule_synpred247_Php_fragment();

	// $ANTLR start synpred247_Php
	private void synpred247_Php_fragment()
	{
		EnterRule_synpred247_Php_fragment();
		EnterRule("synpred247_Php_fragment", 327);
		var retval = new Antlr3CstNode("synpred247_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:360: ( Eval )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:360: Eval
			{
			DebugLocation(435, 360);
			Match(input,Eval,Follow._Eval_in_synpred247_Php2470); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred247_Php_fragment", 327);
			LeaveRule("synpred247_Php_fragment", 327);
			LeaveRule_synpred247_Php_fragment();
		}
	}
	// $ANTLR end synpred247_Php

	partial void EnterRule_synpred248_Php_fragment();
	partial void LeaveRule_synpred248_Php_fragment();

	// $ANTLR start synpred248_Php
	private void synpred248_Php_fragment()
	{
		EnterRule_synpred248_Php_fragment();
		EnterRule("synpred248_Php_fragment", 328);
		var retval = new Antlr3CstNode("synpred248_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:365: ( Isset )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:435:365: Isset
			{
			DebugLocation(435, 365);
			Match(input,Isset,Follow._Isset_in_synpred248_Php2472); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred248_Php_fragment", 328);
			LeaveRule("synpred248_Php_fragment", 328);
			LeaveRule_synpred248_Php_fragment();
		}
	}
	// $ANTLR end synpred248_Php

	partial void EnterRule_synpred249_Php_fragment();
	partial void LeaveRule_synpred249_Php_fragment();

	// $ANTLR start synpred249_Php
	private void synpred249_Php_fragment()
	{
		EnterRule_synpred249_Php_fragment();
		EnterRule("synpred249_Php_fragment", 329);
		var retval = new Antlr3CstNode("synpred249_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:6: ( IntType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:6: IntType
			{
			DebugLocation(436, 6);
			Match(input,IntType,Follow._IntType_in_synpred249_Php2479); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred249_Php_fragment", 329);
			LeaveRule("synpred249_Php_fragment", 329);
			LeaveRule_synpred249_Php_fragment();
		}
	}
	// $ANTLR end synpred249_Php

	partial void EnterRule_synpred250_Php_fragment();
	partial void LeaveRule_synpred250_Php_fragment();

	// $ANTLR start synpred250_Php
	private void synpred250_Php_fragment()
	{
		EnterRule_synpred250_Php_fragment();
		EnterRule("synpred250_Php_fragment", 330);
		var retval = new Antlr3CstNode("synpred250_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:16: ( IntegerType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:16: IntegerType
			{
			DebugLocation(436, 16);
			Match(input,IntegerType,Follow._IntegerType_in_synpred250_Php2483); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred250_Php_fragment", 330);
			LeaveRule("synpred250_Php_fragment", 330);
			LeaveRule_synpred250_Php_fragment();
		}
	}
	// $ANTLR end synpred250_Php

	partial void EnterRule_synpred251_Php_fragment();
	partial void LeaveRule_synpred251_Php_fragment();

	// $ANTLR start synpred251_Php
	private void synpred251_Php_fragment()
	{
		EnterRule_synpred251_Php_fragment();
		EnterRule("synpred251_Php_fragment", 331);
		var retval = new Antlr3CstNode("synpred251_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:30: ( BoolType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:30: BoolType
			{
			DebugLocation(436, 30);
			Match(input,BoolType,Follow._BoolType_in_synpred251_Php2487); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred251_Php_fragment", 331);
			LeaveRule("synpred251_Php_fragment", 331);
			LeaveRule_synpred251_Php_fragment();
		}
	}
	// $ANTLR end synpred251_Php

	partial void EnterRule_synpred252_Php_fragment();
	partial void LeaveRule_synpred252_Php_fragment();

	// $ANTLR start synpred252_Php
	private void synpred252_Php_fragment()
	{
		EnterRule_synpred252_Php_fragment();
		EnterRule("synpred252_Php_fragment", 332);
		var retval = new Antlr3CstNode("synpred252_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:41: ( BooleanType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:41: BooleanType
			{
			DebugLocation(436, 41);
			Match(input,BooleanType,Follow._BooleanType_in_synpred252_Php2491); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred252_Php_fragment", 332);
			LeaveRule("synpred252_Php_fragment", 332);
			LeaveRule_synpred252_Php_fragment();
		}
	}
	// $ANTLR end synpred252_Php

	partial void EnterRule_synpred253_Php_fragment();
	partial void LeaveRule_synpred253_Php_fragment();

	// $ANTLR start synpred253_Php
	private void synpred253_Php_fragment()
	{
		EnterRule_synpred253_Php_fragment();
		EnterRule("synpred253_Php_fragment", 333);
		var retval = new Antlr3CstNode("synpred253_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:55: ( FloatType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:55: FloatType
			{
			DebugLocation(436, 55);
			Match(input,FloatType,Follow._FloatType_in_synpred253_Php2495); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred253_Php_fragment", 333);
			LeaveRule("synpred253_Php_fragment", 333);
			LeaveRule_synpred253_Php_fragment();
		}
	}
	// $ANTLR end synpred253_Php

	partial void EnterRule_synpred254_Php_fragment();
	partial void LeaveRule_synpred254_Php_fragment();

	// $ANTLR start synpred254_Php
	private void synpred254_Php_fragment()
	{
		EnterRule_synpred254_Php_fragment();
		EnterRule("synpred254_Php_fragment", 334);
		var retval = new Antlr3CstNode("synpred254_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:67: ( DoubleType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:436:67: DoubleType
			{
			DebugLocation(436, 67);
			Match(input,DoubleType,Follow._DoubleType_in_synpred254_Php2499); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred254_Php_fragment", 334);
			LeaveRule("synpred254_Php_fragment", 334);
			LeaveRule_synpred254_Php_fragment();
		}
	}
	// $ANTLR end synpred254_Php

	partial void EnterRule_synpred255_Php_fragment();
	partial void LeaveRule_synpred255_Php_fragment();

	// $ANTLR start synpred255_Php
	private void synpred255_Php_fragment()
	{
		EnterRule_synpred255_Php_fragment();
		EnterRule("synpred255_Php_fragment", 335);
		var retval = new Antlr3CstNode("synpred255_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:6: ( RealType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:6: RealType
			{
			DebugLocation(437, 6);
			Match(input,RealType,Follow._RealType_in_synpred255_Php2506); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred255_Php_fragment", 335);
			LeaveRule("synpred255_Php_fragment", 335);
			LeaveRule_synpred255_Php_fragment();
		}
	}
	// $ANTLR end synpred255_Php

	partial void EnterRule_synpred256_Php_fragment();
	partial void LeaveRule_synpred256_Php_fragment();

	// $ANTLR start synpred256_Php
	private void synpred256_Php_fragment()
	{
		EnterRule_synpred256_Php_fragment();
		EnterRule("synpred256_Php_fragment", 336);
		var retval = new Antlr3CstNode("synpred256_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:17: ( StringType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:17: StringType
			{
			DebugLocation(437, 17);
			Match(input,StringType,Follow._StringType_in_synpred256_Php2510); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred256_Php_fragment", 336);
			LeaveRule("synpred256_Php_fragment", 336);
			LeaveRule_synpred256_Php_fragment();
		}
	}
	// $ANTLR end synpred256_Php

	partial void EnterRule_synpred257_Php_fragment();
	partial void LeaveRule_synpred257_Php_fragment();

	// $ANTLR start synpred257_Php
	private void synpred257_Php_fragment()
	{
		EnterRule_synpred257_Php_fragment();
		EnterRule("synpred257_Php_fragment", 337);
		var retval = new Antlr3CstNode("synpred257_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:30: ( ObjectType )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:437:30: ObjectType
			{
			DebugLocation(437, 30);
			Match(input,ObjectType,Follow._ObjectType_in_synpred257_Php2514); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred257_Php_fragment", 337);
			LeaveRule("synpred257_Php_fragment", 337);
			LeaveRule_synpred257_Php_fragment();
		}
	}
	// $ANTLR end synpred257_Php

	partial void EnterRule_synpred258_Php_fragment();
	partial void LeaveRule_synpred258_Php_fragment();

	// $ANTLR start synpred258_Php
	private void synpred258_Php_fragment()
	{
		EnterRule_synpred258_Php_fragment();
		EnterRule("synpred258_Php_fragment", 338);
		var retval = new Antlr3CstNode("synpred258_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:443:4: ( constantOrFunctionCall )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:443:4: constantOrFunctionCall
			{
			DebugLocation(443, 4);
			PushFollow(Follow._constantOrFunctionCall_in_synpred258_Php2536);
			constantOrFunctionCall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred258_Php_fragment", 338);
			LeaveRule("synpred258_Php_fragment", 338);
			LeaveRule_synpred258_Php_fragment();
		}
	}
	// $ANTLR end synpred258_Php

	partial void EnterRule_synpred259_Php_fragment();
	partial void LeaveRule_synpred259_Php_fragment();

	// $ANTLR start synpred259_Php
	private void synpred259_Php_fragment()
	{
		EnterRule_synpred259_Php_fragment();
		EnterRule("synpred259_Php_fragment", 339);
		var retval = new Antlr3CstNode("synpred259_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:29: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:29: functionArguments
			{
			DebugLocation(448, 29);
			PushFollow(Follow._functionArguments_in_synpred259_Php2554);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred259_Php_fragment", 339);
			LeaveRule("synpred259_Php_fragment", 339);
			LeaveRule_synpred259_Php_fragment();
		}
	}
	// $ANTLR end synpred259_Php

	partial void EnterRule_synpred260_Php_fragment();
	partial void LeaveRule_synpred260_Php_fragment();

	// $ANTLR start synpred260_Php
	private void synpred260_Php_fragment()
	{
		EnterRule_synpred260_Php_fragment();
		EnterRule("synpred260_Php_fragment", 340);
		var retval = new Antlr3CstNode("synpred260_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:49: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:49: indexer
			{
			DebugLocation(448, 49);
			PushFollow(Follow._indexer_in_synpred260_Php2558);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred260_Php_fragment", 340);
			LeaveRule("synpred260_Php_fragment", 340);
			LeaveRule_synpred260_Php_fragment();
		}
	}
	// $ANTLR end synpred260_Php

	partial void EnterRule_synpred261_Php_fragment();
	partial void LeaveRule_synpred261_Php_fragment();

	// $ANTLR start synpred261_Php
	private void synpred261_Php_fragment()
	{
		EnterRule_synpred261_Php_fragment();
		EnterRule("synpred261_Php_fragment", 341);
		var retval = new Antlr3CstNode("synpred261_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:72: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:72: functionArguments
			{
			DebugLocation(448, 72);
			PushFollow(Follow._functionArguments_in_synpred261_Php2564);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred261_Php_fragment", 341);
			LeaveRule("synpred261_Php_fragment", 341);
			LeaveRule_synpred261_Php_fragment();
		}
	}
	// $ANTLR end synpred261_Php

	partial void EnterRule_synpred262_Php_fragment();
	partial void LeaveRule_synpred262_Php_fragment();

	// $ANTLR start synpred262_Php
	private void synpred262_Php_fragment()
	{
		EnterRule_synpred262_Php_fragment();
		EnterRule("synpred262_Php_fragment", 342);
		var retval = new Antlr3CstNode("synpred262_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:59: ( memberAccess ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:59: memberAccess ( functionArguments )?
			{
			DebugLocation(448, 59);
			PushFollow(Follow._memberAccess_in_synpred262_Php2562);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(448, 72);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:72: ( functionArguments )?
			int alt194=2;
			try { DebugEnterSubRule(194);
			try { DebugEnterDecision(194, false);
			int LA194_1 = input.LA(1);

			if ((LA194_1==OpenRoundBracket))
			{
				alt194 = 1;
			}
			} finally { DebugExitDecision(194); }
			switch (alt194)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:448:72: functionArguments
				{
				DebugLocation(448, 72);
				PushFollow(Follow._functionArguments_in_synpred262_Php2564);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(194); }


			}

		}
		finally
		{
			TraceOut("synpred262_Php_fragment", 342);
			LeaveRule("synpred262_Php_fragment", 342);
			LeaveRule_synpred262_Php_fragment();
		}
	}
	// $ANTLR end synpred262_Php

	partial void EnterRule_synpred263_Php_fragment();
	partial void LeaveRule_synpred263_Php_fragment();

	// $ANTLR start synpred263_Php
	private void synpred263_Php_fragment()
	{
		EnterRule_synpred263_Php_fragment();
		EnterRule("synpred263_Php_fragment", 343);
		var retval = new Antlr3CstNode("synpred263_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:48: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:48: indexer
			{
			DebugLocation(452, 48);
			PushFollow(Follow._indexer_in_synpred263_Php2583);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred263_Php_fragment", 343);
			LeaveRule("synpred263_Php_fragment", 343);
			LeaveRule_synpred263_Php_fragment();
		}
	}
	// $ANTLR end synpred263_Php

	partial void EnterRule_synpred264_Php_fragment();
	partial void LeaveRule_synpred264_Php_fragment();

	// $ANTLR start synpred264_Php
	private void synpred264_Php_fragment()
	{
		EnterRule_synpred264_Php_fragment();
		EnterRule("synpred264_Php_fragment", 344);
		var retval = new Antlr3CstNode("synpred264_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:71: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:71: functionArguments
			{
			DebugLocation(452, 71);
			PushFollow(Follow._functionArguments_in_synpred264_Php2589);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred264_Php_fragment", 344);
			LeaveRule("synpred264_Php_fragment", 344);
			LeaveRule_synpred264_Php_fragment();
		}
	}
	// $ANTLR end synpred264_Php

	partial void EnterRule_synpred265_Php_fragment();
	partial void LeaveRule_synpred265_Php_fragment();

	// $ANTLR start synpred265_Php
	private void synpred265_Php_fragment()
	{
		EnterRule_synpred265_Php_fragment();
		EnterRule("synpred265_Php_fragment", 345);
		var retval = new Antlr3CstNode("synpred265_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:58: ( memberAccess ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:58: memberAccess ( functionArguments )?
			{
			DebugLocation(452, 58);
			PushFollow(Follow._memberAccess_in_synpred265_Php2587);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(452, 71);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:71: ( functionArguments )?
			int alt195=2;
			try { DebugEnterSubRule(195);
			try { DebugEnterDecision(195, false);
			int LA195_1 = input.LA(1);

			if ((LA195_1==OpenRoundBracket))
			{
				alt195 = 1;
			}
			} finally { DebugExitDecision(195); }
			switch (alt195)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:71: functionArguments
				{
				DebugLocation(452, 71);
				PushFollow(Follow._functionArguments_in_synpred265_Php2589);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(195); }


			}

		}
		finally
		{
			TraceOut("synpred265_Php_fragment", 345);
			LeaveRule("synpred265_Php_fragment", 345);
			LeaveRule_synpred265_Php_fragment();
		}
	}
	// $ANTLR end synpred265_Php

	partial void EnterRule_synpred266_Php_fragment();
	partial void LeaveRule_synpred266_Php_fragment();

	// $ANTLR start synpred266_Php
	private void synpred266_Php_fragment()
	{
		EnterRule_synpred266_Php_fragment();
		EnterRule("synpred266_Php_fragment", 346);
		var retval = new Antlr3CstNode("synpred266_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:4: ( constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:4: constantOrStaticAccessor functionArguments ( indexer | memberAccess ( functionArguments )? )*
			{
			DebugLocation(452, 4);
			PushFollow(Follow._constantOrStaticAccessor_in_synpred266_Php2578);
			constantOrStaticAccessor();
			PopFollow();
			if (state.failed) return;
			DebugLocation(452, 29);
			PushFollow(Follow._functionArguments_in_synpred266_Php2580);
			functionArguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(452, 47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:47: ( indexer | memberAccess ( functionArguments )? )*
			try { DebugEnterSubRule(197);
			while (true)
			{
				int alt197=3;
				try { DebugEnterDecision(197, false);
				int LA197_1 = input.LA(1);

				if ((LA197_1==OpenCurlyBracket||LA197_1==OpenSquareBracket))
				{
					alt197 = 1;
				}
				else if ((LA197_1==InstanceMember))
				{
					alt197 = 2;
				}


				} finally { DebugExitDecision(197); }
				switch ( alt197 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:48: indexer
					{
					DebugLocation(452, 48);
					PushFollow(Follow._indexer_in_synpred266_Php2583);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:58: memberAccess ( functionArguments )?
					{
					DebugLocation(452, 58);
					PushFollow(Follow._memberAccess_in_synpred266_Php2587);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(452, 71);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:71: ( functionArguments )?
					int alt196=2;
					try { DebugEnterSubRule(196);
					try { DebugEnterDecision(196, false);
					int LA196_1 = input.LA(1);

					if ((LA196_1==OpenRoundBracket))
					{
						alt196 = 1;
					}
					} finally { DebugExitDecision(196); }
					switch (alt196)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:452:71: functionArguments
						{
						DebugLocation(452, 71);
						PushFollow(Follow._functionArguments_in_synpred266_Php2589);
						functionArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(196); }


					}
					break;

				default:
					goto loop197;
				}
			}

			loop197:
				;

			} finally { DebugExitSubRule(197); }


			}

		}
		finally
		{
			TraceOut("synpred266_Php_fragment", 346);
			LeaveRule("synpred266_Php_fragment", 346);
			LeaveRule_synpred266_Php_fragment();
		}
	}
	// $ANTLR end synpred266_Php

	partial void EnterRule_synpred267_Php_fragment();
	partial void LeaveRule_synpred267_Php_fragment();

	// $ANTLR start synpred267_Php
	private void synpred267_Php_fragment()
	{
		EnterRule_synpred267_Php_fragment();
		EnterRule("synpred267_Php_fragment", 347);
		var retval = new Antlr3CstNode("synpred267_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:30: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:30: indexer
			{
			DebugLocation(453, 30);
			PushFollow(Follow._indexer_in_synpred267_Php2600);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred267_Php_fragment", 347);
			LeaveRule("synpred267_Php_fragment", 347);
			LeaveRule_synpred267_Php_fragment();
		}
	}
	// $ANTLR end synpred267_Php

	partial void EnterRule_synpred268_Php_fragment();
	partial void LeaveRule_synpred268_Php_fragment();

	// $ANTLR start synpred268_Php
	private void synpred268_Php_fragment()
	{
		EnterRule_synpred268_Php_fragment();
		EnterRule("synpred268_Php_fragment", 348);
		var retval = new Antlr3CstNode("synpred268_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:53: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:53: functionArguments
			{
			DebugLocation(453, 53);
			PushFollow(Follow._functionArguments_in_synpred268_Php2606);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred268_Php_fragment", 348);
			LeaveRule("synpred268_Php_fragment", 348);
			LeaveRule_synpred268_Php_fragment();
		}
	}
	// $ANTLR end synpred268_Php

	partial void EnterRule_synpred269_Php_fragment();
	partial void LeaveRule_synpred269_Php_fragment();

	// $ANTLR start synpred269_Php
	private void synpred269_Php_fragment()
	{
		EnterRule_synpred269_Php_fragment();
		EnterRule("synpred269_Php_fragment", 349);
		var retval = new Antlr3CstNode("synpred269_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:40: ( memberAccess ( functionArguments )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:40: memberAccess ( functionArguments )?
			{
			DebugLocation(453, 40);
			PushFollow(Follow._memberAccess_in_synpred269_Php2604);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(453, 53);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:53: ( functionArguments )?
			int alt198=2;
			try { DebugEnterSubRule(198);
			try { DebugEnterDecision(198, false);
			int LA198_1 = input.LA(1);

			if ((LA198_1==OpenRoundBracket))
			{
				alt198 = 1;
			}
			} finally { DebugExitDecision(198); }
			switch (alt198)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:53: functionArguments
				{
				DebugLocation(453, 53);
				PushFollow(Follow._functionArguments_in_synpred269_Php2606);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(198); }


			}

		}
		finally
		{
			TraceOut("synpred269_Php_fragment", 349);
			LeaveRule("synpred269_Php_fragment", 349);
			LeaveRule_synpred269_Php_fragment();
		}
	}
	// $ANTLR end synpred269_Php

	partial void EnterRule_synpred270_Php_fragment();
	partial void LeaveRule_synpred270_Php_fragment();

	// $ANTLR start synpred270_Php
	private void synpred270_Php_fragment()
	{
		EnterRule_synpred270_Php_fragment();
		EnterRule("synpred270_Php_fragment", 350);
		var retval = new Antlr3CstNode("synpred270_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:4: ( constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:4: constantOrStaticAccessor ( indexer | memberAccess ( functionArguments )? )+
			{
			DebugLocation(453, 4);
			PushFollow(Follow._constantOrStaticAccessor_in_synpred270_Php2597);
			constantOrStaticAccessor();
			PopFollow();
			if (state.failed) return;
			DebugLocation(453, 29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:29: ( indexer | memberAccess ( functionArguments )? )+
			int cnt200=0;
			try { DebugEnterSubRule(200);
			while (true)
			{
				int alt200=3;
				try { DebugEnterDecision(200, false);
				int LA200_1 = input.LA(1);

				if ((LA200_1==OpenCurlyBracket||LA200_1==OpenSquareBracket))
				{
					alt200 = 1;
				}
				else if ((LA200_1==InstanceMember))
				{
					alt200 = 2;
				}


				} finally { DebugExitDecision(200); }
				switch (alt200)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:30: indexer
					{
					DebugLocation(453, 30);
					PushFollow(Follow._indexer_in_synpred270_Php2600);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:40: memberAccess ( functionArguments )?
					{
					DebugLocation(453, 40);
					PushFollow(Follow._memberAccess_in_synpred270_Php2604);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(453, 53);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:53: ( functionArguments )?
					int alt199=2;
					try { DebugEnterSubRule(199);
					try { DebugEnterDecision(199, false);
					int LA199_1 = input.LA(1);

					if ((LA199_1==OpenRoundBracket))
					{
						alt199 = 1;
					}
					} finally { DebugExitDecision(199); }
					switch (alt199)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:453:53: functionArguments
						{
						DebugLocation(453, 53);
						PushFollow(Follow._functionArguments_in_synpred270_Php2606);
						functionArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(199); }


					}
					break;

				default:
					if (cnt200 >= 1)
						goto loop200;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee200 = new EarlyExitException( 200, input );
					DebugRecognitionException(eee200);
					throw eee200;
				}
				cnt200++;
			}
			loop200:
				;

			} finally { DebugExitSubRule(200); }


			}

		}
		finally
		{
			TraceOut("synpred270_Php_fragment", 350);
			LeaveRule("synpred270_Php_fragment", 350);
			LeaveRule_synpred270_Php_fragment();
		}
	}
	// $ANTLR end synpred270_Php

	partial void EnterRule_synpred271_Php_fragment();
	partial void LeaveRule_synpred271_Php_fragment();

	// $ANTLR start synpred271_Php
	private void synpred271_Php_fragment()
	{
		EnterRule_synpred271_Php_fragment();
		EnterRule("synpred271_Php_fragment", 351);
		var retval = new Antlr3CstNode("synpred271_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:27: ( functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:454:27: functionArguments
			{
			DebugLocation(454, 27);
			PushFollow(Follow._functionArguments_in_synpred271_Php2616);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred271_Php_fragment", 351);
			LeaveRule("synpred271_Php_fragment", 351);
			LeaveRule_synpred271_Php_fragment();
		}
	}
	// $ANTLR end synpred271_Php

	partial void EnterRule_synpred272_Php_fragment();
	partial void LeaveRule_synpred272_Php_fragment();

	// $ANTLR start synpred272_Php
	private void synpred272_Php_fragment()
	{
		EnterRule_synpred272_Php_fragment();
		EnterRule("synpred272_Php_fragment", 352);
		var retval = new Antlr3CstNode("synpred272_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:5: ( variableOrStaticAccessor )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:5: variableOrStaticAccessor
			{
			DebugLocation(462, 5);
			PushFollow(Follow._variableOrStaticAccessor_in_synpred272_Php2637);
			variableOrStaticAccessor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred272_Php_fragment", 352);
			LeaveRule("synpred272_Php_fragment", 352);
			LeaveRule_synpred272_Php_fragment();
		}
	}
	// $ANTLR end synpred272_Php

	partial void EnterRule_synpred275_Php_fragment();
	partial void LeaveRule_synpred275_Php_fragment();

	// $ANTLR start synpred275_Php
	private void synpred275_Php_fragment()
	{
		EnterRule_synpred275_Php_fragment();
		EnterRule("synpred275_Php_fragment", 355);
		var retval = new Antlr3CstNode("synpred275_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:16: ( memberAccess )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:16: memberAccess
			{
			DebugLocation(464, 16);
			PushFollow(Follow._memberAccess_in_synpred275_Php2659);
			memberAccess();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred275_Php_fragment", 355);
			LeaveRule("synpred275_Php_fragment", 355);
			LeaveRule_synpred275_Php_fragment();
		}
	}
	// $ANTLR end synpred275_Php

	partial void EnterRule_synpred276_Php_fragment();
	partial void LeaveRule_synpred276_Php_fragment();

	// $ANTLR start synpred276_Php
	private void synpred276_Php_fragment()
	{
		EnterRule_synpred276_Php_fragment();
		EnterRule("synpred276_Php_fragment", 356);
		var retval = new Antlr3CstNode("synpred276_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:5: ( ( indexer | memberAccess )* memberAccess functionArguments )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:5: ( indexer | memberAccess )* memberAccess functionArguments
			{
			DebugLocation(464, 5);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:5: ( indexer | memberAccess )*
			try { DebugEnterSubRule(201);
			while (true)
			{
				int alt201=3;
				try { DebugEnterDecision(201, false);
				int LA201_1 = input.LA(1);

				if ((LA201_1==InstanceMember))
				{
					int LA201_2 = input.LA(2);

					if ((EvaluatePredicate(synpred275_Php_fragment)))
					{
						alt201 = 2;
					}


				}
				else if ((LA201_1==OpenCurlyBracket||LA201_1==OpenSquareBracket))
				{
					alt201 = 1;
				}


				} finally { DebugExitDecision(201); }
				switch ( alt201 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:6: indexer
					{
					DebugLocation(464, 6);
					PushFollow(Follow._indexer_in_synpred276_Php2655);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:16: memberAccess
					{
					DebugLocation(464, 16);
					PushFollow(Follow._memberAccess_in_synpred276_Php2659);
					memberAccess();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop201;
				}
			}

			loop201:
				;

			} finally { DebugExitSubRule(201); }

			DebugLocation(464, 31);
			PushFollow(Follow._memberAccess_in_synpred276_Php2663);
			memberAccess();
			PopFollow();
			if (state.failed) return;
			DebugLocation(464, 44);
			PushFollow(Follow._functionArguments_in_synpred276_Php2665);
			functionArguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred276_Php_fragment", 356);
			LeaveRule("synpred276_Php_fragment", 356);
			LeaveRule_synpred276_Php_fragment();
		}
	}
	// $ANTLR end synpred276_Php

	partial void EnterRule_synpred277_Php_fragment();
	partial void LeaveRule_synpred277_Php_fragment();

	// $ANTLR start synpred277_Php
	private void synpred277_Php_fragment()
	{
		EnterRule_synpred277_Php_fragment();
		EnterRule("synpred277_Php_fragment", 357);
		var retval = new Antlr3CstNode("synpred277_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:465:5: ( indexer )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:465:5: indexer
			{
			DebugLocation(465, 5);
			PushFollow(Follow._indexer_in_synpred277_Php2673);
			indexer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred277_Php_fragment", 357);
			LeaveRule("synpred277_Php_fragment", 357);
			LeaveRule_synpred277_Php_fragment();
		}
	}
	// $ANTLR end synpred277_Php

	partial void EnterRule_synpred278_Php_fragment();
	partial void LeaveRule_synpred278_Php_fragment();

	// $ANTLR start synpred278_Php
	private void synpred278_Php_fragment()
	{
		EnterRule_synpred278_Php_fragment();
		EnterRule("synpred278_Php_fragment", 358);
		var retval = new Antlr3CstNode("synpred278_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:465:15: ( memberAccess )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:465:15: memberAccess
			{
			DebugLocation(465, 15);
			PushFollow(Follow._memberAccess_in_synpred278_Php2677);
			memberAccess();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred278_Php_fragment", 358);
			LeaveRule("synpred278_Php_fragment", 358);
			LeaveRule_synpred278_Php_fragment();
		}
	}
	// $ANTLR end synpred278_Php

	partial void EnterRule_synpred279_Php_fragment();
	partial void LeaveRule_synpred279_Php_fragment();

	// $ANTLR start synpred279_Php
	private void synpred279_Php_fragment()
	{
		EnterRule_synpred279_Php_fragment();
		EnterRule("synpred279_Php_fragment", 359);
		var retval = new Antlr3CstNode("synpred279_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:4: ( ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:4: ( variableOrStaticAccessor | constantOrStaticAccessor ) ( functionArguments )? ( ( indexer | memberAccess )* memberAccess functionArguments )* ( indexer | memberAccess )+
			{
			DebugLocation(462, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:4: ( variableOrStaticAccessor | constantOrStaticAccessor )
			int alt202=2;
			try { DebugEnterSubRule(202);
			try { DebugEnterDecision(202, false);
			switch (input.LA(1))
			{
			case VariableName:
				{
				int LA202_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_Php_fragment)))
				{
					alt202 = 1;
				}
				else if ((true))
				{
					alt202 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 202, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA202_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_Php_fragment)))
				{
					alt202 = 1;
				}
				else if ((true))
				{
					alt202 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 202, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA202_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_Php_fragment)))
				{
					alt202 = 1;
				}
				else if ((true))
				{
					alt202 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 202, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Abstract:
			case And:
			case As:
			case BoolType:
			case BooleanType:
			case Break:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Default:
			case Die:
			case Do:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case Eval:
			case Exit:
			case Extends:
			case False:
			case Finally:
			case FloatType:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case HaltCompiler:
			case If:
			case Implements:
			case Include:
			case IncludeOnce:
			case Instanceof:
			case IntType:
			case IntegerType:
			case Interface:
			case Isset:
			case List:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Or:
			case Print:
			case Private:
			case Protected:
			case Public:
			case RealType:
			case Require:
			case RequireOnce:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case True:
			case Try:
			case UnquotedString:
			case Use:
			case Var:
			case While:
			case Xor:
				{
				int LA202_2 = input.LA(2);

				if ((EvaluatePredicate(synpred272_Php_fragment)))
				{
					alt202 = 1;
				}
				else if ((true))
				{
					alt202 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 202, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 202, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(202); }
			switch (alt202)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:5: variableOrStaticAccessor
				{
				DebugLocation(462, 5);
				PushFollow(Follow._variableOrStaticAccessor_in_synpred279_Php2637);
				variableOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:462:32: constantOrStaticAccessor
				{
				DebugLocation(462, 32);
				PushFollow(Follow._constantOrStaticAccessor_in_synpred279_Php2641);
				constantOrStaticAccessor();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(202); }

			DebugLocation(463, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:463:4: ( functionArguments )?
			int alt203=2;
			try { DebugEnterSubRule(203);
			try { DebugEnterDecision(203, false);
			int LA203_1 = input.LA(1);

			if ((LA203_1==OpenRoundBracket))
			{
				alt203 = 1;
			}
			} finally { DebugExitDecision(203); }
			switch (alt203)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:463:4: functionArguments
				{
				DebugLocation(463, 4);
				PushFollow(Follow._functionArguments_in_synpred279_Php2647);
				functionArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(203); }

			DebugLocation(464, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:4: ( ( indexer | memberAccess )* memberAccess functionArguments )*
			try { DebugEnterSubRule(205);
			while (true)
			{
				int alt205=2;
				try { DebugEnterDecision(205, false);
				switch (input.LA(1))
				{
				case OpenSquareBracket:
					{
					int LA205_2 = input.LA(2);

					if ((EvaluatePredicate(synpred276_Php_fragment)))
					{
						alt205 = 1;
					}


					}
					break;
				case OpenCurlyBracket:
					{
					int LA205_2 = input.LA(2);

					if ((EvaluatePredicate(synpred276_Php_fragment)))
					{
						alt205 = 1;
					}


					}
					break;
				case InstanceMember:
					{
					int LA205_2 = input.LA(2);

					if ((EvaluatePredicate(synpred276_Php_fragment)))
					{
						alt205 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(205); }
				switch ( alt205 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:5: ( indexer | memberAccess )* memberAccess functionArguments
					{
					DebugLocation(464, 5);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:5: ( indexer | memberAccess )*
					try { DebugEnterSubRule(204);
					while (true)
					{
						int alt204=3;
						try { DebugEnterDecision(204, false);
						int LA204_1 = input.LA(1);

						if ((LA204_1==InstanceMember))
						{
							int LA204_2 = input.LA(2);

							if ((EvaluatePredicate(synpred275_Php_fragment)))
							{
								alt204 = 2;
							}


						}
						else if ((LA204_1==OpenCurlyBracket||LA204_1==OpenSquareBracket))
						{
							alt204 = 1;
						}


						} finally { DebugExitDecision(204); }
						switch ( alt204 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:6: indexer
							{
							DebugLocation(464, 6);
							PushFollow(Follow._indexer_in_synpred279_Php2655);
							indexer();
							PopFollow();
							if (state.failed) return;

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:464:16: memberAccess
							{
							DebugLocation(464, 16);
							PushFollow(Follow._memberAccess_in_synpred279_Php2659);
							memberAccess();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop204;
						}
					}

					loop204:
						;

					} finally { DebugExitSubRule(204); }

					DebugLocation(464, 31);
					PushFollow(Follow._memberAccess_in_synpred279_Php2663);
					memberAccess();
					PopFollow();
					if (state.failed) return;
					DebugLocation(464, 44);
					PushFollow(Follow._functionArguments_in_synpred279_Php2665);
					functionArguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop205;
				}
			}

			loop205:
				;

			} finally { DebugExitSubRule(205); }

			DebugLocation(465, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:465:4: ( indexer | memberAccess )+
			int cnt206=0;
			try { DebugEnterSubRule(206);
			while (true)
			{
				int alt206=3;
				try { DebugEnterDecision(206, false);
				int LA206_1 = input.LA(1);

				if ((LA206_1==OpenCurlyBracket||LA206_1==OpenSquareBracket))
				{
					alt206 = 1;
				}
				else if ((LA206_1==InstanceMember))
				{
					alt206 = 2;
				}


				} finally { DebugExitDecision(206); }
				switch (alt206)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:465:5: indexer
					{
					DebugLocation(465, 5);
					PushFollow(Follow._indexer_in_synpred279_Php2673);
					indexer();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:465:15: memberAccess
					{
					DebugLocation(465, 15);
					PushFollow(Follow._memberAccess_in_synpred279_Php2677);
					memberAccess();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt206 >= 1)
						goto loop206;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee206 = new EarlyExitException( 206, input );
					DebugRecognitionException(eee206);
					throw eee206;
				}
				cnt206++;
			}
			loop206:
				;

			} finally { DebugExitSubRule(206); }


			}

		}
		finally
		{
			TraceOut("synpred279_Php_fragment", 359);
			LeaveRule("synpred279_Php_fragment", 359);
			LeaveRule_synpred279_Php_fragment();
		}
	}
	// $ANTLR end synpred279_Php

	partial void EnterRule_synpred281_Php_fragment();
	partial void LeaveRule_synpred281_Php_fragment();

	// $ANTLR start synpred281_Php
	private void synpred281_Php_fragment()
	{
		EnterRule_synpred281_Php_fragment();
		EnterRule("synpred281_Php_fragment", 361);
		var retval = new Antlr3CstNode("synpred281_Php_fragment");
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:4: ( ( variable | qualifiedName ) '::' variable )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:4: ( variable | qualifiedName ) '::' variable
			{
			DebugLocation(470, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:4: ( variable | qualifiedName )
			int alt207=2;
			try { DebugEnterSubRule(207);
			try { DebugEnterDecision(207, false);
			int LA207_1 = input.LA(1);

			if ((LA207_1==VariableName||LA207_1==129))
			{
				alt207 = 1;
			}
			else if ((LA207_1==Abstract||LA207_1==And||LA207_1==As||(LA207_1>=BoolType && LA207_1<=Class)||LA207_1==Clone||(LA207_1>=Const && LA207_1<=Continue)||(LA207_1>=Default && LA207_1<=Die)||LA207_1==Do||(LA207_1>=DoubleType && LA207_1<=Empty)||(LA207_1>=Eval && LA207_1<=Exit)||(LA207_1>=Extends && LA207_1<=Foreach)||(LA207_1>=Function && LA207_1<=HaltCompiler)||(LA207_1>=If && LA207_1<=IncludeOnce)||(LA207_1>=Instanceof && LA207_1<=IntType)||(LA207_1>=IntegerType && LA207_1<=List)||(LA207_1>=Namespace && LA207_1<=Null)||LA207_1==ObjectType||LA207_1==Or||(LA207_1>=Print && LA207_1<=Public)||(LA207_1>=RealType && LA207_1<=Return)||(LA207_1>=Static && LA207_1<=StringType)||(LA207_1>=Switch && LA207_1<=Throw)||(LA207_1>=True && LA207_1<=Try)||LA207_1==UnquotedString||(LA207_1>=Use && LA207_1<=Var)||LA207_1==While||LA207_1==Xor||LA207_1==130))
			{
				alt207 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 207, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:5: variable
				{
				DebugLocation(470, 5);
				PushFollow(Follow._variable_in_synpred281_Php2696);
				variable();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Languages\\ANTLRv3\\Generators\\Php\\Php.g:470:16: qualifiedName
				{
				DebugLocation(470, 16);
				PushFollow(Follow._qualifiedName_in_synpred281_Php2700);
				qualifiedName();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(207); }

			DebugLocation(470, 31);
			Match(input,ClassMember,Follow._ClassMember_in_synpred281_Php2703); if (state.failed) return;
			DebugLocation(470, 36);
			PushFollow(Follow._variable_in_synpred281_Php2705);
			variable();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred281_Php_fragment", 361);
			LeaveRule("synpred281_Php_fragment", 361);
			LeaveRule_synpred281_Php_fragment();
		}
	}
	// $ANTLR end synpred281_Php
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA1 dfa1;
	private DFA2 dfa2;
	private DFA8 dfa8;
	private DFA22 dfa22;
	private DFA36 dfa36;
	private DFA38 dfa38;
	private DFA39 dfa39;
	private DFA41 dfa41;
	private DFA43 dfa43;
	private DFA44 dfa44;
	private DFA55 dfa55;
	private DFA57 dfa57;
	private DFA120 dfa120;
	private DFA140 dfa140;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa1 = new DFA1( this, SpecialStateTransition1 );
		dfa2 = new DFA2( this, SpecialStateTransition2 );
		dfa8 = new DFA8( this, SpecialStateTransition8 );
		dfa22 = new DFA22( this );
		dfa36 = new DFA36( this, SpecialStateTransition36 );
		dfa38 = new DFA38( this, SpecialStateTransition38 );
		dfa39 = new DFA39( this, SpecialStateTransition39 );
		dfa41 = new DFA41( this, SpecialStateTransition41 );
		dfa43 = new DFA43( this, SpecialStateTransition43 );
		dfa44 = new DFA44( this, SpecialStateTransition44 );
		dfa55 = new DFA55( this, SpecialStateTransition55 );
		dfa57 = new DFA57( this, SpecialStateTransition57 );
		dfa120 = new DFA120( this, SpecialStateTransition120 );
		dfa140 = new DFA140( this );
	}

	private class DFA1 : DFA
	{
		private const string DFA1_eotS =
			"\x2A\xFFFF";
		private const string DFA1_eofS =
			"\x2\x2\x28\xFFFF";
		private const string DFA1_minS =
			"\x2\x4\x1\xFFFF\x6\x4\x1\x5A\x1\x5\x1\x4\x1\xFFFF\x5\x4\x1\x0\x4\x5\x1"+
			"\x5A\x1\x5\x1\x0\x1\x4\x1\x0\x1\x4\x1\x0\x1\x4\x1\x0\x1\x4\x1\x0\x4\x5"+
			"\x4\x0";
		private const string DFA1_maxS =
			"\x2\x82\x1\xFFFF\x1\x82\x1\x80\x6\x82\x1\x80\x1\xFFFF\x5\x80\x1\x0\x6"+
			"\x82\x1\x0\x1\x80\x1\x0\x1\x80\x1\x0\x1\x80\x1\x0\x1\x80\x1\x0\x4\x82"+
			"\x4\x0";
		private const string DFA1_acceptS =
			"\x2\xFFFF\x1\x2\x9\xFFFF\x1\x1\x1D\xFFFF";
		private const string DFA1_specialS =
			"\x12\xFFFF\x1\x0\x6\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
			"\x1\x4\x1\xFFFF\x1\x5\x4\xFFFF\x1\x6\x1\x7\x1\x8\x1\x9}>";
		private static readonly string[] DFA1_transitionS =
			{
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x1\x1\x2\xFFFF\x6\x2\x1\xFFFF\x1"+
				"\x2\x6\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF"+
				"\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1"+
				"\xFFFF\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4"+
				"\x2\x2\xFFFF\x5\x2\x1\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2",
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x2\xFFFF\x6\x2\x1\xFFFF\x1\x2\x6"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1\xFFFF"+
				"\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x3\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4"+
				"\x2\x2\xFFFF\x5\x2\x1\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2",
				"",
				"\x1\x9\x1\x2\x1\x6\x2\xFFFF\x1\x9\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x6\x9\x1\x2\x1\x9\x5\xFFFF\x1\x2\x2\x9\x2\xFFFF\x2\x9\x1\xFFFF\x1\x9"+
				"\x1\x2\x1\xFFFF\x5\x9\x1\xFFFF\x1\x2\x2\xFFFF\x2\x9\x1\xFFFF\x6\x9\x1"+
				"\x2\x4\x9\x1\x2\x3\xFFFF\x4\x9\x1\xFFFF\x1\x2\x1\x5\x1\x9\x1\xFFFF\x4"+
				"\x9\x3\x2\x1\xFFFF\x3\x9\x1\xFFFF\x1\x9\x1\xFFFF\x3\x2\x1\x8\x3\x2\x4"+
				"\x9\x1\x2\x1\xFFFF\x4\x9\x2\x2\x2\xFFFF\x2\x9\x1\xFFFF\x2\x9\x1\xFFFF"+
				"\x2\x9\x1\xFFFF\x1\x9\x2\xFFFF\x2\x9\x1\xFFFF\x1\x9\x1\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x4",
				"\x1\xA\x1\xFFFF\x1\xA\x2\xFFFF\x1\xA\x6\xFFFF\x6\xA\x1\xFFFF\x1\xA\x6"+
				"\xFFFF\x2\xA\x2\xFFFF\x2\xA\x1\xFFFF\x1\xA\x2\xFFFF\x5\xA\x4\xFFFF\x2"+
				"\xA\x1\xFFFF\x6\xA\x1\xFFFF\x4\xA\x4\xFFFF\x4\xA\x2\xFFFF\x2\xA\x1\xFFFF"+
				"\x4\xA\x4\xFFFF\x3\xA\x1\xFFFF\x1\xA\x4\xFFFF\x1\xA\x3\xFFFF\x4\xA\x2"+
				"\xFFFF\x4\xA\x4\xFFFF\x2\xA\x1\xFFFF\x2\xA\x1\xFFFF\x2\xA\x1\xFFFF\x1"+
				"\xA\x2\xFFFF\x2\xA\x1\xFFFF\x1\xA\x1\xFFFF\x1\xA",
				"\x3\x2\x1\xFFFF\x2\x2\x6\xFFFF\x6\x2\x1\xFFFF\x1\x2\x6\xFFFF\x2\x2\x2"+
				"\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2\x2\x1\xFFFF\x6"+
				"\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1\xFFFF\x7\x2\x2\xFFFF"+
				"\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2\xFFFF\x5\x2\x1"+
				"\xFFFF\x5\x2\x1\xC\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x5\x2\x1\xFFFF\x2\x2\x1\xB",
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x6\x2\x1\xFFFF\x1\x2\x6"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1\xFFFF"+
				"\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2"+
				"\xFFFF\x5\x2\x1\xFFFF\x5\x2\x1\xC\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xD",
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x6\x2\x1\xFFFF\x1\x2\x6"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1\xFFFF"+
				"\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2"+
				"\xFFFF\x5\x2\x1\xFFFF\x5\x2\x1\xC\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xE",
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x3\xFFFF\x6\x2\x1\xFFFF\x1\x2\x6"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x6\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF\x5\x2\x1\xFFFF"+
				"\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2\x2"+
				"\xFFFF\x5\x2\x1\xFFFF\x5\x2\x1\xC\x1\xFFFF\x1\x2\x1\xFFFF\x8\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xF",
				"\x1\x2\x10\xFFFF\x1\xC\x16\xFFFF\x1\x10",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x12\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x11",
				"\x1\x13\x1\xFFFF\x1\x13\x2\xFFFF\x1\x13\x6\xFFFF\x6\x13\x1\xFFFF\x1"+
				"\x13\x6\xFFFF\x2\x13\x2\xFFFF\x2\x13\x1\xFFFF\x1\x13\x2\xFFFF\x5\x13"+
				"\x4\xFFFF\x2\x13\x1\xFFFF\x6\x13\x1\xFFFF\x4\x13\x4\xFFFF\x4\x13\x2"+
				"\xFFFF\x2\x13\x1\xFFFF\x4\x13\x4\xFFFF\x3\x13\x1\xFFFF\x1\x13\x4\xFFFF"+
				"\x1\x13\x3\xFFFF\x4\x13\x2\xFFFF\x4\x13\x4\xFFFF\x2\x13\x1\xFFFF\x2"+
				"\x13\x1\xFFFF\x2\x13\x1\xFFFF\x1\x13\x2\xFFFF\x2\x13\x1\xFFFF\x1\x13"+
				"\x1\xFFFF\x1\x13",
				"",
				"\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x6\xFFFF\x6\x14\x1\xFFFF\x1"+
				"\x14\x6\xFFFF\x2\x14\x2\xFFFF\x2\x14\x1\xFFFF\x1\x14\x2\xFFFF\x5\x14"+
				"\x4\xFFFF\x2\x14\x1\xFFFF\x6\x14\x1\xFFFF\x4\x14\x4\xFFFF\x4\x14\x2"+
				"\xFFFF\x2\x14\x1\xFFFF\x4\x14\x4\xFFFF\x3\x14\x1\xFFFF\x1\x14\x4\xFFFF"+
				"\x1\x14\x3\xFFFF\x4\x14\x2\xFFFF\x4\x14\x4\xFFFF\x2\x14\x1\xFFFF\x2"+
				"\x14\x1\xFFFF\x2\x14\x1\xFFFF\x1\x14\x2\xFFFF\x2\x14\x1\xFFFF\x1\x14"+
				"\x1\xFFFF\x1\x14",
				"\x1\x15\x1\xFFFF\x1\x15\x2\xFFFF\x1\x15\x6\xFFFF\x6\x15\x1\xFFFF\x1"+
				"\x15\x6\xFFFF\x2\x15\x2\xFFFF\x2\x15\x1\xFFFF\x1\x15\x2\xFFFF\x5\x15"+
				"\x4\xFFFF\x2\x15\x1\xFFFF\x6\x15\x1\xFFFF\x4\x15\x4\xFFFF\x4\x15\x2"+
				"\xFFFF\x2\x15\x1\xFFFF\x4\x15\x4\xFFFF\x3\x15\x1\xFFFF\x1\x15\x4\xFFFF"+
				"\x1\x15\x3\xFFFF\x4\x15\x2\xFFFF\x4\x15\x4\xFFFF\x2\x15\x1\xFFFF\x2"+
				"\x15\x1\xFFFF\x2\x15\x1\xFFFF\x1\x15\x2\xFFFF\x2\x15\x1\xFFFF\x1\x15"+
				"\x1\xFFFF\x1\x15",
				"\x1\x16\x1\xFFFF\x1\x16\x2\xFFFF\x1\x16\x6\xFFFF\x6\x16\x1\xFFFF\x1"+
				"\x16\x6\xFFFF\x2\x16\x2\xFFFF\x2\x16\x1\xFFFF\x1\x16\x2\xFFFF\x5\x16"+
				"\x4\xFFFF\x2\x16\x1\xFFFF\x6\x16\x1\xFFFF\x4\x16\x4\xFFFF\x4\x16\x2"+
				"\xFFFF\x2\x16\x1\xFFFF\x4\x16\x4\xFFFF\x3\x16\x1\xFFFF\x1\x16\x4\xFFFF"+
				"\x1\x16\x3\xFFFF\x4\x16\x2\xFFFF\x4\x16\x4\xFFFF\x2\x16\x1\xFFFF\x2"+
				"\x16\x1\xFFFF\x2\x16\x1\xFFFF\x1\x16\x2\xFFFF\x2\x16\x1\xFFFF\x1\x16"+
				"\x1\xFFFF\x1\x16",
				"\x1\x17\x1\xFFFF\x1\x17\x2\xFFFF\x1\x17\x6\xFFFF\x6\x17\x1\xFFFF\x1"+
				"\x17\x6\xFFFF\x2\x17\x2\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x5\x17"+
				"\x4\xFFFF\x2\x17\x1\xFFFF\x6\x17\x1\xFFFF\x4\x17\x4\xFFFF\x4\x17\x2"+
				"\xFFFF\x2\x17\x1\xFFFF\x4\x17\x4\xFFFF\x3\x17\x1\xFFFF\x1\x17\x4\xFFFF"+
				"\x1\x17\x3\xFFFF\x4\x17\x2\xFFFF\x4\x17\x4\xFFFF\x2\x17\x1\xFFFF\x2"+
				"\x17\x1\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x2\x17\x1\xFFFF\x1\x17"+
				"\x1\xFFFF\x1\x17",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x6\xFFFF\x6\x18\x1\xFFFF\x1"+
				"\x18\x6\xFFFF\x2\x18\x2\xFFFF\x2\x18\x1\xFFFF\x1\x18\x2\xFFFF\x5\x18"+
				"\x4\xFFFF\x2\x18\x1\xFFFF\x6\x18\x1\xFFFF\x4\x18\x4\xFFFF\x4\x18\x2"+
				"\xFFFF\x2\x18\x1\xFFFF\x4\x18\x4\xFFFF\x3\x18\x1\xFFFF\x1\x18\x4\xFFFF"+
				"\x1\x18\x3\xFFFF\x4\x18\x2\xFFFF\x4\x18\x4\xFFFF\x2\x18\x1\xFFFF\x2"+
				"\x18\x1\xFFFF\x2\x18\x1\xFFFF\x1\x18\x2\xFFFF\x2\x18\x1\xFFFF\x1\x18"+
				"\x1\xFFFF\x1\x18",
				"\x1\xFFFF",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x1"+
				"\x2\x7\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x19\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1A",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x1B\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1C",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x1D\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1E",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x1F\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x20",
				"\x1\x2\x10\xFFFF\x1\xC\x16\xFFFF\x1\x10",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x21\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x11",
				"\x1\xFFFF",
				"\x1\x22\x1\xFFFF\x1\x22\x2\xFFFF\x1\x22\x6\xFFFF\x6\x22\x1\xFFFF\x1"+
				"\x22\x6\xFFFF\x2\x22\x2\xFFFF\x2\x22\x1\xFFFF\x1\x22\x2\xFFFF\x5\x22"+
				"\x4\xFFFF\x2\x22\x1\xFFFF\x6\x22\x1\xFFFF\x4\x22\x4\xFFFF\x4\x22\x2"+
				"\xFFFF\x2\x22\x1\xFFFF\x4\x22\x4\xFFFF\x3\x22\x1\xFFFF\x1\x22\x4\xFFFF"+
				"\x1\x22\x3\xFFFF\x4\x22\x2\xFFFF\x4\x22\x4\xFFFF\x2\x22\x1\xFFFF\x2"+
				"\x22\x1\xFFFF\x2\x22\x1\xFFFF\x1\x22\x2\xFFFF\x2\x22\x1\xFFFF\x1\x22"+
				"\x1\xFFFF\x1\x22",
				"\x1\xFFFF",
				"\x1\x23\x1\xFFFF\x1\x23\x2\xFFFF\x1\x23\x6\xFFFF\x6\x23\x1\xFFFF\x1"+
				"\x23\x6\xFFFF\x2\x23\x2\xFFFF\x2\x23\x1\xFFFF\x1\x23\x2\xFFFF\x5\x23"+
				"\x4\xFFFF\x2\x23\x1\xFFFF\x6\x23\x1\xFFFF\x4\x23\x4\xFFFF\x4\x23\x2"+
				"\xFFFF\x2\x23\x1\xFFFF\x4\x23\x4\xFFFF\x3\x23\x1\xFFFF\x1\x23\x4\xFFFF"+
				"\x1\x23\x3\xFFFF\x4\x23\x2\xFFFF\x4\x23\x4\xFFFF\x2\x23\x1\xFFFF\x2"+
				"\x23\x1\xFFFF\x2\x23\x1\xFFFF\x1\x23\x2\xFFFF\x2\x23\x1\xFFFF\x1\x23"+
				"\x1\xFFFF\x1\x23",
				"\x1\xFFFF",
				"\x1\x24\x1\xFFFF\x1\x24\x2\xFFFF\x1\x24\x6\xFFFF\x6\x24\x1\xFFFF\x1"+
				"\x24\x6\xFFFF\x2\x24\x2\xFFFF\x2\x24\x1\xFFFF\x1\x24\x2\xFFFF\x5\x24"+
				"\x4\xFFFF\x2\x24\x1\xFFFF\x6\x24\x1\xFFFF\x4\x24\x4\xFFFF\x4\x24\x2"+
				"\xFFFF\x2\x24\x1\xFFFF\x4\x24\x4\xFFFF\x3\x24\x1\xFFFF\x1\x24\x4\xFFFF"+
				"\x1\x24\x3\xFFFF\x4\x24\x2\xFFFF\x4\x24\x4\xFFFF\x2\x24\x1\xFFFF\x2"+
				"\x24\x1\xFFFF\x2\x24\x1\xFFFF\x1\x24\x2\xFFFF\x2\x24\x1\xFFFF\x1\x24"+
				"\x1\xFFFF\x1\x24",
				"\x1\xFFFF",
				"\x1\x25\x1\xFFFF\x1\x25\x2\xFFFF\x1\x25\x6\xFFFF\x6\x25\x1\xFFFF\x1"+
				"\x25\x6\xFFFF\x2\x25\x2\xFFFF\x2\x25\x1\xFFFF\x1\x25\x2\xFFFF\x5\x25"+
				"\x4\xFFFF\x2\x25\x1\xFFFF\x6\x25\x1\xFFFF\x4\x25\x4\xFFFF\x4\x25\x2"+
				"\xFFFF\x2\x25\x1\xFFFF\x4\x25\x4\xFFFF\x3\x25\x1\xFFFF\x1\x25\x4\xFFFF"+
				"\x1\x25\x3\xFFFF\x4\x25\x2\xFFFF\x4\x25\x4\xFFFF\x2\x25\x1\xFFFF\x2"+
				"\x25\x1\xFFFF\x2\x25\x1\xFFFF\x1\x25\x2\xFFFF\x2\x25\x1\xFFFF\x1\x25"+
				"\x1\xFFFF\x1\x25",
				"\x1\xFFFF",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x1"+
				"\x2\x7\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x26\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1A",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x27\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1C",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x28\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x1E",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x7\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x8\xFFFF\x2"+
				"\x2\x6\xFFFF\x3\x2\x7\xFFFF\x7\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x29\x1"+
				"\x2\x13\xFFFF\x1\x2\x1\xFFFF\x1\x20",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA1_eot = DFA.UnpackEncodedString(DFA1_eotS);
		private static readonly short[] DFA1_eof = DFA.UnpackEncodedString(DFA1_eofS);
		private static readonly char[] DFA1_min = DFA.UnpackEncodedStringToUnsignedChars(DFA1_minS);
		private static readonly char[] DFA1_max = DFA.UnpackEncodedStringToUnsignedChars(DFA1_maxS);
		private static readonly short[] DFA1_accept = DFA.UnpackEncodedString(DFA1_acceptS);
		private static readonly short[] DFA1_special = DFA.UnpackEncodedString(DFA1_specialS);
		private static readonly short[][] DFA1_transition;

		static DFA1()
		{
			int numStates = DFA1_transitionS.Length;
			DFA1_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA1_transition[i] = DFA.UnpackEncodedString(DFA1_transitionS[i]);
			}
		}

		public DFA1( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 1;
			this.eot = DFA1_eot;
			this.eof = DFA1_eof;
			this.min = DFA1_min;
			this.max = DFA1_max;
			this.accept = DFA1_accept;
			this.special = DFA1_special;
			this.transition = DFA1_transition;
		}

		public override string Description { get { return "89:2: ( BodyString namespaceDefinition )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition1(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA1_1 = input.LA(1);
		int index1_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_Php_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index1_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 1, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA2 : DFA
	{
		private const string DFA2_eotS =
			"\x2B\xFFFF";
		private const string DFA2_eofS =
			"\x1\x1\x2A\xFFFF";
		private const string DFA2_minS =
			"\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x5\x4\x1\xFFFF\x1\x5\x1\x4\x1\x5\x1\x4"+
			"\x1\x5\x1\x4\x1\x5\x1\x4\x1\x5\x1\x4\x1\x0\x5\x5\x1\x0\x1\x4\x1\x0\x1"+
			"\x4\x1\x0\x1\x4\x1\x0\x1\x4\x1\x0\x4\x5\x4\x0";
		private const string DFA2_maxS =
			"\x1\x82\x1\xFFFF\x1\x82\x1\xFFFF\x1\x80\x4\x82\x1\xFFFF\x1\x82\x1\x80"+
			"\x1\x82\x1\x80\x1\x82\x1\x80\x1\x82\x1\x80\x1\x82\x1\x80\x1\x0\x5\x82"+
			"\x1\x0\x1\x80\x1\x0\x1\x80\x1\x0\x1\x80\x1\x0\x1\x80\x1\x0\x4\x82\x4"+
			"\x0";
		private const string DFA2_acceptS =
			"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x2\x5\xFFFF\x1\x1\x21\xFFFF";
		private const string DFA2_specialS =
			"\x14\xFFFF\x1\x0\x5\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
			"\x1\x4\x1\xFFFF\x1\x5\x4\xFFFF\x1\x6\x1\x7\x1\x8\x1\x9}>";
		private static readonly string[] DFA2_transitionS =
			{
				"\x3\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x2\xFFFF\x6\x3\x1\xFFFF\x1\x3\x6"+
				"\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x6\x3\x4\xFFFF\x2"+
				"\x3\x1\xFFFF\x6\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF"+
				"\x7\x3\x2\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x1\xFFFF\x4\x3\x2"+
				"\xFFFF\x5\x3\x1\xFFFF\x6\x3\x1\xFFFF\x1\x3\x1\xFFFF\x8\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x1\x2\x3\x3\x1\xFFFF\x3\x3",
				"",
				"\x1\x9\x1\x3\x1\x6\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF"+
				"\x6\x9\x1\x3\x1\x9\x5\xFFFF\x1\x3\x2\x9\x2\xFFFF\x2\x9\x1\xFFFF\x1\x9"+
				"\x1\x3\x1\xFFFF\x5\x9\x1\xFFFF\x1\x3\x2\xFFFF\x2\x9\x1\xFFFF\x6\x9\x1"+
				"\x3\x4\x9\x1\x3\x3\xFFFF\x4\x9\x1\xFFFF\x1\x3\x1\x5\x1\x9\x1\xFFFF\x4"+
				"\x9\x3\x3\x1\xFFFF\x3\x9\x1\xFFFF\x1\x9\x1\xFFFF\x3\x3\x1\x8\x3\x3\x4"+
				"\x9\x1\x3\x1\xFFFF\x4\x9\x2\x3\x2\xFFFF\x2\x9\x1\xFFFF\x2\x9\x1\xFFFF"+
				"\x2\x9\x1\xFFFF\x1\x9\x2\xFFFF\x2\x9\x1\xFFFF\x1\x9\x1\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x4",
				"",
				"\x1\xA\x1\xFFFF\x1\xA\x2\xFFFF\x1\xA\x6\xFFFF\x6\xA\x1\xFFFF\x1\xA\x6"+
				"\xFFFF\x2\xA\x2\xFFFF\x2\xA\x1\xFFFF\x1\xA\x2\xFFFF\x5\xA\x4\xFFFF\x2"+
				"\xA\x1\xFFFF\x6\xA\x1\xFFFF\x4\xA\x4\xFFFF\x4\xA\x2\xFFFF\x2\xA\x1\xFFFF"+
				"\x4\xA\x4\xFFFF\x3\xA\x1\xFFFF\x1\xA\x4\xFFFF\x1\xA\x3\xFFFF\x4\xA\x2"+
				"\xFFFF\x4\xA\x4\xFFFF\x2\xA\x1\xFFFF\x2\xA\x1\xFFFF\x2\xA\x1\xFFFF\x1"+
				"\xA\x2\xFFFF\x2\xA\x1\xFFFF\x1\xA\x1\xFFFF\x1\xA",
				"\x3\x3\x1\xFFFF\x1\x3\x1\xC\x6\xFFFF\x6\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1"+
				"\x9\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x6\x3\x4\xFFFF"+
				"\x2\x3\x1\xFFFF\x6\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1"+
				"\xFFFF\x7\x3\x2\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x2\xFFFF\x5\x3\x1\xFFFF\x5\x3\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x8\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x1\xFFFF\x2\x3\x1\xB",
				"\x3\x3\x1\xFFFF\x1\x3\x1\xE\x2\xFFFF\x1\x3\x3\xFFFF\x6\x3\x1\xFFFF\x1"+
				"\x3\x4\xFFFF\x1\x9\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x6\x3\x4\xFFFF\x2\x3\x1\xFFFF\x6\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x5\x3\x1\xFFFF\x7\x3\x2\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x3\x3\x2\xFFFF\x5\x3\x1\xFFFF\x5\x3\x1\x9\x1\xFFFF\x1\x3"+
				"\x1\xFFFF\x8\x3\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x1\xFFFF\x2\x3\x1\xD",
				"\x3\x3\x1\xFFFF\x1\x3\x1\x10\x2\xFFFF\x1\x3\x3\xFFFF\x6\x3\x1\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x9\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1"+
				"\xFFFF\x6\x3\x4\xFFFF\x2\x3\x1\xFFFF\x6\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x5\x3\x1\xFFFF\x7\x3\x2\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x2\xFFFF\x5\x3\x1\xFFFF\x5\x3\x1\x9\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x8\x3\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x1\xFFFF\x2\x3\x1\xF",
				"\x3\x3\x1\xFFFF\x1\x3\x1\x12\x2\xFFFF\x1\x3\x3\xFFFF\x6\x3\x1\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x9\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1"+
				"\xFFFF\x6\x3\x4\xFFFF\x2\x3\x1\xFFFF\x6\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x5\x3\x1\xFFFF\x7\x3\x2\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x2\xFFFF\x5\x3\x1\xFFFF\x5\x3\x1\x9\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x8\x3\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x1\xFFFF\x2\x3\x1\x11",
				"",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x14\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x13",
				"\x1\x15\x1\xFFFF\x1\x15\x2\xFFFF\x1\x15\x6\xFFFF\x6\x15\x1\xFFFF\x1"+
				"\x15\x6\xFFFF\x2\x15\x2\xFFFF\x2\x15\x1\xFFFF\x1\x15\x2\xFFFF\x5\x15"+
				"\x4\xFFFF\x2\x15\x1\xFFFF\x6\x15\x1\xFFFF\x4\x15\x4\xFFFF\x4\x15\x2"+
				"\xFFFF\x2\x15\x1\xFFFF\x4\x15\x4\xFFFF\x3\x15\x1\xFFFF\x1\x15\x4\xFFFF"+
				"\x1\x15\x3\xFFFF\x4\x15\x2\xFFFF\x4\x15\x4\xFFFF\x2\x15\x1\xFFFF\x2"+
				"\x15\x1\xFFFF\x2\x15\x1\xFFFF\x1\x15\x2\xFFFF\x2\x15\x1\xFFFF\x1\x15"+
				"\x1\xFFFF\x1\x15",
				"\x2\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x6\xFFFF\x1\x3\x8"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\x8\xFFFF\x1"+
				"\x3\x7\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5\xFFFF\x2\x3\xB\xFFFF"+
				"\x1\x9\x7\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x1\x16\x1\xFFFF\x1\x16\x2\xFFFF\x1\x16\x6\xFFFF\x6\x16\x1\xFFFF\x1"+
				"\x16\x6\xFFFF\x2\x16\x2\xFFFF\x2\x16\x1\xFFFF\x1\x16\x2\xFFFF\x5\x16"+
				"\x4\xFFFF\x2\x16\x1\xFFFF\x6\x16\x1\xFFFF\x4\x16\x4\xFFFF\x4\x16\x2"+
				"\xFFFF\x2\x16\x1\xFFFF\x4\x16\x4\xFFFF\x3\x16\x1\xFFFF\x1\x16\x4\xFFFF"+
				"\x1\x16\x3\xFFFF\x4\x16\x2\xFFFF\x4\x16\x4\xFFFF\x2\x16\x1\xFFFF\x2"+
				"\x16\x1\xFFFF\x2\x16\x1\xFFFF\x1\x16\x2\xFFFF\x2\x16\x1\xFFFF\x1\x16"+
				"\x1\xFFFF\x1\x16",
				"\x2\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x6\xFFFF\x1\x3\x8"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\x8\xFFFF\x2"+
				"\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5\xFFFF\x2\x3\xB\xFFFF"+
				"\x1\x9\x7\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x1\x17\x1\xFFFF\x1\x17\x2\xFFFF\x1\x17\x6\xFFFF\x6\x17\x1\xFFFF\x1"+
				"\x17\x6\xFFFF\x2\x17\x2\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x5\x17"+
				"\x4\xFFFF\x2\x17\x1\xFFFF\x6\x17\x1\xFFFF\x4\x17\x4\xFFFF\x4\x17\x2"+
				"\xFFFF\x2\x17\x1\xFFFF\x4\x17\x4\xFFFF\x3\x17\x1\xFFFF\x1\x17\x4\xFFFF"+
				"\x1\x17\x3\xFFFF\x4\x17\x2\xFFFF\x4\x17\x4\xFFFF\x2\x17\x1\xFFFF\x2"+
				"\x17\x1\xFFFF\x2\x17\x1\xFFFF\x1\x17\x2\xFFFF\x2\x17\x1\xFFFF\x1\x17"+
				"\x1\xFFFF\x1\x17",
				"\x2\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x6\xFFFF\x1\x3\x8"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\x8\xFFFF\x2"+
				"\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5\xFFFF\x2\x3\xB\xFFFF"+
				"\x1\x9\x7\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x6\xFFFF\x6\x18\x1\xFFFF\x1"+
				"\x18\x6\xFFFF\x2\x18\x2\xFFFF\x2\x18\x1\xFFFF\x1\x18\x2\xFFFF\x5\x18"+
				"\x4\xFFFF\x2\x18\x1\xFFFF\x6\x18\x1\xFFFF\x4\x18\x4\xFFFF\x4\x18\x2"+
				"\xFFFF\x2\x18\x1\xFFFF\x4\x18\x4\xFFFF\x3\x18\x1\xFFFF\x1\x18\x4\xFFFF"+
				"\x1\x18\x3\xFFFF\x4\x18\x2\xFFFF\x4\x18\x4\xFFFF\x2\x18\x1\xFFFF\x2"+
				"\x18\x1\xFFFF\x2\x18\x1\xFFFF\x1\x18\x2\xFFFF\x2\x18\x1\xFFFF\x1\x18"+
				"\x1\xFFFF\x1\x18",
				"\x2\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x6\xFFFF\x1\x3\x8"+
				"\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF\x1\x3\x8\xFFFF\x2"+
				"\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5\xFFFF\x2\x3\xB\xFFFF"+
				"\x1\x9\x7\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x1\x19\x1\xFFFF\x1\x19\x2\xFFFF\x1\x19\x6\xFFFF\x6\x19\x1\xFFFF\x1"+
				"\x19\x6\xFFFF\x2\x19\x2\xFFFF\x2\x19\x1\xFFFF\x1\x19\x2\xFFFF\x5\x19"+
				"\x4\xFFFF\x2\x19\x1\xFFFF\x6\x19\x1\xFFFF\x4\x19\x4\xFFFF\x4\x19\x2"+
				"\xFFFF\x2\x19\x1\xFFFF\x4\x19\x4\xFFFF\x3\x19\x1\xFFFF\x1\x19\x4\xFFFF"+
				"\x1\x19\x3\xFFFF\x4\x19\x2\xFFFF\x4\x19\x4\xFFFF\x2\x19\x1\xFFFF\x2"+
				"\x19\x1\xFFFF\x2\x19\x1\xFFFF\x1\x19\x2\xFFFF\x2\x19\x1\xFFFF\x1\x19"+
				"\x1\xFFFF\x1\x19",
				"\x1\xFFFF",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x1A\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1B",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x1C\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1D",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x1E\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1F",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x20\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x21",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x22\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x13",
				"\x1\xFFFF",
				"\x1\x23\x1\xFFFF\x1\x23\x2\xFFFF\x1\x23\x6\xFFFF\x6\x23\x1\xFFFF\x1"+
				"\x23\x6\xFFFF\x2\x23\x2\xFFFF\x2\x23\x1\xFFFF\x1\x23\x2\xFFFF\x5\x23"+
				"\x4\xFFFF\x2\x23\x1\xFFFF\x6\x23\x1\xFFFF\x4\x23\x4\xFFFF\x4\x23\x2"+
				"\xFFFF\x2\x23\x1\xFFFF\x4\x23\x4\xFFFF\x3\x23\x1\xFFFF\x1\x23\x4\xFFFF"+
				"\x1\x23\x3\xFFFF\x4\x23\x2\xFFFF\x4\x23\x4\xFFFF\x2\x23\x1\xFFFF\x2"+
				"\x23\x1\xFFFF\x2\x23\x1\xFFFF\x1\x23\x2\xFFFF\x2\x23\x1\xFFFF\x1\x23"+
				"\x1\xFFFF\x1\x23",
				"\x1\xFFFF",
				"\x1\x24\x1\xFFFF\x1\x24\x2\xFFFF\x1\x24\x6\xFFFF\x6\x24\x1\xFFFF\x1"+
				"\x24\x6\xFFFF\x2\x24\x2\xFFFF\x2\x24\x1\xFFFF\x1\x24\x2\xFFFF\x5\x24"+
				"\x4\xFFFF\x2\x24\x1\xFFFF\x6\x24\x1\xFFFF\x4\x24\x4\xFFFF\x4\x24\x2"+
				"\xFFFF\x2\x24\x1\xFFFF\x4\x24\x4\xFFFF\x3\x24\x1\xFFFF\x1\x24\x4\xFFFF"+
				"\x1\x24\x3\xFFFF\x4\x24\x2\xFFFF\x4\x24\x4\xFFFF\x2\x24\x1\xFFFF\x2"+
				"\x24\x1\xFFFF\x2\x24\x1\xFFFF\x1\x24\x2\xFFFF\x2\x24\x1\xFFFF\x1\x24"+
				"\x1\xFFFF\x1\x24",
				"\x1\xFFFF",
				"\x1\x25\x1\xFFFF\x1\x25\x2\xFFFF\x1\x25\x6\xFFFF\x6\x25\x1\xFFFF\x1"+
				"\x25\x6\xFFFF\x2\x25\x2\xFFFF\x2\x25\x1\xFFFF\x1\x25\x2\xFFFF\x5\x25"+
				"\x4\xFFFF\x2\x25\x1\xFFFF\x6\x25\x1\xFFFF\x4\x25\x4\xFFFF\x4\x25\x2"+
				"\xFFFF\x2\x25\x1\xFFFF\x4\x25\x4\xFFFF\x3\x25\x1\xFFFF\x1\x25\x4\xFFFF"+
				"\x1\x25\x3\xFFFF\x4\x25\x2\xFFFF\x4\x25\x4\xFFFF\x2\x25\x1\xFFFF\x2"+
				"\x25\x1\xFFFF\x2\x25\x1\xFFFF\x1\x25\x2\xFFFF\x2\x25\x1\xFFFF\x1\x25"+
				"\x1\xFFFF\x1\x25",
				"\x1\xFFFF",
				"\x1\x26\x1\xFFFF\x1\x26\x2\xFFFF\x1\x26\x6\xFFFF\x6\x26\x1\xFFFF\x1"+
				"\x26\x6\xFFFF\x2\x26\x2\xFFFF\x2\x26\x1\xFFFF\x1\x26\x2\xFFFF\x5\x26"+
				"\x4\xFFFF\x2\x26\x1\xFFFF\x6\x26\x1\xFFFF\x4\x26\x4\xFFFF\x4\x26\x2"+
				"\xFFFF\x2\x26\x1\xFFFF\x4\x26\x4\xFFFF\x3\x26\x1\xFFFF\x1\x26\x4\xFFFF"+
				"\x1\x26\x3\xFFFF\x4\x26\x2\xFFFF\x4\x26\x4\xFFFF\x2\x26\x1\xFFFF\x2"+
				"\x26\x1\xFFFF\x2\x26\x1\xFFFF\x1\x26\x2\xFFFF\x2\x26\x1\xFFFF\x1\x26"+
				"\x1\xFFFF\x1\x26",
				"\x1\xFFFF",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x27\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1B",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x28\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1D",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x29\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x1F",
				"\x2\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x8\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x9\x1\x3\x8\xFFFF\x1\x3\x7\xFFFF\x1\x3\xB\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x6\xFFFF\x3\x3\x7\xFFFF\x7\x3\x4\xFFFF\x1\x3\x5"+
				"\xFFFF\x1\x2A\x1\x3\x13\xFFFF\x1\x3\x1\xFFFF\x1\x21",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA2_eot = DFA.UnpackEncodedString(DFA2_eotS);
		private static readonly short[] DFA2_eof = DFA.UnpackEncodedString(DFA2_eofS);
		private static readonly char[] DFA2_min = DFA.UnpackEncodedStringToUnsignedChars(DFA2_minS);
		private static readonly char[] DFA2_max = DFA.UnpackEncodedStringToUnsignedChars(DFA2_maxS);
		private static readonly short[] DFA2_accept = DFA.UnpackEncodedString(DFA2_acceptS);
		private static readonly short[] DFA2_special = DFA.UnpackEncodedString(DFA2_specialS);
		private static readonly short[][] DFA2_transition;

		static DFA2()
		{
			int numStates = DFA2_transitionS.Length;
			DFA2_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA2_transition[i] = DFA.UnpackEncodedString(DFA2_transitionS[i]);
			}
		}

		public DFA2( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 2;
			this.eot = DFA2_eot;
			this.eof = DFA2_eof;
			this.min = DFA2_min;
			this.max = DFA2_max;
			this.accept = DFA2_accept;
			this.special = DFA2_special;
			this.transition = DFA2_transition;
		}

		public override string Description { get { return "()* loopback of 90:2: ( useStatement | statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition2(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA2_1 = input.LA(1);
		int index2_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred2_Php_fragment))) {s = 9;}

				else if ((EvaluatePredicate(synpred3_Php_fragment))) {s = 3;}

				input.Seek(index2_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 2, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x3C\xFFFF";
		private const string DFA8_eofS =
			"\x3C\xFFFF";
		private const string DFA8_minS =
			"\x1\x4\x1B\x0\x1\xFFFF\xB\x0\x1\xFFFF\xB\x0\x8\xFFFF";
		private const string DFA8_maxS =
			"\x1\x82\x1B\x0\x1\xFFFF\xB\x0\x1\xFFFF\xB\x0\x8\xFFFF";
		private const string DFA8_acceptS =
			"\x1C\xFFFF\x1\x2\xB\xFFFF\x1\x4\xB\xFFFF\x1\xA\x1\x1\x1\x9\x1\x8\x1\x3"+
			"\x1\x5\x1\x6\x1\x7";
		private const string DFA8_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\xFFFF\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\xFFFF"+
			"\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F"+
			"\x1\x30\x8\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x1\x29\x1\xC\x1\x33\x1\xFFFF\x1\x19\x1\x33\x2\xFFFF\x1\x6\x1\x1C\x2"+
				"\xFFFF\x2\x33\x1\x21\x2\x33\x1\x2A\x1\xFFFF\x1\xA\x6\xFFFF\x1\x20\x1"+
				"\x22\x2\xFFFF\x1\x33\x1\xD\x1\xFFFF\x1\x30\x1\xFFFF\x1\x11\x1\x33\x1"+
				"\x1B\x2\x33\x1\xD\x4\xFFFF\x2\xD\x1\xFFFF\x1\x33\x1\xE\x2\x33\x1\x2D"+
				"\x1\x2E\x1\xFFFF\x1\xB\x1\x1E\x1\x23\x1\xD\x1\xFFFF\x1\x12\x2\xFFFF"+
				"\x1\x2C\x1\x33\x2\x18\x1\x9\x1\xFFFF\x2\x33\x1\x15\x1\x33\x1\x2B\x1"+
				"\xD\x1\x1\x2\xFFFF\x1\x7\x1\xFFFF\x1\x26\x1\x5\x1\x17\x1\xFFFF\x1\x33"+
				"\x1\xFFFF\x1\x28\x1\x8\x1\x1A\x1\x33\x2\xFFFF\x1\x14\x1\x1D\x3\x33\x1"+
				"\xFFFF\x1\x16\x1\x33\x2\x18\x1\x24\x1\x34\x1\xFFFF\x1\x10\x1\xFFFF\x1"+
				"\x1F\x1\x33\x1\x13\x1\x31\x1\x25\x1\x13\x1\xE\x1\x32\x1\xFFFF\x1\x27"+
				"\x1\xFFFF\x1\xF\x2\x33\x1\x2\x1\x2F\x1\xFFFF\x1\x33\x1\x3\x1\x4",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "108:1: statement : ({...}? => printExpr ';' | ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | namespaceBlock | bracketedBlock | UnquotedString Colon statement | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' | ';' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition8(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA8_1 = input.LA(1);
		int index8_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred11_Php_fragment))) {s = 56;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred13_Php_fragment))) {s = 57;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred14_Php_fragment))) {s = 58;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred14_Php_fragment))) {s = 58;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred15_Php_fragment))) {s = 59;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred16_Php_fragment))) {s = 55;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred6_Php_fragment)&&(expressionFollowsBodyString)))) {s = 53;}

				else if ((EvaluatePredicate(synpred10_Php_fragment))) {s = 28;}

				else if ((EvaluatePredicate(synpred17_Php_fragment))) {s = 54;}

				input.Seek(index8_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 8, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x8\xFFFF";
		private const string DFA22_eofS =
			"\x8\xFFFF";
		private const string DFA22_minS =
			"\x4\x4\x4\xFFFF";
		private const string DFA22_maxS =
			"\x4\x7D\x4\xFFFF";
		private const string DFA22_acceptS =
			"\x4\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4";
		private const string DFA22_specialS =
			"\x8\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x1\x2\x19\xFFFF\x1\x5\x1C\xFFFF\x1\x4\x26\xFFFF\x3\x1\xA\xFFFF\x1\x3"+
				"\xC\xFFFF\x1\x6\x1\x7",
				"\x1\x2\x36\xFFFF\x1\x4\x26\xFFFF\x3\x1\xA\xFFFF\x1\x3\xD\xFFFF\x1\x7",
				"\x1\x2\x36\xFFFF\x1\x4\x26\xFFFF\x3\x1\xA\xFFFF\x1\x3\xD\xFFFF\x1\x7",
				"\x1\x2\x36\xFFFF\x1\x4\x26\xFFFF\x3\x1\xA\xFFFF\x1\x3\xD\xFFFF\x1\x7",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "158:1: classMember : ( ( fieldModifier )* Function qualifiedName parametersDefinition ( bracketedBlock | ';' ) | constDefinition ';' | varDefinition ';' | fieldDefinition ';' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x3D\xFFFF";
		private const string DFA36_eofS =
			"\x1\x3\x3C\xFFFF";
		private const string DFA36_minS =
			"\x1\x4\x2\x0\x1\xFFFF\x35\x0\x1\xFFFF\x2\x0\x1\xFFFF";
		private const string DFA36_maxS =
			"\x1\x82\x2\x0\x1\xFFFF\x35\x0\x1\xFFFF\x2\x0\x1\xFFFF";
		private const string DFA36_acceptS =
			"\x3\xFFFF\x1\x2\x38\xFFFF\x1\x1";
		private const string DFA36_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1"+
			"\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1"+
			"\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\xFFFF\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x2D\x1\x10\x1\x3B\x1\xFFFF\x1\x1D\x1\x3B\x2\xFFFF\x1\xA\x1\x20\x2"+
				"\xFFFF\x2\x3B\x1\x25\x1\x3A\x1\x3B\x1\x2E\x1\xFFFF\x1\xE\x1\x3\x5\xFFFF"+
				"\x1\x24\x1\x26\x2\xFFFF\x1\x37\x1\x11\x1\xFFFF\x1\x34\x1\xFFFF\x1\x15"+
				"\x1\x3B\x1\x1F\x1\x2\x1\x1\x1\x11\x4\xFFFF\x2\x11\x1\xFFFF\x1\x3B\x1"+
				"\x12\x2\x3B\x1\x31\x1\x32\x1\xFFFF\x1\xF\x1\x22\x1\x27\x1\x11\x1\xFFFF"+
				"\x1\x16\x2\xFFFF\x1\x30\x1\x3B\x2\x1C\x1\xD\x1\xFFFF\x2\x3B\x1\x19\x1"+
				"\x3B\x1\x2F\x1\x11\x1\x5\x2\xFFFF\x1\xB\x1\xFFFF\x1\x2A\x1\x9\x1\x1B"+
				"\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2C\x1\xC\x1\x1E\x1\x3B\x2\xFFFF\x1\x18"+
				"\x1\x21\x3\x3B\x1\xFFFF\x1\x1A\x1\x3B\x2\x1C\x1\x28\x1\x38\x1\xFFFF"+
				"\x1\x14\x1\xFFFF\x1\x23\x1\x3B\x1\x17\x1\x35\x1\x29\x1\x17\x1\x12\x1"+
				"\x36\x1\xFFFF\x1\x2B\x1\xFFFF\x1\x13\x1\x4\x1\x3B\x1\x6\x1\x33\x1\xFFFF"+
				"\x1\x3B\x1\x7\x1\x8",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "()* loopback of 189:30: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition36(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA36_1 = input.LA(1);
		int index36_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred52_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index36_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 36, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\x3D\xFFFF";
		private const string DFA38_eofS =
			"\x1\x1\x3C\xFFFF";
		private const string DFA38_minS =
			"\x1\x4\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA38_maxS =
			"\x1\x82\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA38_acceptS =
			"\x1\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA38_specialS =
			"\x2\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\xFFFF\x1\x35\x1\x36\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x2B\x1\xE\x1\x3B\x1\xFFFF\x1\x1B\x1\x3B\x2\xFFFF\x1\x8\x1\x1E\x2"+
				"\xFFFF\x2\x3B\x1\x23\x1\x3A\x1\x3B\x1\x2C\x1\xFFFF\x1\xC\x1\x1\x5\xFFFF"+
				"\x1\x22\x1\x24\x2\xFFFF\x1\x39\x1\xF\x1\xFFFF\x1\x32\x1\xFFFF\x1\x13"+
				"\x1\x3B\x1\x1D\x1\x38\x1\x35\x1\xF\x4\xFFFF\x2\xF\x1\xFFFF\x1\x3B\x1"+
				"\x10\x2\x3B\x1\x2F\x1\x30\x1\xFFFF\x1\xD\x1\x20\x1\x25\x1\xF\x1\xFFFF"+
				"\x1\x14\x2\xFFFF\x1\x2E\x1\x3B\x2\x1A\x1\xB\x1\xFFFF\x2\x3B\x1\x17\x1"+
				"\x3B\x1\x2D\x1\xF\x1\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x28\x1\x7\x1\x19"+
				"\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2A\x1\xA\x1\x1C\x1\x3B\x2\xFFFF\x1\x16"+
				"\x1\x1F\x3\x3B\x1\xFFFF\x1\x18\x1\x3B\x2\x1A\x1\x26\x1\x36\x1\xFFFF"+
				"\x1\x12\x1\xFFFF\x1\x21\x1\x3B\x1\x15\x1\x33\x1\x27\x1\x15\x1\x10\x1"+
				"\x34\x1\xFFFF\x1\x29\x1\xFFFF\x1\x11\x1\x2\x1\x3B\x1\x4\x1\x31\x1\xFFFF"+
				"\x1\x3B\x1\x5\x1\x6",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "()* loopback of 190:51: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition38(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA38_1 = input.LA(1);
		int index38_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index38_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 38, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA39 : DFA
	{
		private const string DFA39_eotS =
			"\x3D\xFFFF";
		private const string DFA39_eofS =
			"\x1\x1\x3C\xFFFF";
		private const string DFA39_minS =
			"\x1\x4\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA39_maxS =
			"\x1\x82\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA39_acceptS =
			"\x1\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA39_specialS =
			"\x2\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\xFFFF\x1\x35\x1\x36\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA39_transitionS =
			{
				"\x1\x2B\x1\xE\x1\x3B\x1\xFFFF\x1\x1B\x1\x3B\x2\xFFFF\x1\x8\x1\x1E\x2"+
				"\xFFFF\x2\x3B\x1\x23\x1\x3A\x1\x3B\x1\x2C\x1\xFFFF\x1\xC\x1\x1\x5\xFFFF"+
				"\x1\x22\x1\x24\x2\xFFFF\x1\x39\x1\xF\x1\xFFFF\x1\x32\x1\xFFFF\x1\x13"+
				"\x1\x3B\x1\x1D\x1\x38\x1\x35\x1\xF\x4\xFFFF\x2\xF\x1\xFFFF\x1\x3B\x1"+
				"\x10\x2\x3B\x1\x2F\x1\x30\x1\xFFFF\x1\xD\x1\x20\x1\x25\x1\xF\x1\xFFFF"+
				"\x1\x14\x2\xFFFF\x1\x2E\x1\x3B\x2\x1A\x1\xB\x1\xFFFF\x2\x3B\x1\x17\x1"+
				"\x3B\x1\x2D\x1\xF\x1\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x28\x1\x7\x1\x19"+
				"\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2A\x1\xA\x1\x1C\x1\x3B\x2\xFFFF\x1\x16"+
				"\x1\x1F\x3\x3B\x1\xFFFF\x1\x18\x1\x3B\x2\x1A\x1\x26\x1\x36\x1\xFFFF"+
				"\x1\x12\x1\xFFFF\x1\x21\x1\x3B\x1\x15\x1\x33\x1\x27\x1\x15\x1\x10\x1"+
				"\x34\x1\xFFFF\x1\x29\x1\xFFFF\x1\x11\x1\x2\x1\x3B\x1\x4\x1\x31\x1\xFFFF"+
				"\x1\x3B\x1\x5\x1\x6",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
		private static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
		private static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
		private static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
		private static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
		private static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
		private static readonly short[][] DFA39_transition;

		static DFA39()
		{
			int numStates = DFA39_transitionS.Length;
			DFA39_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA39_transition[i] = DFA.UnpackEncodedString(DFA39_transitionS[i]);
			}
		}

		public DFA39( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 39;
			this.eot = DFA39_eot;
			this.eof = DFA39_eof;
			this.min = DFA39_min;
			this.max = DFA39_max;
			this.accept = DFA39_accept;
			this.special = DFA39_special;
			this.transition = DFA39_transition;
		}

		public override string Description { get { return "()* loopback of 191:49: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition39(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA39_1 = input.LA(1);
		int index39_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred57_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index39_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 39, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA41 : DFA
	{
		private const string DFA41_eotS =
			"\x3D\xFFFF";
		private const string DFA41_eofS =
			"\x1\x1\x3C\xFFFF";
		private const string DFA41_minS =
			"\x1\x4\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA41_maxS =
			"\x1\x82\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA41_acceptS =
			"\x1\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA41_specialS =
			"\x2\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\xFFFF\x1\x35\x1\x36\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA41_transitionS =
			{
				"\x1\x2B\x1\xE\x1\x3B\x1\xFFFF\x1\x1B\x1\x3B\x2\xFFFF\x1\x8\x1\x1E\x2"+
				"\xFFFF\x2\x3B\x1\x23\x1\x3A\x1\x3B\x1\x2C\x1\xFFFF\x1\xC\x1\x1\x5\xFFFF"+
				"\x1\x22\x1\x24\x2\xFFFF\x1\x39\x1\xF\x1\xFFFF\x1\x32\x1\xFFFF\x1\x13"+
				"\x1\x3B\x1\x1D\x1\x38\x1\x35\x1\xF\x4\xFFFF\x2\xF\x1\xFFFF\x1\x3B\x1"+
				"\x10\x2\x3B\x1\x2F\x1\x30\x1\xFFFF\x1\xD\x1\x20\x1\x25\x1\xF\x1\xFFFF"+
				"\x1\x14\x2\xFFFF\x1\x2E\x1\x3B\x2\x1A\x1\xB\x1\xFFFF\x2\x3B\x1\x17\x1"+
				"\x3B\x1\x2D\x1\xF\x1\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x28\x1\x7\x1\x19"+
				"\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2A\x1\xA\x1\x1C\x1\x3B\x2\xFFFF\x1\x16"+
				"\x1\x1F\x3\x3B\x1\xFFFF\x1\x18\x1\x3B\x2\x1A\x1\x26\x1\x36\x1\xFFFF"+
				"\x1\x12\x1\xFFFF\x1\x21\x1\x3B\x1\x15\x1\x33\x1\x27\x1\x15\x1\x10\x1"+
				"\x34\x1\xFFFF\x1\x29\x1\xFFFF\x1\x11\x1\x2\x1\x3B\x1\x4\x1\x31\x1\xFFFF"+
				"\x1\x3B\x1\x5\x1\x6",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA41_eot = DFA.UnpackEncodedString(DFA41_eotS);
		private static readonly short[] DFA41_eof = DFA.UnpackEncodedString(DFA41_eofS);
		private static readonly char[] DFA41_min = DFA.UnpackEncodedStringToUnsignedChars(DFA41_minS);
		private static readonly char[] DFA41_max = DFA.UnpackEncodedStringToUnsignedChars(DFA41_maxS);
		private static readonly short[] DFA41_accept = DFA.UnpackEncodedString(DFA41_acceptS);
		private static readonly short[] DFA41_special = DFA.UnpackEncodedString(DFA41_specialS);
		private static readonly short[][] DFA41_transition;

		static DFA41()
		{
			int numStates = DFA41_transitionS.Length;
			DFA41_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA41_transition[i] = DFA.UnpackEncodedString(DFA41_transitionS[i]);
			}
		}

		public DFA41( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 41;
			this.eot = DFA41_eot;
			this.eof = DFA41_eof;
			this.min = DFA41_min;
			this.max = DFA41_max;
			this.accept = DFA41_accept;
			this.special = DFA41_special;
			this.transition = DFA41_transition;
		}

		public override string Description { get { return "()* loopback of 192:34: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition41(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA41_1 = input.LA(1);
		int index41_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred60_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index41_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 41, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA43 : DFA
	{
		private const string DFA43_eotS =
			"\x3F\xFFFF";
		private const string DFA43_eofS =
			"\x1\x1\x3E\xFFFF";
		private const string DFA43_minS =
			"\x1\x4\x3B\xFFFF\x1\x0\x2\xFFFF";
		private const string DFA43_maxS =
			"\x1\x82\x3B\xFFFF\x1\x0\x2\xFFFF";
		private const string DFA43_acceptS =
			"\x1\xFFFF\x1\x2\x3C\xFFFF\x1\x1";
		private const string DFA43_specialS =
			"\x3C\xFFFF\x1\x0\x2\xFFFF}>";
		private static readonly string[] DFA43_transitionS =
			{
				"\x3\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x2\xFFFF\x4\x1\x1\x3C\x1\x1\x1"+
				"\xFFFF\x2\x1\x5\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x6"+
				"\x1\x4\xFFFF\x2\x1\x1\xFFFF\x6\x1\x1\xFFFF\x4\x1\x1\xFFFF\x1\x1\x2\xFFFF"+
				"\x5\x1\x1\xFFFF\x7\x1\x2\xFFFF\x1\x1\x1\xFFFF\x3\x1\x1\xFFFF\x1\x1\x1"+
				"\xFFFF\x4\x1\x2\xFFFF\x5\x1\x1\xFFFF\x6\x1\x1\xFFFF\x1\x1\x1\xFFFF\x8"+
				"\x1\x1\xFFFF\x1\x1\x1\xFFFF\x5\x1\x1\xFFFF\x3\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				""
			};

		private static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
		private static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
		private static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
		private static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
		private static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
		private static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
		private static readonly short[][] DFA43_transition;

		static DFA43()
		{
			int numStates = DFA43_transitionS.Length;
			DFA43_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA43_transition[i] = DFA.UnpackEncodedString(DFA43_transitionS[i]);
			}
		}

		public DFA43( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}

		public override string Description { get { return "()+ loopback of 201:4: ( Catch '(' qualifiedName variable ')' bracketedBlock )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition43(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA43_1 = input.LA(1);
		int index43_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred65_Php_fragment))) {s = 62;}

				else if ((true)) {s = 1;}

				input.Seek(index43_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 43, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x3E\xFFFF";
		private const string DFA44_eofS =
			"\x1\x2\x3D\xFFFF";
		private const string DFA44_minS =
			"\x1\x4\x1\x0\x3C\xFFFF";
		private const string DFA44_maxS =
			"\x1\x82\x1\x0\x3C\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA44_specialS =
			"\x1\xFFFF\x1\x0\x3C\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x2\xFFFF\x6\x2\x1\xFFFF\x2\x2\x5"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x2\x2\x1\x1\x3\x2\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x5\x2\x1\xFFFF\x7\x2\x2\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x4\x2\x2\xFFFF\x5\x2\x1\xFFFF\x6\x2\x1\xFFFF\x1\x2\x1\xFFFF\x8"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "202:4: ( Finally bracketedBlock )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition44(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA44_1 = input.LA(1);
		int index44_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred66_Php_fragment))) {s = 61;}

				else if ((true)) {s = 2;}

				input.Seek(index44_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 44, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA55 : DFA
	{
		private const string DFA55_eotS =
			"\x3D\xFFFF";
		private const string DFA55_eofS =
			"\x1\x3\x3C\xFFFF";
		private const string DFA55_minS =
			"\x1\x4\x2\x0\x1\xFFFF\x35\x0\x1\xFFFF\x2\x0\x1\xFFFF";
		private const string DFA55_maxS =
			"\x1\x82\x2\x0\x1\xFFFF\x35\x0\x1\xFFFF\x2\x0\x1\xFFFF";
		private const string DFA55_acceptS =
			"\x3\xFFFF\x1\x2\x38\xFFFF\x1\x1";
		private const string DFA55_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1"+
			"\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1"+
			"\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\xFFFF\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA55_transitionS =
			{
				"\x1\x2D\x1\x10\x1\x3B\x1\xFFFF\x1\x1D\x1\x3B\x2\xFFFF\x1\xA\x1\x20\x2"+
				"\xFFFF\x2\x3B\x1\x25\x1\x3A\x1\x3B\x1\x2E\x1\xFFFF\x1\xE\x1\x3\x5\xFFFF"+
				"\x1\x24\x1\x26\x2\xFFFF\x1\x37\x1\x11\x1\xFFFF\x1\x34\x1\xFFFF\x1\x15"+
				"\x1\x3B\x1\x1F\x1\x2\x1\x1\x1\x11\x4\xFFFF\x2\x11\x1\xFFFF\x1\x3B\x1"+
				"\x12\x2\x3B\x1\x31\x1\x32\x1\xFFFF\x1\xF\x1\x22\x1\x27\x1\x11\x1\xFFFF"+
				"\x1\x16\x2\xFFFF\x1\x30\x1\x3B\x2\x1C\x1\xD\x1\xFFFF\x2\x3B\x1\x19\x1"+
				"\x3B\x1\x2F\x1\x11\x1\x5\x2\xFFFF\x1\xB\x1\xFFFF\x1\x2A\x1\x9\x1\x1B"+
				"\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2C\x1\xC\x1\x1E\x1\x3B\x2\xFFFF\x1\x18"+
				"\x1\x21\x3\x3B\x1\xFFFF\x1\x1A\x1\x3B\x2\x1C\x1\x28\x1\x38\x1\xFFFF"+
				"\x1\x14\x1\xFFFF\x1\x23\x1\x3B\x1\x17\x1\x35\x1\x29\x1\x17\x1\x12\x1"+
				"\x36\x1\xFFFF\x1\x2B\x1\xFFFF\x1\x13\x1\x4\x1\x3B\x1\x6\x1\x33\x1\xFFFF"+
				"\x1\x3B\x1\x7\x1\x8",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA55_eot = DFA.UnpackEncodedString(DFA55_eotS);
		private static readonly short[] DFA55_eof = DFA.UnpackEncodedString(DFA55_eofS);
		private static readonly char[] DFA55_min = DFA.UnpackEncodedStringToUnsignedChars(DFA55_minS);
		private static readonly char[] DFA55_max = DFA.UnpackEncodedStringToUnsignedChars(DFA55_maxS);
		private static readonly short[] DFA55_accept = DFA.UnpackEncodedString(DFA55_acceptS);
		private static readonly short[] DFA55_special = DFA.UnpackEncodedString(DFA55_specialS);
		private static readonly short[][] DFA55_transition;

		static DFA55()
		{
			int numStates = DFA55_transitionS.Length;
			DFA55_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA55_transition[i] = DFA.UnpackEncodedString(DFA55_transitionS[i]);
			}
		}

		public DFA55( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 55;
			this.eot = DFA55_eot;
			this.eof = DFA55_eof;
			this.min = DFA55_min;
			this.max = DFA55_max;
			this.accept = DFA55_accept;
			this.special = DFA55_special;
			this.transition = DFA55_transition;
		}

		public override string Description { get { return "()* loopback of 226:34: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition55(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA55_1 = input.LA(1);
		int index55_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred87_Php_fragment))) {s = 60;}

				else if ((true)) {s = 3;}

				input.Seek(index55_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 55, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA57 : DFA
	{
		private const string DFA57_eotS =
			"\x3D\xFFFF";
		private const string DFA57_eofS =
			"\x1\x1\x3C\xFFFF";
		private const string DFA57_minS =
			"\x1\x4\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA57_maxS =
			"\x1\x82\x1\xFFFF\x35\x0\x1\xFFFF\x4\x0\x1\xFFFF";
		private const string DFA57_acceptS =
			"\x1\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA57_specialS =
			"\x2\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\xFFFF\x1\x35\x1\x36\x1\x37\x1\x38\x1\xFFFF}>";
		private static readonly string[] DFA57_transitionS =
			{
				"\x1\x2B\x1\xE\x1\x3B\x1\xFFFF\x1\x1B\x1\x3B\x2\xFFFF\x1\x8\x1\x1E\x2"+
				"\xFFFF\x2\x3B\x1\x23\x1\x3A\x1\x3B\x1\x2C\x1\xFFFF\x1\xC\x1\x1\x5\xFFFF"+
				"\x1\x22\x1\x24\x2\xFFFF\x1\x39\x1\xF\x1\xFFFF\x1\x32\x1\xFFFF\x1\x13"+
				"\x1\x3B\x1\x1D\x1\x38\x1\x35\x1\xF\x4\xFFFF\x2\xF\x1\xFFFF\x1\x3B\x1"+
				"\x10\x2\x3B\x1\x2F\x1\x30\x1\xFFFF\x1\xD\x1\x20\x1\x25\x1\xF\x1\xFFFF"+
				"\x1\x14\x2\xFFFF\x1\x2E\x1\x3B\x2\x1A\x1\xB\x1\xFFFF\x2\x3B\x1\x17\x1"+
				"\x3B\x1\x2D\x1\xF\x1\x3\x2\xFFFF\x1\x9\x1\xFFFF\x1\x28\x1\x7\x1\x19"+
				"\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x2A\x1\xA\x1\x1C\x1\x3B\x2\xFFFF\x1\x16"+
				"\x1\x1F\x3\x3B\x1\xFFFF\x1\x18\x1\x3B\x2\x1A\x1\x26\x1\x36\x1\xFFFF"+
				"\x1\x12\x1\xFFFF\x1\x21\x1\x3B\x1\x15\x1\x33\x1\x27\x1\x15\x1\x10\x1"+
				"\x34\x1\xFFFF\x1\x29\x1\xFFFF\x1\x11\x1\x2\x1\x3B\x1\x4\x1\x31\x1\xFFFF"+
				"\x1\x3B\x1\x5\x1\x6",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA57_eot = DFA.UnpackEncodedString(DFA57_eotS);
		private static readonly short[] DFA57_eof = DFA.UnpackEncodedString(DFA57_eofS);
		private static readonly char[] DFA57_min = DFA.UnpackEncodedStringToUnsignedChars(DFA57_minS);
		private static readonly char[] DFA57_max = DFA.UnpackEncodedStringToUnsignedChars(DFA57_maxS);
		private static readonly short[] DFA57_accept = DFA.UnpackEncodedString(DFA57_acceptS);
		private static readonly short[] DFA57_special = DFA.UnpackEncodedString(DFA57_specialS);
		private static readonly short[][] DFA57_transition;

		static DFA57()
		{
			int numStates = DFA57_transitionS.Length;
			DFA57_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA57_transition[i] = DFA.UnpackEncodedString(DFA57_transitionS[i]);
			}
		}

		public DFA57( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 57;
			this.eot = DFA57_eot;
			this.eof = DFA57_eof;
			this.min = DFA57_min;
			this.max = DFA57_max;
			this.accept = DFA57_accept;
			this.special = DFA57_special;
			this.transition = DFA57_transition;
		}

		public override string Description { get { return "()* loopback of 227:13: ( statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition57(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA57_1 = input.LA(1);
		int index57_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred90_Php_fragment))) {s = 60;}

				else if ((true)) {s = 1;}

				input.Seek(index57_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 57, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA120 : DFA
	{
		private const string DFA120_eotS =
			"\x85\xFFFF";
		private const string DFA120_eofS =
			"\x85\xFFFF";
		private const string DFA120_minS =
			"\x1\x4\x1\x0\x1\xFFFF\x8\x0\x1\xFFFF\x38\x0\x41\xFFFF";
		private const string DFA120_maxS =
			"\x1\x82\x1\x0\x1\xFFFF\x8\x0\x1\xFFFF\x38\x0\x41\xFFFF";
		private const string DFA120_acceptS =
			"\x2\xFFFF\x1\x1\x8\xFFFF\x1\x2\x38\xFFFF\x1\x22\x1\x3\x1\x4\x1\x15\x1"+
			"\x34\x1\x32\x1\x21\x1\x2B\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1"+
			"\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\x16\x1\x17"+
			"\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x23"+
			"\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2F\x1\x2C\x1\x2D"+
			"\x1\x2E\x1\x30\x1\x31\x1\x3A\x1\x33\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39"+
			"\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43";
		private const string DFA120_specialS =
			"\x1\xFFFF\x1\x0\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x1\xFFFF\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B"+
			"\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25"+
			"\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F"+
			"\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39"+
			"\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x41\xFFFF}>";
		private static readonly string[] DFA120_transitionS =
			{
				"\x1\x2A\x1\x2\x1\x22\x1\xFFFF\x1\x2\x1\x2D\x2\xFFFF\x1\x2\x3\xFFFF\x1"+
				"\x3C\x1\x3D\x1\x1B\x1\x18\x1\x15\x1\x26\x1\xFFFF\x1\x4\x6\xFFFF\x1\x2C"+
				"\x1\x1C\x2\xFFFF\x1\x19\x1\x36\x1\xFFFF\x1\x13\x1\xFFFF\x1\x2\x1\x3F"+
				"\x1\xA\x1\xE\x1\xF\x1\x37\x4\xFFFF\x1\x39\x1\x38\x1\xFFFF\x1\x28\x1"+
				"\x35\x1\x16\x1\x3E\x1\x10\x1\x11\x1\xFFFF\x1\x5\x1\x20\x1\x1D\x1\x6"+
				"\x1\xFFFF\x1\x2\x2\xFFFF\x1\xD\x1\x29\x1\x30\x1\x31\x1\x2\x1\xFFFF\x1"+
				"\x25\x1\x34\x1\x2\x1\x3B\x1\x27\x1\x3A\x1\x1\x2\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x1A\x1\x3\x1\x8\x1\xFFFF\x1\x42\x1\xFFFF\x1\xB\x2\x2\x1\x23\x2\xFFFF"+
				"\x1\x2\x1\xC\x1\x32\x1\x33\x1\x2E\x1\xFFFF\x1\x2\x1\x40\x1\x9\x1\x2F"+
				"\x1\x1E\x2\xFFFF\x1\x2\x1\xFFFF\x1\x21\x1\x41\x1\x2\x1\x17\x1\x1F\x1"+
				"\x2\x1\x7\x1\x14\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\x43\x1\x2B\x1\x2\x1"+
				"\x12\x1\xFFFF\x1\x24\x2\x2",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA120_eot = DFA.UnpackEncodedString(DFA120_eotS);
		private static readonly short[] DFA120_eof = DFA.UnpackEncodedString(DFA120_eofS);
		private static readonly char[] DFA120_min = DFA.UnpackEncodedStringToUnsignedChars(DFA120_minS);
		private static readonly char[] DFA120_max = DFA.UnpackEncodedStringToUnsignedChars(DFA120_maxS);
		private static readonly short[] DFA120_accept = DFA.UnpackEncodedString(DFA120_acceptS);
		private static readonly short[] DFA120_special = DFA.UnpackEncodedString(DFA120_specialS);
		private static readonly short[][] DFA120_transition;

		static DFA120()
		{
			int numStates = DFA120_transitionS.Length;
			DFA120_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA120_transition[i] = DFA.UnpackEncodedString(DFA120_transitionS[i]);
			}
		}

		public DFA120( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 120;
			this.eot = DFA120_eot;
			this.eof = DFA120_eof;
			this.min = DFA120_min;
			this.max = DFA120_max;
			this.accept = DFA120_accept;
			this.special = DFA120_special;
			this.transition = DFA120_transition;
		}

		public override string Description { get { return "434:9: ( expression | '{' expression '}' | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | Use )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition120(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA120_1 = input.LA(1);
		int index120_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred225_Php_fragment))) {s = 68;}

				input.Seek(index120_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred194_Php_fragment))) {s = 69;}

				input.Seek(index120_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred195_Php_fragment))) {s = 70;}

				input.Seek(index120_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred212_Php_fragment))) {s = 71;}

				input.Seek(index120_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred243_Php_fragment))) {s = 72;}

				input.Seek(index120_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred241_Php_fragment))) {s = 73;}

				input.Seek(index120_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred224_Php_fragment))) {s = 74;}

				input.Seek(index120_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred234_Php_fragment))) {s = 75;}

				input.Seek(index120_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred196_Php_fragment))) {s = 76;}

				input.Seek(index120_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred197_Php_fragment))) {s = 77;}

				input.Seek(index120_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred198_Php_fragment))) {s = 78;}

				input.Seek(index120_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred199_Php_fragment))) {s = 79;}

				input.Seek(index120_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred200_Php_fragment))) {s = 80;}

				input.Seek(index120_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred201_Php_fragment))) {s = 81;}

				input.Seek(index120_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred202_Php_fragment))) {s = 82;}

				input.Seek(index120_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred203_Php_fragment))) {s = 83;}

				input.Seek(index120_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred204_Php_fragment))) {s = 84;}

				input.Seek(index120_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred205_Php_fragment))) {s = 85;}

				input.Seek(index120_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred206_Php_fragment))) {s = 86;}

				input.Seek(index120_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred207_Php_fragment))) {s = 87;}

				input.Seek(index120_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred208_Php_fragment))) {s = 88;}

				input.Seek(index120_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred209_Php_fragment))) {s = 89;}

				input.Seek(index120_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred210_Php_fragment))) {s = 90;}

				input.Seek(index120_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred211_Php_fragment))) {s = 91;}

				input.Seek(index120_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred213_Php_fragment))) {s = 92;}

				input.Seek(index120_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred214_Php_fragment))) {s = 93;}

				input.Seek(index120_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred215_Php_fragment))) {s = 94;}

				input.Seek(index120_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred216_Php_fragment))) {s = 95;}

				input.Seek(index120_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred217_Php_fragment))) {s = 96;}

				input.Seek(index120_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred218_Php_fragment))) {s = 97;}

				input.Seek(index120_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred219_Php_fragment))) {s = 98;}

				input.Seek(index120_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred220_Php_fragment))) {s = 99;}

				input.Seek(index120_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred221_Php_fragment))) {s = 100;}

				input.Seek(index120_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred222_Php_fragment))) {s = 101;}

				input.Seek(index120_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred223_Php_fragment))) {s = 102;}

				input.Seek(index120_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred226_Php_fragment))) {s = 103;}

				input.Seek(index120_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred227_Php_fragment))) {s = 104;}

				input.Seek(index120_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred228_Php_fragment))) {s = 105;}

				input.Seek(index120_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred229_Php_fragment))) {s = 106;}

				input.Seek(index120_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred230_Php_fragment))) {s = 107;}

				input.Seek(index120_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred231_Php_fragment))) {s = 108;}

				input.Seek(index120_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred232_Php_fragment))) {s = 109;}

				input.Seek(index120_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred233_Php_fragment))) {s = 110;}

				input.Seek(index120_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred238_Php_fragment))) {s = 111;}

				input.Seek(index120_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred235_Php_fragment))) {s = 112;}

				input.Seek(index120_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred236_Php_fragment))) {s = 113;}

				input.Seek(index120_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred237_Php_fragment))) {s = 114;}

				input.Seek(index120_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred239_Php_fragment))) {s = 115;}

				input.Seek(index120_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred240_Php_fragment))) {s = 116;}

				input.Seek(index120_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred249_Php_fragment))) {s = 117;}

				input.Seek(index120_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred242_Php_fragment))) {s = 118;}

				input.Seek(index120_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred244_Php_fragment))) {s = 119;}

				input.Seek(index120_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred245_Php_fragment))) {s = 120;}

				input.Seek(index120_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred246_Php_fragment))) {s = 121;}

				input.Seek(index120_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred247_Php_fragment))) {s = 122;}

				input.Seek(index120_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred248_Php_fragment))) {s = 123;}

				input.Seek(index120_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred250_Php_fragment))) {s = 124;}

				input.Seek(index120_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred251_Php_fragment))) {s = 125;}

				input.Seek(index120_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred252_Php_fragment))) {s = 126;}

				input.Seek(index120_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred253_Php_fragment))) {s = 127;}

				input.Seek(index120_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred254_Php_fragment))) {s = 128;}

				input.Seek(index120_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred255_Php_fragment))) {s = 129;}

				input.Seek(index120_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred256_Php_fragment))) {s = 130;}

				input.Seek(index120_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((EvaluatePredicate(synpred257_Php_fragment))) {s = 131;}

				input.Seek(index120_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred192_Php_fragment))) {s = 2;}

				else if ((true)) {s = 132;}

				input.Seek(index120_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 120, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA140 : DFA
	{
		private const string DFA140_eotS =
			"\x7\xFFFF";
		private const string DFA140_eofS =
			"\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5";
		private const string DFA140_minS =
			"\x1\x4\x1\xFFFF\x1\x4\x1\x5\x1\x4\x1\xFFFF\x1\x5";
		private const string DFA140_maxS =
			"\x1\x82\x1\xFFFF\x1\x80\x1\x82\x1\x80\x1\xFFFF\x1\x82";
		private const string DFA140_acceptS =
			"\x1\xFFFF\x1\x1\x3\xFFFF\x1\x2\x1\xFFFF";
		private const string DFA140_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA140_transitionS =
			{
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x6\xFFFF\x6\x3\x1\xFFFF\x1\x3\x6"+
				"\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x4\xFFFF\x2"+
				"\x3\x1\xFFFF\x6\x3\x1\xFFFF\x4\x3\x4\xFFFF\x4\x3\x2\xFFFF\x2\x3\x1\xFFFF"+
				"\x4\x3\x4\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x3\xFFFF\x4\x3\x2"+
				"\xFFFF\x4\x3\x4\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x1\x1\x1\x3\x1\xFFFF\x1\x3\x1\x1\x1\x2",
				"",
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x6\xFFFF\x6\x3\x1\xFFFF\x1\x3\x6"+
				"\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x4\xFFFF\x2"+
				"\x3\x1\xFFFF\x6\x3\x1\xFFFF\x4\x3\x4\xFFFF\x4\x3\x2\xFFFF\x2\x3\x1\xFFFF"+
				"\x4\x3\x4\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x3\xFFFF\x4\x3\x2"+
				"\xFFFF\x4\x3\x4\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x3\x5\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x8\xFFFF\x1\x1\x1\xFFFF\x6\x5\x8"+
				"\xFFFF\x1\x5\x7\xFFFF\x2\x5\xA\xFFFF\x1\x5\x4\xFFFF\x1\x5\x7\xFFFF\x3"+
				"\x5\x6\xFFFF\x3\x5\x7\xFFFF\x7\x5\x4\xFFFF\x1\x5\x5\xFFFF\x2\x5\x13"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x4",
				"\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6\x6\xFFFF\x6\x6\x1\xFFFF\x1\x6\x6"+
				"\xFFFF\x2\x6\x2\xFFFF\x2\x6\x1\xFFFF\x1\x6\x2\xFFFF\x5\x6\x4\xFFFF\x2"+
				"\x6\x1\xFFFF\x6\x6\x1\xFFFF\x4\x6\x4\xFFFF\x4\x6\x2\xFFFF\x2\x6\x1\xFFFF"+
				"\x4\x6\x4\xFFFF\x3\x6\x1\xFFFF\x1\x6\x4\xFFFF\x1\x6\x3\xFFFF\x4\x6\x2"+
				"\xFFFF\x4\x6\x4\xFFFF\x2\x6\x1\xFFFF\x2\x6\x1\xFFFF\x2\x6\x1\xFFFF\x1"+
				"\x6\x2\xFFFF\x2\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6",
				"",
				"\x3\x5\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x8\xFFFF\x1\x1\x1\xFFFF\x6\x5\x8"+
				"\xFFFF\x1\x5\x7\xFFFF\x2\x5\xA\xFFFF\x1\x5\x4\xFFFF\x1\x5\x7\xFFFF\x3"+
				"\x5\x6\xFFFF\x3\x5\x7\xFFFF\x7\x5\x4\xFFFF\x1\x5\x5\xFFFF\x2\x5\x13"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x4"
			};

		private static readonly short[] DFA140_eot = DFA.UnpackEncodedString(DFA140_eotS);
		private static readonly short[] DFA140_eof = DFA.UnpackEncodedString(DFA140_eofS);
		private static readonly char[] DFA140_min = DFA.UnpackEncodedStringToUnsignedChars(DFA140_minS);
		private static readonly char[] DFA140_max = DFA.UnpackEncodedStringToUnsignedChars(DFA140_maxS);
		private static readonly short[] DFA140_accept = DFA.UnpackEncodedString(DFA140_acceptS);
		private static readonly short[] DFA140_special = DFA.UnpackEncodedString(DFA140_specialS);
		private static readonly short[][] DFA140_transition;

		static DFA140()
		{
			int numStates = DFA140_transitionS.Length;
			DFA140_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA140_transition[i] = DFA.UnpackEncodedString(DFA140_transitionS[i]);
			}
		}

		public DFA140( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 140;
			this.eot = DFA140_eot;
			this.eof = DFA140_eof;
			this.min = DFA140_min;
			this.max = DFA140_max;
			this.accept = DFA140_accept;
			this.special = DFA140_special;
			this.transition = DFA140_transition;
		}

		public override string Description { get { return "474:1: constantOrStaticAccessor : ( ( variable | qualifiedName ) '::' ( UnquotedString | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Abstract | Var | Const | As | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Use | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType ) | qualifiedName );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _BodyString_in_prog327 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _namespaceDefinition_in_prog331 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _useStatement_in_prog337 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_prog341 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameWithAs352 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _As_in_qualifiedNameWithAs355 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _UnquotedString_in_qualifiedNameWithAs357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Use_in_useStatement370 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedNameWithAs_in_useStatement372 = new BitSet(new ulong[]{0x10000000UL,0x80000000000UL});
		public static readonly BitSet _Comma_in_useStatement375 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedNameWithAs_in_useStatement377 = new BitSet(new ulong[]{0x10000000UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_useStatement381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespaceDefinition392 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_namespaceDefinition394 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_namespaceDefinition396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespaceBlock407 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_namespaceBlock409 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_namespaceBlock411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_statement427 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_statement429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_statement442 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _simpleStatement_in_statement447 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BodyString_in_statement453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespaceBlock_in_statement460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracketedBlock_in_statement465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_statement470 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_statement472 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_statement474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_statement479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDefinition_in_statement484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _complexStatement_in_statement489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleStatement_in_statement494 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_statement496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_statement501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_printExpr512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_bracketedBlock523 = new BitSet(new ulong[]{0x7BF61FACC1BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_bracketedBlock525 = new BitSet(new ulong[]{0x7BF61FACC1BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _CloseCurlyBracket_in_bracketedBlock528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_interfaceDefinition539 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_interfaceDefinition541 = new BitSet(new ulong[]{0x10000000000000UL,0x4000000UL});
		public static readonly BitSet _interfaceExtends_in_interfaceDefinition543 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_interfaceDefinition549 = new BitSet(new ulong[]{0x800000041000010UL,0x801C00000000UL});
		public static readonly BitSet _interfaceMember_in_interfaceDefinition551 = new BitSet(new ulong[]{0x800000041000010UL,0x801C00000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_interfaceDefinition554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_interfaceExtends565 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_interfaceExtends567 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_interfaceExtends570 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_interfaceExtends572 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _constDefinition_in_interfaceMember585 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldModifier_in_interfaceMember592 = new BitSet(new ulong[]{0x800000000000010UL,0x801C00000000UL});
		public static readonly BitSet _Function_in_interfaceMember595 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_interfaceMember597 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_interfaceMember599 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classModifier_in_classDefinition614 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _Class_in_classDefinition620 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_classDefinition622 = new BitSet(new ulong[]{0x10000000000000UL,0x4000010UL});
		public static readonly BitSet _Extends_in_classDefinition628 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_classDefinition630 = new BitSet(new ulong[]{0x0UL,0x4000010UL});
		public static readonly BitSet _classImplements_in_classDefinition637 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_classDefinition642 = new BitSet(new ulong[]{0x800000041000010UL,0x3000801C00000000UL});
		public static readonly BitSet _classMember_in_classDefinition646 = new BitSet(new ulong[]{0x800000041000010UL,0x3000801C00000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_classDefinition651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_classImplements665 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_classImplements668 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_classImplements671 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_classImplements673 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _fieldModifier_in_classMember687 = new BitSet(new ulong[]{0x800000000000010UL,0x801C00000000UL});
		public static readonly BitSet _Function_in_classMember690 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_classMember692 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_classMember694 = new BitSet(new ulong[]{0x0UL,0x80004000000UL});
		public static readonly BitSet _bracketedBlock_in_classMember697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_classMember701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constDefinition_in_classMember707 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_classMember709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varDefinition_in_classMember714 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_classMember716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDefinition_in_classMember721 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_classMember723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_constDefinition734 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_constDefinition736 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_constDefinition739 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_constDefinition741 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_constDefinition746 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_constDefinition748 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_constDefinition751 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_constDefinition753 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Var_in_varDefinition768 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _VariableName_in_varDefinition770 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_varDefinition773 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_varDefinition775 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_varDefinition780 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _VariableName_in_varDefinition782 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_varDefinition785 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_varDefinition787 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _fieldModifier_in_fieldDefinition802 = new BitSet(new ulong[]{0x10UL,0x2000801C00000000UL});
		public static readonly BitSet _VariableName_in_fieldDefinition805 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_fieldDefinition808 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_fieldDefinition810 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_fieldDefinition815 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _VariableName_in_fieldDefinition817 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_fieldDefinition820 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_fieldDefinition822 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Abstract_in_classModifier838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessModifier_in_fieldModifier848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_fieldModifier852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_fieldModifier856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_complexStatement867 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement869 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_complexStatement871 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement873 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_complexStatement875 = new BitSet(new ulong[]{0xC0000000002UL});
		public static readonly BitSet _conditional_in_complexStatement877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_complexStatement883 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement885 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FAFDF3974FEF9UL,0x7UL});
		public static readonly BitSet _forInit_in_complexStatement887 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FAFDF3974FEF9UL,0x7UL});
		public static readonly BitSet _forCondition_in_complexStatement889 = new BitSet(new ulong[]{0x7BF61FACC2BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _forUpdate_in_complexStatement891 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement893 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_complexStatement895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_complexStatement900 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement902 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_complexStatement904 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _As_in_complexStatement906 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _arrayEntry_in_complexStatement908 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement910 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_complexStatement912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_complexStatement917 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement919 = new BitSet(new ulong[]{0x7BF61FACC2BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_complexStatement921 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement924 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_complexStatement926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_complexStatement931 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement933 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_complexStatement935 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement937 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_complexStatement939 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_complexStatement941 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _conditionalWithColon_in_complexStatement944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_complexStatement950 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement952 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FAFDF3974FEF9UL,0x7UL});
		public static readonly BitSet _forInit_in_complexStatement954 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FAFDF3974FEF9UL,0x7UL});
		public static readonly BitSet _forCondition_in_complexStatement956 = new BitSet(new ulong[]{0x7BF61FACC2BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _forUpdate_in_complexStatement958 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement960 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_complexStatement962 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_complexStatement964 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _Foreach_in_complexStatement970 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement972 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_complexStatement974 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _As_in_complexStatement976 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _arrayEntry_in_complexStatement978 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement980 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_complexStatement982 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_complexStatement984 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _While_in_complexStatement990 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement992 = new BitSet(new ulong[]{0x7BF61FACC2BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_complexStatement994 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement997 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_complexStatement999 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_complexStatement1001 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _Do_in_complexStatement1007 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_complexStatement1009 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _While_in_complexStatement1011 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1013 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_complexStatement1015 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1017 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_complexStatement1019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_complexStatement1024 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1026 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_complexStatement1028 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1030 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _OpenCurlyBracket_in_complexStatement1032 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _cases_in_complexStatement1034 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_complexStatement1036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_complexStatement1041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDefinition_in_complexStatement1046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Try_in_tryStatement1058 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement1060 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _Catch_in_tryStatement1066 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_tryStatement1068 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_tryStatement1070 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL,0x2UL});
		public static readonly BitSet _variable_in_tryStatement1072 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_tryStatement1074 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement1076 = new BitSet(new ulong[]{0x40000000100002UL});
		public static readonly BitSet _Finally_in_tryStatement1084 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_tryStatement1086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_simpleStatement1099 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _commaList_in_simpleStatement1101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Print_in_simpleStatement1106 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_simpleStatement1108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_simpleStatement1113 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL,0x2UL});
		public static readonly BitSet _variable_in_simpleStatement1115 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_simpleStatement1118 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL,0x2UL});
		public static readonly BitSet _variable_in_simpleStatement1120 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Static_in_simpleStatement1128 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _VariableName_in_simpleStatement1130 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_simpleStatement1133 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_simpleStatement1135 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_simpleStatement1140 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _VariableName_in_simpleStatement1142 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_simpleStatement1145 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_simpleStatement1147 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _constDefinition_in_simpleStatement1156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_simpleStatement1161 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _Integer_in_simpleStatement1163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_simpleStatement1169 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _Integer_in_simpleStatement1171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_simpleStatement1177 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _UnquotedString_in_simpleStatement1179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_simpleStatement1184 = new BitSet(new ulong[]{0x7BF61FACC0BF1372UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_simpleStatement1186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_simpleStatement1192 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _UnquotedString_in_simpleStatement1194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_simpleStatement1199 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_simpleStatement1201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_simpleStatement1206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_conditional1217 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_conditional1219 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_conditional1221 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_conditional1223 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_conditional1225 = new BitSet(new ulong[]{0xC0000000002UL});
		public static readonly BitSet _conditional_in_conditional1227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_conditional1233 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_conditional1235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_conditionalWithColon1246 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_conditionalWithColon1248 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_conditionalWithColon1250 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_conditionalWithColon1252 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_conditionalWithColon1254 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_conditionalWithColon1256 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _conditionalWithColon_in_conditionalWithColon1259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_conditionalWithColon1265 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_conditionalWithColon1267 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_conditionalWithColon1269 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _commaList_in_forInit1281 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_forInit1284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forCondition1295 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_forCondition1298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forUpdate1310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _casestatement_in_cases1322 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _defaultcase_in_cases1325 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_cases1327 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_cases1333 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _Case_in_casestatement1345 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_casestatement1347 = new BitSet(new ulong[]{0x8000000UL,0x80000000000UL});
		public static readonly BitSet _set_in_casestatement1349 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_casestatement1355 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _Default_in_defaultcase1369 = new BitSet(new ulong[]{0x8000000UL,0x80000000000UL});
		public static readonly BitSet _set_in_defaultcase1371 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_defaultcase1377 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _Function_in_anonymousFunctionDefinition1390 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_anonymousFunctionDefinition1392 = new BitSet(new ulong[]{0x0UL,0x800000004000000UL});
		public static readonly BitSet _Use_in_anonymousFunctionDefinition1395 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_anonymousFunctionDefinition1397 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_anonymousFunctionDefinition1401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_functionDefinition1412 = new BitSet(new ulong[]{0x7BF61F2CC0BF0270UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _Ampersand_in_functionDefinition1414 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_functionDefinition1417 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _parametersDefinition_in_functionDefinition1419 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_functionDefinition1421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_parametersDefinition1432 = new BitSet(new ulong[]{0x7BF61F2CC2BF0370UL,0x7D6D879E2170F678UL,0x5UL});
		public static readonly BitSet _paramDef_in_parametersDefinition1435 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_parametersDefinition1438 = new BitSet(new ulong[]{0x7BF61F2CC0BF0370UL,0x7D6D879E2170F678UL,0x5UL});
		public static readonly BitSet _paramDef_in_parametersDefinition1440 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_parametersDefinition1446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_paramDef1458 = new BitSet(new ulong[]{0x20UL,0x2000000000000000UL});
		public static readonly BitSet _qualifiedName_in_paramDef1462 = new BitSet(new ulong[]{0x20UL,0x2000000000000000UL});
		public static readonly BitSet _paramName_in_paramDef1466 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _Equals_in_paramDef1469 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_paramDef1471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VariableName_in_paramName1484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_paramName1489 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _VariableName_in_paramName1491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_commaList1502 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_commaList1505 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_commaList1507 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _weakLogicalOr_in_expression1522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr1533 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _Or_in_weakLogicalOr1536 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr1538 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor1551 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _Xor_in_weakLogicalXor1554 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor1556 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd1570 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _And_in_weakLogicalAnd1573 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd1575 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _listVariables_in_assignment1588 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_assignment1590 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _assignment_in_assignment1598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ternary_in_assignment1603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_listVariables1614 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_listVariables1616 = new BitSet(new ulong[]{0x7BF61F2CD2BF0250UL,0x796D879E2170F678UL,0x7UL});
		public static readonly BitSet _name_in_listVariables1618 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_listVariables1622 = new BitSet(new ulong[]{0x7BF61F2CD2BF0250UL,0x796D879E2170F678UL,0x7UL});
		public static readonly BitSet _name_in_listVariables1624 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_listVariables1629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_listVariables1635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary1646 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _QuestionMark_in_ternary1648 = new BitSet(new ulong[]{0x7BF61FACC8BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_ternary1650 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_ternary1653 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_ternary1655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary1660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAnd_in_logicalOr1672 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _LogicalOr_in_logicalOr1675 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _logicalAnd_in_logicalOr1677 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd1690 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _LogicalAnd_in_logicalAnd1693 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd1695 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _bitwiseXor_in_bitwiseOr1709 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _Pipe_in_bitwiseOr1712 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _bitwiseXor_in_bitwiseOr1714 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseXor1728 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _Hat_in_bitwiseXor1731 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseXor1733 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd1746 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _Ampersand_in_bitWiseAnd1749 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd1751 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck1764 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _EqualityOperator_in_equalityCheck1767 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck1769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck1783 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _ComparisionOperator_in_comparisionCheck1786 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck1788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addition_in_bitWiseShift1801 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _ShiftOperator_in_bitWiseShift1804 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _addition_in_bitWiseShift1806 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _multiplication_in_addition1820 = new BitSet(new ulong[]{0x4000000002UL,0x100040000UL});
		public static readonly BitSet _set_in_addition1823 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _multiplication_in_addition1835 = new BitSet(new ulong[]{0x4000000002UL,0x100040000UL});
		public static readonly BitSet _logicalNot_in_multiplication1848 = new BitSet(new ulong[]{0x400000000000802UL,0x40000000UL});
		public static readonly BitSet _set_in_multiplication1851 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _logicalNot_in_multiplication1863 = new BitSet(new ulong[]{0x400000000000802UL,0x40000000UL});
		public static readonly BitSet _Bang_in_logicalNot1876 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _logicalNot_in_logicalNot1878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _instanceOf_in_logicalNot1883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _negateOrCast_in_instanceOf1894 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _Instanceof_in_instanceOf1897 = new BitSet(new ulong[]{0x7BF61FACC0BF0370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _negateOrCast_in_instanceOf1899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_negateOrCast1912 = new BitSet(new ulong[]{0x7BF61FACC0BF0370UL,0x7D6DA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _increment_in_negateOrCast1924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_negateOrCast1929 = new BitSet(new ulong[]{0x80010000030100UL,0x401008001001400UL});
		public static readonly BitSet _primitiveType_in_negateOrCast1931 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_negateOrCast1933 = new BitSet(new ulong[]{0x7BF61FACC0BF0370UL,0x7D6DA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _increment_in_negateOrCast1935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _increment_in_negateOrCast1940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncrementOperator_in_increment2003 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x796D879E2170F678UL,0x7UL});
		public static readonly BitSet _name_in_increment2005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_increment2010 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IncrementOperator_in_increment2012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_increment2017 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_increment2019 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _assignment_in_increment2027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newOrClone_in_increment2032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_increment2037 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_increment2039 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_increment2041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_newOrClone2063 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x7D6D879E2170F678UL,0x7UL});
		public static readonly BitSet _nameOrFunctionCall_in_newOrClone2066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_newOrClone2070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_newOrClone2076 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _Static_in_newOrClone2078 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_newOrClone2080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_newOrClone2086 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x796D879E2170F678UL,0x7UL});
		public static readonly BitSet _name_in_newOrClone2088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atomOrReference_in_newOrClone2093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_atomOrReference2105 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x7D6D879E2170F678UL,0x7UL});
		public static readonly BitSet _nameOrFunctionCall_in_atomOrReference2107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymousFunctionDefinition_in_atomOrReference2112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrFunctionCall_in_atomOrReference2117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_atomOrReference2122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrFunctionCall_in_atomOrReference2127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ArrayType_in_arrayDeclaration2138 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_arrayDeclaration2140 = new BitSet(new ulong[]{0x7BF61FACC2BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2143 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2146 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2148 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2152 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_arrayDeclaration2157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenSquareBracket_in_arrayDeclaration2162 = new BitSet(new ulong[]{0x7BF61FACC4BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2165 = new BitSet(new ulong[]{0x14000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2168 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration2170 = new BitSet(new ulong[]{0x14000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration2174 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseSquareBracket_in_arrayDeclaration2179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_arrayEntry2191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_arrayEntry2195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_keyValuePair2208 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ArrayAssign_in_keyValuePair2210 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_keyValuePair2212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SingleQuotedString_in_atom2222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleQuotedString_in_atom2227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HereDoc_in_atom2232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Integer_in_atom2244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Real_in_atom2256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_in_atom2261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_atom2266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaration_in_atom2271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _requireOperator_in_atom2276 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_atom2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_atom2283 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_functionArguments2294 = new BitSet(new ulong[]{0x7BF61FACC2BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_functionArguments2297 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_functionArguments2300 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_functionArguments2302 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_functionArguments2308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenSquareBracket_in_indexer2319 = new BitSet(new ulong[]{0x7BF61FACC4BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_indexer2321 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseSquareBracket_in_indexer2324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_indexer2329 = new BitSet(new ulong[]{0x7BF61FACC1BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_indexer2331 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_indexer2334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _InstanceMember_in_memberAccess2346 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3D74FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_memberAccess2349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_memberAccess2353 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_memberAccess2355 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_memberAccess2357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_memberAccess2364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_memberAccess2366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_memberAccess2368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Print_in_memberAccess2370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_memberAccess2372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_memberAccess2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_memberAccess2376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_memberAccess2378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_memberAccess2380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_memberAccess2382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Do_in_memberAccess2384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Try_in_memberAccess2386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Catch_in_memberAccess2388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Finally_in_memberAccess2390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_memberAccess2392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Case_in_memberAccess2394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Default_in_memberAccess2396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_memberAccess2398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_memberAccess2400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_memberAccess2402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_memberAccess2404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_memberAccess2406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_memberAccess2408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_memberAccess2410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_memberAccess2412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_memberAccess2414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_memberAccess2416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_memberAccess2418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_memberAccess2420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Instanceof_in_memberAccess2422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_memberAccess2424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_memberAccess2426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Class_in_memberAccess2428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_memberAccess2430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_memberAccess2432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_memberAccess2434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_memberAccess2436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Var_in_memberAccess2438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_memberAccess2440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _As_in_memberAccess2442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Require_in_memberAccess2444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RequireOnce_in_memberAccess2446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Include_in_memberAccess2448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncludeOnce_in_memberAccess2450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Public_in_memberAccess2452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Private_in_memberAccess2454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Protected_in_memberAccess2456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _True_in_memberAccess2458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _False_in_memberAccess2460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HaltCompiler_in_memberAccess2462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Die_in_memberAccess2464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Empty_in_memberAccess2466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Exit_in_memberAccess2468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Eval_in_memberAccess2470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Isset_in_memberAccess2472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntType_in_memberAccess2479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntegerType_in_memberAccess2483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BoolType_in_memberAccess2487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BooleanType_in_memberAccess2491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FloatType_in_memberAccess2495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleType_in_memberAccess2499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealType_in_memberAccess2506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringType_in_memberAccess2510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ObjectType_in_memberAccess2514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Use_in_memberAccess2520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrFunctionCall_in_nameOrFunctionCall2536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrFunctionCall_in_nameOrFunctionCall2541 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_variableOrFunctionCall2552 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_variableOrFunctionCall2554 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_variableOrFunctionCall2558 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_variableOrFunctionCall2562 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_variableOrFunctionCall2564 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_constantOrFunctionCall2578 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_constantOrFunctionCall2580 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_constantOrFunctionCall2583 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_constantOrFunctionCall2587 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_constantOrFunctionCall2589 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_constantOrFunctionCall2597 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_constantOrFunctionCall2600 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_constantOrFunctionCall2604 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_constantOrFunctionCall2606 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _predefinedFunctionName_in_constantOrFunctionCall2614 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_constantOrFunctionCall2616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_name2637 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_name2641 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_name2647 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_name2655 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_name2659 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_name2663 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_name2665 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_name2673 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_name2677 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _variableOrStaticAccessor_in_name2684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2696 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_variableOrStaticAccessor2700 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_variableOrStaticAccessor2703 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL,0x2UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_variableOrStaticAccessor2710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_constantOrStaticAccessor2722 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_constantOrStaticAccessor2726 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_constantOrStaticAccessor2729 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x1UL});
		public static readonly BitSet _set_in_constantOrStaticAccessor2731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_constantOrStaticAccessor2905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableVariable_in_variable2917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VariableName_in_variableVariable2928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_variableVariable2933 = new BitSet(new ulong[]{0x0UL,0x2000000004000000UL,0x2UL});
		public static readonly BitSet _variableVariable_in_variableVariable2936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_variableVariable2940 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_variableVariable2942 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_variableVariable2944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_qualifiedName2957 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x1UL});
		public static readonly BitSet _set_in_qualifiedName2960 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_qualifiedName3139 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x1UL});
		public static readonly BitSet _set_in_qualifiedName3141 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _BodyString_in_synpred1_Php327 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _namespaceDefinition_in_synpred1_Php331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _useStatement_in_synpred2_Php337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred3_Php341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred6_Php427 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_synpred6_Php429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred8_Php442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred10_Php442 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _simpleStatement_in_synpred10_Php447 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BodyString_in_synpred10_Php453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespaceBlock_in_synpred11_Php460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_synpred13_Php470 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred13_Php472 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred13_Php474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_synpred14_Php479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDefinition_in_synpred15_Php484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _complexStatement_in_synpred16_Php489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleStatement_in_synpred17_Php494 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _SemiColon_in_synpred17_Php496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred18_Php525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred46_Php877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_synpred47_Php867 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred47_Php869 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred47_Php871 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred47_Php873 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred47_Php875 = new BitSet(new ulong[]{0xC0000000002UL});
		public static readonly BitSet _conditional_in_synpred47_Php877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_synpred48_Php883 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred48_Php885 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FAFDF3974FEF9UL,0x7UL});
		public static readonly BitSet _forInit_in_synpred48_Php887 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FAFDF3974FEF9UL,0x7UL});
		public static readonly BitSet _forCondition_in_synpred48_Php889 = new BitSet(new ulong[]{0x7BF61FACC2BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _forUpdate_in_synpred48_Php891 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred48_Php893 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred48_Php895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_synpred49_Php900 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred49_Php902 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred49_Php904 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _As_in_synpred49_Php906 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _arrayEntry_in_synpred49_Php908 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred49_Php910 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred49_Php912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_synpred51_Php917 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred51_Php919 = new BitSet(new ulong[]{0x7BF61FACC2BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred51_Php921 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred51_Php924 = new BitSet(new ulong[]{0x7BF61FACC0BF3370UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred51_Php926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred52_Php941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalWithColon_in_synpred53_Php944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_synpred54_Php931 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred54_Php933 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred54_Php935 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred54_Php937 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred54_Php939 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred54_Php941 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _conditionalWithColon_in_synpred54_Php944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred55_Php964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_synpred56_Php950 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred56_Php952 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FAFDF3974FEF9UL,0x7UL});
		public static readonly BitSet _forInit_in_synpred56_Php954 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FAFDF3974FEF9UL,0x7UL});
		public static readonly BitSet _forCondition_in_synpred56_Php956 = new BitSet(new ulong[]{0x7BF61FACC2BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _forUpdate_in_synpred56_Php958 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred56_Php960 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred56_Php962 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred56_Php964 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred57_Php984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_synpred58_Php970 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred58_Php972 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred58_Php974 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _As_in_synpred58_Php976 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _arrayEntry_in_synpred58_Php978 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred58_Php980 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred58_Php982 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred58_Php984 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred60_Php1001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_synpred61_Php990 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred61_Php992 = new BitSet(new ulong[]{0x7BF61FACC2BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred61_Php994 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred61_Php997 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred61_Php999 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _statement_in_synpred61_Php1001 = new BitSet(new ulong[]{0x7BF61FACC0BF3372UL,0x7D7FAFDF3D74FEF9UL,0x7UL});
		public static readonly BitSet _Catch_in_synpred65_Php1066 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred65_Php1068 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x596D879E2170F678UL,0x5UL});
		public static readonly BitSet _qualifiedName_in_synpred65_Php1070 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL,0x2UL});
		public static readonly BitSet _variable_in_synpred65_Php1072 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred65_Php1074 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_synpred65_Php1076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Finally_in_synpred66_Php1084 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracketedBlock_in_synpred66_Php1086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_synpred67_Php1099 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _commaList_in_synpred67_Php1101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Print_in_synpred68_Php1106 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred68_Php1108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_synpred70_Php1113 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL,0x2UL});
		public static readonly BitSet _variable_in_synpred70_Php1115 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_synpred70_Php1118 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL,0x2UL});
		public static readonly BitSet _variable_in_synpred70_Php1120 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Static_in_synpred74_Php1128 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _VariableName_in_synpred74_Php1130 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_synpred74_Php1133 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_synpred74_Php1135 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _Comma_in_synpred74_Php1140 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _VariableName_in_synpred74_Php1142 = new BitSet(new ulong[]{0x800010000002UL});
		public static readonly BitSet _Equals_in_synpred74_Php1145 = new BitSet(new ulong[]{0x7BF61FACC0BF0350UL,0x796DA7DF3174FE79UL,0x7UL});
		public static readonly BitSet _atom_in_synpred74_Php1147 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _constDefinition_in_synpred75_Php1156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_synpred77_Php1161 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _Integer_in_synpred77_Php1163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_synpred79_Php1169 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _Integer_in_synpred79_Php1171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_synpred80_Php1177 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _UnquotedString_in_synpred80_Php1179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_synpred82_Php1184 = new BitSet(new ulong[]{0x7BF61FACC0BF1372UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred82_Php1186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_synpred83_Php1192 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _UnquotedString_in_synpred83_Php1194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_synpred84_Php1199 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred84_Php1201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred85_Php1227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred87_Php1256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalWithColon_in_synpred88_Php1259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred90_Php1269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _casestatement_in_synpred96_Php1322 = new BitSet(new ulong[]{0x400080000UL});
		public static readonly BitSet _defaultcase_in_synpred96_Php1325 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _casestatement_in_synpred96_Php1327 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _statement_in_synpred99_Php1355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred101_Php1377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_synpred106_Php1458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_synpred107_Php1462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_synpred111_Php1536 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _weakLogicalXor_in_synpred111_Php1538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_synpred112_Php1554 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _weakLogicalAnd_in_synpred112_Php1556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_synpred113_Php1573 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _assignment_in_synpred113_Php1575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_synpred115_Php1588 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_synpred115_Php1590 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _assignment_in_synpred115_Php1598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_synpred119_Php1614 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred119_Php1616 = new BitSet(new ulong[]{0x7BF61F2CD2BF0250UL,0x796D879E2170F678UL,0x7UL});
		public static readonly BitSet _name_in_synpred119_Php1618 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _Comma_in_synpred119_Php1622 = new BitSet(new ulong[]{0x7BF61F2CD2BF0250UL,0x796D879E2170F678UL,0x7UL});
		public static readonly BitSet _name_in_synpred119_Php1624 = new BitSet(new ulong[]{0x12000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred119_Php1629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_synpred121_Php1646 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _QuestionMark_in_synpred121_Php1648 = new BitSet(new ulong[]{0x7BF61FACC8BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred121_Php1650 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _Colon_in_synpred121_Php1653 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred121_Php1655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LogicalOr_in_synpred122_Php1675 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _logicalAnd_in_synpred122_Php1677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LogicalAnd_in_synpred123_Php1693 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _bitwiseOr_in_synpred123_Php1695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Pipe_in_synpred124_Php1712 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _bitwiseXor_in_synpred124_Php1714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Hat_in_synpred125_Php1731 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _bitWiseAnd_in_synpred125_Php1733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_synpred126_Php1749 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _equalityCheck_in_synpred126_Php1751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EqualityOperator_in_synpred127_Php1767 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _comparisionCheck_in_synpred127_Php1769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ComparisionOperator_in_synpred128_Php1786 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _bitWiseShift_in_synpred128_Php1788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ShiftOperator_in_synpred129_Php1804 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _addition_in_synpred129_Php1806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred132_Php1823 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _multiplication_in_synpred132_Php1835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred135_Php1851 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _logicalNot_in_synpred135_Php1863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Instanceof_in_synpred137_Php1897 = new BitSet(new ulong[]{0x7BF61FACC0BF0370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _negateOrCast_in_synpred137_Php1899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred140_Php1912 = new BitSet(new ulong[]{0x7BF61FACC0BF0370UL,0x7D6DA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _increment_in_synpred140_Php1924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred141_Php1929 = new BitSet(new ulong[]{0x80010000030100UL,0x401008001001400UL});
		public static readonly BitSet _primitiveType_in_synpred141_Php1931 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred141_Php1933 = new BitSet(new ulong[]{0x7BF61FACC0BF0370UL,0x7D6DA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _increment_in_synpred141_Php1935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred153_Php2010 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _IncrementOperator_in_synpred153_Php2012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_synpred155_Php2017 = new BitSet(new ulong[]{0x800000000400UL});
		public static readonly BitSet _set_in_synpred155_Php2019 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _assignment_in_synpred155_Php2027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newOrClone_in_synpred156_Php2032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameOrFunctionCall_in_synpred157_Php2066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred158_Php2063 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x7D6D879E2170F678UL,0x7UL});
		public static readonly BitSet _nameOrFunctionCall_in_synpred158_Php2066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred158_Php2070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred159_Php2080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred160_Php2076 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _Static_in_synpred160_Php2078 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred160_Php2080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_synpred161_Php2086 = new BitSet(new ulong[]{0x7BF61F2CC0BF0250UL,0x796D879E2170F678UL,0x7UL});
		public static readonly BitSet _name_in_synpred161_Php2088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymousFunctionDefinition_in_synpred163_Php2112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrFunctionCall_in_synpred164_Php2117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_synpred165_Php2122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_synpred173_Php2191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Integer_in_synpred179_Php2244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Real_in_synpred182_Php2256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_in_synpred183_Php2261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_synpred184_Php2266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _requireOperator_in_synpred186_Php2276 = new BitSet(new ulong[]{0x7BF61FACC0BF1370UL,0x7D7FA7DF3974FEF9UL,0x7UL});
		public static readonly BitSet _expression_in_synpred186_Php2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred192_Php2349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_synpred194_Php2364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_synpred195_Php2366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_synpred196_Php2368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Print_in_synpred197_Php2370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_synpred198_Php2372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_synpred199_Php2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_synpred200_Php2376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_synpred201_Php2378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_synpred202_Php2380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_synpred203_Php2382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Do_in_synpred204_Php2384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Try_in_synpred205_Php2386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Catch_in_synpred206_Php2388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Finally_in_synpred207_Php2390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_synpred208_Php2392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Case_in_synpred209_Php2394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Default_in_synpred210_Php2396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_synpred211_Php2398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Function_in_synpred212_Php2400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_synpred213_Php2402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_synpred214_Php2404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Goto_in_synpred215_Php2406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_synpred216_Php2408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Throw_in_synpred217_Php2410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_synpred218_Php2412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Static_in_synpred219_Php2414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_synpred220_Php2416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_synpred221_Php2418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_synpred222_Php2420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Instanceof_in_synpred223_Php2422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_synpred224_Php2424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_synpred225_Php2426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Class_in_synpred226_Php2428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_synpred227_Php2430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_synpred228_Php2432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_synpred229_Php2434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_synpred230_Php2436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Var_in_synpred231_Php2438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_synpred232_Php2440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _As_in_synpred233_Php2442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Require_in_synpred234_Php2444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RequireOnce_in_synpred235_Php2446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Include_in_synpred236_Php2448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncludeOnce_in_synpred237_Php2450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Public_in_synpred238_Php2452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Private_in_synpred239_Php2454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Protected_in_synpred240_Php2456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _True_in_synpred241_Php2458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _False_in_synpred242_Php2460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HaltCompiler_in_synpred243_Php2462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Die_in_synpred244_Php2464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Empty_in_synpred245_Php2466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Exit_in_synpred246_Php2468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Eval_in_synpred247_Php2470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Isset_in_synpred248_Php2472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntType_in_synpred249_Php2479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntegerType_in_synpred250_Php2483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BoolType_in_synpred251_Php2487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BooleanType_in_synpred252_Php2491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FloatType_in_synpred253_Php2495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleType_in_synpred254_Php2499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealType_in_synpred255_Php2506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringType_in_synpred256_Php2510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ObjectType_in_synpred257_Php2514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrFunctionCall_in_synpred258_Php2536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred259_Php2554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred260_Php2558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred261_Php2564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred262_Php2562 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred262_Php2564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred263_Php2583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred264_Php2589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred265_Php2587 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred265_Php2589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred266_Php2578 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred266_Php2580 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred266_Php2583 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred266_Php2587 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred266_Php2589 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred267_Php2600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionArguments_in_synpred268_Php2606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred269_Php2604 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred269_Php2606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred270_Php2597 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred270_Php2600 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred270_Php2604 = new BitSet(new ulong[]{0x2UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred270_Php2606 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _functionArguments_in_synpred271_Php2616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_synpred272_Php2637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred275_Php2659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred276_Php2655 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred276_Php2659 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred276_Php2663 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred276_Php2665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_in_synpred277_Php2673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred278_Php2677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableOrStaticAccessor_in_synpred279_Php2637 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _constantOrStaticAccessor_in_synpred279_Php2641 = new BitSet(new ulong[]{0x0UL,0x1C000100UL});
		public static readonly BitSet _functionArguments_in_synpred279_Php2647 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred279_Php2655 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred279_Php2659 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred279_Php2663 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _functionArguments_in_synpred279_Php2665 = new BitSet(new ulong[]{0x0UL,0x14000100UL});
		public static readonly BitSet _indexer_in_synpred279_Php2673 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _memberAccess_in_synpred279_Php2677 = new BitSet(new ulong[]{0x2UL,0x14000100UL});
		public static readonly BitSet _variable_in_synpred281_Php2696 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _qualifiedName_in_synpred281_Php2700 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _ClassMember_in_synpred281_Php2703 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL,0x2UL});
		public static readonly BitSet _variable_in_synpred281_Php2705 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
