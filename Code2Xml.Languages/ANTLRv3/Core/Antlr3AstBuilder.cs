#region License

// Copyright (C) 2011-2013 Kazunori Sakamoto
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#endregion

using System.Linq;
using System.Xml.Linq;
using Antlr.Runtime;
using Antlr.Runtime.Tree;
using Code2Xml.Core;
using Code2Xml.Core.Location;
using Code2Xml.Core.Processors;

namespace Code2Xml.Languages.ANTLRv3.Core {
	public class Antlr3AstBuilder : CommonTreeAdaptor {
		private readonly XElement _dummyNode;
		private readonly CommonTokenStream _stream;
		private int _nextTokenIndex;
		private XElement _lastElement;
		private readonly string[] _tokenNames;

		public Antlr3AstBuilder() {} // for parser generated by ANTLR 3

		public Antlr3AstBuilder(CommonTokenStream stream, string[] tokenNames) {
			_stream = stream;
			_tokenNames = tokenNames;
			_dummyNode = new XElement("dummy");
			_lastElement = _dummyNode;
			_nextTokenIndex = 0;
		}

		public XElement FinishParsing(XElement root) {
			var count = _stream.Count - 1; // Avoid writing "<EOF>"
			while (_stream.Get(count - 1).Type < 0) {
				count--;
			}
			GatherHiddenTokens(count);

			var firstTokensNode = root.Descendants(Code2XmlConstants.TokenGroupName).FirstOrDefault() ??
			                      root.Descendants().LastOrDefault();
			if (firstTokensNode != null) {
				foreach (var element in _dummyNode.Elements().Reverse()) {
					firstTokensNode.AddFirst(element);
				}
			}
			return root;
		}

		public void AddChild(object t, object child, Antlr3AstNode target, Antlr3AstNode parent) {
			parent.Element.Add(target.Element);
			base.AddChild(t, child);
		}

		public object Create(IToken token, Antlr3AstNode parent) {
			if (token != null) {
				var count = token.TokenIndex;
				GatherHiddenTokens(count);

				_nextTokenIndex = count + 1;
				_lastElement = new XElement(
						Code2XmlConstants.TokenGroupName,
						CreateTokenElement(Code2XmlConstants.TokenName, token));
				parent.Element.Add(_lastElement);
			}
			return base.Create(token);
		}

		private void GatherHiddenTokens(int count) {
			for (int i = _nextTokenIndex; i < count; i++) {
				var oldToken = _stream.Get(i);
				var name = oldToken.Channel != Lexer.Hidden
						? Code2XmlConstants.TokenName
						: _tokenNames[oldToken.Type];
				_lastElement.Add(CreateTokenElement(name, oldToken));
			}
		}

		private static XElement CreateTokenElement(string name, IToken token) {
			var tokenElement = new XElement(name, token.Text);
			var startLocation = new CodeLocation(token.Line, token.CharPositionInLine);
			return CodeRange.SetLocationAttributes(tokenElement, startLocation);
		}
	}

	public class Antlr3AstBuilderWithReportingError : Antlr3AstBuilder {
		public Antlr3AstBuilderWithReportingError(CommonTokenStream stream, string[] tokenNames)
				: base(stream, tokenNames) {}

		public override object ErrorNode(
				ITokenStream input, IToken start, IToken stop, RecognitionException e) {
			throw new ParseException(e);
		}
	}
}