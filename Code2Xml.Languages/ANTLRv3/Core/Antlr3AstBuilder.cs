#region License

// Copyright (C) 2011-2013 Kazunori Sakamoto
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#endregion

using System.Collections.Generic;
using System.Diagnostics;
using System.Xml.Linq;
using Antlr.Runtime;
using Antlr.Runtime.Tree;
using Code2Xml.Core;
using Code2Xml.Core.Location;

namespace Code2Xml.Languages.ANTLRv3.Core {
	public class Antlr3AstBuilder : CommonTreeAdaptor {
		private readonly CommonTokenStream _stream;
		private int _nextTokenIndex;
		private readonly string[] _tokenNames;

		public Antlr3AstBuilder() {} // for parser generated by ANTLR 3

		public Antlr3AstBuilder(CommonTokenStream stream, string[] tokenNames) {
			_stream = stream;
			_tokenNames = tokenNames;
			_nextTokenIndex = 0;
		}

		public XElement FinishParsing(XElement root) {
			var count = _stream.Count - 1; // Avoid writing "<EOF>"
			while (_stream.Get(count - 1).Type < 0) {
				count--;
			}
			var token = _stream.Get(count);
			var tokenName = Code2XmlConstants.EofElementName;
			var element = CreateTokenWithHiddenElement(token, tokenName, count);
			root.Add(element);
			return root;
		}

		private XElement CreateTokenWithHiddenElement(IToken token, string tokenName, int count) {
			var element = new XElement(tokenName);
			for (int i = _nextTokenIndex; i < count; i++) {
				var oldToken = _stream.Get(i);
				var hiddenName = DetermineElementName(oldToken, Code2XmlConstants.HiddenElementName);
				Debug.Assert(oldToken.Channel == Lexer.Hidden);
				var hiddenElement = CreateHiddenElement(hiddenName, oldToken);
				element.Add(hiddenElement);
			}
			var tokenElement = CreateTokenElement(Code2XmlConstants.TokenElementName, token);
			element.Add(tokenElement);
			return element;
		}

		public void AddChild(object t, object child, Antlr3AstNode target, Antlr3AstNode parent) {
			parent.Element.Add(target.Element);
			base.AddChild(t, child);
		}

		public object Create(IToken token, Antlr3AstNode parent) {
			if (token != null) {
				var count = token.TokenIndex;
				var tokenName = DetermineElementName(token, Code2XmlConstants.TokenGroupElementName);
				var element = CreateTokenWithHiddenElement(token, tokenName, count);
				parent.Element.Add(element);
				_nextTokenIndex = count + 1;
			}
			return base.Create(token);
		}

		private string DetermineElementName(IToken token, string defaultName) {
			var tokenName = _tokenNames[token.Type];
			return !char.IsLetter(tokenName[0]) ? defaultName : tokenName;
		}

		private static XElement CreateTokenElement(string name, IToken token) {
			return CreateTokenElement(name, token.Text, token.Line, token.CharPositionInLine);
		}

		private static XElement CreateHiddenElement(string name, IToken token) {
			return CreateHiddenElement(name, token.Text, token.Line, token.CharPositionInLine);
		}

		private static XElement CreateTokenElement(string name, string text, int startLine, int startPos) {
			var tokenElement = new XElement(name, text);
			var startLocation = new CodeLocation(startLine, startPos);
			return CodeRange.SetLocationAttributes(tokenElement, text, startLocation);
		}

		private static XElement CreateHiddenElement(string name, string text, int startLine, int startPos) {
			var tokenElement = new XElement(name);
			tokenElement.SetAttributeValue(Code2XmlConstants.HiddenAttributeName, text);
			var startLocation = new CodeLocation(startLine, startPos);
			return CodeRange.SetLocationAttributes(tokenElement, text, startLocation);
		}
	}

	public class Antlr3AstBuilderWithReportingError : Antlr3AstBuilder {
		public Antlr3AstBuilderWithReportingError(CommonTokenStream stream, string[] tokenNames)
				: base(stream, tokenNames) {}

		public override object ErrorNode(
				ITokenStream input, IToken start, IToken stop, RecognitionException e) {
			throw new ParseException(e);
		}
	}
}