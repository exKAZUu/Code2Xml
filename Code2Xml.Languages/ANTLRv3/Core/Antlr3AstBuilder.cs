#region License

// Copyright (C) 2011-2013 Kazunori Sakamoto
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#endregion

using System.Diagnostics;
using System.Xml.Linq;
using Antlr.Runtime;
using Antlr.Runtime.Tree;
using Code2Xml.Core;
using Code2Xml.Core.Location;

namespace Code2Xml.Languages.ANTLRv3.Core {
    public class Antlr3AstBuilder : CommonTreeAdaptor {
        private readonly CommonTokenStream _stream;
        private readonly string[] _tokenNames;
        private int _nextTokenIndex;

        public Antlr3AstBuilder() {} // for parser generated by ANTLR 3

        public Antlr3AstBuilder(CommonTokenStream stream, string[] tokenNames) {
            _stream = stream;
            _tokenNames = tokenNames;
            _nextTokenIndex = 0;
        }

        public XElement FinishParsing(XElement root) {
            var count = _stream.Count - 1; // Avoid writing "<EOF>"
            while (_stream.Get(count - 1).Type < 0) {
                count--;
            }
            var token = _stream.Get(count);
            var tokenName = Code2XmlConstants.EofElementName;
            var element = CreateTokenSetElement(tokenName, token, string.Empty, count);
            root.Add(element);
            return root;
        }

        public void AddChild(object t, object child, Antlr3AstNode target, Antlr3AstNode parent) {
            parent.Element.Add(target.Element);
            base.AddChild(t, child);
        }

        public object Create(IToken token, Antlr3AstNode parent) {
            if (token != null) {
                var count = token.TokenIndex;
                var tokenName = DetermineElementName(token, Code2XmlConstants.TokenSetElementName);
                var element = CreateTokenSetElement(tokenName, token, token.Text, count);
                parent.Element.Add(element);
                _nextTokenIndex = count + 1;
            }
            return base.Create(token);
        }

        private XElement CreateTokenSetElement(
                string tokenSetName, IToken token, string text, int exclusiveEndIndex) {
            var element = new XElement(tokenSetName);
            for (int i = _nextTokenIndex; i < exclusiveEndIndex; i++) {
                var oldToken = _stream.Get(i);	// Includes skipped tokens (maybe)
                var hiddenName = DetermineElementName(oldToken, Code2XmlConstants.HiddenElementName);
                var hiddenElement = CreateHiddenElement(hiddenName, oldToken);
                element.Add(hiddenElement);
            }
            var tokenElement = CreateTokenElement(Code2XmlConstants.TokenElementName, text, token);
            element.Add(tokenElement);
            return element;
        }

        private string DetermineElementName(IToken token, string defaultName) {
            var tokenName = _tokenNames[token.Type];
            return !char.IsLetter(tokenName[0]) ? defaultName : tokenName;
        }

        private static XElement CreateTokenElement(string name, string text, IToken token) {
            var tokenElement = new XElement(name, text);
            var startLocation = new CodeLocation(token.Line, token.CharPositionInLine);
            return CodeRange.SetLocationAttributes(tokenElement, text, startLocation);
        }

        private static XElement CreateHiddenElement(string name, IToken token) {
            var tokenElement = new XElement(name);
            tokenElement.SetAttributeValue(Code2XmlConstants.HiddenAttributeName, token.Text);
            var startLocation = new CodeLocation(token.Line, token.CharPositionInLine);
            return CodeRange.SetLocationAttributes(tokenElement, token.Text, startLocation);
        }
    }

    public class Antlr3AstBuilderWithReportingError : Antlr3AstBuilder {
        public Antlr3AstBuilderWithReportingError(CommonTokenStream stream, string[] tokenNames)
                : base(stream, tokenNames) {}

        public override object ErrorNode(
                ITokenStream input, IToken start, IToken stop, RecognitionException e) {
            throw new ParseException(e);
        }
    }
}