#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby18Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-503,483,129,129,551,-89,-450,-503,-503,-503,714,-83,3,-503,-503,604',
'-503,-85,-84,-87,-86,404,425,-64,-444,-503,522,-88,523,-79,-445,-444',
'483,483,-90,-503,-503,-445,-503,-503,-503,-503,-503,483,263,264,-77',
'384,-75,764,-85,654,-83,672,383,575,-87,483,653,263,264,-72,699,382',
'-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503',
'672,672,-503,-503,-503,-499,545,426,131,131,-503,576,-500,-503,743,-79',
'523,129,-503,750,-503,269,-503,-503,-503,-503,-503,-503,-503,-81,-503',
'-503,-503,-79,271,-75,485,758,683,272,605,-77,-76,-79,-78,-503,-503',
'-281,-78,757,-503,-80,-86,-79,-281,-281,-281,-79,-82,271,-281,-281,-77',
'-281,272,271,271,485,485,269,272,272,271,575,673,-496,271,272,485,-365',
'-76,272,-281,-281,-84,-281,-281,-281,-281,-281,271,751,485,769,453,272',
'713,271,271,673,673,131,272,272,357,602,743,576,773,603,453,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-438,-77',
'-281,-281,-281,357,546,-438,-500,776,-281,-81,-496,-281,-503,-89,-438',
'-85,-281,-77,-281,299,-281,-281,-281,-281,-281,-281,-281,654,-281,-89',
'-281,357,-496,299,653,736,-450,-77,358,359,413,-77,403,-281,-281,-519',
'-80,-503,-281,734,-88,732,-519,-519,-519,799,-500,-519,-519,-519,158',
'-519,-503,-500,358,359,575,357,-500,-503,730,-519,-500,595,-499,269',
'729,357,-503,552,-519,-519,-83,-519,-519,-519,-519,-519,-90,728,-500',
'94,358,359,361,357,-503,-503,394,39,576,-84,-82,584,-503,404,-90,575',
'-443,-499,-275,510,814,-503,512,-443,814,-275,-275,-275,-519,-79,-275',
'-275,-275,-87,-275,-519,358,359,526,-503,323,-519,717,299,-275,-275',
'358,359,536,576,786,-503,404,-275,-275,326,-275,-275,-275,-275,-275',
'136,325,-519,358,359,618,621,624,627,618,621,624,627,510,297,-519,512',
'-519,280,282,-519,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275',
'-275,-275,-275,-275,711,299,-275,-275,-275,-503,796,-275,-441,-497,-275',
'-499,-503,-275,-275,-441,-275,-499,-275,797,-275,-503,-275,-275,-275',
'-275,-275,-275,-275,-446,-275,701,-275,297,-448,436,-446,280,282,-503',
'510,-448,435,534,-519,-275,-275,-275,-275,271,-275,-519,-519,-519,272',
'697,-519,-519,-519,-441,-519,-499,-281,695,510,432,-441,515,-499,-281',
'-519,-497,431,-499,-500,-441,323,-499,-281,-519,-519,395,-519,-519,-519',
'-519,-519,-438,323,-447,584,299,271,-497,-438,-499,-447,272,624,627',
'584,299,300,277,279,281,285,288,290,292,294,296,299,302,278,271,271',
'284,287,-519,272,272,693,297,263,264,-519,280,282,286,289,323,-519,297',
'390,301,804,280,282,286,289,291,293,295,297,298,754,743,280,282,286',
'289,-282,615,-519,619,622,625,628,-282,271,283,-500,-500,-500,272,-500',
'-519,-282,-519,-500,-500,-519,265,266,-500,390,-500,-500,-500,-500,-500',
'-500,-500,263,264,263,264,-500,-500,-500,-500,-500,-500,-500,754,743',
'-262,271,618,621,624,627,272,-500,377,378,-500,-500,-500,-500,-500,-500',
'-500,-500,-500,-500,523,-500,-500,670,-500,-500,-500,299,-520,-520,-520',
'-520,285,288,807,-283,-520,-520,-283,263,264,-282,-283,284,287,-283',
'-500,546,-282,-500,-500,-283,-500,-500,-283,667,-500,-282,-500,297,-500',
'301,-500,280,282,286,289,291,293,295,-500,298,269,655,269,-500,-500',
'-500,-500,-500,-500,816,376,269,-500,-500,-499,-499,-499,375,-499,819',
'441,-88,-499,-499,439,440,374,-499,305,-499,-499,-499,-499,-499,-499',
'-499,822,-262,825,650,-499,-499,-499,-499,-499,-499,-499,680,681,649',
'682,86,93,648,829,323,-499,323,305,-499,-499,-499,-499,-499,-499,-499',
'-499,-499,-499,-72,-499,-499,831,-499,-499,-499,299,300,277,279,281',
'285,288,290,292,294,296,600,-520,-520,103,647,284,287,599,-499,712,102',
'-499,-499,644,-499,-499,598,299,-499,101,-499,297,-499,301,-499,280',
'282,286,289,291,293,295,-499,298,-263,299,299,-499,-499,-499,-499,-499',
'-499,836,299,639,-499,-499,19,23,27,32,36,638,609,-86,54,62,608,842',
'844,82,584,90,96,6,11,18,24,28,847,450,743,323,51,57,60,63,68,73,78',
'851,852,97,316,317,318,319,320,30,38,42,46,47,52,59,66,69,74,79,83,86',
'93,853,9,16,542,26,31,35,299,-520,-520,-520,-520,285,288,857,-281,-520',
'-520,-281,532,452,-327,-281,284,287,-281,41,-500,-327,55,-500,-281,72',
'77,-281,269,91,-327,7,297,861,301,29,280,282,286,289,291,293,295,65',
'298,862,736,730,87,94,4,10,17,21,736,-282,866,39,43,19,23,27,-282,36',
'452,509,850,54,62,488,487,-282,82,849,90,96,6,11,18,24,28,-63,848,871',
'454,51,57,60,63,68,73,78,873,446,97,445,876,877,442,666,584,38,584,299',
'47,52,59,66,69,74,79,83,86,93,428,9,16,884,26,31,35,299,300,277,279',
'281,285,288,290,292,294,296,-274,302,278,-449,424,284,287,-274,141,410',
'-449,125,408,407,72,77,-274,406,91,-449,891,297,405,301,29,280,282,286',
'289,291,293,295,65,298,404,399,323,87,94,4,10,17,21,390,385,323,39,43',
'271,283,19,23,27,272,36,315,381,-449,54,62,269,905,379,82,-449,90,96',
'6,106,107,24,28,354,-449,908,910,114,115,116,63,68,73,78,316,317,318',
'319,320,346,336,305,303,112,275,912,47,52,59,66,69,74,79,83,86,93,913',
'9,16,914,-274,615,109,619,622,625,628,-274,397,316,317,318,319,320,736',
'396,-274,916,638,269,584,584,792,166,395,125,159,156,72,77,923,152,91',
'98,584,,,,615,630,619,622,625,628,,,,618,621,624,627,87,94,4,10,17,21',
',,,39,43,19,23,27,892,36,,,,54,62,,,,82,630,90,96,6,106,107,24,28,618',
'621,624,627,114,115,116,63,68,73,78,,,,,,,,,,112,,,47,52,59,66,69,74',
'79,83,86,93,,9,16,,,,109,299,300,277,279,281,285,288,290,292,294,296',
',302,278,,,284,287,,792,,,125,,,72,77,,,91,,,297,,301,,280,282,286,289',
'291,293,295,,298,,,,87,94,4,10,17,21,,,,39,43,,283,643,793,14,19,23',
'27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78',
',,97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,41,,,313,,,72,77,,,91,,7,,,,29,615,,619,622,625,628',
',65,,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,,82,',
'90,96,6,11,18,24,28,618,621,624,627,51,57,60,63,68,73,78,,,97,,,,,,30',
'38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,299,,,,,,,,,',
',,,,,,284,287,,41,,,55,,,72,77,,,91,,7,297,,301,29,280,282,286,289,',
',295,65,298,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62',
',,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38',
'42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,299,300,277,279',
'281,285,288,290,,294,296,,,,,,284,287,,41,,,55,,,72,77,,,91,,7,297,',
'301,29,280,282,286,289,291,293,295,65,298,,,,87,94,4,10,17,21,,,,39',
'43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60',
'63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16',
',26,31,35,299,,,,,,,,,,,,,,,,284,287,,41,,,55,,,72,77,,,91,,7,297,,301',
'29,280,282,286,289,,,295,65,298,,,,87,94,4,10,17,21,,,,39,43,14,19,23',
'27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78',
',,97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
'299,-520,-520,-520,-520,285,288,,,-520,-520,,,,,,284,287,,41,,,55,,',
'72,77,,,91,,7,297,,301,29,280,282,286,289,291,293,295,65,298,,,,87,94',
'4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18',
'24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69',
'74,79,83,86,93,,9,16,,26,31,35,299,-520,-520,-520,-520,285,288,,,-520',
'-520,,,,,,284,287,,41,,,55,,,72,77,,,91,,7,297,,301,29,280,282,286,289',
'291,293,295,65,298,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,',
',54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,',
',30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,299,,,,,',
',,,,,,,,,,284,287,,41,,,55,,,72,77,,,91,,7,297,,301,29,280,282,286,289',
',,295,65,298,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62',
',,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38',
'42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,299,-520,-520,-520',
'-520,285,288,,,-520,-520,,,,,,284,287,,41,,,55,,,72,77,,,91,,7,297,',
'301,29,280,282,286,289,291,293,295,65,298,,,,87,94,4,10,17,21,,,,39',
'43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60',
'63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16',
',26,31,35,299,300,277,279,281,285,288,290,292,294,296,,-520,-520,,,284',
'287,,41,,,55,,,72,77,,,91,,7,297,,301,29,280,282,286,289,291,293,295',
'65,298,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,,82',
',90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38,42,46',
'47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,299,,,,,,,,,,,,,,,,284',
'287,,41,,,55,,,72,77,,,91,,7,297,,301,29,280,282,286,289,,,295,65,298',
',,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96',
'6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59',
'66,69,74,79,83,86,93,,9,16,,26,31,35,299,-520,-520,-520,-520,285,288',
',,-520,-520,,,,,,284,287,,41,,,55,,,72,77,,,91,,7,297,,301,29,280,282',
'286,289,291,293,295,65,298,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27',
'32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,',
',97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,299',
'300,277,279,281,285,288,,,294,296,,,,,,284,287,,41,,,55,,,72,77,,,91',
',7,297,,301,29,280,282,286,289,291,293,295,65,298,,,,87,94,4,10,17,21',
',,,39,43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51',
'57,60,63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,299,,,,,,,,,,,,,,,,284,287,,41,,,55,,,72,77,,,91,,7',
'297,,,29,280,282,286,289,,,,65,,,,,87,94,4,10,17,21,,,,39,43,14,19,23',
'27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78',
',,97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
'299,,,,,,,,,,,,,,,,284,287,,41,,,55,,,72,77,,,91,,7,297,,301,29,280',
'282,286,289,,,,65,,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,',
',54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,',
',30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,299,,,,,',
',,,,,,,,,,284,287,,41,,,55,,,72,77,,,91,,7,297,,301,29,280,282,286,289',
',,,65,,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,,82',
',90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38,42,46',
'47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,41',
',,55,,,72,77,,,91,,7,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,14',
'19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68',
'73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26',
'31,35,,,,,,,,,,,,,,,,,,,,41,,,55,,,72,77,,,91,,7,,,,29,,,,,,,,65,,,',
',87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96,6',
'11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59',
'66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,41,,,55,,,72',
'77,,,91,,7,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27',
'32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,',
',97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,',
',,,,,,,,,,,,,,,,,,41,,,55,,,72,77,,,91,,7,,,,29,,,,,,,,65,,,,,87,94',
'4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18',
'24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69',
'74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,41,,,313,,,72,77,',
',91,,7,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32',
'36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97',
',,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,',
',,,,,,,,,,,,,,41,,,55,,,72,77,,,91,,7,,,,29,,,,,,,,65,,,,,87,94,4,10',
'17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28',
',,,,51,57,60,63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69,74,79',
'83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,41,,,55,,,72,77,,,91,,7',
',,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54',
'62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30',
'38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,',
',,,,,,41,,,55,,,72,77,,,91,,7,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,',
',,39,43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51',
'57,60,63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,41,,,313,,,72,77,,,91,,7,,,,29,,',
',,,,,65,,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,',
'82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38,42',
'46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,',
'41,,,55,,,72,77,,,91,,7,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43',
'14,19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63',
'68,73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,',
'26,31,35,,,,,,,,,,,,,,,,,,,,41,,,55,,,72,77,,,91,,7,,,,29,,,,,,,,65',
',,,,87,94,4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96',
'6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59',
'66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,41,,,55,,,72',
'77,,,91,,7,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,14,19,23,27',
'32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,',
',97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,',
',,,,,,,,,,,,,,,,,,41,,,55,,,72,77,,,91,,7,,,,29,,,,,,,,65,,,,,87,94',
'4,10,17,21,,,,39,43,14,19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18',
'24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69',
'74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,41,,,55,,,72,77,,',
'91,,7,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,174,177,181,187',
'192,197,201,205,211,218,226,230,231,234,237,241,243,169,171,173,179',
'183,189,193,,,206,212,219,250,253,256,259,238,242,244,,,,,,185,195,199',
'203,247,248,249,224,,,258,,,,,,,,180,186,,196,200,209,216,,225,229,',
',236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172,,176,184,190,194,198,202',
'207,213,220,,228,,,239,87,,,19,23,27,,36,,,43,54,62,,,,82,,90,96,6,11',
'18,24,28,,,,,51,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79',
'83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,',
',,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62',
',,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,,38,,',
'47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19',
'23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73',
'78,,,97,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,',
',,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4',
'10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28',
',,,,114,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,330,,,,29',
',,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,-497,-497,-497,,-497,,,,-497',
'-497,,,,-497,,-497,-497,-497,-497,-497,-497,-497,,-497,,,-497,-497,-497',
'-497,-497,-497,-497,,,,,,,,,,-497,,,-497,-497,-497,-497,-497,-497,-497',
'-497,-497,-497,,-497,-497,,-497,-497,-497,,,,,,,,,,,,,,,,,,,,-497,,',
'-497,-497,,-497,-497,,,-497,,-497,,-497,,-497,,,,,,,,-497,,-497,,,-497',
'-497,-497,-497,-497,-497,,,,-497,-497,19,23,27,,36,,,,54,62,,,,82,,90',
'96,6,106,107,24,28,,,,,114,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59',
'66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,',
'72,77,,,91,,592,,136,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,-252',
'-252,-252,,-252,,,,-252,-252,,,,-252,,-252,-252,-252,-252,-252,-252',
'-252,,,,,-252,-252,-252,-252,-252,-252,-252,,,,,,,,,,-252,,,-252,-252',
'-252,-252,-252,-252,-252,-252,-252,-252,,-252,-252,,-252,-252,-252,',
',,,,,,,,,,,,,,,,,,-252,,,-252,323,,-252,-252,,,-252,,-252,,-252,,-252',
',,,,,,,-252,,,,,-252,-252,-252,-252,-252,-252,,,,-252,-252,19,23,27',
',36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78',
',,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,',
',,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10',
'17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,',
',,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,',
',,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,',
'90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52',
'59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125',
',,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23',
'27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73',
'78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,',
',,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4',
'10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28',
',,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86',
'93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29',
',,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82',
',90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,,38,,,47,52',
'59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125',
',,72,77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19,23,27',
',36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78',
',,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,',
',,,,,,,,,,,141,,,125,,,72,77,,,91,,767,,,,29,,,,,,,,145,,,,,87,94,4',
'10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28',
',,,,114,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,330,,,,29',
',,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82',
',90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47',
'52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,',
'125,,,72,77,,,91,,516,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63',
'68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,770,,,,29,,,,,,,,145,,,,',
'87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18',
'24,28,,,,,51,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83',
'86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,',
',29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,174,177,181,187,192,197',
'201,205,211,218,226,230,231,234,237,241,243,169,171,173,179,183,189',
'193,,,206,212,219,250,253,256,259,238,242,244,,,,,,185,195,199,203,247',
'248,249,224,,,258,,,,,,,,180,186,,196,200,209,216,,225,229,,,236,,,',
',175,178,182,188,,,,,,,,,,,,,,170,172,,176,184,190,194,198,202,207,213',
'220,,228,,,239,87,,,19,23,27,,36,,,43,54,62,,,,82,,90,96,6,106,107,24',
'28,,,,,114,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86',
'93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,330,,',
',29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,',
',,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,112',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,,,109,,,,,,,,,,,,,,,,,,,,792',
',,125,,,72,77,,,91,,,,,,,,,,,,,,,,,,,87,94,4,10,17,21,,,,39,43,19,23',
'27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73',
'78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,',
',,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4',
'10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28',
',,,,114,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,330,,,,29',
',,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82',
',90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47',
'52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,',
'125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19',
'23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68',
'73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,',
',,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,781,,136,,29,,,,,,,,145,,,',
',87,94,4,10,17,21,,,,39,43,-496,-496,-496,,-496,,,,-496,-496,,,,-496',
',-496,-496,-496,-496,-496,-496,-496,,-496,,,-496,-496,-496,-496,-496',
'-496,-496,,,,,,,,,,-496,,,-496,-496,-496,-496,-496,-496,-496,-496,-496',
'-496,,-496,-496,,-496,-496,-496,,,,,,,,,,,,,,,,,,,,-496,,,-496,-496',
',-496,-496,,,-496,,-496,,-496,,-496,,,,,,,,-496,,-496,,,-496,-496,-496',
'-496,-496,-496,,,,-496,-496,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106',
'107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74',
'79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91',
',782,,136,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36',
',,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,',
',,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,',
',,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17',
'21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114',
'115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16',
',26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145',
',,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106',
'107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,112,,,47,52,59,66,69',
'74,79,83,86,93,,9,16,,,,109,,,,,,,,,,,,,,,,,,,,113,,,55,,,72,77,,,91',
',7,,,,,,,,,,,,,,,,,87,94,4,10,17,21,,,,39,43,-252,-252,-252,,-252,,',
',-252,-252,,,,-252,,-252,-252,-252,-252,-252,-252,-252,,,,,-252,-252',
'-252,-252,-252,-252,-252,,,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252',
'-252,-252,-252,-252,,-252,-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252',
',,-252,315,,-252,-252,,,-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252',
'-252,-252,-252,-252,-252,,,,-252,-252,19,23,27,,36,,,,54,62,,,,82,,90',
'96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,,38,,,47,52,59,66',
'69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72',
'77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36',
',,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,57,60,63,68,73,78,,,,',
',,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,',
',,,,,,,141,,,125,,,388,77,,,91,,134,,136,,29,,,,,,,,145,,,,,87,94,4',
'10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28',
',,,,114,115,116,63,68,73,78,,,,,,,,,,112,,,47,52,59,66,69,74,79,83,86',
'93,,9,16,,,,109,,,,,,,,,,,,,,,,,,,,124,,,125,,,72,77,,,91,,,,,,,,,,',
',,,,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96',
'6,106,107,24,28,,,,,114,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66',
'69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72',
'77,,,91,,134,,136,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23',
'27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73',
'78,,,,,,,,,,112,,,47,52,59,66,69,74,79,83,86,93,,9,16,,,,109,,,,,,,',
',,,,,,,,,,,,792,,,125,,,72,77,,,91,,,,,,,,,,,,,,,,,,,87,94,4,10,17,21',
',,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114',
'115,116,63,68,73,78,,,,,,,,,,112,,,47,52,59,66,69,74,79,83,86,93,,9',
'16,,,,109,,,,,,,,,,,,,,,,,,,,124,,,164,,,72,77,,,91,,704,,705,,,,,,',
',,708,,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90',
'96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59',
'66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,',
'72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27',
',36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,57,60,63,68,73,78',
',,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,',
',,,,,,,,,,,141,,,125,,,72,77,,,91,,134,,136,,29,,,,,,,,145,,,,,87,94',
'4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24',
'28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83',
'86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,',
',29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,',
',,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'-501,-501,-501,,-501,,,,-501,-501,,,,-501,,-501,-501,-501,-501,-501',
'-501,-501,,,,,-501,-501,-501,-501,-501,-501,-501,,,,,,,,,,-501,,,-501',
'-501,-501,-501,-501,-501,-501,-501,-501,-501,,-501,-501,,-501,-501,-501',
',,,,,,,,,,,,,,,,,,,-501,,,-501,-501,,-501,-501,,,-501,,-501,,-501,,-501',
',,,,,,,-501,,,,,-501,-501,-501,-501,-501,-501,,,,-501,-501,19,23,27',
',36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78',
',,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,',
',,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10',
'17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,',
'51,57,60,63,68,73,78,,,97,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,',
'9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,',
',,,,65,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90',
'96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59',
'66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,',
'72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27',
',36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78',
',,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,',
',,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10',
'17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,',
',,114,115,116,63,68,73,78,,,,,,,,,,112,,,47,52,59,66,69,74,79,83,86',
'93,,9,16,,,,109,,,,,,,,,,,,,,,,,,,,792,,,125,,,72,77,,,91,,,,,,,,,,',
',,,,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96',
'6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66',
'69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72',
'77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36',
',,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,',
',,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,',
',,,,,,,,,141,,,125,,,72,77,,,91,,802,,136,,29,,,,,,,,145,,,,,87,94,4',
'10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,',
',,,51,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,',
',,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,',
'90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59',
'66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,',
'72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27',
',36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78',
',,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,',
',,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10',
'17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,',
',,114,115,116,63,68,73,78,,,,,,,,,,112,,,47,52,420,66,69,74,421,83,86',
'93,,9,16,,,,109,,,,,,,,,,,,,,,,,,,,417,,,125,,,72,77,,,91,,,,,,,,,,',
',,,,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96',
'6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69',
'74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77',
',,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,',
',,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,57,60,63,68,73,78,,,,,',
',,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,',
',,,,,,141,,,125,,,72,77,,,91,,330,,,,29,,,,,,,,145,,,,,87,94,4,10,17',
'21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51',
'57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16',
',26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145',
',,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106',
'107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,112,,,47,52,59,66,69',
'74,79,83,86,93,,9,16,,,,109,,,,,,,,,,,,,,,,,,,,124,,,125,,,72,77,,,91',
',,,,,,,,,,,,,,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,',
',82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,',
',47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,882,,136,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,',
'39,43,19,23,27,32,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60',
'63,68,73,78,,,97,,,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16',
',26,31,35,,,,,,,,,,,,,,,,,,,,41,,,55,,,72,77,,,91,,7,,,,29,,,,,,,,65',
',,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106',
'107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,112,,,47,52,420,66,69',
'74,421,83,86,93,,9,16,,,,109,,,,,,,,,,,,,,,,,,,,417,,,125,,,72,77,,',
'91,,,,,,,,,,,,,,,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62',
',,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68',
'73,78,,,97,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,65,,,,,87,94',
'4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24',
'28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83',
'86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,',
',29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,',
',,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63',
'68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87',
'94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107',
'24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79',
'83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,',
'663,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54',
'62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,',
',38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,',
',,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,',
',39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,57',
'60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26',
'31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,134,,136,,29,,,,,,',
',145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96',
'6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,112,,,47,52,59',
'66,69,74,79,83,86,93,,9,16,,,,109,,,,,,,,,,,,,,,,,,,,792,,,125,,,72',
'77,,,91,,,,,,,,,,,,,,,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,',
'54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,',
',,,,112,,,47,52,59,66,69,74,79,83,86,93,,9,16,,,,109,,,,,,,,,,,,,,,',
',,,,124,,,164,,,72,77,,,91,,162,,,,,,,,,,,,,,,,,87,94,4,10,17,21,,,',
'39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60',
'63,68,73,78,,,97,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26',
'31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,65,,',
',,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106',
'107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74',
'79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91',
',881,,136,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36',
',,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,',
',,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,',
',,,,,,,,,141,,,125,,,72,77,,,91,,921,,136,,29,,,,,,,,145,,,,,87,94,4',
'10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,',
',,,51,57,60,63,68,73,78,,,97,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,',
',,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90',
'96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,,38,,,47,52,59,66',
'69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72',
'77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36',
',,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,',
',,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,',
',,,,,,,,,141,,,125,,,72,77,,,91,,875,,,,29,,,,,,,,145,,,,,87,94,4,10',
'17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,',
',,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,',
',,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,',
'90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,112,,,47',
'52,59,66,69,74,79,83,86,93,,9,16,,,,109,,,,,,,,,,,,,,,,,,,,792,,,125',
',,72,77,,,91,,,,,,,,,,,,,,,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36',
',,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,',
',,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,',
',,,,,,,,,141,,,125,450,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10',
'17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,',
',,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,',
',,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,',
'90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52',
'59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125',
',,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23',
'27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73',
'78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,',
',,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4',
'10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28',
',,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86',
'93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29',
',,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82',
',90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47',
'52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,',
'125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19',
'23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68',
'73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,',
',,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94',
'4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24',
'28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83',
'86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,',
',29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,',
',,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63',
'68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87',
'94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107',
'24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79',
'83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,',
',,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62',
',,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63',
'68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87',
'94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107',
'24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79',
'83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,',
',,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62',
',,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63',
'68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87',
'94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107',
'24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79',
'83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,',
',,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62',
',,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63',
'68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87',
'94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107',
'24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79',
'83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,',
',,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62',
',,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63',
'68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87',
'94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107',
'24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79',
'83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,',
',,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62',
',,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63',
'68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87',
'94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107',
'24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79',
'83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,',
',,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62',
',,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63',
'68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87',
'94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107',
'24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79',
'83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,',
',,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62',
',,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68',
'73,78,,,97,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35',
',,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,65,,,,,87,94',
'4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24',
'28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83',
'86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,',
',29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,',
',,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63',
'68,73,78,,,,,,,,,,112,,,47,52,59,66,69,74,79,83,86,93,,9,16,,,,109,',
',,,,,,,,,,,,,,,,,,792,,,125,,,72,77,,,91,,,,,,,,,,,,,,,,,,,87,94,4,10',
'17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,',
',,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,',
',,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,',
'90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,,38,,,47,52,59',
'66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,',
'72,77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19,23,27',
',36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78',
',,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,',
',,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10',
'17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,',
',,114,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,491,72,77,,,91,,134,,136',
',29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,',
',,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,,38,,,47',
'52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,',
'125,,,72,77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19',
'23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73',
'78,,,97,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,',
',,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4',
'10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,',
',,,51,57,60,63,68,73,78,,,97,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,',
',,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90',
'96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,,38,,,47,52,59,66',
'69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72',
'77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,32',
'36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97',
',,,,,30,38,42,46,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,',
',,,,,,,,,,,,,,41,,,55,,,72,77,,,91,,7,,,,29,,,,,,,,65,,,,,87,94,4,10',
'17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,',
',,114,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,134,,136',
',29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,',
',,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43',
'174,177,181,187,192,197,201,205,211,218,226,230,231,234,237,241,243',
'169,171,173,179,183,189,193,,,206,212,219,250,253,256,259,238,242,244',
',,,,,185,195,199,203,247,248,249,224,255,,258,,,,,,,,180,186,,196,200',
'209,216,,225,229,,,236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172,,176',
'184,190,194,198,202,207,213,220,,228,,,239,87,,,19,23,27,,36,,,43,54',
'62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19',
'23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68',
'73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,',
',,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,592,,136,,29,,,,,,,,145,,,',
',87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106',
'107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74',
'79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91',
',,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54',
'62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,',
',38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,',
',,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,',
',39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115',
'116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26',
'31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,',
',,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106',
'107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74',
'79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91',
',,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54',
'62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,',
',38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,',
',,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,',
',39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60',
'63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31',
'35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,516,,,,29,,,,,,,,145,',
',,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106',
'107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74',
'79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91',
',586,,136,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36',
',,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,',
',,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,',
',,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17',
'21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114',
'115,116,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16',
',26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145',
',,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106',
'107,24,28,,,,,114,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74',
'79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91',
',330,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,',
'54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,,,,,,,,38',
',,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141',
',,125,,,72,77,,,91,,516,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,,,39',
'43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,,,,,51,57,60,63',
'68,73,78,,,97,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31',
'35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,65,,,,,87',
'94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24',
'28,,,,,51,57,60,63,68,73,78,,,97,,,,,,,38,,,47,52,59,66,69,74,79,83',
'86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,566',
',136,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54',
'62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,,,,',
',38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,',
',,,141,,,125,,,72,77,,,91,,,,,,29,,,,,,,,145,,,,,87,94,4,10,17,21,,',
',39,43,19,23,27,,36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,57',
'60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93,,9,16,,26',
'31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,330,,,,29,,,,,,,,145',
',,,,87,94,4,10,17,21,,,,39,43,-252,-252,-252,,-252,,,,-252,-252,,,,-252',
',-252,-252,-252,-252,-252,-252,-252,,,,,-252,-252,-252,-252,-252,-252',
'-252,,,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252',
',-252,-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,,-252,323,,-252',
'-252,,,-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252,-252,-252,-252',
'-252,,,,-252,-252,19,23,27,,36,,,,54,62,,,,82,,90,96,6,11,18,24,28,',
',,,51,57,60,63,68,73,78,,,,,,,,,,38,,,47,52,59,66,69,74,79,83,86,93',
',9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,,72,77,,,91,,,,,,29,,',
',,,,,145,,,,,87,94,4,10,17,21,,,,39,43,19,23,27,,36,,,,54,62,,,,82,',
'90,96,6,11,18,24,28,,,,,51,57,60,63,68,73,78,,,97,,,,,,,38,,,47,52,59',
'66,69,74,79,83,86,93,,9,16,,26,31,35,,,,,,,,,,,,,,,,,,,,141,,,125,,',
'72,77,,,91,,,,,,29,,,,,,,,65,,,,,87,94,4,10,17,21,,,,39,43,19,23,27',
',36,,,,54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78',
',,,,,,,,,112,,,47,52,59,66,69,74,79,83,86,93,,9,16,,,,109,,,,,,,,,,',
',,,,,,,,,124,,,164,,,72,77,,,91,,854,,855,,,,,,,,,,,,,,,87,94,4,10,17',
'21,,,,39,43,174,177,181,187,192,197,201,205,211,218,226,230,231,234',
'237,241,243,169,171,173,179,183,189,193,,,206,212,219,250,253,256,259',
'238,242,244,,,,,,185,195,199,203,247,248,249,224,,,258,,,,,,,,180,186',
',196,200,209,216,,225,229,,,236,,,,,175,178,182,188,,,,,,,,,,,,,,170',
'172,,176,184,190,194,198,202,207,213,220,,228,,,239,87,,,-502,-502,-502',
',-502,,,43,-502,-502,,,,-502,,-502,-502,-502,-502,-502,-502,-502,,,',
',-502,-502,-502,-502,-502,-502,-502,,,,,,,,,,-502,,,-502,-502,-502,-502',
'-502,-502,-502,-502,-502,-502,,-502,-502,,-502,-502,-502,,,,,,,,,,,',
',,,,,,,,-502,,,-502,-502,,-502,-502,,,-502,,-502,,-502,,-502,,,,,,,',
'-502,,,,,-502,-502,-502,-502,-502,-502,,,,-502,-502,19,23,27,,36,,,',
'54,62,,,,82,,90,96,6,106,107,24,28,,,,,114,115,116,63,68,73,78,,,,,',
',,,,112,,,47,52,59,66,69,74,79,83,86,93,,9,16,,,,109,,,,,,,,,,,,,,,',
',,,,792,,,125,,,72,77,,,91,,,,,,,,,,,,,,,,,,,87,94,4,10,17,21,,,,39',
'43,174,177,181,187,192,197,201,205,211,218,226,230,231,234,237,241,243',
'169,171,173,179,183,189,193,,,206,212,219,250,253,256,259,238,242,244',
',,,,,185,195,199,203,247,248,249,224,343,344,258,345,,,,,,,180,186,',
'196,200,209,216,,225,229,,,236,,,,,175,178,182,188,,,,,,,,,,,,,,170',
'172,,176,184,190,194,198,202,207,213,220,,228,,,239,174,177,181,187',
'192,197,201,205,211,218,226,230,231,234,237,241,243,169,171,173,179',
'183,189,193,,,206,212,219,223,227,232,235,238,242,244,,,,,,185,195,199',
'203,208,215,222,224,69,74,233,83,,,,,,,180,186,,196,200,209,216,,225',
'229,,,236,,,,,175,178,182,188,,,,,,217,,,,,,,,170,172,,176,184,190,194',
'198,202,207,213,220,,228,,,239,174,177,181,187,192,197,201,205,211,218',
'226,230,231,234,237,241,243,169,171,173,179,183,189,193,,,206,212,219',
'250,253,256,259,238,242,244,,,,,,185,195,199,203,247,248,249,224,,,258',
',,,,,,,180,186,,196,200,209,216,,225,229,,,236,,,,,175,178,182,188,',
',,,,,,,666,,,,,170,172,,176,184,190,194,198,202,207,213,220,,228,,,239',
'299,300,277,279,281,285,288,290,292,294,296,,302,278,,,284,287,,,,,',
',,,,,,,,,297,,301,,280,282,286,289,291,293,295,,298,,,,,,,504,372,,',
'505,,,,,283,,-218,180,186,,196,200,209,216,,225,229,,,236,,,,,175,178',
'182,188,,,,,,,,,,,,,,170,172,,176,184,190,194,198,202,207,213,220,,228',
',,239,299,300,277,279,281,285,288,290,292,294,296,,302,278,,,284,287',
',,,-218,,,,,,,,,,,297,,301,,280,282,286,289,291,293,295,,298,,,,,,,371',
'372,,,373,,,,,283,,-218,180,186,,196,200,209,216,,225,229,,,236,,,,',
'175,178,182,188,,,,,,,,,,,,,,170,172,,176,184,190,194,198,202,207,213',
'220,,228,504,372,239,,505,,,,,,,,180,186,,196,200,209,216,,225,229,',
',236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172,,176,184,190,194,198,202',
'207,213,220,,228,582,372,239,,583,,,,,,,,180,186,,196,200,209,216,,225',
'229,,,236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172,,176,184,190,194',
'198,202,207,213,220,,228,580,367,239,,581,,,,,,,,180,186,,196,200,209',
'216,,225,229,,,236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172,,176,184',
'190,194,198,202,207,213,220,,228,,,239,299,300,277,279,281,285,288,290',
'292,294,296,,302,278,,,284,287,,,,,,,,,,,,,,,297,,301,,280,282,286,289',
'291,293,295,,298,,,,,,,580,367,,,581,,,,,283,,584,180,186,,196,200,209',
'216,,225,229,,,236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172,,176,184',
'190,194,198,202,207,213,220,,228,504,372,239,,505,,,,,,,,180,186,,196',
'200,209,216,,225,229,,,236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172',
',176,184,190,194,198,202,207,213,220,,228,564,372,239,,565,,,,,,,,180',
'186,,196,200,209,216,,225,229,,,236,,,,,175,178,182,188,,,,,,,,,,,,',
',170,172,,176,184,190,194,198,202,207,213,220,,228,562,367,239,,563',
',,,,,,,180,186,,196,200,209,216,,225,229,,,236,,,,,175,178,182,188,',
',,,,,,,,,,,,170,172,,176,184,190,194,198,202,207,213,220,,228,366,367',
'239,,368,,,,,,,,180,186,,196,200,209,216,,225,229,,,236,,,,,175,178',
'182,188,,,,,,,,,,,,,,170,172,,176,184,190,194,198,202,207,213,220,,228',
'888,372,239,,889,,,,,,,,180,186,,196,200,209,216,,225,229,,,236,,,,',
'175,178,182,188,,,,,,,,,,,,,,170,172,,176,184,190,194,198,202,207,213',
'220,,228,504,372,239,,505,,,,,,,,180,186,,196,200,209,216,,225,229,',
',236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172,,176,184,190,194,198,202',
'207,213,220,,228,886,367,239,,887,,,,,,,,180,186,,196,200,209,216,,225',
'229,,,236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172,,176,184,190,194',
'198,202,207,213,220,,228,582,372,239,,583,,,,,,,,180,186,,196,200,209',
'216,,225,229,,,236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172,,176,184',
'190,194,198,202,207,213,220,,228,504,372,239,,505,,,,,,,,180,186,,196',
'200,209,216,,225,229,,,236,,,,,175,178,182,188,,,,,,,,,,,,,,170,172',
',176,184,190,194,198,202,207,213,220,,228,722,367,239,,723,,,,,,,,180',
'186,,196,200,209,216,,225,229,,,236,,,,,175,178,182,188,,,,,,,,,,,,',
',170,172,,176,184,190,194,198,202,207,213,220,,228,555,367,239,,556',
',,,,,,,180,186,,196,200,209,216,,225,229,,,236,,,,,175,178,182,188,',
',,,,,,,,,,,,170,172,,176,184,190,194,198,202,207,213,220,,228,558,372',
'239,,559,,,,,,,,180,186,,196,200,209,216,,225,229,,,236,,,,,175,178',
'182,188,,,,,,,,,,,,,,170,172,,176,184,190,194,198,202,207,213,220,,228',
',,239,299,300,277,279,281,285,288,290,292,294,296,,302,278,,,284,287',
',,,,,,,,,,,,,,297,,301,,280,282,286,289,291,293,295,,298,299,300,277',
'279,281,285,288,290,292,294,296,,302,278,,283,284,287,,,,,,,,,,,,,,',
'297,,301,,280,282,286,289,291,293,295,,298,299,300,277,279,281,285,288',
'290,292,294,296,,302,278,269,283,284,287,,,,,,,,,,,,,,,297,,301,,280',
'282,286,289,291,293,295,,298,299,300,277,279,281,285,288,290,292,294',
'296,,302,278,,283,284,287,,,,,,,,,,,,,,,297,,301,,280,282,286,289,291',
'293,295,,298,299,300,277,279,281,285,288,290,292,294,296,,302,278,,283',
'284,287,,,,,,,,,,,,,,,297,,301,,280,282,286,289,291,293,295,,298,299',
'300,277,279,281,285,288,290,292,294,296,,302,278,,283,284,287,,,,,,',
',,,,,,,,297,,301,,280,282,286,289,291,293,295,,298,299,300,277,279,281',
'285,288,290,292,294,296,,302,278,,283,284,287,,,,,,,,,,,,,,,297,,301',
',280,282,286,289,291,293,295,,298,299,300,277,279,281,285,288,290,292',
'294,296,,302,278,,283,284,287,,,,,,,,,,,,,,,297,,301,,280,282,286,289',
'291,293,295,,298,299,300,277,279,281,285,288,290,292,294,296,,302,278',
',283,284,287,,,,,,,,,,,,,,,297,,301,,280,282,286,289,291,293,295,,298',
'299,300,277,279,281,285,288,290,292,294,296,,302,278,269,283,284,287',
',,,,,,,,,,,,,,297,,301,,280,282,286,289,291,293,295,,298,299,300,277',
'279,281,285,288,290,292,294,296,,302,278,,283,284,287,,,,,,,,,,,,,,',
'297,,301,,280,282,286,289,291,293,295,,298,299,300,277,279,281,285,288',
'290,292,294,296,,302,278,,283,284,287,,,,,,,,,,,,,,,297,,301,,280,282',
'286,289,291,293,295,,298,299,300,277,279,281,285,288,290,292,294,296',
',302,278,,283,284,287,,,,,,,,,,,,,,,297,,301,,280,282,286,289,291,293',
'295,,298,299,300,277,279,281,285,288,290,292,294,296,,302,278,,283,284',
'287,,,,,,,,,,,,,,,297,,301,,280,282,286,289,291,293,295,,298,,,,,,,',
',,,,,,,,283' ]
        racc_action_table = arr = ::Array.new(25040, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'366,828,15,105,371,381,37,366,366,366,583,111,1,366,366,419,366,558',
'693,559,555,568,161,648,223,366,337,556,337,565,232,223,309,771,108',
'366,366,232,366,366,366,366,366,824,640,640,371,120,37,661,371,762,37',
'530,120,482,583,324,762,632,632,648,568,120,366,366,366,366,366,366',
'366,366,366,366,366,366,366,366,539,694,366,366,366,555,366,161,15,105',
'366,482,556,366,874,565,874,8,366,640,366,762,366,366,366,366,366,366',
'366,381,366,366,366,565,828,111,828,652,542,828,419,558,693,559,555',
'366,366,368,366,651,366,556,366,565,368,368,368,565,108,419,368,368',
'564,368,419,309,771,309,771,632,309,771,530,573,530,420,824,530,824',
'8,542,824,368,368,542,368,368,368,368,368,324,642,324,668,275,324,582',
'539,694,539,694,8,539,694,153,417,637,573,671,417,405,368,368,368,368',
'368,368,368,368,368,368,368,368,368,368,420,564,368,368,368,411,368',
'420,889,677,368,275,420,368,886,275,420,582,368,564,368,636,368,368',
'368,368,368,368,368,500,368,405,368,99,420,635,500,623,140,564,153,153',
'153,564,137,368,368,506,368,722,368,620,368,617,506,506,506,711,889',
'506,506,506,20,506,886,889,411,411,391,342,889,886,615,506,889,411,886',
'500,614,352,886,373,506,506,140,506,506,506,506,506,137,613,889,48,99',
'99,99,132,886,722,132,48,391,711,20,696,722,594,20,393,227,722,66,332',
'734,722,332,227,862,66,66,66,506,373,66,66,66,373,66,506,342,342,342',
'722,506,506,593,464,66,66,352,352,352,393,700,562,587,66,66,64,66,66',
'66,66,66,584,64,506,132,132,734,734,734,734,862,862,862,862,348,464',
'506,348,506,464,464,506,66,66,66,66,66,66,66,66,66,66,66,66,66,66,579',
'467,66,66,66,562,707,66,233,421,66,888,562,66,66,233,66,562,66,709,66',
'562,66,66,66,66,66,66,66,235,66,572,66,467,208,210,235,467,467,562,351',
'208,210,351,503,66,66,66,66,604,66,503,503,503,604,567,503,503,503,421',
'503,888,887,561,335,167,421,335,888,887,503,421,167,888,887,421,557',
'888,887,503,503,167,503,503,503,503,503,222,554,215,715,465,40,421,222',
'888,215,40,736,736,716,752,752,752,752,752,752,752,752,752,752,752,462',
'752,752,616,805,752,752,503,616,805,553,465,329,329,503,465,465,465',
'465,503,503,752,547,752,720,752,752,752,752,752,752,752,462,752,646',
'646,462,462,462,462,603,630,503,630,630,630,630,603,339,752,581,581',
'581,339,581,503,603,503,581,581,503,35,35,581,543,581,581,581,581,581',
'581,581,597,597,308,308,581,581,581,581,581,581,581,900,900,528,719',
'630,630,630,630,719,581,109,109,581,581,581,581,581,581,581,581,581',
'581,525,581,581,524,581,581,581,455,455,455,455,455,455,455,727,695',
'455,455,910,33,33,851,695,455,455,910,581,581,851,581,581,695,581,581',
'910,521,581,851,581,455,581,455,581,455,455,455,455,455,455,455,581',
'455,507,501,499,581,581,581,581,581,581,738,104,739,581,581,580,580',
'580,104,580,741,255,581,580,580,255,255,104,580,498,580,580,580,580',
'580,580,580,744,747,748,497,580,580,580,580,580,580,580,541,541,490',
'541,541,541,489,755,759,580,760,761,580,580,580,580,580,580,580,580',
'580,580,488,580,580,763,580,580,580,456,456,456,456,456,456,456,456',
'456,456,456,415,456,456,5,486,456,456,415,580,580,5,580,580,481,580',
'580,415,477,580,5,580,456,580,456,580,456,456,456,456,456,456,456,580',
'456,768,475,460,580,580,580,580,580,580,772,458,448,580,580,270,270',
'270,270,270,447,429,580,270,270,425,783,785,270,398,270,270,270,270',
'270,270,270,788,380,656,363,270,270,270,270,270,270,270,792,793,270',
'150,150,150,150,150,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,794,270,270,362,270,270,270,472,472,472,472,472,472,472,798',
'563,472,472,723,350,338,92,563,472,472,723,270,563,92,270,723,563,270',
'270,723,334,270,92,270,472,806,472,270,472,472,472,472,472,472,472,270',
'472,810,811,814,270,270,270,270,270,270,815,385,817,270,270,82,82,82',
'385,82,270,331,789,82,82,312,311,385,82,789,82,82,82,82,82,82,82,310',
'789,827,276,82,82,82,82,82,82,82,830,266,82,265,837,838,262,591,840',
'82,841,260,82,82,82,82,82,82,82,82,82,82,163,82,82,846,82,82,82,591',
'591,591,591,591,591,591,591,591,591,591,790,591,591,791,159,591,591',
'790,82,152,791,82,149,148,82,82,790,147,82,791,853,591,141,591,82,591',
'591,591,591,591,591,591,82,591,138,135,130,82,82,82,82,82,82,128,124',
'116,82,82,82,591,854,854,854,82,854,115,113,123,854,854,112,878,110',
'854,123,854,854,854,854,854,854,854,95,123,883,885,854,854,854,854,854',
'854,854,58,58,58,58,58,89,81,50,46,854,41,892,854,854,854,854,854,854',
'854,854,854,854,893,854,854,896,121,818,854,818,818,818,818,121,133',
'451,451,451,451,451,897,133,121,898,899,38,906,907,854,25,133,854,21',
'19,854,854,913,17,854,3,924,,,,433,818,433,433,433,433,,,,818,818,818',
'818,854,854,854,854,854,854,,,,854,854,704,704,704,854,704,,,,704,704',
',,,704,433,704,704,704,704,704,704,704,433,433,433,433,704,704,704,704',
'704,704,704,,,,,,,,,,704,,,704,704,704,704,704,704,704,704,704,704,',
'704,704,,,,704,461,461,461,461,461,461,461,461,461,461,461,,461,461',
',,461,461,,704,,,704,,,704,704,,,704,,,461,,461,,461,461,461,461,461',
'461,461,,461,,,,704,704,704,704,704,704,,,,704,704,,461,461,704,313',
'313,313,313,313,313,,,,313,313,,,,313,,313,313,313,313,313,313,313,',
',,,313,313,313,313,313,313,313,,,313,,,,,,313,313,313,313,313,313,313',
'313,313,313,313,313,313,313,,313,313,,313,313,313,,,,,,,,,,,,,,,,,,',
',313,,,313,,,313,313,,,313,,313,,,,313,732,,732,732,732,732,,313,,,',
',313,313,313,313,313,313,,,,313,313,502,502,502,502,502,502,,,,502,502',
',,,502,,502,502,502,502,502,502,502,732,732,732,732,502,502,502,502',
'502,502,502,,,502,,,,,,502,502,502,502,502,502,502,502,502,502,502,502',
'502,502,,502,502,,502,502,502,471,,,,,,,,,,,,,,,,471,471,,502,,,502',
',,502,502,,,502,,502,471,,471,502,471,471,471,471,,,471,502,471,,,,502',
'502,502,502,502,502,,,,502,502,743,743,743,743,743,743,,,,743,743,,',
',743,,743,743,743,743,743,743,743,,,,,743,743,743,743,743,743,743,,',
'743,,,,,,743,743,743,743,743,743,743,743,743,743,743,743,743,743,,743',
'743,,743,743,743,470,470,470,470,470,470,470,470,,470,470,,,,,,470,470',
',743,,,743,,,743,743,,,743,,743,470,,470,743,470,470,470,470,470,470',
'470,743,470,,,,743,743,743,743,743,743,,,,743,743,753,753,753,753,753',
'753,,,,753,753,,,,753,,753,753,753,753,753,753,753,,,,,753,753,753,753',
'753,753,753,,,753,,,,,,753,753,753,753,753,753,753,753,753,753,753,753',
'753,753,,753,753,,753,753,753,469,,,,,,,,,,,,,,,,469,469,,753,,,753',
',,753,753,,,753,,753,469,,469,753,469,469,469,469,,,469,753,469,,,,753',
'753,753,753,753,753,,,,753,753,484,484,484,484,484,484,,,,484,484,,',
',484,,484,484,484,484,484,484,484,,,,,484,484,484,484,484,484,484,,',
'484,,,,,,484,484,484,484,484,484,484,484,484,484,484,484,484,484,,484',
'484,,484,484,484,474,474,474,474,474,474,474,,,474,474,,,,,,474,474',
',484,,,484,,,484,484,,,484,,484,474,,474,484,474,474,474,474,474,474',
'474,484,474,,,,484,484,484,484,484,484,,,,484,484,774,774,774,774,774',
'774,,,,774,774,,,,774,,774,774,774,774,774,774,774,,,,,774,774,774,774',
'774,774,774,,,774,,,,,,774,774,774,774,774,774,774,774,774,774,774,774',
'774,774,,774,774,,774,774,774,457,457,457,457,457,457,457,,,457,457',
',,,,,457,457,,774,,,774,,,774,774,,,774,,774,457,,457,774,457,457,457',
'457,457,457,457,774,457,,,,774,774,774,774,774,774,,,,774,774,454,454',
'454,454,454,454,,,,454,454,,,,454,,454,454,454,454,454,454,454,,,,,454',
'454,454,454,454,454,454,,,454,,,,,,454,454,454,454,454,454,454,454,454',
'454,454,454,454,454,,454,454,,454,454,454,466,,,,,,,,,,,,,,,,466,466',
',454,,,454,,,454,454,,,454,,454,466,,466,454,466,466,466,466,,,466,454',
'466,,,,454,454,454,454,454,454,,,,454,454,775,775,775,775,775,775,,',
',775,775,,,,775,,775,775,775,775,775,775,775,,,,,775,775,775,775,775',
'775,775,,,775,,,,,,775,775,775,775,775,775,775,775,775,775,775,775,775',
'775,,775,775,,775,775,775,478,478,478,478,478,478,478,,,478,478,,,,',
',478,478,,775,,,775,,,775,775,,,775,,775,478,,478,775,478,478,478,478',
'478,478,478,775,478,,,,775,775,775,775,775,775,,,,775,775,703,703,703',
'703,703,703,,,,703,703,,,,703,,703,703,703,703,703,703,703,,,,,703,703',
'703,703,703,703,703,,,703,,,,,,703,703,703,703,703,703,703,703,703,703',
'703,703,703,703,,703,703,,703,703,703,480,480,480,480,480,480,480,480',
'480,480,480,,480,480,,,480,480,,703,,,703,,,703,703,,,703,,703,480,',
'480,703,480,480,480,480,480,480,480,703,480,,,,703,703,703,703,703,703',
',,,703,703,787,787,787,787,787,787,,,,787,787,,,,787,,787,787,787,787',
'787,787,787,,,,,787,787,787,787,787,787,787,,,787,,,,,,787,787,787,787',
'787,787,787,787,787,787,787,787,787,787,,787,787,,787,787,787,463,,',
',,,,,,,,,,,,,463,463,,787,,,787,,,787,787,,,787,,787,463,,463,787,463',
'463,463,463,,,463,787,463,,,,787,787,787,787,787,787,,,,787,787,610',
'610,610,610,610,610,,,,610,610,,,,610,,610,610,610,610,610,610,610,',
',,,610,610,610,610,610,610,610,,,610,,,,,,610,610,610,610,610,610,610',
'610,610,610,610,610,610,610,,610,610,,610,610,610,459,459,459,459,459',
'459,459,,,459,459,,,,,,459,459,,610,,,610,,,610,610,,,610,,610,459,',
'459,610,459,459,459,459,459,459,459,610,459,,,,610,610,610,610,610,610',
',,,610,610,626,626,626,626,626,626,,,,626,626,,,,626,,626,626,626,626',
'626,626,626,,,,,626,626,626,626,626,626,626,,,626,,,,,,626,626,626,626',
'626,626,626,626,626,626,626,626,626,626,,626,626,,626,626,626,468,468',
'468,468,468,468,468,,,468,468,,,,,,468,468,,626,,,626,,,626,626,,,626',
',626,468,,468,626,468,468,468,468,468,468,468,626,468,,,,626,626,626',
'626,626,626,,,,626,626,540,540,540,540,540,540,,,,540,540,,,,540,,540',
'540,540,540,540,540,540,,,,,540,540,540,540,540,540,540,,,540,,,,,,540',
'540,540,540,540,540,540,540,540,540,540,540,540,540,,540,540,,540,540',
'540,479,,,,,,,,,,,,,,,,479,479,,540,,,540,,,540,540,,,540,,540,479,',
',540,479,479,479,479,,,,540,,,,,540,540,540,540,540,540,,,,540,540,822',
'822,822,822,822,822,,,,822,822,,,,822,,822,822,822,822,822,822,822,',
',,,822,822,822,822,822,822,822,,,822,,,,,,822,822,822,822,822,822,822',
'822,822,822,822,822,822,822,,822,822,,822,822,822,476,,,,,,,,,,,,,,',
',476,476,,822,,,822,,,822,822,,,822,,822,476,,476,822,476,476,476,476',
',,,822,,,,,822,822,822,822,822,822,,,,822,822,303,303,303,303,303,303',
',,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,303,303,303,303,303',
'303,303,,,303,,,,,,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,,303,303,,303,303,303,473,,,,,,,,,,,,,,,,473,473,,303,,,303,,,303',
'303,,,303,,303,473,,473,303,473,473,473,473,,,,303,,,,,303,303,303,303',
'303,303,,,,303,303,710,710,710,710,710,710,,,,710,710,,,,710,,710,710',
'710,710,710,710,710,,,,,710,710,710,710,710,710,710,,,710,,,,,,710,710',
'710,710,710,710,710,710,710,710,710,710,710,710,,710,710,,710,710,710',
',,,,,,,,,,,,,,,,,,,710,,,710,,,710,710,,,710,,710,,,,710,,,,,,,,710',
',,,,710,710,710,710,710,710,,,,710,710,267,267,267,267,267,267,,,,267',
'267,,,,267,,267,267,267,267,267,267,267,,,,,267,267,267,267,267,267',
'267,,,267,,,,,,267,267,267,267,267,267,267,267,267,267,267,267,267,267',
',267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,',
'267,,,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,835,835',
'835,835,835,835,,,,835,835,,,,835,,835,835,835,835,835,835,835,,,,,835',
'835,835,835,835,835,835,,,835,,,,,,835,835,835,835,835,835,835,835,835',
'835,835,835,835,835,,835,835,,835,835,835,,,,,,,,,,,,,,,,,,,,835,,,835',
',,835,835,,,835,,835,,,,835,,,,,,,,835,,,,,835,835,835,835,835,835,',
',,835,835,839,839,839,839,839,839,,,,839,839,,,,839,,839,839,839,839',
'839,839,839,,,,,839,839,839,839,839,839,839,,,839,,,,,,839,839,839,839',
'839,839,839,839,839,839,839,839,839,839,,839,839,,839,839,839,,,,,,',
',,,,,,,,,,,,,839,,,839,,,839,839,,,839,,839,,,,839,,,,,,,,839,,,,,839',
'839,839,839,839,839,,,,839,839,164,164,164,164,164,164,,,,164,164,,',
',164,,164,164,164,164,164,164,164,,,,,164,164,164,164,164,164,164,,',
'164,,,,,,164,164,164,164,164,164,164,164,164,164,164,164,164,164,,164',
'164,,164,164,164,,,,,,,,,,,,,,,,,,,,164,,,164,,,164,164,,,164,,164,',
',,164,,,,,,,,164,,,,,164,164,164,164,164,164,,,,164,164,522,522,522',
'522,522,522,,,,522,522,,,,522,,522,522,522,522,522,522,522,,,,,522,522',
'522,522,522,522,522,,,522,,,,,,522,522,522,522,522,522,522,522,522,522',
'522,522,522,522,,522,522,,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522,',
',522,522,,,522,,522,,,,522,,,,,,,,522,,,,,522,522,522,522,522,522,,',
',522,522,859,859,859,859,859,859,,,,859,859,,,,859,,859,859,859,859',
'859,859,859,,,,,859,859,859,859,859,859,859,,,859,,,,,,859,859,859,859',
'859,859,859,859,859,859,859,859,859,859,,859,859,,859,859,859,,,,,,',
',,,,,,,,,,,,,859,,,859,,,859,859,,,859,,859,,,,859,,,,,,,,859,,,,,859',
'859,859,859,859,859,,,,859,859,125,125,125,125,125,125,,,,125,125,,',
',125,,125,125,125,125,125,125,125,,,,,125,125,125,125,125,125,125,,',
'125,,,,,,125,125,125,125,125,125,125,125,125,125,125,125,125,125,,125',
'125,,125,125,125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125,125,,,125,,125,',
',,125,,,,,,,,125,,,,,125,125,125,125,125,125,,,,125,125,55,55,55,55',
'55,55,,,,55,55,,,,55,,55,55,55,55,55,55,55,,,,,55,55,55,55,55,55,55',
',,55,,,,,,55,55,55,55,55,55,55,55,55,55,55,55,55,55,,55,55,,55,55,55',
',,,,,,,,,,,,,,,,,,,55,,,55,,,55,55,,,55,,55,,,,55,,,,,,,,55,,,,,55,55',
'55,55,55,55,,,,55,55,867,867,867,867,867,867,,,,867,867,,,,867,,867',
'867,867,867,867,867,867,,,,,867,867,867,867,867,867,867,,,867,,,,,,867',
'867,867,867,867,867,867,867,867,867,867,867,867,867,,867,867,,867,867',
'867,,,,,,,,,,,,,,,,,,,,867,,,867,,,867,867,,,867,,867,,,,867,,,,,,,',
'867,,,,,867,867,867,867,867,867,,,,867,867,869,869,869,869,869,869,',
',,869,869,,,,869,,869,869,869,869,869,869,869,,,,,869,869,869,869,869',
'869,869,,,869,,,,,,869,869,869,869,869,869,869,869,869,869,869,869,869',
'869,,869,869,,869,869,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,869,,,869',
',869,,,,869,,,,,,,,869,,,,,869,869,869,869,869,869,,,,869,869,872,872',
'872,872,872,872,,,,872,872,,,,872,,872,872,872,872,872,872,872,,,,,872',
'872,872,872,872,872,872,,,872,,,,,,872,872,872,872,872,872,872,872,872',
'872,872,872,872,872,,872,872,,872,872,872,,,,,,,,,,,,,,,,,,,,872,,,872',
',,872,872,,,872,,872,,,,872,,,,,,,,872,,,,,872,872,872,872,872,872,',
',,872,872,726,726,726,726,726,726,,,,726,726,,,,726,,726,726,726,726',
'726,726,726,,,,,726,726,726,726,726,726,726,,,726,,,,,,726,726,726,726',
'726,726,726,726,726,726,726,726,726,726,,726,726,,726,726,726,,,,,,',
',,,,,,,,,,,,,726,,,726,,,726,726,,,726,,726,,,,726,,,,,,,,726,,,,,726',
'726,726,726,726,726,,,,726,726,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2',
'2,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,,2,2,2',
',,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2',
',,,2,2,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438',
'438,438,438,438,438,438,438,438,,,438,438,438,438,438,438,438,438,438',
'438,,,,,,438,438,438,438,438,438,438,438,,,438,,,,,,,,438,438,,438,438',
'438,438,,438,438,,,438,,,,,438,438,438,438,,,,,,,,,,,,,,438,438,,438',
'438,438,438,438,438,438,438,438,,438,,,438,438,,,65,65,65,,65,,,438',
'65,65,,,,65,,65,65,65,65,65,65,65,,,,,65,65,65,65,65,65,65,,,,,,,,,',
'65,,,65,65,65,65,65,65,65,65,65,65,,65,65,,65,65,65,,,,,,,,,,,,,,,,',
',,,65,,,65,,,65,65,,,65,,,,,,65,,,,,,,,65,,,,,65,65,65,65,65,65,,,,65',
'65,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,62,62,62,62',
'62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62',
'62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,,,,,62,,,,,,,,62,,,,,62',
'62,62,62,62,62,,,,62,62,72,72,72,,72,,,,72,72,,,,72,,72,72,72,72,72',
'72,72,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72',
'72,72,72,,72,72,,72,72,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,',
',,,72,,,,,,,,72,,,,,72,72,72,72,72,72,,,,72,72,77,77,77,,77,,,,77,77',
',,,77,,77,77,77,77,77,77,77,,,,,77,77,77,77,77,77,77,,,,,,,,,,77,,,77',
'77,77,77,77,77,77,77,77,77,,77,77,,77,77,77,,,,,,,,,,,,,,,,,,,,77,,',
'77,,,77,77,,,77,,77,,,,77,,,,,,,,77,,,,,77,77,77,77,77,77,,,,77,77,79',
'79,79,,79,,,,79,79,,,,79,,79,79,79,79,79,79,79,,79,,,79,79,79,79,79',
'79,79,,,,,,,,,,79,,,79,79,79,79,79,79,79,79,79,79,,79,79,,79,79,79,',
',,,,,,,,,,,,,,,,,,79,,,79,79,,79,79,,,79,,79,,79,,79,,,,,,,,79,,79,',
',79,79,79,79,79,79,,,,79,79,655,655,655,,655,,,,655,655,,,,655,,655',
'655,655,655,655,655,655,,,,,655,655,655,655,655,655,655,,,,,,,,,,655',
',,655,655,655,655,655,655,655,655,655,655,,655,655,,655,655,655,,,,',
',,,,,,,,,,,,,,,655,,,655,,,655,655,,,655,,655,,655,,655,,,,,,,,655,',
',,,655,655,655,655,655,655,,,,655,655,60,60,60,,60,,,,60,60,,,,60,,60',
'60,60,60,60,60,60,,,,,60,60,60,60,60,60,60,,,,,,,,,,60,,,60,60,60,60',
'60,60,60,60,60,60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,60,,60',
'60,,,60,,60,,60,,60,,,,,,,,60,,,,,60,60,60,60,60,60,,,,60,60,663,663',
'663,,663,,,,663,663,,,,663,,663,663,663,663,663,663,663,,,,,663,663',
'663,663,663,663,663,,,,,,,,,,663,,,663,663,663,663,663,663,663,663,663',
'663,,663,663,,663,663,663,,,,,,,,,,,,,,,,,,,,663,,,663,,,663,663,,,663',
',,,,,663,,,,,,,,663,,,,,663,663,663,663,663,663,,,,663,663,666,666,666',
',666,,,,666,666,,,,666,,666,666,666,666,666,666,666,,,,,666,666,666',
'666,666,666,666,,,,,,,,,,666,,,666,666,666,666,666,666,666,666,666,666',
',666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,',
',,,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666,666,91,91,91,',
'91,,,,91,91,,,,91,,91,91,91,91,91,91,91,,,,,91,91,91,91,91,91,91,,,',
',,,,,,91,,,91,91,91,91,91,91,91,91,91,91,,91,91,,91,91,91,,,,,,,,,,',
',,,,,,,,,91,,,91,,,91,91,,,91,,,,,,91,,,,,,,,91,,,,,91,91,91,91,91,91',
',,,91,91,643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643',
'643,,,,,643,643,643,643,643,643,643,,,,,,,,,,643,,,643,643,643,643,643',
'643,643,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643',
',,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643',
'643,882,882,882,,882,,,,882,882,,,,882,,882,882,882,882,882,882,882',
',,,,882,882,882,882,882,882,882,,,,,,,,,,882,,,882,882,882,882,882,882',
'882,882,882,882,,882,882,,882,882,882,,,,,,,,,,,,,,,,,,,,882,,,882,',
',882,882,,,882,,,,,,882,,,,,,,,882,,,,,882,882,882,882,882,882,,,,882',
'882,97,97,97,,97,,,,97,97,,,,97,,97,97,97,97,97,97,97,,,,,97,97,97,97',
'97,97,97,,,97,,,,,,,97,,,97,97,97,97,97,97,97,97,97,97,,97,97,,97,97',
'97,,,,,,,,,,,,,,,,,,,,97,,,97,,,97,97,,,97,,,,,,97,,,,,,,,97,,,,,97',
'97,97,97,97,97,,,,97,97,667,667,667,,667,,,,667,667,,,,667,,667,667',
'667,667,667,667,667,,,,,667,667,667,667,667,667,667,,,,,,,,,,667,,,667',
'667,667,667,667,667,667,667,667,667,,667,667,,667,667,667,,,,,,,,,,',
',,,,,,,,,667,,,667,,,667,667,,,667,,667,,,,667,,,,,,,,667,,,,,667,667',
'667,667,667,667,,,,667,667,101,101,101,,101,,,,101,101,,,,101,,101,101',
'101,101,101,101,101,,,,,101,101,101,101,101,101,101,,,,,,,,,,101,,,101',
'101,101,101,101,101,101,101,101,101,,101,101,,101,101,101,,,,,,,,,,',
',,,,,,,,,101,,,101,,,101,101,,,101,,101,,,,101,,,,,,,,101,,,,,101,101',
'101,101,101,101,,,,101,101,638,638,638,,638,,,,638,638,,,,638,,638,638',
'638,638,638,638,638,,,,,638,638,638,638,638,638,638,,,,,,,,,,638,,,638',
'638,638,638,638,638,638,638,638,638,,638,638,,638,638,638,,,,,,,,,,',
',,,,,,,,,638,,,638,,,638,638,,,638,,638,,,,638,,,,,,,,638,,,,,638,638',
'638,638,638,638,,,,638,638,669,669,669,,669,,,,669,669,,,,669,,669,669',
'669,669,669,669,669,,,,,669,669,669,669,669,669,669,,,,,,,,,,669,,,669',
'669,669,669,669,669,669,669,669,669,,669,669,,669,669,669,,,,,,,,,,',
',,,,,,,,,669,,,669,,,669,669,,,669,,669,,,,669,,,,,,,,669,,,,,669,669',
'669,669,669,669,,,,669,669,683,683,683,,683,,,,683,683,,,,683,,683,683',
'683,683,683,683,683,,,,,683,683,683,683,683,683,683,,,,,,,,,,683,,,683',
'683,683,683,683,683,683,683,683,683,,683,683,,683,683,683,,,,,,,,,,',
',,,,,,,,,683,,,683,,,683,683,,,683,,,,,,683,,,,,,,,683,,,,,683,683,683',
'683,683,683,,,,683,683,634,634,634,634,634,634,634,634,634,634,634,634',
'634,634,634,634,634,634,634,634,634,634,634,634,,,634,634,634,634,634',
'634,634,634,634,634,,,,,,634,634,634,634,634,634,634,634,,,634,,,,,',
',,634,634,,634,634,634,634,,634,634,,,634,,,,,634,634,634,634,,,,,,',
',,,,,,,634,634,,634,634,634,634,634,634,634,634,634,,634,,,634,634,',
',374,374,374,,374,,,634,374,374,,,,374,,374,374,374,374,374,374,374',
',,,,374,374,374,374,374,374,374,,,,,,,,,,374,,,374,374,374,374,374,374',
'374,374,374,374,,374,374,,374,374,374,,,,,,,,,,,,,,,,,,,,374,,,374,',
',374,374,,,374,,374,,,,374,,,,,,,,374,,,,,374,374,374,374,374,374,,',
',374,374,923,923,923,,923,,,,923,923,,,,923,,923,923,923,923,923,923',
'923,,,,,923,923,923,923,923,923,923,,,,,,,,,,923,,,923,923,923,923,923',
'923,923,923,923,923,,923,923,,,,923,,,,,,,,,,,,,,,,,,,,923,,,923,,,923',
'923,,,923,,,,,,,,,,,,,,,,,,,923,923,923,923,923,923,,,,923,923,881,881',
'881,,881,,,,881,881,,,,881,,881,881,881,881,881,881,881,,,,,881,881',
'881,881,881,881,881,,,,,,,,,,881,,,881,881,881,881,881,881,881,881,881',
'881,,881,881,,881,881,881,,,,,,,,,,,,,,,,,,,,881,,,881,,,881,881,,,881',
',,,,,881,,,,,,,,881,,,,,881,881,881,881,881,881,,,,881,881,598,598,598',
',598,,,,598,598,,,,598,,598,598,598,598,598,598,598,,,,,598,598,598',
'598,598,598,598,,,,,,,,,,598,,,598,598,598,598,598,598,598,598,598,598',
',598,598,,598,598,598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,,598,',
'598,,,,598,,,,,,,,598,,,,,598,598,598,598,598,598,,,,598,598,875,875',
'875,,875,,,,875,875,,,,875,,875,875,875,875,875,875,875,,,,,875,875',
'875,875,875,875,875,,,,,,,,,,875,,,875,875,875,875,875,875,875,875,875',
'875,,875,875,,875,875,875,,,,,,,,,,,,,,,,,,,,875,,,875,,,875,875,,,875',
',,,,,875,,,,,,,,875,,,,,875,875,875,875,875,875,,,,875,875,697,697,697',
',697,,,,697,697,,,,697,,697,697,697,697,697,697,697,,,,,697,697,697',
'697,697,697,697,,,,,,,,,,697,,,697,697,697,697,697,697,697,697,697,697',
',697,697,,697,697,697,,,,,,,,,,,,,,,,,,,,697,,,697,,,697,697,,,697,',
'697,,697,,697,,,,,,,,697,,,,,697,697,697,697,697,697,,,,697,697,59,59',
'59,,59,,,,59,59,,,,59,,59,59,59,59,59,59,59,,59,,,59,59,59,59,59,59',
'59,,,,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,,59,59,,59,59,59,,,,',
',,,,,,,,,,,,,,,59,,,59,59,,59,59,,,59,,59,,59,,59,,,,,,,,59,,59,,,59',
'59,59,59,59,59,,,,59,59,699,699,699,,699,,,,699,699,,,,699,,699,699',
'699,699,699,699,699,,,,,699,699,699,699,699,699,699,,,,,,,,,,699,,,699',
'699,699,699,699,699,699,699,699,699,,699,699,,699,699,699,,,,,,,,,,',
',,,,,,,,,699,,,699,,,699,699,,,699,,699,,699,,699,,,,,,,,699,,,,,699',
'699,699,699,699,699,,,,699,699,592,592,592,,592,,,,592,592,,,,592,,592',
'592,592,592,592,592,592,,,,,592,592,592,592,592,592,592,,,,,,,,,,592',
',,592,592,592,592,592,592,592,592,592,592,,592,592,,592,592,592,,,,',
',,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,,,,,592,,,,,,,,592,,,,,592',
'592,592,592,592,592,,,,592,592,586,586,586,,586,,,,586,586,,,,586,,586',
'586,586,586,586,586,586,,,,,586,586,586,586,586,586,586,,,,,,,,,,586',
',,586,586,586,586,586,586,586,586,586,586,,586,586,,586,586,586,,,,',
',,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,,,,,,586,,,,,,,,586,,,,,586',
'586,586,586,586,586,,,,586,586,6,6,6,,6,,,,6,6,,,,6,,6,6,6,6,6,6,6,',
',,,6,6,6,6,6,6,6,,,,,,,,,,6,,,6,6,6,6,6,6,6,6,6,6,,6,6,,,,6,,,,,,,,',
',,,,,,,,,,,6,,,6,,,6,6,,,6,,6,,,,,,,,,,,,,,,,,6,6,6,6,6,6,,,,6,6,57',
'57,57,,57,,,,57,57,,,,57,,57,57,57,57,57,57,57,,,,,57,57,57,57,57,57',
'57,,,,,,,,,,57,,,57,57,57,57,57,57,57,57,57,57,,57,57,,57,57,57,,,,',
',,,,,,,,,,,,,,,57,,,57,57,,57,57,,,57,,57,,57,,57,,,,,,,,57,,,,,57,57',
'57,57,57,57,,,,57,57,54,54,54,,54,,,,54,54,,,,54,,54,54,54,54,54,54',
'54,,,,,54,54,54,54,54,54,54,,,54,,,,,,,54,,,54,54,54,54,54,54,54,54',
'54,54,,54,54,,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,,54,,,,,',
'54,,,,,,,,54,,,,,54,54,54,54,54,54,,,,54,54,127,127,127,,127,,,,127',
'127,,,,127,,127,127,127,127,127,127,127,,,,,127,127,127,127,127,127',
'127,,,,,,,,,,127,,,127,127,127,127,127,127,127,127,127,127,,127,127',
',127,127,127,,,,,,,,,,,,,,,,,,,,127,,,127,,,127,127,,,127,,127,,127',
',127,,,,,,,,127,,,,,127,127,127,127,127,127,,,,127,127,7,7,7,,7,,,,7',
'7,,,,7,,7,7,7,7,7,7,7,,,,,7,7,7,7,7,7,7,,,,,,,,,,7,,,7,7,7,7,7,7,7,7',
'7,7,,7,7,,,,7,,,,,,,,,,,,,,,,,,,,7,,,7,,,7,7,,,7,,,,,,,,,,,,,,,,,,,7',
'7,7,7,7,7,,,,7,7,51,51,51,,51,,,,51,51,,,,51,,51,51,51,51,51,51,51,',
',,,51,51,51,51,51,51,51,,,,,,,,,,51,,,51,51,51,51,51,51,51,51,51,51',
',51,51,,51,51,51,,,,,,,,,,,,,,,,,,,,51,,,51,,,51,51,,,51,,51,,51,,51',
',,,,,,,51,,,,,51,51,51,51,51,51,,,,51,51,705,705,705,,705,,,,705,705',
',,,705,,705,705,705,705,705,705,705,,,,,705,705,705,705,705,705,705',
',,,,,,,,,705,,,705,705,705,705,705,705,705,705,705,705,,705,705,,,,705',
',,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,,705,,,,,,,,,,,,,,,,,,,705,705',
'705,705,705,705,,,,705,705,576,576,576,,576,,,,576,576,,,,576,,576,576',
'576,576,576,576,576,,,,,576,576,576,576,576,576,576,,,,,,,,,,576,,,576',
'576,576,576,576,576,576,576,576,576,,576,576,,,,576,,,,,,,,,,,,,,,,',
',,,576,,,576,,,576,576,,,576,,576,,576,,,,,,,,,576,,,,,,576,576,576',
'576,576,576,,,,576,576,134,134,134,,134,,,,134,134,,,,134,,134,134,134',
'134,134,134,134,,,,,134,134,134,134,134,134,134,,,,,,,,,,134,,,134,134',
'134,134,134,134,134,134,134,134,,134,134,,134,134,134,,,,,,,,,,,,,,',
',,,,,134,,,134,,,134,134,,,134,,,,,,134,,,,,,,,134,,,,,134,134,134,134',
'134,134,,,,134,134,11,11,11,,11,,,,11,11,,,,11,,11,11,11,11,11,11,11',
',,,,11,11,11,11,11,11,11,,,,,,,,,,11,,,11,11,11,11,11,11,11,11,11,11',
',11,11,,11,11,11,,,,,,,,,,,,,,,,,,,,11,,,11,,,11,11,,,11,,11,,11,,11',
',,,,,,,11,,,,,11,11,11,11,11,11,,,,11,11,136,136,136,,136,,,,136,136',
',,,136,,136,136,136,136,136,136,136,,,,,136,136,136,136,136,136,136',
',,,,,,,,,136,,,136,136,136,136,136,136,136,136,136,136,,136,136,,136',
'136,136,,,,,,,,,,,,,,,,,,,,136,,,136,,,136,136,,,136,,,,,,136,,,,,,',
',136,,,,,136,136,136,136,136,136,,,,136,136,566,566,566,,566,,,,566',
'566,,,,566,,566,566,566,566,566,566,566,,,,,566,566,566,566,566,566',
'566,,,,,,,,,,566,,,566,566,566,566,566,566,566,566,566,566,,566,566',
',566,566,566,,,,,,,,,,,,,,,,,,,,566,,,566,,,566,566,,,566,,,,,,566,',
',,,,,,566,,,,,566,566,566,566,566,566,,,,566,566,367,367,367,,367,,',
',367,367,,,,367,,367,367,367,367,367,367,367,,,,,367,367,367,367,367',
'367,367,,,,,,,,,,367,,,367,367,367,367,367,367,367,367,367,367,,367',
'367,,367,367,367,,,,,,,,,,,,,,,,,,,,367,,,367,367,,367,367,,,367,,367',
',367,,367,,,,,,,,367,,,,,367,367,367,367,367,367,,,,367,367,712,712',
'712,,712,,,,712,712,,,,712,,712,712,712,712,712,712,712,,,,,712,712',
'712,712,712,712,712,,,,,,,,,,712,,,712,712,712,712,712,712,712,712,712',
'712,,712,712,,712,712,712,,,,,,,,,,,,,,,,,,,,712,,,712,,,712,712,,,712',
',,,,,712,,,,,,,,712,,,,,712,712,712,712,712,712,,,,712,712,560,560,560',
',560,,,,560,560,,,,560,,560,560,560,560,560,560,560,,,,,560,560,560',
'560,560,560,560,,,560,,,,,,,560,,,560,560,560,560,560,560,560,560,560',
'560,,560,560,,560,560,560,,,,,,,,,,,,,,,,,,,,560,,,560,,,560,560,,,560',
',,,,,560,,,,,,,,560,,,,,560,560,560,560,560,560,,,,560,560,713,713,713',
',713,,,,713,713,,,,713,,713,713,713,713,713,713,713,,,,,713,713,713',
'713,713,713,713,,,,,,,,,,713,,,713,713,713,713,713,713,713,713,713,713',
',713,713,,713,713,713,,,,,,,,,,,,,,,,,,,,713,,,713,,,713,713,,,713,',
',,,,713,,,,,,,,713,,,,,713,713,713,713,713,713,,,,713,713,145,145,145',
',145,,,,145,145,,,,145,,145,145,145,145,145,145,145,,,,,145,145,145',
'145,145,145,145,,,,,,,,,,145,,,145,145,145,145,145,145,145,145,145,145',
',145,145,,145,145,145,,,,,,,,,,,,,,,,,,,,145,,,145,,,145,145,,,145,',
',,,,145,,,,,,,,145,,,,,145,145,145,145,145,145,,,,145,145,852,852,852',
',852,,,,852,852,,,,852,,852,852,852,852,852,852,852,,,,,852,852,852',
'852,852,852,852,,,,,,,,,,852,,,852,852,852,852,852,852,852,852,852,852',
',852,852,,,,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852,,,852,,,,,,,',
',,,,,,,,,,,852,852,852,852,852,852,,,,852,852,714,714,714,,714,,,,714',
'714,,,,714,,714,714,714,714,714,714,714,,,,,714,714,714,714,714,714',
'714,,,,,,,,,,714,,,714,714,714,714,714,714,714,714,714,714,,714,714',
',714,714,714,,,,,,,,,,,,,,,,,,,,714,,,714,,,714,714,,,714,,,,,,714,',
',,,,,,714,,,,,714,714,714,714,714,714,,,,714,714,717,717,717,,717,,',
',717,717,,,,717,,717,717,717,717,717,717,717,,,,,717,717,717,717,717',
'717,717,,,,,,,,,,717,,,717,717,717,717,717,717,717,717,717,717,,717',
'717,,717,717,717,,,,,,,,,,,,,,,,,,,,717,,,717,,,717,717,,,717,,717,',
'717,,717,,,,,,,,717,,,,,717,717,717,717,717,717,,,,717,717,552,552,552',
',552,,,,552,552,,,,552,,552,552,552,552,552,552,552,,,,,552,552,552',
'552,552,552,552,,,,,,,,,,552,,,552,552,552,552,552,552,552,552,552,552',
',552,552,,552,552,552,,,,,,,,,,,,,,,,,,,,552,,,552,,,552,552,,,552,',
',,,,552,,,,,,,,552,,,,,552,552,552,552,552,552,,,,552,552,551,551,551',
',551,,,,551,551,,,,551,,551,551,551,551,551,551,551,,,,,551,551,551',
'551,551,551,551,,,,,,,,,,551,,,551,551,551,551,551,551,551,551,551,551',
',551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,,,551,551,,,551,',
',,,,551,,,,,,,,551,,,,,551,551,551,551,551,551,,,,551,551,546,546,546',
',546,,,,546,546,,,,546,,546,546,546,546,546,546,546,,,,,546,546,546',
'546,546,546,546,,,,,,,,,,546,,,546,546,546,546,546,546,546,546,546,546',
',546,546,,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,,,546,546,,,546,',
',,,,546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546,546,157,157,157',
',157,,,,157,157,,,,157,,157,157,157,157,157,157,157,,,,,157,157,157',
'157,157,157,157,,,,,,,,,,157,,,157,157,157,157,157,157,157,157,157,157',
',157,157,,,,157,,,,,,,,,,,,,,,,,,,,157,,,157,,,157,157,,,157,,,,,,,',
',,,,,,,,,,,157,157,157,157,157,157,,,,157,157,158,158,158,,158,,,,158',
'158,,,,158,,158,158,158,158,158,158,158,,,,,158,158,158,158,158,158',
'158,,,,,,,,,,158,,,158,158,158,158,158,158,158,158,158,158,,158,158',
',158,158,158,,,,,,,,,,,,,,,,,,,,158,,,158,,,158,158,,,158,,,,,,158,',
',,,,,,158,,,,,158,158,158,158,158,158,,,,158,158,848,848,848,,848,,',
',848,848,,,,848,,848,848,848,848,848,848,848,,,,,848,848,848,848,848',
'848,848,,,,,,,,,,848,,,848,848,848,848,848,848,848,848,848,848,,848',
'848,,848,848,848,,,,,,,,,,,,,,,,,,,,848,,,848,,,848,848,,,848,,848,',
',,848,,,,,,,,848,,,,,848,848,848,848,848,848,,,,848,848,545,545,545',
',545,,,,545,545,,,,545,,545,545,545,545,545,545,545,,,,,545,545,545',
'545,545,545,545,,,,,,,,,,545,,,545,545,545,545,545,545,545,545,545,545',
',545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,',
',,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545,545,162,162,162',
',162,,,,162,162,,,,162,,162,162,162,162,162,162,162,,,,,162,162,162',
'162,162,162,162,,,,,,,,,,162,,,162,162,162,162,162,162,162,162,162,162',
',162,162,,,,162,,,,,,,,,,,,,,,,,,,,162,,,162,,,162,162,,,162,,,,,,,',
',,,,,,,,,,,162,162,162,162,162,162,,,,162,162,844,844,844,,844,,,,844',
'844,,,,844,,844,844,844,844,844,844,844,,,,,844,844,844,844,844,844',
'844,,,,,,,,,,844,,,844,844,844,844,844,844,844,844,844,844,,844,844',
',844,844,844,,,,,,,,,,,,,,,,,,,,844,,,844,,,844,844,,,844,,844,,844',
',844,,,,,,,,844,,,,,844,844,844,844,844,844,,,,844,844,14,14,14,14,14',
',,,14,14,,,,14,,14,14,14,14,14,14,14,,,,,14,14,14,14,14,14,14,,,14,',
',,,,14,14,14,14,14,14,14,14,14,14,14,14,14,14,,14,14,,14,14,14,,,,,',
',,,,,,,,,,,,,,14,,,14,,,14,14,,,14,,14,,,,14,,,,,,,,14,,,,,14,14,14',
'14,14,14,,,,14,14,165,165,165,,165,,,,165,165,,,,165,,165,165,165,165',
'165,165,165,,,,,165,165,165,165,165,165,165,,,,,,,,,,165,,,165,165,165',
'165,165,165,165,165,165,165,,165,165,,,,165,,,,,,,,,,,,,,,,,,,,165,',
',165,,,165,165,,,165,,,,,,,,,,,,,,,,,,,165,165,165,165,165,165,,,,165',
'165,534,534,534,,534,,,,534,534,,,,534,,534,534,534,534,534,534,534',
',,,,534,534,534,534,534,534,534,,,,,,,,,,534,,,534,534,534,534,534,534',
'534,534,534,534,,534,534,,534,534,534,,,,,,,,,,,,,,,,,,,,534,,,534,',
',534,534,,,534,,,,,,534,,,,,,,,534,,,,,534,534,534,534,534,534,,,,534',
'534,725,725,725,,725,,,,725,725,,,,725,,725,725,725,725,725,725,725',
',,,,725,725,725,725,725,725,725,,,725,,,,,,,725,,,725,725,725,725,725',
'725,725,725,725,725,,725,725,,725,725,725,,,,,,,,,,,,,,,,,,,,725,,,725',
',,725,725,,,725,,,,,,725,,,,,,,,725,,,,,725,725,725,725,725,725,,,,725',
'725,921,921,921,,921,,,,921,921,,,,921,,921,921,921,921,921,921,921',
',,,,921,921,921,921,921,921,921,,,,,,,,,,921,,,921,921,921,921,921,921',
'921,921,921,921,,921,921,,921,921,921,,,,,,,,,,,,,,,,,,,,921,,,921,',
',921,921,,,921,,,,,,921,,,,,,,,921,,,,,921,921,921,921,921,921,,,,921',
'921,730,730,730,,730,,,,730,730,,,,730,,730,730,730,730,730,730,730',
',,,,730,730,730,730,730,730,730,,,,,,,,,,730,,,730,730,730,730,730,730',
'730,730,730,730,,730,730,,730,730,730,,,,,,,,,,,,,,,,,,,,730,,,730,',
',730,730,,,730,,,,,,730,,,,,,,,730,,,,,730,730,730,730,730,730,,,,730',
'730,516,516,516,,516,,,,516,516,,,,516,,516,516,516,516,516,516,516',
',,,,516,516,516,516,516,516,516,,,,,,,,,,516,,,516,516,516,516,516,516',
'516,516,516,516,,516,516,,516,516,516,,,,,,,,,,,,,,,,,,,,516,,,516,',
',516,516,,,516,,,,,,516,,,,,,,,516,,,,,516,516,516,516,516,516,,,,516',
'516,515,515,515,,515,,,,515,515,,,,515,,515,515,515,515,515,515,515',
',,,,515,515,515,515,515,515,515,,,,,,,,,,515,,,515,515,515,515,515,515',
'515,515,515,515,,515,515,,515,515,515,,,,,,,,,,,,,,,,,,,,515,,,515,',
',515,515,,,515,,515,,,,515,,,,,,,,515,,,,,515,515,515,515,515,515,,',
',515,515,512,512,512,,512,,,,512,512,,,,512,,512,512,512,512,512,512',
'512,,,,,512,512,512,512,512,512,512,,,,,,,,,,512,,,512,512,512,512,512',
'512,512,512,512,512,,512,512,,512,512,512,,,,,,,,,,,,,,,,,,,,512,,,512',
',,512,512,,,512,,,,,,512,,,,,,,,512,,,,,512,512,512,512,512,512,,,,512',
'512,18,18,18,,18,,,,18,18,,,,18,,18,18,18,18,18,18,18,,,,,18,18,18,18',
'18,18,18,,,,,,,,,,18,,,18,18,18,18,18,18,18,18,18,18,,18,18,,18,18,18',
',,,,,,,,,,,,,,,,,,,18,,,18,,,18,18,,,18,,18,,18,,18,,,,,,,,18,,,,,18',
'18,18,18,18,18,,,,18,18,912,912,912,,912,,,,912,912,,,,912,,912,912',
'912,912,912,912,912,,,,,912,912,912,912,912,912,912,,,,,,,,,,912,,,912',
'912,912,912,912,912,912,912,912,912,,912,912,,,,912,,,,,,,,,,,,,,,,',
',,,912,,,912,,,912,912,,,912,,,,,,,,,,,,,,,,,,,912,912,912,912,912,912',
',,,912,912,22,22,22,,22,,,,22,22,,,,22,,22,22,22,22,22,22,22,,,,,22',
'22,22,22,22,22,22,,,,,,,,,,22,,,22,22,22,22,22,22,22,22,22,22,,22,22',
',,,22,,,,,,,,,,,,,,,,,,,,22,,,22,,,22,22,,,22,,22,,,,,,,,,,,,,,,,,22',
'22,22,22,22,22,,,,22,22,754,754,754,,754,,,,754,754,,,,754,,754,754',
'754,754,754,754,754,,,,,754,754,754,754,754,754,754,,,754,,,,,,,754',
',,754,754,754,754,754,754,754,754,754,754,,754,754,,754,754,754,,,,',
',,,,,,,,,,,,,,,754,,,754,,,754,754,,,754,,,,,,754,,,,,,,,754,,,,,754',
'754,754,754,754,754,,,,754,754,842,842,842,,842,,,,842,842,,,,842,,842',
'842,842,842,842,842,842,,,,,842,842,842,842,842,842,842,,,,,,,,,,842',
',,842,842,842,842,842,842,842,842,842,842,,842,842,,842,842,842,,,,',
',,,,,,,,,,,,,,,842,,,842,,,842,842,,,842,,842,,842,,842,,,,,,,,842,',
',,,842,842,842,842,842,842,,,,842,842,908,908,908,,908,,,,908,908,,',
',908,,908,908,908,908,908,908,908,,,,,908,908,908,908,908,908,908,,',
',,,,,,,908,,,908,908,908,908,908,908,908,908,908,908,,908,908,,908,908',
'908,,,,,,,,,,,,,,,,,,,,908,,,908,,,908,908,,,908,,908,,908,,908,,,,',
',,,908,,,,,908,908,908,908,908,908,,,,908,908,263,263,263,,263,,,,263',
'263,,,,263,,263,263,263,263,263,263,263,,,,,263,263,263,263,263,263',
'263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263,263,263,,263,263',
',263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,',
',,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,264,264,264,,264,,',
',264,264,,,,264,,264,264,264,264,264,264,264,,,,,264,264,264,264,264',
'264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,264,264,,264',
'264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264',
',,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,836,836,836,,836,',
',,836,836,,,,836,,836,836,836,836,836,836,836,,,,,836,836,836,836,836',
'836,836,,,,,,,,,,836,,,836,836,836,836,836,836,836,836,836,836,,836',
'836,,836,836,836,,,,,,,,,,,,,,,,,,,,836,,,836,,,836,836,,,836,,836,',
',,836,,,,,,,,836,,,,,836,836,836,836,836,836,,,,836,836,767,767,767',
',767,,,,767,767,,,,767,,767,767,767,767,767,767,767,,,,,767,767,767',
'767,767,767,767,,,,,,,,,,767,,,767,767,767,767,767,767,767,767,767,767',
',767,767,,767,767,767,,,,,,,,,,,,,,,,,,,,767,,,767,,,767,767,,,767,',
',,,,767,,,,,,,,767,,,,,767,767,767,767,767,767,,,,767,767,891,891,891',
',891,,,,891,891,,,,891,,891,891,891,891,891,891,891,,,,,891,891,891',
'891,891,891,891,,,,,,,,,,891,,,891,891,891,891,891,891,891,891,891,891',
',891,891,,,,891,,,,,,,,,,,,,,,,,,,,891,,,891,,,891,891,,,891,,,,,,,',
',,,,,,,,,,,891,891,891,891,891,891,,,,891,891,268,268,268,,268,,,,268',
'268,,,,268,,268,268,268,268,268,268,268,,,,,268,268,268,268,268,268',
'268,,,,,,,,,,268,,,268,268,268,268,268,268,268,268,268,268,,268,268',
',268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,268,,268,268,,,268,,,,,,268',
',,,,,,,268,,,,,268,268,268,268,268,268,,,,268,268,770,770,770,,770,',
',,770,770,,,,770,,770,770,770,770,770,770,770,,,,,770,770,770,770,770',
'770,770,,,,,,,,,,770,,,770,770,770,770,770,770,770,770,770,770,,770',
'770,,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770,,,770,770,,,770,,,,,,770',
',,,,,,,770,,,,,770,770,770,770,770,770,,,,770,770,26,26,26,,26,,,,26',
'26,,,,26,,26,26,26,26,26,26,26,,,,,26,26,26,26,26,26,26,,,,,,,,,,26',
',,26,26,26,26,26,26,26,26,26,26,,26,26,,26,26,26,,,,,,,,,,,,,,,,,,,',
'26,,,26,,,26,26,,,26,,,,,,26,,,,,,,,26,,,,,26,26,26,26,26,26,,,,26,26',
'453,453,453,,453,,,,453,453,,,,453,,453,453,453,453,453,453,453,,,,',
'453,453,453,453,453,453,453,,,,,,,,,,453,,,453,453,453,453,453,453,453',
'453,453,453,,453,453,,453,453,453,,,,,,,,,,,,,,,,,,,,453,,,453,,,453',
'453,,,453,,,,,,453,,,,,,,,453,,,,,453,453,453,453,453,453,,,,453,453',
'277,277,277,,277,,,,277,277,,,,277,,277,277,277,277,277,277,277,,,,',
'277,277,277,277,277,277,277,,,,,,,,,,277,,,277,277,277,277,277,277,277',
'277,277,277,,277,277,,277,277,277,,,,,,,,,,,,,,,,,,,,277,,,277,,,277',
'277,,,277,,,,,,277,,,,,,,,277,,,,,277,277,277,277,277,277,,,,277,277',
'278,278,278,,278,,,,278,278,,,,278,,278,278,278,278,278,278,278,,,,',
'278,278,278,278,278,278,278,,,,,,,,,,278,,,278,278,278,278,278,278,278',
'278,278,278,,278,278,,278,278,278,,,,,,,,,,,,,,,,,,,,278,,,278,,,278',
'278,,,278,,,,,,278,,,,,,,,278,,,,,278,278,278,278,278,278,,,,278,278',
'279,279,279,,279,,,,279,279,,,,279,,279,279,279,279,279,279,279,,,,',
'279,279,279,279,279,279,279,,,,,,,,,,279,,,279,279,279,279,279,279,279',
'279,279,279,,279,279,,279,279,279,,,,,,,,,,,,,,,,,,,,279,,,279,,,279',
'279,,,279,,,,,,279,,,,,,,,279,,,,,279,279,279,279,279,279,,,,279,279',
'280,280,280,,280,,,,280,280,,,,280,,280,280,280,280,280,280,280,,,,',
'280,280,280,280,280,280,280,,,,,,,,,,280,,,280,280,280,280,280,280,280',
'280,280,280,,280,280,,280,280,280,,,,,,,,,,,,,,,,,,,,280,,,280,,,280',
'280,,,280,,,,,,280,,,,,,,,280,,,,,280,280,280,280,280,280,,,,280,280',
'281,281,281,,281,,,,281,281,,,,281,,281,281,281,281,281,281,281,,,,',
'281,281,281,281,281,281,281,,,,,,,,,,281,,,281,281,281,281,281,281,281',
'281,281,281,,281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281',
'281,,,281,,,,,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281',
'282,282,282,,282,,,,282,282,,,,282,,282,282,282,282,282,282,282,,,,',
'282,282,282,282,282,282,282,,,,,,,,,,282,,,282,282,282,282,282,282,282',
'282,282,282,,282,282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282',
'282,,,282,,,,,,282,,,,,,,,282,,,,,282,282,282,282,282,282,,,,282,282',
'283,283,283,,283,,,,283,283,,,,283,,283,283,283,283,283,283,283,,,,',
'283,283,283,283,283,283,283,,,,,,,,,,283,,,283,283,283,283,283,283,283',
'283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283',
'283,,,283,,,,,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283',
'284,284,284,,284,,,,284,284,,,,284,,284,284,284,284,284,284,284,,,,',
'284,284,284,284,284,284,284,,,,,,,,,,284,,,284,284,284,284,284,284,284',
'284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284,,,284',
'284,,,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284,,,,284,284',
'285,285,285,,285,,,,285,285,,,,285,,285,285,285,285,285,285,285,,,,',
'285,285,285,285,285,285,285,,,,,,,,,,285,,,285,285,285,285,285,285,285',
'285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285',
'285,,,285,,,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285,,,,285,285',
'286,286,286,,286,,,,286,286,,,,286,,286,286,286,286,286,286,286,,,,',
'286,286,286,286,286,286,286,,,,,,,,,,286,,,286,286,286,286,286,286,286',
'286,286,286,,286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286',
'286,,,286,,,,,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286',
'287,287,287,,287,,,,287,287,,,,287,,287,287,287,287,287,287,287,,,,',
'287,287,287,287,287,287,287,,,,,,,,,,287,,,287,287,287,287,287,287,287',
'287,287,287,,287,287,,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287',
'287,,,287,,,,,,287,,,,,,,,287,,,,,287,287,287,287,287,287,,,,287,287',
'288,288,288,,288,,,,288,288,,,,288,,288,288,288,288,288,288,288,,,,',
'288,288,288,288,288,288,288,,,,,,,,,,288,,,288,288,288,288,288,288,288',
'288,288,288,,288,288,,288,288,288,,,,,,,,,,,,,,,,,,,,288,,,288,,,288',
'288,,,288,,,,,,288,,,,,,,,288,,,,,288,288,288,288,288,288,,,,288,288',
'289,289,289,,289,,,,289,289,,,,289,,289,289,289,289,289,289,289,,,,',
'289,289,289,289,289,289,289,,,,,,,,,,289,,,289,289,289,289,289,289,289',
'289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289',
'289,,,289,,,,,,289,,,,,,,,289,,,,,289,289,289,289,289,289,,,,289,289',
'290,290,290,,290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,',
'290,290,290,290,290,290,290,,,,,,,,,,290,,,290,290,290,290,290,290,290',
'290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290',
'290,,,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290',
'291,291,291,,291,,,,291,291,,,,291,,291,291,291,291,291,291,291,,,,',
'291,291,291,291,291,291,291,,,,,,,,,,291,,,291,291,291,291,291,291,291',
'291,291,291,,291,291,,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291',
'291,,,291,,,,,,291,,,,,,,,291,,,,,291,291,291,291,291,291,,,,291,291',
'292,292,292,,292,,,,292,292,,,,292,,292,292,292,292,292,292,292,,,,',
'292,292,292,292,292,292,292,,,,,,,,,,292,,,292,292,292,292,292,292,292',
'292,292,292,,292,292,,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292',
'292,,,292,,,,,,292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292,292',
'293,293,293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293,,,,',
'293,293,293,293,293,293,293,,,,,,,,,,293,,,293,293,293,293,293,293,293',
'293,293,293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293',
'293,,,293,,,,,,293,,,,,,,,293,,,,,293,293,293,293,293,293,,,,293,293',
'294,294,294,,294,,,,294,294,,,,294,,294,294,294,294,294,294,294,,,,',
'294,294,294,294,294,294,294,,,,,,,,,,294,,,294,294,294,294,294,294,294',
'294,294,294,,294,294,,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294',
'294,,,294,,,,,,294,,,,,,,,294,,,,,294,294,294,294,294,294,,,,294,294',
'295,295,295,,295,,,,295,295,,,,295,,295,295,295,295,295,295,295,,,,',
'295,295,295,295,295,295,295,,,,,,,,,,295,,,295,295,295,295,295,295,295',
'295,295,295,,295,295,,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,,,295',
'295,,,295,,,,,,295,,,,,,,,295,,,,,295,295,295,295,295,295,,,,295,295',
'296,296,296,,296,,,,296,296,,,,296,,296,296,296,296,296,296,296,,,,',
'296,296,296,296,296,296,296,,,,,,,,,,296,,,296,296,296,296,296,296,296',
'296,296,296,,296,296,,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296',
'296,,,296,,,,,,296,,,,,,,,296,,,,,296,296,296,296,296,296,,,,296,296',
'297,297,297,,297,,,,297,297,,,,297,,297,297,297,297,297,297,297,,,,',
'297,297,297,297,297,297,297,,,,,,,,,,297,,,297,297,297,297,297,297,297',
'297,297,297,,297,297,,297,297,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297',
'297,,,297,,,,,,297,,,,,,,,297,,,,,297,297,297,297,297,297,,,,297,297',
'298,298,298,,298,,,,298,298,,,,298,,298,298,298,298,298,298,298,,,,',
'298,298,298,298,298,298,298,,,,,,,,,,298,,,298,298,298,298,298,298,298',
'298,298,298,,298,298,,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298,,,298',
'298,,,298,,,,,,298,,,,,,,,298,,,,,298,298,298,298,298,298,,,,298,298',
'299,299,299,,299,,,,299,299,,,,299,,299,299,299,299,299,299,299,,,,',
'299,299,299,299,299,299,299,,,,,,,,,,299,,,299,299,299,299,299,299,299',
'299,299,299,,299,299,,299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299',
'299,,,299,,,,,,299,,,,,,,,299,,,,,299,299,299,299,299,299,,,,299,299',
'300,300,300,,300,,,,300,300,,,,300,,300,300,300,300,300,300,300,,,,',
'300,300,300,300,300,300,300,,,,,,,,,,300,,,300,300,300,300,300,300,300',
'300,300,300,,300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300',
'300,,,300,,,,,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300,300',
'301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,',
'301,301,301,301,301,301,301,,,,,,,,,,301,,,301,301,301,301,301,301,301',
'301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301',
'301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301',
'302,302,302,,302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,',
'302,302,302,302,302,302,302,,,,,,,,,,302,,,302,302,302,302,302,302,302',
'302,302,302,,302,302,,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302',
'302,,,302,,,,,,302,,,,,,,,302,,,,,302,302,302,302,302,302,,,,302,302',
'450,450,450,,450,,,,450,450,,,,450,,450,450,450,450,450,450,450,,,,',
'450,450,450,450,450,450,450,,,450,,,,,,,450,,,450,450,450,450,450,450',
'450,450,450,450,,450,450,,450,450,450,,,,,,,,,,,,,,,,,,,,450,,,450,',
',450,450,,,450,,,,,,450,,,,,,,,450,,,,,450,450,450,450,450,450,,,,450',
'450,29,29,29,,29,,,,29,29,,,,29,,29,29,29,29,29,29,29,,,,,29,29,29,29',
'29,29,29,,,,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29,,29,29,,29,29,29',
',,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,,,,,29,,,,,,,,29,,,,,29,29',
'29,29,29,29,,,,29,29,446,446,446,,446,,,,446,446,,,,446,,446,446,446',
'446,446,446,446,,,,,446,446,446,446,446,446,446,,,,,,,,,,446,,,446,446',
'446,446,446,446,446,446,446,446,,446,446,,446,446,446,,,,,,,,,,,,,,',
',,,,,446,,,446,,,446,446,,,446,,,,,,446,,,,,,,,446,,,,,446,446,446,446',
'446,446,,,,446,446,825,825,825,,825,,,,825,825,,,,825,,825,825,825,825',
'825,825,825,,,,,825,825,825,825,825,825,825,,,,,,,,,,825,,,825,825,825',
'825,825,825,825,825,825,825,,825,825,,,,825,,,,,,,,,,,,,,,,,,,,825,',
',825,,,825,825,,,825,,,,,,,,,,,,,,,,,,,825,825,825,825,825,825,,,,825',
'825,445,445,445,,445,,,,445,445,,,,445,,445,445,445,445,445,445,445',
',,,,445,445,445,445,445,445,445,,,,,,,,,,445,,,445,445,445,445,445,445',
'445,445,445,445,,445,445,,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,',
',445,445,,,445,,,,,,445,,,,,,,,445,,,,,445,445,445,445,445,445,,,,445',
'445,437,437,437,,437,,,,437,437,,,,437,,437,437,437,437,437,437,437',
',,,,437,437,437,437,437,437,437,,,437,,,,,,,437,,,437,437,437,437,437',
'437,437,437,437,437,,437,437,,437,437,437,,,,,,,,,,,,,,,,,,,,437,,,437',
',,437,437,,,437,,,,,,437,,,,,,,,437,,,,,437,437,437,437,437,437,,,,437',
'437,781,781,781,,781,,,,781,781,,,,781,,781,781,781,781,781,781,781',
',,,,781,781,781,781,781,781,781,,,,,,,,,,781,,,781,781,781,781,781,781',
'781,781,781,781,,781,781,,781,781,781,,,,,,,,,,,,,,,,,,,,781,,,781,',
',781,781,,,781,,,,,,781,,,,,,,,781,,,,,781,781,781,781,781,781,,,,781',
'781,315,315,315,,315,,,,315,315,,,,315,,315,315,315,315,315,315,315',
',,,,315,315,315,315,315,315,315,,,,,,,,,,315,,,315,315,315,315,315,315',
'315,315,315,315,,315,315,,315,315,315,,,,,,,,,,,,,,,,,,,,315,,,315,',
'315,315,315,,,315,,315,,315,,315,,,,,,,,315,,,,,315,315,315,315,315',
'315,,,,315,315,316,316,316,,316,,,,316,316,,,,316,,316,316,316,316,316',
'316,316,,,,,316,316,316,316,316,316,316,,,316,,,,,,,316,,,316,316,316',
'316,316,316,316,316,316,316,,316,316,,316,316,316,,,,,,,,,,,,,,,,,,',
',316,,,316,,,316,316,,,316,,,,,,316,,,,,,,,316,,,,,316,316,316,316,316',
'316,,,,316,316,317,317,317,,317,,,,317,317,,,,317,,317,317,317,317,317',
'317,317,,,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317,317,317',
'317,317,317,317,317,317,317,,317,317,,317,317,317,,,,,,,,,,,,,,,,,,',
',317,,,317,,,317,317,,,317,,,,,,317,,,,,,,,317,,,,,317,317,317,317,317',
'317,,,,317,317,318,318,318,,318,,,,318,318,,,,318,,318,318,318,318,318',
'318,318,,,,,318,318,318,318,318,318,318,,,318,,,,,,,318,,,318,318,318',
'318,318,318,318,318,318,318,,318,318,,318,318,318,,,,,,,,,,,,,,,,,,',
',318,,,318,,,318,318,,,318,,,,,,318,,,,,,,,318,,,,,318,318,318,318,318',
'318,,,,318,318,319,319,319,,319,,,,319,319,,,,319,,319,319,319,319,319',
'319,319,,,,,319,319,319,319,319,319,319,,,319,,,,,,,319,,,319,319,319',
'319,319,319,319,319,319,319,,319,319,,319,319,319,,,,,,,,,,,,,,,,,,',
',319,,,319,,,319,319,,,319,,,,,,319,,,,,,,,319,,,,,319,319,319,319,319',
'319,,,,319,319,320,320,320,320,320,,,,320,320,,,,320,,320,320,320,320',
'320,320,320,,,,,320,320,320,320,320,320,320,,,320,,,,,,320,320,320,320',
'320,320,320,320,320,320,320,320,320,320,,320,320,,320,320,320,,,,,,',
',,,,,,,,,,,,,320,,,320,,,320,320,,,320,,320,,,,320,,,,,,,,320,,,,,320',
'320,320,320,320,320,,,,320,320,323,323,323,,323,,,,323,323,,,,323,,323',
'323,323,323,323,323,323,,,,,323,323,323,323,323,323,323,,,,,,,,,,323',
',,323,323,323,323,323,323,323,323,323,323,,323,323,,323,323,323,,,,',
',,,,,,,,,,,,,,,323,,,323,,,323,323,,,323,,323,,323,,323,,,,,,,,323,',
',,,323,323,323,323,323,323,,,,323,323,782,782,782,,782,,,,782,782,,',
',782,,782,782,782,782,782,782,782,,,,,782,782,782,782,782,782,782,,',
',,,,,,,782,,,782,782,782,782,782,782,782,782,782,782,,782,782,,782,782',
'782,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,782,,,782,,,,,,782,,,,,,,,782',
',,,,782,782,782,782,782,782,,,,782,782,30,30,30,30,30,30,30,30,30,30',
'30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,30,30,30,30,30',
'30,30,,,,,,30,30,30,30,30,30,30,30,30,,30,,,,,,,,30,30,,30,30,30,30',
',30,30,,,30,,,,,30,30,30,30,,,,,,,,,,,,,,30,30,,30,30,30,30,30,30,30',
'30,30,,30,,,30,30,,,414,414,414,,414,,,30,414,414,,,,414,,414,414,414',
'414,414,414,414,,,,,414,414,414,414,414,414,414,,,414,,,,,,,414,,,414',
'414,414,414,414,414,414,414,414,414,,414,414,,414,414,414,,,,,,,,,,',
',,,,,,,,,414,,,414,,,414,414,,,414,,,,,,414,,,,,,,,414,,,,,414,414,414',
'414,414,414,,,,414,414,408,408,408,,408,,,,408,408,,,,408,,408,408,408',
'408,408,408,408,,,,,408,408,408,408,408,408,408,,,,,,,,,,408,,,408,408',
'408,408,408,408,408,408,408,408,,408,408,,408,408,408,,,,,,,,,,,,,,',
',,,,,408,,,408,,,408,408,,,408,,408,,408,,408,,,,,,,,408,,,,,408,408',
'408,408,408,408,,,,408,408,330,330,330,,330,,,,330,330,,,,330,,330,330',
'330,330,330,330,330,,,,,330,330,330,330,330,330,330,,,,,,,,,,330,,,330',
'330,330,330,330,330,330,330,330,330,,330,330,,330,330,330,,,,,,,,,,',
',,,,,,,,,330,,,330,,,330,330,,,330,,,,,,330,,,,,,,,330,,,,,330,330,330',
'330,330,330,,,,330,330,407,407,407,,407,,,,407,407,,,,407,,407,407,407',
'407,407,407,407,,,,,407,407,407,407,407,407,407,,,,,,,,,,407,,,407,407',
'407,407,407,407,407,407,407,407,,407,407,,407,407,407,,,,,,,,,,,,,,',
',,,,,407,,,407,,,407,407,,,407,,,,,,407,,,,,,,,407,,,,,407,407,407,407',
'407,407,,,,407,407,406,406,406,,406,,,,406,406,,,,406,,406,406,406,406',
'406,406,406,,,,,406,406,406,406,406,406,406,,,,,,,,,,406,,,406,406,406',
'406,406,406,406,406,406,406,,406,406,,406,406,406,,,,,,,,,,,,,,,,,,',
',406,,,406,,,406,406,,,406,,,,,,406,,,,,,,,406,,,,,406,406,406,406,406',
'406,,,,406,406,404,404,404,,404,,,,404,404,,,,404,,404,404,404,404,404',
'404,404,,,,,404,404,404,404,404,404,404,,,,,,,,,,404,,,404,404,404,404',
'404,404,404,404,404,404,,404,404,,404,404,404,,,,,,,,,,,,,,,,,,,,404',
',,404,,,404,404,,,404,,,,,,404,,,,,,,,404,,,,,404,404,404,404,404,404',
',,,404,404,403,403,403,,403,,,,403,403,,,,403,,403,403,403,403,403,403',
'403,,,,,403,403,403,403,403,403,403,,,,,,,,,,403,,,403,403,403,403,403',
'403,403,403,403,403,,403,403,,403,403,403,,,,,,,,,,,,,,,,,,,,403,,,403',
',,403,403,,,403,,,,,,403,,,,,,,,403,,,,,403,403,403,403,403,403,,,,403',
'403,336,336,336,,336,,,,336,336,,,,336,,336,336,336,336,336,336,336',
',,,,336,336,336,336,336,336,336,,,,,,,,,,336,,,336,336,336,336,336,336',
'336,336,336,336,,336,336,,336,336,336,,,,,,,,,,,,,,,,,,,,336,,,336,',
',336,336,,,336,,336,,,,336,,,,,,,,336,,,,,336,336,336,336,336,336,,',
',336,336,399,399,399,,399,,,,399,399,,,,399,,399,399,399,399,399,399',
'399,,,,,399,399,399,399,399,399,399,,,,,,,,,,399,,,399,399,399,399,399',
'399,399,399,399,399,,399,399,,399,399,399,,,,,,,,,,,,,,,,,,,,399,,,399',
',,399,399,,,399,,399,,399,,399,,,,,,,,399,,,,,399,399,399,399,399,399',
',,,399,399,802,802,802,,802,,,,802,802,,,,802,,802,802,802,802,802,802',
'802,,,,,802,802,802,802,802,802,802,,,,,,,,,,802,,,802,802,802,802,802',
'802,802,802,802,802,,802,802,,802,802,802,,,,,,,,,,,,,,,,,,,,802,,,802',
',,802,802,,,802,,,,,,802,,,,,,,,802,,,,,802,802,802,802,802,802,,,,802',
'802,31,31,31,,31,,,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,31,31,31,31',
'31,31,31,,,,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31',
',,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,,,,,31,,,,,,,,31,,,,,31,31',
'31,31,31,31,,,,31,31,395,395,395,,395,,,,395,395,,,,395,,395,395,395',
'395,395,395,395,,,,,395,395,395,395,395,395,395,,,,,,,,,,395,,,395,395',
'395,395,395,395,395,395,395,395,,395,395,,395,395,395,,,,,,,,,,,,,,',
',,,,,395,,,395,,,395,395,,,395,,395,,,,395,,,,,,,,395,,,,,395,395,395',
'395,395,395,,,,395,395,346,346,346,,346,,,,346,346,,,,346,,346,346,346',
'346,346,346,346,,,,,346,346,346,346,346,346,346,,,,,,,,,,346,,,346,346',
'346,346,346,346,346,346,346,346,,346,346,,346,346,346,,,,,,,,,,,,,,',
',,,,,346,,,346,,,346,346,,,346,,346,,,,346,,,,,,,,346,,,,,346,346,346',
'346,346,346,,,,346,346,347,347,347,,347,,,,347,347,,,,347,,347,347,347',
'347,347,347,347,,,,,347,347,347,347,347,347,347,,,347,,,,,,,347,,,347',
'347,347,347,347,347,347,347,347,347,,347,347,,347,347,347,,,,,,,,,,',
',,,,,,,,,347,,,347,,,347,347,,,347,,,,,,347,,,,,,,,347,,,,,347,347,347',
'347,347,347,,,,347,347,388,388,388,,388,,,,388,388,,,,388,,388,388,388',
'388,388,388,388,,,,,388,388,388,388,388,388,388,,,388,,,,,,,388,,,388',
'388,388,388,388,388,388,388,388,388,,388,388,,388,388,388,,,,,,,,,,',
',,,,,,,,,388,,,388,,,388,388,,,388,,388,,388,,388,,,,,,,,388,,,,,388',
'388,388,388,388,388,,,,388,388,799,799,799,,799,,,,799,799,,,,799,,799',
'799,799,799,799,799,799,,,,,799,799,799,799,799,799,799,,,,,,,,,,799',
',,799,799,799,799,799,799,799,799,799,799,,799,799,,799,799,799,,,,',
',,,,,,,,,,,,,,,799,,,799,,,799,799,,,799,,,,,,799,,,,,,,,799,,,,,799',
'799,799,799,799,799,,,,799,799,382,382,382,,382,,,,382,382,,,,382,,382',
'382,382,382,382,382,382,,,,,382,382,382,382,382,382,382,,,,,,,,,,382',
',,382,382,382,382,382,382,382,382,382,382,,382,382,,382,382,382,,,,',
',,,,,,,,,,,,,,,382,,,382,,,382,382,,,382,,382,,,,382,,,,,,,,382,,,,',
'382,382,382,382,382,382,,,,382,382,369,369,369,,369,,,,369,369,,,,369',
',369,369,369,369,369,369,369,,,,,369,369,369,369,369,369,369,,,,,,,',
',,369,,,369,369,369,369,369,369,369,369,369,369,,369,369,,369,369,369',
',,,,,,,,,,,,,,,,,,,369,,,369,369,,369,369,,,369,,369,,369,,369,,,,,',
',,369,,,,,369,369,369,369,369,369,,,,369,369,354,354,354,,354,,,,354',
'354,,,,354,,354,354,354,354,354,354,354,,,,,354,354,354,354,354,354',
'354,,,,,,,,,,354,,,354,354,354,354,354,354,354,354,354,354,,354,354',
',354,354,354,,,,,,,,,,,,,,,,,,,,354,,,354,,,354,354,,,354,,,,,,354,',
',,,,,,354,,,,,354,354,354,354,354,354,,,,354,354,355,355,355,,355,,',
',355,355,,,,355,,355,355,355,355,355,355,355,,,,,355,355,355,355,355',
'355,355,,,355,,,,,,,355,,,355,355,355,355,355,355,355,355,355,355,,355',
'355,,355,355,355,,,,,,,,,,,,,,,,,,,,355,,,355,,,355,355,,,355,,,,,,355',
',,,,,,,355,,,,,355,355,355,355,355,355,,,,355,355,796,796,796,,796,',
',,796,796,,,,796,,796,796,796,796,796,796,796,,,,,796,796,796,796,796',
'796,796,,,,,,,,,,796,,,796,796,796,796,796,796,796,796,796,796,,796',
'796,,,,796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,796,,796,,',
',,,,,,,,,,,,796,796,796,796,796,796,,,,796,796,32,32,32,32,32,32,32',
'32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,,,32,32,32,32,32',
'32,32,32,32,32,,,,,,32,32,32,32,32,32,32,32,,,32,,,,,,,,32,32,,32,32',
'32,32,,32,32,,,32,,,,,32,32,32,32,,,,,,,,,,,,,,32,32,,32,32,32,32,32',
'32,32,32,32,,32,,,32,32,,,365,365,365,,365,,,32,365,365,,,,365,,365',
'365,365,365,365,365,365,,,,,365,365,365,365,365,365,365,,,,,,,,,,365',
',,365,365,365,365,365,365,365,365,365,365,,365,365,,365,365,365,,,,',
',,,,,,,,,,,,,,,365,,,365,365,,365,365,,,365,,365,,365,,365,,,,,,,,365',
',,,,365,365,365,365,365,365,,,,365,365,855,855,855,,855,,,,855,855,',
',,855,,855,855,855,855,855,855,855,,,,,855,855,855,855,855,855,855,',
',,,,,,,,855,,,855,855,855,855,855,855,855,855,855,855,,855,855,,,,855',
',,,,,,,,,,,,,,,,,,,855,,,855,,,855,855,,,855,,,,,,,,,,,,,,,,,,,855,855',
'855,855,855,855,,,,855,855,87,87,87,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,87,87,87,87,87,87,87,,,87,87,87,87,87,87,87,87,87,87,,,,,,87',
'87,87,87,87,87,87,87,87,87,87,87,,,,,,,87,87,,87,87,87,87,,87,87,,,87',
',,,,87,87,87,87,,,,,,,,,,,,,,87,87,,87,87,87,87,87,87,87,87,87,,87,',
',87,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27',
'27,27,,,27,27,27,27,27,27,27,27,27,27,,,,,,27,27,27,27,27,27,27,27,27',
'27,27,27,,,,,,,27,27,,27,27,27,27,,27,27,,,27,,,,,27,27,27,27,,,,,,27',
',,,,,,,27,27,,27,27,27,27,27,27,27,27,27,,27,,,27,631,631,631,631,631',
'631,631,631,631,631,631,631,631,631,631,631,631,631,631,631,631,631',
'631,631,,,631,631,631,631,631,631,631,631,631,631,,,,,,631,631,631,631',
'631,631,631,631,,,631,,,,,,,,631,631,,631,631,631,631,,631,631,,,631',
',,,,631,631,631,631,,,,,,,,,519,,,,,631,631,,631,631,631,631,631,631',
'631,631,631,,631,,,631,519,519,519,519,519,519,519,519,519,519,519,',
'519,519,,,519,519,,,,,,,,,,,,,,,519,,519,,519,519,519,519,519,519,519',
',519,,,,,,,653,653,,,653,,,,,519,,519,653,653,,653,653,653,653,,653',
'653,,,653,,,,,653,653,653,653,,,,,,,,,,,,,,653,653,,653,653,653,653',
'653,653,653,653,653,,653,,,653,571,571,571,571,571,571,571,571,571,571',
'571,,571,571,,,571,571,,,,571,,,,,,,,,,,571,,571,,571,571,571,571,571',
'571,571,,571,,,,,,,103,103,,,103,,,,,571,,571,103,103,,103,103,103,103',
',103,103,,,103,,,,,103,103,103,103,,,,,,,,,,,,,,103,103,,103,103,103',
'103,103,103,103,103,103,,103,326,326,103,,326,,,,,,,,326,326,,326,326',
'326,326,,326,326,,,326,,,,,326,326,326,326,,,,,,,,,,,,,,326,326,,326',
'326,326,326,326,326,326,326,326,,326,432,432,326,,432,,,,,,,,432,432',
',432,432,432,432,,432,432,,,432,,,,,432,432,432,432,,,,,,,,,,,,,,432',
'432,,432,432,432,432,432,432,432,432,432,,432,431,431,432,,431,,,,,',
',,431,431,,431,431,431,431,,431,431,,,431,,,,,431,431,431,431,,,,,,',
',,,,,,,431,431,,431,431,431,431,431,431,431,431,431,,431,,,431,858,858',
'858,858,858,858,858,858,858,858,858,,858,858,,,858,858,,,,,,,,,,,,,',
',858,,858,,858,858,858,858,858,858,858,,858,,,,,,,396,396,,,396,,,,',
'858,,858,396,396,,396,396,396,396,,396,396,,,396,,,,,396,396,396,396',
',,,,,,,,,,,,,396,396,,396,396,396,396,396,396,396,396,396,,396,600,600',
'396,,600,,,,,,,,600,600,,600,600,600,600,,600,600,,,600,,,,,600,600',
'600,600,,,,,,,,,,,,,,600,600,,600,600,600,600,600,600,600,600,600,,600',
'384,384,600,,384,,,,,,,,384,384,,384,384,384,384,,384,384,,,384,,,,',
'384,384,384,384,,,,,,,,,,,,,,384,384,,384,384,384,384,384,384,384,384',
'384,,384,383,383,384,,383,,,,,,,,383,383,,383,383,383,383,,383,383,',
',383,,,,,383,383,383,383,,,,,,,,,,,,,,383,383,,383,383,383,383,383,383',
'383,383,383,,383,102,102,383,,102,,,,,,,,102,102,,102,102,102,102,,102',
'102,,,102,,,,,102,102,102,102,,,,,,,,,,,,,,102,102,,102,102,102,102',
'102,102,102,102,102,,102,850,850,102,,850,,,,,,,,850,850,,850,850,850',
'850,,850,850,,,850,,,,,850,850,850,850,,,,,,,,,,,,,,850,850,,850,850',
'850,850,850,850,850,850,850,,850,325,325,850,,325,,,,,,,,325,325,,325',
'325,325,325,,325,325,,,325,,,,,325,325,325,325,,,,,,,,,,,,,,325,325',
',325,325,325,325,325,325,325,325,325,,325,849,849,325,,849,,,,,,,,849',
'849,,849,849,849,849,,849,849,,,849,,,,,849,849,849,849,,,,,,,,,,,,',
',849,849,,849,849,849,849,849,849,849,849,849,,849,397,397,849,,397',
',,,,,,,397,397,,397,397,397,397,,397,397,,,397,,,,,397,397,397,397,',
',,,,,,,,,,,,397,397,,397,397,397,397,397,397,397,397,397,,397,654,654',
'397,,654,,,,,,,,654,654,,654,654,654,654,,654,654,,,654,,,,,654,654',
'654,654,,,,,,,,,,,,,,654,654,,654,654,654,654,654,654,654,654,654,,654',
'599,599,654,,599,,,,,,,,599,599,,599,599,599,599,,599,599,,,599,,,,',
'599,599,599,599,,,,,,,,,,,,,,599,599,,599,599,599,599,599,599,599,599',
'599,,599,375,375,599,,375,,,,,,,,375,375,,375,375,375,375,,375,375,',
',375,,,,,375,375,375,375,,,,,,,,,,,,,,375,375,,375,375,375,375,375,375',
'375,375,375,,375,376,376,375,,376,,,,,,,,376,376,,376,376,376,376,,376',
'376,,,376,,,,,376,376,376,376,,,,,,,,,,,,,,376,376,,376,376,376,376',
'376,376,376,376,376,,376,,,376,537,537,537,537,537,537,537,537,537,537',
'537,,537,537,,,537,537,,,,,,,,,,,,,,,537,,537,,537,537,537,537,537,537',
'537,,537,765,765,765,765,765,765,765,765,765,765,765,,765,765,,537,765',
'765,,,,,,,,,,,,,,,765,,765,,765,765,765,765,765,765,765,,765,422,422',
'422,422,422,422,422,422,422,422,422,,422,422,765,765,422,422,,,,,,,',
',,,,,,,422,,422,,422,422,422,422,422,422,422,,422,641,641,641,641,641',
'641,641,641,641,641,641,,641,641,,422,641,641,,,,,,,,,,,,,,,641,,641',
',641,641,641,641,641,641,641,,641,685,685,685,685,685,685,685,685,685',
'685,685,,685,685,,641,685,685,,,,,,,,,,,,,,,685,,685,,685,685,685,685',
'685,685,685,,685,449,449,449,449,449,449,449,449,449,449,449,,449,449',
',685,449,449,,,,,,,,,,,,,,,449,,449,,449,449,449,449,449,449,449,,449',
'777,777,777,777,777,777,777,777,777,777,777,,777,777,,449,777,777,,',
',,,,,,,,,,,,777,,777,,777,777,777,777,777,777,777,,777,691,691,691,691',
'691,691,691,691,691,691,691,,691,691,,777,691,691,,,,,,,,,,,,,,,691',
',691,,691,691,691,691,691,691,691,,691,508,508,508,508,508,508,508,508',
'508,508,508,,508,508,,691,508,508,,,,,,,,,,,,,,,508,,508,,508,508,508',
'508,508,508,508,,508,687,687,687,687,687,687,687,687,687,687,687,,687',
'687,508,508,687,687,,,,,,,,,,,,,,,687,,687,,687,687,687,687,687,687',
'687,,687,766,766,766,766,766,766,766,766,766,766,766,,766,766,,687,766',
'766,,,,,,,,,,,,,,,766,,766,,766,766,766,766,766,766,766,,766,45,45,45',
'45,45,45,45,45,45,45,45,,45,45,,766,45,45,,,,,,,,,,,,,,,45,,45,,45,45',
'45,45,45,45,45,,45,689,689,689,689,689,689,689,689,689,689,689,,689',
'689,,45,689,689,,,,,,,,,,,,,,,689,,689,,689,689,689,689,689,689,689',
',689,142,142,142,142,142,142,142,142,142,142,142,,142,142,,689,142,142',
',,,,,,,,,,,,,,142,,142,,142,142,142,142,142,142,142,,142,,,,,,,,,,,',
',,,,142' ]
        racc_action_check = arr = ::Array.new(25040, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    12,  4702,  1133,   nil,   677,  8437,  8921,    70,   nil,
   nil,  9526,   nil,   nil, 11946,   -23,   nil,  1004, 13035,  1047,
   181,   999, 13277,   nil,   nil,   997, 14608, 22930,   nil, 18117,
 19811, 21134, 22465,   594,   nil,   508,   nil,   -78,   996,   nil,
   362,  1031,   nil,   nil,   nil, 24825,   973,   nil,   183,   nil,
  1054,  9042,   nil,   nil,  8679,  4092,   nil,  8558,  1036,  7953,
  5662,   nil,  5057,   nil,   277,  4936,   315,   nil,   nil,   nil,
   nil,   nil,  5178,   nil,   nil,   nil,   nil,  5299,   nil,  5420,
   nil,   950,   916,   nil,   nil,   nil,   nil, 22820,   nil,   949,
   nil,  6025,   798,   nil,   nil,   979,   nil,  6388,   nil,   179,
   nil,  6630, 23802, 23268,   597,   -22,   nil,   nil,    10,   540,
  1029,   -13,   928,   994,   nil,   959,   949,   nil,   nil,   nil,
   -28,  1025,   nil,   973,   982,  3970,   nil,  8800,   940,   nil,
   940,   nil,   243,  1033,  9405,   900,  9647,   163,   940,   nil,
   157,   960, 24915,   nil,   nil, 10373,   nil,   878,   920,   877,
   795,   nil,   880,   125,   nil,   nil,   nil, 11220, 11341,   875,
   nil,   -35, 11704,   847,  3604, 12067,   nil,   383,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   352,   nil,
   353,   nil,   nil,   nil,   nil,   407,   nil,   nil,   nil,   nil,
   nil,   nil,   405,   -51,   nil,   nil,   nil,   238,   nil,   nil,
   nil,   nil,   -45,   326,   nil,   347,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   631,   nil,   nil,   nil,   nil,
   898,   nil,   831, 13761, 13882,   890,   888,  3238, 14366,   nil,
   795,   nil,   nil,   nil,   nil,    88,   834, 14850, 14971, 15092,
 15213, 15334, 15455, 15576, 15697, 15818, 15939, 16060, 16181, 16302,
 16423, 16544, 16665, 16786, 16907, 17028, 17149, 17270, 17391, 17512,
 17633, 17754, 17875,  2994,   nil,   nil,   nil,   nil,   544,    20,
   852,   841,   840,  1286,   nil, 18843, 18964, 19085, 19206, 19327,
 19448,   nil,   nil, 19569,    45, 23922, 23328,   nil,   nil,   482,
 20166,   832,   193,   nil,   764,   334, 20771,    12,   744,   430,
   nil,   nil,   215,   nil,   nil,   nil, 21376, 21497,   248,   nil,
   761,   310,   225,   nil, 22102, 22223,   nil,   nil,   nil,   nil,
   nil,   nil,   763,   735,   nil, 22578,     0,  9889,   125, 21981,
   nil,   -80,   nil,   200,  7227, 24222, 24282,   nil,   nil,   nil,
   733,   -19, 21860, 23742, 23682,   839,   nil,   nil, 21618,   nil,
   nil,   199,   nil,   240,   nil, 21255, 23562, 24042,   685, 20892,
   nil,   nil,   nil, 20650, 20529,   104, 20408, 20287, 20045,   nil,
   nil,   151,   nil,   nil, 19924,   674,   nil,   134,   nil,    14,
   128,   377, 24420,   nil,   nil,   680,   nil,   nil,   nil,   715,
   nil, 23448, 23388,  1089,   nil,   nil,   nil, 18601,  4823,   nil,
   nil,   nil,   nil,   nil,   nil, 18480, 18238,   795,   785, 24555,
 17996,  1071,   nil, 14729,  2018,   553,   674,  1896,   729,  2506,
   721,  1160,   441,  2384,   276,   420,  2018,   330,  2628,  1652,
  1530,  1408,   795,  2994,  1774,   720,  2872,   702,  2140,  2750,
  2262,   652,   -17,   nil,  1774,   nil,   741,   nil,   605,   627,
   623,   nil,   nil,   nil,   nil,   nil,   nil,   613,   663,   541,
   157,   537,  1408,   437,   nil,   nil,   250,   539, 24690,   nil,
   nil,   nil, 12914,   nil,   nil, 12793, 12672,   nil,   nil, 23088,
   nil,   519,  3726,   nil,   604,   594,   nil,   nil,   464,   nil,
    27,   nil,   nil,   nil, 12188,   nil,   nil, 24330,   nil,    52,
  2750,   658,    32,   475,   nil, 11583, 11099,   433,   nil,   nil,
   nil, 10978, 10857,   423,   394,    -4,     3,   382,    -7,    -5,
 10131,   364,   323,   792,   116,     5,  9768,   322,   -64,   nil,
   nil, 23202,   336,    79,   nil,   nil,  9284,   nil,   nil,   301,
   674,   553,    90,   -74,   261,   nil,  8316,   264,   nil,   nil,
   nil,   916,  8195,   213,   225,   nil,   nil,   542,  7590, 24162,
 23622,   nil,   nil,   470,   319,   nil,   nil,   nil,   nil,   nil,
  2506,   nil,   nil,   245,   232,   145,   385,   130,   nil,   nil,
   128,   nil,   nil,   114,   nil,   nil,  2628,   nil,   nil,   nil,
   497, 23040,    24,   nil,  7114,   174,   160,   170,  6751,   nil,
     9, 24465,    59,  6146,   nil,   nil,   526,   nil,   -65,   nil,
   nil,    39,    27, 23154, 24102,  5541,   807,   nil,   nil,   nil,
   nil,   -39,   nil,  5783,   nil,   nil,  5904,  6509,   162,  6872,
   nil,   177,   nil,   nil,   nil,   nil,   nil,   102,   nil,   nil,
   nil,   nil,   nil,  6993,   nil, 24510,   nil, 24735,   nil, 24870,
   nil, 24645,   nil,    -6,    53,   550,   182,  7832,   nil,  8074,
   259,   nil,   nil,  2262,  1160,  9163,   nil,   273,   nil,   306,
  3116,   176, 10010, 10252, 10615,   357,   367, 10736,   nil,   468,
   437,   nil,   227,   795,   nil, 12309,  4580,   615,   nil,   nil,
 12551,   nil,  1337,   nil,   268,   nil,   394,   nil,   662,   550,
   nil,   593,   nil,  1530,   690,   nil,   nil,   573,   615,   nil,
   nil,   nil,   430,  1652, 13398,   707,   nil,   nil,   nil,   630,
   632,   693,   -24,   725,   nil, 24375, 24780, 14124,   657,   nil,
 14487,    21,   666,   nil,  1896,  2140,   nil, 24600,   nil,   nil,
   nil, 18722, 19690,   682,   nil,   683,   nil,  2384,   810,   850,
   916,   919,   777,   734,   726,   nil, 22344,   nil,   756, 21739,
   nil,   nil, 21013,   nil,   nil,   386,   883,   nil,   nil,   nil,
   778,   779,   nil,   nil,   776,   787,   nil,   827,  1052,   nil,
   nil,   nil,  2872,   nil,    31, 18359,   nil,   933,   -11,   nil,
   863,   nil,   nil,   nil,   nil,  3360, 14003,   946,   947,  3482,
   833,   835, 13519,   nil, 11825,   nil,   866,   nil, 11462, 23982,
 23862,   556, 10494,   914,  1039, 22699,   nil,   nil, 23496,  3848,
   nil,   nil,   272,   nil,   nil,   nil,   nil,  4214,   nil,  4336,
   nil,   nil,  4458,   nil,    78,  7711,   nil,   nil,  1043,   nil,
   nil,  7469,  6267,   939,   nil,   974,   192,   380,   379,   186,
   nil, 14245,   988,   970,   nil,   nil,  1090,   988,  1108,  1111,
   575,   nil,   nil,   nil,   nil,   nil,   994,   995, 13640,   nil,
   553,   nil, 13156,  1033,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 12430,   nil,  7348,  1008,   nil,   nil ]

racc_action_default = [
    -1,  -520,  -519,  -520,  -519,  -520,  -520,   -70,  -252,  -434,
  -519,  -323,   -61,    -2,  -520,  -292,  -435,  -519,  -324,  -308,
  -274,  -519,   -65,  -315,  -325,  -520,  -520,  -520,  -326,  -520,
  -520,  -520,  -520,   -34,   -71,  -520,  -276,  -449,  -510,  -401,
  -508,  -520,   -20,  -428,  -394,   -40,  -520,  -448,  -397,    -5,
   -42,  -286,  -447,  -398,  -520,  -519,   -43,  -289,    -6,  -438,
  -371,  -267,  -520,  -444,   -47,  -520,  -498,  -268,  -443,  -440,
  -395,  -269,  -520,  -445,  -439,  -396,  -270,  -519,  -446,  -441,
  -271,  -520,  -508,  -442,  -272,   -35,  -451,  -519,  -273,  -520,
  -296,  -519,  -217,  -452,  -519,  -520,  -299,  -520,   927,  -520,
  -416,  -519,  -520,  -520,  -520,  -365,  -323,  -324,  -274,  -520,
  -520,  -449,  -510,  -520,  -286,  -289,  -371,  -339,  -340,  -327,
  -520,   -82,   -69,   -75,  -520,  -519,  -291,  -520,   -53,  -375,
  -520,  -372,  -520,  -520,  -520,  -519,  -520,  -274,  -262,  -239,
  -449,  -520,  -218,  -231,   -45,  -520,  -493,  -520,  -520,  -519,
    -8,  -293,  -520,  -520,  -406,   -46,  -311,  -520,  -520,  -520,
  -412,  -520,   -68,   -66,  -519,  -520,   -73,  -520,  -194,  -152,
  -124,  -141,  -123,  -155,  -143,  -131,  -110,  -154,  -132,  -159,
  -129,  -144,  -119,  -161,  -128,  -138,  -130,  -167,  -120,  -153,
  -126,  -449,  -140,  -146,  -125,  -145,  -127,  -160,  -121,  -136,
  -111,  -150,  -122,  -137,  -318,  -149,  -162,  -117,  -134,  -112,
  -520,  -170,  -169,  -115,   -99,  -135,  -113,  -488,  -171,  -164,
  -108,  -100,   -96,  -163,   -98,  -116,  -165,  -156,  -109,  -118,
  -148,  -147,  -166,   -97,  -142,  -151,  -114,  -168,  -139,  -133,
  -487,  -172,  -158,  -173,  -157,  -210,  -101,  -134,  -135,   -96,
  -163,  -103,    -9,  -156,  -102,  -520,  -166,  -104,   -97,  -151,
  -195,  -105,   -14,  -520,  -520,  -436,  -437,  -519,  -520,  -511,
  -509,  -516,  -515,  -517,    -4,  -282,  -520,  -520,  -520,  -520,
  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,
  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,
  -520,  -520,  -520,  -519,  -399,  -359,  -362,   -44,   -41,  -520,
   -61,  -520,  -520,  -519,   -60,  -520,  -520,  -520,  -520,  -520,
  -520,   -59,  -370,  -519,  -520,  -520,  -520,  -209,   -39,  -278,
  -520,  -520,  -512,  -219,  -510,  -512,  -520,  -520,  -509,  -508,
  -427,  -429,  -520,  -431,  -430,  -432,  -520,  -520,  -512,  -490,
  -520,  -512,  -520,  -414,  -520,  -520,   -38,  -418,  -421,  -419,
  -417,  -402,  -520,  -252,  -369,  -505,  -499,  -504,  -500,  -519,
  -502,  -499,  -501,  -500,  -519,  -520,  -520,  -436,  -437,  -305,
  -520,  -282,  -519,  -520,  -520,   -81,  -253,  -254,  -255,   -54,
   -50,  -519,  -366,  -519,  -403,  -519,  -520,  -520,  -519,  -520,
  -234,  -261,  -259,  -520,  -520,  -282,  -520,  -520,  -520,  -232,
  -404,  -520,  -408,  -405,  -520,  -520,  -274,  -520,   -94,  -520,
   -91,   -92,  -183,   -30,  -410,  -520,  -411,   -67,   -74,  -520,
  -316,  -520,  -520,  -467,  -320,  -507,  -506,  -520,  -520,   -13,
   -12,   -11,  -106,   -36,   -37,  -520,  -520,  -386,  -520,  -215,
  -520,    -7,  -518,  -520,  -519,  -204,  -185,  -205,  -190,  -206,
  -189,  -520,  -211,  -201,  -186,  -212,  -203,  -187,  -213,  -202,
  -214,  -200,  -207,  -196,  -208,  -188,  -197,  -191,  -199,  -198,
  -184,  -520,  -519,  -330,  -519,  -329,  -328,  -280,   -62,  -520,
  -520,  -288,   -15,   -16,   -17,   -18,   -19,  -520,  -231,  -510,
  -510,  -519,  -519,  -252,  -499,  -500,  -252,  -510,  -510,  -284,
  -513,  -223,  -514,  -220,  -221,  -514,  -520,   -31,  -262,  -174,
   -23,  -520,  -519,  -378,  -520,  -520,  -433,   -33,   -32,   -24,
  -520,  -491,  -285,  -492,  -514,  -415,  -400,  -176,   -25,  -520,
  -519,  -520,  -283,   -57,  -368,  -520,  -520,   -55,  -230,  -367,
  -229,  -520,  -520,  -520,  -520,  -503,  -281,  -519,  -499,  -500,
  -520,  -520,   -78,   -80,  -499,  -500,  -520,  -519,  -520,  -251,
  -257,   -40,  -520,  -519,  -376,  -357,  -520,  -355,  -373,  -520,
  -503,  -281,  -499,  -500,  -520,  -238,  -520,  -520,  -260,  -494,
  -495,  -174,  -520,  -519,  -263,  -407,  -409,  -312,  -519,  -520,
  -520,   -93,   -91,   -92,  -520,  -454,  -309,  -453,  -413,   -72,
  -519,  -473,  -476,  -481,  -520,  -472,  -520,  -486,  -479,  -470,
  -486,  -478,  -469,  -486,  -483,  -468,  -519,  -482,  -471,  -466,
  -467,  -520,  -510,   -10,  -520,  -192,  -193,  -519,  -519,  -277,
  -520,  -182,  -520,  -520,   -22,  -360,  -519,  -331,   -62,  -287,
  -225,  -520,  -520,  -520,  -520,  -520,  -519,   -49,  -364,   -48,
  -363,  -520,  -224,  -520,  -263,  -266,  -520,  -520,  -520,  -520,
  -303,  -520,  -334,  -333,  -297,  -332,  -300,  -520,  -426,  -420,
  -423,  -424,  -425,  -520,   -58,  -180,   -29,  -181,   -56,  -178,
   -27,  -179,   -28,  -283,  -520,   -76,  -519,  -520,  -244,  -520,
  -520,  -256,   -51,  -519,  -353,  -520,  -341,  -343,  -356,  -520,
  -519,  -283,  -520,  -520,  -520,  -519,  -519,  -520,  -236,  -520,
  -520,   -95,   -91,   -92,  -456,  -520,  -519,  -520,  -480,  -484,
  -520,  -458,  -520,  -462,  -520,  -464,  -520,  -465,  -520,  -510,
  -321,  -520,  -107,  -519,  -519,  -337,  -388,  -387,  -519,  -389,
  -290,   -21,  -216,  -519,  -520,  -520,  -335,  -226,  -227,  -519,
  -519,  -520,  -510,  -520,  -279,  -510,  -175,  -520,  -264,  -304,
  -520,  -520,  -380,  -302,  -519,  -519,  -422,  -177,   -26,  -306,
  -250,  -520,  -520,  -519,  -241,  -519,  -258,  -519,  -520,  -520,
   -90,   -83,  -520,  -520,  -352,  -354,  -344,  -358,  -520,  -520,
  -235,  -233,  -520,  -313,  -283,  -520,  -520,  -317,  -475,  -474,
  -486,  -486,  -485,  -477,  -520,  -486,  -319,  -520,  -467,  -489,
  -338,    -3,  -519,  -393,  -520,  -520,  -391,  -520,  -520,  -294,
  -520,  -295,  -222,  -265,  -382,  -519,  -520,  -520,  -520,  -519,
  -519,  -519,  -520,  -246,  -520,  -240,  -520,  -377,  -519,  -520,
  -520,   -89,  -520,  -520,  -349,  -520,  -342,  -374,  -519,  -519,
  -455,  -310,  -520,  -460,  -461,  -463,  -457,  -519,  -392,  -519,
  -390,  -361,  -519,  -228,  -519,  -520,  -298,  -301,  -520,  -245,
  -242,  -520,  -520,  -519,   -52,  -520,   -86,   -88,   -85,   -87,
  -351,  -520,  -520,  -348,  -345,  -237,  -520,  -486,  -520,  -386,
  -519,  -384,  -383,  -379,  -381,  -307,  -519,  -519,  -520,  -247,
   -84,  -350,  -520,  -520,  -314,  -459,  -322,  -385,  -336,  -248,
  -243,  -520,  -347,  -520,  -519,  -346,  -249 ]

clist = [
'81,163,524,214,117,204,214,331,214,20,637,389,81,108,121,400,589,143',
'135,139,626,20,755,629,143,135,139,150,268,121,484,362,254,744,254,448',
'257,273,257,500,149,252,601,261,517,502,274,149,128,412,122,310,763',
'81,527,813,709,143,135,139,322,419,20,214,144,341,674,363,369,430,312',
'155,574,700,578,676,99,328,365,273,149,658,132,334,660,240,350,733,337',
'151,735,309,811,737,815,386,570,314,348,324,321,634,380,787,307,511',
'110,334,514,606,573,276,210,434,267,507,322,347,774,339,351,531,355',
'81,533,775,560,839,157,589,392,726,20,143,135,139,414,719,859,165,610',
'433,631,818,707,572,482,753,393,119,119,710,391,703,771,903,149,669',
'748,342,310,824,81,645,416,119,304,352,438,121,423,20,416,308,153,411',
'118,161,679,429,387,308,541,813,540,340,725,739,810,262,671,329,270',
'821,809,2,437,1,,,,308,,,,427,,,,,,,,,,,356,,,,629,,897,,721,,,,,,779',
',,,,,,,,,,,,,,,,,535,,,,,,702,,,,,,,,,,,81,,,81,,902,,,,20,,918,20,585',
'13,863,864,,451,,865,,,,,503,506,,,,,,,,,119,81,,,553,119,,596,119,310',
'20,81,561,,589,,,,81,,20,143,135,139,513,579,,20,489,498,135,139,311',
'496,589,,273,658,660,,,557,,,149,525,746,,520,557,,365,501,492,493,494',
'495,,529,365,,363,369,544,,521,538,915,490,,,762,365,,,521,499,,727',
',334,,443,444,530,,,,334,,,,539,,738,567,569,557,,,,334,311,543,,867',
',365,629,547,,,,,214,593,607,,,,,,,,,,684,,,,688,,,,,308,308,308,308',
',254,311,,,257,,,698,,633,,,81,,,,,,,589,,20,917,,,,308,,,,,,,718,308',
',,,,,,,81,,,,,,,651,652,20,835,,806,,,661,662,,81,,,,,,,329,,20,,,,',
',,,,,,81,,,,,589,,675,720,20,,,,597,,,675,,81,901,,,,657,,869,659,20',
'678,872,,,,,544,706,632,686,,,,,,690,692,557,,,,640,,,,,,365,780,,,',
'481,,,121,,,,,,,311,,,,,800,801,694,,100,,724,,,334,100,,214,81,740',
'214,,154,731,,,160,20,759,760,,,741,,81,,,896,,,,,,20,,898,254,,,,257',
',,,,742,,,,,,,,,,,,,,,,761,593,843,,845,,521,,,,,333,,,,,,,308,,,100',
',,,349,,,353,,675,,,,778,333,,772,,,81,794,795,,,783,784,81,,20,790',
'790,,,,803,20,,119,879,880,,,81,,,,785,817,401,642,,20,,,,,895,,,81',
',,401,,,,,,20,81,830,,,832,,,,,20,646,805,909,,,,,,,,,81,81,,856,,,885',
'656,,20,20,,,81,919,920,,,,828,,,20,,,,,668,,,860,121,926,,,,,,,,,,',
'557,,677,,,81,,,870,,365,,,,20,,,790,81,,,,81,,,,,20,,308,,20,119,119',
',890,883,893,894,334,,,81,,790,,790,790,,,81,20,81,,,81,,,308,20,,20',
',,20,,,,5,,,,104,120,911,,,133,,,5,,,790,133,,,,120,,,,,37,,922,,111',
'123,,,,,497,790,37,925,,,,,,,123,,790,,133,191,,133,5,,,119,,,,133,',
',133,,,,,,,133,,,,,133,,,37,,133,550,,,,119,333,,,,,,,,333,133,,788',
',133,,,,577,798,577,,333,,,401,,119,,119,119,,,,,,,,5,,133,,,,,,,,,',
',,820,,,,,,,,,,827,37,,,119,,,,415,133,,,,120,,5,415,,,,,837,838,,,119',
',,,,,,,191,846,,119,,123,,37,191,,,,,,577,,,,,,,,,,,,,,,,,,,401,,550',
'868,,550,,,,,,,,,,,874,,,,878,,,,,,,,,,,,,,,,,,,,,,,,,,,,133,133,899',
',5,900,,5,550,,,,,,,,,,401,,,,,,577,,,,,37,,,37,,,,,,,,5,,,,401,,,,',
'333,5,,133,133,133,133,133,5,,,133,,,,,37,,,,,,,,133,,37,,,,,,,37,133',
'133,,,,745,749,,133,133,,,,,745,,,,,,,,,,745,,,,133,,,,,,,,133,,,,,',
'133,,,,,,,133,,,,,,,,,,,95,,,,401,,,,133,,,,95,,,,,,,,,,,401,401,,,',
',,,133,,,,,,,,,,,,,133,,,,5,,,,823,95,,,826,,,,,,,,,,,550,550,,,,,37',
',,,,5,,,,,,,,,,,,,401,,401,,,5,,,,,,,37,,,,,,,,,,,,,5,,,,,37,,95,,,',
',,,,,,,5,,,,,133,,37,,,,133,133,,401,401,,,,,133,,333,,,37,,,95,,,,401',
',,,120,,,,,,,,,,,,745,,,,,,,,,401,133,,,123,,,,,,,,,5,,,,745,,,,,,401',
'401,,,,,5,,,,,,,,,37,,,401,,,,,,,,,,,,,37,,,,133,,,,,,,,,,,,,,,,95,',
',95,,,,,,,,,133,,,,,,,,,,142,,,,,,,142,,,5,789,789,,95,168,,5,245,,260',
',,,95,,,,,,,95,133,5,,37,791,791,,,142,,37,,,,,,,,5,,,,327,,,,37,,5',
'133,,,,,142,,,,,,,,,37,,,,,142,5,5,,,37,,,,,142,,,,5,,,,,,,,,120,,,37',
'37,,,,,,,,,142,,,37,,,,142,,142,,,123,5,,,789,,327,,,,,,,,5,,,,5,422',
',,,,,,37,133,,791,,789,,789,789,,,95,5,37,,,,37,,,5,,5,,,5,,,,,791,',
'791,791,,,,37,,,,95,,,789,37,,37,,,37,,,,,,,,,95,,,,,,789,,,,791,,,',
',,,789,,,95,,,,,,,,,,,791,,,,,,,95,,,,791,,449,,,,,,,,,455,456,457,458',
'459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475',
'476,477,478,479,480,,,,398,,402,,,,,,,142,,,,,,,,142,,,,,,,508,,95,',
',,519,,,,,,,,,,142,,95,,,,,,537,,,,,,,,,,,,,,,,,,,,142,,,,,,,,142,,',
',,,571,,,,,,,142,,,,142,,,,422,142,,591,537,142,,,,,,,,,,,,,,,,,95,',
',,,,,95,,,,,,,,,,,,,635,636,,95,,,,,641,,,,,,,,,,,,95,,,,,,,,,,95,,',
',8,,,,,,,,,8,,,8,,,,8,95,95,,,,,,,,,,,518,95,,,142,,,142,142,,528,,',
',,,,,,,8,,,8,8,,142,,,,,8,,,8,,95,685,687,,,8,,689,691,,8,,,95,,8,568',
'95,,,,,142,,,,,587,,,8,,590,,8,,594,95,,,,,142,,,95,,95,142,,95,,,,142',
',,,8,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,,,142,,,8,,752,,,,,,,,,,,,142',
',,,,,,,765,,,766,142,,142,,,,,,,,,,,,,,777,587,,,664,665,,,,,,,,,142',
',142,,,,,,,664,,,,,,685,689,691,,,142,,,,,,,,,,,,,142,,,,,,,,696,,8',
'8,,,8,,,8,,,,,,,,,,,715,,,,,,716,,,142,,,142,,,,,,,,,,8,142,142,,,,',
',,,8,,8,8,8,8,8,8,,777,8,,858,,,,,,,,747,,,8,,,,,,,,,,8,8,,,594,,,,8',
'8,,,,142,,,768,,518,142,,142,,,,142,,,8,,,,,,,,8,,,,,,8,,,,587,,,8,',
',142,,,,,,142,142,,,,,,,587,,8,,,,,,,,,,,808,,,,,,142,,,,,,8,,,,,,,142',
',,,,,8,,,,8,,,,,,,,833,,,834,,,,,,,,,,,840,841,,,,,,,8,,,,,,,,,,,,,',
',,,,8,,,,,,,,,,,,,,,,,,,,8,,,,,,,,,664,,,,,,587,,594,8,,,,,8,,,,,,8',
'8,,,,,,,,8,,,,,,,,,,904,,,,,,906,907,,,,,,,,,,,,,,,,,,,,,8,,,,,587,',
',,,,,8,,,,,,924,,,,,,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,,,,,,,,,,,',
',,,,,,,,,,,,,,,,8,,,,,,,,,,,,,,,,,,,,8,,,,,,,8,,,,,,,,,,,,,,,8,8,,,',
',,,,,,,,,,,,,8,,,,,,,,,,8,8,,,,,,,,,,,,,,,,,,,,8,8,,,,,,,,,,,,8,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,,,,,,,,,,,,,8,,,,8,,,,,,,,,8,,,,,,,',
',,,8,,,,,,,,8,,8,,,8' ]
        racc_goto_table = arr = ::Array.new(2913, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'16,43,82,49,16,48,49,21,49,22,5,35,16,22,22,62,148,29,59,63,86,22,80',
'142,29,59,63,11,55,22,79,21,52,6,52,3,53,85,53,32,57,13,46,13,23,79',
'9,57,34,130,44,40,6,16,23,144,108,29,59,63,60,47,22,49,31,48,81,33,33',
'47,41,31,36,68,36,81,127,17,49,85,57,61,127,29,61,75,76,141,9,77,141',
'15,140,141,140,65,64,34,59,15,34,54,55,38,31,58,83,29,58,84,37,27,87',
'88,89,90,60,91,92,15,57,58,93,16,58,94,95,96,97,148,60,98,22,29,59,63',
'99,100,101,102,103,104,105,106,107,67,110,111,114,56,56,115,116,117',
'118,119,57,120,121,127,40,122,16,36,22,56,125,126,26,22,17,22,22,25',
'128,129,18,131,132,41,31,25,133,144,134,135,136,137,139,14,82,25,12',
'7,143,4,147,1,,,,25,,,,44,,,,,,,,,,,25,,,,142,,140,,46,,,,,,81,,,,,',
',,,,,,,,,,,,130,,,,,,36,,,,,,,,,,,16,,,16,,6,,,,22,,80,22,62,2,141,141',
',11,,141,,,,,33,33,,,,,,,,,56,16,,,21,56,,130,56,40,22,16,21,,148,,',
',16,,22,29,59,63,55,21,,22,41,29,59,63,2,11,148,,85,61,61,,,33,,,57',
'9,23,,17,33,,49,57,15,15,15,15,,17,49,,33,33,60,,57,17,141,31,,,32,49',
',,57,31,,3,,29,,25,25,15,,,,29,,,,15,,3,59,63,33,,,,29,2,34,,86,,49',
'142,34,,,,,49,59,85,,,,,,,,,,35,,,,35,,,,,25,25,25,25,,52,2,,,53,,,62',
',13,,,16,,,,,,,148,,22,5,,,,25,,,,,,,62,25,,,,,,,,16,,,,,,,55,55,22',
'79,,3,,,55,55,,16,,,,,,,25,,22,,,,,,,,,,,16,,,,,148,,85,21,22,,,,25',
',,85,,16,82,,,,34,,79,34,22,22,79,,,,,60,43,25,17,,,,,,17,17,33,,,,25',
',,,,,49,62,,,,2,,,22,,,,,,,2,,,,,62,62,15,,10,,85,,,29,10,,49,16,48',
'49,,10,85,,,10,22,33,33,,,55,,16,,,3,,,,,,22,,3,52,,,,53,,,,,13,,,,',
',,,,,,,,,,,29,59,62,,62,,57,,,,,10,,,,,,,25,,,10,,,,10,,,10,,85,,,,17',
'10,,57,,,16,16,16,,,59,63,16,,22,22,22,,,,85,22,,56,62,62,,,16,,,,57',
'55,10,2,,22,,,,,62,,,16,,,10,,,,,,22,16,55,,,55,,,,,22,2,15,62,,,,,',
',,,16,16,,43,,,21,2,,22,22,,,16,62,62,,,,15,,,22,,,,,2,,,85,22,62,,',
',,,,,,,,33,,2,,,16,,,16,,49,,,,22,,,22,16,,,,16,,,,,22,,25,,22,56,56',
',16,59,16,16,29,,,16,,22,,22,22,,,16,22,16,,,16,,,25,22,,22,,,22,,,',
'20,,,,20,20,16,,,20,,,20,,,22,20,,,,20,,,,,45,,16,,45,45,,,,,10,22,45',
'16,,,,,,,45,,22,,20,45,,20,20,,,56,,,,20,,,20,,,,,,,20,,,,,20,,,45,',
'20,10,,,,56,10,,,,,,,,10,20,,2,,20,,,,10,2,10,,10,,,10,,56,,56,56,,',
',,,,,20,,20,,,,,,,,,,,,2,,,,,,,,,,2,45,,,56,,,,20,20,,,,20,,20,20,,',
',,2,2,,,56,,,,,,,,45,2,,56,,45,,45,45,,,,,,10,,,,,,,,,,,,,,,,,,,10,',
'10,2,,10,,,,,,,,,,,2,,,,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,20,2,,20,2,',
'20,10,,,,,,,,,,10,,,,,,10,,,,,45,,,45,,,,,,,,20,,,,10,,,,,10,20,,20',
'20,20,20,20,20,,,20,,,,,45,,,,,,,,20,,45,,,,,,,45,20,20,,,,10,10,,20',
'20,,,,,10,,,,,,,,,,10,,,,20,,,,,,,,20,,,,,,20,,,,,,,20,,,,,,,,,,,19',
',,,10,,,,20,,,,19,,,,,,,,,,,10,10,,,,,,,20,,,,,,,,,,,,,20,,,,20,,,,10',
'19,,,10,,,,,,,,,,,10,10,,,,,45,,,,,20,,,,,,,,,,,,,10,,10,,,20,,,,,,',
'45,,,,,,,,,,,,,20,,,,,45,,19,,,,,,,,,,,20,,,,,20,,45,,,,20,20,,10,10',
',,,,20,,10,,,45,,,19,,,,10,,,,20,,,,,,,,,,,,10,,,,,,,,,10,20,,,45,,',
',,,,,,20,,,,10,,,,,,10,10,,,,,20,,,,,,,,,45,,,10,,,,,,,,,,,,,45,,,,20',
',,,,,,,,,,,,,,,19,,,19,,,,,,,,,20,,,,,,,,,,28,,,,,,,28,,,20,20,20,,19',
'28,,20,28,,28,,,,19,,,,,,,19,20,20,,45,45,45,,,28,,45,,,,,,,,20,,,,28',
',,,45,,20,20,,,,,28,,,,,,,,,45,,,,,28,20,20,,,45,,,,,28,,,,20,,,,,,',
',,20,,,45,45,,,,,,,,,28,,,45,,,,28,,28,,,45,20,,,20,,28,,,,,,,,20,,',
',20,28,,,,,,,45,20,,45,,20,,20,20,,,19,20,45,,,,45,,,20,,20,,,20,,,',
',45,,45,45,,,,45,,,,19,,,20,45,,45,,,45,,,,,,,,,19,,,,,,20,,,,45,,,',
',,,20,,,19,,,,,,,,,,,45,,,,,,,19,,,,45,,28,,,,,,,,,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,,24,,24',
',,,,,,28,,,,,,,,28,,,,,,,28,,19,,,,28,,,,,,,,,,28,,19,,,,,,28,,,,,,',
',,,,,,,,,,,,,28,,,,,,,,28,,,,,,28,,,,,,,28,,,,28,,,,28,28,,28,28,28',
',,,,,,,,,,,,,,,,19,,,,,,,19,,,,,,,,,,,,,28,28,,19,,,,,28,,,,,,,,,,,',
'19,,,,,,,,,,19,,,,39,,,,,,,,,39,,,39,,,,39,19,19,,,,,,,,,,,24,19,,,28',
',,28,28,,24,,,,,,,,,,39,,,39,39,,28,,,,,39,,,39,,19,28,28,,,39,,28,28',
',39,,,19,,39,24,19,,,,,28,,,,,24,,,39,,24,,39,,24,19,,,,,28,,,19,,19',
'28,,19,,,,28,,,,39,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,28,,,39,,28',
',,,,,,,,,,,28,,,,,,,,28,,,28,28,,28,,,,,,,,,,,,,,28,24,,,24,24,,,,,',
',,,28,,28,,,,,,,24,,,,,,28,28,28,,,28,,,,,,,,,,,,,28,,,,,,,,24,,39,39',
',,39,,,39,,,,,,,,,,,24,,,,,,24,,,28,,,28,,,,,,,,,,39,28,28,,,,,,,,39',
',39,39,39,39,39,39,,28,39,,28,,,,,,,,24,,,39,,,,,,,,,,39,39,,,24,,,',
'39,39,,,,28,,,24,,24,28,,28,,,,28,,,39,,,,,,,,39,,,,,,39,,,,24,,,39',
',,28,,,,,,28,28,,,,,,,24,,39,,,,,,,,,,,24,,,,,,28,,,,,,39,,,,,,,28,',
',,,,39,,,,39,,,,,,,,24,,,24,,,,,,,,,,,24,24,,,,,,,39,,,,,,,,,,,,,,,',
',,39,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,24,,,,,,24,,24,39,,,,,39,,,,,,39',
'39,,,,,,,,39,,,,,,,,,,24,,,,,,24,24,,,,,,,,,,,,,,,,,,,,,39,,,,,24,,',
',,,,39,,,,,,24,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,',
',,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,39,,,,,,,39,,,,,,,,,,,,,,,39',
'39,,,,,,,,,,,,,,,,,39,,,,,,,,,,39,39,,,,,,,,,,,,,,,,,,,,39,39,,,,,,',
',,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,39,,,,39,,',
',,,,,,39,,,,,,,,,,,39,,,,,,,,39,,39,,,39' ]
        racc_goto_check = arr = ::Array.new(2913, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   197,   277,  -232,   195,  -437,  -604,  -551,   nil,     6,
   595,    13,   152,    11,   157,    37,    -2,    12,   170,  1285,
   881,   -70,     7,  -292,  1735,   119,   -84,    69,  1563,     6,
   nil,    53,  -284,   -35,    40,  -117,  -319,  -280,  -599,  2040,
    -4,    15,   nil,   -21,    43,   906,  -375,   -96,   -22,   -24,
   nil,   nil,     2,     6,  -341,   -10,   143,    29,  -227,     7,
     0,  -422,  -120,     8,  -292,   -32,   nil,  -243,  -497,   nil,
   nil,   nil,   nil,   nil,   nil,    58,    -5,    74,   nil,  -279,
  -624,  -464,  -335,   100,  -310,    -3,  -413,    85,   -97,    78,
  -214,    27,  -556,    26,  -551,  -253,  -652,   109,  -475,   -20,
  -460,  -665,   116,  -290,   -63,  -292,  -597,  -432,  -520,   nil,
  -159,  -498,   nil,   nil,    17,  -427,    23,  -421,  -515,  -719,
  -366,  -480,  -587,   nil,   nil,   118,    73,    72,   157,    22,
  -104,   156,  -363,  -177,  -174,    98,  -419,  -443,   nil,  -544,
  -640,  -530,  -410,  -538,  -679,   nil,   nil,   -21,  -383 ]

racc_goto_default = [
   nil,   nil,   447,   nil,   nil,   nil,   756,   nil,    40,   nil,
    49,    58,   338,   nil,   nil,   nil,   147,    85,    89,   148,
   167,   nil,   137,   nil,   138,    33,   nil,   nil,    45,    50,
    56,   nil,    64,   554,   nil,   nil,   nil,   nil,   nil,   105,
    12,   nil,    22,    25,    34,   140,   418,   nil,   246,   370,
   221,   251,    70,    75,   nil,   nil,    92,   335,   nil,   332,
   548,   549,   409,   588,   nil,   nil,   127,   nil,   nil,    61,
    67,    71,    76,    80,    84,    88,   nil,   126,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   486,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   306,
   nil,   nil,   364,   130,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    44,    48,    53,   nil,   nil,   nil,   nil,
   360,   nil,   nil,   nil,   nil,   nil,   nil,   616,   617,   620,
   623,   nil,   812,   611,   612,   613,   614,   nil,   146 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 145, :_reduce_103,
  1, 145, :_reduce_none,
  1, 146, :_reduce_105,
  0, 186, :_reduce_106,
  4, 146, :_reduce_107,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_174,
  5, 160, :_reduce_175,
  3, 160, :_reduce_176,
  6, 160, :_reduce_177,
  5, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  5, 160, :_reduce_181,
  4, 160, :_reduce_182,
  3, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  3, 160, :_reduce_191,
  4, 160, :_reduce_192,
  4, 160, :_reduce_193,
  2, 160, :_reduce_194,
  2, 160, :_reduce_195,
  3, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  3, 160, :_reduce_208,
  2, 160, :_reduce_209,
  2, 160, :_reduce_210,
  3, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  3, 160, :_reduce_215,
  5, 160, :_reduce_216,
  1, 160, :_reduce_none,
  1, 156, :_reduce_218,
  1, 153, :_reduce_none,
  2, 153, :_reduce_220,
  2, 153, :_reduce_221,
  5, 153, :_reduce_222,
  2, 153, :_reduce_223,
  3, 153, :_reduce_224,
  3, 192, :_reduce_225,
  4, 192, :_reduce_226,
  4, 192, :_reduce_227,
  6, 192, :_reduce_228,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 163, :_reduce_231,
  2, 163, :_reduce_232,
  5, 163, :_reduce_233,
  2, 163, :_reduce_234,
  5, 163, :_reduce_235,
  4, 163, :_reduce_236,
  7, 163, :_reduce_237,
  3, 163, :_reduce_238,
  1, 163, :_reduce_none,
  4, 196, :_reduce_240,
  3, 196, :_reduce_241,
  5, 196, :_reduce_242,
  7, 196, :_reduce_243,
  2, 196, :_reduce_244,
  5, 196, :_reduce_245,
  4, 196, :_reduce_246,
  6, 196, :_reduce_247,
  7, 196, :_reduce_248,
  9, 196, :_reduce_249,
  3, 196, :_reduce_250,
  1, 196, :_reduce_none,
  0, 198, :_reduce_252,
  2, 166, :_reduce_253,
  1, 197, :_reduce_none,
  0, 199, :_reduce_255,
  3, 197, :_reduce_256,
  0, 200, :_reduce_257,
  4, 197, :_reduce_258,
  2, 195, :_reduce_259,
  2, 194, :_reduce_260,
  1, 194, :_reduce_none,
  1, 189, :_reduce_262,
  3, 189, :_reduce_263,
  3, 155, :_reduce_264,
  4, 155, :_reduce_265,
  2, 155, :_reduce_266,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_275,
  0, 221, :_reduce_276,
  4, 188, :_reduce_277,
  0, 222, :_reduce_278,
  5, 188, :_reduce_279,
  3, 188, :_reduce_280,
  3, 188, :_reduce_281,
  2, 188, :_reduce_282,
  4, 188, :_reduce_283,
  3, 188, :_reduce_284,
  3, 188, :_reduce_285,
  1, 188, :_reduce_286,
  4, 188, :_reduce_287,
  3, 188, :_reduce_288,
  1, 188, :_reduce_289,
  5, 188, :_reduce_290,
  2, 188, :_reduce_291,
  1, 188, :_reduce_none,
  2, 188, :_reduce_293,
  6, 188, :_reduce_294,
  6, 188, :_reduce_295,
  0, 223, :_reduce_296,
  0, 224, :_reduce_297,
  7, 188, :_reduce_298,
  0, 225, :_reduce_299,
  0, 226, :_reduce_300,
  7, 188, :_reduce_301,
  5, 188, :_reduce_302,
  4, 188, :_reduce_303,
  5, 188, :_reduce_304,
  0, 227, :_reduce_305,
  0, 228, :_reduce_306,
  9, 188, :_reduce_307,
  0, 229, :_reduce_308,
  0, 230, :_reduce_309,
  7, 188, :_reduce_310,
  0, 231, :_reduce_311,
  0, 232, :_reduce_312,
  0, 233, :_reduce_313,
  9, 188, :_reduce_314,
  0, 234, :_reduce_315,
  0, 235, :_reduce_316,
  6, 188, :_reduce_317,
  0, 236, :_reduce_318,
  6, 188, :_reduce_319,
  0, 237, :_reduce_320,
  0, 238, :_reduce_321,
  9, 188, :_reduce_322,
  1, 188, :_reduce_323,
  1, 188, :_reduce_324,
  1, 188, :_reduce_325,
  1, 188, :_reduce_326,
  1, 152, :_reduce_327,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  2, 211, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 212, :_reduce_none,
  5, 212, :_reduce_336,
  1, 138, :_reduce_none,
  2, 138, :_reduce_338,
  1, 215, :_reduce_none,
  1, 215, :_reduce_340,
  1, 239, :_reduce_341,
  3, 239, :_reduce_342,
  1, 240, :_reduce_343,
  2, 240, :_reduce_344,
  4, 240, :_reduce_345,
  7, 240, :_reduce_346,
  6, 240, :_reduce_347,
  4, 240, :_reduce_348,
  3, 240, :_reduce_349,
  5, 240, :_reduce_350,
  4, 240, :_reduce_351,
  2, 240, :_reduce_352,
  1, 240, :_reduce_353,
  2, 240, :_reduce_354,
  1, 168, :_reduce_none,
  2, 168, :_reduce_356,
  1, 168, :_reduce_357,
  3, 168, :_reduce_358,
  0, 242, :_reduce_359,
  0, 243, :_reduce_360,
  6, 241, :_reduce_361,
  2, 164, :_reduce_362,
  4, 164, :_reduce_363,
  4, 164, :_reduce_364,
  0, 245, :_reduce_365,
  3, 210, :_reduce_366,
  4, 210, :_reduce_367,
  4, 210, :_reduce_368,
  3, 210, :_reduce_369,
  2, 210, :_reduce_370,
  1, 210, :_reduce_371,
  0, 246, :_reduce_372,
  0, 247, :_reduce_373,
  6, 209, :_reduce_374,
  0, 248, :_reduce_375,
  0, 249, :_reduce_376,
  6, 209, :_reduce_377,
  0, 252, :_reduce_378,
  6, 214, :_reduce_379,
  1, 250, :_reduce_none,
  4, 250, :_reduce_381,
  2, 250, :_reduce_382,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  6, 137, :_reduce_385,
  0, 137, :_reduce_386,
  1, 253, :_reduce_387,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 254, :_reduce_390,
  1, 254, :_reduce_none,
  2, 139, :_reduce_392,
  1, 139, :_reduce_none,
  1, 201, :_reduce_394,
  1, 201, :_reduce_395,
  1, 201, :_reduce_none,
  1, 202, :_reduce_397,
  1, 256, :_reduce_none,
  2, 256, :_reduce_399,
  3, 257, :_reduce_400,
  1, 257, :_reduce_401,
  3, 203, :_reduce_402,
  3, 204, :_reduce_403,
  3, 205, :_reduce_404,
  3, 205, :_reduce_405,
  1, 260, :_reduce_406,
  3, 260, :_reduce_407,
  1, 261, :_reduce_none,
  2, 261, :_reduce_409,
  3, 206, :_reduce_410,
  3, 206, :_reduce_411,
  1, 263, :_reduce_412,
  3, 263, :_reduce_413,
  1, 258, :_reduce_414,
  2, 258, :_reduce_415,
  1, 259, :_reduce_416,
  2, 259, :_reduce_417,
  1, 262, :_reduce_418,
  0, 265, :_reduce_419,
  3, 262, :_reduce_420,
  0, 266, :_reduce_421,
  4, 262, :_reduce_422,
  1, 264, :_reduce_423,
  1, 264, :_reduce_424,
  1, 264, :_reduce_425,
  1, 264, :_reduce_none,
  2, 184, :_reduce_427,
  1, 184, :_reduce_428,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  3, 185, :_reduce_433,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  2, 255, :_reduce_436,
  2, 255, :_reduce_437,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_443,
  1, 177, :_reduce_444,
  1, 177, :_reduce_445,
  1, 177, :_reduce_446,
  1, 177, :_reduce_447,
  1, 177, :_reduce_448,
  1, 207, :_reduce_449,
  1, 151, :_reduce_450,
  1, 154, :_reduce_451,
  1, 154, :_reduce_452,
  1, 216, :_reduce_453,
  0, 268, :_reduce_454,
  4, 216, :_reduce_455,
  2, 216, :_reduce_456,
  4, 218, :_reduce_457,
  2, 218, :_reduce_458,
  6, 269, :_reduce_459,
  4, 269, :_reduce_460,
  4, 269, :_reduce_461,
  2, 269, :_reduce_462,
  4, 269, :_reduce_463,
  2, 269, :_reduce_464,
  2, 269, :_reduce_465,
  1, 269, :_reduce_466,
  0, 269, :_reduce_467,
  1, 275, :_reduce_468,
  1, 275, :_reduce_469,
  1, 275, :_reduce_470,
  1, 275, :_reduce_471,
  1, 275, :_reduce_472,
  1, 270, :_reduce_473,
  3, 270, :_reduce_474,
  3, 276, :_reduce_475,
  1, 271, :_reduce_476,
  3, 271, :_reduce_477,
  1, 277, :_reduce_none,
  1, 277, :_reduce_none,
  2, 272, :_reduce_480,
  1, 272, :_reduce_481,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  2, 274, :_reduce_484,
  2, 273, :_reduce_485,
  0, 273, :_reduce_486,
  1, 219, :_reduce_none,
  0, 279, :_reduce_488,
  5, 219, :_reduce_489,
  1, 208, :_reduce_490,
  2, 208, :_reduce_491,
  2, 208, :_reduce_492,
  1, 191, :_reduce_none,
  3, 191, :_reduce_494,
  3, 280, :_reduce_495,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  0, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 217, :_reduce_515,
  1, 217, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_518,
  0, 142, :_reduce_519 ]

racc_reduce_n = 520

racc_shift_n = 927

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tLBRACK2 => 91,
  :tRBRACK => 92,
  :tLBRACE => 93,
  :tLBRACE_ARG => 94,
  :tSTAR => 95,
  :tSTAR2 => 96,
  :tAMPER => 97,
  :tAMPER2 => 98,
  :tTILDE => 99,
  :tPERCENT => 100,
  :tDIVIDE => 101,
  :tPLUS => 102,
  :tMINUS => 103,
  :tLT => 104,
  :tGT => 105,
  :tPIPE => 106,
  :tBANG => 107,
  :tCARET => 108,
  :tLCURLY => 109,
  :tRCURLY => 110,
  :tBACK_REF2 => 111,
  :tSYMBEG => 112,
  :tSTRING_BEG => 113,
  :tXSTRING_BEG => 114,
  :tREGEXP_BEG => 115,
  :tWORDS_BEG => 116,
  :tQWORDS_BEG => 117,
  :tSTRING_DBEG => 118,
  :tSTRING_DVAR => 119,
  :tSTRING_END => 120,
  :tSTRING => 121,
  :tSYMBOL => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tLAST_TOKEN => 129,
  :tEQL => 130,
  :tLOWEST => 131 }

racc_nt_base = 132

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "block_par",
  "block_var",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = block_append val[0], val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_22(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = node_assign val[0], val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_30(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_45(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_46(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]

                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      raise "no2"

                      if val[4] then
                        block_dup_check result, val[4]

                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      raise "no3"

                      if val[4] then
                        block_dup_check result, val[4]

                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = aryset val[0], val[2]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_80(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = aryset val[0], val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 101 omitted

# reduce 102 omitted

def _reduce_103(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_106(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

def _reduce_174(val, _values, result)
                      result = node_assign val[0], val[2]
                    
    result
end

def _reduce_175(val, _values, result)
                      result = node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
end

def _reduce_176(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_177(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2][0] = :arglist if val[2]
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_180(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_181(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_182(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_183(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_184(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_185(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_194(val, _values, result)
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@"
                      end
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", argl(val[2])))
                    
    result
end

def _reduce_207(val, _values, result)
                      result = get_match_node val[0], val[2]
                    
    result
end

def _reduce_208(val, _values, result)
                      result = s(:not, get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_209(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_210(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_211(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      lexer.tern.pop
                      result = s(:if, val[0], val[2], val[4])
                    
    result
end

# reduce 217 omitted

def _reduce_218(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 219 omitted

def _reduce_220(val, _values, result)
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_222(val, _values, result)
                      result = arg_concat val[0], val[3]
                    
    result
end

def _reduce_223(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_224(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_225(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_226(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_227(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
end

def _reduce_228(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
end

# reduce 229 omitted

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = arg_concat val[0], val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = arg_blk_pass result, val[1]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = arg_blk_pass result, val[3]
                    
    result
end

def _reduce_237(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = arg_concat val[0], val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      args = list_prepend val[0], val[2]
                      result = arg_blk_pass args, val[3]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = arg_blk_pass val[0], val[2]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = arg_concat s(:array, val[0]), val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = arg_blk_pass result, val[1]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = arg_blk_pass result, val[3]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values))
                      result = arg_blk_pass result, val[5]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = arg_concat s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = arg_blk_pass result, val[8]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_253(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_256(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = nil
                    
    result
end

def _reduce_257(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_258(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = arg_concat val[0], val[3]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_276(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_277(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_278(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_279(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_280(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_283(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_284(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_291(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 292 omitted

def _reduce_293(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter

                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_296(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_297(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_298(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_299(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_case val[1], val[3]
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_case nil, val[2]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_case nil, val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_308(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_309(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (in_def || in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_311(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_312(val, _values, result)
                      result = in_def
                      self.in_def = false
                    
    result
end

def _reduce_313(val, _values, result)
                      result = in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_315(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_316(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        in_def or in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_318(val, _values, result)
                      result = lexer.lineno, self.in_def

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                    
    result
end

def _reduce_319(val, _values, result)
                      line, in_def = val[2]

                      result = new_defn val
                      result[2].line line

                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_321(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_defs val

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 339 omitted

def _reduce_340(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

def _reduce_341(val, _values, result)
                      result = s(:array, clean_mlhs(val[0]))
                    
    result
end

def _reduce_342(val, _values, result)
                      result = list_append val[0], clean_mlhs(val[2])
                    
    result
end

def _reduce_343(val, _values, result)
                      result = block_var18 val[0], nil, nil
                    
    result
end

def _reduce_344(val, _values, result)
                      result = block_var18 val[0], nil, nil
                    
    result
end

def _reduce_345(val, _values, result)
                      result = block_var18 val[0], nil, val[3]
                    
    result
end

def _reduce_346(val, _values, result)
                      result = block_var18 val[0], val[3], val[6]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = block_var18 val[0], s(:splat), val[5]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = block_var18 val[0], val[3], nil
                    
    result
end

def _reduce_349(val, _values, result)
                      result = block_var18 val[0], s(:splat), nil
                    
    result
end

def _reduce_350(val, _values, result)
                      result = block_var18 nil, val[1], val[4]
                    
    result
end

def _reduce_351(val, _values, result)
                      result = block_var18 nil, s(:splat), val[3]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = block_var18 nil, val[1], nil
                    
    result
end

def _reduce_353(val, _values, result)
                      result = block_var18 nil, s(:splat), nil
                    
    result
end

def _reduce_354(val, _values, result)
                      result = block_var18 nil, nil, val[1]
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = 0
                      self.lexer.command_start = true
                    
    result
end

def _reduce_357(val, _values, result)
                      result = 0
                      self.lexer.command_start = true
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[1]
                      self.lexer.command_start = true
                    
    result
end

def _reduce_359(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_360(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_361(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_362(val, _values, result)
                      block_dup_check val[0], val[1]

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_366(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_367(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_368(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_370(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_372(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_373(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_374(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_375(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_376(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_377(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_379(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 380 omitted

def _reduce_381(val, _values, result)
                      result = list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

# reduce 383 omitted

# reduce 384 omitted

def _reduce_385(val, _values, result)
                      klasses, var, body, rest = val[1], val[2], val[4], val[5]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_386(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_387(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 388 omitted

# reduce 389 omitted

def _reduce_390(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_395(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 398 omitted

def _reduce_399(val, _values, result)
                      result = literal_concat val[0], val[1]
                    
    result
end

def _reduce_400(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_402(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_406(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_407(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0] << word
                    
    result
end

# reduce 408 omitted

def _reduce_409(val, _values, result)
                      result = literal_concat val[0], val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_411(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_413(val, _values, result)
                      result = val[0] << s(:str, val[1])
                    
    result
end

def _reduce_414(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_415(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_416(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_417(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_418(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_419(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_420(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [lexer.lex_strterm, lexer.brace_nest, lexer.string_nest]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.cond.push false
                      lexer.cmdarg.push false

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_422(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_423(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_424(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_425(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_428(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 429 omitted

# reduce 430 omitted

# reduce 431 omitted

# reduce 432 omitted

def _reduce_433(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_437(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 438 omitted

# reduce 439 omitted

# reduce 440 omitted

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_444(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_445(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_446(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_447(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_448(val, _values, result)
 result = s(:lit, lexer.src.current_line) 
    result
end

def _reduce_449(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_450(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_451(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_452(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_453(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_454(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_456(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_460(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_461(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_462(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_463(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_464(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_465(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_466(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_467(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_468(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_469(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_470(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_471(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

def _reduce_472(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_474(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_475(val, _values, result)
                      result = assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = block_append val[0], val[2]
                    
    result
end

# reduce 478 omitted

# reduce 479 omitted

def _reduce_480(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_481(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 482 omitted

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_486(val, _values, result)
                      result = nil
                    
    result
end

# reduce 487 omitted

def _reduce_488(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_489(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_490(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_491(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_492(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
end

# reduce 493 omitted

def _reduce_494(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_495(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

def _reduce_515(val, _values, result)
 yyerrok 
    result
end

# reduce 516 omitted

# reduce 517 omitted

def _reduce_518(val, _values, result)
 yyerrok 
    result
end

def _reduce_519(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby18Parser
