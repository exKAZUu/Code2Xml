using Code2Xml.Core.Antlr;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C.g 2012-10-13 00:22:01

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
/** ANSI C ANTLR v3 grammar

Translated from Jutta Degener's 1995 ANSI C yacc grammar by Terence Parr
July 2006.  The lexical rules were taken from the Java grammar.

Jutta says: "In 1985, Jeff Lee published his Yacc grammar (which
is accompanied by a matching Lex specification) for the April 30, 1985 draft
version of the ANSI C standard.  Tom Stockfisch reposted it to net.sources in
1987; that original, as mentioned in the answer to question 17.25 of the
comp.lang.c FAQ, can be ftp'ed from ftp.uu.net,
   file usenet/net.sources/ansi.c.grammar.Z.
I intend to keep this version as close to the current C Standard grammar as
possible; please let me know if you discover discrepancies. Jutta Degener, 1995"

Generally speaking, you need symbol table info to parse C; typedefs
define types and then IDENTIFIERS are either types or plain IDs.  I'm doing
the min necessary here tracking only type names.  This is a good example
of the global scope (called Symbols).  Every rule that declares its usage
of Symbols pushes a new copy on the stack effectively creating a new
symbol scope.  Also note rule declaration declares a rule scope that
lets any invoked rule see isTypedef boolean.  It's much easier than
passing that info down as parameters.  Very clean.  Rule
direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

I have only tested this on a single file, though it is 3500 lines.

This grammar requires ANTLR v3.0.1 or higher.

Terence Parr
July 2006
*/
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARACTER_LITERAL", "COMMENT", "DECIMAL_LITERAL", "EscapeSequence", "Exponent", "FLOATING_POINT_LITERAL", "FloatTypeSuffix", "HEX_LITERAL", "HexDigit", "IDENTIFIER", "IntegerTypeSuffix", "LETTER", "LINE_COMMAND", "LINE_COMMENT", "OCTAL_LITERAL", "OctalEscape", "STRING_LITERAL", "UnicodeEscape", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'...'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'__alignof__'", "'__asm__'", "'__attribute__'", "'__builtin_offsetof'", "'__builtin_va_arg'", "'__builtin_va_list'", "'__const'", "'__extension__'", "'__inline'", "'__inline__'", "'__restrict__'", "'__volatile__'", "'asm'", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'typeof'", "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int CHARACTER_LITERAL=4;
	public const int COMMENT=5;
	public const int DECIMAL_LITERAL=6;
	public const int EscapeSequence=7;
	public const int Exponent=8;
	public const int FLOATING_POINT_LITERAL=9;
	public const int FloatTypeSuffix=10;
	public const int HEX_LITERAL=11;
	public const int HexDigit=12;
	public const int IDENTIFIER=13;
	public const int IntegerTypeSuffix=14;
	public const int LETTER=15;
	public const int LINE_COMMAND=16;
	public const int LINE_COMMENT=17;
	public const int OCTAL_LITERAL=18;
	public const int OctalEscape=19;
	public const int STRING_LITERAL=20;
	public const int UnicodeEscape=21;
	public const int WS=22;

	protected sealed partial class Symbols_scope
	{
		public // only track types in order to get parser working
		    HashSet<string> types;

		public Symbols_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void Symbols_scopeInit( Symbols_scope scope );
	partial void Symbols_scopeAfter( Symbols_scope scope );
	protected readonly ListStack<Symbols_scope> Symbols_stack = new ListStack<Symbols_scope>();

	public CParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[298+1];


		XmlTreeAdaptor treeAdaptor = default(XmlTreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor);

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CParser.tokenNames; } }
	public override string GrammarFileName { get { return "C.g"; } }


	    boolean isTypeName(String name) {
	        for (int i = Symbols_stack.size()-1; i>=0; i--) {
	            Symbols_scope scope = (Symbols_scope)Symbols_stack.get(i);
	            if ( scope.types.contains(name) ) {
	                return true;
	            }
	        }
	        return false;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_translation_unit();
	partial void LeaveRule_translation_unit();

	// $ANTLR start "translation_unit"
	// C.g:59:1: translation_unit : ( external_declaration )+ ;
	[GrammarRule("translation_unit")]
	public XAstParserRuleReturnScope translation_unit()
	{
		EnterRule_translation_unit();
		EnterRule("translation_unit", 1);
		var retval = new XAstParserRuleReturnScope("translation_unit");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int translation_unit_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope external_declaration1 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "translation_unit");
		DebugLocation(59, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C.g:64:5: ( ( external_declaration )+ )
			DebugEnterAlt(1);
			// C.g:64:7: ( external_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(64, 7);
			// C.g:64:7: ( external_declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENTIFIER||LA1_0==30||LA1_0==32||LA1_0==65||(LA1_0>=68 && LA1_0<=74)||LA1_0==76||(LA1_0>=79 && LA1_0<=80)||LA1_0==84||(LA1_0>=86 && LA1_0<=88)||(LA1_0>=92 && LA1_0<=96)||(LA1_0>=98 && LA1_0<=99)||(LA1_0>=101 && LA1_0<=102)||(LA1_0>=104 && LA1_0<=109)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:64:7: external_declaration
					{
					DebugLocation(64, 7);
					PushFollow(Follow._external_declaration_in_translation_unit89);
					external_declaration1=external_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, external_declaration1.Tree, external_declaration1, retval);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("translation_unit", 1);
			LeaveRule("translation_unit", 1);
			LeaveRule_translation_unit();
			if (state.backtracking > 0) { Memoize(input, 1, translation_unit_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(65, 4);
		} finally { DebugExitRule(GrammarFileName, "translation_unit"); }
		return retval;

	}
	// $ANTLR end "translation_unit"

	partial void EnterRule_external_declaration();
	partial void LeaveRule_external_declaration();

	// $ANTLR start "external_declaration"
	// C.g:81:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration );
	[GrammarRule("external_declaration")]
	public XAstParserRuleReturnScope external_declaration()
	{
		EnterRule_external_declaration();
		EnterRule("external_declaration", 2);
		var retval = new XAstParserRuleReturnScope("external_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int external_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope function_definition2 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration3 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "external_declaration");
		DebugLocation(81, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C.g:83:5: ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==76||LA2_0==87||LA2_0==95||LA2_0==101))
			{
				int LA2_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==108))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==79))
			{
				int LA2_3 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==98))
			{
				int LA2_4 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==93))
			{
				int LA2_5 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==94))
			{
				int LA2_6 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==88))
			{
				int LA2_7 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==84))
			{
				int LA2_8 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==99))
			{
				int LA2_9 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==107))
			{
				int LA2_10 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==102||LA2_0==106))
			{
				int LA2_11 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==86))
			{
				int LA2_12 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==IDENTIFIER))
			{
				int LA2_13 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if (((isTypeName(input.LT(1).getText()))))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==105))
			{
				int LA2_14 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==69||(LA2_0>=73 && LA2_0<=74)||LA2_0==80||LA2_0==96||LA2_0==109))
			{
				int LA2_15 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==68||(LA2_0>=71 && LA2_0<=72)||LA2_0==92))
			{
				int LA2_16 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 16, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==65))
			{
				int LA2_17 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 17, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==70))
			{
				int LA2_18 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 18, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==32) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==30) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==104))
			{
				alt2 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:83:7: ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(83, 65);
				PushFollow(Follow._function_definition_in_external_declaration131);
				function_definition2=function_definition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, function_definition2.Tree, function_definition2, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:84:7: declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(84, 7);
				PushFollow(Follow._declaration_in_external_declaration139);
				declaration3=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration3.Tree, declaration3, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("external_declaration", 2);
			LeaveRule("external_declaration", 2);
			LeaveRule_external_declaration();
			if (state.backtracking > 0) { Memoize(input, 2, external_declaration_StartIndex); }

		}
		DebugLocation(85, 4);
		} finally { DebugExitRule(GrammarFileName, "external_declaration"); }
		return retval;

	}
	// $ANTLR end "external_declaration"

	partial void EnterRule_function_definition();
	partial void LeaveRule_function_definition();

	// $ANTLR start "function_definition"
	// C.g:87:1: function_definition : ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) ;
	[GrammarRule("function_definition")]
	public XAstParserRuleReturnScope function_definition()
	{
		EnterRule_function_definition();
		EnterRule("function_definition", 3);
		var retval = new XAstParserRuleReturnScope("function_definition");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int function_definition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers4 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator5 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration6 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement7 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement8 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "function_definition");
		DebugLocation(87, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C.g:92:5: ( ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) )
			DebugEnterAlt(1);
			// C.g:92:7: ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(92, 7);
			// C.g:92:7: ( declaration_specifiers )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==65||(LA3_0>=68 && LA3_0<=74)||LA3_0==76||(LA3_0>=79 && LA3_0<=80)||LA3_0==84||(LA3_0>=86 && LA3_0<=88)||(LA3_0>=92 && LA3_0<=96)||(LA3_0>=98 && LA3_0<=99)||(LA3_0>=101 && LA3_0<=102)||(LA3_0>=105 && LA3_0<=109)))
			{
				alt3 = 1;
			}
			else if ((LA3_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt3 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA3_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 30:
					{
					int LA3_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 76:
				case 87:
				case 95:
				case 101:
					{
					int LA3_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 108:
					{
					int LA3_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 79:
					{
					int LA3_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 98:
					{
					int LA3_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 93:
					{
					int LA3_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 94:
					{
					int LA3_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 88:
					{
					int LA3_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 84:
					{
					int LA3_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 99:
					{
					int LA3_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 107:
					{
					int LA3_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 102:
				case 106:
					{
					int LA3_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 86:
					{
					int LA3_35 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 105:
					{
					int LA3_36 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 69:
				case 73:
				case 74:
				case 80:
				case 96:
				case 109:
					{
					int LA3_37 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 68:
				case 71:
				case 72:
				case 92:
					{
					int LA3_38 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 65:
					{
					int LA3_39 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 70:
					{
					int LA3_40 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:92:7: declaration_specifiers
				{
				DebugLocation(92, 7);
				PushFollow(Follow._declaration_specifiers_in_function_definition167);
				declaration_specifiers4=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers4.Tree, declaration_specifiers4, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(92, 31);
			PushFollow(Follow._declarator_in_function_definition170);
			declarator5=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator5.Tree, declarator5, retval);
			DebugLocation(93, 9);
			// C.g:93:9: ( ( declaration )+ compound_statement | compound_statement )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==IDENTIFIER||LA5_0==65||(LA5_0>=68 && LA5_0<=74)||LA5_0==76||(LA5_0>=79 && LA5_0<=80)||LA5_0==84||(LA5_0>=86 && LA5_0<=88)||(LA5_0>=92 && LA5_0<=96)||(LA5_0>=98 && LA5_0<=99)||(LA5_0>=101 && LA5_0<=102)||(LA5_0>=104 && LA5_0<=109)))
			{
				alt5 = 1;
			}
			else if ((LA5_0==111))
			{
				alt5 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:93:11: ( declaration )+ compound_statement
				{
				DebugLocation(93, 11);
				// C.g:93:11: ( declaration )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENTIFIER||LA4_0==65||(LA4_0>=68 && LA4_0<=74)||LA4_0==76||(LA4_0>=79 && LA4_0<=80)||LA4_0==84||(LA4_0>=86 && LA4_0<=88)||(LA4_0>=92 && LA4_0<=96)||(LA4_0>=98 && LA4_0<=99)||(LA4_0>=101 && LA4_0<=102)||(LA4_0>=104 && LA4_0<=109)))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:93:11: declaration
						{
						DebugLocation(93, 11);
						PushFollow(Follow._declaration_in_function_definition182);
						declaration6=declaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, declaration6.Tree, declaration6, retval);

						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(93, 24);
				PushFollow(Follow._compound_statement_in_function_definition185);
				compound_statement7=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement7.Tree, compound_statement7, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:94:11: compound_statement
				{
				DebugLocation(94, 11);
				PushFollow(Follow._compound_statement_in_function_definition198);
				compound_statement8=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement8.Tree, compound_statement8, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_definition", 3);
			LeaveRule("function_definition", 3);
			LeaveRule_function_definition();
			if (state.backtracking > 0) { Memoize(input, 3, function_definition_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(96, 4);
		} finally { DebugExitRule(GrammarFileName, "function_definition"); }
		return retval;

	}
	// $ANTLR end "function_definition"

	protected sealed partial class declaration_scope
	{
		public boolean isTypedef;

		public declaration_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void declaration_scopeInit( declaration_scope scope );
	partial void declaration_scopeAfter( declaration_scope scope );
	protected readonly ListStack<declaration_scope> declaration_stack = new ListStack<declaration_scope>();

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// C.g:98:1: declaration : ( ( gcc_extension_specifier )? 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' );
	[GrammarRule("declaration")]
	public XAstParserRuleReturnScope declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 4);
		var retval = new XAstParserRuleReturnScope("declaration");
		declaration_stack.Push(new declaration_scope(this));declaration_scopeInit(declaration_stack.Peek());
		
		retval.Start = (IToken)input.LT(1);
		int declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal10 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken char_literal16 = default(IToken);
		XAstParserRuleReturnScope gcc_extension_specifier9 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration_specifiers11 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list12 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration_specifiers14 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list15 = default(XAstParserRuleReturnScope);

		object string_literal10_tree = default(object);
		object char_literal13_tree = default(object);
		object char_literal16_tree = default(object);

		  declaration_stack.Peek().isTypedef =  false;

		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(98, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C.g:105:5: ( ( gcc_extension_specifier )? 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 70:
				{
				int LA9_1 = input.LA(2);

				if ((LA9_1==104))
				{
					alt9 = 1;
				}
				else if ((LA9_1==IDENTIFIER||LA9_1==30||LA9_1==32||LA9_1==47||LA9_1==65||(LA9_1>=68 && LA9_1<=74)||LA9_1==76||(LA9_1>=79 && LA9_1<=80)||LA9_1==84||(LA9_1>=86 && LA9_1<=88)||(LA9_1>=92 && LA9_1<=96)||(LA9_1>=98 && LA9_1<=99)||(LA9_1>=101 && LA9_1<=102)||(LA9_1>=105 && LA9_1<=109)))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 104:
				{
				alt9 = 1;
				}
				break;
			case IDENTIFIER:
			case 65:
			case 68:
			case 69:
			case 71:
			case 72:
			case 73:
			case 74:
			case 76:
			case 79:
			case 80:
			case 84:
			case 86:
			case 87:
			case 88:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 98:
			case 99:
			case 101:
			case 102:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
				{
				alt9 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:105:7: ( gcc_extension_specifier )? 'typedef' ( declaration_specifiers )? init_declarator_list ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(105, 7);
				// C.g:105:7: ( gcc_extension_specifier )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==70))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:105:7: gcc_extension_specifier
					{
					DebugLocation(105, 7);
					PushFollow(Follow._gcc_extension_specifier_in_declaration238);
					gcc_extension_specifier9=gcc_extension_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_extension_specifier9.Tree, gcc_extension_specifier9, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(105, 32);
				string_literal10=(IToken)Match(input,104,Follow._104_in_declaration241); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal10_tree = (object)adaptor.Create(string_literal10, retval);
				adaptor.AddChild(root_0, string_literal10_tree);
				}
				DebugLocation(105, 42);
				// C.g:105:42: ( declaration_specifiers )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==65||(LA7_0>=68 && LA7_0<=74)||LA7_0==76||(LA7_0>=79 && LA7_0<=80)||LA7_0==84||(LA7_0>=86 && LA7_0<=88)||(LA7_0>=92 && LA7_0<=96)||(LA7_0>=98 && LA7_0<=99)||(LA7_0>=101 && LA7_0<=102)||(LA7_0>=105 && LA7_0<=109)))
				{
					alt7 = 1;
				}
				else if ((LA7_0==IDENTIFIER))
				{
					switch (input.LA(2))
					{
					case IDENTIFIER:
					case 32:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 76:
					case 79:
					case 80:
					case 84:
					case 86:
					case 87:
					case 88:
					case 92:
					case 93:
					case 94:
					case 95:
					case 96:
					case 98:
					case 99:
					case 101:
					case 102:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
						{
						alt7 = 1;
						}
						break;
					case 30:
						{
						int LA7_23 = input.LA(3);

						if ((((EvaluatePredicate(synpred9_C_fragment)&&EvaluatePredicate(synpred9_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt7 = 1;
						}
						}
						break;
					case 65:
						{
						int LA7_39 = input.LA(3);

						if ((((EvaluatePredicate(synpred9_C_fragment)&&EvaluatePredicate(synpred9_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt7 = 1;
						}
						}
						break;
					}

				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:105:42: declaration_specifiers
					{
					DebugLocation(105, 42);
					PushFollow(Follow._declaration_specifiers_in_declaration243);
					declaration_specifiers11=declaration_specifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers11.Tree, declaration_specifiers11, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(105, 66);
				if (state.backtracking == 0)
				{
					declaration_stack.Peek().isTypedef = true;
				}
				DebugLocation(106, 7);
				PushFollow(Follow._init_declarator_list_in_declaration256);
				init_declarator_list12=init_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list12.Tree, init_declarator_list12, retval);
				DebugLocation(106, 28);
				char_literal13=(IToken)Match(input,47,Follow._47_in_declaration258); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal13_tree = (object)adaptor.Create(char_literal13, retval);
				adaptor.AddChild(root_0, char_literal13_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:107:7: declaration_specifiers ( init_declarator_list )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(107, 7);
				PushFollow(Follow._declaration_specifiers_in_declaration267);
				declaration_specifiers14=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers14.Tree, declaration_specifiers14, retval);
				DebugLocation(107, 30);
				// C.g:107:30: ( init_declarator_list )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==IDENTIFIER||LA8_0==30||LA8_0==32))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:107:30: init_declarator_list
					{
					DebugLocation(107, 30);
					PushFollow(Follow._init_declarator_list_in_declaration269);
					init_declarator_list15=init_declarator_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list15.Tree, init_declarator_list15, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(107, 52);
				char_literal16=(IToken)Match(input,47,Follow._47_in_declaration272); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal16_tree = (object)adaptor.Create(char_literal16, retval);
				adaptor.AddChild(root_0, char_literal16_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 4);
			LeaveRule("declaration", 4);
			LeaveRule_declaration();
			if (state.backtracking > 0) { Memoize(input, 4, declaration_StartIndex); }

			declaration_scopeAfter(declaration_stack.Peek());declaration_stack.Pop();
		}
		DebugLocation(108, 4);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_declaration_specifiers();
	partial void LeaveRule_declaration_specifiers();

	// $ANTLR start "declaration_specifiers"
	// C.g:110:1: declaration_specifiers : ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+ ;
	[GrammarRule("declaration_specifiers")]
	public XAstParserRuleReturnScope declaration_specifiers()
	{
		EnterRule_declaration_specifiers();
		EnterRule("declaration_specifiers", 5);
		var retval = new XAstParserRuleReturnScope("declaration_specifiers");
		
		retval.Start = (IToken)input.LT(1);
		int declaration_specifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope storage_class_specifier17 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier18 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_qualifier19 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_function_specifier20 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_declaration_specifier21 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declaration_specifiers");
		DebugLocation(110, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C.g:111:5: ( ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+ )
			DebugEnterAlt(1);
			// C.g:111:9: ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(111, 9);
			// C.g:111:9: ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=6;
				try { DebugEnterDecision(10, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA10_2 = input.LA(2);

					if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred13_C_fragment))))
					{
						alt10 = 2;
					}


					}
					break;
				case 76:
				case 87:
				case 95:
				case 101:
					{
					alt10 = 1;
					}
					break;
				case 79:
				case 84:
				case 86:
				case 88:
				case 93:
				case 94:
				case 98:
				case 99:
				case 102:
				case 105:
				case 106:
				case 107:
				case 108:
					{
					alt10 = 2;
					}
					break;
				case 69:
				case 73:
				case 74:
				case 80:
				case 96:
				case 109:
					{
					alt10 = 3;
					}
					break;
				case 68:
				case 71:
				case 72:
				case 92:
					{
					alt10 = 4;
					}
					break;
				case 65:
				case 70:
					{
					alt10 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:111:13: storage_class_specifier
					{
					DebugLocation(111, 13);
					PushFollow(Follow._storage_class_specifier_in_declaration_specifiers295);
					storage_class_specifier17=storage_class_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, storage_class_specifier17.Tree, storage_class_specifier17, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:112:13: type_specifier
					{
					DebugLocation(112, 13);
					PushFollow(Follow._type_specifier_in_declaration_specifiers309);
					type_specifier18=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier18.Tree, type_specifier18, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:113:13: type_qualifier
					{
					DebugLocation(113, 13);
					PushFollow(Follow._type_qualifier_in_declaration_specifiers323);
					type_qualifier19=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier19.Tree, type_qualifier19, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C.g:114:13: gcc_function_specifier
					{
					DebugLocation(114, 13);
					PushFollow(Follow._gcc_function_specifier_in_declaration_specifiers337);
					gcc_function_specifier20=gcc_function_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_function_specifier20.Tree, gcc_function_specifier20, retval);

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C.g:115:13: gcc_declaration_specifier
					{
					DebugLocation(115, 13);
					PushFollow(Follow._gcc_declaration_specifier_in_declaration_specifiers351);
					gcc_declaration_specifier21=gcc_declaration_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_declaration_specifier21.Tree, gcc_declaration_specifier21, retval);

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_specifiers", 5);
			LeaveRule("declaration_specifiers", 5);
			LeaveRule_declaration_specifiers();
			if (state.backtracking > 0) { Memoize(input, 5, declaration_specifiers_StartIndex); }

		}
		DebugLocation(117, 4);
		} finally { DebugExitRule(GrammarFileName, "declaration_specifiers"); }
		return retval;

	}
	// $ANTLR end "declaration_specifiers"

	partial void EnterRule_init_declarator_list();
	partial void LeaveRule_init_declarator_list();

	// $ANTLR start "init_declarator_list"
	// C.g:119:1: init_declarator_list : init_declarator ( ',' init_declarator )* ;
	[GrammarRule("init_declarator_list")]
	public XAstParserRuleReturnScope init_declarator_list()
	{
		EnterRule_init_declarator_list();
		EnterRule("init_declarator_list", 6);
		var retval = new XAstParserRuleReturnScope("init_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal23 = default(IToken);
		XAstParserRuleReturnScope init_declarator22 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator24 = default(XAstParserRuleReturnScope);

		object char_literal23_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator_list");
		DebugLocation(119, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C.g:120:5: ( init_declarator ( ',' init_declarator )* )
			DebugEnterAlt(1);
			// C.g:120:7: init_declarator ( ',' init_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(120, 7);
			PushFollow(Follow._init_declarator_in_init_declarator_list379);
			init_declarator22=init_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator22.Tree, init_declarator22, retval);
			DebugLocation(120, 23);
			// C.g:120:23: ( ',' init_declarator )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==37))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:120:24: ',' init_declarator
					{
					DebugLocation(120, 24);
					char_literal23=(IToken)Match(input,37,Follow._37_in_init_declarator_list382); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal23_tree = (object)adaptor.Create(char_literal23, retval);
					adaptor.AddChild(root_0, char_literal23_tree);
					}
					DebugLocation(120, 28);
					PushFollow(Follow._init_declarator_in_init_declarator_list384);
					init_declarator24=init_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator24.Tree, init_declarator24, retval);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator_list", 6);
			LeaveRule("init_declarator_list", 6);
			LeaveRule_init_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 6, init_declarator_list_StartIndex); }

		}
		DebugLocation(121, 4);
		} finally { DebugExitRule(GrammarFileName, "init_declarator_list"); }
		return retval;

	}
	// $ANTLR end "init_declarator_list"

	partial void EnterRule_init_declarator();
	partial void LeaveRule_init_declarator();

	// $ANTLR start "init_declarator"
	// C.g:123:1: init_declarator : declarator ( '=' initializer )? ;
	[GrammarRule("init_declarator")]
	public XAstParserRuleReturnScope init_declarator()
	{
		EnterRule_init_declarator();
		EnterRule("init_declarator", 7);
		var retval = new XAstParserRuleReturnScope("init_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal26 = default(IToken);
		XAstParserRuleReturnScope declarator25 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer27 = default(XAstParserRuleReturnScope);

		object char_literal26_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator");
		DebugLocation(123, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C.g:124:5: ( declarator ( '=' initializer )? )
			DebugEnterAlt(1);
			// C.g:124:7: declarator ( '=' initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(124, 7);
			PushFollow(Follow._declarator_in_init_declarator403);
			declarator25=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator25.Tree, declarator25, retval);
			DebugLocation(124, 18);
			// C.g:124:18: ( '=' initializer )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==52))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:124:19: '=' initializer
				{
				DebugLocation(124, 19);
				char_literal26=(IToken)Match(input,52,Follow._52_in_init_declarator406); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal26_tree = (object)adaptor.Create(char_literal26, retval);
				adaptor.AddChild(root_0, char_literal26_tree);
				}
				DebugLocation(124, 23);
				PushFollow(Follow._initializer_in_init_declarator408);
				initializer27=initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer27.Tree, initializer27, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator", 7);
			LeaveRule("init_declarator", 7);
			LeaveRule_init_declarator();
			if (state.backtracking > 0) { Memoize(input, 7, init_declarator_StartIndex); }

		}
		DebugLocation(125, 4);
		} finally { DebugExitRule(GrammarFileName, "init_declarator"); }
		return retval;

	}
	// $ANTLR end "init_declarator"

	partial void EnterRule_storage_class_specifier();
	partial void LeaveRule_storage_class_specifier();

	// $ANTLR start "storage_class_specifier"
	// C.g:127:1: storage_class_specifier : ( 'extern' | 'static' | 'auto' | 'register' );
	[GrammarRule("storage_class_specifier")]
	public XAstParserRuleReturnScope storage_class_specifier()
	{
		EnterRule_storage_class_specifier();
		EnterRule("storage_class_specifier", 8);
		var retval = new XAstParserRuleReturnScope("storage_class_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int storage_class_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set28 = default(IToken);

		object set28_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "storage_class_specifier");
		DebugLocation(127, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C.g:128:5: ( 'extern' | 'static' | 'auto' | 'register' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(128, 5);

			set28=(IToken)input.LT(1);
			if (input.LA(1)==76||input.LA(1)==87||input.LA(1)==95||input.LA(1)==101)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set28, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("storage_class_specifier", 8);
			LeaveRule("storage_class_specifier", 8);
			LeaveRule_storage_class_specifier();
			if (state.backtracking > 0) { Memoize(input, 8, storage_class_specifier_StartIndex); }

		}
		DebugLocation(132, 4);
		} finally { DebugExitRule(GrammarFileName, "storage_class_specifier"); }
		return retval;

	}
	// $ANTLR end "storage_class_specifier"

	partial void EnterRule_type_specifier();
	partial void LeaveRule_type_specifier();

	// $ANTLR start "type_specifier"
	// C.g:134:1: type_specifier : ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | type_id | gcc_typeof );
	[GrammarRule("type_specifier")]
	public XAstParserRuleReturnScope type_specifier()
	{
		EnterRule_type_specifier();
		EnterRule("type_specifier", 9);
		var retval = new XAstParserRuleReturnScope("type_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal29 = default(IToken);
		IToken string_literal30 = default(IToken);
		IToken string_literal31 = default(IToken);
		IToken string_literal32 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken string_literal36 = default(IToken);
		IToken string_literal37 = default(IToken);
		XAstParserRuleReturnScope struct_or_union_specifier38 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_specifier39 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_id40 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_typeof41 = default(XAstParserRuleReturnScope);

		object string_literal29_tree = default(object);
		object string_literal30_tree = default(object);
		object string_literal31_tree = default(object);
		object string_literal32_tree = default(object);
		object string_literal33_tree = default(object);
		object string_literal34_tree = default(object);
		object string_literal35_tree = default(object);
		object string_literal36_tree = default(object);
		object string_literal37_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_specifier");
		DebugLocation(134, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C.g:135:5: ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | type_id | gcc_typeof )
			int alt13=13;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case 108:
				{
				alt13 = 1;
				}
				break;
			case 79:
				{
				alt13 = 2;
				}
				break;
			case 98:
				{
				alt13 = 3;
				}
				break;
			case 93:
				{
				alt13 = 4;
				}
				break;
			case 94:
				{
				alt13 = 5;
				}
				break;
			case 88:
				{
				alt13 = 6;
				}
				break;
			case 84:
				{
				alt13 = 7;
				}
				break;
			case 99:
				{
				alt13 = 8;
				}
				break;
			case 107:
				{
				alt13 = 9;
				}
				break;
			case 102:
			case 106:
				{
				alt13 = 10;
				}
				break;
			case 86:
				{
				alt13 = 11;
				}
				break;
			case IDENTIFIER:
				{
				alt13 = 12;
				}
				break;
			case 105:
				{
				alt13 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:135:7: 'void'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 7);
				string_literal29=(IToken)Match(input,108,Follow._108_in_type_specifier468); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal29_tree = (object)adaptor.Create(string_literal29, retval);
				adaptor.AddChild(root_0, string_literal29_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:136:7: 'char'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 7);
				string_literal30=(IToken)Match(input,79,Follow._79_in_type_specifier476); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal30_tree = (object)adaptor.Create(string_literal30, retval);
				adaptor.AddChild(root_0, string_literal30_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:137:7: 'short'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(137, 7);
				string_literal31=(IToken)Match(input,98,Follow._98_in_type_specifier484); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal31_tree = (object)adaptor.Create(string_literal31, retval);
				adaptor.AddChild(root_0, string_literal31_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:138:7: 'int'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(138, 7);
				string_literal32=(IToken)Match(input,93,Follow._93_in_type_specifier492); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal32_tree = (object)adaptor.Create(string_literal32, retval);
				adaptor.AddChild(root_0, string_literal32_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:139:7: 'long'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 7);
				string_literal33=(IToken)Match(input,94,Follow._94_in_type_specifier500); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal33_tree = (object)adaptor.Create(string_literal33, retval);
				adaptor.AddChild(root_0, string_literal33_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:140:7: 'float'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 7);
				string_literal34=(IToken)Match(input,88,Follow._88_in_type_specifier508); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal34_tree = (object)adaptor.Create(string_literal34, retval);
				adaptor.AddChild(root_0, string_literal34_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:141:7: 'double'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 7);
				string_literal35=(IToken)Match(input,84,Follow._84_in_type_specifier516); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal35_tree = (object)adaptor.Create(string_literal35, retval);
				adaptor.AddChild(root_0, string_literal35_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C.g:142:7: 'signed'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 7);
				string_literal36=(IToken)Match(input,99,Follow._99_in_type_specifier524); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal36_tree = (object)adaptor.Create(string_literal36, retval);
				adaptor.AddChild(root_0, string_literal36_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C.g:143:7: 'unsigned'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 7);
				string_literal37=(IToken)Match(input,107,Follow._107_in_type_specifier532); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal37_tree = (object)adaptor.Create(string_literal37, retval);
				adaptor.AddChild(root_0, string_literal37_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C.g:144:7: struct_or_union_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(144, 7);
				PushFollow(Follow._struct_or_union_specifier_in_type_specifier540);
				struct_or_union_specifier38=struct_or_union_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union_specifier38.Tree, struct_or_union_specifier38, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C.g:145:7: enum_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(145, 7);
				PushFollow(Follow._enum_specifier_in_type_specifier548);
				enum_specifier39=enum_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_specifier39.Tree, enum_specifier39, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C.g:146:7: type_id
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(146, 7);
				PushFollow(Follow._type_id_in_type_specifier556);
				type_id40=type_id();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_id40.Tree, type_id40, retval);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C.g:147:7: gcc_typeof
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(147, 7);
				PushFollow(Follow._gcc_typeof_in_type_specifier564);
				gcc_typeof41=gcc_typeof();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_typeof41.Tree, gcc_typeof41, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_specifier", 9);
			LeaveRule("type_specifier", 9);
			LeaveRule_type_specifier();
			if (state.backtracking > 0) { Memoize(input, 9, type_specifier_StartIndex); }

		}
		DebugLocation(148, 4);
		} finally { DebugExitRule(GrammarFileName, "type_specifier"); }
		return retval;

	}
	// $ANTLR end "type_specifier"

	partial void EnterRule_type_id();
	partial void LeaveRule_type_id();

	// $ANTLR start "type_id"
	// C.g:150:1: type_id :{...}? IDENTIFIER ;
	[GrammarRule("type_id")]
	public XAstParserRuleReturnScope type_id()
	{
		EnterRule_type_id();
		EnterRule("type_id", 10);
		var retval = new XAstParserRuleReturnScope("type_id");
		
		retval.Start = (IToken)input.LT(1);
		int type_id_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER42 = default(IToken);

		object IDENTIFIER42_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_id");
		DebugLocation(150, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C.g:151:5: ({...}? IDENTIFIER )
			DebugEnterAlt(1);
			// C.g:151:9: {...}? IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(151, 9);
			if (!((isTypeName(input.LT(1).getText()))))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "type_id", "isTypeName(input.LT(1).getText())");
			}
			DebugLocation(151, 46);
			IDENTIFIER42=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_id585), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER42_tree = (object)adaptor.Create(IDENTIFIER42, retval);
			adaptor.AddChild(root_0, IDENTIFIER42_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_id", 10);
			LeaveRule("type_id", 10);
			LeaveRule_type_id();
			if (state.backtracking > 0) { Memoize(input, 10, type_id_StartIndex); }

		}
		DebugLocation(153, 4);
		} finally { DebugExitRule(GrammarFileName, "type_id"); }
		return retval;

	}
	// $ANTLR end "type_id"

	partial void EnterRule_struct_or_union_specifier();
	partial void LeaveRule_struct_or_union_specifier();

	// $ANTLR start "struct_or_union_specifier"
	// C.g:155:1: struct_or_union_specifier options {k=3; } : ( struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union ( gcc_attribute_list )? IDENTIFIER );
	[GrammarRule("struct_or_union_specifier")]
	public XAstParserRuleReturnScope struct_or_union_specifier()
	{
		EnterRule_struct_or_union_specifier();
		EnterRule("struct_or_union_specifier", 11);
		var retval = new XAstParserRuleReturnScope("struct_or_union_specifier");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER45 = default(IToken);
		IToken char_literal46 = default(IToken);
		IToken char_literal48 = default(IToken);
		IToken IDENTIFIER51 = default(IToken);
		XAstParserRuleReturnScope struct_or_union43 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list44 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration_list47 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_or_union49 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list50 = default(XAstParserRuleReturnScope);

		object IDENTIFIER45_tree = default(object);
		object char_literal46_tree = default(object);
		object char_literal48_tree = default(object);
		object IDENTIFIER51_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "struct_or_union_specifier");
		DebugLocation(155, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C.g:161:5: ( struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union ( gcc_attribute_list )? IDENTIFIER )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==102||LA17_0==106))
			{
				switch (input.LA(2))
				{
				case 65:
					{
					int LA17_2 = input.LA(3);

					if ((LA17_2==30))
					{
						int LA17_5 = input.LA(4);

						if ((EvaluatePredicate(synpred36_C_fragment)))
						{
							alt17 = 1;
						}
						else if ((true))
						{
							alt17 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 17, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA17_3 = input.LA(3);

					if ((LA17_3==111))
					{
						alt17 = 1;
					}
					else if ((LA17_3==EOF||LA17_3==IDENTIFIER||(LA17_3>=30 && LA17_3<=32)||LA17_3==37||(LA17_3>=46 && LA17_3<=47)||LA17_3==59||LA17_3==65||(LA17_3>=68 && LA17_3<=74)||LA17_3==76||(LA17_3>=79 && LA17_3<=80)||LA17_3==84||(LA17_3>=86 && LA17_3<=88)||(LA17_3>=92 && LA17_3<=96)||(LA17_3>=98 && LA17_3<=99)||(LA17_3>=101 && LA17_3<=102)||(LA17_3>=105 && LA17_3<=109)))
					{
						alt17 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 111:
					{
					alt17 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:161:7: struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(161, 7);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier621);
				struct_or_union43=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union43.Tree, struct_or_union43, retval);
				DebugLocation(161, 23);
				// C.g:161:23: ( gcc_attribute_list )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==65))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:161:23: gcc_attribute_list
					{
					DebugLocation(161, 23);
					PushFollow(Follow._gcc_attribute_list_in_struct_or_union_specifier623);
					gcc_attribute_list44=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list44.Tree, gcc_attribute_list44, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(161, 43);
				// C.g:161:43: ( IDENTIFIER )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==IDENTIFIER))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:161:43: IDENTIFIER
					{
					DebugLocation(161, 43);
					IDENTIFIER45=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier626), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER45_tree = (object)adaptor.Create(IDENTIFIER45, retval);
					adaptor.AddChild(root_0, IDENTIFIER45_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(161, 55);
				char_literal46=(IToken)Match(input,111,Follow._111_in_struct_or_union_specifier629); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal46_tree = (object)adaptor.Create(char_literal46, retval);
				adaptor.AddChild(root_0, char_literal46_tree);
				}
				DebugLocation(161, 59);
				PushFollow(Follow._struct_declaration_list_in_struct_or_union_specifier631);
				struct_declaration_list47=struct_declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration_list47.Tree, struct_declaration_list47, retval);
				DebugLocation(161, 83);
				char_literal48=(IToken)Match(input,115,Follow._115_in_struct_or_union_specifier633); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal48_tree = (object)adaptor.Create(char_literal48, retval);
				adaptor.AddChild(root_0, char_literal48_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:162:7: struct_or_union ( gcc_attribute_list )? IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(162, 7);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier641);
				struct_or_union49=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union49.Tree, struct_or_union49, retval);
				DebugLocation(162, 23);
				// C.g:162:23: ( gcc_attribute_list )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==65))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:162:23: gcc_attribute_list
					{
					DebugLocation(162, 23);
					PushFollow(Follow._gcc_attribute_list_in_struct_or_union_specifier643);
					gcc_attribute_list50=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list50.Tree, gcc_attribute_list50, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(162, 43);
				IDENTIFIER51=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier646), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER51_tree = (object)adaptor.Create(IDENTIFIER51, retval);
				adaptor.AddChild(root_0, IDENTIFIER51_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union_specifier", 11);
			LeaveRule("struct_or_union_specifier", 11);
			LeaveRule_struct_or_union_specifier();
			if (state.backtracking > 0) { Memoize(input, 11, struct_or_union_specifier_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(163, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union_specifier"); }
		return retval;

	}
	// $ANTLR end "struct_or_union_specifier"

	partial void EnterRule_struct_or_union();
	partial void LeaveRule_struct_or_union();

	// $ANTLR start "struct_or_union"
	// C.g:165:1: struct_or_union : ( 'struct' | 'union' );
	[GrammarRule("struct_or_union")]
	public XAstParserRuleReturnScope struct_or_union()
	{
		EnterRule_struct_or_union();
		EnterRule("struct_or_union", 12);
		var retval = new XAstParserRuleReturnScope("struct_or_union");
		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set52 = default(IToken);

		object set52_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_or_union");
		DebugLocation(165, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C.g:166:5: ( 'struct' | 'union' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(166, 5);

			set52=(IToken)input.LT(1);
			if (input.LA(1)==102||input.LA(1)==106)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set52, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union", 12);
			LeaveRule("struct_or_union", 12);
			LeaveRule_struct_or_union();
			if (state.backtracking > 0) { Memoize(input, 12, struct_or_union_StartIndex); }

		}
		DebugLocation(168, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union"); }
		return retval;

	}
	// $ANTLR end "struct_or_union"

	partial void EnterRule_struct_declaration_list();
	partial void LeaveRule_struct_declaration_list();

	// $ANTLR start "struct_declaration_list"
	// C.g:170:1: struct_declaration_list : ( struct_declaration )+ ;
	[GrammarRule("struct_declaration_list")]
	public XAstParserRuleReturnScope struct_declaration_list()
	{
		EnterRule_struct_declaration_list();
		EnterRule("struct_declaration_list", 13);
		var retval = new XAstParserRuleReturnScope("struct_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_declaration53 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_declaration_list");
		DebugLocation(170, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C.g:171:5: ( ( struct_declaration )+ )
			DebugEnterAlt(1);
			// C.g:171:7: ( struct_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(171, 7);
			// C.g:171:7: ( struct_declaration )+
			int cnt18=0;
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==IDENTIFIER||LA18_0==47||LA18_0==65||(LA18_0>=69 && LA18_0<=70)||(LA18_0>=73 && LA18_0<=74)||(LA18_0>=79 && LA18_0<=80)||LA18_0==84||LA18_0==86||LA18_0==88||(LA18_0>=93 && LA18_0<=94)||LA18_0==96||(LA18_0>=98 && LA18_0<=99)||LA18_0==102||(LA18_0>=105 && LA18_0<=109)))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:171:7: struct_declaration
					{
					DebugLocation(171, 7);
					PushFollow(Follow._struct_declaration_in_struct_declaration_list688);
					struct_declaration53=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration53.Tree, struct_declaration53, retval);

					}
					break;

				default:
					if (cnt18 >= 1)
						goto loop18;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee18 = new EarlyExitException( 18, input );
					DebugRecognitionException(eee18);
					throw eee18;
				}
				cnt18++;
			}
			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration_list", 13);
			LeaveRule("struct_declaration_list", 13);
			LeaveRule_struct_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 13, struct_declaration_list_StartIndex); }

		}
		DebugLocation(172, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration_list"); }
		return retval;

	}
	// $ANTLR end "struct_declaration_list"

	partial void EnterRule_struct_declaration();
	partial void LeaveRule_struct_declaration();

	// $ANTLR start "struct_declaration"
	// C.g:174:1: struct_declaration : ( specifier_qualifier_list struct_declarator_list ';' | ';' );
	[GrammarRule("struct_declaration")]
	public XAstParserRuleReturnScope struct_declaration()
	{
		EnterRule_struct_declaration();
		EnterRule("struct_declaration", 14);
		var retval = new XAstParserRuleReturnScope("struct_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal56 = default(IToken);
		IToken char_literal57 = default(IToken);
		XAstParserRuleReturnScope specifier_qualifier_list54 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator_list55 = default(XAstParserRuleReturnScope);

		object char_literal56_tree = default(object);
		object char_literal57_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declaration");
		DebugLocation(174, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C.g:175:5: ( specifier_qualifier_list struct_declarator_list ';' | ';' )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==IDENTIFIER||LA19_0==65||(LA19_0>=69 && LA19_0<=70)||(LA19_0>=73 && LA19_0<=74)||(LA19_0>=79 && LA19_0<=80)||LA19_0==84||LA19_0==86||LA19_0==88||(LA19_0>=93 && LA19_0<=94)||LA19_0==96||(LA19_0>=98 && LA19_0<=99)||LA19_0==102||(LA19_0>=105 && LA19_0<=109)))
			{
				alt19 = 1;
			}
			else if ((LA19_0==47))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:175:7: specifier_qualifier_list struct_declarator_list ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(175, 7);
				PushFollow(Follow._specifier_qualifier_list_in_struct_declaration706);
				specifier_qualifier_list54=specifier_qualifier_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list54.Tree, specifier_qualifier_list54, retval);
				DebugLocation(175, 32);
				PushFollow(Follow._struct_declarator_list_in_struct_declaration708);
				struct_declarator_list55=struct_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator_list55.Tree, struct_declarator_list55, retval);
				DebugLocation(175, 55);
				char_literal56=(IToken)Match(input,47,Follow._47_in_struct_declaration710); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal56_tree = (object)adaptor.Create(char_literal56, retval);
				adaptor.AddChild(root_0, char_literal56_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:176:7: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(176, 7);
				char_literal57=(IToken)Match(input,47,Follow._47_in_struct_declaration718); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal57_tree = (object)adaptor.Create(char_literal57, retval);
				adaptor.AddChild(root_0, char_literal57_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration", 14);
			LeaveRule("struct_declaration", 14);
			LeaveRule_struct_declaration();
			if (state.backtracking > 0) { Memoize(input, 14, struct_declaration_StartIndex); }

		}
		DebugLocation(177, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_declaration"

	partial void EnterRule_specifier_qualifier_list();
	partial void LeaveRule_specifier_qualifier_list();

	// $ANTLR start "specifier_qualifier_list"
	// C.g:179:1: specifier_qualifier_list : ( type_qualifier | type_specifier | gcc_declaration_specifier )+ ;
	[GrammarRule("specifier_qualifier_list")]
	public XAstParserRuleReturnScope specifier_qualifier_list()
	{
		EnterRule_specifier_qualifier_list();
		EnterRule("specifier_qualifier_list", 15);
		var retval = new XAstParserRuleReturnScope("specifier_qualifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int specifier_qualifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_qualifier58 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier59 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_declaration_specifier60 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "specifier_qualifier_list");
		DebugLocation(179, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C.g:180:5: ( ( type_qualifier | type_specifier | gcc_declaration_specifier )+ )
			DebugEnterAlt(1);
			// C.g:180:7: ( type_qualifier | type_specifier | gcc_declaration_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(180, 7);
			// C.g:180:7: ( type_qualifier | type_specifier | gcc_declaration_specifier )+
			int cnt20=0;
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=4;
				try { DebugEnterDecision(20, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA20_2 = input.LA(2);

					if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred42_C_fragment))))
					{
						alt20 = 2;
					}


					}
					break;
				case 69:
				case 73:
				case 74:
				case 80:
				case 96:
				case 109:
					{
					alt20 = 1;
					}
					break;
				case 79:
				case 84:
				case 86:
				case 88:
				case 93:
				case 94:
				case 98:
				case 99:
				case 102:
				case 105:
				case 106:
				case 107:
				case 108:
					{
					alt20 = 2;
					}
					break;
				case 65:
				case 70:
					{
					alt20 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:180:9: type_qualifier
					{
					DebugLocation(180, 9);
					PushFollow(Follow._type_qualifier_in_specifier_qualifier_list738);
					type_qualifier58=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier58.Tree, type_qualifier58, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:180:26: type_specifier
					{
					DebugLocation(180, 26);
					PushFollow(Follow._type_specifier_in_specifier_qualifier_list742);
					type_specifier59=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier59.Tree, type_specifier59, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:180:43: gcc_declaration_specifier
					{
					DebugLocation(180, 43);
					PushFollow(Follow._gcc_declaration_specifier_in_specifier_qualifier_list746);
					gcc_declaration_specifier60=gcc_declaration_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_declaration_specifier60.Tree, gcc_declaration_specifier60, retval);

					}
					break;

				default:
					if (cnt20 >= 1)
						goto loop20;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee20 = new EarlyExitException( 20, input );
					DebugRecognitionException(eee20);
					throw eee20;
				}
				cnt20++;
			}
			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specifier_qualifier_list", 15);
			LeaveRule("specifier_qualifier_list", 15);
			LeaveRule_specifier_qualifier_list();
			if (state.backtracking > 0) { Memoize(input, 15, specifier_qualifier_list_StartIndex); }

		}
		DebugLocation(181, 4);
		} finally { DebugExitRule(GrammarFileName, "specifier_qualifier_list"); }
		return retval;

	}
	// $ANTLR end "specifier_qualifier_list"

	partial void EnterRule_struct_declarator_list();
	partial void LeaveRule_struct_declarator_list();

	// $ANTLR start "struct_declarator_list"
	// C.g:183:1: struct_declarator_list : struct_declarator ( ',' struct_declarator )* ;
	[GrammarRule("struct_declarator_list")]
	public XAstParserRuleReturnScope struct_declarator_list()
	{
		EnterRule_struct_declarator_list();
		EnterRule("struct_declarator_list", 16);
		var retval = new XAstParserRuleReturnScope("struct_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal62 = default(IToken);
		XAstParserRuleReturnScope struct_declarator61 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator63 = default(XAstParserRuleReturnScope);

		object char_literal62_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator_list");
		DebugLocation(183, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C.g:184:5: ( struct_declarator ( ',' struct_declarator )* )
			DebugEnterAlt(1);
			// C.g:184:7: struct_declarator ( ',' struct_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(184, 7);
			PushFollow(Follow._struct_declarator_in_struct_declarator_list765);
			struct_declarator61=struct_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator61.Tree, struct_declarator61, retval);
			DebugLocation(184, 25);
			// C.g:184:25: ( ',' struct_declarator )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==37))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:184:26: ',' struct_declarator
					{
					DebugLocation(184, 26);
					char_literal62=(IToken)Match(input,37,Follow._37_in_struct_declarator_list768); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal62_tree = (object)adaptor.Create(char_literal62, retval);
					adaptor.AddChild(root_0, char_literal62_tree);
					}
					DebugLocation(184, 30);
					PushFollow(Follow._struct_declarator_in_struct_declarator_list770);
					struct_declarator63=struct_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator63.Tree, struct_declarator63, retval);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator_list", 16);
			LeaveRule("struct_declarator_list", 16);
			LeaveRule_struct_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 16, struct_declarator_list_StartIndex); }

		}
		DebugLocation(185, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator_list"); }
		return retval;

	}
	// $ANTLR end "struct_declarator_list"

	partial void EnterRule_struct_declarator();
	partial void LeaveRule_struct_declarator();

	// $ANTLR start "struct_declarator"
	// C.g:187:1: struct_declarator : ( declarator | ( declarator )? ':' constant_expression ( gcc_attribute_list )? );
	[GrammarRule("struct_declarator")]
	public XAstParserRuleReturnScope struct_declarator()
	{
		EnterRule_struct_declarator();
		EnterRule("struct_declarator", 17);
		var retval = new XAstParserRuleReturnScope("struct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal66 = default(IToken);
		XAstParserRuleReturnScope declarator64 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator65 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression67 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list68 = default(XAstParserRuleReturnScope);

		object char_literal66_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator");
		DebugLocation(187, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C.g:188:5: ( declarator | ( declarator )? ':' constant_expression ( gcc_attribute_list )? )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case 32:
				{
				switch (input.LA(2))
				{
				case 69:
				case 73:
				case 74:
				case 80:
				case 96:
				case 109:
					{
					int LA24_5 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 65:
					{
					int LA24_6 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA24_7 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
					{
					int LA24_8 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					int LA24_9 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case 37:
				case 47:
					{
					alt24 = 1;
					}
					break;
				case 46:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case IDENTIFIER:
				{
				switch (input.LA(2))
				{
				case 59:
					{
					int LA24_14 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 14, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
					{
					int LA24_15 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 15, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 64:
				case 75:
					{
					int LA24_16 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 16, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 65:
					{
					int LA24_17 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 17, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case 37:
				case 47:
					{
					alt24 = 1;
					}
					break;
				case 46:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 30:
				{
				switch (input.LA(2))
				{
				case 65:
					{
					int LA24_22 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 22, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					int LA24_23 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 23, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA24_24 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 24, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
					{
					int LA24_25 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 25, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 46:
				{
				alt24 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:188:7: declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(188, 7);
				PushFollow(Follow._declarator_in_struct_declarator789);
				declarator64=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator64.Tree, declarator64, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:189:7: ( declarator )? ':' constant_expression ( gcc_attribute_list )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(189, 7);
				// C.g:189:7: ( declarator )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==IDENTIFIER||LA22_0==30||LA22_0==32))
				{
					alt22 = 1;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:189:7: declarator
					{
					DebugLocation(189, 7);
					PushFollow(Follow._declarator_in_struct_declarator797);
					declarator65=declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator65.Tree, declarator65, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(22); }

				DebugLocation(189, 19);
				char_literal66=(IToken)Match(input,46,Follow._46_in_struct_declarator800); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal66_tree = (object)adaptor.Create(char_literal66, retval);
				adaptor.AddChild(root_0, char_literal66_tree);
				}
				DebugLocation(189, 23);
				PushFollow(Follow._constant_expression_in_struct_declarator802);
				constant_expression67=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression67.Tree, constant_expression67, retval);
				DebugLocation(189, 43);
				// C.g:189:43: ( gcc_attribute_list )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==65))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:189:43: gcc_attribute_list
					{
					DebugLocation(189, 43);
					PushFollow(Follow._gcc_attribute_list_in_struct_declarator804);
					gcc_attribute_list68=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list68.Tree, gcc_attribute_list68, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(23); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator", 17);
			LeaveRule("struct_declarator", 17);
			LeaveRule_struct_declarator();
			if (state.backtracking > 0) { Memoize(input, 17, struct_declarator_StartIndex); }

		}
		DebugLocation(190, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator"); }
		return retval;

	}
	// $ANTLR end "struct_declarator"

	partial void EnterRule_enum_specifier();
	partial void LeaveRule_enum_specifier();

	// $ANTLR start "enum_specifier"
	// C.g:192:1: enum_specifier options {k=4; } : ( 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}' | 'enum' ( gcc_attribute_list )? IDENTIFIER );
	[GrammarRule("enum_specifier")]
	public XAstParserRuleReturnScope enum_specifier()
	{
		EnterRule_enum_specifier();
		EnterRule("enum_specifier", 18);
		var retval = new XAstParserRuleReturnScope("enum_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int enum_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal69 = default(IToken);
		IToken IDENTIFIER71 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken char_literal74 = default(IToken);
		IToken string_literal75 = default(IToken);
		IToken IDENTIFIER77 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_list70 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator_list73 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list76 = default(XAstParserRuleReturnScope);

		object string_literal69_tree = default(object);
		object IDENTIFIER71_tree = default(object);
		object char_literal72_tree = default(object);
		object char_literal74_tree = default(object);
		object string_literal75_tree = default(object);
		object IDENTIFIER77_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_specifier");
		DebugLocation(192, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C.g:194:5: ( 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}' | 'enum' ( gcc_attribute_list )? IDENTIFIER )
			int alt28=2;
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==86))
			{
				switch (input.LA(2))
				{
				case 65:
					{
					int LA28_2 = input.LA(3);

					if ((LA28_2==30))
					{
						int LA28_5 = input.LA(4);

						if ((LA28_5==30))
						{
							int LA28_33 = input.LA(5);

							if ((EvaluatePredicate(synpred50_C_fragment)))
							{
								alt28 = 1;
							}
							else if ((true))
							{
								alt28 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 28, 33, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 28, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA28_3 = input.LA(3);

					if ((LA28_3==111))
					{
						alt28 = 1;
					}
					else if ((LA28_3==EOF||LA28_3==IDENTIFIER||(LA28_3>=30 && LA28_3<=32)||LA28_3==37||(LA28_3>=46 && LA28_3<=47)||LA28_3==59||LA28_3==65||(LA28_3>=68 && LA28_3<=74)||LA28_3==76||(LA28_3>=79 && LA28_3<=80)||LA28_3==84||(LA28_3>=86 && LA28_3<=88)||(LA28_3>=92 && LA28_3<=96)||(LA28_3>=98 && LA28_3<=99)||(LA28_3>=101 && LA28_3<=102)||(LA28_3>=105 && LA28_3<=109)))
					{
						alt28 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 111:
					{
					alt28 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:194:7: 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(194, 7);
				string_literal69=(IToken)Match(input,86,Follow._86_in_enum_specifier829); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal69_tree = (object)adaptor.Create(string_literal69, retval);
				adaptor.AddChild(root_0, string_literal69_tree);
				}
				DebugLocation(194, 14);
				// C.g:194:14: ( gcc_attribute_list )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==65))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:194:14: gcc_attribute_list
					{
					DebugLocation(194, 14);
					PushFollow(Follow._gcc_attribute_list_in_enum_specifier831);
					gcc_attribute_list70=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list70.Tree, gcc_attribute_list70, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(194, 34);
				// C.g:194:34: ( IDENTIFIER )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==IDENTIFIER))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:194:34: IDENTIFIER
					{
					DebugLocation(194, 34);
					IDENTIFIER71=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier834), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER71_tree = (object)adaptor.Create(IDENTIFIER71, retval);
					adaptor.AddChild(root_0, IDENTIFIER71_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(26); }

				DebugLocation(194, 46);
				char_literal72=(IToken)Match(input,111,Follow._111_in_enum_specifier837); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal72_tree = (object)adaptor.Create(char_literal72, retval);
				adaptor.AddChild(root_0, char_literal72_tree);
				}
				DebugLocation(194, 50);
				PushFollow(Follow._enumerator_list_in_enum_specifier839);
				enumerator_list73=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list73.Tree, enumerator_list73, retval);
				DebugLocation(194, 66);
				char_literal74=(IToken)Match(input,115,Follow._115_in_enum_specifier841); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal74_tree = (object)adaptor.Create(char_literal74, retval);
				adaptor.AddChild(root_0, char_literal74_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:195:7: 'enum' ( gcc_attribute_list )? IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 7);
				string_literal75=(IToken)Match(input,86,Follow._86_in_enum_specifier849); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal75_tree = (object)adaptor.Create(string_literal75, retval);
				adaptor.AddChild(root_0, string_literal75_tree);
				}
				DebugLocation(195, 14);
				// C.g:195:14: ( gcc_attribute_list )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==65))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:195:14: gcc_attribute_list
					{
					DebugLocation(195, 14);
					PushFollow(Follow._gcc_attribute_list_in_enum_specifier851);
					gcc_attribute_list76=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list76.Tree, gcc_attribute_list76, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(195, 34);
				IDENTIFIER77=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier854), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER77_tree = (object)adaptor.Create(IDENTIFIER77, retval);
				adaptor.AddChild(root_0, IDENTIFIER77_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_specifier", 18);
			LeaveRule("enum_specifier", 18);
			LeaveRule_enum_specifier();
			if (state.backtracking > 0) { Memoize(input, 18, enum_specifier_StartIndex); }

		}
		DebugLocation(196, 4);
		} finally { DebugExitRule(GrammarFileName, "enum_specifier"); }
		return retval;

	}
	// $ANTLR end "enum_specifier"

	partial void EnterRule_enumerator_list();
	partial void LeaveRule_enumerator_list();

	// $ANTLR start "enumerator_list"
	// C.g:198:1: enumerator_list : enumerator ( ',' enumerator )* ;
	[GrammarRule("enumerator_list")]
	public XAstParserRuleReturnScope enumerator_list()
	{
		EnterRule_enumerator_list();
		EnterRule("enumerator_list", 19);
		var retval = new XAstParserRuleReturnScope("enumerator_list");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal79 = default(IToken);
		XAstParserRuleReturnScope enumerator78 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator80 = default(XAstParserRuleReturnScope);

		object char_literal79_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator_list");
		DebugLocation(198, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C.g:199:5: ( enumerator ( ',' enumerator )* )
			DebugEnterAlt(1);
			// C.g:199:7: enumerator ( ',' enumerator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(199, 7);
			PushFollow(Follow._enumerator_in_enumerator_list871);
			enumerator78=enumerator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator78.Tree, enumerator78, retval);
			DebugLocation(199, 18);
			// C.g:199:18: ( ',' enumerator )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==37))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:199:19: ',' enumerator
					{
					DebugLocation(199, 19);
					char_literal79=(IToken)Match(input,37,Follow._37_in_enumerator_list874); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal79_tree = (object)adaptor.Create(char_literal79, retval);
					adaptor.AddChild(root_0, char_literal79_tree);
					}
					DebugLocation(199, 23);
					PushFollow(Follow._enumerator_in_enumerator_list876);
					enumerator80=enumerator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator80.Tree, enumerator80, retval);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator_list", 19);
			LeaveRule("enumerator_list", 19);
			LeaveRule_enumerator_list();
			if (state.backtracking > 0) { Memoize(input, 19, enumerator_list_StartIndex); }

		}
		DebugLocation(200, 4);
		} finally { DebugExitRule(GrammarFileName, "enumerator_list"); }
		return retval;

	}
	// $ANTLR end "enumerator_list"

	partial void EnterRule_enumerator();
	partial void LeaveRule_enumerator();

	// $ANTLR start "enumerator"
	// C.g:202:1: enumerator : IDENTIFIER ( '=' constant_expression )? ;
	[GrammarRule("enumerator")]
	public XAstParserRuleReturnScope enumerator()
	{
		EnterRule_enumerator();
		EnterRule("enumerator", 20);
		var retval = new XAstParserRuleReturnScope("enumerator");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER81 = default(IToken);
		IToken char_literal82 = default(IToken);
		XAstParserRuleReturnScope constant_expression83 = default(XAstParserRuleReturnScope);

		object IDENTIFIER81_tree = default(object);
		object char_literal82_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator");
		DebugLocation(202, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C.g:203:5: ( IDENTIFIER ( '=' constant_expression )? )
			DebugEnterAlt(1);
			// C.g:203:7: IDENTIFIER ( '=' constant_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(203, 7);
			IDENTIFIER81=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumerator895), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER81_tree = (object)adaptor.Create(IDENTIFIER81, retval);
			adaptor.AddChild(root_0, IDENTIFIER81_tree);
			}
			DebugLocation(203, 18);
			// C.g:203:18: ( '=' constant_expression )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==52))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:203:19: '=' constant_expression
				{
				DebugLocation(203, 19);
				char_literal82=(IToken)Match(input,52,Follow._52_in_enumerator898); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal82_tree = (object)adaptor.Create(char_literal82, retval);
				adaptor.AddChild(root_0, char_literal82_tree);
				}
				DebugLocation(203, 23);
				PushFollow(Follow._constant_expression_in_enumerator900);
				constant_expression83=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression83.Tree, constant_expression83, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator", 20);
			LeaveRule("enumerator", 20);
			LeaveRule_enumerator();
			if (state.backtracking > 0) { Memoize(input, 20, enumerator_StartIndex); }

		}
		DebugLocation(204, 4);
		} finally { DebugExitRule(GrammarFileName, "enumerator"); }
		return retval;

	}
	// $ANTLR end "enumerator"

	partial void EnterRule_type_qualifier();
	partial void LeaveRule_type_qualifier();

	// $ANTLR start "type_qualifier"
	// C.g:206:1: type_qualifier : ( 'const' | 'volatile' | '__const' | 'restrict' | '__volatile__' | '__restrict__' );
	[GrammarRule("type_qualifier")]
	public XAstParserRuleReturnScope type_qualifier()
	{
		EnterRule_type_qualifier();
		EnterRule("type_qualifier", 21);
		var retval = new XAstParserRuleReturnScope("type_qualifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_qualifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set84 = default(IToken);

		object set84_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_qualifier");
		DebugLocation(206, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C.g:207:5: ( 'const' | 'volatile' | '__const' | 'restrict' | '__volatile__' | '__restrict__' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(207, 5);

			set84=(IToken)input.LT(1);
			if (input.LA(1)==69||(input.LA(1)>=73 && input.LA(1)<=74)||input.LA(1)==80||input.LA(1)==96||input.LA(1)==109)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set84, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_qualifier", 21);
			LeaveRule("type_qualifier", 21);
			LeaveRule_type_qualifier();
			if (state.backtracking > 0) { Memoize(input, 21, type_qualifier_StartIndex); }

		}
		DebugLocation(213, 4);
		} finally { DebugExitRule(GrammarFileName, "type_qualifier"); }
		return retval;

	}
	// $ANTLR end "type_qualifier"

	partial void EnterRule_declarator();
	partial void LeaveRule_declarator();

	// $ANTLR start "declarator"
	// C.g:215:1: declarator : ( ( pointer )? direct_declarator ( gcc_asm_expression )? ( gcc_attribute_list )? | pointer );
	[GrammarRule("declarator")]
	public XAstParserRuleReturnScope declarator()
	{
		EnterRule_declarator();
		EnterRule("declarator", 22);
		var retval = new XAstParserRuleReturnScope("declarator");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer85 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_declarator86 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_expression87 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list88 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer89 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declarator");
		DebugLocation(215, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C.g:216:5: ( ( pointer )? direct_declarator ( gcc_asm_expression )? ( gcc_attribute_list )? | pointer )
			int alt34=2;
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==32))
			{
				int LA34_1 = input.LA(2);

				if ((EvaluatePredicate(synpred62_C_fragment)))
				{
					alt34 = 1;
				}
				else if ((true))
				{
					alt34 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA34_0==IDENTIFIER||LA34_0==30))
			{
				alt34 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:216:7: ( pointer )? direct_declarator ( gcc_asm_expression )? ( gcc_attribute_list )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(216, 7);
				// C.g:216:7: ( pointer )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==32))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:216:7: pointer
					{
					DebugLocation(216, 7);
					PushFollow(Follow._pointer_in_declarator992);
					pointer85=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer85.Tree, pointer85, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(216, 16);
				PushFollow(Follow._direct_declarator_in_declarator995);
				direct_declarator86=direct_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_declarator86.Tree, direct_declarator86, retval);
				DebugLocation(216, 34);
				// C.g:216:34: ( gcc_asm_expression )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==64||LA32_0==75))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:216:34: gcc_asm_expression
					{
					DebugLocation(216, 34);
					PushFollow(Follow._gcc_asm_expression_in_declarator997);
					gcc_asm_expression87=gcc_asm_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_expression87.Tree, gcc_asm_expression87, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(216, 54);
				// C.g:216:54: ( gcc_attribute_list )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==65))
				{
					int LA33_1 = input.LA(2);

					if ((LA33_1==30))
					{
						int LA33_30 = input.LA(3);

						if ((EvaluatePredicate(synpred61_C_fragment)))
						{
							alt33 = 1;
						}
					}
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:216:54: gcc_attribute_list
					{
					DebugLocation(216, 54);
					PushFollow(Follow._gcc_attribute_list_in_declarator1000);
					gcc_attribute_list88=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list88.Tree, gcc_attribute_list88, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(33); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:217:7: pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(217, 7);
				PushFollow(Follow._pointer_in_declarator1009);
				pointer89=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer89.Tree, pointer89, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator", 22);
			LeaveRule("declarator", 22);
			LeaveRule_declarator();
			if (state.backtracking > 0) { Memoize(input, 22, declarator_StartIndex); }

		}
		DebugLocation(218, 4);
		} finally { DebugExitRule(GrammarFileName, "declarator"); }
		return retval;

	}
	// $ANTLR end "declarator"

	partial void EnterRule_direct_declarator();
	partial void LeaveRule_direct_declarator();

	// $ANTLR start "direct_declarator"
	// C.g:220:1: direct_declarator : ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' ) ( declarator_suffix )* ;
	[GrammarRule("direct_declarator")]
	public XAstParserRuleReturnScope direct_declarator()
	{
		EnterRule_direct_declarator();
		EnterRule("direct_declarator", 23);
		var retval = new XAstParserRuleReturnScope("direct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal94 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_list92 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator93 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator_suffix95 = default(XAstParserRuleReturnScope);

		object IDENTIFIER90_tree = default(object);
		object char_literal91_tree = default(object);
		object char_literal94_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_declarator");
		DebugLocation(220, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C.g:221:5: ( ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' ) ( declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:221:9: ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' ) ( declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(221, 9);
			// C.g:221:9: ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' )
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==IDENTIFIER))
			{
				alt36 = 1;
			}
			else if ((LA36_0==30))
			{
				alt36 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:221:11: IDENTIFIER
				{
				DebugLocation(221, 11);
				IDENTIFIER90=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_direct_declarator1030), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER90_tree = (object)adaptor.Create(IDENTIFIER90, retval);
				adaptor.AddChild(root_0, IDENTIFIER90_tree);
				}
				DebugLocation(222, 13);
				if (state.backtracking == 0)
				{

					            if (declaration_stack.size()>0&&declaration_stack.Peek().isTypedef) {
					                Symbols_stack.Peek().types.add((IDENTIFIER90!=null?IDENTIFIER90.Text:null));
					                
					            }
					            
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:228:11: '(' ( gcc_attribute_list )? declarator ')'
				{
				DebugLocation(228, 11);
				char_literal91=(IToken)Match(input,30,Follow._30_in_direct_declarator1056); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal91_tree = (object)adaptor.Create(char_literal91, retval);
				adaptor.AddChild(root_0, char_literal91_tree);
				}
				DebugLocation(228, 15);
				// C.g:228:15: ( gcc_attribute_list )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==65))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:228:15: gcc_attribute_list
					{
					DebugLocation(228, 15);
					PushFollow(Follow._gcc_attribute_list_in_direct_declarator1058);
					gcc_attribute_list92=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list92.Tree, gcc_attribute_list92, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(228, 35);
				PushFollow(Follow._declarator_in_direct_declarator1061);
				declarator93=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator93.Tree, declarator93, retval);
				DebugLocation(228, 46);
				char_literal94=(IToken)Match(input,31,Follow._31_in_direct_declarator1063); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal94_tree = (object)adaptor.Create(char_literal94, retval);
				adaptor.AddChild(root_0, char_literal94_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(230, 9);
			// C.g:230:9: ( declarator_suffix )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				try
				{
					alt37 = dfa37.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:230:9: declarator_suffix
					{
					DebugLocation(230, 9);
					PushFollow(Follow._declarator_suffix_in_direct_declarator1083);
					declarator_suffix95=declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator_suffix95.Tree, declarator_suffix95, retval);

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_declarator", 23);
			LeaveRule("direct_declarator", 23);
			LeaveRule_direct_declarator();
			if (state.backtracking > 0) { Memoize(input, 23, direct_declarator_StartIndex); }

		}
		DebugLocation(231, 4);
		} finally { DebugExitRule(GrammarFileName, "direct_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_declarator"

	partial void EnterRule_declarator_suffix();
	partial void LeaveRule_declarator_suffix();

	// $ANTLR start "declarator_suffix"
	// C.g:233:1: declarator_suffix : ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' );
	[GrammarRule("declarator_suffix")]
	public XAstParserRuleReturnScope declarator_suffix()
	{
		EnterRule_declarator_suffix();
		EnterRule("declarator_suffix", 24);
		var retval = new XAstParserRuleReturnScope("declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken char_literal106 = default(IToken);
		IToken char_literal107 = default(IToken);
		IToken char_literal108 = default(IToken);
		XAstParserRuleReturnScope constant_expression97 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list102 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier_list105 = default(XAstParserRuleReturnScope);

		object char_literal96_tree = default(object);
		object char_literal98_tree = default(object);
		object char_literal99_tree = default(object);
		object char_literal100_tree = default(object);
		object char_literal101_tree = default(object);
		object char_literal103_tree = default(object);
		object char_literal104_tree = default(object);
		object char_literal106_tree = default(object);
		object char_literal107_tree = default(object);
		object char_literal108_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "declarator_suffix");
		DebugLocation(233, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C.g:234:5: ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' )
			int alt38=5;
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==59))
			{
				int LA38_1 = input.LA(2);

				if ((LA38_1==60))
				{
					alt38 = 2;
				}
				else if ((LA38_1==CHARACTER_LITERAL||LA38_1==DECIMAL_LITERAL||LA38_1==FLOATING_POINT_LITERAL||LA38_1==HEX_LITERAL||LA38_1==IDENTIFIER||LA38_1==OCTAL_LITERAL||LA38_1==STRING_LITERAL||LA38_1==23||LA38_1==28||LA38_1==30||LA38_1==32||(LA38_1>=34 && LA38_1<=35)||(LA38_1>=38 && LA38_1<=39)||LA38_1==63||(LA38_1>=66 && LA38_1<=67)||LA38_1==70||LA38_1==100||LA38_1==116))
				{
					alt38 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA38_0==30))
			{
				switch (input.LA(2))
				{
				case 31:
					{
					alt38 = 5;
					}
					break;
				case 65:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 76:
				case 79:
				case 80:
				case 84:
				case 86:
				case 87:
				case 88:
				case 92:
				case 93:
				case 94:
				case 95:
				case 96:
				case 98:
				case 99:
				case 101:
				case 102:
				case 105:
				case 106:
				case 107:
				case 108:
				case 109:
					{
					alt38 = 3;
					}
					break;
				case IDENTIFIER:
					{
					int LA38_33 = input.LA(3);

					if ((EvaluatePredicate(synpred68_C_fragment)))
					{
						alt38 = 3;
					}
					else if ((EvaluatePredicate(synpred69_C_fragment)))
					{
						alt38 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 38, 33, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 38, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:234:9: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(234, 9);
				char_literal96=(IToken)Match(input,59,Follow._59_in_declarator_suffix1103); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal96_tree = (object)adaptor.Create(char_literal96, retval);
				adaptor.AddChild(root_0, char_literal96_tree);
				}
				DebugLocation(234, 13);
				PushFollow(Follow._constant_expression_in_declarator_suffix1105);
				constant_expression97=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression97.Tree, constant_expression97, retval);
				DebugLocation(234, 33);
				char_literal98=(IToken)Match(input,60,Follow._60_in_declarator_suffix1107); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal98_tree = (object)adaptor.Create(char_literal98, retval);
				adaptor.AddChild(root_0, char_literal98_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:235:9: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(235, 9);
				char_literal99=(IToken)Match(input,59,Follow._59_in_declarator_suffix1117); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal99_tree = (object)adaptor.Create(char_literal99, retval);
				adaptor.AddChild(root_0, char_literal99_tree);
				}
				DebugLocation(235, 13);
				char_literal100=(IToken)Match(input,60,Follow._60_in_declarator_suffix1119); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal100_tree = (object)adaptor.Create(char_literal100, retval);
				adaptor.AddChild(root_0, char_literal100_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:236:9: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(236, 9);
				char_literal101=(IToken)Match(input,30,Follow._30_in_declarator_suffix1129); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal101_tree = (object)adaptor.Create(char_literal101, retval);
				adaptor.AddChild(root_0, char_literal101_tree);
				}
				DebugLocation(236, 13);
				PushFollow(Follow._parameter_type_list_in_declarator_suffix1131);
				parameter_type_list102=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list102.Tree, parameter_type_list102, retval);
				DebugLocation(236, 33);
				char_literal103=(IToken)Match(input,31,Follow._31_in_declarator_suffix1133); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal103_tree = (object)adaptor.Create(char_literal103, retval);
				adaptor.AddChild(root_0, char_literal103_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:237:9: '(' identifier_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(237, 9);
				char_literal104=(IToken)Match(input,30,Follow._30_in_declarator_suffix1143); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal104_tree = (object)adaptor.Create(char_literal104, retval);
				adaptor.AddChild(root_0, char_literal104_tree);
				}
				DebugLocation(237, 13);
				PushFollow(Follow._identifier_list_in_declarator_suffix1145);
				identifier_list105=identifier_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier_list105.Tree, identifier_list105, retval);
				DebugLocation(237, 29);
				char_literal106=(IToken)Match(input,31,Follow._31_in_declarator_suffix1147); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal106_tree = (object)adaptor.Create(char_literal106, retval);
				adaptor.AddChild(root_0, char_literal106_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:238:9: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(238, 9);
				char_literal107=(IToken)Match(input,30,Follow._30_in_declarator_suffix1157); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal107_tree = (object)adaptor.Create(char_literal107, retval);
				adaptor.AddChild(root_0, char_literal107_tree);
				}
				DebugLocation(238, 13);
				char_literal108=(IToken)Match(input,31,Follow._31_in_declarator_suffix1159); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal108_tree = (object)adaptor.Create(char_literal108, retval);
				adaptor.AddChild(root_0, char_literal108_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator_suffix", 24);
			LeaveRule("declarator_suffix", 24);
			LeaveRule_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 24, declarator_suffix_StartIndex); }

		}
		DebugLocation(239, 4);
		} finally { DebugExitRule(GrammarFileName, "declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "declarator_suffix"

	partial void EnterRule_pointer();
	partial void LeaveRule_pointer();

	// $ANTLR start "pointer"
	// C.g:241:1: pointer : ( '*' ( type_qualifier | gcc_attribute )* )+ ;
	[GrammarRule("pointer")]
	public XAstParserRuleReturnScope pointer()
	{
		EnterRule_pointer();
		EnterRule("pointer", 25);
		var retval = new XAstParserRuleReturnScope("pointer");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal109 = default(IToken);
		XAstParserRuleReturnScope type_qualifier110 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute111 = default(XAstParserRuleReturnScope);

		object char_literal109_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pointer");
		DebugLocation(241, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C.g:242:5: ( ( '*' ( type_qualifier | gcc_attribute )* )+ )
			DebugEnterAlt(1);
			// C.g:242:7: ( '*' ( type_qualifier | gcc_attribute )* )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(242, 7);
			// C.g:242:7: ( '*' ( type_qualifier | gcc_attribute )* )+
			int cnt40=0;
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				try
				{
					alt40 = dfa40.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:242:8: '*' ( type_qualifier | gcc_attribute )*
					{
					DebugLocation(242, 8);
					char_literal109=(IToken)Match(input,32,Follow._32_in_pointer1179); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal109_tree = (object)adaptor.Create(char_literal109, retval);
					adaptor.AddChild(root_0, char_literal109_tree);
					}
					DebugLocation(242, 12);
					// C.g:242:12: ( type_qualifier | gcc_attribute )*
					try { DebugEnterSubRule(39);
					while (true)
					{
						int alt39=3;
						try { DebugEnterDecision(39, false);
						try
						{
							alt39 = dfa39.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(39); }
						switch ( alt39 )
						{
						case 1:
							DebugEnterAlt(1);
							// C.g:242:13: type_qualifier
							{
							DebugLocation(242, 13);
							PushFollow(Follow._type_qualifier_in_pointer1182);
							type_qualifier110=type_qualifier();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier110.Tree, type_qualifier110, retval);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C.g:242:30: gcc_attribute
							{
							DebugLocation(242, 30);
							PushFollow(Follow._gcc_attribute_in_pointer1186);
							gcc_attribute111=gcc_attribute();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute111.Tree, gcc_attribute111, retval);

							}
							break;

						default:
							goto loop39;
						}
					}

					loop39:
						;

					} finally { DebugExitSubRule(39); }


					}
					break;

				default:
					if (cnt40 >= 1)
						goto loop40;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee40 = new EarlyExitException( 40, input );
					DebugRecognitionException(eee40);
					throw eee40;
				}
				cnt40++;
			}
			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer", 25);
			LeaveRule("pointer", 25);
			LeaveRule_pointer();
			if (state.backtracking > 0) { Memoize(input, 25, pointer_StartIndex); }

		}
		DebugLocation(243, 4);
		} finally { DebugExitRule(GrammarFileName, "pointer"); }
		return retval;

	}
	// $ANTLR end "pointer"

	partial void EnterRule_parameter_type_list();
	partial void LeaveRule_parameter_type_list();

	// $ANTLR start "parameter_type_list"
	// C.g:245:1: parameter_type_list : parameter_list ( ',' '...' )? ;
	[GrammarRule("parameter_type_list")]
	public XAstParserRuleReturnScope parameter_type_list()
	{
		EnterRule_parameter_type_list();
		EnterRule("parameter_type_list", 26);
		var retval = new XAstParserRuleReturnScope("parameter_type_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_type_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal113 = default(IToken);
		IToken string_literal114 = default(IToken);
		XAstParserRuleReturnScope parameter_list112 = default(XAstParserRuleReturnScope);

		object char_literal113_tree = default(object);
		object string_literal114_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_type_list");
		DebugLocation(245, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C.g:246:5: ( parameter_list ( ',' '...' )? )
			DebugEnterAlt(1);
			// C.g:246:7: parameter_list ( ',' '...' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(246, 7);
			PushFollow(Follow._parameter_list_in_parameter_type_list1207);
			parameter_list112=parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_list112.Tree, parameter_list112, retval);
			DebugLocation(246, 22);
			// C.g:246:22: ( ',' '...' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==37))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:246:23: ',' '...'
				{
				DebugLocation(246, 23);
				char_literal113=(IToken)Match(input,37,Follow._37_in_parameter_type_list1210); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal113_tree = (object)adaptor.Create(char_literal113, retval);
				adaptor.AddChild(root_0, char_literal113_tree);
				}
				DebugLocation(246, 27);
				string_literal114=(IToken)Match(input,43,Follow._43_in_parameter_type_list1212); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal114_tree = (object)adaptor.Create(string_literal114, retval);
				adaptor.AddChild(root_0, string_literal114_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_type_list", 26);
			LeaveRule("parameter_type_list", 26);
			LeaveRule_parameter_type_list();
			if (state.backtracking > 0) { Memoize(input, 26, parameter_type_list_StartIndex); }

		}
		DebugLocation(247, 4);
		} finally { DebugExitRule(GrammarFileName, "parameter_type_list"); }
		return retval;

	}
	// $ANTLR end "parameter_type_list"

	partial void EnterRule_parameter_list();
	partial void LeaveRule_parameter_list();

	// $ANTLR start "parameter_list"
	// C.g:249:1: parameter_list : parameter_declaration ( ',' parameter_declaration )* ;
	[GrammarRule("parameter_list")]
	public XAstParserRuleReturnScope parameter_list()
	{
		EnterRule_parameter_list();
		EnterRule("parameter_list", 27);
		var retval = new XAstParserRuleReturnScope("parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal116 = default(IToken);
		XAstParserRuleReturnScope parameter_declaration115 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_declaration117 = default(XAstParserRuleReturnScope);

		object char_literal116_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_list");
		DebugLocation(249, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C.g:250:5: ( parameter_declaration ( ',' parameter_declaration )* )
			DebugEnterAlt(1);
			// C.g:250:7: parameter_declaration ( ',' parameter_declaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(250, 7);
			PushFollow(Follow._parameter_declaration_in_parameter_list1231);
			parameter_declaration115=parameter_declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration115.Tree, parameter_declaration115, retval);
			DebugLocation(250, 29);
			// C.g:250:29: ( ',' parameter_declaration )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==37))
				{
					int LA42_1 = input.LA(2);

					if ((LA42_1==IDENTIFIER||LA42_1==65||(LA42_1>=68 && LA42_1<=74)||LA42_1==76||(LA42_1>=79 && LA42_1<=80)||LA42_1==84||(LA42_1>=86 && LA42_1<=88)||(LA42_1>=92 && LA42_1<=96)||(LA42_1>=98 && LA42_1<=99)||(LA42_1>=101 && LA42_1<=102)||(LA42_1>=105 && LA42_1<=109)))
					{
						alt42 = 1;
					}


				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:250:30: ',' parameter_declaration
					{
					DebugLocation(250, 30);
					char_literal116=(IToken)Match(input,37,Follow._37_in_parameter_list1234); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal116_tree = (object)adaptor.Create(char_literal116, retval);
					adaptor.AddChild(root_0, char_literal116_tree);
					}
					DebugLocation(250, 34);
					PushFollow(Follow._parameter_declaration_in_parameter_list1236);
					parameter_declaration117=parameter_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration117.Tree, parameter_declaration117, retval);

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_list", 27);
			LeaveRule("parameter_list", 27);
			LeaveRule_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 27, parameter_list_StartIndex); }

		}
		DebugLocation(251, 4);
		} finally { DebugExitRule(GrammarFileName, "parameter_list"); }
		return retval;

	}
	// $ANTLR end "parameter_list"

	partial void EnterRule_parameter_declaration();
	partial void LeaveRule_parameter_declaration();

	// $ANTLR start "parameter_declaration"
	// C.g:253:1: parameter_declaration : declaration_specifiers ( declarator | abstract_declarator )* ;
	[GrammarRule("parameter_declaration")]
	public XAstParserRuleReturnScope parameter_declaration()
	{
		EnterRule_parameter_declaration();
		EnterRule("parameter_declaration", 28);
		var retval = new XAstParserRuleReturnScope("parameter_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers118 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator119 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator120 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "parameter_declaration");
		DebugLocation(253, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C.g:254:5: ( declaration_specifiers ( declarator | abstract_declarator )* )
			DebugEnterAlt(1);
			// C.g:254:7: declaration_specifiers ( declarator | abstract_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(254, 7);
			PushFollow(Follow._declaration_specifiers_in_parameter_declaration1255);
			declaration_specifiers118=declaration_specifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers118.Tree, declaration_specifiers118, retval);
			DebugLocation(254, 30);
			// C.g:254:30: ( declarator | abstract_declarator )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=3;
				try { DebugEnterDecision(43, false);
				switch (input.LA(1))
				{
				case 32:
					{
					int LA43_4 = input.LA(2);

					if ((EvaluatePredicate(synpred75_C_fragment)))
					{
						alt43 = 1;
					}
					else if ((EvaluatePredicate(synpred76_C_fragment)))
					{
						alt43 = 2;
					}


					}
					break;
				case IDENTIFIER:
					{
					alt43 = 1;
					}
					break;
				case 30:
					{
					switch (input.LA(2))
					{
					case 65:
						{
						int LA43_17 = input.LA(3);

						if ((EvaluatePredicate(synpred75_C_fragment)))
						{
							alt43 = 1;
						}
						else if ((EvaluatePredicate(synpred76_C_fragment)))
						{
							alt43 = 2;
						}


						}
						break;
					case 32:
						{
						int LA43_18 = input.LA(3);

						if ((EvaluatePredicate(synpred75_C_fragment)))
						{
							alt43 = 1;
						}
						else if ((EvaluatePredicate(synpred76_C_fragment)))
						{
							alt43 = 2;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA43_19 = input.LA(3);

						if ((EvaluatePredicate(synpred75_C_fragment)))
						{
							alt43 = 1;
						}
						else if ((EvaluatePredicate(synpred76_C_fragment)))
						{
							alt43 = 2;
						}


						}
						break;
					case 30:
						{
						int LA43_20 = input.LA(3);

						if ((EvaluatePredicate(synpred75_C_fragment)))
						{
							alt43 = 1;
						}
						else if ((EvaluatePredicate(synpred76_C_fragment)))
						{
							alt43 = 2;
						}


						}
						break;
					case 31:
					case 59:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 76:
					case 79:
					case 80:
					case 84:
					case 86:
					case 87:
					case 88:
					case 92:
					case 93:
					case 94:
					case 95:
					case 96:
					case 98:
					case 99:
					case 101:
					case 102:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
						{
						alt43 = 2;
						}
						break;
					}

					}
					break;
				case 59:
					{
					alt43 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:254:31: declarator
					{
					DebugLocation(254, 31);
					PushFollow(Follow._declarator_in_parameter_declaration1258);
					declarator119=declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator119.Tree, declarator119, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:254:42: abstract_declarator
					{
					DebugLocation(254, 42);
					PushFollow(Follow._abstract_declarator_in_parameter_declaration1260);
					abstract_declarator120=abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator120.Tree, abstract_declarator120, retval);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_declaration", 28);
			LeaveRule("parameter_declaration", 28);
			LeaveRule_parameter_declaration();
			if (state.backtracking > 0) { Memoize(input, 28, parameter_declaration_StartIndex); }

		}
		DebugLocation(255, 4);
		} finally { DebugExitRule(GrammarFileName, "parameter_declaration"); }
		return retval;

	}
	// $ANTLR end "parameter_declaration"

	partial void EnterRule_identifier_list();
	partial void LeaveRule_identifier_list();

	// $ANTLR start "identifier_list"
	// C.g:257:1: identifier_list : IDENTIFIER ( ',' IDENTIFIER )* ;
	[GrammarRule("identifier_list")]
	public XAstParserRuleReturnScope identifier_list()
	{
		EnterRule_identifier_list();
		EnterRule("identifier_list", 29);
		var retval = new XAstParserRuleReturnScope("identifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int identifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER121 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken IDENTIFIER123 = default(IToken);

		object IDENTIFIER121_tree = default(object);
		object char_literal122_tree = default(object);
		object IDENTIFIER123_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifier_list");
		DebugLocation(257, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C.g:258:5: ( IDENTIFIER ( ',' IDENTIFIER )* )
			DebugEnterAlt(1);
			// C.g:258:7: IDENTIFIER ( ',' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(258, 7);
			IDENTIFIER121=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list1279), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER121_tree = (object)adaptor.Create(IDENTIFIER121, retval);
			adaptor.AddChild(root_0, IDENTIFIER121_tree);
			}
			DebugLocation(258, 18);
			// C.g:258:18: ( ',' IDENTIFIER )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==37))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:258:19: ',' IDENTIFIER
					{
					DebugLocation(258, 19);
					char_literal122=(IToken)Match(input,37,Follow._37_in_identifier_list1282); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal122_tree = (object)adaptor.Create(char_literal122, retval);
					adaptor.AddChild(root_0, char_literal122_tree);
					}
					DebugLocation(258, 23);
					IDENTIFIER123=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list1284), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER123_tree = (object)adaptor.Create(IDENTIFIER123, retval);
					adaptor.AddChild(root_0, IDENTIFIER123_tree);
					}

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier_list", 29);
			LeaveRule("identifier_list", 29);
			LeaveRule_identifier_list();
			if (state.backtracking > 0) { Memoize(input, 29, identifier_list_StartIndex); }

		}
		DebugLocation(259, 4);
		} finally { DebugExitRule(GrammarFileName, "identifier_list"); }
		return retval;

	}
	// $ANTLR end "identifier_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// C.g:261:1: type_name : specifier_qualifier_list ( abstract_declarator )? ;
	[GrammarRule("type_name")]
	public XAstParserRuleReturnScope type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 30);
		var retval = new XAstParserRuleReturnScope("type_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope specifier_qualifier_list124 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator125 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(261, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C.g:262:5: ( specifier_qualifier_list ( abstract_declarator )? )
			DebugEnterAlt(1);
			// C.g:262:7: specifier_qualifier_list ( abstract_declarator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(262, 7);
			PushFollow(Follow._specifier_qualifier_list_in_type_name1303);
			specifier_qualifier_list124=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list124.Tree, specifier_qualifier_list124, retval);
			DebugLocation(262, 32);
			// C.g:262:32: ( abstract_declarator )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==30||LA45_0==32||LA45_0==59))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:262:32: abstract_declarator
				{
				DebugLocation(262, 32);
				PushFollow(Follow._abstract_declarator_in_type_name1305);
				abstract_declarator125=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator125.Tree, abstract_declarator125, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 30);
			LeaveRule("type_name", 30);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 30, type_name_StartIndex); }

		}
		DebugLocation(263, 4);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_abstract_declarator();
	partial void LeaveRule_abstract_declarator();

	// $ANTLR start "abstract_declarator"
	// C.g:265:1: abstract_declarator : ( pointer | ( pointer )? direct_abstract_declarator ( gcc_asm_expression )? ( gcc_attribute_list )? );
	[GrammarRule("abstract_declarator")]
	public XAstParserRuleReturnScope abstract_declarator()
	{
		EnterRule_abstract_declarator();
		EnterRule("abstract_declarator", 31);
		var retval = new XAstParserRuleReturnScope("abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer126 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer127 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator128 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_expression129 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list130 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "abstract_declarator");
		DebugLocation(265, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C.g:266:5: ( pointer | ( pointer )? direct_abstract_declarator ( gcc_asm_expression )? ( gcc_attribute_list )? )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==32))
			{
				int LA49_1 = input.LA(2);

				if ((EvaluatePredicate(synpred79_C_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA49_0==30||LA49_0==59))
			{
				alt49 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:266:7: pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(266, 7);
				PushFollow(Follow._pointer_in_abstract_declarator1323);
				pointer126=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer126.Tree, pointer126, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:267:7: ( pointer )? direct_abstract_declarator ( gcc_asm_expression )? ( gcc_attribute_list )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(267, 7);
				// C.g:267:7: ( pointer )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==32))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:267:7: pointer
					{
					DebugLocation(267, 7);
					PushFollow(Follow._pointer_in_abstract_declarator1331);
					pointer127=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer127.Tree, pointer127, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(267, 16);
				PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator1334);
				direct_abstract_declarator128=direct_abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator128.Tree, direct_abstract_declarator128, retval);
				DebugLocation(267, 43);
				// C.g:267:43: ( gcc_asm_expression )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==64||LA47_0==75))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:267:43: gcc_asm_expression
					{
					DebugLocation(267, 43);
					PushFollow(Follow._gcc_asm_expression_in_abstract_declarator1336);
					gcc_asm_expression129=gcc_asm_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_expression129.Tree, gcc_asm_expression129, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(267, 63);
				// C.g:267:63: ( gcc_attribute_list )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==65))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:267:63: gcc_attribute_list
					{
					DebugLocation(267, 63);
					PushFollow(Follow._gcc_attribute_list_in_abstract_declarator1339);
					gcc_attribute_list130=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list130.Tree, gcc_attribute_list130, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator", 31);
			LeaveRule("abstract_declarator", 31);
			LeaveRule_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 31, abstract_declarator_StartIndex); }

		}
		DebugLocation(268, 4);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator"

	partial void EnterRule_direct_abstract_declarator();
	partial void LeaveRule_direct_abstract_declarator();

	// $ANTLR start "direct_abstract_declarator"
	// C.g:270:1: direct_abstract_declarator : ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* ;
	[GrammarRule("direct_abstract_declarator")]
	public XAstParserRuleReturnScope direct_abstract_declarator()
	{
		EnterRule_direct_abstract_declarator();
		EnterRule("direct_abstract_declarator", 32);
		var retval = new XAstParserRuleReturnScope("direct_abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal131 = default(IToken);
		IToken char_literal134 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_list132 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator133 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix135 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix136 = default(XAstParserRuleReturnScope);

		object char_literal131_tree = default(object);
		object char_literal134_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_abstract_declarator");
		DebugLocation(270, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C.g:271:5: ( ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:271:7: ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(271, 7);
			// C.g:271:7: ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==30))
			{
				switch (input.LA(2))
				{
				case 65:
					{
					int LA51_3 = input.LA(3);

					if ((EvaluatePredicate(synpred84_C_fragment)))
					{
						alt51 = 1;
					}
					else if ((true))
					{
						alt51 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 51, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
				case 32:
				case 59:
					{
					alt51 = 1;
					}
					break;
				case IDENTIFIER:
				case 31:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 76:
				case 79:
				case 80:
				case 84:
				case 86:
				case 87:
				case 88:
				case 92:
				case 93:
				case 94:
				case 95:
				case 96:
				case 98:
				case 99:
				case 101:
				case 102:
				case 105:
				case 106:
				case 107:
				case 108:
				case 109:
					{
					alt51 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 51, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA51_0==59))
			{
				alt51 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:271:9: '(' ( gcc_attribute_list )? abstract_declarator ')'
				{
				DebugLocation(271, 9);
				char_literal131=(IToken)Match(input,30,Follow._30_in_direct_abstract_declarator1359); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal131_tree = (object)adaptor.Create(char_literal131, retval);
				adaptor.AddChild(root_0, char_literal131_tree);
				}
				DebugLocation(271, 13);
				// C.g:271:13: ( gcc_attribute_list )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==65))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:271:13: gcc_attribute_list
					{
					DebugLocation(271, 13);
					PushFollow(Follow._gcc_attribute_list_in_direct_abstract_declarator1361);
					gcc_attribute_list132=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list132.Tree, gcc_attribute_list132, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(271, 33);
				PushFollow(Follow._abstract_declarator_in_direct_abstract_declarator1364);
				abstract_declarator133=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator133.Tree, abstract_declarator133, retval);
				DebugLocation(271, 53);
				char_literal134=(IToken)Match(input,31,Follow._31_in_direct_abstract_declarator1366); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal134_tree = (object)adaptor.Create(char_literal134, retval);
				adaptor.AddChild(root_0, char_literal134_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:271:59: abstract_declarator_suffix
				{
				DebugLocation(271, 59);
				PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator1370);
				abstract_declarator_suffix135=abstract_declarator_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix135.Tree, abstract_declarator_suffix135, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(271, 88);
			// C.g:271:88: ( abstract_declarator_suffix )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==30))
				{
					switch (input.LA(2))
					{
					case 65:
						{
						int LA52_10 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA52_12 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 76:
					case 87:
					case 95:
					case 101:
						{
						int LA52_15 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 108:
						{
						int LA52_16 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 79:
						{
						int LA52_17 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 98:
						{
						int LA52_18 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 93:
						{
						int LA52_19 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 94:
						{
						int LA52_20 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 88:
						{
						int LA52_21 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 84:
						{
						int LA52_22 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 99:
						{
						int LA52_23 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 107:
						{
						int LA52_24 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 102:
					case 106:
						{
						int LA52_25 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 86:
						{
						int LA52_26 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 105:
						{
						int LA52_27 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 69:
					case 73:
					case 74:
					case 80:
					case 96:
					case 109:
						{
						int LA52_28 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 68:
					case 71:
					case 72:
					case 92:
						{
						int LA52_29 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 70:
						{
						int LA52_30 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 31:
						{
						int LA52_31 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					}

				}
				else if ((LA52_0==59))
				{
					switch (input.LA(2))
					{
					case 69:
					case 73:
					case 74:
					case 80:
					case 96:
					case 109:
						{
						int LA52_32 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 65:
						{
						int LA52_33 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 30:
						{
						int LA52_34 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA52_35 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA52_36 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA52_37 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA52_38 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA52_39 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA52_40 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA52_41 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 67:
						{
						int LA52_42 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 66:
						{
						int LA52_43 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 35:
						{
						int LA52_44 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 39:
						{
						int LA52_45 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 32:
						{
						int LA52_46 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 100:
						{
						int LA52_47 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 63:
						{
						int LA52_48 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 70:
						{
						int LA52_49 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 60:
						{
						int LA52_50 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 34:
					case 38:
					case 116:
						{
						int LA52_51 = input.LA(3);

						if ((EvaluatePredicate(synpred85_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					}

				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:271:88: abstract_declarator_suffix
					{
					DebugLocation(271, 88);
					PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator1374);
					abstract_declarator_suffix136=abstract_declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix136.Tree, abstract_declarator_suffix136, retval);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_abstract_declarator", 32);
			LeaveRule("direct_abstract_declarator", 32);
			LeaveRule_direct_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 32, direct_abstract_declarator_StartIndex); }

		}
		DebugLocation(272, 4);
		} finally { DebugExitRule(GrammarFileName, "direct_abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_abstract_declarator"

	partial void EnterRule_abstract_declarator_suffix();
	partial void LeaveRule_abstract_declarator_suffix();

	// $ANTLR start "abstract_declarator_suffix"
	// C.g:274:1: abstract_declarator_suffix : ( '[' ( gcc_array_type_modifier )* ( constant_expression )? ']' | '[' ( gcc_array_type_modifier )* '*' ']' | '(' ( parameter_type_list )? ')' );
	[GrammarRule("abstract_declarator_suffix")]
	public XAstParserRuleReturnScope abstract_declarator_suffix()
	{
		EnterRule_abstract_declarator_suffix();
		EnterRule("abstract_declarator_suffix", 33);
		var retval = new XAstParserRuleReturnScope("abstract_declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal137 = default(IToken);
		IToken char_literal140 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		IToken char_literal144 = default(IToken);
		IToken char_literal145 = default(IToken);
		IToken char_literal147 = default(IToken);
		XAstParserRuleReturnScope gcc_array_type_modifier138 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression139 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_array_type_modifier142 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list146 = default(XAstParserRuleReturnScope);

		object char_literal137_tree = default(object);
		object char_literal140_tree = default(object);
		object char_literal141_tree = default(object);
		object char_literal143_tree = default(object);
		object char_literal144_tree = default(object);
		object char_literal145_tree = default(object);
		object char_literal147_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "abstract_declarator_suffix");
		DebugLocation(274, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C.g:275:5: ( '[' ( gcc_array_type_modifier )* ( constant_expression )? ']' | '[' ( gcc_array_type_modifier )* '*' ']' | '(' ( parameter_type_list )? ')' )
			int alt57=3;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==59))
			{
				switch (input.LA(2))
				{
				case 69:
				case 73:
				case 74:
				case 80:
				case 96:
				case 109:
					{
					int LA57_3 = input.LA(3);

					if ((EvaluatePredicate(synpred88_C_fragment)))
					{
						alt57 = 1;
					}
					else if ((EvaluatePredicate(synpred90_C_fragment)))
					{
						alt57 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 65:
					{
					int LA57_4 = input.LA(3);

					if ((EvaluatePredicate(synpred88_C_fragment)))
					{
						alt57 = 1;
					}
					else if ((EvaluatePredicate(synpred90_C_fragment)))
					{
						alt57 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DECIMAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case IDENTIFIER:
				case OCTAL_LITERAL:
				case STRING_LITERAL:
				case 23:
				case 28:
				case 30:
				case 34:
				case 35:
				case 38:
				case 39:
				case 60:
				case 63:
				case 66:
				case 67:
				case 70:
				case 100:
				case 116:
					{
					alt57 = 1;
					}
					break;
				case 32:
					{
					int LA57_17 = input.LA(3);

					if ((EvaluatePredicate(synpred88_C_fragment)))
					{
						alt57 = 1;
					}
					else if ((EvaluatePredicate(synpred90_C_fragment)))
					{
						alt57 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 17, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA57_0==30))
			{
				alt57 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:275:7: '[' ( gcc_array_type_modifier )* ( constant_expression )? ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(275, 7);
				char_literal137=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix1392); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal137_tree = (object)adaptor.Create(char_literal137, retval);
				adaptor.AddChild(root_0, char_literal137_tree);
				}
				DebugLocation(275, 11);
				// C.g:275:11: ( gcc_array_type_modifier )*
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_0 = input.LA(1);

					if ((LA53_0==65||LA53_0==69||(LA53_0>=73 && LA53_0<=74)||LA53_0==80||LA53_0==96||LA53_0==109))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch ( alt53 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:275:11: gcc_array_type_modifier
						{
						DebugLocation(275, 11);
						PushFollow(Follow._gcc_array_type_modifier_in_abstract_declarator_suffix1394);
						gcc_array_type_modifier138=gcc_array_type_modifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_array_type_modifier138.Tree, gcc_array_type_modifier138, retval);

						}
						break;

					default:
						goto loop53;
					}
				}

				loop53:
					;

				} finally { DebugExitSubRule(53); }

				DebugLocation(275, 36);
				// C.g:275:36: ( constant_expression )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==CHARACTER_LITERAL||LA54_0==DECIMAL_LITERAL||LA54_0==FLOATING_POINT_LITERAL||LA54_0==HEX_LITERAL||LA54_0==IDENTIFIER||LA54_0==OCTAL_LITERAL||LA54_0==STRING_LITERAL||LA54_0==23||LA54_0==28||LA54_0==30||LA54_0==32||(LA54_0>=34 && LA54_0<=35)||(LA54_0>=38 && LA54_0<=39)||LA54_0==63||(LA54_0>=66 && LA54_0<=67)||LA54_0==70||LA54_0==100||LA54_0==116))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:275:36: constant_expression
					{
					DebugLocation(275, 36);
					PushFollow(Follow._constant_expression_in_abstract_declarator_suffix1397);
					constant_expression139=constant_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression139.Tree, constant_expression139, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(275, 57);
				char_literal140=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix1400); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal140_tree = (object)adaptor.Create(char_literal140, retval);
				adaptor.AddChild(root_0, char_literal140_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:276:7: '[' ( gcc_array_type_modifier )* '*' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(276, 7);
				char_literal141=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix1408); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal141_tree = (object)adaptor.Create(char_literal141, retval);
				adaptor.AddChild(root_0, char_literal141_tree);
				}
				DebugLocation(276, 11);
				// C.g:276:11: ( gcc_array_type_modifier )*
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=2;
					try { DebugEnterDecision(55, false);
					int LA55_0 = input.LA(1);

					if ((LA55_0==65||LA55_0==69||(LA55_0>=73 && LA55_0<=74)||LA55_0==80||LA55_0==96||LA55_0==109))
					{
						alt55 = 1;
					}


					} finally { DebugExitDecision(55); }
					switch ( alt55 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:276:11: gcc_array_type_modifier
						{
						DebugLocation(276, 11);
						PushFollow(Follow._gcc_array_type_modifier_in_abstract_declarator_suffix1410);
						gcc_array_type_modifier142=gcc_array_type_modifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_array_type_modifier142.Tree, gcc_array_type_modifier142, retval);

						}
						break;

					default:
						goto loop55;
					}
				}

				loop55:
					;

				} finally { DebugExitSubRule(55); }

				DebugLocation(276, 36);
				char_literal143=(IToken)Match(input,32,Follow._32_in_abstract_declarator_suffix1413); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal143_tree = (object)adaptor.Create(char_literal143, retval);
				adaptor.AddChild(root_0, char_literal143_tree);
				}
				DebugLocation(276, 40);
				char_literal144=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix1415); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal144_tree = (object)adaptor.Create(char_literal144, retval);
				adaptor.AddChild(root_0, char_literal144_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:277:7: '(' ( parameter_type_list )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(277, 7);
				char_literal145=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix1423); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal145_tree = (object)adaptor.Create(char_literal145, retval);
				adaptor.AddChild(root_0, char_literal145_tree);
				}
				DebugLocation(277, 11);
				// C.g:277:11: ( parameter_type_list )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENTIFIER||LA56_0==65||(LA56_0>=68 && LA56_0<=74)||LA56_0==76||(LA56_0>=79 && LA56_0<=80)||LA56_0==84||(LA56_0>=86 && LA56_0<=88)||(LA56_0>=92 && LA56_0<=96)||(LA56_0>=98 && LA56_0<=99)||(LA56_0>=101 && LA56_0<=102)||(LA56_0>=105 && LA56_0<=109)))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:277:11: parameter_type_list
					{
					DebugLocation(277, 11);
					PushFollow(Follow._parameter_type_list_in_abstract_declarator_suffix1425);
					parameter_type_list146=parameter_type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list146.Tree, parameter_type_list146, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(277, 32);
				char_literal147=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix1428); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal147_tree = (object)adaptor.Create(char_literal147, retval);
				adaptor.AddChild(root_0, char_literal147_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator_suffix", 33);
			LeaveRule("abstract_declarator_suffix", 33);
			LeaveRule_abstract_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 33, abstract_declarator_suffix_StartIndex); }

		}
		DebugLocation(278, 4);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator_suffix"

	partial void EnterRule_initializer();
	partial void LeaveRule_initializer();

	// $ANTLR start "initializer"
	// C.g:280:1: initializer : ( assignment_expression | '{' initializer_list ( ',' )? '}' );
	[GrammarRule("initializer")]
	public XAstParserRuleReturnScope initializer()
	{
		EnterRule_initializer();
		EnterRule("initializer", 34);
		var retval = new XAstParserRuleReturnScope("initializer");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal149 = default(IToken);
		IToken char_literal151 = default(IToken);
		IToken char_literal152 = default(IToken);
		XAstParserRuleReturnScope assignment_expression148 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer_list150 = default(XAstParserRuleReturnScope);

		object char_literal149_tree = default(object);
		object char_literal151_tree = default(object);
		object char_literal152_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer");
		DebugLocation(280, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C.g:281:5: ( assignment_expression | '{' initializer_list ( ',' )? '}' )
			int alt59=2;
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==CHARACTER_LITERAL||LA59_0==DECIMAL_LITERAL||LA59_0==FLOATING_POINT_LITERAL||LA59_0==HEX_LITERAL||LA59_0==IDENTIFIER||LA59_0==OCTAL_LITERAL||LA59_0==STRING_LITERAL||LA59_0==23||LA59_0==28||LA59_0==30||LA59_0==32||(LA59_0>=34 && LA59_0<=35)||(LA59_0>=38 && LA59_0<=39)||LA59_0==63||(LA59_0>=66 && LA59_0<=67)||LA59_0==70||LA59_0==100||LA59_0==116))
			{
				alt59 = 1;
			}
			else if ((LA59_0==111))
			{
				alt59 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:281:7: assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(281, 7);
				PushFollow(Follow._assignment_expression_in_initializer1449);
				assignment_expression148=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression148.Tree, assignment_expression148, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:282:7: '{' initializer_list ( ',' )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(282, 7);
				char_literal149=(IToken)Match(input,111,Follow._111_in_initializer1457); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal149_tree = (object)adaptor.Create(char_literal149, retval);
				adaptor.AddChild(root_0, char_literal149_tree);
				}
				DebugLocation(282, 11);
				PushFollow(Follow._initializer_list_in_initializer1459);
				initializer_list150=initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer_list150.Tree, initializer_list150, retval);
				DebugLocation(282, 28);
				// C.g:282:28: ( ',' )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==37))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:282:28: ','
					{
					DebugLocation(282, 28);
					char_literal151=(IToken)Match(input,37,Follow._37_in_initializer1461); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal151_tree = (object)adaptor.Create(char_literal151, retval);
					adaptor.AddChild(root_0, char_literal151_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(58); }

				DebugLocation(282, 33);
				char_literal152=(IToken)Match(input,115,Follow._115_in_initializer1464); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal152_tree = (object)adaptor.Create(char_literal152, retval);
				adaptor.AddChild(root_0, char_literal152_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer", 34);
			LeaveRule("initializer", 34);
			LeaveRule_initializer();
			if (state.backtracking > 0) { Memoize(input, 34, initializer_StartIndex); }

		}
		DebugLocation(283, 4);
		} finally { DebugExitRule(GrammarFileName, "initializer"); }
		return retval;

	}
	// $ANTLR end "initializer"

	partial void EnterRule_initializer_list();
	partial void LeaveRule_initializer_list();

	// $ANTLR start "initializer_list"
	// C.g:285:1: initializer_list : initializer ( ',' initializer )* ;
	[GrammarRule("initializer_list")]
	public XAstParserRuleReturnScope initializer_list()
	{
		EnterRule_initializer_list();
		EnterRule("initializer_list", 35);
		var retval = new XAstParserRuleReturnScope("initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal154 = default(IToken);
		XAstParserRuleReturnScope initializer153 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer155 = default(XAstParserRuleReturnScope);

		object char_literal154_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer_list");
		DebugLocation(285, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C.g:286:5: ( initializer ( ',' initializer )* )
			DebugEnterAlt(1);
			// C.g:286:7: initializer ( ',' initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(286, 7);
			PushFollow(Follow._initializer_in_initializer_list1481);
			initializer153=initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, initializer153.Tree, initializer153, retval);
			DebugLocation(286, 19);
			// C.g:286:19: ( ',' initializer )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==37))
				{
					int LA60_1 = input.LA(2);

					if ((LA60_1==CHARACTER_LITERAL||LA60_1==DECIMAL_LITERAL||LA60_1==FLOATING_POINT_LITERAL||LA60_1==HEX_LITERAL||LA60_1==IDENTIFIER||LA60_1==OCTAL_LITERAL||LA60_1==STRING_LITERAL||LA60_1==23||LA60_1==28||LA60_1==30||LA60_1==32||(LA60_1>=34 && LA60_1<=35)||(LA60_1>=38 && LA60_1<=39)||LA60_1==63||(LA60_1>=66 && LA60_1<=67)||LA60_1==70||LA60_1==100||LA60_1==111||LA60_1==116))
					{
						alt60 = 1;
					}


				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:286:20: ',' initializer
					{
					DebugLocation(286, 20);
					char_literal154=(IToken)Match(input,37,Follow._37_in_initializer_list1484); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal154_tree = (object)adaptor.Create(char_literal154, retval);
					adaptor.AddChild(root_0, char_literal154_tree);
					}
					DebugLocation(286, 24);
					PushFollow(Follow._initializer_in_initializer_list1486);
					initializer155=initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, initializer155.Tree, initializer155, retval);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer_list", 35);
			LeaveRule("initializer_list", 35);
			LeaveRule_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 35, initializer_list_StartIndex); }

		}
		DebugLocation(287, 4);
		} finally { DebugExitRule(GrammarFileName, "initializer_list"); }
		return retval;

	}
	// $ANTLR end "initializer_list"

	partial void EnterRule_argument_expression_list();
	partial void LeaveRule_argument_expression_list();

	// $ANTLR start "argument_expression_list"
	// C.g:291:1: argument_expression_list : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("argument_expression_list")]
	public XAstParserRuleReturnScope argument_expression_list()
	{
		EnterRule_argument_expression_list();
		EnterRule("argument_expression_list", 36);
		var retval = new XAstParserRuleReturnScope("argument_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int argument_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal157 = default(IToken);
		XAstParserRuleReturnScope assignment_expression156 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression158 = default(XAstParserRuleReturnScope);

		object char_literal157_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_expression_list");
		DebugLocation(291, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C.g:292:5: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:292:9: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(292, 9);
			PushFollow(Follow._assignment_expression_in_argument_expression_list1509);
			assignment_expression156=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression156.Tree, assignment_expression156, retval);
			DebugLocation(292, 31);
			// C.g:292:31: ( ',' assignment_expression )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==37))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:292:32: ',' assignment_expression
					{
					DebugLocation(292, 32);
					char_literal157=(IToken)Match(input,37,Follow._37_in_argument_expression_list1512); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal157_tree = (object)adaptor.Create(char_literal157, retval);
					adaptor.AddChild(root_0, char_literal157_tree);
					}
					DebugLocation(292, 36);
					PushFollow(Follow._assignment_expression_in_argument_expression_list1514);
					assignment_expression158=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression158.Tree, assignment_expression158, retval);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_expression_list", 36);
			LeaveRule("argument_expression_list", 36);
			LeaveRule_argument_expression_list();
			if (state.backtracking > 0) { Memoize(input, 36, argument_expression_list_StartIndex); }

		}
		DebugLocation(293, 4);
		} finally { DebugExitRule(GrammarFileName, "argument_expression_list"); }
		return retval;

	}
	// $ANTLR end "argument_expression_list"

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();

	// $ANTLR start "additive_expression"
	// C.g:295:1: additive_expression : ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	public XAstParserRuleReturnScope additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 37);
		var retval = new XAstParserRuleReturnScope("additive_expression");
		
		retval.Start = (IToken)input.LT(1);
		int additive_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal160 = default(IToken);
		IToken char_literal162 = default(IToken);
		XAstParserRuleReturnScope multiplicative_expression159 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression161 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression163 = default(XAstParserRuleReturnScope);

		object char_literal160_tree = default(object);
		object char_literal162_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(295, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C.g:296:5: ( ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* )
			DebugEnterAlt(1);
			// C.g:296:7: ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(296, 7);
			// C.g:296:7: ( multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:296:8: multiplicative_expression
			{
			DebugLocation(296, 8);
			PushFollow(Follow._multiplicative_expression_in_additive_expression1534);
			multiplicative_expression159=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression159.Tree, multiplicative_expression159, retval);

			}

			DebugLocation(296, 35);
			// C.g:296:35: ( '+' multiplicative_expression | '-' multiplicative_expression )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=3;
				try { DebugEnterDecision(62, false);
				try
				{
					alt62 = dfa62.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:296:36: '+' multiplicative_expression
					{
					DebugLocation(296, 36);
					char_literal160=(IToken)Match(input,34,Follow._34_in_additive_expression1538); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal160_tree = (object)adaptor.Create(char_literal160, retval);
					adaptor.AddChild(root_0, char_literal160_tree);
					}
					DebugLocation(296, 40);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1540);
					multiplicative_expression161=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression161.Tree, multiplicative_expression161, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:296:68: '-' multiplicative_expression
					{
					DebugLocation(296, 68);
					char_literal162=(IToken)Match(input,38,Follow._38_in_additive_expression1544); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal162_tree = (object)adaptor.Create(char_literal162, retval);
					adaptor.AddChild(root_0, char_literal162_tree);
					}
					DebugLocation(296, 72);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1546);
					multiplicative_expression163=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression163.Tree, multiplicative_expression163, retval);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 37);
			LeaveRule("additive_expression", 37);
			LeaveRule_additive_expression();
			if (state.backtracking > 0) { Memoize(input, 37, additive_expression_StartIndex); }

		}
		DebugLocation(297, 4);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();

	// $ANTLR start "multiplicative_expression"
	// C.g:299:1: multiplicative_expression : ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* ;
	[GrammarRule("multiplicative_expression")]
	public XAstParserRuleReturnScope multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 38);
		var retval = new XAstParserRuleReturnScope("multiplicative_expression");
		
		retval.Start = (IToken)input.LT(1);
		int multiplicative_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal165 = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken char_literal169 = default(IToken);
		XAstParserRuleReturnScope cast_expression164 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression166 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression168 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression170 = default(XAstParserRuleReturnScope);

		object char_literal165_tree = default(object);
		object char_literal167_tree = default(object);
		object char_literal169_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(299, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C.g:300:5: ( ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* )
			DebugEnterAlt(1);
			// C.g:300:7: ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(300, 7);
			// C.g:300:7: ( cast_expression )
			DebugEnterAlt(1);
			// C.g:300:8: cast_expression
			{
			DebugLocation(300, 8);
			PushFollow(Follow._cast_expression_in_multiplicative_expression1566);
			cast_expression164=cast_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression164.Tree, cast_expression164, retval);

			}

			DebugLocation(300, 25);
			// C.g:300:25: ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=4;
				try { DebugEnterDecision(63, false);
				switch (input.LA(1))
				{
				case 32:
					{
					switch (input.LA(2))
					{
					case 30:
						{
						int LA63_39 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA63_40 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA63_41 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA63_42 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA63_43 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA63_44 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA63_45 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA63_46 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case 67:
						{
						int LA63_47 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case 66:
						{
						int LA63_48 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case 35:
						{
						int LA63_49 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case 39:
						{
						int LA63_50 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 116:
						{
						int LA63_51 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case 100:
						{
						int LA63_52 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case 63:
						{
						int LA63_53 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					case 70:
						{
						int LA63_54 = input.LA(3);

						if ((EvaluatePredicate(synpred98_C_fragment)))
						{
							alt63 = 1;
						}


						}
						break;
					}

					}
					break;
				case 44:
					{
					alt63 = 2;
					}
					break;
				case 25:
					{
					alt63 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:300:26: '*' cast_expression
					{
					DebugLocation(300, 26);
					char_literal165=(IToken)Match(input,32,Follow._32_in_multiplicative_expression1570); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal165_tree = (object)adaptor.Create(char_literal165, retval);
					adaptor.AddChild(root_0, char_literal165_tree);
					}
					DebugLocation(300, 30);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1572);
					cast_expression166=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression166.Tree, cast_expression166, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:300:48: '/' cast_expression
					{
					DebugLocation(300, 48);
					char_literal167=(IToken)Match(input,44,Follow._44_in_multiplicative_expression1576); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal167_tree = (object)adaptor.Create(char_literal167, retval);
					adaptor.AddChild(root_0, char_literal167_tree);
					}
					DebugLocation(300, 52);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1578);
					cast_expression168=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression168.Tree, cast_expression168, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:300:70: '%' cast_expression
					{
					DebugLocation(300, 70);
					char_literal169=(IToken)Match(input,25,Follow._25_in_multiplicative_expression1582); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal169_tree = (object)adaptor.Create(char_literal169, retval);
					adaptor.AddChild(root_0, char_literal169_tree);
					}
					DebugLocation(300, 74);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1584);
					cast_expression170=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression170.Tree, cast_expression170, retval);

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 38);
			LeaveRule("multiplicative_expression", 38);
			LeaveRule_multiplicative_expression();
			if (state.backtracking > 0) { Memoize(input, 38, multiplicative_expression_StartIndex); }

		}
		DebugLocation(301, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();

	// $ANTLR start "cast_expression"
	// C.g:303:1: cast_expression : ( '(' type_name ')' cast_expression | unary_expression );
	[GrammarRule("cast_expression")]
	public XAstParserRuleReturnScope cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 39);
		var retval = new XAstParserRuleReturnScope("cast_expression");
		
		retval.Start = (IToken)input.LT(1);
		int cast_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal171 = default(IToken);
		IToken char_literal173 = default(IToken);
		XAstParserRuleReturnScope type_name172 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression174 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression175 = default(XAstParserRuleReturnScope);

		object char_literal171_tree = default(object);
		object char_literal173_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(303, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C.g:304:5: ( '(' type_name ')' cast_expression | unary_expression )
			int alt64=2;
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==30))
			{
				switch (input.LA(2))
				{
				case 65:
				case 69:
				case 73:
				case 74:
				case 79:
				case 80:
				case 84:
				case 86:
				case 88:
				case 93:
				case 94:
				case 96:
				case 98:
				case 99:
				case 102:
				case 105:
				case 106:
				case 107:
				case 108:
				case 109:
					{
					alt64 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA64_29 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 29, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 70:
					{
					int LA64_32 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 32, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DECIMAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case OCTAL_LITERAL:
				case STRING_LITERAL:
				case 23:
				case 28:
				case 30:
				case 32:
				case 34:
				case 35:
				case 38:
				case 39:
				case 63:
				case 66:
				case 67:
				case 100:
				case 111:
				case 116:
					{
					alt64 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA64_0==CHARACTER_LITERAL||LA64_0==DECIMAL_LITERAL||LA64_0==FLOATING_POINT_LITERAL||LA64_0==HEX_LITERAL||LA64_0==IDENTIFIER||LA64_0==OCTAL_LITERAL||LA64_0==STRING_LITERAL||LA64_0==23||LA64_0==28||LA64_0==32||(LA64_0>=34 && LA64_0<=35)||(LA64_0>=38 && LA64_0<=39)||LA64_0==63||(LA64_0>=66 && LA64_0<=67)||LA64_0==70||LA64_0==100||LA64_0==116))
			{
				alt64 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:304:7: '(' type_name ')' cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(304, 7);
				char_literal171=(IToken)Match(input,30,Follow._30_in_cast_expression1603); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal171_tree = (object)adaptor.Create(char_literal171, retval);
				adaptor.AddChild(root_0, char_literal171_tree);
				}
				DebugLocation(304, 11);
				PushFollow(Follow._type_name_in_cast_expression1605);
				type_name172=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name172.Tree, type_name172, retval);
				DebugLocation(304, 21);
				char_literal173=(IToken)Match(input,31,Follow._31_in_cast_expression1607); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal173_tree = (object)adaptor.Create(char_literal173, retval);
				adaptor.AddChild(root_0, char_literal173_tree);
				}
				DebugLocation(304, 25);
				PushFollow(Follow._cast_expression_in_cast_expression1609);
				cast_expression174=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression174.Tree, cast_expression174, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:305:7: unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(305, 7);
				PushFollow(Follow._unary_expression_in_cast_expression1617);
				unary_expression175=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression175.Tree, unary_expression175, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expression", 39);
			LeaveRule("cast_expression", 39);
			LeaveRule_cast_expression();
			if (state.backtracking > 0) { Memoize(input, 39, cast_expression_StartIndex); }

		}
		DebugLocation(306, 4);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();

	// $ANTLR start "unary_expression"
	// C.g:308:1: unary_expression : ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' | '__alignof__' unary_expression | '__alignof__' '(' type_name ')' | gcc_extension_specifier cast_expression );
	[GrammarRule("unary_expression")]
	public XAstParserRuleReturnScope unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 40);
		var retval = new XAstParserRuleReturnScope("unary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal177 = default(IToken);
		IToken string_literal179 = default(IToken);
		IToken string_literal183 = default(IToken);
		IToken string_literal185 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken string_literal189 = default(IToken);
		IToken string_literal191 = default(IToken);
		IToken char_literal192 = default(IToken);
		IToken char_literal194 = default(IToken);
		XAstParserRuleReturnScope postfix_expression176 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression178 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression180 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator181 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression182 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression184 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name187 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression190 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name193 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_extension_specifier195 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression196 = default(XAstParserRuleReturnScope);

		object string_literal177_tree = default(object);
		object string_literal179_tree = default(object);
		object string_literal183_tree = default(object);
		object string_literal185_tree = default(object);
		object char_literal186_tree = default(object);
		object char_literal188_tree = default(object);
		object string_literal189_tree = default(object);
		object string_literal191_tree = default(object);
		object char_literal192_tree = default(object);
		object char_literal194_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(308, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C.g:309:5: ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' | '__alignof__' unary_expression | '__alignof__' '(' type_name ')' | gcc_extension_specifier cast_expression )
			int alt65=9;
			try { DebugEnterDecision(65, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 30:
			case 66:
			case 67:
				{
				alt65 = 1;
				}
				break;
			case 35:
				{
				alt65 = 2;
				}
				break;
			case 39:
				{
				alt65 = 3;
				}
				break;
			case 23:
			case 28:
			case 32:
			case 34:
			case 38:
			case 116:
				{
				alt65 = 4;
				}
				break;
			case 100:
				{
				int LA65_14 = input.LA(2);

				if ((LA65_14==30))
				{
					int LA65_17 = input.LA(3);

					if ((EvaluatePredicate(synpred106_C_fragment)))
					{
						alt65 = 5;
					}
					else if ((EvaluatePredicate(synpred107_C_fragment)))
					{
						alt65 = 6;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 65, 17, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA65_14==CHARACTER_LITERAL||LA65_14==DECIMAL_LITERAL||LA65_14==FLOATING_POINT_LITERAL||LA65_14==HEX_LITERAL||LA65_14==IDENTIFIER||LA65_14==OCTAL_LITERAL||LA65_14==STRING_LITERAL||LA65_14==23||LA65_14==28||LA65_14==32||(LA65_14>=34 && LA65_14<=35)||(LA65_14>=38 && LA65_14<=39)||LA65_14==63||(LA65_14>=66 && LA65_14<=67)||LA65_14==70||LA65_14==100||LA65_14==116))
				{
					alt65 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 63:
				{
				int LA65_15 = input.LA(2);

				if ((LA65_15==30))
				{
					int LA65_33 = input.LA(3);

					if ((EvaluatePredicate(synpred108_C_fragment)))
					{
						alt65 = 7;
					}
					else if ((EvaluatePredicate(synpred109_C_fragment)))
					{
						alt65 = 8;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 65, 33, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA65_15==CHARACTER_LITERAL||LA65_15==DECIMAL_LITERAL||LA65_15==FLOATING_POINT_LITERAL||LA65_15==HEX_LITERAL||LA65_15==IDENTIFIER||LA65_15==OCTAL_LITERAL||LA65_15==STRING_LITERAL||LA65_15==23||LA65_15==28||LA65_15==32||(LA65_15>=34 && LA65_15<=35)||(LA65_15>=38 && LA65_15<=39)||LA65_15==63||(LA65_15>=66 && LA65_15<=67)||LA65_15==70||LA65_15==100||LA65_15==116))
				{
					alt65 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 70:
				{
				alt65 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:309:7: postfix_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(309, 7);
				PushFollow(Follow._postfix_expression_in_unary_expression1634);
				postfix_expression176=postfix_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfix_expression176.Tree, postfix_expression176, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:310:7: '++' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(310, 7);
				string_literal177=(IToken)Match(input,35,Follow._35_in_unary_expression1642); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal177_tree = (object)adaptor.Create(string_literal177, retval);
				adaptor.AddChild(root_0, string_literal177_tree);
				}
				DebugLocation(310, 12);
				PushFollow(Follow._unary_expression_in_unary_expression1644);
				unary_expression178=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression178.Tree, unary_expression178, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:311:7: '--' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(311, 7);
				string_literal179=(IToken)Match(input,39,Follow._39_in_unary_expression1652); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal179_tree = (object)adaptor.Create(string_literal179, retval);
				adaptor.AddChild(root_0, string_literal179_tree);
				}
				DebugLocation(311, 12);
				PushFollow(Follow._unary_expression_in_unary_expression1654);
				unary_expression180=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression180.Tree, unary_expression180, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:312:7: unary_operator cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(312, 7);
				PushFollow(Follow._unary_operator_in_unary_expression1662);
				unary_operator181=unary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator181.Tree, unary_operator181, retval);
				DebugLocation(312, 22);
				PushFollow(Follow._cast_expression_in_unary_expression1664);
				cast_expression182=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression182.Tree, cast_expression182, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:313:7: 'sizeof' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(313, 7);
				string_literal183=(IToken)Match(input,100,Follow._100_in_unary_expression1672); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal183_tree = (object)adaptor.Create(string_literal183, retval);
				adaptor.AddChild(root_0, string_literal183_tree);
				}
				DebugLocation(313, 16);
				PushFollow(Follow._unary_expression_in_unary_expression1674);
				unary_expression184=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression184.Tree, unary_expression184, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:314:7: 'sizeof' '(' type_name ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(314, 7);
				string_literal185=(IToken)Match(input,100,Follow._100_in_unary_expression1682); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal185_tree = (object)adaptor.Create(string_literal185, retval);
				adaptor.AddChild(root_0, string_literal185_tree);
				}
				DebugLocation(314, 16);
				char_literal186=(IToken)Match(input,30,Follow._30_in_unary_expression1684); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal186_tree = (object)adaptor.Create(char_literal186, retval);
				adaptor.AddChild(root_0, char_literal186_tree);
				}
				DebugLocation(314, 20);
				PushFollow(Follow._type_name_in_unary_expression1686);
				type_name187=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name187.Tree, type_name187, retval);
				DebugLocation(314, 30);
				char_literal188=(IToken)Match(input,31,Follow._31_in_unary_expression1688); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal188_tree = (object)adaptor.Create(char_literal188, retval);
				adaptor.AddChild(root_0, char_literal188_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:316:7: '__alignof__' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(316, 7);
				string_literal189=(IToken)Match(input,63,Follow._63_in_unary_expression1701); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal189_tree = (object)adaptor.Create(string_literal189, retval);
				adaptor.AddChild(root_0, string_literal189_tree);
				}
				DebugLocation(316, 21);
				PushFollow(Follow._unary_expression_in_unary_expression1703);
				unary_expression190=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression190.Tree, unary_expression190, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C.g:317:7: '__alignof__' '(' type_name ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(317, 7);
				string_literal191=(IToken)Match(input,63,Follow._63_in_unary_expression1711); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal191_tree = (object)adaptor.Create(string_literal191, retval);
				adaptor.AddChild(root_0, string_literal191_tree);
				}
				DebugLocation(317, 21);
				char_literal192=(IToken)Match(input,30,Follow._30_in_unary_expression1713); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal192_tree = (object)adaptor.Create(char_literal192, retval);
				adaptor.AddChild(root_0, char_literal192_tree);
				}
				DebugLocation(317, 25);
				PushFollow(Follow._type_name_in_unary_expression1715);
				type_name193=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name193.Tree, type_name193, retval);
				DebugLocation(317, 35);
				char_literal194=(IToken)Match(input,31,Follow._31_in_unary_expression1717); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal194_tree = (object)adaptor.Create(char_literal194, retval);
				adaptor.AddChild(root_0, char_literal194_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C.g:318:7: gcc_extension_specifier cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(318, 7);
				PushFollow(Follow._gcc_extension_specifier_in_unary_expression1725);
				gcc_extension_specifier195=gcc_extension_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_extension_specifier195.Tree, gcc_extension_specifier195, retval);
				DebugLocation(318, 31);
				PushFollow(Follow._cast_expression_in_unary_expression1727);
				cast_expression196=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression196.Tree, cast_expression196, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 40);
			LeaveRule("unary_expression", 40);
			LeaveRule_unary_expression();
			if (state.backtracking > 0) { Memoize(input, 40, unary_expression_StartIndex); }

		}
		DebugLocation(319, 4);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	partial void EnterRule_postfix_expression();
	partial void LeaveRule_postfix_expression();

	// $ANTLR start "postfix_expression"
	// C.g:321:1: postfix_expression : ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* | gcc_builtin_va_arg | gcc_builtin_offsetof );
	[GrammarRule("postfix_expression")]
	public XAstParserRuleReturnScope postfix_expression()
	{
		EnterRule_postfix_expression();
		EnterRule("postfix_expression", 41);
		var retval = new XAstParserRuleReturnScope("postfix_expression");
		
		retval.Start = (IToken)input.LT(1);
		int postfix_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken char_literal201 = default(IToken);
		IToken char_literal202 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken char_literal205 = default(IToken);
		IToken char_literal206 = default(IToken);
		IToken IDENTIFIER207 = default(IToken);
		IToken string_literal208 = default(IToken);
		IToken IDENTIFIER209 = default(IToken);
		IToken string_literal210 = default(IToken);
		IToken string_literal211 = default(IToken);
		XAstParserRuleReturnScope primary_expression197 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression199 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_expression_list204 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_builtin_va_arg212 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_builtin_offsetof213 = default(XAstParserRuleReturnScope);

		object char_literal198_tree = default(object);
		object char_literal200_tree = default(object);
		object char_literal201_tree = default(object);
		object char_literal202_tree = default(object);
		object char_literal203_tree = default(object);
		object char_literal205_tree = default(object);
		object char_literal206_tree = default(object);
		object IDENTIFIER207_tree = default(object);
		object string_literal208_tree = default(object);
		object IDENTIFIER209_tree = default(object);
		object string_literal210_tree = default(object);
		object string_literal211_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "postfix_expression");
		DebugLocation(321, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C.g:322:5: ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* | gcc_builtin_va_arg | gcc_builtin_offsetof )
			int alt67=3;
			try { DebugEnterDecision(67, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 30:
				{
				alt67 = 1;
				}
				break;
			case 67:
				{
				alt67 = 2;
				}
				break;
			case 66:
				{
				alt67 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:322:9: primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(322, 9);
				PushFollow(Follow._primary_expression_in_postfix_expression1746);
				primary_expression197=primary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression197.Tree, primary_expression197, retval);
				DebugLocation(323, 9);
				// C.g:323:9: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
				try { DebugEnterSubRule(66);
				while (true)
				{
					int alt66=8;
					try { DebugEnterDecision(66, false);
					try
					{
						alt66 = dfa66.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(66); }
					switch ( alt66 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:323:13: '[' expression ']'
						{
						DebugLocation(323, 13);
						char_literal198=(IToken)Match(input,59,Follow._59_in_postfix_expression1760); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal198_tree = (object)adaptor.Create(char_literal198, retval);
						adaptor.AddChild(root_0, char_literal198_tree);
						}
						DebugLocation(323, 17);
						PushFollow(Follow._expression_in_postfix_expression1762);
						expression199=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression199.Tree, expression199, retval);
						DebugLocation(323, 28);
						char_literal200=(IToken)Match(input,60,Follow._60_in_postfix_expression1764); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal200_tree = (object)adaptor.Create(char_literal200, retval);
						adaptor.AddChild(root_0, char_literal200_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C.g:324:13: '(' ')'
						{
						DebugLocation(324, 13);
						char_literal201=(IToken)Match(input,30,Follow._30_in_postfix_expression1778); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal201_tree = (object)adaptor.Create(char_literal201, retval);
						adaptor.AddChild(root_0, char_literal201_tree);
						}
						DebugLocation(324, 17);
						char_literal202=(IToken)Match(input,31,Follow._31_in_postfix_expression1780); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal202_tree = (object)adaptor.Create(char_literal202, retval);
						adaptor.AddChild(root_0, char_literal202_tree);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C.g:325:13: '(' argument_expression_list ')'
						{
						DebugLocation(325, 13);
						char_literal203=(IToken)Match(input,30,Follow._30_in_postfix_expression1794); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal203_tree = (object)adaptor.Create(char_literal203, retval);
						adaptor.AddChild(root_0, char_literal203_tree);
						}
						DebugLocation(325, 17);
						PushFollow(Follow._argument_expression_list_in_postfix_expression1796);
						argument_expression_list204=argument_expression_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, argument_expression_list204.Tree, argument_expression_list204, retval);
						DebugLocation(325, 42);
						char_literal205=(IToken)Match(input,31,Follow._31_in_postfix_expression1798); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal205_tree = (object)adaptor.Create(char_literal205, retval);
						adaptor.AddChild(root_0, char_literal205_tree);
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C.g:326:13: '.' IDENTIFIER
						{
						DebugLocation(326, 13);
						char_literal206=(IToken)Match(input,42,Follow._42_in_postfix_expression1812); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal206_tree = (object)adaptor.Create(char_literal206, retval);
						adaptor.AddChild(root_0, char_literal206_tree);
						}
						DebugLocation(326, 17);
						IDENTIFIER207=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1814), "IDENTIFIER"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER207_tree = (object)adaptor.Create(IDENTIFIER207, retval);
						adaptor.AddChild(root_0, IDENTIFIER207_tree);
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C.g:327:13: '->' IDENTIFIER
						{
						DebugLocation(327, 13);
						string_literal208=(IToken)Match(input,41,Follow._41_in_postfix_expression1828); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal208_tree = (object)adaptor.Create(string_literal208, retval);
						adaptor.AddChild(root_0, string_literal208_tree);
						}
						DebugLocation(327, 18);
						IDENTIFIER209=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1830), "IDENTIFIER"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER209_tree = (object)adaptor.Create(IDENTIFIER209, retval);
						adaptor.AddChild(root_0, IDENTIFIER209_tree);
						}

						}
						break;
					case 6:
						DebugEnterAlt(6);
						// C.g:328:13: '++'
						{
						DebugLocation(328, 13);
						string_literal210=(IToken)Match(input,35,Follow._35_in_postfix_expression1844); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal210_tree = (object)adaptor.Create(string_literal210, retval);
						adaptor.AddChild(root_0, string_literal210_tree);
						}

						}
						break;
					case 7:
						DebugEnterAlt(7);
						// C.g:329:13: '--'
						{
						DebugLocation(329, 13);
						string_literal211=(IToken)Match(input,39,Follow._39_in_postfix_expression1858); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal211_tree = (object)adaptor.Create(string_literal211, retval);
						adaptor.AddChild(root_0, string_literal211_tree);
						}

						}
						break;

					default:
						goto loop66;
					}
				}

				loop66:
					;

				} finally { DebugExitSubRule(66); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:331:7: gcc_builtin_va_arg
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(331, 7);
				PushFollow(Follow._gcc_builtin_va_arg_in_postfix_expression1877);
				gcc_builtin_va_arg212=gcc_builtin_va_arg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_builtin_va_arg212.Tree, gcc_builtin_va_arg212, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:332:7: gcc_builtin_offsetof
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(332, 7);
				PushFollow(Follow._gcc_builtin_offsetof_in_postfix_expression1885);
				gcc_builtin_offsetof213=gcc_builtin_offsetof();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_builtin_offsetof213.Tree, gcc_builtin_offsetof213, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfix_expression", 41);
			LeaveRule("postfix_expression", 41);
			LeaveRule_postfix_expression();
			if (state.backtracking > 0) { Memoize(input, 41, postfix_expression_StartIndex); }

		}
		DebugLocation(333, 4);
		} finally { DebugExitRule(GrammarFileName, "postfix_expression"); }
		return retval;

	}
	// $ANTLR end "postfix_expression"

	partial void EnterRule_unary_operator();
	partial void LeaveRule_unary_operator();

	// $ANTLR start "unary_operator"
	// C.g:335:1: unary_operator : ( '&' | '*' | '+' | '-' | '~' | '!' );
	[GrammarRule("unary_operator")]
	public XAstParserRuleReturnScope unary_operator()
	{
		EnterRule_unary_operator();
		EnterRule("unary_operator", 42);
		var retval = new XAstParserRuleReturnScope("unary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int unary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set214 = default(IToken);

		object set214_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_operator");
		DebugLocation(335, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C.g:336:5: ( '&' | '*' | '+' | '-' | '~' | '!' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(336, 5);

			set214=(IToken)input.LT(1);
			if (input.LA(1)==23||input.LA(1)==28||input.LA(1)==32||input.LA(1)==34||input.LA(1)==38||input.LA(1)==116)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set214, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator", 42);
			LeaveRule("unary_operator", 42);
			LeaveRule_unary_operator();
			if (state.backtracking > 0) { Memoize(input, 42, unary_operator_StartIndex); }

		}
		DebugLocation(342, 4);
		} finally { DebugExitRule(GrammarFileName, "unary_operator"); }
		return retval;

	}
	// $ANTLR end "unary_operator"

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();

	// $ANTLR start "primary_expression"
	// C.g:344:1: primary_expression : ( IDENTIFIER | constant | '(' expression ')' | gcc_statement_expression );
	[GrammarRule("primary_expression")]
	public XAstParserRuleReturnScope primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 43);
		var retval = new XAstParserRuleReturnScope("primary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER215 = default(IToken);
		IToken char_literal217 = default(IToken);
		IToken char_literal219 = default(IToken);
		XAstParserRuleReturnScope constant216 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression218 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_statement_expression220 = default(XAstParserRuleReturnScope);

		object IDENTIFIER215_tree = default(object);
		object char_literal217_tree = default(object);
		object char_literal219_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(344, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C.g:345:5: ( IDENTIFIER | constant | '(' expression ')' | gcc_statement_expression )
			int alt68=4;
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt68 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
				{
				alt68 = 2;
				}
				break;
			case 30:
				{
				int LA68_8 = input.LA(2);

				if ((LA68_8==CHARACTER_LITERAL||LA68_8==DECIMAL_LITERAL||LA68_8==FLOATING_POINT_LITERAL||LA68_8==HEX_LITERAL||LA68_8==IDENTIFIER||LA68_8==OCTAL_LITERAL||LA68_8==STRING_LITERAL||LA68_8==23||LA68_8==28||LA68_8==30||LA68_8==32||(LA68_8>=34 && LA68_8<=35)||(LA68_8>=38 && LA68_8<=39)||LA68_8==63||(LA68_8>=66 && LA68_8<=67)||LA68_8==70||LA68_8==100||LA68_8==116))
				{
					alt68 = 3;
				}
				else if ((LA68_8==111))
				{
					alt68 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:345:7: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(345, 7);
				IDENTIFIER215=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary_expression1959), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER215_tree = (object)adaptor.Create(IDENTIFIER215, retval);
				adaptor.AddChild(root_0, IDENTIFIER215_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:346:7: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(346, 7);
				PushFollow(Follow._constant_in_primary_expression1967);
				constant216=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant216.Tree, constant216, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:347:7: '(' expression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(347, 7);
				char_literal217=(IToken)Match(input,30,Follow._30_in_primary_expression1975); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal217_tree = (object)adaptor.Create(char_literal217, retval);
				adaptor.AddChild(root_0, char_literal217_tree);
				}
				DebugLocation(347, 11);
				PushFollow(Follow._expression_in_primary_expression1977);
				expression218=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression218.Tree, expression218, retval);
				DebugLocation(347, 22);
				char_literal219=(IToken)Match(input,31,Follow._31_in_primary_expression1979); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal219_tree = (object)adaptor.Create(char_literal219, retval);
				adaptor.AddChild(root_0, char_literal219_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:348:7: gcc_statement_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(348, 7);
				PushFollow(Follow._gcc_statement_expression_in_primary_expression1987);
				gcc_statement_expression220=gcc_statement_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_statement_expression220.Tree, gcc_statement_expression220, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 43);
			LeaveRule("primary_expression", 43);
			LeaveRule_primary_expression();
			if (state.backtracking > 0) { Memoize(input, 43, primary_expression_StartIndex); }

		}
		DebugLocation(349, 4);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();

	// $ANTLR start "constant"
	// C.g:351:1: constant : ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal );
	[GrammarRule("constant")]
	public XAstParserRuleReturnScope constant()
	{
		EnterRule_constant();
		EnterRule("constant", 44);
		var retval = new XAstParserRuleReturnScope("constant");
		
		retval.Start = (IToken)input.LT(1);
		int constant_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope hex_literal221 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope octal_literal222 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope decimal_literal223 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope character_literal224 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope string_literal225 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope floating_point_literal226 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(351, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C.g:352:5: ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal )
			int alt69=6;
			try { DebugEnterDecision(69, false);
			switch (input.LA(1))
			{
			case HEX_LITERAL:
				{
				alt69 = 1;
				}
				break;
			case OCTAL_LITERAL:
				{
				alt69 = 2;
				}
				break;
			case DECIMAL_LITERAL:
				{
				alt69 = 3;
				}
				break;
			case CHARACTER_LITERAL:
				{
				alt69 = 4;
				}
				break;
			case STRING_LITERAL:
				{
				alt69 = 5;
				}
				break;
			case FLOATING_POINT_LITERAL:
				{
				alt69 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:352:9: hex_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(352, 9);
				PushFollow(Follow._hex_literal_in_constant2006);
				hex_literal221=hex_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, hex_literal221.Tree, hex_literal221, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:353:9: octal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(353, 9);
				PushFollow(Follow._octal_literal_in_constant2016);
				octal_literal222=octal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, octal_literal222.Tree, octal_literal222, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:354:9: decimal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(354, 9);
				PushFollow(Follow._decimal_literal_in_constant2026);
				decimal_literal223=decimal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, decimal_literal223.Tree, decimal_literal223, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:355:9: character_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(355, 9);
				PushFollow(Follow._character_literal_in_constant2036);
				character_literal224=character_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, character_literal224.Tree, character_literal224, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:356:9: string_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(356, 9);
				PushFollow(Follow._string_literal_in_constant2046);
				string_literal225=string_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal225.Tree, string_literal225, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:357:9: floating_point_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(357, 9);
				PushFollow(Follow._floating_point_literal_in_constant2056);
				floating_point_literal226=floating_point_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, floating_point_literal226.Tree, floating_point_literal226, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 44);
			LeaveRule("constant", 44);
			LeaveRule_constant();
			if (state.backtracking > 0) { Memoize(input, 44, constant_StartIndex); }

		}
		DebugLocation(358, 4);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_hex_literal();
	partial void LeaveRule_hex_literal();

	// $ANTLR start "hex_literal"
	// C.g:360:1: hex_literal : HEX_LITERAL ;
	[GrammarRule("hex_literal")]
	public XAstParserRuleReturnScope hex_literal()
	{
		EnterRule_hex_literal();
		EnterRule("hex_literal", 45);
		var retval = new XAstParserRuleReturnScope("hex_literal");
		
		retval.Start = (IToken)input.LT(1);
		int hex_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken HEX_LITERAL227 = default(IToken);

		object HEX_LITERAL227_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "hex_literal");
		DebugLocation(360, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C.g:361:5: ( HEX_LITERAL )
			DebugEnterAlt(1);
			// C.g:361:7: HEX_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(361, 7);
			HEX_LITERAL227=(IToken)new XToken((IToken)Match(input,HEX_LITERAL,Follow._HEX_LITERAL_in_hex_literal2073), "HEX_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			HEX_LITERAL227_tree = (object)adaptor.Create(HEX_LITERAL227, retval);
			adaptor.AddChild(root_0, HEX_LITERAL227_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hex_literal", 45);
			LeaveRule("hex_literal", 45);
			LeaveRule_hex_literal();
			if (state.backtracking > 0) { Memoize(input, 45, hex_literal_StartIndex); }

		}
		DebugLocation(362, 4);
		} finally { DebugExitRule(GrammarFileName, "hex_literal"); }
		return retval;

	}
	// $ANTLR end "hex_literal"

	partial void EnterRule_octal_literal();
	partial void LeaveRule_octal_literal();

	// $ANTLR start "octal_literal"
	// C.g:364:1: octal_literal : OCTAL_LITERAL ;
	[GrammarRule("octal_literal")]
	public XAstParserRuleReturnScope octal_literal()
	{
		EnterRule_octal_literal();
		EnterRule("octal_literal", 46);
		var retval = new XAstParserRuleReturnScope("octal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int octal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OCTAL_LITERAL228 = default(IToken);

		object OCTAL_LITERAL228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "octal_literal");
		DebugLocation(364, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C.g:365:5: ( OCTAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:365:7: OCTAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(365, 7);
			OCTAL_LITERAL228=(IToken)new XToken((IToken)Match(input,OCTAL_LITERAL,Follow._OCTAL_LITERAL_in_octal_literal2090), "OCTAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OCTAL_LITERAL228_tree = (object)adaptor.Create(OCTAL_LITERAL228, retval);
			adaptor.AddChild(root_0, OCTAL_LITERAL228_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("octal_literal", 46);
			LeaveRule("octal_literal", 46);
			LeaveRule_octal_literal();
			if (state.backtracking > 0) { Memoize(input, 46, octal_literal_StartIndex); }

		}
		DebugLocation(366, 4);
		} finally { DebugExitRule(GrammarFileName, "octal_literal"); }
		return retval;

	}
	// $ANTLR end "octal_literal"

	partial void EnterRule_decimal_literal();
	partial void LeaveRule_decimal_literal();

	// $ANTLR start "decimal_literal"
	// C.g:368:1: decimal_literal : DECIMAL_LITERAL ;
	[GrammarRule("decimal_literal")]
	public XAstParserRuleReturnScope decimal_literal()
	{
		EnterRule_decimal_literal();
		EnterRule("decimal_literal", 47);
		var retval = new XAstParserRuleReturnScope("decimal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int decimal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken DECIMAL_LITERAL229 = default(IToken);

		object DECIMAL_LITERAL229_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "decimal_literal");
		DebugLocation(368, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C.g:369:5: ( DECIMAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:369:7: DECIMAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(369, 7);
			DECIMAL_LITERAL229=(IToken)new XToken((IToken)Match(input,DECIMAL_LITERAL,Follow._DECIMAL_LITERAL_in_decimal_literal2107), "DECIMAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DECIMAL_LITERAL229_tree = (object)adaptor.Create(DECIMAL_LITERAL229, retval);
			adaptor.AddChild(root_0, DECIMAL_LITERAL229_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("decimal_literal", 47);
			LeaveRule("decimal_literal", 47);
			LeaveRule_decimal_literal();
			if (state.backtracking > 0) { Memoize(input, 47, decimal_literal_StartIndex); }

		}
		DebugLocation(370, 4);
		} finally { DebugExitRule(GrammarFileName, "decimal_literal"); }
		return retval;

	}
	// $ANTLR end "decimal_literal"

	partial void EnterRule_character_literal();
	partial void LeaveRule_character_literal();

	// $ANTLR start "character_literal"
	// C.g:372:1: character_literal : CHARACTER_LITERAL ;
	[GrammarRule("character_literal")]
	public XAstParserRuleReturnScope character_literal()
	{
		EnterRule_character_literal();
		EnterRule("character_literal", 48);
		var retval = new XAstParserRuleReturnScope("character_literal");
		
		retval.Start = (IToken)input.LT(1);
		int character_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken CHARACTER_LITERAL230 = default(IToken);

		object CHARACTER_LITERAL230_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "character_literal");
		DebugLocation(372, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C.g:373:5: ( CHARACTER_LITERAL )
			DebugEnterAlt(1);
			// C.g:373:7: CHARACTER_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(373, 7);
			CHARACTER_LITERAL230=(IToken)new XToken((IToken)Match(input,CHARACTER_LITERAL,Follow._CHARACTER_LITERAL_in_character_literal2124), "CHARACTER_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHARACTER_LITERAL230_tree = (object)adaptor.Create(CHARACTER_LITERAL230, retval);
			adaptor.AddChild(root_0, CHARACTER_LITERAL230_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_literal", 48);
			LeaveRule("character_literal", 48);
			LeaveRule_character_literal();
			if (state.backtracking > 0) { Memoize(input, 48, character_literal_StartIndex); }

		}
		DebugLocation(374, 4);
		} finally { DebugExitRule(GrammarFileName, "character_literal"); }
		return retval;

	}
	// $ANTLR end "character_literal"

	partial void EnterRule_string_literal();
	partial void LeaveRule_string_literal();

	// $ANTLR start "string_literal"
	// C.g:376:1: string_literal : STRING_LITERAL ;
	[GrammarRule("string_literal")]
	public XAstParserRuleReturnScope string_literal()
	{
		EnterRule_string_literal();
		EnterRule("string_literal", 49);
		var retval = new XAstParserRuleReturnScope("string_literal");
		
		retval.Start = (IToken)input.LT(1);
		int string_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken STRING_LITERAL231 = default(IToken);

		object STRING_LITERAL231_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "string_literal");
		DebugLocation(376, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C.g:377:5: ( STRING_LITERAL )
			DebugEnterAlt(1);
			// C.g:377:7: STRING_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(377, 7);
			STRING_LITERAL231=(IToken)new XToken((IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_string_literal2141), "STRING_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL231_tree = (object)adaptor.Create(STRING_LITERAL231, retval);
			adaptor.AddChild(root_0, STRING_LITERAL231_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string_literal", 49);
			LeaveRule("string_literal", 49);
			LeaveRule_string_literal();
			if (state.backtracking > 0) { Memoize(input, 49, string_literal_StartIndex); }

		}
		DebugLocation(378, 4);
		} finally { DebugExitRule(GrammarFileName, "string_literal"); }
		return retval;

	}
	// $ANTLR end "string_literal"

	partial void EnterRule_floating_point_literal();
	partial void LeaveRule_floating_point_literal();

	// $ANTLR start "floating_point_literal"
	// C.g:380:1: floating_point_literal : FLOATING_POINT_LITERAL ;
	[GrammarRule("floating_point_literal")]
	public XAstParserRuleReturnScope floating_point_literal()
	{
		EnterRule_floating_point_literal();
		EnterRule("floating_point_literal", 50);
		var retval = new XAstParserRuleReturnScope("floating_point_literal");
		
		retval.Start = (IToken)input.LT(1);
		int floating_point_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken FLOATING_POINT_LITERAL232 = default(IToken);

		object FLOATING_POINT_LITERAL232_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "floating_point_literal");
		DebugLocation(380, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C.g:381:5: ( FLOATING_POINT_LITERAL )
			DebugEnterAlt(1);
			// C.g:381:7: FLOATING_POINT_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(381, 7);
			FLOATING_POINT_LITERAL232=(IToken)new XToken((IToken)Match(input,FLOATING_POINT_LITERAL,Follow._FLOATING_POINT_LITERAL_in_floating_point_literal2158), "FLOATING_POINT_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FLOATING_POINT_LITERAL232_tree = (object)adaptor.Create(FLOATING_POINT_LITERAL232, retval);
			adaptor.AddChild(root_0, FLOATING_POINT_LITERAL232_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("floating_point_literal", 50);
			LeaveRule("floating_point_literal", 50);
			LeaveRule_floating_point_literal();
			if (state.backtracking > 0) { Memoize(input, 50, floating_point_literal_StartIndex); }

		}
		DebugLocation(382, 4);
		} finally { DebugExitRule(GrammarFileName, "floating_point_literal"); }
		return retval;

	}
	// $ANTLR end "floating_point_literal"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C.g:386:1: expression : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("expression")]
	public XAstParserRuleReturnScope expression()
	{
		EnterRule_expression();
		EnterRule("expression", 51);
		var retval = new XAstParserRuleReturnScope("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal234 = default(IToken);
		XAstParserRuleReturnScope assignment_expression233 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression235 = default(XAstParserRuleReturnScope);

		object char_literal234_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(386, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C.g:387:5: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:387:7: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(387, 7);
			PushFollow(Follow._assignment_expression_in_expression2177);
			assignment_expression233=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression233.Tree, assignment_expression233, retval);
			DebugLocation(387, 29);
			// C.g:387:29: ( ',' assignment_expression )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==37))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:387:30: ',' assignment_expression
					{
					DebugLocation(387, 30);
					char_literal234=(IToken)Match(input,37,Follow._37_in_expression2180); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal234_tree = (object)adaptor.Create(char_literal234, retval);
					adaptor.AddChild(root_0, char_literal234_tree);
					}
					DebugLocation(387, 34);
					PushFollow(Follow._assignment_expression_in_expression2182);
					assignment_expression235=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression235.Tree, assignment_expression235, retval);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 51);
			LeaveRule("expression", 51);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 51, expression_StartIndex); }

		}
		DebugLocation(388, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_constant_expression();
	partial void LeaveRule_constant_expression();

	// $ANTLR start "constant_expression"
	// C.g:390:1: constant_expression : conditional_expression ;
	[GrammarRule("constant_expression")]
	public XAstParserRuleReturnScope constant_expression()
	{
		EnterRule_constant_expression();
		EnterRule("constant_expression", 52);
		var retval = new XAstParserRuleReturnScope("constant_expression");
		
		retval.Start = (IToken)input.LT(1);
		int constant_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope conditional_expression236 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_expression");
		DebugLocation(390, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C.g:391:5: ( conditional_expression )
			DebugEnterAlt(1);
			// C.g:391:7: conditional_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(391, 7);
			PushFollow(Follow._conditional_expression_in_constant_expression2201);
			conditional_expression236=conditional_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression236.Tree, conditional_expression236, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_expression", 52);
			LeaveRule("constant_expression", 52);
			LeaveRule_constant_expression();
			if (state.backtracking > 0) { Memoize(input, 52, constant_expression_StartIndex); }

		}
		DebugLocation(392, 4);
		} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
		return retval;

	}
	// $ANTLR end "constant_expression"

	partial void EnterRule_assignment_expression();
	partial void LeaveRule_assignment_expression();

	// $ANTLR start "assignment_expression"
	// C.g:394:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );
	[GrammarRule("assignment_expression")]
	public XAstParserRuleReturnScope assignment_expression()
	{
		EnterRule_assignment_expression();
		EnterRule("assignment_expression", 53);
		var retval = new XAstParserRuleReturnScope("assignment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope lvalue237 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_operator238 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression239 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression240 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "assignment_expression");
		DebugLocation(394, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C.g:395:5: ( lvalue assignment_operator assignment_expression | conditional_expression )
			int alt71=2;
			try { DebugEnterDecision(71, false);
			try
			{
				alt71 = dfa71.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:395:7: lvalue assignment_operator assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 7);
				PushFollow(Follow._lvalue_in_assignment_expression2218);
				lvalue237=lvalue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue237.Tree, lvalue237, retval);
				DebugLocation(395, 14);
				PushFollow(Follow._assignment_operator_in_assignment_expression2220);
				assignment_operator238=assignment_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_operator238.Tree, assignment_operator238, retval);
				DebugLocation(395, 34);
				PushFollow(Follow._assignment_expression_in_assignment_expression2222);
				assignment_expression239=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression239.Tree, assignment_expression239, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:396:7: conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(396, 7);
				PushFollow(Follow._conditional_expression_in_assignment_expression2230);
				conditional_expression240=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression240.Tree, conditional_expression240, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_expression", 53);
			LeaveRule("assignment_expression", 53);
			LeaveRule_assignment_expression();
			if (state.backtracking > 0) { Memoize(input, 53, assignment_expression_StartIndex); }

		}
		DebugLocation(397, 4);
		} finally { DebugExitRule(GrammarFileName, "assignment_expression"); }
		return retval;

	}
	// $ANTLR end "assignment_expression"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// C.g:399:1: lvalue : unary_expression ;
	[GrammarRule("lvalue")]
	public XAstParserRuleReturnScope lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 54);
		var retval = new XAstParserRuleReturnScope("lvalue");
		
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unary_expression241 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(399, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C.g:400:5: ( unary_expression )
			DebugEnterAlt(1);
			// C.g:400:7: unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(400, 7);
			PushFollow(Follow._unary_expression_in_lvalue2251);
			unary_expression241=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression241.Tree, unary_expression241, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 54);
			LeaveRule("lvalue", 54);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 54, lvalue_StartIndex); }

		}
		DebugLocation(401, 4);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_assignment_operator();
	partial void LeaveRule_assignment_operator();

	// $ANTLR start "assignment_operator"
	// C.g:403:1: assignment_operator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' );
	[GrammarRule("assignment_operator")]
	public XAstParserRuleReturnScope assignment_operator()
	{
		EnterRule_assignment_operator();
		EnterRule("assignment_operator", 55);
		var retval = new XAstParserRuleReturnScope("assignment_operator");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set242 = default(IToken);

		object set242_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_operator");
		DebugLocation(403, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C.g:404:5: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(404, 5);

			set242=(IToken)input.LT(1);
			if (input.LA(1)==26||input.LA(1)==29||input.LA(1)==33||input.LA(1)==36||input.LA(1)==40||input.LA(1)==45||input.LA(1)==50||input.LA(1)==52||input.LA(1)==57||input.LA(1)==62||input.LA(1)==113)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set242, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_operator", 55);
			LeaveRule("assignment_operator", 55);
			LeaveRule_assignment_operator();
			if (state.backtracking > 0) { Memoize(input, 55, assignment_operator_StartIndex); }

		}
		DebugLocation(415, 4);
		} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
		return retval;

	}
	// $ANTLR end "assignment_operator"

	partial void EnterRule_conditional_expression();
	partial void LeaveRule_conditional_expression();

	// $ANTLR start "conditional_expression"
	// C.g:417:1: conditional_expression : ( logical_or_expression ( '?' expression ':' conditional_expression )? | logical_or_expression '?' ':' conditional_expression );
	[GrammarRule("conditional_expression")]
	public XAstParserRuleReturnScope conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 56);
		var retval = new XAstParserRuleReturnScope("conditional_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal244 = default(IToken);
		IToken char_literal246 = default(IToken);
		IToken char_literal249 = default(IToken);
		IToken char_literal250 = default(IToken);
		XAstParserRuleReturnScope logical_or_expression243 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression245 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression247 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logical_or_expression248 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression251 = default(XAstParserRuleReturnScope);

		object char_literal244_tree = default(object);
		object char_literal246_tree = default(object);
		object char_literal249_tree = default(object);
		object char_literal250_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(417, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C.g:418:5: ( logical_or_expression ( '?' expression ':' conditional_expression )? | logical_or_expression '?' ':' conditional_expression )
			int alt73=2;
			try { DebugEnterDecision(73, false);
			try
			{
				alt73 = dfa73.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:418:7: logical_or_expression ( '?' expression ':' conditional_expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 7);
				PushFollow(Follow._logical_or_expression_in_conditional_expression2365);
				logical_or_expression243=logical_or_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logical_or_expression243.Tree, logical_or_expression243, retval);
				DebugLocation(418, 29);
				// C.g:418:29: ( '?' expression ':' conditional_expression )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==58))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:418:30: '?' expression ':' conditional_expression
					{
					DebugLocation(418, 30);
					char_literal244=(IToken)Match(input,58,Follow._58_in_conditional_expression2368); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal244_tree = (object)adaptor.Create(char_literal244, retval);
					adaptor.AddChild(root_0, char_literal244_tree);
					}
					DebugLocation(418, 34);
					PushFollow(Follow._expression_in_conditional_expression2370);
					expression245=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression245.Tree, expression245, retval);
					DebugLocation(418, 45);
					char_literal246=(IToken)Match(input,46,Follow._46_in_conditional_expression2372); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal246_tree = (object)adaptor.Create(char_literal246, retval);
					adaptor.AddChild(root_0, char_literal246_tree);
					}
					DebugLocation(418, 49);
					PushFollow(Follow._conditional_expression_in_conditional_expression2374);
					conditional_expression247=conditional_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression247.Tree, conditional_expression247, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(72); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:420:7: logical_or_expression '?' ':' conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(420, 7);
				PushFollow(Follow._logical_or_expression_in_conditional_expression2389);
				logical_or_expression248=logical_or_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logical_or_expression248.Tree, logical_or_expression248, retval);
				DebugLocation(420, 29);
				char_literal249=(IToken)Match(input,58,Follow._58_in_conditional_expression2391); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal249_tree = (object)adaptor.Create(char_literal249, retval);
				adaptor.AddChild(root_0, char_literal249_tree);
				}
				DebugLocation(420, 33);
				char_literal250=(IToken)Match(input,46,Follow._46_in_conditional_expression2393); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal250_tree = (object)adaptor.Create(char_literal250, retval);
				adaptor.AddChild(root_0, char_literal250_tree);
				}
				DebugLocation(420, 37);
				PushFollow(Follow._conditional_expression_in_conditional_expression2395);
				conditional_expression251=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression251.Tree, conditional_expression251, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_expression", 56);
			LeaveRule("conditional_expression", 56);
			LeaveRule_conditional_expression();
			if (state.backtracking > 0) { Memoize(input, 56, conditional_expression_StartIndex); }

		}
		DebugLocation(421, 4);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"

	partial void EnterRule_logical_or_expression();
	partial void LeaveRule_logical_or_expression();

	// $ANTLR start "logical_or_expression"
	// C.g:423:1: logical_or_expression : logical_and_expression ( '||' logical_and_expression )* ;
	[GrammarRule("logical_or_expression")]
	public XAstParserRuleReturnScope logical_or_expression()
	{
		EnterRule_logical_or_expression();
		EnterRule("logical_or_expression", 57);
		var retval = new XAstParserRuleReturnScope("logical_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal253 = default(IToken);
		XAstParserRuleReturnScope logical_and_expression252 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logical_and_expression254 = default(XAstParserRuleReturnScope);

		object string_literal253_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_or_expression");
		DebugLocation(423, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C.g:424:5: ( logical_and_expression ( '||' logical_and_expression )* )
			DebugEnterAlt(1);
			// C.g:424:7: logical_and_expression ( '||' logical_and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(424, 7);
			PushFollow(Follow._logical_and_expression_in_logical_or_expression2412);
			logical_and_expression252=logical_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression252.Tree, logical_and_expression252, retval);
			DebugLocation(424, 30);
			// C.g:424:30: ( '||' logical_and_expression )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==114))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:424:31: '||' logical_and_expression
					{
					DebugLocation(424, 31);
					string_literal253=(IToken)Match(input,114,Follow._114_in_logical_or_expression2415); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal253_tree = (object)adaptor.Create(string_literal253, retval);
					adaptor.AddChild(root_0, string_literal253_tree);
					}
					DebugLocation(424, 36);
					PushFollow(Follow._logical_and_expression_in_logical_or_expression2417);
					logical_and_expression254=logical_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression254.Tree, logical_and_expression254, retval);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_or_expression", 57);
			LeaveRule("logical_or_expression", 57);
			LeaveRule_logical_or_expression();
			if (state.backtracking > 0) { Memoize(input, 57, logical_or_expression_StartIndex); }

		}
		DebugLocation(425, 4);
		} finally { DebugExitRule(GrammarFileName, "logical_or_expression"); }
		return retval;

	}
	// $ANTLR end "logical_or_expression"

	partial void EnterRule_logical_and_expression();
	partial void LeaveRule_logical_and_expression();

	// $ANTLR start "logical_and_expression"
	// C.g:427:1: logical_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
	[GrammarRule("logical_and_expression")]
	public XAstParserRuleReturnScope logical_and_expression()
	{
		EnterRule_logical_and_expression();
		EnterRule("logical_and_expression", 58);
		var retval = new XAstParserRuleReturnScope("logical_and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal256 = default(IToken);
		XAstParserRuleReturnScope inclusive_or_expression255 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope inclusive_or_expression257 = default(XAstParserRuleReturnScope);

		object string_literal256_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_and_expression");
		DebugLocation(427, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C.g:428:5: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:428:7: inclusive_or_expression ( '&&' inclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(428, 7);
			PushFollow(Follow._inclusive_or_expression_in_logical_and_expression2436);
			inclusive_or_expression255=inclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression255.Tree, inclusive_or_expression255, retval);
			DebugLocation(428, 31);
			// C.g:428:31: ( '&&' inclusive_or_expression )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==27))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:428:32: '&&' inclusive_or_expression
					{
					DebugLocation(428, 32);
					string_literal256=(IToken)Match(input,27,Follow._27_in_logical_and_expression2439); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal256_tree = (object)adaptor.Create(string_literal256, retval);
					adaptor.AddChild(root_0, string_literal256_tree);
					}
					DebugLocation(428, 37);
					PushFollow(Follow._inclusive_or_expression_in_logical_and_expression2441);
					inclusive_or_expression257=inclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression257.Tree, inclusive_or_expression257, retval);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_and_expression", 58);
			LeaveRule("logical_and_expression", 58);
			LeaveRule_logical_and_expression();
			if (state.backtracking > 0) { Memoize(input, 58, logical_and_expression_StartIndex); }

		}
		DebugLocation(429, 4);
		} finally { DebugExitRule(GrammarFileName, "logical_and_expression"); }
		return retval;

	}
	// $ANTLR end "logical_and_expression"

	partial void EnterRule_inclusive_or_expression();
	partial void LeaveRule_inclusive_or_expression();

	// $ANTLR start "inclusive_or_expression"
	// C.g:431:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
	[GrammarRule("inclusive_or_expression")]
	public XAstParserRuleReturnScope inclusive_or_expression()
	{
		EnterRule_inclusive_or_expression();
		EnterRule("inclusive_or_expression", 59);
		var retval = new XAstParserRuleReturnScope("inclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int inclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal259 = default(IToken);
		XAstParserRuleReturnScope exclusive_or_expression258 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope exclusive_or_expression260 = default(XAstParserRuleReturnScope);

		object char_literal259_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
		DebugLocation(431, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C.g:432:5: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:432:7: exclusive_or_expression ( '|' exclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(432, 7);
			PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression2460);
			exclusive_or_expression258=exclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression258.Tree, exclusive_or_expression258, retval);
			DebugLocation(432, 31);
			// C.g:432:31: ( '|' exclusive_or_expression )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==112))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:432:32: '|' exclusive_or_expression
					{
					DebugLocation(432, 32);
					char_literal259=(IToken)Match(input,112,Follow._112_in_inclusive_or_expression2463); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal259_tree = (object)adaptor.Create(char_literal259, retval);
					adaptor.AddChild(root_0, char_literal259_tree);
					}
					DebugLocation(432, 36);
					PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression2465);
					exclusive_or_expression260=exclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression260.Tree, exclusive_or_expression260, retval);

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusive_or_expression", 59);
			LeaveRule("inclusive_or_expression", 59);
			LeaveRule_inclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 59, inclusive_or_expression_StartIndex); }

		}
		DebugLocation(433, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "inclusive_or_expression"

	partial void EnterRule_exclusive_or_expression();
	partial void LeaveRule_exclusive_or_expression();

	// $ANTLR start "exclusive_or_expression"
	// C.g:435:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
	[GrammarRule("exclusive_or_expression")]
	public XAstParserRuleReturnScope exclusive_or_expression()
	{
		EnterRule_exclusive_or_expression();
		EnterRule("exclusive_or_expression", 60);
		var retval = new XAstParserRuleReturnScope("exclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int exclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal262 = default(IToken);
		XAstParserRuleReturnScope and_expression261 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope and_expression263 = default(XAstParserRuleReturnScope);

		object char_literal262_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
		DebugLocation(435, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C.g:436:5: ( and_expression ( '^' and_expression )* )
			DebugEnterAlt(1);
			// C.g:436:7: and_expression ( '^' and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(436, 7);
			PushFollow(Follow._and_expression_in_exclusive_or_expression2484);
			and_expression261=and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression261.Tree, and_expression261, retval);
			DebugLocation(436, 22);
			// C.g:436:22: ( '^' and_expression )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==61))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:436:23: '^' and_expression
					{
					DebugLocation(436, 23);
					char_literal262=(IToken)Match(input,61,Follow._61_in_exclusive_or_expression2487); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal262_tree = (object)adaptor.Create(char_literal262, retval);
					adaptor.AddChild(root_0, char_literal262_tree);
					}
					DebugLocation(436, 27);
					PushFollow(Follow._and_expression_in_exclusive_or_expression2489);
					and_expression263=and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression263.Tree, and_expression263, retval);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusive_or_expression", 60);
			LeaveRule("exclusive_or_expression", 60);
			LeaveRule_exclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 60, exclusive_or_expression_StartIndex); }

		}
		DebugLocation(437, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "exclusive_or_expression"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();

	// $ANTLR start "and_expression"
	// C.g:439:1: and_expression : equality_expression ( '&' equality_expression )* ;
	[GrammarRule("and_expression")]
	public XAstParserRuleReturnScope and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 61);
		var retval = new XAstParserRuleReturnScope("and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal265 = default(IToken);
		XAstParserRuleReturnScope equality_expression264 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equality_expression266 = default(XAstParserRuleReturnScope);

		object char_literal265_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(439, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C.g:440:5: ( equality_expression ( '&' equality_expression )* )
			DebugEnterAlt(1);
			// C.g:440:7: equality_expression ( '&' equality_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(440, 7);
			PushFollow(Follow._equality_expression_in_and_expression2508);
			equality_expression264=equality_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression264.Tree, equality_expression264, retval);
			DebugLocation(440, 27);
			// C.g:440:27: ( '&' equality_expression )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==28))
				{
					switch (input.LA(2))
					{
					case 30:
						{
						int LA78_31 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA78_32 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA78_33 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA78_34 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA78_35 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA78_36 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA78_37 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA78_38 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case 67:
						{
						int LA78_39 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case 66:
						{
						int LA78_40 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case 35:
						{
						int LA78_41 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case 39:
						{
						int LA78_42 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 116:
						{
						int LA78_43 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case 100:
						{
						int LA78_44 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case 63:
						{
						int LA78_45 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					case 70:
						{
						int LA78_46 = input.LA(3);

						if ((EvaluatePredicate(synpred150_C_fragment)))
						{
							alt78 = 1;
						}


						}
						break;
					}

				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:440:28: '&' equality_expression
					{
					DebugLocation(440, 28);
					char_literal265=(IToken)Match(input,28,Follow._28_in_and_expression2511); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal265_tree = (object)adaptor.Create(char_literal265, retval);
					adaptor.AddChild(root_0, char_literal265_tree);
					}
					DebugLocation(440, 32);
					PushFollow(Follow._equality_expression_in_and_expression2513);
					equality_expression266=equality_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression266.Tree, equality_expression266, retval);

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 61);
			LeaveRule("and_expression", 61);
			LeaveRule_and_expression();
			if (state.backtracking > 0) { Memoize(input, 61, and_expression_StartIndex); }

		}
		DebugLocation(441, 4);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();

	// $ANTLR start "equality_expression"
	// C.g:442:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
	[GrammarRule("equality_expression")]
	public XAstParserRuleReturnScope equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 62);
		var retval = new XAstParserRuleReturnScope("equality_expression");
		
		retval.Start = (IToken)input.LT(1);
		int equality_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set268 = default(IToken);
		XAstParserRuleReturnScope relational_expression267 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relational_expression269 = default(XAstParserRuleReturnScope);

		object set268_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(442, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C.g:443:5: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
			DebugEnterAlt(1);
			// C.g:443:7: relational_expression ( ( '==' | '!=' ) relational_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(443, 7);
			PushFollow(Follow._relational_expression_in_equality_expression2531);
			relational_expression267=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression267.Tree, relational_expression267, retval);
			DebugLocation(443, 29);
			// C.g:443:29: ( ( '==' | '!=' ) relational_expression )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==24||LA79_0==53))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:443:30: ( '==' | '!=' ) relational_expression
					{
					DebugLocation(443, 30);

					set268=(IToken)input.LT(1);
					if (input.LA(1)==24||input.LA(1)==53)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set268, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(443, 42);
					PushFollow(Follow._relational_expression_in_equality_expression2540);
					relational_expression269=relational_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression269.Tree, relational_expression269, retval);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 62);
			LeaveRule("equality_expression", 62);
			LeaveRule_equality_expression();
			if (state.backtracking > 0) { Memoize(input, 62, equality_expression_StartIndex); }

		}
		DebugLocation(444, 4);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();

	// $ANTLR start "relational_expression"
	// C.g:446:1: relational_expression : shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* ;
	[GrammarRule("relational_expression")]
	public XAstParserRuleReturnScope relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 63);
		var retval = new XAstParserRuleReturnScope("relational_expression");
		
		retval.Start = (IToken)input.LT(1);
		int relational_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set271 = default(IToken);
		XAstParserRuleReturnScope shift_expression270 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shift_expression272 = default(XAstParserRuleReturnScope);

		object set271_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(446, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C.g:447:5: ( shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* )
			DebugEnterAlt(1);
			// C.g:447:7: shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(447, 7);
			PushFollow(Follow._shift_expression_in_relational_expression2559);
			shift_expression270=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression270.Tree, shift_expression270, retval);
			DebugLocation(447, 24);
			// C.g:447:24: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==48||LA80_0==51||(LA80_0>=54 && LA80_0<=55)))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:447:25: ( '<' | '>' | '<=' | '>=' ) shift_expression
					{
					DebugLocation(447, 25);

					set271=(IToken)input.LT(1);
					if (input.LA(1)==48||input.LA(1)==51||(input.LA(1)>=54 && input.LA(1)<=55))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set271, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(447, 45);
					PushFollow(Follow._shift_expression_in_relational_expression2572);
					shift_expression272=shift_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression272.Tree, shift_expression272, retval);

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 63);
			LeaveRule("relational_expression", 63);
			LeaveRule_relational_expression();
			if (state.backtracking > 0) { Memoize(input, 63, relational_expression_StartIndex); }

		}
		DebugLocation(448, 4);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	partial void EnterRule_shift_expression();
	partial void LeaveRule_shift_expression();

	// $ANTLR start "shift_expression"
	// C.g:450:1: shift_expression : additive_expression ( ( '<<' | '>>' ) additive_expression )* ;
	[GrammarRule("shift_expression")]
	public XAstParserRuleReturnScope shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 64);
		var retval = new XAstParserRuleReturnScope("shift_expression");
		
		retval.Start = (IToken)input.LT(1);
		int shift_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set274 = default(IToken);
		XAstParserRuleReturnScope additive_expression273 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope additive_expression275 = default(XAstParserRuleReturnScope);

		object set274_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(450, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C.g:451:5: ( additive_expression ( ( '<<' | '>>' ) additive_expression )* )
			DebugEnterAlt(1);
			// C.g:451:7: additive_expression ( ( '<<' | '>>' ) additive_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(451, 7);
			PushFollow(Follow._additive_expression_in_shift_expression2591);
			additive_expression273=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression273.Tree, additive_expression273, retval);
			DebugLocation(451, 27);
			// C.g:451:27: ( ( '<<' | '>>' ) additive_expression )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==49||LA81_0==56))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:451:28: ( '<<' | '>>' ) additive_expression
					{
					DebugLocation(451, 28);

					set274=(IToken)input.LT(1);
					if (input.LA(1)==49||input.LA(1)==56)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set274, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(451, 40);
					PushFollow(Follow._additive_expression_in_shift_expression2600);
					additive_expression275=additive_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression275.Tree, additive_expression275, retval);

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expression", 64);
			LeaveRule("shift_expression", 64);
			LeaveRule_shift_expression();
			if (state.backtracking > 0) { Memoize(input, 64, shift_expression_StartIndex); }

		}
		DebugLocation(452, 4);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C.g:456:1: statement : ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement | gcc_asm_statement );
	[GrammarRule("statement")]
	public XAstParserRuleReturnScope statement()
	{
		EnterRule_statement();
		EnterRule("statement", 65);
		var retval = new XAstParserRuleReturnScope("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope labeled_statement276 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement277 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement278 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope selection_statement279 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope iteration_statement280 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope jump_statement281 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_statement282 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(456, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C.g:457:5: ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement | gcc_asm_statement )
			int alt82=7;
			try { DebugEnterDecision(82, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA82_1 = input.LA(2);

				if ((LA82_1==46))
				{
					alt82 = 1;
				}
				else if (((LA82_1>=24 && LA82_1<=30)||(LA82_1>=32 && LA82_1<=42)||(LA82_1>=44 && LA82_1<=45)||(LA82_1>=47 && LA82_1<=59)||(LA82_1>=61 && LA82_1<=62)||(LA82_1>=112 && LA82_1<=114)))
				{
					alt82 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 78:
			case 82:
				{
				alt82 = 1;
				}
				break;
			case 111:
				{
				alt82 = 2;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 23:
			case 28:
			case 30:
			case 32:
			case 34:
			case 35:
			case 38:
			case 39:
			case 47:
			case 63:
			case 66:
			case 67:
			case 70:
			case 100:
			case 116:
				{
				alt82 = 3;
				}
				break;
			case 91:
			case 103:
				{
				alt82 = 4;
				}
				break;
			case 83:
			case 89:
			case 110:
				{
				alt82 = 5;
				}
				break;
			case 77:
			case 81:
			case 90:
			case 97:
				{
				alt82 = 6;
				}
				break;
			case 64:
			case 75:
				{
				alt82 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:457:7: labeled_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(457, 7);
				PushFollow(Follow._labeled_statement_in_statement2621);
				labeled_statement276=labeled_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeled_statement276.Tree, labeled_statement276, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:458:7: compound_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(458, 7);
				PushFollow(Follow._compound_statement_in_statement2629);
				compound_statement277=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement277.Tree, compound_statement277, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:459:7: expression_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(459, 7);
				PushFollow(Follow._expression_statement_in_statement2637);
				expression_statement278=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement278.Tree, expression_statement278, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:460:7: selection_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(460, 7);
				PushFollow(Follow._selection_statement_in_statement2645);
				selection_statement279=selection_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_statement279.Tree, selection_statement279, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:461:7: iteration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 7);
				PushFollow(Follow._iteration_statement_in_statement2653);
				iteration_statement280=iteration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iteration_statement280.Tree, iteration_statement280, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:462:7: jump_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(462, 7);
				PushFollow(Follow._jump_statement_in_statement2661);
				jump_statement281=jump_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, jump_statement281.Tree, jump_statement281, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:463:7: gcc_asm_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(463, 7);
				PushFollow(Follow._gcc_asm_statement_in_statement2669);
				gcc_asm_statement282=gcc_asm_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_statement282.Tree, gcc_asm_statement282, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 65);
			LeaveRule("statement", 65);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 65, statement_StartIndex); }

		}
		DebugLocation(464, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_labeled_statement();
	partial void LeaveRule_labeled_statement();

	// $ANTLR start "labeled_statement"
	// C.g:466:1: labeled_statement : ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement );
	[GrammarRule("labeled_statement")]
	public XAstParserRuleReturnScope labeled_statement()
	{
		EnterRule_labeled_statement();
		EnterRule("labeled_statement", 66);
		var retval = new XAstParserRuleReturnScope("labeled_statement");
		
		retval.Start = (IToken)input.LT(1);
		int labeled_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER283 = default(IToken);
		IToken char_literal284 = default(IToken);
		IToken string_literal286 = default(IToken);
		IToken char_literal288 = default(IToken);
		IToken string_literal290 = default(IToken);
		IToken char_literal291 = default(IToken);
		XAstParserRuleReturnScope statement285 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression287 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement289 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement292 = default(XAstParserRuleReturnScope);

		object IDENTIFIER283_tree = default(object);
		object char_literal284_tree = default(object);
		object string_literal286_tree = default(object);
		object char_literal288_tree = default(object);
		object string_literal290_tree = default(object);
		object char_literal291_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "labeled_statement");
		DebugLocation(466, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C.g:467:5: ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement )
			int alt83=3;
			try { DebugEnterDecision(83, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt83 = 1;
				}
				break;
			case 78:
				{
				alt83 = 2;
				}
				break;
			case 82:
				{
				alt83 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:467:7: IDENTIFIER ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(467, 7);
				IDENTIFIER283=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_labeled_statement2686), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER283_tree = (object)adaptor.Create(IDENTIFIER283, retval);
				adaptor.AddChild(root_0, IDENTIFIER283_tree);
				}
				DebugLocation(467, 18);
				char_literal284=(IToken)Match(input,46,Follow._46_in_labeled_statement2688); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal284_tree = (object)adaptor.Create(char_literal284, retval);
				adaptor.AddChild(root_0, char_literal284_tree);
				}
				DebugLocation(467, 22);
				PushFollow(Follow._statement_in_labeled_statement2690);
				statement285=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement285.Tree, statement285, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:468:7: 'case' constant_expression ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(468, 7);
				string_literal286=(IToken)Match(input,78,Follow._78_in_labeled_statement2698); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal286_tree = (object)adaptor.Create(string_literal286, retval);
				adaptor.AddChild(root_0, string_literal286_tree);
				}
				DebugLocation(468, 14);
				PushFollow(Follow._constant_expression_in_labeled_statement2700);
				constant_expression287=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression287.Tree, constant_expression287, retval);
				DebugLocation(468, 34);
				char_literal288=(IToken)Match(input,46,Follow._46_in_labeled_statement2702); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal288_tree = (object)adaptor.Create(char_literal288, retval);
				adaptor.AddChild(root_0, char_literal288_tree);
				}
				DebugLocation(468, 38);
				PushFollow(Follow._statement_in_labeled_statement2704);
				statement289=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement289.Tree, statement289, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:469:7: 'default' ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(469, 7);
				string_literal290=(IToken)Match(input,82,Follow._82_in_labeled_statement2712); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal290_tree = (object)adaptor.Create(string_literal290, retval);
				adaptor.AddChild(root_0, string_literal290_tree);
				}
				DebugLocation(469, 17);
				char_literal291=(IToken)Match(input,46,Follow._46_in_labeled_statement2714); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal291_tree = (object)adaptor.Create(char_literal291, retval);
				adaptor.AddChild(root_0, char_literal291_tree);
				}
				DebugLocation(469, 21);
				PushFollow(Follow._statement_in_labeled_statement2716);
				statement292=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement292.Tree, statement292, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeled_statement", 66);
			LeaveRule("labeled_statement", 66);
			LeaveRule_labeled_statement();
			if (state.backtracking > 0) { Memoize(input, 66, labeled_statement_StartIndex); }

		}
		DebugLocation(470, 4);
		} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
		return retval;

	}
	// $ANTLR end "labeled_statement"

	partial void EnterRule_compound_statement();
	partial void LeaveRule_compound_statement();

	// $ANTLR start "compound_statement"
	// C.g:472:1: compound_statement : '{' ( block_item )* '}' ;
	[GrammarRule("compound_statement")]
	public XAstParserRuleReturnScope compound_statement()
	{
		EnterRule_compound_statement();
		EnterRule("compound_statement", 67);
		var retval = new XAstParserRuleReturnScope("compound_statement");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int compound_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal293 = default(IToken);
		IToken char_literal295 = default(IToken);
		XAstParserRuleReturnScope block_item294 = default(XAstParserRuleReturnScope);

		object char_literal293_tree = default(object);
		object char_literal295_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "compound_statement");
		DebugLocation(472, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C.g:477:5: ( '{' ( block_item )* '}' )
			DebugEnterAlt(1);
			// C.g:477:7: '{' ( block_item )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(477, 7);
			char_literal293=(IToken)Match(input,111,Follow._111_in_compound_statement2744); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal293_tree = (object)adaptor.Create(char_literal293, retval);
			adaptor.AddChild(root_0, char_literal293_tree);
			}
			DebugLocation(477, 11);
			// C.g:477:11: ( block_item )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==CHARACTER_LITERAL||LA84_0==DECIMAL_LITERAL||LA84_0==FLOATING_POINT_LITERAL||LA84_0==HEX_LITERAL||LA84_0==IDENTIFIER||LA84_0==OCTAL_LITERAL||LA84_0==STRING_LITERAL||LA84_0==23||LA84_0==28||LA84_0==30||LA84_0==32||(LA84_0>=34 && LA84_0<=35)||(LA84_0>=38 && LA84_0<=39)||LA84_0==47||(LA84_0>=63 && LA84_0<=84)||(LA84_0>=86 && LA84_0<=111)||LA84_0==116))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:477:11: block_item
					{
					DebugLocation(477, 11);
					PushFollow(Follow._block_item_in_compound_statement2746);
					block_item294=block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block_item294.Tree, block_item294, retval);

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }

			DebugLocation(477, 23);
			char_literal295=(IToken)Match(input,115,Follow._115_in_compound_statement2749); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal295_tree = (object)adaptor.Create(char_literal295, retval);
			adaptor.AddChild(root_0, char_literal295_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compound_statement", 67);
			LeaveRule("compound_statement", 67);
			LeaveRule_compound_statement();
			if (state.backtracking > 0) { Memoize(input, 67, compound_statement_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(478, 4);
		} finally { DebugExitRule(GrammarFileName, "compound_statement"); }
		return retval;

	}
	// $ANTLR end "compound_statement"

	partial void EnterRule_block_item();
	partial void LeaveRule_block_item();

	// $ANTLR start "block_item"
	// C.g:480:1: block_item : ( declaration | statement );
	[GrammarRule("block_item")]
	public XAstParserRuleReturnScope block_item()
	{
		EnterRule_block_item();
		EnterRule("block_item", 68);
		var retval = new XAstParserRuleReturnScope("block_item");
		
		retval.Start = (IToken)input.LT(1);
		int block_item_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration296 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement297 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "block_item");
		DebugLocation(480, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C.g:481:5: ( declaration | statement )
			int alt85=2;
			try { DebugEnterDecision(85, false);
			try
			{
				alt85 = dfa85.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:481:7: declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(481, 7);
				PushFollow(Follow._declaration_in_block_item2766);
				declaration296=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration296.Tree, declaration296, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:481:21: statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(481, 21);
				PushFollow(Follow._statement_in_block_item2770);
				statement297=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement297.Tree, statement297, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block_item", 68);
			LeaveRule("block_item", 68);
			LeaveRule_block_item();
			if (state.backtracking > 0) { Memoize(input, 68, block_item_StartIndex); }

		}
		DebugLocation(482, 4);
		} finally { DebugExitRule(GrammarFileName, "block_item"); }
		return retval;

	}
	// $ANTLR end "block_item"

	partial void EnterRule_expression_statement();
	partial void LeaveRule_expression_statement();

	// $ANTLR start "expression_statement"
	// C.g:484:1: expression_statement : ( ';' | expression ';' );
	[GrammarRule("expression_statement")]
	public XAstParserRuleReturnScope expression_statement()
	{
		EnterRule_expression_statement();
		EnterRule("expression_statement", 69);
		var retval = new XAstParserRuleReturnScope("expression_statement");
		
		retval.Start = (IToken)input.LT(1);
		int expression_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal298 = default(IToken);
		IToken char_literal300 = default(IToken);
		XAstParserRuleReturnScope expression299 = default(XAstParserRuleReturnScope);

		object char_literal298_tree = default(object);
		object char_literal300_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_statement");
		DebugLocation(484, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C.g:485:5: ( ';' | expression ';' )
			int alt86=2;
			try { DebugEnterDecision(86, false);
			int LA86_0 = input.LA(1);

			if ((LA86_0==47))
			{
				alt86 = 1;
			}
			else if ((LA86_0==CHARACTER_LITERAL||LA86_0==DECIMAL_LITERAL||LA86_0==FLOATING_POINT_LITERAL||LA86_0==HEX_LITERAL||LA86_0==IDENTIFIER||LA86_0==OCTAL_LITERAL||LA86_0==STRING_LITERAL||LA86_0==23||LA86_0==28||LA86_0==30||LA86_0==32||(LA86_0>=34 && LA86_0<=35)||(LA86_0>=38 && LA86_0<=39)||LA86_0==63||(LA86_0>=66 && LA86_0<=67)||LA86_0==70||LA86_0==100||LA86_0==116))
			{
				alt86 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:485:7: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(485, 7);
				char_literal298=(IToken)Match(input,47,Follow._47_in_expression_statement2787); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal298_tree = (object)adaptor.Create(char_literal298, retval);
				adaptor.AddChild(root_0, char_literal298_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:486:7: expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(486, 7);
				PushFollow(Follow._expression_in_expression_statement2795);
				expression299=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression299.Tree, expression299, retval);
				DebugLocation(486, 18);
				char_literal300=(IToken)Match(input,47,Follow._47_in_expression_statement2797); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal300_tree = (object)adaptor.Create(char_literal300, retval);
				adaptor.AddChild(root_0, char_literal300_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_statement", 69);
			LeaveRule("expression_statement", 69);
			LeaveRule_expression_statement();
			if (state.backtracking > 0) { Memoize(input, 69, expression_statement_StartIndex); }

		}
		DebugLocation(487, 4);
		} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
		return retval;

	}
	// $ANTLR end "expression_statement"

	partial void EnterRule_selection_statement();
	partial void LeaveRule_selection_statement();

	// $ANTLR start "selection_statement"
	// C.g:489:1: selection_statement : ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement );
	[GrammarRule("selection_statement")]
	public XAstParserRuleReturnScope selection_statement()
	{
		EnterRule_selection_statement();
		EnterRule("selection_statement", 70);
		var retval = new XAstParserRuleReturnScope("selection_statement");
		
		retval.Start = (IToken)input.LT(1);
		int selection_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal301 = default(IToken);
		IToken char_literal302 = default(IToken);
		IToken char_literal304 = default(IToken);
		IToken string_literal306 = default(IToken);
		IToken string_literal308 = default(IToken);
		IToken char_literal309 = default(IToken);
		IToken char_literal311 = default(IToken);
		XAstParserRuleReturnScope expression303 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement305 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement307 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression310 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement312 = default(XAstParserRuleReturnScope);

		object string_literal301_tree = default(object);
		object char_literal302_tree = default(object);
		object char_literal304_tree = default(object);
		object string_literal306_tree = default(object);
		object string_literal308_tree = default(object);
		object char_literal309_tree = default(object);
		object char_literal311_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "selection_statement");
		DebugLocation(489, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C.g:490:5: ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement )
			int alt88=2;
			try { DebugEnterDecision(88, false);
			int LA88_0 = input.LA(1);

			if ((LA88_0==91))
			{
				alt88 = 1;
			}
			else if ((LA88_0==103))
			{
				alt88 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:490:7: 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(490, 7);
				string_literal301=(IToken)Match(input,91,Follow._91_in_selection_statement2814); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal301_tree = (object)adaptor.Create(string_literal301, retval);
				adaptor.AddChild(root_0, string_literal301_tree);
				}
				DebugLocation(490, 12);
				char_literal302=(IToken)Match(input,30,Follow._30_in_selection_statement2816); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal302_tree = (object)adaptor.Create(char_literal302, retval);
				adaptor.AddChild(root_0, char_literal302_tree);
				}
				DebugLocation(490, 16);
				PushFollow(Follow._expression_in_selection_statement2818);
				expression303=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression303.Tree, expression303, retval);
				DebugLocation(490, 27);
				char_literal304=(IToken)Match(input,31,Follow._31_in_selection_statement2820); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal304_tree = (object)adaptor.Create(char_literal304, retval);
				adaptor.AddChild(root_0, char_literal304_tree);
				}
				DebugLocation(490, 31);
				PushFollow(Follow._statement_in_selection_statement2822);
				statement305=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement305.Tree, statement305, retval);
				DebugLocation(490, 41);
				// C.g:490:41: ( options {k=1; backtrack=false; } : 'else' statement )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==85))
				{
					int LA87_1 = input.LA(2);

					if ((true))
					{
						alt87 = 1;
					}
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:490:74: 'else' statement
					{
					DebugLocation(490, 74);
					string_literal306=(IToken)Match(input,85,Follow._85_in_selection_statement2837); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal306_tree = (object)adaptor.Create(string_literal306, retval);
					adaptor.AddChild(root_0, string_literal306_tree);
					}
					DebugLocation(490, 81);
					PushFollow(Follow._statement_in_selection_statement2839);
					statement307=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement307.Tree, statement307, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:491:7: 'switch' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(491, 7);
				string_literal308=(IToken)Match(input,103,Follow._103_in_selection_statement2849); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal308_tree = (object)adaptor.Create(string_literal308, retval);
				adaptor.AddChild(root_0, string_literal308_tree);
				}
				DebugLocation(491, 16);
				char_literal309=(IToken)Match(input,30,Follow._30_in_selection_statement2851); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal309_tree = (object)adaptor.Create(char_literal309, retval);
				adaptor.AddChild(root_0, char_literal309_tree);
				}
				DebugLocation(491, 20);
				PushFollow(Follow._expression_in_selection_statement2853);
				expression310=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression310.Tree, expression310, retval);
				DebugLocation(491, 31);
				char_literal311=(IToken)Match(input,31,Follow._31_in_selection_statement2855); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal311_tree = (object)adaptor.Create(char_literal311, retval);
				adaptor.AddChild(root_0, char_literal311_tree);
				}
				DebugLocation(491, 35);
				PushFollow(Follow._statement_in_selection_statement2857);
				statement312=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement312.Tree, statement312, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_statement", 70);
			LeaveRule("selection_statement", 70);
			LeaveRule_selection_statement();
			if (state.backtracking > 0) { Memoize(input, 70, selection_statement_StartIndex); }

		}
		DebugLocation(492, 4);
		} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
		return retval;

	}
	// $ANTLR end "selection_statement"

	partial void EnterRule_iteration_statement();
	partial void LeaveRule_iteration_statement();

	// $ANTLR start "iteration_statement"
	// C.g:494:1: iteration_statement : ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement );
	[GrammarRule("iteration_statement")]
	public XAstParserRuleReturnScope iteration_statement()
	{
		EnterRule_iteration_statement();
		EnterRule("iteration_statement", 71);
		var retval = new XAstParserRuleReturnScope("iteration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int iteration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal313 = default(IToken);
		IToken char_literal314 = default(IToken);
		IToken char_literal316 = default(IToken);
		IToken string_literal318 = default(IToken);
		IToken string_literal320 = default(IToken);
		IToken char_literal321 = default(IToken);
		IToken char_literal323 = default(IToken);
		IToken char_literal324 = default(IToken);
		IToken string_literal325 = default(IToken);
		IToken char_literal326 = default(IToken);
		IToken char_literal330 = default(IToken);
		XAstParserRuleReturnScope expression315 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement317 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement319 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression322 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement327 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement328 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression329 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement331 = default(XAstParserRuleReturnScope);

		object string_literal313_tree = default(object);
		object char_literal314_tree = default(object);
		object char_literal316_tree = default(object);
		object string_literal318_tree = default(object);
		object string_literal320_tree = default(object);
		object char_literal321_tree = default(object);
		object char_literal323_tree = default(object);
		object char_literal324_tree = default(object);
		object string_literal325_tree = default(object);
		object char_literal326_tree = default(object);
		object char_literal330_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "iteration_statement");
		DebugLocation(494, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C.g:495:5: ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement )
			int alt90=3;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case 110:
				{
				alt90 = 1;
				}
				break;
			case 83:
				{
				alt90 = 2;
				}
				break;
			case 89:
				{
				alt90 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:495:7: 'while' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(495, 7);
				string_literal313=(IToken)Match(input,110,Follow._110_in_iteration_statement2874); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal313_tree = (object)adaptor.Create(string_literal313, retval);
				adaptor.AddChild(root_0, string_literal313_tree);
				}
				DebugLocation(495, 15);
				char_literal314=(IToken)Match(input,30,Follow._30_in_iteration_statement2876); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal314_tree = (object)adaptor.Create(char_literal314, retval);
				adaptor.AddChild(root_0, char_literal314_tree);
				}
				DebugLocation(495, 19);
				PushFollow(Follow._expression_in_iteration_statement2878);
				expression315=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression315.Tree, expression315, retval);
				DebugLocation(495, 30);
				char_literal316=(IToken)Match(input,31,Follow._31_in_iteration_statement2880); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal316_tree = (object)adaptor.Create(char_literal316, retval);
				adaptor.AddChild(root_0, char_literal316_tree);
				}
				DebugLocation(495, 34);
				PushFollow(Follow._statement_in_iteration_statement2882);
				statement317=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement317.Tree, statement317, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:496:7: 'do' statement 'while' '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(496, 7);
				string_literal318=(IToken)Match(input,83,Follow._83_in_iteration_statement2890); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal318_tree = (object)adaptor.Create(string_literal318, retval);
				adaptor.AddChild(root_0, string_literal318_tree);
				}
				DebugLocation(496, 12);
				PushFollow(Follow._statement_in_iteration_statement2892);
				statement319=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement319.Tree, statement319, retval);
				DebugLocation(496, 22);
				string_literal320=(IToken)Match(input,110,Follow._110_in_iteration_statement2894); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal320_tree = (object)adaptor.Create(string_literal320, retval);
				adaptor.AddChild(root_0, string_literal320_tree);
				}
				DebugLocation(496, 30);
				char_literal321=(IToken)Match(input,30,Follow._30_in_iteration_statement2896); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal321_tree = (object)adaptor.Create(char_literal321, retval);
				adaptor.AddChild(root_0, char_literal321_tree);
				}
				DebugLocation(496, 34);
				PushFollow(Follow._expression_in_iteration_statement2898);
				expression322=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression322.Tree, expression322, retval);
				DebugLocation(496, 45);
				char_literal323=(IToken)Match(input,31,Follow._31_in_iteration_statement2900); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal323_tree = (object)adaptor.Create(char_literal323, retval);
				adaptor.AddChild(root_0, char_literal323_tree);
				}
				DebugLocation(496, 49);
				char_literal324=(IToken)Match(input,47,Follow._47_in_iteration_statement2902); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal324_tree = (object)adaptor.Create(char_literal324, retval);
				adaptor.AddChild(root_0, char_literal324_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:497:7: 'for' '(' expression_statement expression_statement ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(497, 7);
				string_literal325=(IToken)Match(input,89,Follow._89_in_iteration_statement2910); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal325_tree = (object)adaptor.Create(string_literal325, retval);
				adaptor.AddChild(root_0, string_literal325_tree);
				}
				DebugLocation(497, 13);
				char_literal326=(IToken)Match(input,30,Follow._30_in_iteration_statement2912); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal326_tree = (object)adaptor.Create(char_literal326, retval);
				adaptor.AddChild(root_0, char_literal326_tree);
				}
				DebugLocation(497, 17);
				PushFollow(Follow._expression_statement_in_iteration_statement2914);
				expression_statement327=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement327.Tree, expression_statement327, retval);
				DebugLocation(497, 38);
				PushFollow(Follow._expression_statement_in_iteration_statement2916);
				expression_statement328=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement328.Tree, expression_statement328, retval);
				DebugLocation(497, 59);
				// C.g:497:59: ( expression )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==CHARACTER_LITERAL||LA89_0==DECIMAL_LITERAL||LA89_0==FLOATING_POINT_LITERAL||LA89_0==HEX_LITERAL||LA89_0==IDENTIFIER||LA89_0==OCTAL_LITERAL||LA89_0==STRING_LITERAL||LA89_0==23||LA89_0==28||LA89_0==30||LA89_0==32||(LA89_0>=34 && LA89_0<=35)||(LA89_0>=38 && LA89_0<=39)||LA89_0==63||(LA89_0>=66 && LA89_0<=67)||LA89_0==70||LA89_0==100||LA89_0==116))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:497:59: expression
					{
					DebugLocation(497, 59);
					PushFollow(Follow._expression_in_iteration_statement2918);
					expression329=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression329.Tree, expression329, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(497, 71);
				char_literal330=(IToken)Match(input,31,Follow._31_in_iteration_statement2921); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal330_tree = (object)adaptor.Create(char_literal330, retval);
				adaptor.AddChild(root_0, char_literal330_tree);
				}
				DebugLocation(497, 75);
				PushFollow(Follow._statement_in_iteration_statement2923);
				statement331=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement331.Tree, statement331, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iteration_statement", 71);
			LeaveRule("iteration_statement", 71);
			LeaveRule_iteration_statement();
			if (state.backtracking > 0) { Memoize(input, 71, iteration_statement_StartIndex); }

		}
		DebugLocation(498, 4);
		} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
		return retval;

	}
	// $ANTLR end "iteration_statement"

	partial void EnterRule_jump_statement();
	partial void LeaveRule_jump_statement();

	// $ANTLR start "jump_statement"
	// C.g:500:1: jump_statement : ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' );
	[GrammarRule("jump_statement")]
	public XAstParserRuleReturnScope jump_statement()
	{
		EnterRule_jump_statement();
		EnterRule("jump_statement", 72);
		var retval = new XAstParserRuleReturnScope("jump_statement");
		
		retval.Start = (IToken)input.LT(1);
		int jump_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal332 = default(IToken);
		IToken IDENTIFIER333 = default(IToken);
		IToken char_literal334 = default(IToken);
		IToken string_literal335 = default(IToken);
		IToken char_literal336 = default(IToken);
		IToken string_literal337 = default(IToken);
		IToken char_literal338 = default(IToken);
		IToken string_literal339 = default(IToken);
		IToken char_literal340 = default(IToken);
		IToken string_literal341 = default(IToken);
		IToken char_literal343 = default(IToken);
		XAstParserRuleReturnScope expression342 = default(XAstParserRuleReturnScope);

		object string_literal332_tree = default(object);
		object IDENTIFIER333_tree = default(object);
		object char_literal334_tree = default(object);
		object string_literal335_tree = default(object);
		object char_literal336_tree = default(object);
		object string_literal337_tree = default(object);
		object char_literal338_tree = default(object);
		object string_literal339_tree = default(object);
		object char_literal340_tree = default(object);
		object string_literal341_tree = default(object);
		object char_literal343_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "jump_statement");
		DebugLocation(500, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C.g:501:5: ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' )
			int alt91=5;
			try { DebugEnterDecision(91, false);
			switch (input.LA(1))
			{
			case 90:
				{
				alt91 = 1;
				}
				break;
			case 81:
				{
				alt91 = 2;
				}
				break;
			case 77:
				{
				alt91 = 3;
				}
				break;
			case 97:
				{
				int LA91_4 = input.LA(2);

				if ((LA91_4==47))
				{
					alt91 = 4;
				}
				else if ((LA91_4==CHARACTER_LITERAL||LA91_4==DECIMAL_LITERAL||LA91_4==FLOATING_POINT_LITERAL||LA91_4==HEX_LITERAL||LA91_4==IDENTIFIER||LA91_4==OCTAL_LITERAL||LA91_4==STRING_LITERAL||LA91_4==23||LA91_4==28||LA91_4==30||LA91_4==32||(LA91_4>=34 && LA91_4<=35)||(LA91_4>=38 && LA91_4<=39)||LA91_4==63||(LA91_4>=66 && LA91_4<=67)||LA91_4==70||LA91_4==100||LA91_4==116))
				{
					alt91 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:501:7: 'goto' IDENTIFIER ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(501, 7);
				string_literal332=(IToken)Match(input,90,Follow._90_in_jump_statement2940); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal332_tree = (object)adaptor.Create(string_literal332, retval);
				adaptor.AddChild(root_0, string_literal332_tree);
				}
				DebugLocation(501, 14);
				IDENTIFIER333=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_jump_statement2942), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER333_tree = (object)adaptor.Create(IDENTIFIER333, retval);
				adaptor.AddChild(root_0, IDENTIFIER333_tree);
				}
				DebugLocation(501, 25);
				char_literal334=(IToken)Match(input,47,Follow._47_in_jump_statement2944); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal334_tree = (object)adaptor.Create(char_literal334, retval);
				adaptor.AddChild(root_0, char_literal334_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:502:7: 'continue' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(502, 7);
				string_literal335=(IToken)Match(input,81,Follow._81_in_jump_statement2952); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal335_tree = (object)adaptor.Create(string_literal335, retval);
				adaptor.AddChild(root_0, string_literal335_tree);
				}
				DebugLocation(502, 18);
				char_literal336=(IToken)Match(input,47,Follow._47_in_jump_statement2954); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal336_tree = (object)adaptor.Create(char_literal336, retval);
				adaptor.AddChild(root_0, char_literal336_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:503:7: 'break' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(503, 7);
				string_literal337=(IToken)Match(input,77,Follow._77_in_jump_statement2962); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal337_tree = (object)adaptor.Create(string_literal337, retval);
				adaptor.AddChild(root_0, string_literal337_tree);
				}
				DebugLocation(503, 15);
				char_literal338=(IToken)Match(input,47,Follow._47_in_jump_statement2964); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal338_tree = (object)adaptor.Create(char_literal338, retval);
				adaptor.AddChild(root_0, char_literal338_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:504:7: 'return' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(504, 7);
				string_literal339=(IToken)Match(input,97,Follow._97_in_jump_statement2972); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal339_tree = (object)adaptor.Create(string_literal339, retval);
				adaptor.AddChild(root_0, string_literal339_tree);
				}
				DebugLocation(504, 16);
				char_literal340=(IToken)Match(input,47,Follow._47_in_jump_statement2974); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal340_tree = (object)adaptor.Create(char_literal340, retval);
				adaptor.AddChild(root_0, char_literal340_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:505:7: 'return' expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(505, 7);
				string_literal341=(IToken)Match(input,97,Follow._97_in_jump_statement2982); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal341_tree = (object)adaptor.Create(string_literal341, retval);
				adaptor.AddChild(root_0, string_literal341_tree);
				}
				DebugLocation(505, 16);
				PushFollow(Follow._expression_in_jump_statement2984);
				expression342=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression342.Tree, expression342, retval);
				DebugLocation(505, 27);
				char_literal343=(IToken)Match(input,47,Follow._47_in_jump_statement2986); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal343_tree = (object)adaptor.Create(char_literal343, retval);
				adaptor.AddChild(root_0, char_literal343_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jump_statement", 72);
			LeaveRule("jump_statement", 72);
			LeaveRule_jump_statement();
			if (state.backtracking > 0) { Memoize(input, 72, jump_statement_StartIndex); }

		}
		DebugLocation(506, 4);
		} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
		return retval;

	}
	// $ANTLR end "jump_statement"

	partial void EnterRule_gcc_function_specifier();
	partial void LeaveRule_gcc_function_specifier();

	// $ANTLR start "gcc_function_specifier"
	// C.g:510:1: gcc_function_specifier : ( 'inline' | '__inline__' | '__inline' | '__builtin_va_list' );
	[GrammarRule("gcc_function_specifier")]
	public XAstParserRuleReturnScope gcc_function_specifier()
	{
		EnterRule_gcc_function_specifier();
		EnterRule("gcc_function_specifier", 73);
		var retval = new XAstParserRuleReturnScope("gcc_function_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_function_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set344 = default(IToken);

		object set344_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_function_specifier");
		DebugLocation(510, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// C.g:511:5: ( 'inline' | '__inline__' | '__inline' | '__builtin_va_list' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(511, 5);

			set344=(IToken)input.LT(1);
			if (input.LA(1)==68||(input.LA(1)>=71 && input.LA(1)<=72)||input.LA(1)==92)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set344, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_function_specifier", 73);
			LeaveRule("gcc_function_specifier", 73);
			LeaveRule_gcc_function_specifier();
			if (state.backtracking > 0) { Memoize(input, 73, gcc_function_specifier_StartIndex); }

		}
		DebugLocation(515, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_function_specifier"); }
		return retval;

	}
	// $ANTLR end "gcc_function_specifier"

	partial void EnterRule_gcc_extension_specifier();
	partial void LeaveRule_gcc_extension_specifier();

	// $ANTLR start "gcc_extension_specifier"
	// C.g:517:1: gcc_extension_specifier : '__extension__' ;
	[GrammarRule("gcc_extension_specifier")]
	public XAstParserRuleReturnScope gcc_extension_specifier()
	{
		EnterRule_gcc_extension_specifier();
		EnterRule("gcc_extension_specifier", 74);
		var retval = new XAstParserRuleReturnScope("gcc_extension_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_extension_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal345 = default(IToken);

		object string_literal345_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_extension_specifier");
		DebugLocation(517, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// C.g:518:5: ( '__extension__' )
			DebugEnterAlt(1);
			// C.g:518:7: '__extension__'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(518, 7);
			string_literal345=(IToken)Match(input,70,Follow._70_in_gcc_extension_specifier3046); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal345_tree = (object)adaptor.Create(string_literal345, retval);
			adaptor.AddChild(root_0, string_literal345_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_extension_specifier", 74);
			LeaveRule("gcc_extension_specifier", 74);
			LeaveRule_gcc_extension_specifier();
			if (state.backtracking > 0) { Memoize(input, 74, gcc_extension_specifier_StartIndex); }

		}
		DebugLocation(519, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_extension_specifier"); }
		return retval;

	}
	// $ANTLR end "gcc_extension_specifier"

	partial void EnterRule_gcc_declaration_specifier();
	partial void LeaveRule_gcc_declaration_specifier();

	// $ANTLR start "gcc_declaration_specifier"
	// C.g:521:1: gcc_declaration_specifier : ( gcc_attribute | gcc_extension_specifier );
	[GrammarRule("gcc_declaration_specifier")]
	public XAstParserRuleReturnScope gcc_declaration_specifier()
	{
		EnterRule_gcc_declaration_specifier();
		EnterRule("gcc_declaration_specifier", 75);
		var retval = new XAstParserRuleReturnScope("gcc_declaration_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_declaration_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope gcc_attribute346 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_extension_specifier347 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_declaration_specifier");
		DebugLocation(521, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// C.g:522:5: ( gcc_attribute | gcc_extension_specifier )
			int alt92=2;
			try { DebugEnterDecision(92, false);
			int LA92_0 = input.LA(1);

			if ((LA92_0==65))
			{
				alt92 = 1;
			}
			else if ((LA92_0==70))
			{
				alt92 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:522:7: gcc_attribute
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(522, 7);
				PushFollow(Follow._gcc_attribute_in_gcc_declaration_specifier3063);
				gcc_attribute346=gcc_attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute346.Tree, gcc_attribute346, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:523:7: gcc_extension_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(523, 7);
				PushFollow(Follow._gcc_extension_specifier_in_gcc_declaration_specifier3071);
				gcc_extension_specifier347=gcc_extension_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_extension_specifier347.Tree, gcc_extension_specifier347, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_declaration_specifier", 75);
			LeaveRule("gcc_declaration_specifier", 75);
			LeaveRule_gcc_declaration_specifier();
			if (state.backtracking > 0) { Memoize(input, 75, gcc_declaration_specifier_StartIndex); }

		}
		DebugLocation(524, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_declaration_specifier"); }
		return retval;

	}
	// $ANTLR end "gcc_declaration_specifier"

	partial void EnterRule_gcc_attribute_list();
	partial void LeaveRule_gcc_attribute_list();

	// $ANTLR start "gcc_attribute_list"
	// C.g:526:1: gcc_attribute_list : ( gcc_attribute )+ ;
	[GrammarRule("gcc_attribute_list")]
	public XAstParserRuleReturnScope gcc_attribute_list()
	{
		EnterRule_gcc_attribute_list();
		EnterRule("gcc_attribute_list", 76);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_list");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope gcc_attribute348 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_attribute_list");
		DebugLocation(526, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// C.g:527:5: ( ( gcc_attribute )+ )
			DebugEnterAlt(1);
			// C.g:527:7: ( gcc_attribute )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(527, 7);
			// C.g:527:7: ( gcc_attribute )+
			int cnt93=0;
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==65))
				{
					int LA93_23 = input.LA(2);

					if ((LA93_23==30))
					{
						int LA93_30 = input.LA(3);

						if ((EvaluatePredicate(synpred182_C_fragment)))
						{
							alt93 = 1;
						}


					}


				}


				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:527:7: gcc_attribute
					{
					DebugLocation(527, 7);
					PushFollow(Follow._gcc_attribute_in_gcc_attribute_list3088);
					gcc_attribute348=gcc_attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute348.Tree, gcc_attribute348, retval);

					}
					break;

				default:
					if (cnt93 >= 1)
						goto loop93;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee93 = new EarlyExitException( 93, input );
					DebugRecognitionException(eee93);
					throw eee93;
				}
				cnt93++;
			}
			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_list", 76);
			LeaveRule("gcc_attribute_list", 76);
			LeaveRule_gcc_attribute_list();
			if (state.backtracking > 0) { Memoize(input, 76, gcc_attribute_list_StartIndex); }

		}
		DebugLocation(528, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_list"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_list"

	partial void EnterRule_gcc_attribute();
	partial void LeaveRule_gcc_attribute();

	// $ANTLR start "gcc_attribute"
	// C.g:530:1: gcc_attribute : '__attribute__' '(' '(' gcc_attribute_parameter_list ')' ')' ;
	[GrammarRule("gcc_attribute")]
	public XAstParserRuleReturnScope gcc_attribute()
	{
		EnterRule_gcc_attribute();
		EnterRule("gcc_attribute", 77);
		var retval = new XAstParserRuleReturnScope("gcc_attribute");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal349 = default(IToken);
		IToken char_literal350 = default(IToken);
		IToken char_literal351 = default(IToken);
		IToken char_literal353 = default(IToken);
		IToken char_literal354 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_parameter_list352 = default(XAstParserRuleReturnScope);

		object string_literal349_tree = default(object);
		object char_literal350_tree = default(object);
		object char_literal351_tree = default(object);
		object char_literal353_tree = default(object);
		object char_literal354_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute");
		DebugLocation(530, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// C.g:531:5: ( '__attribute__' '(' '(' gcc_attribute_parameter_list ')' ')' )
			DebugEnterAlt(1);
			// C.g:531:7: '__attribute__' '(' '(' gcc_attribute_parameter_list ')' ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(531, 7);
			string_literal349=(IToken)Match(input,65,Follow._65_in_gcc_attribute3106); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal349_tree = (object)adaptor.Create(string_literal349, retval);
			adaptor.AddChild(root_0, string_literal349_tree);
			}
			DebugLocation(531, 23);
			char_literal350=(IToken)Match(input,30,Follow._30_in_gcc_attribute3108); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal350_tree = (object)adaptor.Create(char_literal350, retval);
			adaptor.AddChild(root_0, char_literal350_tree);
			}
			DebugLocation(531, 27);
			char_literal351=(IToken)Match(input,30,Follow._30_in_gcc_attribute3110); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal351_tree = (object)adaptor.Create(char_literal351, retval);
			adaptor.AddChild(root_0, char_literal351_tree);
			}
			DebugLocation(531, 31);
			PushFollow(Follow._gcc_attribute_parameter_list_in_gcc_attribute3112);
			gcc_attribute_parameter_list352=gcc_attribute_parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_parameter_list352.Tree, gcc_attribute_parameter_list352, retval);
			DebugLocation(531, 60);
			char_literal353=(IToken)Match(input,31,Follow._31_in_gcc_attribute3114); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal353_tree = (object)adaptor.Create(char_literal353, retval);
			adaptor.AddChild(root_0, char_literal353_tree);
			}
			DebugLocation(531, 64);
			char_literal354=(IToken)Match(input,31,Follow._31_in_gcc_attribute3116); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal354_tree = (object)adaptor.Create(char_literal354, retval);
			adaptor.AddChild(root_0, char_literal354_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute", 77);
			LeaveRule("gcc_attribute", 77);
			LeaveRule_gcc_attribute();
			if (state.backtracking > 0) { Memoize(input, 77, gcc_attribute_StartIndex); }

		}
		DebugLocation(532, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute"

	partial void EnterRule_gcc_attribute_parameter_list();
	partial void LeaveRule_gcc_attribute_parameter_list();

	// $ANTLR start "gcc_attribute_parameter_list"
	// C.g:534:1: gcc_attribute_parameter_list : gcc_attribute_parameter ( ',' gcc_attribute_parameter )* ;
	[GrammarRule("gcc_attribute_parameter_list")]
	public XAstParserRuleReturnScope gcc_attribute_parameter_list()
	{
		EnterRule_gcc_attribute_parameter_list();
		EnterRule("gcc_attribute_parameter_list", 78);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal356 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_parameter355 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_parameter357 = default(XAstParserRuleReturnScope);

		object char_literal356_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute_parameter_list");
		DebugLocation(534, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// C.g:535:5: ( gcc_attribute_parameter ( ',' gcc_attribute_parameter )* )
			DebugEnterAlt(1);
			// C.g:535:7: gcc_attribute_parameter ( ',' gcc_attribute_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(535, 7);
			PushFollow(Follow._gcc_attribute_parameter_in_gcc_attribute_parameter_list3133);
			gcc_attribute_parameter355=gcc_attribute_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_parameter355.Tree, gcc_attribute_parameter355, retval);
			DebugLocation(535, 31);
			// C.g:535:31: ( ',' gcc_attribute_parameter )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==37))
				{
					alt94 = 1;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:535:32: ',' gcc_attribute_parameter
					{
					DebugLocation(535, 32);
					char_literal356=(IToken)Match(input,37,Follow._37_in_gcc_attribute_parameter_list3136); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal356_tree = (object)adaptor.Create(char_literal356, retval);
					adaptor.AddChild(root_0, char_literal356_tree);
					}
					DebugLocation(535, 36);
					PushFollow(Follow._gcc_attribute_parameter_in_gcc_attribute_parameter_list3138);
					gcc_attribute_parameter357=gcc_attribute_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_parameter357.Tree, gcc_attribute_parameter357, retval);

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_parameter_list", 78);
			LeaveRule("gcc_attribute_parameter_list", 78);
			LeaveRule_gcc_attribute_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 78, gcc_attribute_parameter_list_StartIndex); }

		}
		DebugLocation(536, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_parameter_list"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_parameter_list"

	partial void EnterRule_gcc_attribute_parameter();
	partial void LeaveRule_gcc_attribute_parameter();

	// $ANTLR start "gcc_attribute_parameter"
	// C.g:538:1: gcc_attribute_parameter : ( gcc_attribute_name | gcc_attribute_name '(' ( assignment_expression ( ',' assignment_expression )* )? ')' );
	[GrammarRule("gcc_attribute_parameter")]
	public XAstParserRuleReturnScope gcc_attribute_parameter()
	{
		EnterRule_gcc_attribute_parameter();
		EnterRule("gcc_attribute_parameter", 79);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal360 = default(IToken);
		IToken char_literal362 = default(IToken);
		IToken char_literal364 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_name358 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_name359 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression361 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression363 = default(XAstParserRuleReturnScope);

		object char_literal360_tree = default(object);
		object char_literal362_tree = default(object);
		object char_literal364_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute_parameter");
		DebugLocation(538, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// C.g:539:5: ( gcc_attribute_name | gcc_attribute_name '(' ( assignment_expression ( ',' assignment_expression )* )? ')' )
			int alt97=2;
			try { DebugEnterDecision(97, false);
			try
			{
				alt97 = dfa97.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:539:7: gcc_attribute_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(539, 7);
				PushFollow(Follow._gcc_attribute_name_in_gcc_attribute_parameter3157);
				gcc_attribute_name358=gcc_attribute_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_name358.Tree, gcc_attribute_name358, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:540:7: gcc_attribute_name '(' ( assignment_expression ( ',' assignment_expression )* )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(540, 7);
				PushFollow(Follow._gcc_attribute_name_in_gcc_attribute_parameter3165);
				gcc_attribute_name359=gcc_attribute_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_name359.Tree, gcc_attribute_name359, retval);
				DebugLocation(540, 26);
				char_literal360=(IToken)Match(input,30,Follow._30_in_gcc_attribute_parameter3167); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal360_tree = (object)adaptor.Create(char_literal360, retval);
				adaptor.AddChild(root_0, char_literal360_tree);
				}
				DebugLocation(540, 30);
				// C.g:540:30: ( assignment_expression ( ',' assignment_expression )* )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==CHARACTER_LITERAL||LA96_0==DECIMAL_LITERAL||LA96_0==FLOATING_POINT_LITERAL||LA96_0==HEX_LITERAL||LA96_0==IDENTIFIER||LA96_0==OCTAL_LITERAL||LA96_0==STRING_LITERAL||LA96_0==23||LA96_0==28||LA96_0==30||LA96_0==32||(LA96_0>=34 && LA96_0<=35)||(LA96_0>=38 && LA96_0<=39)||LA96_0==63||(LA96_0>=66 && LA96_0<=67)||LA96_0==70||LA96_0==100||LA96_0==116))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:540:31: assignment_expression ( ',' assignment_expression )*
					{
					DebugLocation(540, 31);
					PushFollow(Follow._assignment_expression_in_gcc_attribute_parameter3170);
					assignment_expression361=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression361.Tree, assignment_expression361, retval);
					DebugLocation(540, 53);
					// C.g:540:53: ( ',' assignment_expression )*
					try { DebugEnterSubRule(95);
					while (true)
					{
						int alt95=2;
						try { DebugEnterDecision(95, false);
						int LA95_0 = input.LA(1);

						if ((LA95_0==37))
						{
							alt95 = 1;
						}


						} finally { DebugExitDecision(95); }
						switch ( alt95 )
						{
						case 1:
							DebugEnterAlt(1);
							// C.g:540:54: ',' assignment_expression
							{
							DebugLocation(540, 54);
							char_literal362=(IToken)Match(input,37,Follow._37_in_gcc_attribute_parameter3173); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal362_tree = (object)adaptor.Create(char_literal362, retval);
							adaptor.AddChild(root_0, char_literal362_tree);
							}
							DebugLocation(540, 58);
							PushFollow(Follow._assignment_expression_in_gcc_attribute_parameter3175);
							assignment_expression363=assignment_expression();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression363.Tree, assignment_expression363, retval);

							}
							break;

						default:
							goto loop95;
						}
					}

					loop95:
						;

					} finally { DebugExitSubRule(95); }


					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(540, 84);
				char_literal364=(IToken)Match(input,31,Follow._31_in_gcc_attribute_parameter3181); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal364_tree = (object)adaptor.Create(char_literal364, retval);
				adaptor.AddChild(root_0, char_literal364_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_parameter", 79);
			LeaveRule("gcc_attribute_parameter", 79);
			LeaveRule_gcc_attribute_parameter();
			if (state.backtracking > 0) { Memoize(input, 79, gcc_attribute_parameter_StartIndex); }

		}
		DebugLocation(541, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_parameter"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_parameter"

	partial void EnterRule_gcc_attribute_name();
	partial void LeaveRule_gcc_attribute_name();

	// $ANTLR start "gcc_attribute_name"
	// C.g:543:1: gcc_attribute_name : ( IDENTIFIER | storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier );
	[GrammarRule("gcc_attribute_name")]
	public XAstParserRuleReturnScope gcc_attribute_name()
	{
		EnterRule_gcc_attribute_name();
		EnterRule("gcc_attribute_name", 80);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_name");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_name_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER365 = default(IToken);
		XAstParserRuleReturnScope storage_class_specifier366 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier367 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_qualifier368 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_function_specifier369 = default(XAstParserRuleReturnScope);

		object IDENTIFIER365_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute_name");
		DebugLocation(543, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// C.g:544:5: ( IDENTIFIER | storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier )
			int alt98=5;
			try { DebugEnterDecision(98, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA98_1 = input.LA(2);

				if ((EvaluatePredicate(synpred187_C_fragment)))
				{
					alt98 = 1;
				}
				else if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred189_C_fragment))))
				{
					alt98 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 76:
			case 87:
			case 95:
			case 101:
				{
				alt98 = 2;
				}
				break;
			case 79:
			case 84:
			case 86:
			case 88:
			case 93:
			case 94:
			case 98:
			case 99:
			case 102:
			case 105:
			case 106:
			case 107:
			case 108:
				{
				alt98 = 3;
				}
				break;
			case 69:
			case 73:
			case 74:
			case 80:
			case 96:
			case 109:
				{
				alt98 = 4;
				}
				break;
			case 68:
			case 71:
			case 72:
			case 92:
				{
				alt98 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:544:7: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(544, 7);
				IDENTIFIER365=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_gcc_attribute_name3198), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER365_tree = (object)adaptor.Create(IDENTIFIER365, retval);
				adaptor.AddChild(root_0, IDENTIFIER365_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:545:7: storage_class_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(545, 7);
				PushFollow(Follow._storage_class_specifier_in_gcc_attribute_name3206);
				storage_class_specifier366=storage_class_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, storage_class_specifier366.Tree, storage_class_specifier366, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:546:7: type_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(546, 7);
				PushFollow(Follow._type_specifier_in_gcc_attribute_name3214);
				type_specifier367=type_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier367.Tree, type_specifier367, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:547:7: type_qualifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(547, 7);
				PushFollow(Follow._type_qualifier_in_gcc_attribute_name3222);
				type_qualifier368=type_qualifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier368.Tree, type_qualifier368, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:548:7: gcc_function_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(548, 7);
				PushFollow(Follow._gcc_function_specifier_in_gcc_attribute_name3230);
				gcc_function_specifier369=gcc_function_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_function_specifier369.Tree, gcc_function_specifier369, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_name", 80);
			LeaveRule("gcc_attribute_name", 80);
			LeaveRule_gcc_attribute_name();
			if (state.backtracking > 0) { Memoize(input, 80, gcc_attribute_name_StartIndex); }

		}
		DebugLocation(549, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_name"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_name"

	partial void EnterRule_gcc_asm_statement();
	partial void LeaveRule_gcc_asm_statement();

	// $ANTLR start "gcc_asm_statement"
	// C.g:551:1: gcc_asm_statement : gcc_asm_expression ';' ;
	[GrammarRule("gcc_asm_statement")]
	public XAstParserRuleReturnScope gcc_asm_statement()
	{
		EnterRule_gcc_asm_statement();
		EnterRule("gcc_asm_statement", 81);
		var retval = new XAstParserRuleReturnScope("gcc_asm_statement");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_asm_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal371 = default(IToken);
		XAstParserRuleReturnScope gcc_asm_expression370 = default(XAstParserRuleReturnScope);

		object char_literal371_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_asm_statement");
		DebugLocation(551, 45);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// C.g:551:19: ( gcc_asm_expression ';' )
			DebugEnterAlt(1);
			// C.g:551:23: gcc_asm_expression ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(551, 23);
			PushFollow(Follow._gcc_asm_expression_in_gcc_asm_statement3245);
			gcc_asm_expression370=gcc_asm_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_expression370.Tree, gcc_asm_expression370, retval);
			DebugLocation(551, 42);
			char_literal371=(IToken)Match(input,47,Follow._47_in_gcc_asm_statement3247); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal371_tree = (object)adaptor.Create(char_literal371, retval);
			adaptor.AddChild(root_0, char_literal371_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_asm_statement", 81);
			LeaveRule("gcc_asm_statement", 81);
			LeaveRule_gcc_asm_statement();
			if (state.backtracking > 0) { Memoize(input, 81, gcc_asm_statement_StartIndex); }

		}
		DebugLocation(551, 45);
		} finally { DebugExitRule(GrammarFileName, "gcc_asm_statement"); }
		return retval;

	}
	// $ANTLR end "gcc_asm_statement"

	partial void EnterRule_gcc_asm_expression();
	partial void LeaveRule_gcc_asm_expression();

	// $ANTLR start "gcc_asm_expression"
	// C.g:553:1: gcc_asm_expression : ( '__asm__' | 'asm' ) ( type_qualifier )? '(' expression ( expression )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )? )? ')' ;
	[GrammarRule("gcc_asm_expression")]
	public XAstParserRuleReturnScope gcc_asm_expression()
	{
		EnterRule_gcc_asm_expression();
		EnterRule("gcc_asm_expression", 82);
		var retval = new XAstParserRuleReturnScope("gcc_asm_expression");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_asm_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set372 = default(IToken);
		IToken char_literal374 = default(IToken);
		IToken char_literal377 = default(IToken);
		IToken char_literal379 = default(IToken);
		IToken char_literal381 = default(IToken);
		IToken char_literal383 = default(IToken);
		IToken char_literal385 = default(IToken);
		IToken char_literal387 = default(IToken);
		IToken char_literal389 = default(IToken);
		XAstParserRuleReturnScope type_qualifier373 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression375 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression376 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_operand378 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_operand380 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_operand382 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_operand384 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_clobber386 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_clobber388 = default(XAstParserRuleReturnScope);

		object set372_tree = default(object);
		object char_literal374_tree = default(object);
		object char_literal377_tree = default(object);
		object char_literal379_tree = default(object);
		object char_literal381_tree = default(object);
		object char_literal383_tree = default(object);
		object char_literal385_tree = default(object);
		object char_literal387_tree = default(object);
		object char_literal389_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_asm_expression");
		DebugLocation(553, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// C.g:553:20: ( ( '__asm__' | 'asm' ) ( type_qualifier )? '(' expression ( expression )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )? )? ')' )
			DebugEnterAlt(1);
			// C.g:553:24: ( '__asm__' | 'asm' ) ( type_qualifier )? '(' expression ( expression )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )? )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(553, 24);

			set372=(IToken)input.LT(1);
			if (input.LA(1)==64||input.LA(1)==75)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set372, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(554, 24);
			// C.g:554:24: ( type_qualifier )?
			int alt99=2;
			try { DebugEnterSubRule(99);
			try { DebugEnterDecision(99, false);
			int LA99_0 = input.LA(1);

			if ((LA99_0==69||(LA99_0>=73 && LA99_0<=74)||LA99_0==80||LA99_0==96||LA99_0==109))
			{
				alt99 = 1;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:554:26: type_qualifier
				{
				DebugLocation(554, 26);
				PushFollow(Follow._type_qualifier_in_gcc_asm_expression3293);
				type_qualifier373=type_qualifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier373.Tree, type_qualifier373, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(99); }

			DebugLocation(555, 24);
			char_literal374=(IToken)Match(input,30,Follow._30_in_gcc_asm_expression3321); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal374_tree = (object)adaptor.Create(char_literal374, retval);
			adaptor.AddChild(root_0, char_literal374_tree);
			}
			DebugLocation(556, 24);
			PushFollow(Follow._expression_in_gcc_asm_expression3346);
			expression375=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression375.Tree, expression375, retval);
			DebugLocation(556, 35);
			// C.g:556:35: ( expression )?
			int alt100=2;
			try { DebugEnterSubRule(100);
			try { DebugEnterDecision(100, false);
			int LA100_0 = input.LA(1);

			if ((LA100_0==CHARACTER_LITERAL||LA100_0==DECIMAL_LITERAL||LA100_0==FLOATING_POINT_LITERAL||LA100_0==HEX_LITERAL||LA100_0==IDENTIFIER||LA100_0==OCTAL_LITERAL||LA100_0==STRING_LITERAL||LA100_0==23||LA100_0==28||LA100_0==30||LA100_0==32||(LA100_0>=34 && LA100_0<=35)||(LA100_0>=38 && LA100_0<=39)||LA100_0==63||(LA100_0>=66 && LA100_0<=67)||LA100_0==70||LA100_0==100||LA100_0==116))
			{
				alt100 = 1;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:556:35: expression
				{
				DebugLocation(556, 35);
				PushFollow(Follow._expression_in_gcc_asm_expression3348);
				expression376=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression376.Tree, expression376, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(100); }

			DebugLocation(557, 26);
			// C.g:557:26: ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )? )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_0 = input.LA(1);

			if ((LA108_0==46))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:558:27: ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )?
				{
				DebugLocation(558, 27);
				char_literal377=(IToken)Match(input,46,Follow._46_in_gcc_asm_expression3404); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal377_tree = (object)adaptor.Create(char_literal377, retval);
				adaptor.AddChild(root_0, char_literal377_tree);
				}
				DebugLocation(558, 31);
				// C.g:558:31: ( gcc_asm_operand ( ',' gcc_asm_operand )* )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==STRING_LITERAL||LA102_0==59))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:558:33: gcc_asm_operand ( ',' gcc_asm_operand )*
					{
					DebugLocation(558, 33);
					PushFollow(Follow._gcc_asm_operand_in_gcc_asm_expression3408);
					gcc_asm_operand378=gcc_asm_operand();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_operand378.Tree, gcc_asm_operand378, retval);
					DebugLocation(558, 49);
					// C.g:558:49: ( ',' gcc_asm_operand )*
					try { DebugEnterSubRule(101);
					while (true)
					{
						int alt101=2;
						try { DebugEnterDecision(101, false);
						int LA101_0 = input.LA(1);

						if ((LA101_0==37))
						{
							alt101 = 1;
						}


						} finally { DebugExitDecision(101); }
						switch ( alt101 )
						{
						case 1:
							DebugEnterAlt(1);
							// C.g:558:51: ',' gcc_asm_operand
							{
							DebugLocation(558, 51);
							char_literal379=(IToken)Match(input,37,Follow._37_in_gcc_asm_expression3412); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal379_tree = (object)adaptor.Create(char_literal379, retval);
							adaptor.AddChild(root_0, char_literal379_tree);
							}
							DebugLocation(558, 55);
							PushFollow(Follow._gcc_asm_operand_in_gcc_asm_expression3414);
							gcc_asm_operand380=gcc_asm_operand();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_operand380.Tree, gcc_asm_operand380, retval);

							}
							break;

						default:
							goto loop101;
						}
					}

					loop101:
						;

					} finally { DebugExitSubRule(101); }


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(559, 29);
				// C.g:559:29: ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==46))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:560:30: ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )?
					{
					DebugLocation(560, 30);
					char_literal381=(IToken)Match(input,46,Follow._46_in_gcc_asm_expression3481); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal381_tree = (object)adaptor.Create(char_literal381, retval);
					adaptor.AddChild(root_0, char_literal381_tree);
					}
					DebugLocation(560, 34);
					// C.g:560:34: ( gcc_asm_operand ( ',' gcc_asm_operand )* )?
					int alt104=2;
					try { DebugEnterSubRule(104);
					try { DebugEnterDecision(104, false);
					int LA104_0 = input.LA(1);

					if ((LA104_0==STRING_LITERAL||LA104_0==59))
					{
						alt104 = 1;
					}
					} finally { DebugExitDecision(104); }
					switch (alt104)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:560:36: gcc_asm_operand ( ',' gcc_asm_operand )*
						{
						DebugLocation(560, 36);
						PushFollow(Follow._gcc_asm_operand_in_gcc_asm_expression3485);
						gcc_asm_operand382=gcc_asm_operand();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_operand382.Tree, gcc_asm_operand382, retval);
						DebugLocation(560, 52);
						// C.g:560:52: ( ',' gcc_asm_operand )*
						try { DebugEnterSubRule(103);
						while (true)
						{
							int alt103=2;
							try { DebugEnterDecision(103, false);
							int LA103_0 = input.LA(1);

							if ((LA103_0==37))
							{
								alt103 = 1;
							}


							} finally { DebugExitDecision(103); }
							switch ( alt103 )
							{
							case 1:
								DebugEnterAlt(1);
								// C.g:560:54: ',' gcc_asm_operand
								{
								DebugLocation(560, 54);
								char_literal383=(IToken)Match(input,37,Follow._37_in_gcc_asm_expression3489); if (state.failed) return retval;
								if (state.backtracking == 0) {
								char_literal383_tree = (object)adaptor.Create(char_literal383, retval);
								adaptor.AddChild(root_0, char_literal383_tree);
								}
								DebugLocation(560, 58);
								PushFollow(Follow._gcc_asm_operand_in_gcc_asm_expression3491);
								gcc_asm_operand384=gcc_asm_operand();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_operand384.Tree, gcc_asm_operand384, retval);

								}
								break;

							default:
								goto loop103;
							}
						}

						loop103:
							;

						} finally { DebugExitSubRule(103); }


						}
						break;

					}
					} finally { DebugExitSubRule(104); }

					DebugLocation(561, 32);
					// C.g:561:32: ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )?
					int alt106=2;
					try { DebugEnterSubRule(106);
					try { DebugEnterDecision(106, false);
					int LA106_0 = input.LA(1);

					if ((LA106_0==46))
					{
						alt106 = 1;
					}
					} finally { DebugExitDecision(106); }
					switch (alt106)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:562:33: ':' gcc_asm_clobber ( ',' gcc_asm_clobber )*
						{
						DebugLocation(562, 33);
						char_literal385=(IToken)Match(input,46,Follow._46_in_gcc_asm_expression3564); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal385_tree = (object)adaptor.Create(char_literal385, retval);
						adaptor.AddChild(root_0, char_literal385_tree);
						}
						DebugLocation(562, 39);
						PushFollow(Follow._gcc_asm_clobber_in_gcc_asm_expression3568);
						gcc_asm_clobber386=gcc_asm_clobber();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_clobber386.Tree, gcc_asm_clobber386, retval);
						DebugLocation(562, 55);
						// C.g:562:55: ( ',' gcc_asm_clobber )*
						try { DebugEnterSubRule(105);
						while (true)
						{
							int alt105=2;
							try { DebugEnterDecision(105, false);
							int LA105_0 = input.LA(1);

							if ((LA105_0==37))
							{
								alt105 = 1;
							}


							} finally { DebugExitDecision(105); }
							switch ( alt105 )
							{
							case 1:
								DebugEnterAlt(1);
								// C.g:562:57: ',' gcc_asm_clobber
								{
								DebugLocation(562, 57);
								char_literal387=(IToken)Match(input,37,Follow._37_in_gcc_asm_expression3572); if (state.failed) return retval;
								if (state.backtracking == 0) {
								char_literal387_tree = (object)adaptor.Create(char_literal387, retval);
								adaptor.AddChild(root_0, char_literal387_tree);
								}
								DebugLocation(562, 61);
								PushFollow(Follow._gcc_asm_clobber_in_gcc_asm_expression3574);
								gcc_asm_clobber388=gcc_asm_clobber();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_clobber388.Tree, gcc_asm_clobber388, retval);

								}
								break;

							default:
								goto loop105;
							}
						}

						loop105:
							;

						} finally { DebugExitSubRule(105); }


						}
						break;

					}
					} finally { DebugExitSubRule(106); }


					}
					break;

				}
				} finally { DebugExitSubRule(107); }


				}
				break;

			}
			} finally { DebugExitSubRule(108); }

			DebugLocation(566, 24);
			char_literal389=(IToken)Match(input,31,Follow._31_in_gcc_asm_expression3695); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal389_tree = (object)adaptor.Create(char_literal389, retval);
			adaptor.AddChild(root_0, char_literal389_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_asm_expression", 82);
			LeaveRule("gcc_asm_expression", 82);
			LeaveRule_gcc_asm_expression();
			if (state.backtracking > 0) { Memoize(input, 82, gcc_asm_expression_StartIndex); }

		}
		DebugLocation(567, 19);
		} finally { DebugExitRule(GrammarFileName, "gcc_asm_expression"); }
		return retval;

	}
	// $ANTLR end "gcc_asm_expression"

	partial void EnterRule_gcc_asm_operand();
	partial void LeaveRule_gcc_asm_operand();

	// $ANTLR start "gcc_asm_operand"
	// C.g:569:1: gcc_asm_operand : ( '[' IDENTIFIER ']' )? string_literal '(' expression ')' ;
	[GrammarRule("gcc_asm_operand")]
	public XAstParserRuleReturnScope gcc_asm_operand()
	{
		EnterRule_gcc_asm_operand();
		EnterRule("gcc_asm_operand", 83);
		var retval = new XAstParserRuleReturnScope("gcc_asm_operand");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_asm_operand_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal390 = default(IToken);
		IToken IDENTIFIER391 = default(IToken);
		IToken char_literal392 = default(IToken);
		IToken char_literal394 = default(IToken);
		IToken char_literal396 = default(IToken);
		XAstParserRuleReturnScope string_literal393 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression395 = default(XAstParserRuleReturnScope);

		object char_literal390_tree = default(object);
		object IDENTIFIER391_tree = default(object);
		object char_literal392_tree = default(object);
		object char_literal394_tree = default(object);
		object char_literal396_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_asm_operand");
		DebugLocation(569, 78);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// C.g:569:17: ( ( '[' IDENTIFIER ']' )? string_literal '(' expression ')' )
			DebugEnterAlt(1);
			// C.g:569:21: ( '[' IDENTIFIER ']' )? string_literal '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(569, 21);
			// C.g:569:21: ( '[' IDENTIFIER ']' )?
			int alt109=2;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			int LA109_0 = input.LA(1);

			if ((LA109_0==59))
			{
				alt109 = 1;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:569:23: '[' IDENTIFIER ']'
				{
				DebugLocation(569, 23);
				char_literal390=(IToken)Match(input,59,Follow._59_in_gcc_asm_operand3727); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal390_tree = (object)adaptor.Create(char_literal390, retval);
				adaptor.AddChild(root_0, char_literal390_tree);
				}
				DebugLocation(569, 27);
				IDENTIFIER391=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_gcc_asm_operand3729), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER391_tree = (object)adaptor.Create(IDENTIFIER391, retval);
				adaptor.AddChild(root_0, IDENTIFIER391_tree);
				}
				DebugLocation(569, 38);
				char_literal392=(IToken)Match(input,60,Follow._60_in_gcc_asm_operand3731); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal392_tree = (object)adaptor.Create(char_literal392, retval);
				adaptor.AddChild(root_0, char_literal392_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(109); }

			DebugLocation(569, 45);
			PushFollow(Follow._string_literal_in_gcc_asm_operand3736);
			string_literal393=string_literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal393.Tree, string_literal393, retval);
			DebugLocation(569, 60);
			char_literal394=(IToken)Match(input,30,Follow._30_in_gcc_asm_operand3738); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal394_tree = (object)adaptor.Create(char_literal394, retval);
			adaptor.AddChild(root_0, char_literal394_tree);
			}
			DebugLocation(569, 64);
			PushFollow(Follow._expression_in_gcc_asm_operand3740);
			expression395=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression395.Tree, expression395, retval);
			DebugLocation(569, 75);
			char_literal396=(IToken)Match(input,31,Follow._31_in_gcc_asm_operand3742); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal396_tree = (object)adaptor.Create(char_literal396, retval);
			adaptor.AddChild(root_0, char_literal396_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_asm_operand", 83);
			LeaveRule("gcc_asm_operand", 83);
			LeaveRule_gcc_asm_operand();
			if (state.backtracking > 0) { Memoize(input, 83, gcc_asm_operand_StartIndex); }

		}
		DebugLocation(569, 78);
		} finally { DebugExitRule(GrammarFileName, "gcc_asm_operand"); }
		return retval;

	}
	// $ANTLR end "gcc_asm_operand"

	partial void EnterRule_gcc_asm_clobber();
	partial void LeaveRule_gcc_asm_clobber();

	// $ANTLR start "gcc_asm_clobber"
	// C.g:571:1: gcc_asm_clobber : string_literal ;
	[GrammarRule("gcc_asm_clobber")]
	public XAstParserRuleReturnScope gcc_asm_clobber()
	{
		EnterRule_gcc_asm_clobber();
		EnterRule("gcc_asm_clobber", 84);
		var retval = new XAstParserRuleReturnScope("gcc_asm_clobber");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_asm_clobber_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope string_literal397 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_asm_clobber");
		DebugLocation(571, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// C.g:571:17: ( string_literal )
			DebugEnterAlt(1);
			// C.g:571:21: string_literal
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(571, 21);
			PushFollow(Follow._string_literal_in_gcc_asm_clobber3753);
			string_literal397=string_literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal397.Tree, string_literal397, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_asm_clobber", 84);
			LeaveRule("gcc_asm_clobber", 84);
			LeaveRule_gcc_asm_clobber();
			if (state.backtracking > 0) { Memoize(input, 84, gcc_asm_clobber_StartIndex); }

		}
		DebugLocation(571, 35);
		} finally { DebugExitRule(GrammarFileName, "gcc_asm_clobber"); }
		return retval;

	}
	// $ANTLR end "gcc_asm_clobber"

	partial void EnterRule_gcc_statement_expression();
	partial void LeaveRule_gcc_statement_expression();

	// $ANTLR start "gcc_statement_expression"
	// C.g:574:1: gcc_statement_expression : '(' compound_statement ')' ;
	[GrammarRule("gcc_statement_expression")]
	public XAstParserRuleReturnScope gcc_statement_expression()
	{
		EnterRule_gcc_statement_expression();
		EnterRule("gcc_statement_expression", 85);
		var retval = new XAstParserRuleReturnScope("gcc_statement_expression");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_statement_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal398 = default(IToken);
		IToken char_literal400 = default(IToken);
		XAstParserRuleReturnScope compound_statement399 = default(XAstParserRuleReturnScope);

		object char_literal398_tree = default(object);
		object char_literal400_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_statement_expression");
		DebugLocation(574, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// C.g:575:5: ( '(' compound_statement ')' )
			DebugEnterAlt(1);
			// C.g:575:7: '(' compound_statement ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(575, 7);
			char_literal398=(IToken)Match(input,30,Follow._30_in_gcc_statement_expression3767); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal398_tree = (object)adaptor.Create(char_literal398, retval);
			adaptor.AddChild(root_0, char_literal398_tree);
			}
			DebugLocation(575, 11);
			PushFollow(Follow._compound_statement_in_gcc_statement_expression3769);
			compound_statement399=compound_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement399.Tree, compound_statement399, retval);
			DebugLocation(575, 30);
			char_literal400=(IToken)Match(input,31,Follow._31_in_gcc_statement_expression3771); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal400_tree = (object)adaptor.Create(char_literal400, retval);
			adaptor.AddChild(root_0, char_literal400_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_statement_expression", 85);
			LeaveRule("gcc_statement_expression", 85);
			LeaveRule_gcc_statement_expression();
			if (state.backtracking > 0) { Memoize(input, 85, gcc_statement_expression_StartIndex); }

		}
		DebugLocation(576, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_statement_expression"); }
		return retval;

	}
	// $ANTLR end "gcc_statement_expression"

	partial void EnterRule_gcc_array_type_modifier_list();
	partial void LeaveRule_gcc_array_type_modifier_list();

	// $ANTLR start "gcc_array_type_modifier_list"
	// C.g:578:1: gcc_array_type_modifier_list : ( gcc_array_type_modifier )+ ;
	[GrammarRule("gcc_array_type_modifier_list")]
	public XAstParserRuleReturnScope gcc_array_type_modifier_list()
	{
		EnterRule_gcc_array_type_modifier_list();
		EnterRule("gcc_array_type_modifier_list", 86);
		var retval = new XAstParserRuleReturnScope("gcc_array_type_modifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_array_type_modifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope gcc_array_type_modifier401 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_array_type_modifier_list");
		DebugLocation(578, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// C.g:579:5: ( ( gcc_array_type_modifier )+ )
			DebugEnterAlt(1);
			// C.g:579:7: ( gcc_array_type_modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(579, 7);
			// C.g:579:7: ( gcc_array_type_modifier )+
			int cnt110=0;
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_0 = input.LA(1);

				if ((LA110_0==65||LA110_0==69||(LA110_0>=73 && LA110_0<=74)||LA110_0==80||LA110_0==96||LA110_0==109))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:579:7: gcc_array_type_modifier
					{
					DebugLocation(579, 7);
					PushFollow(Follow._gcc_array_type_modifier_in_gcc_array_type_modifier_list3788);
					gcc_array_type_modifier401=gcc_array_type_modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_array_type_modifier401.Tree, gcc_array_type_modifier401, retval);

					}
					break;

				default:
					if (cnt110 >= 1)
						goto loop110;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee110 = new EarlyExitException( 110, input );
					DebugRecognitionException(eee110);
					throw eee110;
				}
				cnt110++;
			}
			loop110:
				;

			} finally { DebugExitSubRule(110); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_array_type_modifier_list", 86);
			LeaveRule("gcc_array_type_modifier_list", 86);
			LeaveRule_gcc_array_type_modifier_list();
			if (state.backtracking > 0) { Memoize(input, 86, gcc_array_type_modifier_list_StartIndex); }

		}
		DebugLocation(580, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_array_type_modifier_list"); }
		return retval;

	}
	// $ANTLR end "gcc_array_type_modifier_list"

	partial void EnterRule_gcc_array_type_modifier();
	partial void LeaveRule_gcc_array_type_modifier();

	// $ANTLR start "gcc_array_type_modifier"
	// C.g:582:1: gcc_array_type_modifier : ( type_qualifier | gcc_attribute );
	[GrammarRule("gcc_array_type_modifier")]
	public XAstParserRuleReturnScope gcc_array_type_modifier()
	{
		EnterRule_gcc_array_type_modifier();
		EnterRule("gcc_array_type_modifier", 87);
		var retval = new XAstParserRuleReturnScope("gcc_array_type_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_array_type_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_qualifier402 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute403 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_array_type_modifier");
		DebugLocation(582, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// C.g:583:5: ( type_qualifier | gcc_attribute )
			int alt111=2;
			try { DebugEnterDecision(111, false);
			int LA111_0 = input.LA(1);

			if ((LA111_0==69||(LA111_0>=73 && LA111_0<=74)||LA111_0==80||LA111_0==96||LA111_0==109))
			{
				alt111 = 1;
			}
			else if ((LA111_0==65))
			{
				alt111 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 111, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:583:7: type_qualifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(583, 7);
				PushFollow(Follow._type_qualifier_in_gcc_array_type_modifier3806);
				type_qualifier402=type_qualifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier402.Tree, type_qualifier402, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:584:7: gcc_attribute
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(584, 7);
				PushFollow(Follow._gcc_attribute_in_gcc_array_type_modifier3814);
				gcc_attribute403=gcc_attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute403.Tree, gcc_attribute403, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_array_type_modifier", 87);
			LeaveRule("gcc_array_type_modifier", 87);
			LeaveRule_gcc_array_type_modifier();
			if (state.backtracking > 0) { Memoize(input, 87, gcc_array_type_modifier_StartIndex); }

		}
		DebugLocation(585, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_array_type_modifier"); }
		return retval;

	}
	// $ANTLR end "gcc_array_type_modifier"

	partial void EnterRule_gcc_builtin_va_arg();
	partial void LeaveRule_gcc_builtin_va_arg();

	// $ANTLR start "gcc_builtin_va_arg"
	// C.g:587:1: gcc_builtin_va_arg : '__builtin_va_arg' '(' assignment_expression ',' type_name ')' ;
	[GrammarRule("gcc_builtin_va_arg")]
	public XAstParserRuleReturnScope gcc_builtin_va_arg()
	{
		EnterRule_gcc_builtin_va_arg();
		EnterRule("gcc_builtin_va_arg", 88);
		var retval = new XAstParserRuleReturnScope("gcc_builtin_va_arg");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_builtin_va_arg_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal404 = default(IToken);
		IToken char_literal405 = default(IToken);
		IToken char_literal407 = default(IToken);
		IToken char_literal409 = default(IToken);
		XAstParserRuleReturnScope assignment_expression406 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name408 = default(XAstParserRuleReturnScope);

		object string_literal404_tree = default(object);
		object char_literal405_tree = default(object);
		object char_literal407_tree = default(object);
		object char_literal409_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_builtin_va_arg");
		DebugLocation(587, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// C.g:588:5: ( '__builtin_va_arg' '(' assignment_expression ',' type_name ')' )
			DebugEnterAlt(1);
			// C.g:588:7: '__builtin_va_arg' '(' assignment_expression ',' type_name ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(588, 7);
			string_literal404=(IToken)Match(input,67,Follow._67_in_gcc_builtin_va_arg3831); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal404_tree = (object)adaptor.Create(string_literal404, retval);
			adaptor.AddChild(root_0, string_literal404_tree);
			}
			DebugLocation(588, 26);
			char_literal405=(IToken)Match(input,30,Follow._30_in_gcc_builtin_va_arg3833); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal405_tree = (object)adaptor.Create(char_literal405, retval);
			adaptor.AddChild(root_0, char_literal405_tree);
			}
			DebugLocation(588, 30);
			PushFollow(Follow._assignment_expression_in_gcc_builtin_va_arg3835);
			assignment_expression406=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression406.Tree, assignment_expression406, retval);
			DebugLocation(588, 52);
			char_literal407=(IToken)Match(input,37,Follow._37_in_gcc_builtin_va_arg3837); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal407_tree = (object)adaptor.Create(char_literal407, retval);
			adaptor.AddChild(root_0, char_literal407_tree);
			}
			DebugLocation(588, 56);
			PushFollow(Follow._type_name_in_gcc_builtin_va_arg3839);
			type_name408=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name408.Tree, type_name408, retval);
			DebugLocation(588, 66);
			char_literal409=(IToken)Match(input,31,Follow._31_in_gcc_builtin_va_arg3841); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal409_tree = (object)adaptor.Create(char_literal409, retval);
			adaptor.AddChild(root_0, char_literal409_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_builtin_va_arg", 88);
			LeaveRule("gcc_builtin_va_arg", 88);
			LeaveRule_gcc_builtin_va_arg();
			if (state.backtracking > 0) { Memoize(input, 88, gcc_builtin_va_arg_StartIndex); }

		}
		DebugLocation(589, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_builtin_va_arg"); }
		return retval;

	}
	// $ANTLR end "gcc_builtin_va_arg"

	partial void EnterRule_gcc_typeof();
	partial void LeaveRule_gcc_typeof();

	// $ANTLR start "gcc_typeof"
	// C.g:591:1: gcc_typeof : 'typeof' '(' ( type_name | assignment_expression ) ')' ;
	[GrammarRule("gcc_typeof")]
	public XAstParserRuleReturnScope gcc_typeof()
	{
		EnterRule_gcc_typeof();
		EnterRule("gcc_typeof", 89);
		var retval = new XAstParserRuleReturnScope("gcc_typeof");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_typeof_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal410 = default(IToken);
		IToken char_literal411 = default(IToken);
		IToken char_literal414 = default(IToken);
		XAstParserRuleReturnScope type_name412 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression413 = default(XAstParserRuleReturnScope);

		object string_literal410_tree = default(object);
		object char_literal411_tree = default(object);
		object char_literal414_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_typeof");
		DebugLocation(591, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// C.g:592:5: ( 'typeof' '(' ( type_name | assignment_expression ) ')' )
			DebugEnterAlt(1);
			// C.g:592:7: 'typeof' '(' ( type_name | assignment_expression ) ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(592, 7);
			string_literal410=(IToken)Match(input,105,Follow._105_in_gcc_typeof3858); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal410_tree = (object)adaptor.Create(string_literal410, retval);
			adaptor.AddChild(root_0, string_literal410_tree);
			}
			DebugLocation(592, 16);
			char_literal411=(IToken)Match(input,30,Follow._30_in_gcc_typeof3860); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal411_tree = (object)adaptor.Create(char_literal411, retval);
			adaptor.AddChild(root_0, char_literal411_tree);
			}
			DebugLocation(592, 20);
			// C.g:592:20: ( type_name | assignment_expression )
			int alt112=2;
			try { DebugEnterSubRule(112);
			try { DebugEnterDecision(112, false);
			try
			{
				alt112 = dfa112.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:592:22: type_name
				{
				DebugLocation(592, 22);
				PushFollow(Follow._type_name_in_gcc_typeof3864);
				type_name412=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name412.Tree, type_name412, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:592:34: assignment_expression
				{
				DebugLocation(592, 34);
				PushFollow(Follow._assignment_expression_in_gcc_typeof3868);
				assignment_expression413=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression413.Tree, assignment_expression413, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(112); }

			DebugLocation(592, 58);
			char_literal414=(IToken)Match(input,31,Follow._31_in_gcc_typeof3872); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal414_tree = (object)adaptor.Create(char_literal414, retval);
			adaptor.AddChild(root_0, char_literal414_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_typeof", 89);
			LeaveRule("gcc_typeof", 89);
			LeaveRule_gcc_typeof();
			if (state.backtracking > 0) { Memoize(input, 89, gcc_typeof_StartIndex); }

		}
		DebugLocation(593, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_typeof"); }
		return retval;

	}
	// $ANTLR end "gcc_typeof"

	partial void EnterRule_gcc_builtin_offsetof();
	partial void LeaveRule_gcc_builtin_offsetof();

	// $ANTLR start "gcc_builtin_offsetof"
	// C.g:595:1: gcc_builtin_offsetof : '__builtin_offsetof' '(' type_name ',' offsetof_member_designator ')' ;
	[GrammarRule("gcc_builtin_offsetof")]
	public XAstParserRuleReturnScope gcc_builtin_offsetof()
	{
		EnterRule_gcc_builtin_offsetof();
		EnterRule("gcc_builtin_offsetof", 90);
		var retval = new XAstParserRuleReturnScope("gcc_builtin_offsetof");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_builtin_offsetof_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal415 = default(IToken);
		IToken char_literal416 = default(IToken);
		IToken char_literal418 = default(IToken);
		IToken char_literal420 = default(IToken);
		XAstParserRuleReturnScope type_name417 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope offsetof_member_designator419 = default(XAstParserRuleReturnScope);

		object string_literal415_tree = default(object);
		object char_literal416_tree = default(object);
		object char_literal418_tree = default(object);
		object char_literal420_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_builtin_offsetof");
		DebugLocation(595, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// C.g:596:5: ( '__builtin_offsetof' '(' type_name ',' offsetof_member_designator ')' )
			DebugEnterAlt(1);
			// C.g:596:7: '__builtin_offsetof' '(' type_name ',' offsetof_member_designator ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(596, 7);
			string_literal415=(IToken)Match(input,66,Follow._66_in_gcc_builtin_offsetof3889); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal415_tree = (object)adaptor.Create(string_literal415, retval);
			adaptor.AddChild(root_0, string_literal415_tree);
			}
			DebugLocation(596, 28);
			char_literal416=(IToken)Match(input,30,Follow._30_in_gcc_builtin_offsetof3891); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal416_tree = (object)adaptor.Create(char_literal416, retval);
			adaptor.AddChild(root_0, char_literal416_tree);
			}
			DebugLocation(596, 32);
			PushFollow(Follow._type_name_in_gcc_builtin_offsetof3893);
			type_name417=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name417.Tree, type_name417, retval);
			DebugLocation(596, 42);
			char_literal418=(IToken)Match(input,37,Follow._37_in_gcc_builtin_offsetof3895); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal418_tree = (object)adaptor.Create(char_literal418, retval);
			adaptor.AddChild(root_0, char_literal418_tree);
			}
			DebugLocation(596, 46);
			PushFollow(Follow._offsetof_member_designator_in_gcc_builtin_offsetof3897);
			offsetof_member_designator419=offsetof_member_designator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, offsetof_member_designator419.Tree, offsetof_member_designator419, retval);
			DebugLocation(596, 73);
			char_literal420=(IToken)Match(input,31,Follow._31_in_gcc_builtin_offsetof3899); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal420_tree = (object)adaptor.Create(char_literal420, retval);
			adaptor.AddChild(root_0, char_literal420_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_builtin_offsetof", 90);
			LeaveRule("gcc_builtin_offsetof", 90);
			LeaveRule_gcc_builtin_offsetof();
			if (state.backtracking > 0) { Memoize(input, 90, gcc_builtin_offsetof_StartIndex); }

		}
		DebugLocation(597, 4);
		} finally { DebugExitRule(GrammarFileName, "gcc_builtin_offsetof"); }
		return retval;

	}
	// $ANTLR end "gcc_builtin_offsetof"

	partial void EnterRule_offsetof_member_designator();
	partial void LeaveRule_offsetof_member_designator();

	// $ANTLR start "offsetof_member_designator"
	// C.g:599:1: offsetof_member_designator : IDENTIFIER ( '.' IDENTIFIER | '[' expression ']' )* ;
	[GrammarRule("offsetof_member_designator")]
	public XAstParserRuleReturnScope offsetof_member_designator()
	{
		EnterRule_offsetof_member_designator();
		EnterRule("offsetof_member_designator", 91);
		var retval = new XAstParserRuleReturnScope("offsetof_member_designator");
		
		retval.Start = (IToken)input.LT(1);
		int offsetof_member_designator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER421 = default(IToken);
		IToken char_literal422 = default(IToken);
		IToken IDENTIFIER423 = default(IToken);
		IToken char_literal424 = default(IToken);
		IToken char_literal426 = default(IToken);
		XAstParserRuleReturnScope expression425 = default(XAstParserRuleReturnScope);

		object IDENTIFIER421_tree = default(object);
		object char_literal422_tree = default(object);
		object IDENTIFIER423_tree = default(object);
		object char_literal424_tree = default(object);
		object char_literal426_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "offsetof_member_designator");
		DebugLocation(599, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// C.g:600:5: ( IDENTIFIER ( '.' IDENTIFIER | '[' expression ']' )* )
			DebugEnterAlt(1);
			// C.g:600:7: IDENTIFIER ( '.' IDENTIFIER | '[' expression ']' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(600, 7);
			IDENTIFIER421=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_offsetof_member_designator3921), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER421_tree = (object)adaptor.Create(IDENTIFIER421, retval);
			adaptor.AddChild(root_0, IDENTIFIER421_tree);
			}
			DebugLocation(600, 18);
			// C.g:600:18: ( '.' IDENTIFIER | '[' expression ']' )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=3;
				try { DebugEnterDecision(113, false);
				int LA113_0 = input.LA(1);

				if ((LA113_0==42))
				{
					alt113 = 1;
				}
				else if ((LA113_0==59))
				{
					alt113 = 2;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:600:19: '.' IDENTIFIER
					{
					DebugLocation(600, 19);
					char_literal422=(IToken)Match(input,42,Follow._42_in_offsetof_member_designator3924); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal422_tree = (object)adaptor.Create(char_literal422, retval);
					adaptor.AddChild(root_0, char_literal422_tree);
					}
					DebugLocation(600, 23);
					IDENTIFIER423=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_offsetof_member_designator3926), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER423_tree = (object)adaptor.Create(IDENTIFIER423, retval);
					adaptor.AddChild(root_0, IDENTIFIER423_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:600:36: '[' expression ']'
					{
					DebugLocation(600, 36);
					char_literal424=(IToken)Match(input,59,Follow._59_in_offsetof_member_designator3930); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal424_tree = (object)adaptor.Create(char_literal424, retval);
					adaptor.AddChild(root_0, char_literal424_tree);
					}
					DebugLocation(600, 40);
					PushFollow(Follow._expression_in_offsetof_member_designator3932);
					expression425=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression425.Tree, expression425, retval);
					DebugLocation(600, 51);
					char_literal426=(IToken)Match(input,60,Follow._60_in_offsetof_member_designator3934); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal426_tree = (object)adaptor.Create(char_literal426, retval);
					adaptor.AddChild(root_0, char_literal426_tree);
					}

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("offsetof_member_designator", 91);
			LeaveRule("offsetof_member_designator", 91);
			LeaveRule_offsetof_member_designator();
			if (state.backtracking > 0) { Memoize(input, 91, offsetof_member_designator_StartIndex); }

		}
		DebugLocation(601, 4);
		} finally { DebugExitRule(GrammarFileName, "offsetof_member_designator"); }
		return retval;

	}
	// $ANTLR end "offsetof_member_designator"

	partial void EnterRule_synpred2_C_fragment();
	partial void LeaveRule_synpred2_C_fragment();

	// $ANTLR start synpred2_C
	public void synpred2_C_fragment()
	{
		EnterRule_synpred2_C_fragment();
		EnterRule("synpred2_C_fragment", 93);
		var retval = new XAstParserRuleReturnScope("synpred2_C_fragment");
		try
		{
			// C.g:83:9: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:83:9: declaration_specifiers
			{
			DebugLocation(83, 9);
			PushFollow(Follow._declaration_specifiers_in_synpred2_C118);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_C_fragment", 93);
			LeaveRule("synpred2_C_fragment", 93);
			LeaveRule_synpred2_C_fragment();
		}
	}
	// $ANTLR end synpred2_C

	partial void EnterRule_synpred4_C_fragment();
	partial void LeaveRule_synpred4_C_fragment();

	// $ANTLR start synpred4_C
	public void synpred4_C_fragment()
	{
		EnterRule_synpred4_C_fragment();
		EnterRule("synpred4_C_fragment", 95);
		var retval = new XAstParserRuleReturnScope("synpred4_C_fragment");
		try
		{
			// C.g:83:7: ( ( declaration_specifiers )? declarator ( declaration )* '{' )
			DebugEnterAlt(1);
			// C.g:83:9: ( declaration_specifiers )? declarator ( declaration )* '{'
			{
			DebugLocation(83, 9);
			// C.g:83:9: ( declaration_specifiers )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			int LA114_0 = input.LA(1);

			if ((LA114_0==65||(LA114_0>=68 && LA114_0<=74)||LA114_0==76||(LA114_0>=79 && LA114_0<=80)||LA114_0==84||(LA114_0>=86 && LA114_0<=88)||(LA114_0>=92 && LA114_0<=96)||(LA114_0>=98 && LA114_0<=99)||(LA114_0>=101 && LA114_0<=102)||(LA114_0>=105 && LA114_0<=109)))
			{
				alt114 = 1;
			}
			else if ((LA114_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt114 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA114_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 30:
					{
					int LA114_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 76:
				case 87:
				case 95:
				case 101:
					{
					int LA114_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 108:
					{
					int LA114_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 79:
					{
					int LA114_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 98:
					{
					int LA114_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 93:
					{
					int LA114_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 94:
					{
					int LA114_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 88:
					{
					int LA114_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 84:
					{
					int LA114_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 99:
					{
					int LA114_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 107:
					{
					int LA114_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 102:
				case 106:
					{
					int LA114_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 86:
					{
					int LA114_35 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 105:
					{
					int LA114_36 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 69:
				case 73:
				case 74:
				case 80:
				case 96:
				case 109:
					{
					int LA114_37 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 68:
				case 71:
				case 72:
				case 92:
					{
					int LA114_38 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 65:
					{
					int LA114_39 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				case 70:
					{
					int LA114_40 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt114 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:83:9: declaration_specifiers
				{
				DebugLocation(83, 9);
				PushFollow(Follow._declaration_specifiers_in_synpred4_C118);
				declaration_specifiers();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(114); }

			DebugLocation(83, 33);
			PushFollow(Follow._declarator_in_synpred4_C121);
			declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(83, 44);
			// C.g:83:44: ( declaration )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==IDENTIFIER||LA115_0==65||(LA115_0>=68 && LA115_0<=74)||LA115_0==76||(LA115_0>=79 && LA115_0<=80)||LA115_0==84||(LA115_0>=86 && LA115_0<=88)||(LA115_0>=92 && LA115_0<=96)||(LA115_0>=98 && LA115_0<=99)||(LA115_0>=101 && LA115_0<=102)||(LA115_0>=104 && LA115_0<=109)))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:83:44: declaration
					{
					DebugLocation(83, 44);
					PushFollow(Follow._declaration_in_synpred4_C123);
					declaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }

			DebugLocation(83, 57);
			Match(input,111,Follow._111_in_synpred4_C126); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_C_fragment", 95);
			LeaveRule("synpred4_C_fragment", 95);
			LeaveRule_synpred4_C_fragment();
		}
	}
	// $ANTLR end synpred4_C

	partial void EnterRule_synpred5_C_fragment();
	partial void LeaveRule_synpred5_C_fragment();

	// $ANTLR start synpred5_C
	public void synpred5_C_fragment()
	{
		EnterRule_synpred5_C_fragment();
		EnterRule("synpred5_C_fragment", 96);
		var retval = new XAstParserRuleReturnScope("synpred5_C_fragment");
		try
		{
			// C.g:92:7: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:92:7: declaration_specifiers
			{
			DebugLocation(92, 7);
			PushFollow(Follow._declaration_specifiers_in_synpred5_C167);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_C_fragment", 96);
			LeaveRule("synpred5_C_fragment", 96);
			LeaveRule_synpred5_C_fragment();
		}
	}
	// $ANTLR end synpred5_C

	partial void EnterRule_synpred9_C_fragment();
	partial void LeaveRule_synpred9_C_fragment();

	// $ANTLR start synpred9_C
	public void synpred9_C_fragment()
	{
		EnterRule_synpred9_C_fragment();
		EnterRule("synpred9_C_fragment", 100);
		var retval = new XAstParserRuleReturnScope("synpred9_C_fragment");
		try
		{
			// C.g:105:42: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:105:42: declaration_specifiers
			{
			DebugLocation(105, 42);
			PushFollow(Follow._declaration_specifiers_in_synpred9_C243);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_C_fragment", 100);
			LeaveRule("synpred9_C_fragment", 100);
			LeaveRule_synpred9_C_fragment();
		}
	}
	// $ANTLR end synpred9_C

	partial void EnterRule_synpred13_C_fragment();
	partial void LeaveRule_synpred13_C_fragment();

	// $ANTLR start synpred13_C
	public void synpred13_C_fragment()
	{
		EnterRule_synpred13_C_fragment();
		EnterRule("synpred13_C_fragment", 104);
		var retval = new XAstParserRuleReturnScope("synpred13_C_fragment");
		try
		{
			// C.g:112:13: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:112:13: type_specifier
			{
			DebugLocation(112, 13);
			PushFollow(Follow._type_specifier_in_synpred13_C309);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_C_fragment", 104);
			LeaveRule("synpred13_C_fragment", 104);
			LeaveRule_synpred13_C_fragment();
		}
	}
	// $ANTLR end synpred13_C

	partial void EnterRule_synpred36_C_fragment();
	partial void LeaveRule_synpred36_C_fragment();

	// $ANTLR start synpred36_C
	public void synpred36_C_fragment()
	{
		EnterRule_synpred36_C_fragment();
		EnterRule("synpred36_C_fragment", 127);
		var retval = new XAstParserRuleReturnScope("synpred36_C_fragment");
		try
		{
			// C.g:161:7: ( struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}' )
			DebugEnterAlt(1);
			// C.g:161:7: struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}'
			{
			DebugLocation(161, 7);
			PushFollow(Follow._struct_or_union_in_synpred36_C621);
			struct_or_union();
			PopFollow();
			if (state.failed) return;
			DebugLocation(161, 23);
			// C.g:161:23: ( gcc_attribute_list )?
			int alt119=2;
			try { DebugEnterSubRule(119);
			try { DebugEnterDecision(119, false);
			int LA119_0 = input.LA(1);

			if ((LA119_0==65))
			{
				alt119 = 1;
			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:161:23: gcc_attribute_list
				{
				DebugLocation(161, 23);
				PushFollow(Follow._gcc_attribute_list_in_synpred36_C623);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(119); }

			DebugLocation(161, 43);
			// C.g:161:43: ( IDENTIFIER )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			int LA120_0 = input.LA(1);

			if ((LA120_0==IDENTIFIER))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:161:43: IDENTIFIER
				{
				DebugLocation(161, 43);
				new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred36_C626), "IDENTIFIER"); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(120); }

			DebugLocation(161, 55);
			Match(input,111,Follow._111_in_synpred36_C629); if (state.failed) return;
			DebugLocation(161, 59);
			PushFollow(Follow._struct_declaration_list_in_synpred36_C631);
			struct_declaration_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(161, 83);
			Match(input,115,Follow._115_in_synpred36_C633); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred36_C_fragment", 127);
			LeaveRule("synpred36_C_fragment", 127);
			LeaveRule_synpred36_C_fragment();
		}
	}
	// $ANTLR end synpred36_C

	partial void EnterRule_synpred42_C_fragment();
	partial void LeaveRule_synpred42_C_fragment();

	// $ANTLR start synpred42_C
	public void synpred42_C_fragment()
	{
		EnterRule_synpred42_C_fragment();
		EnterRule("synpred42_C_fragment", 133);
		var retval = new XAstParserRuleReturnScope("synpred42_C_fragment");
		try
		{
			// C.g:180:26: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:180:26: type_specifier
			{
			DebugLocation(180, 26);
			PushFollow(Follow._type_specifier_in_synpred42_C742);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred42_C_fragment", 133);
			LeaveRule("synpred42_C_fragment", 133);
			LeaveRule_synpred42_C_fragment();
		}
	}
	// $ANTLR end synpred42_C

	partial void EnterRule_synpred45_C_fragment();
	partial void LeaveRule_synpred45_C_fragment();

	// $ANTLR start synpred45_C
	public void synpred45_C_fragment()
	{
		EnterRule_synpred45_C_fragment();
		EnterRule("synpred45_C_fragment", 136);
		var retval = new XAstParserRuleReturnScope("synpred45_C_fragment");
		try
		{
			// C.g:188:7: ( declarator )
			DebugEnterAlt(1);
			// C.g:188:7: declarator
			{
			DebugLocation(188, 7);
			PushFollow(Follow._declarator_in_synpred45_C789);
			declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred45_C_fragment", 136);
			LeaveRule("synpred45_C_fragment", 136);
			LeaveRule_synpred45_C_fragment();
		}
	}
	// $ANTLR end synpred45_C

	partial void EnterRule_synpred50_C_fragment();
	partial void LeaveRule_synpred50_C_fragment();

	// $ANTLR start synpred50_C
	public void synpred50_C_fragment()
	{
		EnterRule_synpred50_C_fragment();
		EnterRule("synpred50_C_fragment", 141);
		var retval = new XAstParserRuleReturnScope("synpred50_C_fragment");
		try
		{
			// C.g:194:7: ( 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}' )
			DebugEnterAlt(1);
			// C.g:194:7: 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}'
			{
			DebugLocation(194, 7);
			Match(input,86,Follow._86_in_synpred50_C829); if (state.failed) return;
			DebugLocation(194, 14);
			// C.g:194:14: ( gcc_attribute_list )?
			int alt121=2;
			try { DebugEnterSubRule(121);
			try { DebugEnterDecision(121, false);
			int LA121_0 = input.LA(1);

			if ((LA121_0==65))
			{
				alt121 = 1;
			}
			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:194:14: gcc_attribute_list
				{
				DebugLocation(194, 14);
				PushFollow(Follow._gcc_attribute_list_in_synpred50_C831);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(121); }

			DebugLocation(194, 34);
			// C.g:194:34: ( IDENTIFIER )?
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==IDENTIFIER))
			{
				alt122 = 1;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:194:34: IDENTIFIER
				{
				DebugLocation(194, 34);
				new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred50_C834), "IDENTIFIER"); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(122); }

			DebugLocation(194, 46);
			Match(input,111,Follow._111_in_synpred50_C837); if (state.failed) return;
			DebugLocation(194, 50);
			PushFollow(Follow._enumerator_list_in_synpred50_C839);
			enumerator_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(194, 66);
			Match(input,115,Follow._115_in_synpred50_C841); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred50_C_fragment", 141);
			LeaveRule("synpred50_C_fragment", 141);
			LeaveRule_synpred50_C_fragment();
		}
	}
	// $ANTLR end synpred50_C

	partial void EnterRule_synpred61_C_fragment();
	partial void LeaveRule_synpred61_C_fragment();

	// $ANTLR start synpred61_C
	public void synpred61_C_fragment()
	{
		EnterRule_synpred61_C_fragment();
		EnterRule("synpred61_C_fragment", 152);
		var retval = new XAstParserRuleReturnScope("synpred61_C_fragment");
		try
		{
			// C.g:216:54: ( gcc_attribute_list )
			DebugEnterAlt(1);
			// C.g:216:54: gcc_attribute_list
			{
			DebugLocation(216, 54);
			PushFollow(Follow._gcc_attribute_list_in_synpred61_C1000);
			gcc_attribute_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred61_C_fragment", 152);
			LeaveRule("synpred61_C_fragment", 152);
			LeaveRule_synpred61_C_fragment();
		}
	}
	// $ANTLR end synpred61_C

	partial void EnterRule_synpred62_C_fragment();
	partial void LeaveRule_synpred62_C_fragment();

	// $ANTLR start synpred62_C
	public void synpred62_C_fragment()
	{
		EnterRule_synpred62_C_fragment();
		EnterRule("synpred62_C_fragment", 153);
		var retval = new XAstParserRuleReturnScope("synpred62_C_fragment");
		try
		{
			// C.g:216:7: ( ( pointer )? direct_declarator ( gcc_asm_expression )? ( gcc_attribute_list )? )
			DebugEnterAlt(1);
			// C.g:216:7: ( pointer )? direct_declarator ( gcc_asm_expression )? ( gcc_attribute_list )?
			{
			DebugLocation(216, 7);
			// C.g:216:7: ( pointer )?
			int alt123=2;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, false);
			int LA123_0 = input.LA(1);

			if ((LA123_0==32))
			{
				alt123 = 1;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:216:7: pointer
				{
				DebugLocation(216, 7);
				PushFollow(Follow._pointer_in_synpred62_C992);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(123); }

			DebugLocation(216, 16);
			PushFollow(Follow._direct_declarator_in_synpred62_C995);
			direct_declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(216, 34);
			// C.g:216:34: ( gcc_asm_expression )?
			int alt124=2;
			try { DebugEnterSubRule(124);
			try { DebugEnterDecision(124, false);
			int LA124_0 = input.LA(1);

			if ((LA124_0==64||LA124_0==75))
			{
				alt124 = 1;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:216:34: gcc_asm_expression
				{
				DebugLocation(216, 34);
				PushFollow(Follow._gcc_asm_expression_in_synpred62_C997);
				gcc_asm_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(124); }

			DebugLocation(216, 54);
			// C.g:216:54: ( gcc_attribute_list )?
			int alt125=2;
			try { DebugEnterSubRule(125);
			try { DebugEnterDecision(125, false);
			int LA125_0 = input.LA(1);

			if ((LA125_0==65))
			{
				alt125 = 1;
			}
			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:216:54: gcc_attribute_list
				{
				DebugLocation(216, 54);
				PushFollow(Follow._gcc_attribute_list_in_synpred62_C1000);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(125); }


			}

		}
		finally
		{
			TraceOut("synpred62_C_fragment", 153);
			LeaveRule("synpred62_C_fragment", 153);
			LeaveRule_synpred62_C_fragment();
		}
	}
	// $ANTLR end synpred62_C

	partial void EnterRule_synpred65_C_fragment();
	partial void LeaveRule_synpred65_C_fragment();

	// $ANTLR start synpred65_C
	public void synpred65_C_fragment()
	{
		EnterRule_synpred65_C_fragment();
		EnterRule("synpred65_C_fragment", 156);
		var retval = new XAstParserRuleReturnScope("synpred65_C_fragment");
		try
		{
			// C.g:230:9: ( declarator_suffix )
			DebugEnterAlt(1);
			// C.g:230:9: declarator_suffix
			{
			DebugLocation(230, 9);
			PushFollow(Follow._declarator_suffix_in_synpred65_C1083);
			declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred65_C_fragment", 156);
			LeaveRule("synpred65_C_fragment", 156);
			LeaveRule_synpred65_C_fragment();
		}
	}
	// $ANTLR end synpred65_C

	partial void EnterRule_synpred68_C_fragment();
	partial void LeaveRule_synpred68_C_fragment();

	// $ANTLR start synpred68_C
	public void synpred68_C_fragment()
	{
		EnterRule_synpred68_C_fragment();
		EnterRule("synpred68_C_fragment", 159);
		var retval = new XAstParserRuleReturnScope("synpred68_C_fragment");
		try
		{
			// C.g:236:9: ( '(' parameter_type_list ')' )
			DebugEnterAlt(1);
			// C.g:236:9: '(' parameter_type_list ')'
			{
			DebugLocation(236, 9);
			Match(input,30,Follow._30_in_synpred68_C1129); if (state.failed) return;
			DebugLocation(236, 13);
			PushFollow(Follow._parameter_type_list_in_synpred68_C1131);
			parameter_type_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(236, 33);
			Match(input,31,Follow._31_in_synpred68_C1133); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_C_fragment", 159);
			LeaveRule("synpred68_C_fragment", 159);
			LeaveRule_synpred68_C_fragment();
		}
	}
	// $ANTLR end synpred68_C

	partial void EnterRule_synpred69_C_fragment();
	partial void LeaveRule_synpred69_C_fragment();

	// $ANTLR start synpred69_C
	public void synpred69_C_fragment()
	{
		EnterRule_synpred69_C_fragment();
		EnterRule("synpred69_C_fragment", 160);
		var retval = new XAstParserRuleReturnScope("synpred69_C_fragment");
		try
		{
			// C.g:237:9: ( '(' identifier_list ')' )
			DebugEnterAlt(1);
			// C.g:237:9: '(' identifier_list ')'
			{
			DebugLocation(237, 9);
			Match(input,30,Follow._30_in_synpred69_C1143); if (state.failed) return;
			DebugLocation(237, 13);
			PushFollow(Follow._identifier_list_in_synpred69_C1145);
			identifier_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(237, 29);
			Match(input,31,Follow._31_in_synpred69_C1147); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred69_C_fragment", 160);
			LeaveRule("synpred69_C_fragment", 160);
			LeaveRule_synpred69_C_fragment();
		}
	}
	// $ANTLR end synpred69_C

	partial void EnterRule_synpred70_C_fragment();
	partial void LeaveRule_synpred70_C_fragment();

	// $ANTLR start synpred70_C
	public void synpred70_C_fragment()
	{
		EnterRule_synpred70_C_fragment();
		EnterRule("synpred70_C_fragment", 161);
		var retval = new XAstParserRuleReturnScope("synpred70_C_fragment");
		try
		{
			// C.g:242:13: ( type_qualifier )
			DebugEnterAlt(1);
			// C.g:242:13: type_qualifier
			{
			DebugLocation(242, 13);
			PushFollow(Follow._type_qualifier_in_synpred70_C1182);
			type_qualifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred70_C_fragment", 161);
			LeaveRule("synpred70_C_fragment", 161);
			LeaveRule_synpred70_C_fragment();
		}
	}
	// $ANTLR end synpred70_C

	partial void EnterRule_synpred71_C_fragment();
	partial void LeaveRule_synpred71_C_fragment();

	// $ANTLR start synpred71_C
	public void synpred71_C_fragment()
	{
		EnterRule_synpred71_C_fragment();
		EnterRule("synpred71_C_fragment", 162);
		var retval = new XAstParserRuleReturnScope("synpred71_C_fragment");
		try
		{
			// C.g:242:30: ( gcc_attribute )
			DebugEnterAlt(1);
			// C.g:242:30: gcc_attribute
			{
			DebugLocation(242, 30);
			PushFollow(Follow._gcc_attribute_in_synpred71_C1186);
			gcc_attribute();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred71_C_fragment", 162);
			LeaveRule("synpred71_C_fragment", 162);
			LeaveRule_synpred71_C_fragment();
		}
	}
	// $ANTLR end synpred71_C

	partial void EnterRule_synpred72_C_fragment();
	partial void LeaveRule_synpred72_C_fragment();

	// $ANTLR start synpred72_C
	public void synpred72_C_fragment()
	{
		EnterRule_synpred72_C_fragment();
		EnterRule("synpred72_C_fragment", 163);
		var retval = new XAstParserRuleReturnScope("synpred72_C_fragment");
		try
		{
			// C.g:242:8: ( '*' ( type_qualifier | gcc_attribute )* )
			DebugEnterAlt(1);
			// C.g:242:8: '*' ( type_qualifier | gcc_attribute )*
			{
			DebugLocation(242, 8);
			Match(input,32,Follow._32_in_synpred72_C1179); if (state.failed) return;
			DebugLocation(242, 12);
			// C.g:242:12: ( type_qualifier | gcc_attribute )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=3;
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==69||(LA126_0>=73 && LA126_0<=74)||LA126_0==80||LA126_0==96||LA126_0==109))
				{
					alt126 = 1;
				}
				else if ((LA126_0==65))
				{
					alt126 = 2;
				}


				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:242:13: type_qualifier
					{
					DebugLocation(242, 13);
					PushFollow(Follow._type_qualifier_in_synpred72_C1182);
					type_qualifier();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:242:30: gcc_attribute
					{
					DebugLocation(242, 30);
					PushFollow(Follow._gcc_attribute_in_synpred72_C1186);
					gcc_attribute();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

		}
		finally
		{
			TraceOut("synpred72_C_fragment", 163);
			LeaveRule("synpred72_C_fragment", 163);
			LeaveRule_synpred72_C_fragment();
		}
	}
	// $ANTLR end synpred72_C

	partial void EnterRule_synpred75_C_fragment();
	partial void LeaveRule_synpred75_C_fragment();

	// $ANTLR start synpred75_C
	public void synpred75_C_fragment()
	{
		EnterRule_synpred75_C_fragment();
		EnterRule("synpred75_C_fragment", 166);
		var retval = new XAstParserRuleReturnScope("synpred75_C_fragment");
		try
		{
			// C.g:254:31: ( declarator )
			DebugEnterAlt(1);
			// C.g:254:31: declarator
			{
			DebugLocation(254, 31);
			PushFollow(Follow._declarator_in_synpred75_C1258);
			declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred75_C_fragment", 166);
			LeaveRule("synpred75_C_fragment", 166);
			LeaveRule_synpred75_C_fragment();
		}
	}
	// $ANTLR end synpred75_C

	partial void EnterRule_synpred76_C_fragment();
	partial void LeaveRule_synpred76_C_fragment();

	// $ANTLR start synpred76_C
	public void synpred76_C_fragment()
	{
		EnterRule_synpred76_C_fragment();
		EnterRule("synpred76_C_fragment", 167);
		var retval = new XAstParserRuleReturnScope("synpred76_C_fragment");
		try
		{
			// C.g:254:42: ( abstract_declarator )
			DebugEnterAlt(1);
			// C.g:254:42: abstract_declarator
			{
			DebugLocation(254, 42);
			PushFollow(Follow._abstract_declarator_in_synpred76_C1260);
			abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred76_C_fragment", 167);
			LeaveRule("synpred76_C_fragment", 167);
			LeaveRule_synpred76_C_fragment();
		}
	}
	// $ANTLR end synpred76_C

	partial void EnterRule_synpred79_C_fragment();
	partial void LeaveRule_synpred79_C_fragment();

	// $ANTLR start synpred79_C
	public void synpred79_C_fragment()
	{
		EnterRule_synpred79_C_fragment();
		EnterRule("synpred79_C_fragment", 170);
		var retval = new XAstParserRuleReturnScope("synpred79_C_fragment");
		try
		{
			// C.g:266:7: ( pointer )
			DebugEnterAlt(1);
			// C.g:266:7: pointer
			{
			DebugLocation(266, 7);
			PushFollow(Follow._pointer_in_synpred79_C1323);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred79_C_fragment", 170);
			LeaveRule("synpred79_C_fragment", 170);
			LeaveRule_synpred79_C_fragment();
		}
	}
	// $ANTLR end synpred79_C

	partial void EnterRule_synpred84_C_fragment();
	partial void LeaveRule_synpred84_C_fragment();

	// $ANTLR start synpred84_C
	public void synpred84_C_fragment()
	{
		EnterRule_synpred84_C_fragment();
		EnterRule("synpred84_C_fragment", 175);
		var retval = new XAstParserRuleReturnScope("synpred84_C_fragment");
		try
		{
			// C.g:271:9: ( '(' ( gcc_attribute_list )? abstract_declarator ')' )
			DebugEnterAlt(1);
			// C.g:271:9: '(' ( gcc_attribute_list )? abstract_declarator ')'
			{
			DebugLocation(271, 9);
			Match(input,30,Follow._30_in_synpred84_C1359); if (state.failed) return;
			DebugLocation(271, 13);
			// C.g:271:13: ( gcc_attribute_list )?
			int alt127=2;
			try { DebugEnterSubRule(127);
			try { DebugEnterDecision(127, false);
			int LA127_0 = input.LA(1);

			if ((LA127_0==65))
			{
				alt127 = 1;
			}
			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:271:13: gcc_attribute_list
				{
				DebugLocation(271, 13);
				PushFollow(Follow._gcc_attribute_list_in_synpred84_C1361);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(127); }

			DebugLocation(271, 33);
			PushFollow(Follow._abstract_declarator_in_synpred84_C1364);
			abstract_declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(271, 53);
			Match(input,31,Follow._31_in_synpred84_C1366); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred84_C_fragment", 175);
			LeaveRule("synpred84_C_fragment", 175);
			LeaveRule_synpred84_C_fragment();
		}
	}
	// $ANTLR end synpred84_C

	partial void EnterRule_synpred85_C_fragment();
	partial void LeaveRule_synpred85_C_fragment();

	// $ANTLR start synpred85_C
	public void synpred85_C_fragment()
	{
		EnterRule_synpred85_C_fragment();
		EnterRule("synpred85_C_fragment", 176);
		var retval = new XAstParserRuleReturnScope("synpred85_C_fragment");
		try
		{
			// C.g:271:88: ( abstract_declarator_suffix )
			DebugEnterAlt(1);
			// C.g:271:88: abstract_declarator_suffix
			{
			DebugLocation(271, 88);
			PushFollow(Follow._abstract_declarator_suffix_in_synpred85_C1374);
			abstract_declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred85_C_fragment", 176);
			LeaveRule("synpred85_C_fragment", 176);
			LeaveRule_synpred85_C_fragment();
		}
	}
	// $ANTLR end synpred85_C

	partial void EnterRule_synpred88_C_fragment();
	partial void LeaveRule_synpred88_C_fragment();

	// $ANTLR start synpred88_C
	public void synpred88_C_fragment()
	{
		EnterRule_synpred88_C_fragment();
		EnterRule("synpred88_C_fragment", 179);
		var retval = new XAstParserRuleReturnScope("synpred88_C_fragment");
		try
		{
			// C.g:275:7: ( '[' ( gcc_array_type_modifier )* ( constant_expression )? ']' )
			DebugEnterAlt(1);
			// C.g:275:7: '[' ( gcc_array_type_modifier )* ( constant_expression )? ']'
			{
			DebugLocation(275, 7);
			Match(input,59,Follow._59_in_synpred88_C1392); if (state.failed) return;
			DebugLocation(275, 11);
			// C.g:275:11: ( gcc_array_type_modifier )*
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==65||LA128_0==69||(LA128_0>=73 && LA128_0<=74)||LA128_0==80||LA128_0==96||LA128_0==109))
				{
					alt128 = 1;
				}


				} finally { DebugExitDecision(128); }
				switch ( alt128 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:275:11: gcc_array_type_modifier
					{
					DebugLocation(275, 11);
					PushFollow(Follow._gcc_array_type_modifier_in_synpred88_C1394);
					gcc_array_type_modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop128;
				}
			}

			loop128:
				;

			} finally { DebugExitSubRule(128); }

			DebugLocation(275, 36);
			// C.g:275:36: ( constant_expression )?
			int alt129=2;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==CHARACTER_LITERAL||LA129_0==DECIMAL_LITERAL||LA129_0==FLOATING_POINT_LITERAL||LA129_0==HEX_LITERAL||LA129_0==IDENTIFIER||LA129_0==OCTAL_LITERAL||LA129_0==STRING_LITERAL||LA129_0==23||LA129_0==28||LA129_0==30||LA129_0==32||(LA129_0>=34 && LA129_0<=35)||(LA129_0>=38 && LA129_0<=39)||LA129_0==63||(LA129_0>=66 && LA129_0<=67)||LA129_0==70||LA129_0==100||LA129_0==116))
			{
				alt129 = 1;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:275:36: constant_expression
				{
				DebugLocation(275, 36);
				PushFollow(Follow._constant_expression_in_synpred88_C1397);
				constant_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(129); }

			DebugLocation(275, 57);
			Match(input,60,Follow._60_in_synpred88_C1400); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred88_C_fragment", 179);
			LeaveRule("synpred88_C_fragment", 179);
			LeaveRule_synpred88_C_fragment();
		}
	}
	// $ANTLR end synpred88_C

	partial void EnterRule_synpred90_C_fragment();
	partial void LeaveRule_synpred90_C_fragment();

	// $ANTLR start synpred90_C
	public void synpred90_C_fragment()
	{
		EnterRule_synpred90_C_fragment();
		EnterRule("synpred90_C_fragment", 181);
		var retval = new XAstParserRuleReturnScope("synpred90_C_fragment");
		try
		{
			// C.g:276:7: ( '[' ( gcc_array_type_modifier )* '*' ']' )
			DebugEnterAlt(1);
			// C.g:276:7: '[' ( gcc_array_type_modifier )* '*' ']'
			{
			DebugLocation(276, 7);
			Match(input,59,Follow._59_in_synpred90_C1408); if (state.failed) return;
			DebugLocation(276, 11);
			// C.g:276:11: ( gcc_array_type_modifier )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==65||LA130_0==69||(LA130_0>=73 && LA130_0<=74)||LA130_0==80||LA130_0==96||LA130_0==109))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:276:11: gcc_array_type_modifier
					{
					DebugLocation(276, 11);
					PushFollow(Follow._gcc_array_type_modifier_in_synpred90_C1410);
					gcc_array_type_modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }

			DebugLocation(276, 36);
			Match(input,32,Follow._32_in_synpred90_C1413); if (state.failed) return;
			DebugLocation(276, 40);
			Match(input,60,Follow._60_in_synpred90_C1415); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred90_C_fragment", 181);
			LeaveRule("synpred90_C_fragment", 181);
			LeaveRule_synpred90_C_fragment();
		}
	}
	// $ANTLR end synpred90_C

	partial void EnterRule_synpred96_C_fragment();
	partial void LeaveRule_synpred96_C_fragment();

	// $ANTLR start synpred96_C
	public void synpred96_C_fragment()
	{
		EnterRule_synpred96_C_fragment();
		EnterRule("synpred96_C_fragment", 187);
		var retval = new XAstParserRuleReturnScope("synpred96_C_fragment");
		try
		{
			// C.g:296:36: ( '+' multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:296:36: '+' multiplicative_expression
			{
			DebugLocation(296, 36);
			Match(input,34,Follow._34_in_synpred96_C1538); if (state.failed) return;
			DebugLocation(296, 40);
			PushFollow(Follow._multiplicative_expression_in_synpred96_C1540);
			multiplicative_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred96_C_fragment", 187);
			LeaveRule("synpred96_C_fragment", 187);
			LeaveRule_synpred96_C_fragment();
		}
	}
	// $ANTLR end synpred96_C

	partial void EnterRule_synpred97_C_fragment();
	partial void LeaveRule_synpred97_C_fragment();

	// $ANTLR start synpred97_C
	public void synpred97_C_fragment()
	{
		EnterRule_synpred97_C_fragment();
		EnterRule("synpred97_C_fragment", 188);
		var retval = new XAstParserRuleReturnScope("synpred97_C_fragment");
		try
		{
			// C.g:296:68: ( '-' multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:296:68: '-' multiplicative_expression
			{
			DebugLocation(296, 68);
			Match(input,38,Follow._38_in_synpred97_C1544); if (state.failed) return;
			DebugLocation(296, 72);
			PushFollow(Follow._multiplicative_expression_in_synpred97_C1546);
			multiplicative_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred97_C_fragment", 188);
			LeaveRule("synpred97_C_fragment", 188);
			LeaveRule_synpred97_C_fragment();
		}
	}
	// $ANTLR end synpred97_C

	partial void EnterRule_synpred98_C_fragment();
	partial void LeaveRule_synpred98_C_fragment();

	// $ANTLR start synpred98_C
	public void synpred98_C_fragment()
	{
		EnterRule_synpred98_C_fragment();
		EnterRule("synpred98_C_fragment", 189);
		var retval = new XAstParserRuleReturnScope("synpred98_C_fragment");
		try
		{
			// C.g:300:26: ( '*' cast_expression )
			DebugEnterAlt(1);
			// C.g:300:26: '*' cast_expression
			{
			DebugLocation(300, 26);
			Match(input,32,Follow._32_in_synpred98_C1570); if (state.failed) return;
			DebugLocation(300, 30);
			PushFollow(Follow._cast_expression_in_synpred98_C1572);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred98_C_fragment", 189);
			LeaveRule("synpred98_C_fragment", 189);
			LeaveRule_synpred98_C_fragment();
		}
	}
	// $ANTLR end synpred98_C

	partial void EnterRule_synpred101_C_fragment();
	partial void LeaveRule_synpred101_C_fragment();

	// $ANTLR start synpred101_C
	public void synpred101_C_fragment()
	{
		EnterRule_synpred101_C_fragment();
		EnterRule("synpred101_C_fragment", 192);
		var retval = new XAstParserRuleReturnScope("synpred101_C_fragment");
		try
		{
			// C.g:304:7: ( '(' type_name ')' cast_expression )
			DebugEnterAlt(1);
			// C.g:304:7: '(' type_name ')' cast_expression
			{
			DebugLocation(304, 7);
			Match(input,30,Follow._30_in_synpred101_C1603); if (state.failed) return;
			DebugLocation(304, 11);
			PushFollow(Follow._type_name_in_synpred101_C1605);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(304, 21);
			Match(input,31,Follow._31_in_synpred101_C1607); if (state.failed) return;
			DebugLocation(304, 25);
			PushFollow(Follow._cast_expression_in_synpred101_C1609);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred101_C_fragment", 192);
			LeaveRule("synpred101_C_fragment", 192);
			LeaveRule_synpred101_C_fragment();
		}
	}
	// $ANTLR end synpred101_C

	partial void EnterRule_synpred106_C_fragment();
	partial void LeaveRule_synpred106_C_fragment();

	// $ANTLR start synpred106_C
	public void synpred106_C_fragment()
	{
		EnterRule_synpred106_C_fragment();
		EnterRule("synpred106_C_fragment", 197);
		var retval = new XAstParserRuleReturnScope("synpred106_C_fragment");
		try
		{
			// C.g:313:7: ( 'sizeof' unary_expression )
			DebugEnterAlt(1);
			// C.g:313:7: 'sizeof' unary_expression
			{
			DebugLocation(313, 7);
			Match(input,100,Follow._100_in_synpred106_C1672); if (state.failed) return;
			DebugLocation(313, 16);
			PushFollow(Follow._unary_expression_in_synpred106_C1674);
			unary_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred106_C_fragment", 197);
			LeaveRule("synpred106_C_fragment", 197);
			LeaveRule_synpred106_C_fragment();
		}
	}
	// $ANTLR end synpred106_C

	partial void EnterRule_synpred107_C_fragment();
	partial void LeaveRule_synpred107_C_fragment();

	// $ANTLR start synpred107_C
	public void synpred107_C_fragment()
	{
		EnterRule_synpred107_C_fragment();
		EnterRule("synpred107_C_fragment", 198);
		var retval = new XAstParserRuleReturnScope("synpred107_C_fragment");
		try
		{
			// C.g:314:7: ( 'sizeof' '(' type_name ')' )
			DebugEnterAlt(1);
			// C.g:314:7: 'sizeof' '(' type_name ')'
			{
			DebugLocation(314, 7);
			Match(input,100,Follow._100_in_synpred107_C1682); if (state.failed) return;
			DebugLocation(314, 16);
			Match(input,30,Follow._30_in_synpred107_C1684); if (state.failed) return;
			DebugLocation(314, 20);
			PushFollow(Follow._type_name_in_synpred107_C1686);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(314, 30);
			Match(input,31,Follow._31_in_synpred107_C1688); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred107_C_fragment", 198);
			LeaveRule("synpred107_C_fragment", 198);
			LeaveRule_synpred107_C_fragment();
		}
	}
	// $ANTLR end synpred107_C

	partial void EnterRule_synpred108_C_fragment();
	partial void LeaveRule_synpred108_C_fragment();

	// $ANTLR start synpred108_C
	public void synpred108_C_fragment()
	{
		EnterRule_synpred108_C_fragment();
		EnterRule("synpred108_C_fragment", 199);
		var retval = new XAstParserRuleReturnScope("synpred108_C_fragment");
		try
		{
			// C.g:316:7: ( '__alignof__' unary_expression )
			DebugEnterAlt(1);
			// C.g:316:7: '__alignof__' unary_expression
			{
			DebugLocation(316, 7);
			Match(input,63,Follow._63_in_synpred108_C1701); if (state.failed) return;
			DebugLocation(316, 21);
			PushFollow(Follow._unary_expression_in_synpred108_C1703);
			unary_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred108_C_fragment", 199);
			LeaveRule("synpred108_C_fragment", 199);
			LeaveRule_synpred108_C_fragment();
		}
	}
	// $ANTLR end synpred108_C

	partial void EnterRule_synpred109_C_fragment();
	partial void LeaveRule_synpred109_C_fragment();

	// $ANTLR start synpred109_C
	public void synpred109_C_fragment()
	{
		EnterRule_synpred109_C_fragment();
		EnterRule("synpred109_C_fragment", 200);
		var retval = new XAstParserRuleReturnScope("synpred109_C_fragment");
		try
		{
			// C.g:317:7: ( '__alignof__' '(' type_name ')' )
			DebugEnterAlt(1);
			// C.g:317:7: '__alignof__' '(' type_name ')'
			{
			DebugLocation(317, 7);
			Match(input,63,Follow._63_in_synpred109_C1711); if (state.failed) return;
			DebugLocation(317, 21);
			Match(input,30,Follow._30_in_synpred109_C1713); if (state.failed) return;
			DebugLocation(317, 25);
			PushFollow(Follow._type_name_in_synpred109_C1715);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(317, 35);
			Match(input,31,Follow._31_in_synpred109_C1717); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred109_C_fragment", 200);
			LeaveRule("synpred109_C_fragment", 200);
			LeaveRule_synpred109_C_fragment();
		}
	}
	// $ANTLR end synpred109_C

	partial void EnterRule_synpred112_C_fragment();
	partial void LeaveRule_synpred112_C_fragment();

	// $ANTLR start synpred112_C
	public void synpred112_C_fragment()
	{
		EnterRule_synpred112_C_fragment();
		EnterRule("synpred112_C_fragment", 203);
		var retval = new XAstParserRuleReturnScope("synpred112_C_fragment");
		try
		{
			// C.g:325:13: ( '(' argument_expression_list ')' )
			DebugEnterAlt(1);
			// C.g:325:13: '(' argument_expression_list ')'
			{
			DebugLocation(325, 13);
			Match(input,30,Follow._30_in_synpred112_C1794); if (state.failed) return;
			DebugLocation(325, 17);
			PushFollow(Follow._argument_expression_list_in_synpred112_C1796);
			argument_expression_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(325, 42);
			Match(input,31,Follow._31_in_synpred112_C1798); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred112_C_fragment", 203);
			LeaveRule("synpred112_C_fragment", 203);
			LeaveRule_synpred112_C_fragment();
		}
	}
	// $ANTLR end synpred112_C

	partial void EnterRule_synpred115_C_fragment();
	partial void LeaveRule_synpred115_C_fragment();

	// $ANTLR start synpred115_C
	public void synpred115_C_fragment()
	{
		EnterRule_synpred115_C_fragment();
		EnterRule("synpred115_C_fragment", 206);
		var retval = new XAstParserRuleReturnScope("synpred115_C_fragment");
		try
		{
			// C.g:328:13: ( '++' )
			DebugEnterAlt(1);
			// C.g:328:13: '++'
			{
			DebugLocation(328, 13);
			Match(input,35,Follow._35_in_synpred115_C1844); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred115_C_fragment", 206);
			LeaveRule("synpred115_C_fragment", 206);
			LeaveRule_synpred115_C_fragment();
		}
	}
	// $ANTLR end synpred115_C

	partial void EnterRule_synpred116_C_fragment();
	partial void LeaveRule_synpred116_C_fragment();

	// $ANTLR start synpred116_C
	public void synpred116_C_fragment()
	{
		EnterRule_synpred116_C_fragment();
		EnterRule("synpred116_C_fragment", 207);
		var retval = new XAstParserRuleReturnScope("synpred116_C_fragment");
		try
		{
			// C.g:329:13: ( '--' )
			DebugEnterAlt(1);
			// C.g:329:13: '--'
			{
			DebugLocation(329, 13);
			Match(input,39,Follow._39_in_synpred116_C1858); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred116_C_fragment", 207);
			LeaveRule("synpred116_C_fragment", 207);
			LeaveRule_synpred116_C_fragment();
		}
	}
	// $ANTLR end synpred116_C

	partial void EnterRule_synpred133_C_fragment();
	partial void LeaveRule_synpred133_C_fragment();

	// $ANTLR start synpred133_C
	public void synpred133_C_fragment()
	{
		EnterRule_synpred133_C_fragment();
		EnterRule("synpred133_C_fragment", 224);
		var retval = new XAstParserRuleReturnScope("synpred133_C_fragment");
		try
		{
			// C.g:395:7: ( lvalue assignment_operator assignment_expression )
			DebugEnterAlt(1);
			// C.g:395:7: lvalue assignment_operator assignment_expression
			{
			DebugLocation(395, 7);
			PushFollow(Follow._lvalue_in_synpred133_C2218);
			lvalue();
			PopFollow();
			if (state.failed) return;
			DebugLocation(395, 14);
			PushFollow(Follow._assignment_operator_in_synpred133_C2220);
			assignment_operator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(395, 34);
			PushFollow(Follow._assignment_expression_in_synpred133_C2222);
			assignment_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred133_C_fragment", 224);
			LeaveRule("synpred133_C_fragment", 224);
			LeaveRule_synpred133_C_fragment();
		}
	}
	// $ANTLR end synpred133_C

	partial void EnterRule_synpred145_C_fragment();
	partial void LeaveRule_synpred145_C_fragment();

	// $ANTLR start synpred145_C
	public void synpred145_C_fragment()
	{
		EnterRule_synpred145_C_fragment();
		EnterRule("synpred145_C_fragment", 236);
		var retval = new XAstParserRuleReturnScope("synpred145_C_fragment");
		try
		{
			// C.g:418:7: ( logical_or_expression ( '?' expression ':' conditional_expression )? )
			DebugEnterAlt(1);
			// C.g:418:7: logical_or_expression ( '?' expression ':' conditional_expression )?
			{
			DebugLocation(418, 7);
			PushFollow(Follow._logical_or_expression_in_synpred145_C2365);
			logical_or_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(418, 29);
			// C.g:418:29: ( '?' expression ':' conditional_expression )?
			int alt132=2;
			try { DebugEnterSubRule(132);
			try { DebugEnterDecision(132, false);
			int LA132_0 = input.LA(1);

			if ((LA132_0==58))
			{
				alt132 = 1;
			}
			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:418:30: '?' expression ':' conditional_expression
				{
				DebugLocation(418, 30);
				Match(input,58,Follow._58_in_synpred145_C2368); if (state.failed) return;
				DebugLocation(418, 34);
				PushFollow(Follow._expression_in_synpred145_C2370);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(418, 45);
				Match(input,46,Follow._46_in_synpred145_C2372); if (state.failed) return;
				DebugLocation(418, 49);
				PushFollow(Follow._conditional_expression_in_synpred145_C2374);
				conditional_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(132); }


			}

		}
		finally
		{
			TraceOut("synpred145_C_fragment", 236);
			LeaveRule("synpred145_C_fragment", 236);
			LeaveRule_synpred145_C_fragment();
		}
	}
	// $ANTLR end synpred145_C

	partial void EnterRule_synpred150_C_fragment();
	partial void LeaveRule_synpred150_C_fragment();

	// $ANTLR start synpred150_C
	public void synpred150_C_fragment()
	{
		EnterRule_synpred150_C_fragment();
		EnterRule("synpred150_C_fragment", 241);
		var retval = new XAstParserRuleReturnScope("synpred150_C_fragment");
		try
		{
			// C.g:440:28: ( '&' equality_expression )
			DebugEnterAlt(1);
			// C.g:440:28: '&' equality_expression
			{
			DebugLocation(440, 28);
			Match(input,28,Follow._28_in_synpred150_C2511); if (state.failed) return;
			DebugLocation(440, 32);
			PushFollow(Follow._equality_expression_in_synpred150_C2513);
			equality_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred150_C_fragment", 241);
			LeaveRule("synpred150_C_fragment", 241);
			LeaveRule_synpred150_C_fragment();
		}
	}
	// $ANTLR end synpred150_C

	partial void EnterRule_synpred168_C_fragment();
	partial void LeaveRule_synpred168_C_fragment();

	// $ANTLR start synpred168_C
	public void synpred168_C_fragment()
	{
		EnterRule_synpred168_C_fragment();
		EnterRule("synpred168_C_fragment", 259);
		var retval = new XAstParserRuleReturnScope("synpred168_C_fragment");
		try
		{
			// C.g:481:7: ( declaration )
			DebugEnterAlt(1);
			// C.g:481:7: declaration
			{
			DebugLocation(481, 7);
			PushFollow(Follow._declaration_in_synpred168_C2766);
			declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred168_C_fragment", 259);
			LeaveRule("synpred168_C_fragment", 259);
			LeaveRule_synpred168_C_fragment();
		}
	}
	// $ANTLR end synpred168_C

	partial void EnterRule_synpred182_C_fragment();
	partial void LeaveRule_synpred182_C_fragment();

	// $ANTLR start synpred182_C
	public void synpred182_C_fragment()
	{
		EnterRule_synpred182_C_fragment();
		EnterRule("synpred182_C_fragment", 273);
		var retval = new XAstParserRuleReturnScope("synpred182_C_fragment");
		try
		{
			// C.g:527:7: ( gcc_attribute )
			DebugEnterAlt(1);
			// C.g:527:7: gcc_attribute
			{
			DebugLocation(527, 7);
			PushFollow(Follow._gcc_attribute_in_synpred182_C3088);
			gcc_attribute();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred182_C_fragment", 273);
			LeaveRule("synpred182_C_fragment", 273);
			LeaveRule_synpred182_C_fragment();
		}
	}
	// $ANTLR end synpred182_C

	partial void EnterRule_synpred184_C_fragment();
	partial void LeaveRule_synpred184_C_fragment();

	// $ANTLR start synpred184_C
	public void synpred184_C_fragment()
	{
		EnterRule_synpred184_C_fragment();
		EnterRule("synpred184_C_fragment", 275);
		var retval = new XAstParserRuleReturnScope("synpred184_C_fragment");
		try
		{
			// C.g:539:7: ( gcc_attribute_name )
			DebugEnterAlt(1);
			// C.g:539:7: gcc_attribute_name
			{
			DebugLocation(539, 7);
			PushFollow(Follow._gcc_attribute_name_in_synpred184_C3157);
			gcc_attribute_name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred184_C_fragment", 275);
			LeaveRule("synpred184_C_fragment", 275);
			LeaveRule_synpred184_C_fragment();
		}
	}
	// $ANTLR end synpred184_C

	partial void EnterRule_synpred187_C_fragment();
	partial void LeaveRule_synpred187_C_fragment();

	// $ANTLR start synpred187_C
	public void synpred187_C_fragment()
	{
		EnterRule_synpred187_C_fragment();
		EnterRule("synpred187_C_fragment", 278);
		var retval = new XAstParserRuleReturnScope("synpred187_C_fragment");
		try
		{
			// C.g:544:7: ( IDENTIFIER )
			DebugEnterAlt(1);
			// C.g:544:7: IDENTIFIER
			{
			DebugLocation(544, 7);
			new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred187_C3198), "IDENTIFIER"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred187_C_fragment", 278);
			LeaveRule("synpred187_C_fragment", 278);
			LeaveRule_synpred187_C_fragment();
		}
	}
	// $ANTLR end synpred187_C

	partial void EnterRule_synpred189_C_fragment();
	partial void LeaveRule_synpred189_C_fragment();

	// $ANTLR start synpred189_C
	public void synpred189_C_fragment()
	{
		EnterRule_synpred189_C_fragment();
		EnterRule("synpred189_C_fragment", 280);
		var retval = new XAstParserRuleReturnScope("synpred189_C_fragment");
		try
		{
			// C.g:546:7: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:546:7: type_specifier
			{
			DebugLocation(546, 7);
			PushFollow(Follow._type_specifier_in_synpred189_C3214);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred189_C_fragment", 280);
			LeaveRule("synpred189_C_fragment", 280);
			LeaveRule_synpred189_C_fragment();
		}
	}
	// $ANTLR end synpred189_C

	partial void EnterRule_synpred205_C_fragment();
	partial void LeaveRule_synpred205_C_fragment();

	// $ANTLR start synpred205_C
	public void synpred205_C_fragment()
	{
		EnterRule_synpred205_C_fragment();
		EnterRule("synpred205_C_fragment", 296);
		var retval = new XAstParserRuleReturnScope("synpred205_C_fragment");
		try
		{
			// C.g:592:22: ( type_name )
			DebugEnterAlt(1);
			// C.g:592:22: type_name
			{
			DebugLocation(592, 22);
			PushFollow(Follow._type_name_in_synpred205_C3864);
			type_name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred205_C_fragment", 296);
			LeaveRule("synpred205_C_fragment", 296);
			LeaveRule_synpred205_C_fragment();
		}
	}
	// $ANTLR end synpred205_C
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA37 dfa37;
	private DFA40 dfa40;
	private DFA39 dfa39;
	private DFA62 dfa62;
	private DFA66 dfa66;
	private DFA71 dfa71;
	private DFA73 dfa73;
	private DFA85 dfa85;
	private DFA97 dfa97;
	private DFA112 dfa112;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa37 = new DFA37( this, SpecialStateTransition37 );
		dfa40 = new DFA40( this, SpecialStateTransition40 );
		dfa39 = new DFA39( this, SpecialStateTransition39 );
		dfa62 = new DFA62( this, SpecialStateTransition62 );
		dfa66 = new DFA66( this, SpecialStateTransition66 );
		dfa71 = new DFA71( this, SpecialStateTransition71 );
		dfa73 = new DFA73( this, SpecialStateTransition73 );
		dfa85 = new DFA85( this, SpecialStateTransition85 );
		dfa97 = new DFA97( this, SpecialStateTransition97 );
		dfa112 = new DFA112( this, SpecialStateTransition112 );
	}

	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\x4A\xFFFF";
		private const string DFA37_eofS =
			"\x1\x1\x49\xFFFF";
		private const string DFA37_minS =
			"\x1\xD\x1C\xFFFF\x1\xD\x1\x4\x2\x0\x1\xFFFF\x1\x0\x2\xFFFF\x11\x0\x2"+
			"\xFFFF\x11\x0\x1\xFFFF";
		private const string DFA37_maxS =
			"\x1\x6F\x1C\xFFFF\x1\x6D\x1\x74\x2\x0\x1\xFFFF\x1\x0\x2\xFFFF\x11\x0"+
			"\x2\xFFFF\x11\x0\x1\xFFFF";
		private const string DFA37_acceptS =
			"\x1\xFFFF\x1\x2\x47\xFFFF\x1\x1";
		private const string DFA37_specialS =
			"\x1F\xFFFF\x1\x0\x1\x1\x1\xFFFF\x1\x2\x2\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6"+
			"\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x2\xFFFF\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1"+
			"\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1"+
			"\x24\x1\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x1\x1\x10\xFFFF\x1\x1D\x2\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF"+
				"\x1\x1\x6\xFFFF\x1\x1E\x4\xFFFF\x2\x1\x2\xFFFF\x9\x1\x2\xFFFF\x2\x1"+
				"\x3\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3\xFFFF\x5\x1\x1\xFFFF\x2\x1\x1\xFFFF"+
				"\x2\x1\x1\xFFFF\x6\x1\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x22\x10\xFFFF\x1\x1\x1\x1F\x1\x1\x1A\xFFFF\x1\x1\x5\xFFFF\x1\x20"+
				"\x2\xFFFF\x1\x33\x1\x32\x1\x34\x2\x33\x2\x32\x1\xFFFF\x1\x25\x2\xFFFF"+
				"\x1\x27\x1\x32\x3\xFFFF\x1\x2C\x1\xFFFF\x1\x30\x1\x25\x1\x2B\x3\xFFFF"+
				"\x1\x33\x1\x29\x1\x2A\x1\x25\x1\x32\x1\xFFFF\x1\x28\x1\x2D\x1\xFFFF"+
				"\x1\x25\x1\x2F\x2\xFFFF\x1\x31\x1\x2F\x1\x2E\x1\x26\x1\x32",
				"\x1\x3D\x1\xFFFF\x1\x3C\x2\xFFFF\x1\x3F\x1\xFFFF\x1\x3A\x1\xFFFF\x1"+
				"\x39\x4\xFFFF\x1\x3B\x1\xFFFF\x1\x3E\x2\xFFFF\x1\x48\x4\xFFFF\x1\x48"+
				"\x1\xFFFF\x1\x38\x1\xFFFF\x1\x44\x1\xFFFF\x1\x48\x1\x42\x2\xFFFF\x1"+
				"\x48\x1\x43\x14\xFFFF\x1\x35\x2\xFFFF\x1\x46\x1\xFFFF\x1\x1\x1\x41\x1"+
				"\x40\x1\xFFFF\x1\x1\x1\x47\x2\xFFFF\x2\x1\x5\xFFFF\x1\x1\xF\xFFFF\x1"+
				"\x1\x3\xFFFF\x1\x45\x8\xFFFF\x1\x1\x6\xFFFF\x1\x48",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "()* loopback of 230:9: ( declarator_suffix )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition37(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA37_31 = input.LA(1);


				int index37_31 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_31);
				if (s >= 0) return s;
				break;

			case 1:
				int LA37_32 = input.LA(1);


				int index37_32 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_32);
				if (s >= 0) return s;
				break;

			case 2:
				int LA37_34 = input.LA(1);


				int index37_34 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_34);
				if (s >= 0) return s;
				break;

			case 3:
				int LA37_37 = input.LA(1);


				int index37_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_37);
				if (s >= 0) return s;
				break;

			case 4:
				int LA37_38 = input.LA(1);


				int index37_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_38);
				if (s >= 0) return s;
				break;

			case 5:
				int LA37_39 = input.LA(1);


				int index37_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_39);
				if (s >= 0) return s;
				break;

			case 6:
				int LA37_40 = input.LA(1);


				int index37_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_40);
				if (s >= 0) return s;
				break;

			case 7:
				int LA37_41 = input.LA(1);


				int index37_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_41);
				if (s >= 0) return s;
				break;

			case 8:
				int LA37_42 = input.LA(1);


				int index37_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_42);
				if (s >= 0) return s;
				break;

			case 9:
				int LA37_43 = input.LA(1);


				int index37_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_43);
				if (s >= 0) return s;
				break;

			case 10:
				int LA37_44 = input.LA(1);


				int index37_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_44);
				if (s >= 0) return s;
				break;

			case 11:
				int LA37_45 = input.LA(1);


				int index37_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_45);
				if (s >= 0) return s;
				break;

			case 12:
				int LA37_46 = input.LA(1);


				int index37_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_46);
				if (s >= 0) return s;
				break;

			case 13:
				int LA37_47 = input.LA(1);


				int index37_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_47);
				if (s >= 0) return s;
				break;

			case 14:
				int LA37_48 = input.LA(1);


				int index37_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_48);
				if (s >= 0) return s;
				break;

			case 15:
				int LA37_49 = input.LA(1);


				int index37_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_49);
				if (s >= 0) return s;
				break;

			case 16:
				int LA37_50 = input.LA(1);


				int index37_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_50);
				if (s >= 0) return s;
				break;

			case 17:
				int LA37_51 = input.LA(1);


				int index37_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_51);
				if (s >= 0) return s;
				break;

			case 18:
				int LA37_52 = input.LA(1);


				int index37_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_52);
				if (s >= 0) return s;
				break;

			case 19:
				int LA37_53 = input.LA(1);


				int index37_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_53);
				if (s >= 0) return s;
				break;

			case 20:
				int LA37_56 = input.LA(1);


				int index37_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_56);
				if (s >= 0) return s;
				break;

			case 21:
				int LA37_57 = input.LA(1);


				int index37_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_57);
				if (s >= 0) return s;
				break;

			case 22:
				int LA37_58 = input.LA(1);


				int index37_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_58);
				if (s >= 0) return s;
				break;

			case 23:
				int LA37_59 = input.LA(1);


				int index37_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_59);
				if (s >= 0) return s;
				break;

			case 24:
				int LA37_60 = input.LA(1);


				int index37_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_60);
				if (s >= 0) return s;
				break;

			case 25:
				int LA37_61 = input.LA(1);


				int index37_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_61);
				if (s >= 0) return s;
				break;

			case 26:
				int LA37_62 = input.LA(1);


				int index37_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_62);
				if (s >= 0) return s;
				break;

			case 27:
				int LA37_63 = input.LA(1);


				int index37_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_63);
				if (s >= 0) return s;
				break;

			case 28:
				int LA37_64 = input.LA(1);


				int index37_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_64);
				if (s >= 0) return s;
				break;

			case 29:
				int LA37_65 = input.LA(1);


				int index37_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_65);
				if (s >= 0) return s;
				break;

			case 30:
				int LA37_66 = input.LA(1);


				int index37_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_66);
				if (s >= 0) return s;
				break;

			case 31:
				int LA37_67 = input.LA(1);


				int index37_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_67);
				if (s >= 0) return s;
				break;

			case 32:
				int LA37_68 = input.LA(1);


				int index37_68 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_68);
				if (s >= 0) return s;
				break;

			case 33:
				int LA37_69 = input.LA(1);


				int index37_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_69);
				if (s >= 0) return s;
				break;

			case 34:
				int LA37_70 = input.LA(1);


				int index37_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_70);
				if (s >= 0) return s;
				break;

			case 35:
				int LA37_71 = input.LA(1);


				int index37_71 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_71);
				if (s >= 0) return s;
				break;

			case 36:
				int LA37_72 = input.LA(1);


				int index37_72 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred65_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_72);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 37, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA40 : DFA
	{
		private const string DFA40_eotS =
			"\x3C\xFFFF";
		private const string DFA40_eofS =
			"\x1\x1\x3B\xFFFF";
		private const string DFA40_minS =
			"\x1\xD\x1B\xFFFF\x1\x0\x1F\xFFFF";
		private const string DFA40_maxS =
			"\x1\x6F\x1B\xFFFF\x1\x0\x1F\xFFFF";
		private const string DFA40_acceptS =
			"\x1\xFFFF\x1\x2\x39\xFFFF\x1\x1";
		private const string DFA40_specialS =
			"\x1C\xFFFF\x1\x0\x1F\xFFFF}>";
		private static readonly string[] DFA40_transitionS =
			{
				"\x1\x1\x10\xFFFF\x2\x1\x1\x1C\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF"+
				"\x1\x1\x6\xFFFF\x1\x1\x5\xFFFF\x1\x1\x2\xFFFF\x7\x1\x1\xFFFF\x1\x1\x2"+
				"\xFFFF\x2\x1\x3\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3\xFFFF\x5\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\x2\x1\x1\xFFFF\x6\x1\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA40_eot = DFA.UnpackEncodedString(DFA40_eotS);
		private static readonly short[] DFA40_eof = DFA.UnpackEncodedString(DFA40_eofS);
		private static readonly char[] DFA40_min = DFA.UnpackEncodedStringToUnsignedChars(DFA40_minS);
		private static readonly char[] DFA40_max = DFA.UnpackEncodedStringToUnsignedChars(DFA40_maxS);
		private static readonly short[] DFA40_accept = DFA.UnpackEncodedString(DFA40_acceptS);
		private static readonly short[] DFA40_special = DFA.UnpackEncodedString(DFA40_specialS);
		private static readonly short[][] DFA40_transition;

		static DFA40()
		{
			int numStates = DFA40_transitionS.Length;
			DFA40_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA40_transition[i] = DFA.UnpackEncodedString(DFA40_transitionS[i]);
			}
		}

		public DFA40( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 40;
			this.eot = DFA40_eot;
			this.eof = DFA40_eof;
			this.min = DFA40_min;
			this.max = DFA40_max;
			this.accept = DFA40_accept;
			this.special = DFA40_special;
			this.transition = DFA40_transition;
		}

		public override string Description { get { return "()+ loopback of 242:7: ( '*' ( type_qualifier | gcc_attribute )* )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition40(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA40_28 = input.LA(1);


				int index40_28 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred72_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index40_28);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 40, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA39 : DFA
	{
		private const string DFA39_eotS =
			"\x3E\xFFFF";
		private const string DFA39_eofS =
			"\x1\x1\x3D\xFFFF";
		private const string DFA39_minS =
			"\x1\xD\x11\xFFFF\x1\x0\x1\xFFFF\x1\x1E\x27\xFFFF\x1\x0\x1\xFFFF";
		private const string DFA39_maxS =
			"\x1\x6F\x11\xFFFF\x1\x0\x1\xFFFF\x1\x1E\x27\xFFFF\x1\x0\x1\xFFFF";
		private const string DFA39_acceptS =
			"\x1\xFFFF\x1\x3\x39\xFFFF\x1\x1\x1\xFFFF\x1\x2";
		private const string DFA39_specialS =
			"\x12\xFFFF\x1\x0\x29\xFFFF\x1\x1\x1\xFFFF}>";
		private static readonly string[] DFA39_transitionS =
			{
				"\x1\x1\x10\xFFFF\x3\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x1\x5\xFFFF\x1\x14\x2\xFFFF\x1\x1\x1\x12\x3\x1\x2\x12\x1"+
				"\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\x12\x3\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3"+
				"\xFFFF\x4\x1\x1\x12\x1\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x5\x1\x1"+
				"\x12\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"\x1\x3C",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
		private static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
		private static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
		private static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
		private static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
		private static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
		private static readonly short[][] DFA39_transition;

		static DFA39()
		{
			int numStates = DFA39_transitionS.Length;
			DFA39_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA39_transition[i] = DFA.UnpackEncodedString(DFA39_transitionS[i]);
			}
		}

		public DFA39( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 39;
			this.eot = DFA39_eot;
			this.eof = DFA39_eof;
			this.min = DFA39_min;
			this.max = DFA39_max;
			this.accept = DFA39_accept;
			this.special = DFA39_special;
			this.transition = DFA39_transition;
		}

		public override string Description { get { return "()* loopback of 242:12: ( type_qualifier | gcc_attribute )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition39(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA39_18 = input.LA(1);


				int index39_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred70_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index39_18);
				if (s >= 0) return s;
				break;

			case 1:
				int LA39_60 = input.LA(1);


				int index39_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred71_C_fragment))) {s = 61;}

				else if ((true)) {s = 1;}


				input.Seek(index39_60);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 39, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA62 : DFA
	{
		private const string DFA62_eotS =
			"\x46\xFFFF";
		private const string DFA62_eofS =
			"\x1\x1\x45\xFFFF";
		private const string DFA62_minS =
			"\x1\x4\x1D\xFFFF\x1\x4\x3\xFFFF\x1\x4\x1\xFFFF\x20\x0\x2\xFFFF";
		private const string DFA62_maxS =
			"\x1\x74\x1D\xFFFF\x1\x74\x3\xFFFF\x1\x74\x1\xFFFF\x20\x0\x2\xFFFF";
		private const string DFA62_acceptS =
			"\x1\xFFFF\x1\x3\x42\xFFFF\x1\x1\x1\x2";
		private const string DFA62_specialS =
			"\x24\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x2\xFFFF}>";
		private static readonly string[] DFA62_transitionS =
			{
				"\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1\xFFFF\x3"+
				"\x1\x1\xFFFF\x1\x1E\x1\x1\x1\xFFFF\x1\x1\x1\x22\x1\x1\x6\xFFFF\x4\x1"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\xFFFF"+
				"\x1\x1\x1\xFFFF\x3\x1\x2\xFFFF\x1\x1\x1D\xFFFF\x1\x1\xB\xFFFF\x1\x1"+
				"\x1\xFFFF\x3\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x29\x1\xFFFF\x1\x28\x2\xFFFF\x1\x2B\x1\xFFFF\x1\x26\x1\xFFFF\x1"+
				"\x25\x4\xFFFF\x1\x27\x1\xFFFF\x1\x2A\x2\xFFFF\x1\x30\x4\xFFFF\x1\x30"+
				"\x1\xFFFF\x1\x24\x1\xFFFF\x1\x30\x1\xFFFF\x1\x30\x1\x2E\x2\xFFFF\x1"+
				"\x30\x1\x2F\x17\xFFFF\x1\x32\x2\xFFFF\x1\x2D\x1\x2C\x2\xFFFF\x1\x33"+
				"\x1D\xFFFF\x1\x31\xF\xFFFF\x1\x30",
				"",
				"",
				"",
				"\x1\x39\x1\xFFFF\x1\x38\x2\xFFFF\x1\x3B\x1\xFFFF\x1\x36\x1\xFFFF\x1"+
				"\x35\x4\xFFFF\x1\x37\x1\xFFFF\x1\x3A\x2\xFFFF\x1\x40\x4\xFFFF\x1\x40"+
				"\x1\xFFFF\x1\x34\x1\xFFFF\x1\x40\x1\xFFFF\x1\x40\x1\x3E\x2\xFFFF\x1"+
				"\x40\x1\x3F\x17\xFFFF\x1\x42\x2\xFFFF\x1\x3D\x1\x3C\x2\xFFFF\x1\x43"+
				"\x1D\xFFFF\x1\x41\xF\xFFFF\x1\x40",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				""
			};

		private static readonly short[] DFA62_eot = DFA.UnpackEncodedString(DFA62_eotS);
		private static readonly short[] DFA62_eof = DFA.UnpackEncodedString(DFA62_eofS);
		private static readonly char[] DFA62_min = DFA.UnpackEncodedStringToUnsignedChars(DFA62_minS);
		private static readonly char[] DFA62_max = DFA.UnpackEncodedStringToUnsignedChars(DFA62_maxS);
		private static readonly short[] DFA62_accept = DFA.UnpackEncodedString(DFA62_acceptS);
		private static readonly short[] DFA62_special = DFA.UnpackEncodedString(DFA62_specialS);
		private static readonly short[][] DFA62_transition;

		static DFA62()
		{
			int numStates = DFA62_transitionS.Length;
			DFA62_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA62_transition[i] = DFA.UnpackEncodedString(DFA62_transitionS[i]);
			}
		}

		public DFA62( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 62;
			this.eot = DFA62_eot;
			this.eof = DFA62_eof;
			this.min = DFA62_min;
			this.max = DFA62_max;
			this.accept = DFA62_accept;
			this.special = DFA62_special;
			this.transition = DFA62_transition;
		}

		public override string Description { get { return "()* loopback of 296:35: ( '+' multiplicative_expression | '-' multiplicative_expression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition62(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA62_36 = input.LA(1);


				int index62_36 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_36);
				if (s >= 0) return s;
				break;

			case 1:
				int LA62_37 = input.LA(1);


				int index62_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_37);
				if (s >= 0) return s;
				break;

			case 2:
				int LA62_38 = input.LA(1);


				int index62_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_38);
				if (s >= 0) return s;
				break;

			case 3:
				int LA62_39 = input.LA(1);


				int index62_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_39);
				if (s >= 0) return s;
				break;

			case 4:
				int LA62_40 = input.LA(1);


				int index62_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_40);
				if (s >= 0) return s;
				break;

			case 5:
				int LA62_41 = input.LA(1);


				int index62_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_41);
				if (s >= 0) return s;
				break;

			case 6:
				int LA62_42 = input.LA(1);


				int index62_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_42);
				if (s >= 0) return s;
				break;

			case 7:
				int LA62_43 = input.LA(1);


				int index62_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_43);
				if (s >= 0) return s;
				break;

			case 8:
				int LA62_44 = input.LA(1);


				int index62_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_44);
				if (s >= 0) return s;
				break;

			case 9:
				int LA62_45 = input.LA(1);


				int index62_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_45);
				if (s >= 0) return s;
				break;

			case 10:
				int LA62_46 = input.LA(1);


				int index62_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_46);
				if (s >= 0) return s;
				break;

			case 11:
				int LA62_47 = input.LA(1);


				int index62_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_47);
				if (s >= 0) return s;
				break;

			case 12:
				int LA62_48 = input.LA(1);


				int index62_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_48);
				if (s >= 0) return s;
				break;

			case 13:
				int LA62_49 = input.LA(1);


				int index62_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_49);
				if (s >= 0) return s;
				break;

			case 14:
				int LA62_50 = input.LA(1);


				int index62_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_50);
				if (s >= 0) return s;
				break;

			case 15:
				int LA62_51 = input.LA(1);


				int index62_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred96_C_fragment))) {s = 68;}

				else if ((true)) {s = 1;}


				input.Seek(index62_51);
				if (s >= 0) return s;
				break;

			case 16:
				int LA62_52 = input.LA(1);


				int index62_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_52);
				if (s >= 0) return s;
				break;

			case 17:
				int LA62_53 = input.LA(1);


				int index62_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_53);
				if (s >= 0) return s;
				break;

			case 18:
				int LA62_54 = input.LA(1);


				int index62_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_54);
				if (s >= 0) return s;
				break;

			case 19:
				int LA62_55 = input.LA(1);


				int index62_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_55);
				if (s >= 0) return s;
				break;

			case 20:
				int LA62_56 = input.LA(1);


				int index62_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_56);
				if (s >= 0) return s;
				break;

			case 21:
				int LA62_57 = input.LA(1);


				int index62_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_57);
				if (s >= 0) return s;
				break;

			case 22:
				int LA62_58 = input.LA(1);


				int index62_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_58);
				if (s >= 0) return s;
				break;

			case 23:
				int LA62_59 = input.LA(1);


				int index62_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_59);
				if (s >= 0) return s;
				break;

			case 24:
				int LA62_60 = input.LA(1);


				int index62_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_60);
				if (s >= 0) return s;
				break;

			case 25:
				int LA62_61 = input.LA(1);


				int index62_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_61);
				if (s >= 0) return s;
				break;

			case 26:
				int LA62_62 = input.LA(1);


				int index62_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_62);
				if (s >= 0) return s;
				break;

			case 27:
				int LA62_63 = input.LA(1);


				int index62_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_63);
				if (s >= 0) return s;
				break;

			case 28:
				int LA62_64 = input.LA(1);


				int index62_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_64);
				if (s >= 0) return s;
				break;

			case 29:
				int LA62_65 = input.LA(1);


				int index62_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_65);
				if (s >= 0) return s;
				break;

			case 30:
				int LA62_66 = input.LA(1);


				int index62_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_66);
				if (s >= 0) return s;
				break;

			case 31:
				int LA62_67 = input.LA(1);


				int index62_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred97_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index62_67);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 62, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA66 : DFA
	{
		private const string DFA66_eotS =
			"\xA0\xFFFF";
		private const string DFA66_eofS =
			"\x1\x1\x20\xFFFF\x1\x5C\x1\x86\x7D\xFFFF";
		private const string DFA66_minS =
			"\x1\x4\x1D\xFFFF\x1\x4\x2\xFFFF\x2\x4\x9\xFFFF\x10\x0\xF\xFFFF\x11\x0"+
			"\x2\xFFFF\x2\x0\x3\xFFFF\x1\x0\x11\xFFFF\x11\x0\x2\xFFFF\x2\x0\x3\xFFFF"+
			"\x1\x0\x12\xFFFF";
		private const string DFA66_maxS =
			"\x1\x74\x1D\xFFFF\x1\x74\x2\xFFFF\x2\x74\x9\xFFFF\x10\x0\xF\xFFFF\x11"+
			"\x0\x2\xFFFF\x2\x0\x3\xFFFF\x1\x0\x11\xFFFF\x11\x0\x2\xFFFF\x2\x0\x3"+
			"\xFFFF\x1\x0\x12\xFFFF";
		private const string DFA66_acceptS =
			"\x1\xFFFF\x1\x8\x26\xFFFF\x1\x1\x1\x4\x1\x5\x1\x2\x30\xFFFF\x1\x6\x29"+
			"\xFFFF\x1\x7\x18\xFFFF\x1\x3";
		private const string DFA66_specialS =
			"\x2C\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\xF\xFFFF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x2\xFFFF\x1\x21\x1\x22\x3\xFFFF\x1\x23\x11"+
			"\xFFFF\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C"+
			"\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x2\xFFFF\x1"+
			"\x35\x1\x36\x3\xFFFF\x1\x37\x12\xFFFF}>";
		private static readonly string[] DFA66_transitionS =
			{
				"\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x7\x1\x1\x1E\x4\x1\x1\x21\x3\x1"+
				"\x1\x22\x1\x1\x1\x2A\x1\x29\x1\xFFFF\xF\x1\x1\x28\x4\x1\x1\xFFFF\x3"+
				"\x1\x2\xFFFF\x1\x1\x1D\xFFFF\x1\x1\xB\xFFFF\x5\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x30\x1\xFFFF\x1\x2F\x2\xFFFF\x1\x32\x1\xFFFF\x1\x2D\x1\xFFFF\x1"+
				"\x2C\x4\xFFFF\x1\x2E\x1\xFFFF\x1\x31\x2\xFFFF\x1\x38\x4\xFFFF\x1\x38"+
				"\x1\xFFFF\x1\x33\x1\x2B\x1\x38\x1\xFFFF\x1\x38\x1\x36\x2\xFFFF\x1\x38"+
				"\x1\x37\x17\xFFFF\x1\x3A\x1\xFFFF\x1\x1\x1\x35\x1\x34\x1\xFFFF\x1\x1"+
				"\x1\x3B\x2\xFFFF\x2\x1\x4\xFFFF\x2\x1\x3\xFFFF\x1\x1\x1\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x1\x4\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\x39"+
				"\x1\xFFFF\x1\x1\x2\xFFFF\x5\x1\x1\xFFFF\x1\x1\x4\xFFFF\x1\x38",
				"",
				"",
				"\x1\x4F\x1\xFFFF\x1\x4E\x2\xFFFF\x1\x51\x1\xFFFF\x1\x4C\x1\xFFFF\x1"+
				"\x4B\x4\xFFFF\x1\x4D\x1\xFFFF\x1\x50\x2\xFFFF\x1\x63\x4\x5C\x1\x5F\x1"+
				"\x5C\x1\x52\x1\x5C\x1\x57\x1\x5C\x1\x5B\x1\x55\x2\x5C\x1\x5E\x1\x56"+
				"\x3\x5C\x1\xFFFF\x13\x5C\x1\x59\x1\xFFFF\x1\x5C\x1\x54\x1\x53\x2\xFFFF"+
				"\x1\x5A\x1D\xFFFF\x1\x58\xB\xFFFF\x4\x5C\x1\x63",
				"\x1\x79\x1\xFFFF\x1\x78\x2\xFFFF\x1\x7B\x1\xFFFF\x1\x76\x1\xFFFF\x1"+
				"\x75\x4\xFFFF\x1\x77\x1\xFFFF\x1\x7A\x2\xFFFF\x1\x8D\x4\x86\x1\x89\x1"+
				"\x86\x1\x7C\x1\x86\x1\x81\x1\x86\x1\x85\x1\x7F\x2\x86\x1\x88\x1\x80"+
				"\x3\x86\x1\xFFFF\x13\x86\x1\x83\x1\xFFFF\x1\x86\x1\x7E\x1\x7D\x2\xFFFF"+
				"\x1\x84\x1D\xFFFF\x1\x82\xB\xFFFF\x4\x86\x1\x8D",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA66_eot = DFA.UnpackEncodedString(DFA66_eotS);
		private static readonly short[] DFA66_eof = DFA.UnpackEncodedString(DFA66_eofS);
		private static readonly char[] DFA66_min = DFA.UnpackEncodedStringToUnsignedChars(DFA66_minS);
		private static readonly char[] DFA66_max = DFA.UnpackEncodedStringToUnsignedChars(DFA66_maxS);
		private static readonly short[] DFA66_accept = DFA.UnpackEncodedString(DFA66_acceptS);
		private static readonly short[] DFA66_special = DFA.UnpackEncodedString(DFA66_specialS);
		private static readonly short[][] DFA66_transition;

		static DFA66()
		{
			int numStates = DFA66_transitionS.Length;
			DFA66_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA66_transition[i] = DFA.UnpackEncodedString(DFA66_transitionS[i]);
			}
		}

		public DFA66( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 66;
			this.eot = DFA66_eot;
			this.eof = DFA66_eof;
			this.min = DFA66_min;
			this.max = DFA66_max;
			this.accept = DFA66_accept;
			this.special = DFA66_special;
			this.transition = DFA66_transition;
		}

		public override string Description { get { return "()* loopback of 323:9: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition66(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA66_44 = input.LA(1);


				int index66_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_44);
				if (s >= 0) return s;
				break;

			case 1:
				int LA66_45 = input.LA(1);


				int index66_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_45);
				if (s >= 0) return s;
				break;

			case 2:
				int LA66_46 = input.LA(1);


				int index66_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_46);
				if (s >= 0) return s;
				break;

			case 3:
				int LA66_47 = input.LA(1);


				int index66_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_47);
				if (s >= 0) return s;
				break;

			case 4:
				int LA66_48 = input.LA(1);


				int index66_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_48);
				if (s >= 0) return s;
				break;

			case 5:
				int LA66_49 = input.LA(1);


				int index66_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_49);
				if (s >= 0) return s;
				break;

			case 6:
				int LA66_50 = input.LA(1);


				int index66_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_50);
				if (s >= 0) return s;
				break;

			case 7:
				int LA66_51 = input.LA(1);


				int index66_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_51);
				if (s >= 0) return s;
				break;

			case 8:
				int LA66_52 = input.LA(1);


				int index66_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_52);
				if (s >= 0) return s;
				break;

			case 9:
				int LA66_53 = input.LA(1);


				int index66_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_53);
				if (s >= 0) return s;
				break;

			case 10:
				int LA66_54 = input.LA(1);


				int index66_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_54);
				if (s >= 0) return s;
				break;

			case 11:
				int LA66_55 = input.LA(1);


				int index66_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_55);
				if (s >= 0) return s;
				break;

			case 12:
				int LA66_56 = input.LA(1);


				int index66_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_56);
				if (s >= 0) return s;
				break;

			case 13:
				int LA66_57 = input.LA(1);


				int index66_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_57);
				if (s >= 0) return s;
				break;

			case 14:
				int LA66_58 = input.LA(1);


				int index66_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_58);
				if (s >= 0) return s;
				break;

			case 15:
				int LA66_59 = input.LA(1);


				int index66_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred112_C_fragment))) {s = 159;}

				else if ((true)) {s = 1;}


				input.Seek(index66_59);
				if (s >= 0) return s;
				break;

			case 16:
				int LA66_75 = input.LA(1);


				int index66_75 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_75);
				if (s >= 0) return s;
				break;

			case 17:
				int LA66_76 = input.LA(1);


				int index66_76 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_76);
				if (s >= 0) return s;
				break;

			case 18:
				int LA66_77 = input.LA(1);


				int index66_77 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_77);
				if (s >= 0) return s;
				break;

			case 19:
				int LA66_78 = input.LA(1);


				int index66_78 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_78);
				if (s >= 0) return s;
				break;

			case 20:
				int LA66_79 = input.LA(1);


				int index66_79 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_79);
				if (s >= 0) return s;
				break;

			case 21:
				int LA66_80 = input.LA(1);


				int index66_80 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_80);
				if (s >= 0) return s;
				break;

			case 22:
				int LA66_81 = input.LA(1);


				int index66_81 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_81);
				if (s >= 0) return s;
				break;

			case 23:
				int LA66_82 = input.LA(1);


				int index66_82 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_82);
				if (s >= 0) return s;
				break;

			case 24:
				int LA66_83 = input.LA(1);


				int index66_83 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_83);
				if (s >= 0) return s;
				break;

			case 25:
				int LA66_84 = input.LA(1);


				int index66_84 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_84);
				if (s >= 0) return s;
				break;

			case 26:
				int LA66_85 = input.LA(1);


				int index66_85 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_85);
				if (s >= 0) return s;
				break;

			case 27:
				int LA66_86 = input.LA(1);


				int index66_86 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_86);
				if (s >= 0) return s;
				break;

			case 28:
				int LA66_87 = input.LA(1);


				int index66_87 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_87);
				if (s >= 0) return s;
				break;

			case 29:
				int LA66_88 = input.LA(1);


				int index66_88 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_88);
				if (s >= 0) return s;
				break;

			case 30:
				int LA66_89 = input.LA(1);


				int index66_89 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_89);
				if (s >= 0) return s;
				break;

			case 31:
				int LA66_90 = input.LA(1);


				int index66_90 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_90);
				if (s >= 0) return s;
				break;

			case 32:
				int LA66_91 = input.LA(1);


				int index66_91 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_91);
				if (s >= 0) return s;
				break;

			case 33:
				int LA66_94 = input.LA(1);


				int index66_94 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_94);
				if (s >= 0) return s;
				break;

			case 34:
				int LA66_95 = input.LA(1);


				int index66_95 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_95);
				if (s >= 0) return s;
				break;

			case 35:
				int LA66_99 = input.LA(1);


				int index66_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred115_C_fragment))) {s = 92;}

				else if ((true)) {s = 1;}


				input.Seek(index66_99);
				if (s >= 0) return s;
				break;

			case 36:
				int LA66_117 = input.LA(1);


				int index66_117 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_117);
				if (s >= 0) return s;
				break;

			case 37:
				int LA66_118 = input.LA(1);


				int index66_118 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_118);
				if (s >= 0) return s;
				break;

			case 38:
				int LA66_119 = input.LA(1);


				int index66_119 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_119);
				if (s >= 0) return s;
				break;

			case 39:
				int LA66_120 = input.LA(1);


				int index66_120 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_120);
				if (s >= 0) return s;
				break;

			case 40:
				int LA66_121 = input.LA(1);


				int index66_121 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_121);
				if (s >= 0) return s;
				break;

			case 41:
				int LA66_122 = input.LA(1);


				int index66_122 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_122);
				if (s >= 0) return s;
				break;

			case 42:
				int LA66_123 = input.LA(1);


				int index66_123 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_123);
				if (s >= 0) return s;
				break;

			case 43:
				int LA66_124 = input.LA(1);


				int index66_124 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_124);
				if (s >= 0) return s;
				break;

			case 44:
				int LA66_125 = input.LA(1);


				int index66_125 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_125);
				if (s >= 0) return s;
				break;

			case 45:
				int LA66_126 = input.LA(1);


				int index66_126 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_126);
				if (s >= 0) return s;
				break;

			case 46:
				int LA66_127 = input.LA(1);


				int index66_127 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_127);
				if (s >= 0) return s;
				break;

			case 47:
				int LA66_128 = input.LA(1);


				int index66_128 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_128);
				if (s >= 0) return s;
				break;

			case 48:
				int LA66_129 = input.LA(1);


				int index66_129 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_129);
				if (s >= 0) return s;
				break;

			case 49:
				int LA66_130 = input.LA(1);


				int index66_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_130);
				if (s >= 0) return s;
				break;

			case 50:
				int LA66_131 = input.LA(1);


				int index66_131 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_131);
				if (s >= 0) return s;
				break;

			case 51:
				int LA66_132 = input.LA(1);


				int index66_132 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_132);
				if (s >= 0) return s;
				break;

			case 52:
				int LA66_133 = input.LA(1);


				int index66_133 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_133);
				if (s >= 0) return s;
				break;

			case 53:
				int LA66_136 = input.LA(1);


				int index66_136 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_136);
				if (s >= 0) return s;
				break;

			case 54:
				int LA66_137 = input.LA(1);


				int index66_137 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_137);
				if (s >= 0) return s;
				break;

			case 55:
				int LA66_141 = input.LA(1);


				int index66_141 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred116_C_fragment))) {s = 134;}

				else if ((true)) {s = 1;}


				input.Seek(index66_141);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 66, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\x1B1\xFFFF";
		private const string DFA71_eofS =
			"\x1\xFFFF\x7\x18\x1A9\xFFFF";
		private const string DFA71_minS =
			"\x9\x4\x2\x1E\x6\x4\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF\x6"+
			"\x0\x23\xFFFF\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF\x11\x0"+
			"\xE\xFFFF\x62\x0";
		private const string DFA71_maxS =
			"\x9\x74\x2\x1E\x6\x74\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF"+
			"\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF\x11"+
			"\x0\xE\xFFFF\x62\x0";
		private const string DFA71_acceptS =
			"\x17\xFFFF\x1\x1\x1\x2\x198\xFFFF";
		private const string DFA71_specialS =
			"\x11\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x23\xFFFF\x1\x6\x1\x7"+
			"\x1\x8\x1\x9\x1\xA\x1\xB\x23\xFFFF\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1"+
			"\x11\x23\xFFFF\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x23\xFFFF\x1"+
			"\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x23\xFFFF\x1\x1E\x1\x1F\x1\x20"+
			"\x1\x21\x1\x22\x1\x23\x23\xFFFF\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1"+
			"\x29\x23\xFFFF\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31"+
			"\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\xE\xFFFF"+
			"\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44"+
			"\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E"+
			"\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58"+
			"\x1\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61\x1\x62"+
			"\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68\x1\x69\x1\x6A\x1\x6B\x1\x6C"+
			"\x1\x6D\x1\x6E\x1\x6F\x1\x70\x1\x71\x1\x72\x1\x73\x1\x74\x1\x75\x1\x76"+
			"\x1\x77\x1\x78\x1\x79\x1\x7A\x1\x7B\x1\x7C\x1\x7D\x1\x7E\x1\x7F\x1\x80"+
			"\x1\x81\x1\x82\x1\x83\x1\x84\x1\x85\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A"+
			"\x1\x8B\x1\x8C\x1\x8D\x1\x8E\x1\x8F\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94"+
			"\x1\x95\x1\x96\x1\x97\x1\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x5\x1\xFFFF\x1\x4\x2\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x6\x2\xFFFF\x1\xD\x4\xFFFF\x1\xD\x1\xFFFF\x1"+
				"\x8\x1\xFFFF\x1\xD\x1\xFFFF\x1\xD\x1\xB\x2\xFFFF\x1\xD\x1\xC\x17\xFFFF"+
				"\x1\xF\x2\xFFFF\x1\xA\x1\x9\x2\xFFFF\x1\x10\x1D\xFFFF\x1\xE\xF\xFFFF"+
				"\x1\xD",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\x12\x2\x18\x1\x17\x1\x18\x1\x15\x1\x17\x2\x18\x1\x16\x1\x17"+
				"\x1\x14\x1\x13\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\x11\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x2\xFFFF"+
				"\x1\x18\x1D\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\x3B\x2\x18\x1\x17\x1\x18\x1\x3E\x1\x17\x2\x18\x1\x3F\x1\x17"+
				"\x1\x3D\x1\x3C\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\x3A\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x2\xFFFF"+
				"\x1\x18\x1D\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\x64\x2\x18\x1\x17\x1\x18\x1\x67\x1\x17\x2\x18\x1\x68\x1\x17"+
				"\x1\x66\x1\x65\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\x63\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x2\xFFFF"+
				"\x1\x18\x1D\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\x8D\x2\x18\x1\x17\x1\x18\x1\x90\x1\x17\x2\x18\x1\x91\x1\x17"+
				"\x1\x8F\x1\x8E\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\x8C\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x2\xFFFF"+
				"\x1\x18\x1D\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\xB6\x2\x18\x1\x17\x1\x18\x1\xB9\x1\x17\x2\x18\x1\xBA\x1\x17"+
				"\x1\xB8\x1\xB7\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\xB5\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x2\xFFFF"+
				"\x1\x18\x1D\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\xDF\x2\x18\x1\x17\x1\x18\x1\xE2\x1\x17\x2\x18\x1\xE3\x1\x17"+
				"\x1\xE1\x1\xE0\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\xDE\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x2\xFFFF"+
				"\x1\x18\x1D\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\x108\x2\x18\x1\x17\x1\x18\x1\x10B\x1\x17\x2\x18\x1\x10C\x1\x17"+
				"\x1\x10A\x1\x109\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17"+
				"\x4\x18\x1\x17\x1\x18\x1\x107\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x2"+
				"\xFFFF\x1\x18\x1D\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x134\x1\xFFFF\x1\x133\x2\xFFFF\x1\x136\x1\xFFFF\x1\x131\x1\xFFFF"+
				"\x1\x130\x4\xFFFF\x1\x132\x1\xFFFF\x1\x135\x2\xFFFF\x1\x13C\x4\xFFFF"+
				"\x1\x13C\x1\xFFFF\x1\x137\x1\xFFFF\x1\x13C\x1\xFFFF\x1\x13C\x1\x13A"+
				"\x2\xFFFF\x1\x13C\x1\x13B\x17\xFFFF\x1\x13E\x1\xFFFF\x1\x18\x1\x139"+
				"\x1\x138\x1\xFFFF\x1\x18\x1\x13F\x2\xFFFF\x2\x18\x4\xFFFF\x2\x18\x3"+
				"\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1\x18\x4\xFFFF\x2\x18\x1\xFFFF"+
				"\x1\x18\x1\xFFFF\x2\x18\x1\x13D\x1\xFFFF\x1\x18\x2\xFFFF\x5\x18\x1\xFFFF"+
				"\x1\x140\x4\xFFFF\x1\x13C",
				"\x1\x14F",
				"\x1\x150",
				"\x1\x155\x1\xFFFF\x1\x154\x2\xFFFF\x1\x157\x1\xFFFF\x1\x152\x1\xFFFF"+
				"\x1\x151\x4\xFFFF\x1\x153\x1\xFFFF\x1\x156\x2\xFFFF\x1\x15D\x4\xFFFF"+
				"\x1\x15D\x1\xFFFF\x1\x158\x1\xFFFF\x1\x15D\x1\xFFFF\x1\x15D\x1\x15B"+
				"\x2\xFFFF\x1\x15D\x1\x15C\x17\xFFFF\x1\x15F\x2\xFFFF\x1\x15A\x1\x159"+
				"\x2\xFFFF\x1\x160\x1D\xFFFF\x1\x15E\xF\xFFFF\x1\x15D",
				"\x1\x165\x1\xFFFF\x1\x164\x2\xFFFF\x1\x167\x1\xFFFF\x1\x162\x1\xFFFF"+
				"\x1\x161\x4\xFFFF\x1\x163\x1\xFFFF\x1\x166\x2\xFFFF\x1\x16D\x4\xFFFF"+
				"\x1\x16D\x1\xFFFF\x1\x168\x1\xFFFF\x1\x16D\x1\xFFFF\x1\x16D\x1\x16B"+
				"\x2\xFFFF\x1\x16D\x1\x16C\x17\xFFFF\x1\x16F\x2\xFFFF\x1\x16A\x1\x169"+
				"\x2\xFFFF\x1\x170\x1D\xFFFF\x1\x16E\xF\xFFFF\x1\x16D",
				"\x1\x176\x1\xFFFF\x1\x175\x2\xFFFF\x1\x178\x1\xFFFF\x1\x173\x1\xFFFF"+
				"\x1\x172\x4\xFFFF\x1\x174\x1\xFFFF\x1\x177\x2\xFFFF\x1\x17D\x4\xFFFF"+
				"\x1\x17D\x1\xFFFF\x1\x171\x1\xFFFF\x1\x17D\x1\xFFFF\x1\x17D\x1\x17B"+
				"\x2\xFFFF\x1\x17D\x1\x17C\x17\xFFFF\x1\x17F\x2\xFFFF\x1\x17A\x1\x179"+
				"\x2\xFFFF\x1\x180\x1D\xFFFF\x1\x17E\xF\xFFFF\x1\x17D",
				"\x1\x186\x1\xFFFF\x1\x185\x2\xFFFF\x1\x188\x1\xFFFF\x1\x183\x1\xFFFF"+
				"\x1\x182\x4\xFFFF\x1\x184\x1\xFFFF\x1\x187\x2\xFFFF\x1\x18D\x4\xFFFF"+
				"\x1\x18D\x1\xFFFF\x1\x181\x1\xFFFF\x1\x18D\x1\xFFFF\x1\x18D\x1\x18B"+
				"\x2\xFFFF\x1\x18D\x1\x18C\x17\xFFFF\x1\x18F\x2\xFFFF\x1\x18A\x1\x189"+
				"\x2\xFFFF\x1\x190\x1D\xFFFF\x1\x18E\xF\xFFFF\x1\x18D",
				"\x1\x196\x1\xFFFF\x1\x195\x2\xFFFF\x1\x198\x1\xFFFF\x1\x193\x1\xFFFF"+
				"\x1\x192\x4\xFFFF\x1\x194\x1\xFFFF\x1\x197\x2\xFFFF\x1\x19D\x4\xFFFF"+
				"\x1\x19D\x1\xFFFF\x1\x191\x1\xFFFF\x1\x19D\x1\xFFFF\x1\x19D\x1\x19B"+
				"\x2\xFFFF\x1\x19D\x1\x19C\x17\xFFFF\x1\x19F\x2\xFFFF\x1\x19A\x1\x199"+
				"\x2\xFFFF\x1\x1A0\x1D\xFFFF\x1\x19E\xF\xFFFF\x1\x19D",
				"\x1\x1A6\x1\xFFFF\x1\x1A5\x2\xFFFF\x1\x1A8\x1\xFFFF\x1\x1A3\x1\xFFFF"+
				"\x1\x1A2\x4\xFFFF\x1\x1A4\x1\xFFFF\x1\x1A7\x2\xFFFF\x1\x1AD\x4\xFFFF"+
				"\x1\x1AD\x1\xFFFF\x1\x1A1\x1\xFFFF\x1\x1AD\x1\xFFFF\x1\x1AD\x1\x1AB"+
				"\x2\xFFFF\x1\x1AD\x1\x1AC\x17\xFFFF\x1\x1AF\x2\xFFFF\x1\x1AA\x1\x1A9"+
				"\x2\xFFFF\x1\x1B0\x1D\xFFFF\x1\x1AE\xF\xFFFF\x1\x1AD",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "394:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition71(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA71_17 = input.LA(1);


				int index71_17 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_17);
				if (s >= 0) return s;
				break;

			case 1:
				int LA71_18 = input.LA(1);


				int index71_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_18);
				if (s >= 0) return s;
				break;

			case 2:
				int LA71_19 = input.LA(1);


				int index71_19 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_19);
				if (s >= 0) return s;
				break;

			case 3:
				int LA71_20 = input.LA(1);


				int index71_20 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_20);
				if (s >= 0) return s;
				break;

			case 4:
				int LA71_21 = input.LA(1);


				int index71_21 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_21);
				if (s >= 0) return s;
				break;

			case 5:
				int LA71_22 = input.LA(1);


				int index71_22 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_22);
				if (s >= 0) return s;
				break;

			case 6:
				int LA71_58 = input.LA(1);


				int index71_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_58);
				if (s >= 0) return s;
				break;

			case 7:
				int LA71_59 = input.LA(1);


				int index71_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_59);
				if (s >= 0) return s;
				break;

			case 8:
				int LA71_60 = input.LA(1);


				int index71_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_60);
				if (s >= 0) return s;
				break;

			case 9:
				int LA71_61 = input.LA(1);


				int index71_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_61);
				if (s >= 0) return s;
				break;

			case 10:
				int LA71_62 = input.LA(1);


				int index71_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_62);
				if (s >= 0) return s;
				break;

			case 11:
				int LA71_63 = input.LA(1);


				int index71_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_63);
				if (s >= 0) return s;
				break;

			case 12:
				int LA71_99 = input.LA(1);


				int index71_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_99);
				if (s >= 0) return s;
				break;

			case 13:
				int LA71_100 = input.LA(1);


				int index71_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_100);
				if (s >= 0) return s;
				break;

			case 14:
				int LA71_101 = input.LA(1);


				int index71_101 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_101);
				if (s >= 0) return s;
				break;

			case 15:
				int LA71_102 = input.LA(1);


				int index71_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_102);
				if (s >= 0) return s;
				break;

			case 16:
				int LA71_103 = input.LA(1);


				int index71_103 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_103);
				if (s >= 0) return s;
				break;

			case 17:
				int LA71_104 = input.LA(1);


				int index71_104 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_104);
				if (s >= 0) return s;
				break;

			case 18:
				int LA71_140 = input.LA(1);


				int index71_140 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_140);
				if (s >= 0) return s;
				break;

			case 19:
				int LA71_141 = input.LA(1);


				int index71_141 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_141);
				if (s >= 0) return s;
				break;

			case 20:
				int LA71_142 = input.LA(1);


				int index71_142 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_142);
				if (s >= 0) return s;
				break;

			case 21:
				int LA71_143 = input.LA(1);


				int index71_143 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_143);
				if (s >= 0) return s;
				break;

			case 22:
				int LA71_144 = input.LA(1);


				int index71_144 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_144);
				if (s >= 0) return s;
				break;

			case 23:
				int LA71_145 = input.LA(1);


				int index71_145 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_145);
				if (s >= 0) return s;
				break;

			case 24:
				int LA71_181 = input.LA(1);


				int index71_181 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_181);
				if (s >= 0) return s;
				break;

			case 25:
				int LA71_182 = input.LA(1);


				int index71_182 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_182);
				if (s >= 0) return s;
				break;

			case 26:
				int LA71_183 = input.LA(1);


				int index71_183 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_183);
				if (s >= 0) return s;
				break;

			case 27:
				int LA71_184 = input.LA(1);


				int index71_184 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_184);
				if (s >= 0) return s;
				break;

			case 28:
				int LA71_185 = input.LA(1);


				int index71_185 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_185);
				if (s >= 0) return s;
				break;

			case 29:
				int LA71_186 = input.LA(1);


				int index71_186 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_186);
				if (s >= 0) return s;
				break;

			case 30:
				int LA71_222 = input.LA(1);


				int index71_222 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_222);
				if (s >= 0) return s;
				break;

			case 31:
				int LA71_223 = input.LA(1);


				int index71_223 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_223);
				if (s >= 0) return s;
				break;

			case 32:
				int LA71_224 = input.LA(1);


				int index71_224 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_224);
				if (s >= 0) return s;
				break;

			case 33:
				int LA71_225 = input.LA(1);


				int index71_225 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_225);
				if (s >= 0) return s;
				break;

			case 34:
				int LA71_226 = input.LA(1);


				int index71_226 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_226);
				if (s >= 0) return s;
				break;

			case 35:
				int LA71_227 = input.LA(1);


				int index71_227 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_227);
				if (s >= 0) return s;
				break;

			case 36:
				int LA71_263 = input.LA(1);


				int index71_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_263);
				if (s >= 0) return s;
				break;

			case 37:
				int LA71_264 = input.LA(1);


				int index71_264 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_264);
				if (s >= 0) return s;
				break;

			case 38:
				int LA71_265 = input.LA(1);


				int index71_265 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_265);
				if (s >= 0) return s;
				break;

			case 39:
				int LA71_266 = input.LA(1);


				int index71_266 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_266);
				if (s >= 0) return s;
				break;

			case 40:
				int LA71_267 = input.LA(1);


				int index71_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_267);
				if (s >= 0) return s;
				break;

			case 41:
				int LA71_268 = input.LA(1);


				int index71_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_268);
				if (s >= 0) return s;
				break;

			case 42:
				int LA71_304 = input.LA(1);


				int index71_304 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_304);
				if (s >= 0) return s;
				break;

			case 43:
				int LA71_305 = input.LA(1);


				int index71_305 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_305);
				if (s >= 0) return s;
				break;

			case 44:
				int LA71_306 = input.LA(1);


				int index71_306 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_306);
				if (s >= 0) return s;
				break;

			case 45:
				int LA71_307 = input.LA(1);


				int index71_307 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_307);
				if (s >= 0) return s;
				break;

			case 46:
				int LA71_308 = input.LA(1);


				int index71_308 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_308);
				if (s >= 0) return s;
				break;

			case 47:
				int LA71_309 = input.LA(1);


				int index71_309 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_309);
				if (s >= 0) return s;
				break;

			case 48:
				int LA71_310 = input.LA(1);


				int index71_310 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_310);
				if (s >= 0) return s;
				break;

			case 49:
				int LA71_311 = input.LA(1);


				int index71_311 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_311);
				if (s >= 0) return s;
				break;

			case 50:
				int LA71_312 = input.LA(1);


				int index71_312 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_312);
				if (s >= 0) return s;
				break;

			case 51:
				int LA71_313 = input.LA(1);


				int index71_313 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_313);
				if (s >= 0) return s;
				break;

			case 52:
				int LA71_314 = input.LA(1);


				int index71_314 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_314);
				if (s >= 0) return s;
				break;

			case 53:
				int LA71_315 = input.LA(1);


				int index71_315 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_315);
				if (s >= 0) return s;
				break;

			case 54:
				int LA71_316 = input.LA(1);


				int index71_316 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_316);
				if (s >= 0) return s;
				break;

			case 55:
				int LA71_317 = input.LA(1);


				int index71_317 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_317);
				if (s >= 0) return s;
				break;

			case 56:
				int LA71_318 = input.LA(1);


				int index71_318 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_318);
				if (s >= 0) return s;
				break;

			case 57:
				int LA71_319 = input.LA(1);


				int index71_319 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_319);
				if (s >= 0) return s;
				break;

			case 58:
				int LA71_320 = input.LA(1);


				int index71_320 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_320);
				if (s >= 0) return s;
				break;

			case 59:
				int LA71_335 = input.LA(1);


				int index71_335 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_335);
				if (s >= 0) return s;
				break;

			case 60:
				int LA71_336 = input.LA(1);


				int index71_336 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_336);
				if (s >= 0) return s;
				break;

			case 61:
				int LA71_337 = input.LA(1);


				int index71_337 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_337);
				if (s >= 0) return s;
				break;

			case 62:
				int LA71_338 = input.LA(1);


				int index71_338 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_338);
				if (s >= 0) return s;
				break;

			case 63:
				int LA71_339 = input.LA(1);


				int index71_339 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_339);
				if (s >= 0) return s;
				break;

			case 64:
				int LA71_340 = input.LA(1);


				int index71_340 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_340);
				if (s >= 0) return s;
				break;

			case 65:
				int LA71_341 = input.LA(1);


				int index71_341 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_341);
				if (s >= 0) return s;
				break;

			case 66:
				int LA71_342 = input.LA(1);


				int index71_342 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_342);
				if (s >= 0) return s;
				break;

			case 67:
				int LA71_343 = input.LA(1);


				int index71_343 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_343);
				if (s >= 0) return s;
				break;

			case 68:
				int LA71_344 = input.LA(1);


				int index71_344 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_344);
				if (s >= 0) return s;
				break;

			case 69:
				int LA71_345 = input.LA(1);


				int index71_345 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_345);
				if (s >= 0) return s;
				break;

			case 70:
				int LA71_346 = input.LA(1);


				int index71_346 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_346);
				if (s >= 0) return s;
				break;

			case 71:
				int LA71_347 = input.LA(1);


				int index71_347 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_347);
				if (s >= 0) return s;
				break;

			case 72:
				int LA71_348 = input.LA(1);


				int index71_348 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_348);
				if (s >= 0) return s;
				break;

			case 73:
				int LA71_349 = input.LA(1);


				int index71_349 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_349);
				if (s >= 0) return s;
				break;

			case 74:
				int LA71_350 = input.LA(1);


				int index71_350 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_350);
				if (s >= 0) return s;
				break;

			case 75:
				int LA71_351 = input.LA(1);


				int index71_351 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_351);
				if (s >= 0) return s;
				break;

			case 76:
				int LA71_352 = input.LA(1);


				int index71_352 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_352);
				if (s >= 0) return s;
				break;

			case 77:
				int LA71_353 = input.LA(1);


				int index71_353 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_353);
				if (s >= 0) return s;
				break;

			case 78:
				int LA71_354 = input.LA(1);


				int index71_354 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_354);
				if (s >= 0) return s;
				break;

			case 79:
				int LA71_355 = input.LA(1);


				int index71_355 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_355);
				if (s >= 0) return s;
				break;

			case 80:
				int LA71_356 = input.LA(1);


				int index71_356 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_356);
				if (s >= 0) return s;
				break;

			case 81:
				int LA71_357 = input.LA(1);


				int index71_357 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_357);
				if (s >= 0) return s;
				break;

			case 82:
				int LA71_358 = input.LA(1);


				int index71_358 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_358);
				if (s >= 0) return s;
				break;

			case 83:
				int LA71_359 = input.LA(1);


				int index71_359 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_359);
				if (s >= 0) return s;
				break;

			case 84:
				int LA71_360 = input.LA(1);


				int index71_360 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_360);
				if (s >= 0) return s;
				break;

			case 85:
				int LA71_361 = input.LA(1);


				int index71_361 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_361);
				if (s >= 0) return s;
				break;

			case 86:
				int LA71_362 = input.LA(1);


				int index71_362 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_362);
				if (s >= 0) return s;
				break;

			case 87:
				int LA71_363 = input.LA(1);


				int index71_363 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_363);
				if (s >= 0) return s;
				break;

			case 88:
				int LA71_364 = input.LA(1);


				int index71_364 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_364);
				if (s >= 0) return s;
				break;

			case 89:
				int LA71_365 = input.LA(1);


				int index71_365 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_365);
				if (s >= 0) return s;
				break;

			case 90:
				int LA71_366 = input.LA(1);


				int index71_366 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_366);
				if (s >= 0) return s;
				break;

			case 91:
				int LA71_367 = input.LA(1);


				int index71_367 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_367);
				if (s >= 0) return s;
				break;

			case 92:
				int LA71_368 = input.LA(1);


				int index71_368 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_368);
				if (s >= 0) return s;
				break;

			case 93:
				int LA71_369 = input.LA(1);


				int index71_369 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_369);
				if (s >= 0) return s;
				break;

			case 94:
				int LA71_370 = input.LA(1);


				int index71_370 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_370);
				if (s >= 0) return s;
				break;

			case 95:
				int LA71_371 = input.LA(1);


				int index71_371 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_371);
				if (s >= 0) return s;
				break;

			case 96:
				int LA71_372 = input.LA(1);


				int index71_372 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_372);
				if (s >= 0) return s;
				break;

			case 97:
				int LA71_373 = input.LA(1);


				int index71_373 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_373);
				if (s >= 0) return s;
				break;

			case 98:
				int LA71_374 = input.LA(1);


				int index71_374 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_374);
				if (s >= 0) return s;
				break;

			case 99:
				int LA71_375 = input.LA(1);


				int index71_375 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_375);
				if (s >= 0) return s;
				break;

			case 100:
				int LA71_376 = input.LA(1);


				int index71_376 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_376);
				if (s >= 0) return s;
				break;

			case 101:
				int LA71_377 = input.LA(1);


				int index71_377 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_377);
				if (s >= 0) return s;
				break;

			case 102:
				int LA71_378 = input.LA(1);


				int index71_378 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_378);
				if (s >= 0) return s;
				break;

			case 103:
				int LA71_379 = input.LA(1);


				int index71_379 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_379);
				if (s >= 0) return s;
				break;

			case 104:
				int LA71_380 = input.LA(1);


				int index71_380 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_380);
				if (s >= 0) return s;
				break;

			case 105:
				int LA71_381 = input.LA(1);


				int index71_381 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_381);
				if (s >= 0) return s;
				break;

			case 106:
				int LA71_382 = input.LA(1);


				int index71_382 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_382);
				if (s >= 0) return s;
				break;

			case 107:
				int LA71_383 = input.LA(1);


				int index71_383 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_383);
				if (s >= 0) return s;
				break;

			case 108:
				int LA71_384 = input.LA(1);


				int index71_384 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_384);
				if (s >= 0) return s;
				break;

			case 109:
				int LA71_385 = input.LA(1);


				int index71_385 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_385);
				if (s >= 0) return s;
				break;

			case 110:
				int LA71_386 = input.LA(1);


				int index71_386 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_386);
				if (s >= 0) return s;
				break;

			case 111:
				int LA71_387 = input.LA(1);


				int index71_387 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_387);
				if (s >= 0) return s;
				break;

			case 112:
				int LA71_388 = input.LA(1);


				int index71_388 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_388);
				if (s >= 0) return s;
				break;

			case 113:
				int LA71_389 = input.LA(1);


				int index71_389 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_389);
				if (s >= 0) return s;
				break;

			case 114:
				int LA71_390 = input.LA(1);


				int index71_390 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_390);
				if (s >= 0) return s;
				break;

			case 115:
				int LA71_391 = input.LA(1);


				int index71_391 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_391);
				if (s >= 0) return s;
				break;

			case 116:
				int LA71_392 = input.LA(1);


				int index71_392 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_392);
				if (s >= 0) return s;
				break;

			case 117:
				int LA71_393 = input.LA(1);


				int index71_393 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_393);
				if (s >= 0) return s;
				break;

			case 118:
				int LA71_394 = input.LA(1);


				int index71_394 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_394);
				if (s >= 0) return s;
				break;

			case 119:
				int LA71_395 = input.LA(1);


				int index71_395 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_395);
				if (s >= 0) return s;
				break;

			case 120:
				int LA71_396 = input.LA(1);


				int index71_396 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_396);
				if (s >= 0) return s;
				break;

			case 121:
				int LA71_397 = input.LA(1);


				int index71_397 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_397);
				if (s >= 0) return s;
				break;

			case 122:
				int LA71_398 = input.LA(1);


				int index71_398 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_398);
				if (s >= 0) return s;
				break;

			case 123:
				int LA71_399 = input.LA(1);


				int index71_399 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_399);
				if (s >= 0) return s;
				break;

			case 124:
				int LA71_400 = input.LA(1);


				int index71_400 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_400);
				if (s >= 0) return s;
				break;

			case 125:
				int LA71_401 = input.LA(1);


				int index71_401 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_401);
				if (s >= 0) return s;
				break;

			case 126:
				int LA71_402 = input.LA(1);


				int index71_402 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_402);
				if (s >= 0) return s;
				break;

			case 127:
				int LA71_403 = input.LA(1);


				int index71_403 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_403);
				if (s >= 0) return s;
				break;

			case 128:
				int LA71_404 = input.LA(1);


				int index71_404 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_404);
				if (s >= 0) return s;
				break;

			case 129:
				int LA71_405 = input.LA(1);


				int index71_405 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_405);
				if (s >= 0) return s;
				break;

			case 130:
				int LA71_406 = input.LA(1);


				int index71_406 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_406);
				if (s >= 0) return s;
				break;

			case 131:
				int LA71_407 = input.LA(1);


				int index71_407 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_407);
				if (s >= 0) return s;
				break;

			case 132:
				int LA71_408 = input.LA(1);


				int index71_408 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_408);
				if (s >= 0) return s;
				break;

			case 133:
				int LA71_409 = input.LA(1);


				int index71_409 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_409);
				if (s >= 0) return s;
				break;

			case 134:
				int LA71_410 = input.LA(1);


				int index71_410 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_410);
				if (s >= 0) return s;
				break;

			case 135:
				int LA71_411 = input.LA(1);


				int index71_411 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_411);
				if (s >= 0) return s;
				break;

			case 136:
				int LA71_412 = input.LA(1);


				int index71_412 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_412);
				if (s >= 0) return s;
				break;

			case 137:
				int LA71_413 = input.LA(1);


				int index71_413 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_413);
				if (s >= 0) return s;
				break;

			case 138:
				int LA71_414 = input.LA(1);


				int index71_414 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_414);
				if (s >= 0) return s;
				break;

			case 139:
				int LA71_415 = input.LA(1);


				int index71_415 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_415);
				if (s >= 0) return s;
				break;

			case 140:
				int LA71_416 = input.LA(1);


				int index71_416 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_416);
				if (s >= 0) return s;
				break;

			case 141:
				int LA71_417 = input.LA(1);


				int index71_417 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_417);
				if (s >= 0) return s;
				break;

			case 142:
				int LA71_418 = input.LA(1);


				int index71_418 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_418);
				if (s >= 0) return s;
				break;

			case 143:
				int LA71_419 = input.LA(1);


				int index71_419 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_419);
				if (s >= 0) return s;
				break;

			case 144:
				int LA71_420 = input.LA(1);


				int index71_420 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_420);
				if (s >= 0) return s;
				break;

			case 145:
				int LA71_421 = input.LA(1);


				int index71_421 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_421);
				if (s >= 0) return s;
				break;

			case 146:
				int LA71_422 = input.LA(1);


				int index71_422 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_422);
				if (s >= 0) return s;
				break;

			case 147:
				int LA71_423 = input.LA(1);


				int index71_423 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_423);
				if (s >= 0) return s;
				break;

			case 148:
				int LA71_424 = input.LA(1);


				int index71_424 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_424);
				if (s >= 0) return s;
				break;

			case 149:
				int LA71_425 = input.LA(1);


				int index71_425 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_425);
				if (s >= 0) return s;
				break;

			case 150:
				int LA71_426 = input.LA(1);


				int index71_426 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_426);
				if (s >= 0) return s;
				break;

			case 151:
				int LA71_427 = input.LA(1);


				int index71_427 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_427);
				if (s >= 0) return s;
				break;

			case 152:
				int LA71_428 = input.LA(1);


				int index71_428 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_428);
				if (s >= 0) return s;
				break;

			case 153:
				int LA71_429 = input.LA(1);


				int index71_429 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_429);
				if (s >= 0) return s;
				break;

			case 154:
				int LA71_430 = input.LA(1);


				int index71_430 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_430);
				if (s >= 0) return s;
				break;

			case 155:
				int LA71_431 = input.LA(1);


				int index71_431 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_431);
				if (s >= 0) return s;
				break;

			case 156:
				int LA71_432 = input.LA(1);


				int index71_432 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred133_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index71_432);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 71, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA73 : DFA
	{
		private const string DFA73_eotS =
			"\x1B2\xFFFF";
		private const string DFA73_eofS =
			"\x2\xFFFF\x7\x44\x1A9\xFFFF";
		private const string DFA73_minS =
			"\x9\x4\x2\x1E\x6\x4\x33\x0\x15\xFFFF\x14\x0\x15\xFFFF\x14\x0\x15\xFFFF"+
			"\x14\x0\x15\xFFFF\x14\x0\x15\xFFFF\x14\x0\x15\xFFFF\x14\x0\x15\xFFFF"+
			"\x62\x0\x1\xFFFF";
		private const string DFA73_maxS =
			"\x9\x74\x2\x1E\x6\x74\x33\x0\x15\xFFFF\x14\x0\x15\xFFFF\x14\x0\x15\xFFFF"+
			"\x14\x0\x15\xFFFF\x14\x0\x15\xFFFF\x14\x0\x15\xFFFF\x14\x0\x15\xFFFF"+
			"\x62\x0\x1\xFFFF";
		private const string DFA73_acceptS =
			"\x44\xFFFF\x1\x1\x16C\xFFFF\x1\x2";
		private const string DFA73_specialS =
			"\x11\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x15\xFFFF\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1"+
			"\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1"+
			"\x45\x1\x46\x15\xFFFF\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D"+
			"\x1\x4E\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57"+
			"\x1\x58\x1\x59\x1\x5A\x15\xFFFF\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1"+
			"\x60\x1\x61\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68\x1\x69\x1"+
			"\x6A\x1\x6B\x1\x6C\x1\x6D\x1\x6E\x15\xFFFF\x1\x6F\x1\x70\x1\x71\x1\x72"+
			"\x1\x73\x1\x74\x1\x75\x1\x76\x1\x77\x1\x78\x1\x79\x1\x7A\x1\x7B\x1\x7C"+
			"\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x15\xFFFF\x1\x83\x1\x84\x1"+
			"\x85\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D\x1\x8E\x1"+
			"\x8F\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x15\xFFFF\x1\x97"+
			"\x1\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1\x9E\x1\x9F\x1\xA0\x1\xA1"+
			"\x1\xA2\x1\xA3\x1\xA4\x1\xA5\x1\xA6\x1\xA7\x1\xA8\x1\xA9\x1\xAA\x15\xFFFF"+
			"\x1\xAB\x1\xAC\x1\xAD\x1\xAE\x1\xAF\x1\xB0\x1\xB1\x1\xB2\x1\xB3\x1\xB4"+
			"\x1\xB5\x1\xB6\x1\xB7\x1\xB8\x1\xB9\x1\xBA\x1\xBB\x1\xBC\x1\xBD\x1\xBE"+
			"\x1\xBF\x1\xC0\x1\xC1\x1\xC2\x1\xC3\x1\xC4\x1\xC5\x1\xC6\x1\xC7\x1\xC8"+
			"\x1\xC9\x1\xCA\x1\xCB\x1\xCC\x1\xCD\x1\xCE\x1\xCF\x1\xD0\x1\xD1\x1\xD2"+
			"\x1\xD3\x1\xD4\x1\xD5\x1\xD6\x1\xD7\x1\xD8\x1\xD9\x1\xDA\x1\xDB\x1\xDC"+
			"\x1\xDD\x1\xDE\x1\xDF\x1\xE0\x1\xE1\x1\xE2\x1\xE3\x1\xE4\x1\xE5\x1\xE6"+
			"\x1\xE7\x1\xE8\x1\xE9\x1\xEA\x1\xEB\x1\xEC\x1\xED\x1\xEE\x1\xEF\x1\xF0"+
			"\x1\xF1\x1\xF2\x1\xF3\x1\xF4\x1\xF5\x1\xF6\x1\xF7\x1\xF8\x1\xF9\x1\xFA"+
			"\x1\xFB\x1\xFC\x1\xFD\x1\xFE\x1\xFF\x1\x100\x1\x101\x1\x102\x1\x103\x1"+
			"\x104\x1\x105\x1\x106\x1\x107\x1\x108\x1\x109\x1\x10A\x1\x10B\x1\x10C"+
			"\x1\xFFFF}>";
		private static readonly string[] DFA73_transitionS =
			{
				"\x1\x6\x1\xFFFF\x1\x5\x2\xFFFF\x1\x8\x1\xFFFF\x1\x3\x1\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x4\x1\xFFFF\x1\x7\x2\xFFFF\x1\xD\x4\xFFFF\x1\xD\x1\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\xD\x1\xFFFF\x1\xD\x1\xB\x2\xFFFF\x1\xD\x1\xC\x17\xFFFF"+
				"\x1\xF\x2\xFFFF\x1\xA\x1\x9\x2\xFFFF\x1\x10\x1D\xFFFF\x1\xE\xF\xFFFF"+
				"\x1\xD",
				"\x1\x24\x1\xFFFF\x1\x23\x2\xFFFF\x1\x26\x1\xFFFF\x1\x21\x1\xFFFF\x1"+
				"\x1D\x4\xFFFF\x1\x22\x1\xFFFF\x1\x25\x2\xFFFF\x1\x2C\x4\xFFFF\x1\x2C"+
				"\x1\xFFFF\x1\x27\x1\xFFFF\x1\x2C\x1\xFFFF\x1\x2C\x1\x2A\x2\xFFFF\x1"+
				"\x2C\x1\x2B\x17\xFFFF\x1\x2E\x1\xFFFF\x1\x1F\x1\x29\x1\x28\x1\xFFFF"+
				"\x1\x11\x1\x20\x2\xFFFF\x2\x11\x4\xFFFF\x1\x13\x1\x11\x3\xFFFF\x1\x18"+
				"\x1\xFFFF\x1\x1C\x1\xFFFF\x1\x17\x4\xFFFF\x1\x15\x1\x16\x1\xFFFF\x1"+
				"\x11\x1\xFFFF\x1\x14\x1\x19\x1\x2D\x1\xFFFF\x1\x1B\x2\xFFFF\x1\x1E\x1"+
				"\x1B\x1\x1A\x1\x12\x1\x11\x1\xFFFF\x1\x2F\x4\xFFFF\x1\x2C",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\x3D\x1\x38\x1"+
				"\xFFFF\x1\x41\x1\x3E\x1\xFFFF\x1\x31\x1\x44\x1\x36\x1\xFFFF\x1\x39\x1"+
				"\x34\x1\xFFFF\x1\x44\x1\x3A\x1\x35\x1\xFFFF\x1\x33\x1\x32\x1\xFFFF\x1"+
				"\x37\x1\xFFFF\x2\x44\x1\x3C\x1\x3B\x1\xFFFF\x1\x3C\x1\xFFFF\x1\x3D\x2"+
				"\x3C\x1\x3B\x1\xFFFF\x1\x43\x1\x30\x1\x44\x1\x3F\x1\xFFFF\x1\x44\x1"+
				"\xFFFF\x3\x44\x2\xFFFF\x1\x44\x1D\xFFFF\x1\x44\xB\xFFFF\x1\x40\x1\xFFFF"+
				"\x1\x42\x2\x44",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\x66\x1\x61\x1"+
				"\xFFFF\x1\x6A\x1\x67\x1\xFFFF\x1\x5A\x1\x44\x1\x5F\x1\xFFFF\x1\x62\x1"+
				"\x5D\x1\xFFFF\x1\x44\x1\x63\x1\x5E\x1\xFFFF\x1\x5C\x1\x5B\x1\xFFFF\x1"+
				"\x60\x1\xFFFF\x2\x44\x1\x65\x1\x64\x1\xFFFF\x1\x65\x1\xFFFF\x1\x66\x2"+
				"\x65\x1\x64\x1\xFFFF\x1\x6C\x1\x59\x1\x44\x1\x68\x1\xFFFF\x1\x44\x1"+
				"\xFFFF\x3\x44\x2\xFFFF\x1\x44\x1D\xFFFF\x1\x44\xB\xFFFF\x1\x69\x1\xFFFF"+
				"\x1\x6B\x2\x44",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\x8F\x1\x8A\x1"+
				"\xFFFF\x1\x93\x1\x90\x1\xFFFF\x1\x83\x1\x44\x1\x88\x1\xFFFF\x1\x8B\x1"+
				"\x86\x1\xFFFF\x1\x44\x1\x8C\x1\x87\x1\xFFFF\x1\x85\x1\x84\x1\xFFFF\x1"+
				"\x89\x1\xFFFF\x2\x44\x1\x8E\x1\x8D\x1\xFFFF\x1\x8E\x1\xFFFF\x1\x8F\x2"+
				"\x8E\x1\x8D\x1\xFFFF\x1\x95\x1\x82\x1\x44\x1\x91\x1\xFFFF\x1\x44\x1"+
				"\xFFFF\x3\x44\x2\xFFFF\x1\x44\x1D\xFFFF\x1\x44\xB\xFFFF\x1\x92\x1\xFFFF"+
				"\x1\x94\x2\x44",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xB8\x1\xB3\x1"+
				"\xFFFF\x1\xBC\x1\xB9\x1\xFFFF\x1\xAC\x1\x44\x1\xB1\x1\xFFFF\x1\xB4\x1"+
				"\xAF\x1\xFFFF\x1\x44\x1\xB5\x1\xB0\x1\xFFFF\x1\xAE\x1\xAD\x1\xFFFF\x1"+
				"\xB2\x1\xFFFF\x2\x44\x1\xB7\x1\xB6\x1\xFFFF\x1\xB7\x1\xFFFF\x1\xB8\x2"+
				"\xB7\x1\xB6\x1\xFFFF\x1\xBE\x1\xAB\x1\x44\x1\xBA\x1\xFFFF\x1\x44\x1"+
				"\xFFFF\x3\x44\x2\xFFFF\x1\x44\x1D\xFFFF\x1\x44\xB\xFFFF\x1\xBB\x1\xFFFF"+
				"\x1\xBD\x2\x44",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xE1\x1\xDC\x1"+
				"\xFFFF\x1\xE5\x1\xE2\x1\xFFFF\x1\xD5\x1\x44\x1\xDA\x1\xFFFF\x1\xDD\x1"+
				"\xD8\x1\xFFFF\x1\x44\x1\xDE\x1\xD9\x1\xFFFF\x1\xD7\x1\xD6\x1\xFFFF\x1"+
				"\xDB\x1\xFFFF\x2\x44\x1\xE0\x1\xDF\x1\xFFFF\x1\xE0\x1\xFFFF\x1\xE1\x2"+
				"\xE0\x1\xDF\x1\xFFFF\x1\xE7\x1\xD4\x1\x44\x1\xE3\x1\xFFFF\x1\x44\x1"+
				"\xFFFF\x3\x44\x2\xFFFF\x1\x44\x1D\xFFFF\x1\x44\xB\xFFFF\x1\xE4\x1\xFFFF"+
				"\x1\xE6\x2\x44",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\x10A\x1\x105"+
				"\x1\xFFFF\x1\x10E\x1\x10B\x1\xFFFF\x1\xFE\x1\x44\x1\x103\x1\xFFFF\x1"+
				"\x106\x1\x101\x1\xFFFF\x1\x44\x1\x107\x1\x102\x1\xFFFF\x1\x100\x1\xFF"+
				"\x1\xFFFF\x1\x104\x1\xFFFF\x2\x44\x1\x109\x1\x108\x1\xFFFF\x1\x109\x1"+
				"\xFFFF\x1\x10A\x2\x109\x1\x108\x1\xFFFF\x1\x110\x1\xFD\x1\x44\x1\x10C"+
				"\x1\xFFFF\x1\x44\x1\xFFFF\x3\x44\x2\xFFFF\x1\x44\x1D\xFFFF\x1\x44\xB"+
				"\xFFFF\x1\x10D\x1\xFFFF\x1\x10F\x2\x44",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\x133\x1\x12E"+
				"\x1\xFFFF\x1\x137\x1\x134\x1\xFFFF\x1\x127\x1\x44\x1\x12C\x1\xFFFF\x1"+
				"\x12F\x1\x12A\x1\xFFFF\x1\x44\x1\x130\x1\x12B\x1\xFFFF\x1\x129\x1\x128"+
				"\x1\xFFFF\x1\x12D\x1\xFFFF\x2\x44\x1\x132\x1\x131\x1\xFFFF\x1\x132\x1"+
				"\xFFFF\x1\x133\x2\x132\x1\x131\x1\xFFFF\x1\x139\x1\x126\x1\x44\x1\x135"+
				"\x1\xFFFF\x1\x44\x1\xFFFF\x3\x44\x2\xFFFF\x1\x44\x1D\xFFFF\x1\x44\xB"+
				"\xFFFF\x1\x136\x1\xFFFF\x1\x138\x2\x44",
				"\x1\x14F",
				"\x1\x150",
				"\x1\x155\x1\xFFFF\x1\x154\x2\xFFFF\x1\x157\x1\xFFFF\x1\x152\x1\xFFFF"+
				"\x1\x151\x4\xFFFF\x1\x153\x1\xFFFF\x1\x156\x2\xFFFF\x1\x15D\x4\xFFFF"+
				"\x1\x15D\x1\xFFFF\x1\x158\x1\xFFFF\x1\x15D\x1\xFFFF\x1\x15D\x1\x15B"+
				"\x2\xFFFF\x1\x15D\x1\x15C\x17\xFFFF\x1\x15F\x2\xFFFF\x1\x15A\x1\x159"+
				"\x2\xFFFF\x1\x160\x1D\xFFFF\x1\x15E\xF\xFFFF\x1\x15D",
				"\x1\x165\x1\xFFFF\x1\x164\x2\xFFFF\x1\x167\x1\xFFFF\x1\x162\x1\xFFFF"+
				"\x1\x161\x4\xFFFF\x1\x163\x1\xFFFF\x1\x166\x2\xFFFF\x1\x16D\x4\xFFFF"+
				"\x1\x16D\x1\xFFFF\x1\x168\x1\xFFFF\x1\x16D\x1\xFFFF\x1\x16D\x1\x16B"+
				"\x2\xFFFF\x1\x16D\x1\x16C\x17\xFFFF\x1\x16F\x2\xFFFF\x1\x16A\x1\x169"+
				"\x2\xFFFF\x1\x170\x1D\xFFFF\x1\x16E\xF\xFFFF\x1\x16D",
				"\x1\x176\x1\xFFFF\x1\x175\x2\xFFFF\x1\x178\x1\xFFFF\x1\x173\x1\xFFFF"+
				"\x1\x172\x4\xFFFF\x1\x174\x1\xFFFF\x1\x177\x2\xFFFF\x1\x17D\x4\xFFFF"+
				"\x1\x17D\x1\xFFFF\x1\x171\x1\xFFFF\x1\x17D\x1\xFFFF\x1\x17D\x1\x17B"+
				"\x2\xFFFF\x1\x17D\x1\x17C\x17\xFFFF\x1\x17F\x2\xFFFF\x1\x17A\x1\x179"+
				"\x2\xFFFF\x1\x180\x1D\xFFFF\x1\x17E\xF\xFFFF\x1\x17D",
				"\x1\x186\x1\xFFFF\x1\x185\x2\xFFFF\x1\x188\x1\xFFFF\x1\x183\x1\xFFFF"+
				"\x1\x182\x4\xFFFF\x1\x184\x1\xFFFF\x1\x187\x2\xFFFF\x1\x18D\x4\xFFFF"+
				"\x1\x18D\x1\xFFFF\x1\x181\x1\xFFFF\x1\x18D\x1\xFFFF\x1\x18D\x1\x18B"+
				"\x2\xFFFF\x1\x18D\x1\x18C\x17\xFFFF\x1\x18F\x2\xFFFF\x1\x18A\x1\x189"+
				"\x2\xFFFF\x1\x190\x1D\xFFFF\x1\x18E\xF\xFFFF\x1\x18D",
				"\x1\x196\x1\xFFFF\x1\x195\x2\xFFFF\x1\x198\x1\xFFFF\x1\x193\x1\xFFFF"+
				"\x1\x192\x4\xFFFF\x1\x194\x1\xFFFF\x1\x197\x2\xFFFF\x1\x19D\x4\xFFFF"+
				"\x1\x19D\x1\xFFFF\x1\x191\x1\xFFFF\x1\x19D\x1\xFFFF\x1\x19D\x1\x19B"+
				"\x2\xFFFF\x1\x19D\x1\x19C\x17\xFFFF\x1\x19F\x2\xFFFF\x1\x19A\x1\x199"+
				"\x2\xFFFF\x1\x1A0\x1D\xFFFF\x1\x19E\xF\xFFFF\x1\x19D",
				"\x1\x1A6\x1\xFFFF\x1\x1A5\x2\xFFFF\x1\x1A8\x1\xFFFF\x1\x1A3\x1\xFFFF"+
				"\x1\x1A2\x4\xFFFF\x1\x1A4\x1\xFFFF\x1\x1A7\x2\xFFFF\x1\x1AD\x4\xFFFF"+
				"\x1\x1AD\x1\xFFFF\x1\x1A1\x1\xFFFF\x1\x1AD\x1\xFFFF\x1\x1AD\x1\x1AB"+
				"\x2\xFFFF\x1\x1AD\x1\x1AC\x17\xFFFF\x1\x1AF\x2\xFFFF\x1\x1AA\x1\x1A9"+
				"\x2\xFFFF\x1\x1B0\x1D\xFFFF\x1\x1AE\xF\xFFFF\x1\x1AD",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA73_eot = DFA.UnpackEncodedString(DFA73_eotS);
		private static readonly short[] DFA73_eof = DFA.UnpackEncodedString(DFA73_eofS);
		private static readonly char[] DFA73_min = DFA.UnpackEncodedStringToUnsignedChars(DFA73_minS);
		private static readonly char[] DFA73_max = DFA.UnpackEncodedStringToUnsignedChars(DFA73_maxS);
		private static readonly short[] DFA73_accept = DFA.UnpackEncodedString(DFA73_acceptS);
		private static readonly short[] DFA73_special = DFA.UnpackEncodedString(DFA73_specialS);
		private static readonly short[][] DFA73_transition;

		static DFA73()
		{
			int numStates = DFA73_transitionS.Length;
			DFA73_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA73_transition[i] = DFA.UnpackEncodedString(DFA73_transitionS[i]);
			}
		}

		public DFA73( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 73;
			this.eot = DFA73_eot;
			this.eof = DFA73_eof;
			this.min = DFA73_min;
			this.max = DFA73_max;
			this.accept = DFA73_accept;
			this.special = DFA73_special;
			this.transition = DFA73_transition;
		}

		public override string Description { get { return "417:1: conditional_expression : ( logical_or_expression ( '?' expression ':' conditional_expression )? | logical_or_expression '?' ':' conditional_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition73(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA73_17 = input.LA(1);


				int index73_17 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_17);
				if (s >= 0) return s;
				break;

			case 1:
				int LA73_18 = input.LA(1);


				int index73_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_18);
				if (s >= 0) return s;
				break;

			case 2:
				int LA73_19 = input.LA(1);


				int index73_19 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_19);
				if (s >= 0) return s;
				break;

			case 3:
				int LA73_20 = input.LA(1);


				int index73_20 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_20);
				if (s >= 0) return s;
				break;

			case 4:
				int LA73_21 = input.LA(1);


				int index73_21 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_21);
				if (s >= 0) return s;
				break;

			case 5:
				int LA73_22 = input.LA(1);


				int index73_22 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_22);
				if (s >= 0) return s;
				break;

			case 6:
				int LA73_23 = input.LA(1);


				int index73_23 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_23);
				if (s >= 0) return s;
				break;

			case 7:
				int LA73_24 = input.LA(1);


				int index73_24 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_24);
				if (s >= 0) return s;
				break;

			case 8:
				int LA73_25 = input.LA(1);


				int index73_25 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_25);
				if (s >= 0) return s;
				break;

			case 9:
				int LA73_26 = input.LA(1);


				int index73_26 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_26);
				if (s >= 0) return s;
				break;

			case 10:
				int LA73_27 = input.LA(1);


				int index73_27 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_27);
				if (s >= 0) return s;
				break;

			case 11:
				int LA73_28 = input.LA(1);


				int index73_28 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_28);
				if (s >= 0) return s;
				break;

			case 12:
				int LA73_29 = input.LA(1);


				int index73_29 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_29);
				if (s >= 0) return s;
				break;

			case 13:
				int LA73_30 = input.LA(1);


				int index73_30 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_30);
				if (s >= 0) return s;
				break;

			case 14:
				int LA73_31 = input.LA(1);


				int index73_31 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_31);
				if (s >= 0) return s;
				break;

			case 15:
				int LA73_32 = input.LA(1);


				int index73_32 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_32);
				if (s >= 0) return s;
				break;

			case 16:
				int LA73_33 = input.LA(1);


				int index73_33 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_33);
				if (s >= 0) return s;
				break;

			case 17:
				int LA73_34 = input.LA(1);


				int index73_34 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_34);
				if (s >= 0) return s;
				break;

			case 18:
				int LA73_35 = input.LA(1);


				int index73_35 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_35);
				if (s >= 0) return s;
				break;

			case 19:
				int LA73_36 = input.LA(1);


				int index73_36 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_36);
				if (s >= 0) return s;
				break;

			case 20:
				int LA73_37 = input.LA(1);


				int index73_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_37);
				if (s >= 0) return s;
				break;

			case 21:
				int LA73_38 = input.LA(1);


				int index73_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_38);
				if (s >= 0) return s;
				break;

			case 22:
				int LA73_39 = input.LA(1);


				int index73_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_39);
				if (s >= 0) return s;
				break;

			case 23:
				int LA73_40 = input.LA(1);


				int index73_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_40);
				if (s >= 0) return s;
				break;

			case 24:
				int LA73_41 = input.LA(1);


				int index73_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_41);
				if (s >= 0) return s;
				break;

			case 25:
				int LA73_42 = input.LA(1);


				int index73_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_42);
				if (s >= 0) return s;
				break;

			case 26:
				int LA73_43 = input.LA(1);


				int index73_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_43);
				if (s >= 0) return s;
				break;

			case 27:
				int LA73_44 = input.LA(1);


				int index73_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_44);
				if (s >= 0) return s;
				break;

			case 28:
				int LA73_45 = input.LA(1);


				int index73_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_45);
				if (s >= 0) return s;
				break;

			case 29:
				int LA73_46 = input.LA(1);


				int index73_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_46);
				if (s >= 0) return s;
				break;

			case 30:
				int LA73_47 = input.LA(1);


				int index73_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_47);
				if (s >= 0) return s;
				break;

			case 31:
				int LA73_48 = input.LA(1);


				int index73_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_48);
				if (s >= 0) return s;
				break;

			case 32:
				int LA73_49 = input.LA(1);


				int index73_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_49);
				if (s >= 0) return s;
				break;

			case 33:
				int LA73_50 = input.LA(1);


				int index73_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_50);
				if (s >= 0) return s;
				break;

			case 34:
				int LA73_51 = input.LA(1);


				int index73_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_51);
				if (s >= 0) return s;
				break;

			case 35:
				int LA73_52 = input.LA(1);


				int index73_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_52);
				if (s >= 0) return s;
				break;

			case 36:
				int LA73_53 = input.LA(1);


				int index73_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_53);
				if (s >= 0) return s;
				break;

			case 37:
				int LA73_54 = input.LA(1);


				int index73_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_54);
				if (s >= 0) return s;
				break;

			case 38:
				int LA73_55 = input.LA(1);


				int index73_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_55);
				if (s >= 0) return s;
				break;

			case 39:
				int LA73_56 = input.LA(1);


				int index73_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_56);
				if (s >= 0) return s;
				break;

			case 40:
				int LA73_57 = input.LA(1);


				int index73_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_57);
				if (s >= 0) return s;
				break;

			case 41:
				int LA73_58 = input.LA(1);


				int index73_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_58);
				if (s >= 0) return s;
				break;

			case 42:
				int LA73_59 = input.LA(1);


				int index73_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_59);
				if (s >= 0) return s;
				break;

			case 43:
				int LA73_60 = input.LA(1);


				int index73_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_60);
				if (s >= 0) return s;
				break;

			case 44:
				int LA73_61 = input.LA(1);


				int index73_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_61);
				if (s >= 0) return s;
				break;

			case 45:
				int LA73_62 = input.LA(1);


				int index73_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_62);
				if (s >= 0) return s;
				break;

			case 46:
				int LA73_63 = input.LA(1);


				int index73_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_63);
				if (s >= 0) return s;
				break;

			case 47:
				int LA73_64 = input.LA(1);


				int index73_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_64);
				if (s >= 0) return s;
				break;

			case 48:
				int LA73_65 = input.LA(1);


				int index73_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_65);
				if (s >= 0) return s;
				break;

			case 49:
				int LA73_66 = input.LA(1);


				int index73_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_66);
				if (s >= 0) return s;
				break;

			case 50:
				int LA73_67 = input.LA(1);


				int index73_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_67);
				if (s >= 0) return s;
				break;

			case 51:
				int LA73_89 = input.LA(1);


				int index73_89 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_89);
				if (s >= 0) return s;
				break;

			case 52:
				int LA73_90 = input.LA(1);


				int index73_90 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_90);
				if (s >= 0) return s;
				break;

			case 53:
				int LA73_91 = input.LA(1);


				int index73_91 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_91);
				if (s >= 0) return s;
				break;

			case 54:
				int LA73_92 = input.LA(1);


				int index73_92 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_92);
				if (s >= 0) return s;
				break;

			case 55:
				int LA73_93 = input.LA(1);


				int index73_93 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_93);
				if (s >= 0) return s;
				break;

			case 56:
				int LA73_94 = input.LA(1);


				int index73_94 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_94);
				if (s >= 0) return s;
				break;

			case 57:
				int LA73_95 = input.LA(1);


				int index73_95 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_95);
				if (s >= 0) return s;
				break;

			case 58:
				int LA73_96 = input.LA(1);


				int index73_96 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_96);
				if (s >= 0) return s;
				break;

			case 59:
				int LA73_97 = input.LA(1);


				int index73_97 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_97);
				if (s >= 0) return s;
				break;

			case 60:
				int LA73_98 = input.LA(1);


				int index73_98 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_98);
				if (s >= 0) return s;
				break;

			case 61:
				int LA73_99 = input.LA(1);


				int index73_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_99);
				if (s >= 0) return s;
				break;

			case 62:
				int LA73_100 = input.LA(1);


				int index73_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_100);
				if (s >= 0) return s;
				break;

			case 63:
				int LA73_101 = input.LA(1);


				int index73_101 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_101);
				if (s >= 0) return s;
				break;

			case 64:
				int LA73_102 = input.LA(1);


				int index73_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_102);
				if (s >= 0) return s;
				break;

			case 65:
				int LA73_103 = input.LA(1);


				int index73_103 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_103);
				if (s >= 0) return s;
				break;

			case 66:
				int LA73_104 = input.LA(1);


				int index73_104 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_104);
				if (s >= 0) return s;
				break;

			case 67:
				int LA73_105 = input.LA(1);


				int index73_105 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_105);
				if (s >= 0) return s;
				break;

			case 68:
				int LA73_106 = input.LA(1);


				int index73_106 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_106);
				if (s >= 0) return s;
				break;

			case 69:
				int LA73_107 = input.LA(1);


				int index73_107 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_107);
				if (s >= 0) return s;
				break;

			case 70:
				int LA73_108 = input.LA(1);


				int index73_108 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_108);
				if (s >= 0) return s;
				break;

			case 71:
				int LA73_130 = input.LA(1);


				int index73_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_130);
				if (s >= 0) return s;
				break;

			case 72:
				int LA73_131 = input.LA(1);


				int index73_131 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_131);
				if (s >= 0) return s;
				break;

			case 73:
				int LA73_132 = input.LA(1);


				int index73_132 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_132);
				if (s >= 0) return s;
				break;

			case 74:
				int LA73_133 = input.LA(1);


				int index73_133 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_133);
				if (s >= 0) return s;
				break;

			case 75:
				int LA73_134 = input.LA(1);


				int index73_134 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_134);
				if (s >= 0) return s;
				break;

			case 76:
				int LA73_135 = input.LA(1);


				int index73_135 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_135);
				if (s >= 0) return s;
				break;

			case 77:
				int LA73_136 = input.LA(1);


				int index73_136 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_136);
				if (s >= 0) return s;
				break;

			case 78:
				int LA73_137 = input.LA(1);


				int index73_137 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_137);
				if (s >= 0) return s;
				break;

			case 79:
				int LA73_138 = input.LA(1);


				int index73_138 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_138);
				if (s >= 0) return s;
				break;

			case 80:
				int LA73_139 = input.LA(1);


				int index73_139 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_139);
				if (s >= 0) return s;
				break;

			case 81:
				int LA73_140 = input.LA(1);


				int index73_140 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_140);
				if (s >= 0) return s;
				break;

			case 82:
				int LA73_141 = input.LA(1);


				int index73_141 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_141);
				if (s >= 0) return s;
				break;

			case 83:
				int LA73_142 = input.LA(1);


				int index73_142 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_142);
				if (s >= 0) return s;
				break;

			case 84:
				int LA73_143 = input.LA(1);


				int index73_143 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_143);
				if (s >= 0) return s;
				break;

			case 85:
				int LA73_144 = input.LA(1);


				int index73_144 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_144);
				if (s >= 0) return s;
				break;

			case 86:
				int LA73_145 = input.LA(1);


				int index73_145 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_145);
				if (s >= 0) return s;
				break;

			case 87:
				int LA73_146 = input.LA(1);


				int index73_146 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_146);
				if (s >= 0) return s;
				break;

			case 88:
				int LA73_147 = input.LA(1);


				int index73_147 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_147);
				if (s >= 0) return s;
				break;

			case 89:
				int LA73_148 = input.LA(1);


				int index73_148 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_148);
				if (s >= 0) return s;
				break;

			case 90:
				int LA73_149 = input.LA(1);


				int index73_149 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_149);
				if (s >= 0) return s;
				break;

			case 91:
				int LA73_171 = input.LA(1);


				int index73_171 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_171);
				if (s >= 0) return s;
				break;

			case 92:
				int LA73_172 = input.LA(1);


				int index73_172 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_172);
				if (s >= 0) return s;
				break;

			case 93:
				int LA73_173 = input.LA(1);


				int index73_173 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_173);
				if (s >= 0) return s;
				break;

			case 94:
				int LA73_174 = input.LA(1);


				int index73_174 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_174);
				if (s >= 0) return s;
				break;

			case 95:
				int LA73_175 = input.LA(1);


				int index73_175 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_175);
				if (s >= 0) return s;
				break;

			case 96:
				int LA73_176 = input.LA(1);


				int index73_176 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_176);
				if (s >= 0) return s;
				break;

			case 97:
				int LA73_177 = input.LA(1);


				int index73_177 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_177);
				if (s >= 0) return s;
				break;

			case 98:
				int LA73_178 = input.LA(1);


				int index73_178 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_178);
				if (s >= 0) return s;
				break;

			case 99:
				int LA73_179 = input.LA(1);


				int index73_179 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_179);
				if (s >= 0) return s;
				break;

			case 100:
				int LA73_180 = input.LA(1);


				int index73_180 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_180);
				if (s >= 0) return s;
				break;

			case 101:
				int LA73_181 = input.LA(1);


				int index73_181 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_181);
				if (s >= 0) return s;
				break;

			case 102:
				int LA73_182 = input.LA(1);


				int index73_182 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_182);
				if (s >= 0) return s;
				break;

			case 103:
				int LA73_183 = input.LA(1);


				int index73_183 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_183);
				if (s >= 0) return s;
				break;

			case 104:
				int LA73_184 = input.LA(1);


				int index73_184 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_184);
				if (s >= 0) return s;
				break;

			case 105:
				int LA73_185 = input.LA(1);


				int index73_185 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_185);
				if (s >= 0) return s;
				break;

			case 106:
				int LA73_186 = input.LA(1);


				int index73_186 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_186);
				if (s >= 0) return s;
				break;

			case 107:
				int LA73_187 = input.LA(1);


				int index73_187 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_187);
				if (s >= 0) return s;
				break;

			case 108:
				int LA73_188 = input.LA(1);


				int index73_188 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_188);
				if (s >= 0) return s;
				break;

			case 109:
				int LA73_189 = input.LA(1);


				int index73_189 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_189);
				if (s >= 0) return s;
				break;

			case 110:
				int LA73_190 = input.LA(1);


				int index73_190 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_190);
				if (s >= 0) return s;
				break;

			case 111:
				int LA73_212 = input.LA(1);


				int index73_212 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_212);
				if (s >= 0) return s;
				break;

			case 112:
				int LA73_213 = input.LA(1);


				int index73_213 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_213);
				if (s >= 0) return s;
				break;

			case 113:
				int LA73_214 = input.LA(1);


				int index73_214 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_214);
				if (s >= 0) return s;
				break;

			case 114:
				int LA73_215 = input.LA(1);


				int index73_215 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_215);
				if (s >= 0) return s;
				break;

			case 115:
				int LA73_216 = input.LA(1);


				int index73_216 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_216);
				if (s >= 0) return s;
				break;

			case 116:
				int LA73_217 = input.LA(1);


				int index73_217 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_217);
				if (s >= 0) return s;
				break;

			case 117:
				int LA73_218 = input.LA(1);


				int index73_218 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_218);
				if (s >= 0) return s;
				break;

			case 118:
				int LA73_219 = input.LA(1);


				int index73_219 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_219);
				if (s >= 0) return s;
				break;

			case 119:
				int LA73_220 = input.LA(1);


				int index73_220 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_220);
				if (s >= 0) return s;
				break;

			case 120:
				int LA73_221 = input.LA(1);


				int index73_221 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_221);
				if (s >= 0) return s;
				break;

			case 121:
				int LA73_222 = input.LA(1);


				int index73_222 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_222);
				if (s >= 0) return s;
				break;

			case 122:
				int LA73_223 = input.LA(1);


				int index73_223 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_223);
				if (s >= 0) return s;
				break;

			case 123:
				int LA73_224 = input.LA(1);


				int index73_224 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_224);
				if (s >= 0) return s;
				break;

			case 124:
				int LA73_225 = input.LA(1);


				int index73_225 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_225);
				if (s >= 0) return s;
				break;

			case 125:
				int LA73_226 = input.LA(1);


				int index73_226 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_226);
				if (s >= 0) return s;
				break;

			case 126:
				int LA73_227 = input.LA(1);


				int index73_227 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_227);
				if (s >= 0) return s;
				break;

			case 127:
				int LA73_228 = input.LA(1);


				int index73_228 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_228);
				if (s >= 0) return s;
				break;

			case 128:
				int LA73_229 = input.LA(1);


				int index73_229 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_229);
				if (s >= 0) return s;
				break;

			case 129:
				int LA73_230 = input.LA(1);


				int index73_230 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_230);
				if (s >= 0) return s;
				break;

			case 130:
				int LA73_231 = input.LA(1);


				int index73_231 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_231);
				if (s >= 0) return s;
				break;

			case 131:
				int LA73_253 = input.LA(1);


				int index73_253 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_253);
				if (s >= 0) return s;
				break;

			case 132:
				int LA73_254 = input.LA(1);


				int index73_254 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_254);
				if (s >= 0) return s;
				break;

			case 133:
				int LA73_255 = input.LA(1);


				int index73_255 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_255);
				if (s >= 0) return s;
				break;

			case 134:
				int LA73_256 = input.LA(1);


				int index73_256 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_256);
				if (s >= 0) return s;
				break;

			case 135:
				int LA73_257 = input.LA(1);


				int index73_257 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_257);
				if (s >= 0) return s;
				break;

			case 136:
				int LA73_258 = input.LA(1);


				int index73_258 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_258);
				if (s >= 0) return s;
				break;

			case 137:
				int LA73_259 = input.LA(1);


				int index73_259 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_259);
				if (s >= 0) return s;
				break;

			case 138:
				int LA73_260 = input.LA(1);


				int index73_260 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_260);
				if (s >= 0) return s;
				break;

			case 139:
				int LA73_261 = input.LA(1);


				int index73_261 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_261);
				if (s >= 0) return s;
				break;

			case 140:
				int LA73_262 = input.LA(1);


				int index73_262 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_262);
				if (s >= 0) return s;
				break;

			case 141:
				int LA73_263 = input.LA(1);


				int index73_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_263);
				if (s >= 0) return s;
				break;

			case 142:
				int LA73_264 = input.LA(1);


				int index73_264 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_264);
				if (s >= 0) return s;
				break;

			case 143:
				int LA73_265 = input.LA(1);


				int index73_265 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_265);
				if (s >= 0) return s;
				break;

			case 144:
				int LA73_266 = input.LA(1);


				int index73_266 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_266);
				if (s >= 0) return s;
				break;

			case 145:
				int LA73_267 = input.LA(1);


				int index73_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_267);
				if (s >= 0) return s;
				break;

			case 146:
				int LA73_268 = input.LA(1);


				int index73_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_268);
				if (s >= 0) return s;
				break;

			case 147:
				int LA73_269 = input.LA(1);


				int index73_269 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_269);
				if (s >= 0) return s;
				break;

			case 148:
				int LA73_270 = input.LA(1);


				int index73_270 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_270);
				if (s >= 0) return s;
				break;

			case 149:
				int LA73_271 = input.LA(1);


				int index73_271 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_271);
				if (s >= 0) return s;
				break;

			case 150:
				int LA73_272 = input.LA(1);


				int index73_272 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_272);
				if (s >= 0) return s;
				break;

			case 151:
				int LA73_294 = input.LA(1);


				int index73_294 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_294);
				if (s >= 0) return s;
				break;

			case 152:
				int LA73_295 = input.LA(1);


				int index73_295 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_295);
				if (s >= 0) return s;
				break;

			case 153:
				int LA73_296 = input.LA(1);


				int index73_296 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_296);
				if (s >= 0) return s;
				break;

			case 154:
				int LA73_297 = input.LA(1);


				int index73_297 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_297);
				if (s >= 0) return s;
				break;

			case 155:
				int LA73_298 = input.LA(1);


				int index73_298 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_298);
				if (s >= 0) return s;
				break;

			case 156:
				int LA73_299 = input.LA(1);


				int index73_299 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_299);
				if (s >= 0) return s;
				break;

			case 157:
				int LA73_300 = input.LA(1);


				int index73_300 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_300);
				if (s >= 0) return s;
				break;

			case 158:
				int LA73_301 = input.LA(1);


				int index73_301 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_301);
				if (s >= 0) return s;
				break;

			case 159:
				int LA73_302 = input.LA(1);


				int index73_302 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_302);
				if (s >= 0) return s;
				break;

			case 160:
				int LA73_303 = input.LA(1);


				int index73_303 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_303);
				if (s >= 0) return s;
				break;

			case 161:
				int LA73_304 = input.LA(1);


				int index73_304 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_304);
				if (s >= 0) return s;
				break;

			case 162:
				int LA73_305 = input.LA(1);


				int index73_305 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_305);
				if (s >= 0) return s;
				break;

			case 163:
				int LA73_306 = input.LA(1);


				int index73_306 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_306);
				if (s >= 0) return s;
				break;

			case 164:
				int LA73_307 = input.LA(1);


				int index73_307 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_307);
				if (s >= 0) return s;
				break;

			case 165:
				int LA73_308 = input.LA(1);


				int index73_308 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_308);
				if (s >= 0) return s;
				break;

			case 166:
				int LA73_309 = input.LA(1);


				int index73_309 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_309);
				if (s >= 0) return s;
				break;

			case 167:
				int LA73_310 = input.LA(1);


				int index73_310 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_310);
				if (s >= 0) return s;
				break;

			case 168:
				int LA73_311 = input.LA(1);


				int index73_311 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_311);
				if (s >= 0) return s;
				break;

			case 169:
				int LA73_312 = input.LA(1);


				int index73_312 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_312);
				if (s >= 0) return s;
				break;

			case 170:
				int LA73_313 = input.LA(1);


				int index73_313 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_313);
				if (s >= 0) return s;
				break;

			case 171:
				int LA73_335 = input.LA(1);


				int index73_335 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_335);
				if (s >= 0) return s;
				break;

			case 172:
				int LA73_336 = input.LA(1);


				int index73_336 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_336);
				if (s >= 0) return s;
				break;

			case 173:
				int LA73_337 = input.LA(1);


				int index73_337 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_337);
				if (s >= 0) return s;
				break;

			case 174:
				int LA73_338 = input.LA(1);


				int index73_338 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_338);
				if (s >= 0) return s;
				break;

			case 175:
				int LA73_339 = input.LA(1);


				int index73_339 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_339);
				if (s >= 0) return s;
				break;

			case 176:
				int LA73_340 = input.LA(1);


				int index73_340 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_340);
				if (s >= 0) return s;
				break;

			case 177:
				int LA73_341 = input.LA(1);


				int index73_341 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_341);
				if (s >= 0) return s;
				break;

			case 178:
				int LA73_342 = input.LA(1);


				int index73_342 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_342);
				if (s >= 0) return s;
				break;

			case 179:
				int LA73_343 = input.LA(1);


				int index73_343 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_343);
				if (s >= 0) return s;
				break;

			case 180:
				int LA73_344 = input.LA(1);


				int index73_344 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_344);
				if (s >= 0) return s;
				break;

			case 181:
				int LA73_345 = input.LA(1);


				int index73_345 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_345);
				if (s >= 0) return s;
				break;

			case 182:
				int LA73_346 = input.LA(1);


				int index73_346 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_346);
				if (s >= 0) return s;
				break;

			case 183:
				int LA73_347 = input.LA(1);


				int index73_347 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_347);
				if (s >= 0) return s;
				break;

			case 184:
				int LA73_348 = input.LA(1);


				int index73_348 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_348);
				if (s >= 0) return s;
				break;

			case 185:
				int LA73_349 = input.LA(1);


				int index73_349 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_349);
				if (s >= 0) return s;
				break;

			case 186:
				int LA73_350 = input.LA(1);


				int index73_350 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_350);
				if (s >= 0) return s;
				break;

			case 187:
				int LA73_351 = input.LA(1);


				int index73_351 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_351);
				if (s >= 0) return s;
				break;

			case 188:
				int LA73_352 = input.LA(1);


				int index73_352 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_352);
				if (s >= 0) return s;
				break;

			case 189:
				int LA73_353 = input.LA(1);


				int index73_353 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_353);
				if (s >= 0) return s;
				break;

			case 190:
				int LA73_354 = input.LA(1);


				int index73_354 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_354);
				if (s >= 0) return s;
				break;

			case 191:
				int LA73_355 = input.LA(1);


				int index73_355 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_355);
				if (s >= 0) return s;
				break;

			case 192:
				int LA73_356 = input.LA(1);


				int index73_356 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_356);
				if (s >= 0) return s;
				break;

			case 193:
				int LA73_357 = input.LA(1);


				int index73_357 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_357);
				if (s >= 0) return s;
				break;

			case 194:
				int LA73_358 = input.LA(1);


				int index73_358 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_358);
				if (s >= 0) return s;
				break;

			case 195:
				int LA73_359 = input.LA(1);


				int index73_359 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_359);
				if (s >= 0) return s;
				break;

			case 196:
				int LA73_360 = input.LA(1);


				int index73_360 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_360);
				if (s >= 0) return s;
				break;

			case 197:
				int LA73_361 = input.LA(1);


				int index73_361 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_361);
				if (s >= 0) return s;
				break;

			case 198:
				int LA73_362 = input.LA(1);


				int index73_362 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_362);
				if (s >= 0) return s;
				break;

			case 199:
				int LA73_363 = input.LA(1);


				int index73_363 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_363);
				if (s >= 0) return s;
				break;

			case 200:
				int LA73_364 = input.LA(1);


				int index73_364 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_364);
				if (s >= 0) return s;
				break;

			case 201:
				int LA73_365 = input.LA(1);


				int index73_365 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_365);
				if (s >= 0) return s;
				break;

			case 202:
				int LA73_366 = input.LA(1);


				int index73_366 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_366);
				if (s >= 0) return s;
				break;

			case 203:
				int LA73_367 = input.LA(1);


				int index73_367 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_367);
				if (s >= 0) return s;
				break;

			case 204:
				int LA73_368 = input.LA(1);


				int index73_368 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_368);
				if (s >= 0) return s;
				break;

			case 205:
				int LA73_369 = input.LA(1);


				int index73_369 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_369);
				if (s >= 0) return s;
				break;

			case 206:
				int LA73_370 = input.LA(1);


				int index73_370 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_370);
				if (s >= 0) return s;
				break;

			case 207:
				int LA73_371 = input.LA(1);


				int index73_371 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_371);
				if (s >= 0) return s;
				break;

			case 208:
				int LA73_372 = input.LA(1);


				int index73_372 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_372);
				if (s >= 0) return s;
				break;

			case 209:
				int LA73_373 = input.LA(1);


				int index73_373 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_373);
				if (s >= 0) return s;
				break;

			case 210:
				int LA73_374 = input.LA(1);


				int index73_374 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_374);
				if (s >= 0) return s;
				break;

			case 211:
				int LA73_375 = input.LA(1);


				int index73_375 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_375);
				if (s >= 0) return s;
				break;

			case 212:
				int LA73_376 = input.LA(1);


				int index73_376 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_376);
				if (s >= 0) return s;
				break;

			case 213:
				int LA73_377 = input.LA(1);


				int index73_377 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_377);
				if (s >= 0) return s;
				break;

			case 214:
				int LA73_378 = input.LA(1);


				int index73_378 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_378);
				if (s >= 0) return s;
				break;

			case 215:
				int LA73_379 = input.LA(1);


				int index73_379 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_379);
				if (s >= 0) return s;
				break;

			case 216:
				int LA73_380 = input.LA(1);


				int index73_380 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_380);
				if (s >= 0) return s;
				break;

			case 217:
				int LA73_381 = input.LA(1);


				int index73_381 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_381);
				if (s >= 0) return s;
				break;

			case 218:
				int LA73_382 = input.LA(1);


				int index73_382 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_382);
				if (s >= 0) return s;
				break;

			case 219:
				int LA73_383 = input.LA(1);


				int index73_383 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_383);
				if (s >= 0) return s;
				break;

			case 220:
				int LA73_384 = input.LA(1);


				int index73_384 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_384);
				if (s >= 0) return s;
				break;

			case 221:
				int LA73_385 = input.LA(1);


				int index73_385 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_385);
				if (s >= 0) return s;
				break;

			case 222:
				int LA73_386 = input.LA(1);


				int index73_386 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_386);
				if (s >= 0) return s;
				break;

			case 223:
				int LA73_387 = input.LA(1);


				int index73_387 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_387);
				if (s >= 0) return s;
				break;

			case 224:
				int LA73_388 = input.LA(1);


				int index73_388 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_388);
				if (s >= 0) return s;
				break;

			case 225:
				int LA73_389 = input.LA(1);


				int index73_389 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_389);
				if (s >= 0) return s;
				break;

			case 226:
				int LA73_390 = input.LA(1);


				int index73_390 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_390);
				if (s >= 0) return s;
				break;

			case 227:
				int LA73_391 = input.LA(1);


				int index73_391 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_391);
				if (s >= 0) return s;
				break;

			case 228:
				int LA73_392 = input.LA(1);


				int index73_392 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_392);
				if (s >= 0) return s;
				break;

			case 229:
				int LA73_393 = input.LA(1);


				int index73_393 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_393);
				if (s >= 0) return s;
				break;

			case 230:
				int LA73_394 = input.LA(1);


				int index73_394 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_394);
				if (s >= 0) return s;
				break;

			case 231:
				int LA73_395 = input.LA(1);


				int index73_395 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_395);
				if (s >= 0) return s;
				break;

			case 232:
				int LA73_396 = input.LA(1);


				int index73_396 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_396);
				if (s >= 0) return s;
				break;

			case 233:
				int LA73_397 = input.LA(1);


				int index73_397 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_397);
				if (s >= 0) return s;
				break;

			case 234:
				int LA73_398 = input.LA(1);


				int index73_398 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_398);
				if (s >= 0) return s;
				break;

			case 235:
				int LA73_399 = input.LA(1);


				int index73_399 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_399);
				if (s >= 0) return s;
				break;

			case 236:
				int LA73_400 = input.LA(1);


				int index73_400 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_400);
				if (s >= 0) return s;
				break;

			case 237:
				int LA73_401 = input.LA(1);


				int index73_401 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_401);
				if (s >= 0) return s;
				break;

			case 238:
				int LA73_402 = input.LA(1);


				int index73_402 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_402);
				if (s >= 0) return s;
				break;

			case 239:
				int LA73_403 = input.LA(1);


				int index73_403 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_403);
				if (s >= 0) return s;
				break;

			case 240:
				int LA73_404 = input.LA(1);


				int index73_404 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_404);
				if (s >= 0) return s;
				break;

			case 241:
				int LA73_405 = input.LA(1);


				int index73_405 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_405);
				if (s >= 0) return s;
				break;

			case 242:
				int LA73_406 = input.LA(1);


				int index73_406 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_406);
				if (s >= 0) return s;
				break;

			case 243:
				int LA73_407 = input.LA(1);


				int index73_407 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_407);
				if (s >= 0) return s;
				break;

			case 244:
				int LA73_408 = input.LA(1);


				int index73_408 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_408);
				if (s >= 0) return s;
				break;

			case 245:
				int LA73_409 = input.LA(1);


				int index73_409 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_409);
				if (s >= 0) return s;
				break;

			case 246:
				int LA73_410 = input.LA(1);


				int index73_410 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_410);
				if (s >= 0) return s;
				break;

			case 247:
				int LA73_411 = input.LA(1);


				int index73_411 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_411);
				if (s >= 0) return s;
				break;

			case 248:
				int LA73_412 = input.LA(1);


				int index73_412 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_412);
				if (s >= 0) return s;
				break;

			case 249:
				int LA73_413 = input.LA(1);


				int index73_413 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_413);
				if (s >= 0) return s;
				break;

			case 250:
				int LA73_414 = input.LA(1);


				int index73_414 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_414);
				if (s >= 0) return s;
				break;

			case 251:
				int LA73_415 = input.LA(1);


				int index73_415 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_415);
				if (s >= 0) return s;
				break;

			case 252:
				int LA73_416 = input.LA(1);


				int index73_416 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_416);
				if (s >= 0) return s;
				break;

			case 253:
				int LA73_417 = input.LA(1);


				int index73_417 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_417);
				if (s >= 0) return s;
				break;

			case 254:
				int LA73_418 = input.LA(1);


				int index73_418 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_418);
				if (s >= 0) return s;
				break;

			case 255:
				int LA73_419 = input.LA(1);


				int index73_419 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_419);
				if (s >= 0) return s;
				break;

			case 256:
				int LA73_420 = input.LA(1);


				int index73_420 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_420);
				if (s >= 0) return s;
				break;

			case 257:
				int LA73_421 = input.LA(1);


				int index73_421 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_421);
				if (s >= 0) return s;
				break;

			case 258:
				int LA73_422 = input.LA(1);


				int index73_422 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_422);
				if (s >= 0) return s;
				break;

			case 259:
				int LA73_423 = input.LA(1);


				int index73_423 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_423);
				if (s >= 0) return s;
				break;

			case 260:
				int LA73_424 = input.LA(1);


				int index73_424 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_424);
				if (s >= 0) return s;
				break;

			case 261:
				int LA73_425 = input.LA(1);


				int index73_425 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_425);
				if (s >= 0) return s;
				break;

			case 262:
				int LA73_426 = input.LA(1);


				int index73_426 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_426);
				if (s >= 0) return s;
				break;

			case 263:
				int LA73_427 = input.LA(1);


				int index73_427 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_427);
				if (s >= 0) return s;
				break;

			case 264:
				int LA73_428 = input.LA(1);


				int index73_428 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_428);
				if (s >= 0) return s;
				break;

			case 265:
				int LA73_429 = input.LA(1);


				int index73_429 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_429);
				if (s >= 0) return s;
				break;

			case 266:
				int LA73_430 = input.LA(1);


				int index73_430 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_430);
				if (s >= 0) return s;
				break;

			case 267:
				int LA73_431 = input.LA(1);


				int index73_431 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_431);
				if (s >= 0) return s;
				break;

			case 268:
				int LA73_432 = input.LA(1);


				int index73_432 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred145_C_fragment))) {s = 68;}

				else if ((true)) {s = 433;}


				input.Seek(index73_432);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 73, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA85 : DFA
	{
		private const string DFA85_eotS =
			"\x7D\xFFFF";
		private const string DFA85_eofS =
			"\x7D\xFFFF";
		private const string DFA85_minS =
			"\x2\x4\xD\xFFFF\x1\xD\x21\xFFFF\x3\x0\x11\xFFFF\x1\x0\xE\xFFFF\x1\x0"+
			"\x1\xFFFF\x2\x0\x25\xFFFF";
		private const string DFA85_maxS =
			"\x2\x74\xD\xFFFF\x1\x72\x21\xFFFF\x3\x0\x11\xFFFF\x1\x0\xE\xFFFF\x1\x0"+
			"\x1\xFFFF\x2\x0\x25\xFFFF";
		private const string DFA85_acceptS =
			"\x2\xFFFF\x1\x1\x11\xFFFF\x1\x2\x68\xFFFF";
		private const string DFA85_specialS =
			"\x31\xFFFF\x1\x0\x1\x1\x1\x2\x11\xFFFF\x1\x3\xE\xFFFF\x1\x4\x1\xFFFF"+
			"\x1\x5\x1\x6\x25\xFFFF}>";
		private static readonly string[] DFA85_transitionS =
			{
				"\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x1\xFFFF\x1\x14\x1\xFFFF\x1"+
				"\xF\x4\xFFFF\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x4\xFFFF\x1\x14"+
				"\x1\xFFFF\x1\x14\x1\xFFFF\x1\x14\x1\xFFFF\x2\x14\x2\xFFFF\x2\x14\x7"+
				"\xFFFF\x1\x14\xF\xFFFF\x2\x14\x1\x2\x2\x14\x2\x2\x1\x1\x4\x2\x1\x14"+
				"\x1\x2\x2\x14\x2\x2\x3\x14\x1\x2\x1\xFFFF\x3\x2\x3\x14\x5\x2\x1\x14"+
				"\x2\x2\x1\x14\x2\x2\x1\x14\x6\x2\x2\x14\x4\xFFFF\x1\x14",
				"\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x1\xFFFF\x1\x14\x1\xFFFF\x1"+
				"\x32\x4\xFFFF\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x4\xFFFF\x1\x14"+
				"\x1\xFFFF\x1\x33\x1\xFFFF\x1\x31\x1\xFFFF\x2\x14\x2\xFFFF\x2\x14\x7"+
				"\xFFFF\x1\x2\xF\xFFFF\x1\x14\x1\xFFFF\x1\x2\x2\x14\x2\x2\x1\x45\x4\x2"+
				"\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x5\x2\x1\xFFFF\x2\x2\x1\x14\x2\x2\x1\xFFFF\x6\x2\x6\xFFFF\x1\x14",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2\xA\xFFFF\x6\x14\x1\x56\x1\xFFFF\x1\x54\xA\x14\x1\xFFFF\x3\x14"+
				"\x1\x57\xC\x14\x1\xFFFF\x2\x14\x2\xFFFF\x1\x2\x2\xFFFF\x7\x2\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x3\x2\x3\xFFFF\x5\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x5\x2\x2\xFFFF\x3\x14",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA85_eot = DFA.UnpackEncodedString(DFA85_eotS);
		private static readonly short[] DFA85_eof = DFA.UnpackEncodedString(DFA85_eofS);
		private static readonly char[] DFA85_min = DFA.UnpackEncodedStringToUnsignedChars(DFA85_minS);
		private static readonly char[] DFA85_max = DFA.UnpackEncodedStringToUnsignedChars(DFA85_maxS);
		private static readonly short[] DFA85_accept = DFA.UnpackEncodedString(DFA85_acceptS);
		private static readonly short[] DFA85_special = DFA.UnpackEncodedString(DFA85_specialS);
		private static readonly short[][] DFA85_transition;

		static DFA85()
		{
			int numStates = DFA85_transitionS.Length;
			DFA85_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA85_transition[i] = DFA.UnpackEncodedString(DFA85_transitionS[i]);
			}
		}

		public DFA85( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 85;
			this.eot = DFA85_eot;
			this.eof = DFA85_eof;
			this.min = DFA85_min;
			this.max = DFA85_max;
			this.accept = DFA85_accept;
			this.special = DFA85_special;
			this.transition = DFA85_transition;
		}

		public override string Description { get { return "480:1: block_item : ( declaration | statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition85(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA85_49 = input.LA(1);


				int index85_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred168_C_fragment))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index85_49);
				if (s >= 0) return s;
				break;

			case 1:
				int LA85_50 = input.LA(1);


				int index85_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred168_C_fragment))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index85_50);
				if (s >= 0) return s;
				break;

			case 2:
				int LA85_51 = input.LA(1);


				int index85_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred168_C_fragment))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index85_51);
				if (s >= 0) return s;
				break;

			case 3:
				int LA85_69 = input.LA(1);


				int index85_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred168_C_fragment))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index85_69);
				if (s >= 0) return s;
				break;

			case 4:
				int LA85_84 = input.LA(1);


				int index85_84 = input.Index;
				input.Rewind();
				s = -1;
				if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred168_C_fragment)))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index85_84);
				if (s >= 0) return s;
				break;

			case 5:
				int LA85_86 = input.LA(1);


				int index85_86 = input.Index;
				input.Rewind();
				s = -1;
				if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred168_C_fragment)))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index85_86);
				if (s >= 0) return s;
				break;

			case 6:
				int LA85_87 = input.LA(1);


				int index85_87 = input.Index;
				input.Rewind();
				s = -1;
				if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred168_C_fragment)))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index85_87);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 85, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA97 : DFA
	{
		private const string DFA97_eotS =
			"\x4C\xFFFF";
		private const string DFA97_eofS =
			"\x1\xFFFF\xB\x11\x3\xFFFF\x2\x11\x3B\xFFFF";
		private const string DFA97_minS =
			"\x1\xD\xB\x1E\x2\xD\x3\x1E\x2C\xFFFF\x7\x0\x8\xFFFF";
		private const string DFA97_maxS =
			"\x1\x6D\xB\x25\x2\x6F\x1\x1E\x2\x25\x2C\xFFFF\x7\x0\x8\xFFFF";
		private const string DFA97_acceptS =
			"\x11\xFFFF\x1\x1\x2\xFFFF\x1\x2\x37\xFFFF";
		private const string DFA97_specialS =
			"\x3D\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x8\xFFFF}>";
		private static readonly string[] DFA97_transitionS =
			{
				"\x1\x1\x36\xFFFF\x1\x10\x1\xF\x1\xFFFF\x2\x10\x2\xF\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x4\x1\xF\x3\xFFFF\x1\x9\x1\xFFFF\x1\xD\x1\x2\x1\x8\x3\xFFFF"+
				"\x1\x10\x1\x6\x1\x7\x1\x2\x1\xF\x1\xFFFF\x1\x5\x1\xA\x1\xFFFF\x1\x2"+
				"\x1\xC\x2\xFFFF\x1\xE\x1\xC\x1\xB\x1\x3\x1\xF",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x3E\x33\xFFFF\x1\x3D\x2D\xFFFF\x1\x3F",
				"\x1\x41\x33\xFFFF\x1\x40\x2D\xFFFF\x1\x42",
				"\x1\x43",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA97_eot = DFA.UnpackEncodedString(DFA97_eotS);
		private static readonly short[] DFA97_eof = DFA.UnpackEncodedString(DFA97_eofS);
		private static readonly char[] DFA97_min = DFA.UnpackEncodedStringToUnsignedChars(DFA97_minS);
		private static readonly char[] DFA97_max = DFA.UnpackEncodedStringToUnsignedChars(DFA97_maxS);
		private static readonly short[] DFA97_accept = DFA.UnpackEncodedString(DFA97_acceptS);
		private static readonly short[] DFA97_special = DFA.UnpackEncodedString(DFA97_specialS);
		private static readonly short[][] DFA97_transition;

		static DFA97()
		{
			int numStates = DFA97_transitionS.Length;
			DFA97_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA97_transition[i] = DFA.UnpackEncodedString(DFA97_transitionS[i]);
			}
		}

		public DFA97( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 97;
			this.eot = DFA97_eot;
			this.eof = DFA97_eof;
			this.min = DFA97_min;
			this.max = DFA97_max;
			this.accept = DFA97_accept;
			this.special = DFA97_special;
			this.transition = DFA97_transition;
		}

		public override string Description { get { return "538:1: gcc_attribute_parameter : ( gcc_attribute_name | gcc_attribute_name '(' ( assignment_expression ( ',' assignment_expression )* )? ')' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition97(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA97_61 = input.LA(1);


				int index97_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred184_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index97_61);
				if (s >= 0) return s;
				break;

			case 1:
				int LA97_62 = input.LA(1);


				int index97_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred184_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index97_62);
				if (s >= 0) return s;
				break;

			case 2:
				int LA97_63 = input.LA(1);


				int index97_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred184_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index97_63);
				if (s >= 0) return s;
				break;

			case 3:
				int LA97_64 = input.LA(1);


				int index97_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred184_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index97_64);
				if (s >= 0) return s;
				break;

			case 4:
				int LA97_65 = input.LA(1);


				int index97_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred184_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index97_65);
				if (s >= 0) return s;
				break;

			case 5:
				int LA97_66 = input.LA(1);


				int index97_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred184_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index97_66);
				if (s >= 0) return s;
				break;

			case 6:
				int LA97_67 = input.LA(1);


				int index97_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred184_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index97_67);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 97, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA112 : DFA
	{
		private const string DFA112_eotS =
			"\x66\xFFFF";
		private const string DFA112_eofS =
			"\x66\xFFFF";
		private const string DFA112_minS =
			"\x1\x4\xC\xFFFF\x1\x0\x2\xFFFF\x1\x4\x34\xFFFF\x2\x0\xE\xFFFF\x1\x0\x2"+
			"\xFFFF\x1\x0\xD\xFFFF";
		private const string DFA112_maxS =
			"\x1\x74\xC\xFFFF\x1\x0\x2\xFFFF\x1\x74\x34\xFFFF\x2\x0\xE\xFFFF\x1\x0"+
			"\x2\xFFFF\x1\x0\xD\xFFFF";
		private const string DFA112_acceptS =
			"\x1\xFFFF\x1\x1\xF\xFFFF\x1\x2\x54\xFFFF";
		private const string DFA112_specialS =
			"\xD\xFFFF\x1\x0\x37\xFFFF\x1\x1\x1\x2\xE\xFFFF\x1\x3\x2\xFFFF\x1\x4\xD"+
			"\xFFFF}>";
		private static readonly string[] DFA112_transitionS =
			{
				"\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x1"+
				"\xD\x4\xFFFF\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x4\xFFFF\x1\x11"+
				"\x1\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x2\x11\x2\xFFFF\x2\x11\x17"+
				"\xFFFF\x1\x11\x1\xFFFF\x1\x1\x2\x11\x1\xFFFF\x1\x1\x1\x10\x2\xFFFF\x2"+
				"\x1\x4\xFFFF\x2\x1\x3\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\x11\x1\xFFFF\x1\x1\x2\xFFFF"+
				"\x5\x1\x6\xFFFF\x1\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x1"+
				"\x55\x4\xFFFF\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x4\xFFFF\x1\x11"+
				"\x1\xFFFF\x1\x46\x1\x1\x1\x45\x1\xFFFF\x2\x11\x2\xFFFF\x2\x11\x13\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x11\x1\xFFFF\x1\x1\x2\x11\x1\xFFFF\x1\x1\x1\x58\x2"+
				"\xFFFF\x2\x1\x4\xFFFF\x2\x1\x3\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1"+
				"\x1\x4\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\x11\x1\xFFFF\x1"+
				"\x1\x2\xFFFF\x5\x1\x6\xFFFF\x1\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA112_eot = DFA.UnpackEncodedString(DFA112_eotS);
		private static readonly short[] DFA112_eof = DFA.UnpackEncodedString(DFA112_eofS);
		private static readonly char[] DFA112_min = DFA.UnpackEncodedStringToUnsignedChars(DFA112_minS);
		private static readonly char[] DFA112_max = DFA.UnpackEncodedStringToUnsignedChars(DFA112_maxS);
		private static readonly short[] DFA112_accept = DFA.UnpackEncodedString(DFA112_acceptS);
		private static readonly short[] DFA112_special = DFA.UnpackEncodedString(DFA112_specialS);
		private static readonly short[][] DFA112_transition;

		static DFA112()
		{
			int numStates = DFA112_transitionS.Length;
			DFA112_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA112_transition[i] = DFA.UnpackEncodedString(DFA112_transitionS[i]);
			}
		}

		public DFA112( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 112;
			this.eot = DFA112_eot;
			this.eof = DFA112_eof;
			this.min = DFA112_min;
			this.max = DFA112_max;
			this.accept = DFA112_accept;
			this.special = DFA112_special;
			this.transition = DFA112_transition;
		}

		public override string Description { get { return "592:20: ( type_name | assignment_expression )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition112(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA112_13 = input.LA(1);


				int index112_13 = input.Index;
				input.Rewind();
				s = -1;
				if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred205_C_fragment)))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index112_13);
				if (s >= 0) return s;
				break;

			case 1:
				int LA112_69 = input.LA(1);


				int index112_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred205_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index112_69);
				if (s >= 0) return s;
				break;

			case 2:
				int LA112_70 = input.LA(1);


				int index112_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred205_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index112_70);
				if (s >= 0) return s;
				break;

			case 3:
				int LA112_85 = input.LA(1);


				int index112_85 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred205_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index112_85);
				if (s >= 0) return s;
				break;

			case 4:
				int LA112_88 = input.LA(1);


				int index112_88 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred205_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index112_88);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 112, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _external_declaration_in_translation_unit89 = new BitSet(new ulong[]{0x140002002UL,0x3F6DF1D197F2UL});
		public static readonly BitSet _function_definition_in_external_declaration131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_external_declaration139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_function_definition167 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_function_definition170 = new BitSet(new ulong[]{0x2000UL,0xBF6DF1D197F2UL});
		public static readonly BitSet _declaration_in_function_definition182 = new BitSet(new ulong[]{0x2000UL,0xBF6DF1D197F2UL});
		public static readonly BitSet _compound_statement_in_function_definition185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_function_definition198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_extension_specifier_in_declaration238 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_declaration241 = new BitSet(new ulong[]{0x140002000UL,0x3E6DF1D197F2UL});
		public static readonly BitSet _declaration_specifiers_in_declaration243 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration256 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_declaration267 = new BitSet(new ulong[]{0x800140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration269 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _storage_class_specifier_in_declaration_specifiers295 = new BitSet(new ulong[]{0x2002UL,0x3E6DF1D197F2UL});
		public static readonly BitSet _type_specifier_in_declaration_specifiers309 = new BitSet(new ulong[]{0x2002UL,0x3E6DF1D197F2UL});
		public static readonly BitSet _type_qualifier_in_declaration_specifiers323 = new BitSet(new ulong[]{0x2002UL,0x3E6DF1D197F2UL});
		public static readonly BitSet _gcc_function_specifier_in_declaration_specifiers337 = new BitSet(new ulong[]{0x2002UL,0x3E6DF1D197F2UL});
		public static readonly BitSet _gcc_declaration_specifier_in_declaration_specifiers351 = new BitSet(new ulong[]{0x2002UL,0x3E6DF1D197F2UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list379 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_init_declarator_list382 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list384 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_init_declarator403 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_init_declarator406 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1080100000004CUL});
		public static readonly BitSet _initializer_in_init_declarator408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_type_specifier468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_type_specifier476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_type_specifier484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_specifier492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_type_specifier500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_specifier508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_type_specifier516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_type_specifier524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_type_specifier532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_specifier_in_type_specifier540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_specifier_in_type_specifier548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_id_in_type_specifier556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_typeof_in_type_specifier564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_type_id585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier621 = new BitSet(new ulong[]{0x2000UL,0x800000000002UL});
		public static readonly BitSet _gcc_attribute_list_in_struct_or_union_specifier623 = new BitSet(new ulong[]{0x2000UL,0x800000000000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier626 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_struct_or_union_specifier629 = new BitSet(new ulong[]{0x800000002000UL,0x3E4D61518662UL});
		public static readonly BitSet _struct_declaration_list_in_struct_or_union_specifier631 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_struct_or_union_specifier633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier641 = new BitSet(new ulong[]{0x2000UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_struct_or_union_specifier643 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_declaration_list688 = new BitSet(new ulong[]{0x800000002002UL,0x3E4D61518662UL});
		public static readonly BitSet _specifier_qualifier_list_in_struct_declaration706 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_list_in_struct_declaration708 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_struct_declaration710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_struct_declaration718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_specifier_qualifier_list738 = new BitSet(new ulong[]{0x2002UL,0x3E4D61518662UL});
		public static readonly BitSet _type_specifier_in_specifier_qualifier_list742 = new BitSet(new ulong[]{0x2002UL,0x3E4D61518662UL});
		public static readonly BitSet _gcc_declaration_specifier_in_specifier_qualifier_list746 = new BitSet(new ulong[]{0x2002UL,0x3E4D61518662UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list765 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_struct_declarator_list768 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list770 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_struct_declarator789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_in_struct_declarator797 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_struct_declarator800 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _constant_expression_in_struct_declarator802 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_struct_declarator804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_enum_specifier829 = new BitSet(new ulong[]{0x2000UL,0x800000000002UL});
		public static readonly BitSet _gcc_attribute_list_in_enum_specifier831 = new BitSet(new ulong[]{0x2000UL,0x800000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier834 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_enum_specifier837 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier839 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_enum_specifier841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_enum_specifier849 = new BitSet(new ulong[]{0x2000UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_enum_specifier851 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumerator_in_enumerator_list871 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_enumerator_list874 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_in_enumerator_list876 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _IDENTIFIER_in_enumerator895 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_enumerator898 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _constant_expression_in_enumerator900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator992 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_declarator995 = new BitSet(new ulong[]{0x2UL,0x803UL});
		public static readonly BitSet _gcc_asm_expression_in_declarator997 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_declarator1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator1009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_direct_declarator1030 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _30_in_direct_declarator1056 = new BitSet(new ulong[]{0x140002000UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_direct_declarator1058 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_direct_declarator1061 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_declarator1063 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _declarator_suffix_in_direct_declarator1083 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_declarator_suffix1103 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _constant_expression_in_declarator_suffix1105 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix1107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_declarator_suffix1117 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix1119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix1129 = new BitSet(new ulong[]{0x2000UL,0x3E6DF1D197F2UL});
		public static readonly BitSet _parameter_type_list_in_declarator_suffix1131 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix1133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix1143 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_declarator_suffix1145 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix1147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix1157 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix1159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer1179 = new BitSet(new ulong[]{0x100000002UL,0x200100010622UL});
		public static readonly BitSet _type_qualifier_in_pointer1182 = new BitSet(new ulong[]{0x100000002UL,0x200100010622UL});
		public static readonly BitSet _gcc_attribute_in_pointer1186 = new BitSet(new ulong[]{0x100000002UL,0x200100010622UL});
		public static readonly BitSet _parameter_list_in_parameter_type_list1207 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_type_list1210 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_parameter_type_list1212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list1231 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_list1234 = new BitSet(new ulong[]{0x2000UL,0x3E6DF1D197F2UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list1236 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declaration_specifiers_in_parameter_declaration1255 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _declarator_in_parameter_declaration1258 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _abstract_declarator_in_parameter_declaration1260 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list1279 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_identifier_list1282 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list1284 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _specifier_qualifier_list_in_type_name1303 = new BitSet(new ulong[]{0x800000140000002UL});
		public static readonly BitSet _abstract_declarator_in_type_name1305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_abstract_declarator1323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_abstract_declarator1331 = new BitSet(new ulong[]{0x800000040000000UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator1334 = new BitSet(new ulong[]{0x2UL,0x803UL});
		public static readonly BitSet _gcc_asm_expression_in_abstract_declarator1336 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_abstract_declarator1339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_direct_abstract_declarator1359 = new BitSet(new ulong[]{0x800000140000000UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_direct_abstract_declarator1361 = new BitSet(new ulong[]{0x800000140000000UL});
		public static readonly BitSet _abstract_declarator_in_direct_abstract_declarator1364 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_abstract_declarator1366 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator1370 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator1374 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix1392 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x1020110001066EUL});
		public static readonly BitSet _gcc_array_type_modifier_in_abstract_declarator_suffix1394 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x1020110001066EUL});
		public static readonly BitSet _constant_expression_in_abstract_declarator_suffix1397 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix1400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix1408 = new BitSet(new ulong[]{0x100000000UL,0x200100010622UL});
		public static readonly BitSet _gcc_array_type_modifier_in_abstract_declarator_suffix1410 = new BitSet(new ulong[]{0x100000000UL,0x200100010622UL});
		public static readonly BitSet _32_in_abstract_declarator_suffix1413 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix1415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix1423 = new BitSet(new ulong[]{0x80002000UL,0x3E6DF1D197F2UL});
		public static readonly BitSet _parameter_type_list_in_abstract_declarator_suffix1425 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix1428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_initializer1449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_initializer1457 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1080100000004CUL});
		public static readonly BitSet _initializer_list_in_initializer1459 = new BitSet(new ulong[]{0x2000000000UL,0x8000000000000UL});
		public static readonly BitSet _37_in_initializer1461 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_initializer1464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _initializer_in_initializer_list1481 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_initializer_list1484 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1080100000004CUL});
		public static readonly BitSet _initializer_in_initializer_list1486 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1509 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_argument_expression_list1512 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1514 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1534 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _34_in_additive_expression1538 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1540 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _38_in_additive_expression1544 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1546 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1566 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _32_in_multiplicative_expression1570 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1572 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _44_in_multiplicative_expression1576 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1578 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _25_in_multiplicative_expression1582 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1584 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _30_in_cast_expression1603 = new BitSet(new ulong[]{0x2000UL,0x3E4D61518662UL});
		public static readonly BitSet _type_name_in_cast_expression1605 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_cast_expression1607 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _cast_expression_in_cast_expression1609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_cast_expression1617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfix_expression_in_unary_expression1634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_unary_expression1642 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _unary_expression_in_unary_expression1644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_unary_expression1652 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _unary_expression_in_unary_expression1654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_in_unary_expression1662 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _cast_expression_in_unary_expression1664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_unary_expression1672 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _unary_expression_in_unary_expression1674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_unary_expression1682 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_unary_expression1684 = new BitSet(new ulong[]{0x2000UL,0x3E4D61518662UL});
		public static readonly BitSet _type_name_in_unary_expression1686 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_unary_expression1688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_unary_expression1701 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _unary_expression_in_unary_expression1703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_unary_expression1711 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_unary_expression1713 = new BitSet(new ulong[]{0x2000UL,0x3E4D61518662UL});
		public static readonly BitSet _type_name_in_unary_expression1715 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_unary_expression1717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_extension_specifier_in_unary_expression1725 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _cast_expression_in_unary_expression1727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expression_in_postfix_expression1746 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _59_in_postfix_expression1760 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_postfix_expression1762 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_postfix_expression1764 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1778 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1780 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1794 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _argument_expression_list_in_postfix_expression1796 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1798 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _42_in_postfix_expression1812 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1814 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _41_in_postfix_expression1828 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1830 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _35_in_postfix_expression1844 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _39_in_postfix_expression1858 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _gcc_builtin_va_arg_in_postfix_expression1877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_builtin_offsetof_in_postfix_expression1885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_primary_expression1959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primary_expression1967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_primary_expression1975 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_primary_expression1977 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_primary_expression1979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_statement_expression_in_primary_expression1987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hex_literal_in_constant2006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _octal_literal_in_constant2016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _decimal_literal_in_constant2026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_literal_in_constant2036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_literal_in_constant2046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _floating_point_literal_in_constant2056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEX_LITERAL_in_hex_literal2073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTAL_LITERAL_in_octal_literal2090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_LITERAL_in_decimal_literal2107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_LITERAL_in_character_literal2124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_string_literal2141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOATING_POINT_LITERAL_in_floating_point_literal2158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_expression2177 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_expression2180 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _assignment_expression_in_expression2182 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _conditional_expression_in_constant_expression2201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_assignment_expression2218 = new BitSet(new ulong[]{0x4214211224000000UL,0x2000000000000UL});
		public static readonly BitSet _assignment_operator_in_assignment_expression2220 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _assignment_expression_in_assignment_expression2222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_assignment_expression2230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_lvalue2251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression2365 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_conditional_expression2368 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_conditional_expression2370 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_conditional_expression2372 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _conditional_expression_in_conditional_expression2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression2389 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_conditional_expression2391 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_conditional_expression2393 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _conditional_expression_in_conditional_expression2395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression2412 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _114_in_logical_or_expression2415 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression2417 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression2436 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_logical_and_expression2439 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression2441 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression2460 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_inclusive_or_expression2463 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression2465 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression2484 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_exclusive_or_expression2487 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression2489 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _equality_expression_in_and_expression2508 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _28_in_and_expression2511 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _equality_expression_in_and_expression2513 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _relational_expression_in_equality_expression2531 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _set_in_equality_expression2534 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _relational_expression_in_equality_expression2540 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _shift_expression_in_relational_expression2559 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _set_in_relational_expression2562 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _shift_expression_in_relational_expression2572 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _additive_expression_in_shift_expression2591 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _set_in_shift_expression2594 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _additive_expression_in_shift_expression2600 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _labeled_statement_in_statement2621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_statement2629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_statement_in_statement2637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_statement_in_statement2645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iteration_statement_in_statement2653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _jump_statement_in_statement2661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_asm_statement_in_statement2669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_labeled_statement2686 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement2688 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E684DUL});
		public static readonly BitSet _statement_in_labeled_statement2690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_labeled_statement2698 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _constant_expression_in_labeled_statement2700 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement2702 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E684DUL});
		public static readonly BitSet _statement_in_labeled_statement2704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_labeled_statement2712 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement2714 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E684DUL});
		public static readonly BitSet _statement_in_labeled_statement2716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_compound_statement2744 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x18FFFFFFDFFFFFUL});
		public static readonly BitSet _block_item_in_compound_statement2746 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x18FFFFFFDFFFFFUL});
		public static readonly BitSet _115_in_compound_statement2749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_block_item2766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_block_item2770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_expression_statement2787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_statement2795 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_expression_statement2797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_selection_statement2814 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement2816 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_selection_statement2818 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement2820 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E684DUL});
		public static readonly BitSet _statement_in_selection_statement2822 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_selection_statement2837 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E684DUL});
		public static readonly BitSet _statement_in_selection_statement2839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_selection_statement2849 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement2851 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_selection_statement2853 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement2855 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E684DUL});
		public static readonly BitSet _statement_in_selection_statement2857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_iteration_statement2874 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2876 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_iteration_statement2878 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2880 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E684DUL});
		public static readonly BitSet _statement_in_iteration_statement2882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_iteration_statement2890 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E684DUL});
		public static readonly BitSet _statement_in_iteration_statement2892 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_iteration_statement2894 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2896 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_iteration_statement2898 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2900 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_iteration_statement2902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_iteration_statement2910 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2912 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_statement_in_iteration_statement2914 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_statement_in_iteration_statement2916 = new BitSet(new ulong[]{0x800000CDD0942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_iteration_statement2918 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2921 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E684DUL});
		public static readonly BitSet _statement_in_iteration_statement2923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_jump_statement2940 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_jump_statement2942 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_jump_statement2952 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_jump_statement2962 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_jump_statement2972 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_jump_statement2982 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_jump_statement2984 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_gcc_extension_specifier3046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_gcc_declaration_specifier3063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_extension_specifier_in_gcc_declaration_specifier3071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_gcc_attribute_list3088 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _65_in_gcc_attribute3106 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_attribute3108 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_attribute3110 = new BitSet(new ulong[]{0x2000UL,0x3E6DF1D197B0UL});
		public static readonly BitSet _gcc_attribute_parameter_list_in_gcc_attribute3112 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_attribute3114 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_attribute3116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_parameter_in_gcc_attribute_parameter_list3133 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_gcc_attribute_parameter_list3136 = new BitSet(new ulong[]{0x2000UL,0x3E6DF1D197B0UL});
		public static readonly BitSet _gcc_attribute_parameter_in_gcc_attribute_parameter_list3138 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _gcc_attribute_name_in_gcc_attribute_parameter3157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_name_in_gcc_attribute_parameter3165 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_attribute_parameter3167 = new BitSet(new ulong[]{0x800000CDD0942A50UL,0x1000100000004CUL});
		public static readonly BitSet _assignment_expression_in_gcc_attribute_parameter3170 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _37_in_gcc_attribute_parameter3173 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _assignment_expression_in_gcc_attribute_parameter3175 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _31_in_gcc_attribute_parameter3181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_gcc_attribute_name3198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _storage_class_specifier_in_gcc_attribute_name3206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_gcc_attribute_name3214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_gcc_attribute_name3222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_function_specifier_in_gcc_attribute_name3230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_asm_expression_in_gcc_asm_statement3245 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_gcc_asm_statement3247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_gcc_asm_expression3258 = new BitSet(new ulong[]{0x40000000UL,0x200100010620UL});
		public static readonly BitSet _type_qualifier_in_gcc_asm_expression3293 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_asm_expression3321 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_gcc_asm_expression3346 = new BitSet(new ulong[]{0x800040CDD0942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_gcc_asm_expression3348 = new BitSet(new ulong[]{0x400080000000UL});
		public static readonly BitSet _46_in_gcc_asm_expression3404 = new BitSet(new ulong[]{0x800400080100000UL});
		public static readonly BitSet _gcc_asm_operand_in_gcc_asm_expression3408 = new BitSet(new ulong[]{0x402080000000UL});
		public static readonly BitSet _37_in_gcc_asm_expression3412 = new BitSet(new ulong[]{0x800000000100000UL});
		public static readonly BitSet _gcc_asm_operand_in_gcc_asm_expression3414 = new BitSet(new ulong[]{0x402080000000UL});
		public static readonly BitSet _46_in_gcc_asm_expression3481 = new BitSet(new ulong[]{0x800400080100000UL});
		public static readonly BitSet _gcc_asm_operand_in_gcc_asm_expression3485 = new BitSet(new ulong[]{0x402080000000UL});
		public static readonly BitSet _37_in_gcc_asm_expression3489 = new BitSet(new ulong[]{0x800000000100000UL});
		public static readonly BitSet _gcc_asm_operand_in_gcc_asm_expression3491 = new BitSet(new ulong[]{0x402080000000UL});
		public static readonly BitSet _46_in_gcc_asm_expression3564 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _gcc_asm_clobber_in_gcc_asm_expression3568 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _37_in_gcc_asm_expression3572 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _gcc_asm_clobber_in_gcc_asm_expression3574 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _31_in_gcc_asm_expression3695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_gcc_asm_operand3727 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_gcc_asm_operand3729 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_gcc_asm_operand3731 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _string_literal_in_gcc_asm_operand3736 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_asm_operand3738 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_gcc_asm_operand3740 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_asm_operand3742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_literal_in_gcc_asm_clobber3753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_gcc_statement_expression3767 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _compound_statement_in_gcc_statement_expression3769 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_statement_expression3771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_array_type_modifier_in_gcc_array_type_modifier_list3788 = new BitSet(new ulong[]{0x2UL,0x200100010622UL});
		public static readonly BitSet _type_qualifier_in_gcc_array_type_modifier3806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_gcc_array_type_modifier3814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_gcc_builtin_va_arg3831 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_builtin_va_arg3833 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _assignment_expression_in_gcc_builtin_va_arg3835 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_gcc_builtin_va_arg3837 = new BitSet(new ulong[]{0x2000UL,0x3E4D61518662UL});
		public static readonly BitSet _type_name_in_gcc_builtin_va_arg3839 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_builtin_va_arg3841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_gcc_typeof3858 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_typeof3860 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x103E5D6151866EUL});
		public static readonly BitSet _type_name_in_gcc_typeof3864 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _assignment_expression_in_gcc_typeof3868 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_typeof3872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_gcc_builtin_offsetof3889 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_builtin_offsetof3891 = new BitSet(new ulong[]{0x2000UL,0x3E4D61518662UL});
		public static readonly BitSet _type_name_in_gcc_builtin_offsetof3893 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_gcc_builtin_offsetof3895 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _offsetof_member_designator_in_gcc_builtin_offsetof3897 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_builtin_offsetof3899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_offsetof_member_designator3921 = new BitSet(new ulong[]{0x800040000000002UL});
		public static readonly BitSet _42_in_offsetof_member_designator3924 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_offsetof_member_designator3926 = new BitSet(new ulong[]{0x800040000000002UL});
		public static readonly BitSet _59_in_offsetof_member_designator3930 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_offsetof_member_designator3932 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_offsetof_member_designator3934 = new BitSet(new ulong[]{0x800040000000002UL});
		public static readonly BitSet _declaration_specifiers_in_synpred2_C118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred4_C118 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_synpred4_C121 = new BitSet(new ulong[]{0x2000UL,0xBF6DF1D197F2UL});
		public static readonly BitSet _declaration_in_synpred4_C123 = new BitSet(new ulong[]{0x2000UL,0xBF6DF1D197F2UL});
		public static readonly BitSet _111_in_synpred4_C126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred5_C167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred9_C243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred13_C309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_synpred36_C621 = new BitSet(new ulong[]{0x2000UL,0x800000000002UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred36_C623 = new BitSet(new ulong[]{0x2000UL,0x800000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred36_C626 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_synpred36_C629 = new BitSet(new ulong[]{0x800000002000UL,0x3E4D61518662UL});
		public static readonly BitSet _struct_declaration_list_in_synpred36_C631 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_synpred36_C633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred42_C742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_in_synpred45_C789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_synpred50_C829 = new BitSet(new ulong[]{0x2000UL,0x800000000002UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred50_C831 = new BitSet(new ulong[]{0x2000UL,0x800000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred50_C834 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_synpred50_C837 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_synpred50_C839 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_synpred50_C841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred61_C1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred62_C992 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_synpred62_C995 = new BitSet(new ulong[]{0x2UL,0x803UL});
		public static readonly BitSet _gcc_asm_expression_in_synpred62_C997 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred62_C1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_suffix_in_synpred65_C1083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred68_C1129 = new BitSet(new ulong[]{0x2000UL,0x3E6DF1D197F2UL});
		public static readonly BitSet _parameter_type_list_in_synpred68_C1131 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred68_C1133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred69_C1143 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_synpred69_C1145 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred69_C1147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_synpred70_C1182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_synpred71_C1186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred72_C1179 = new BitSet(new ulong[]{0x2UL,0x200100010622UL});
		public static readonly BitSet _type_qualifier_in_synpred72_C1182 = new BitSet(new ulong[]{0x2UL,0x200100010622UL});
		public static readonly BitSet _gcc_attribute_in_synpred72_C1186 = new BitSet(new ulong[]{0x2UL,0x200100010622UL});
		public static readonly BitSet _declarator_in_synpred75_C1258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_in_synpred76_C1260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred79_C1323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred84_C1359 = new BitSet(new ulong[]{0x800000140000000UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred84_C1361 = new BitSet(new ulong[]{0x800000140000000UL});
		public static readonly BitSet _abstract_declarator_in_synpred84_C1364 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred84_C1366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_suffix_in_synpred85_C1374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_synpred88_C1392 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x1020110001066EUL});
		public static readonly BitSet _gcc_array_type_modifier_in_synpred88_C1394 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x1020110001066EUL});
		public static readonly BitSet _constant_expression_in_synpred88_C1397 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_synpred88_C1400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_synpred90_C1408 = new BitSet(new ulong[]{0x100000000UL,0x200100010622UL});
		public static readonly BitSet _gcc_array_type_modifier_in_synpred90_C1410 = new BitSet(new ulong[]{0x100000000UL,0x200100010622UL});
		public static readonly BitSet _32_in_synpred90_C1413 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_synpred90_C1415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _34_in_synpred96_C1538 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _multiplicative_expression_in_synpred96_C1540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _38_in_synpred97_C1544 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _multiplicative_expression_in_synpred97_C1546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred98_C1570 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _cast_expression_in_synpred98_C1572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred101_C1603 = new BitSet(new ulong[]{0x2000UL,0x3E4D61518662UL});
		public static readonly BitSet _type_name_in_synpred101_C1605 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred101_C1607 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _cast_expression_in_synpred101_C1609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_synpred106_C1672 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _unary_expression_in_synpred106_C1674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_synpred107_C1682 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_synpred107_C1684 = new BitSet(new ulong[]{0x2000UL,0x3E4D61518662UL});
		public static readonly BitSet _type_name_in_synpred107_C1686 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred107_C1688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_synpred108_C1701 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _unary_expression_in_synpred108_C1703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_synpred109_C1711 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_synpred109_C1713 = new BitSet(new ulong[]{0x2000UL,0x3E4D61518662UL});
		public static readonly BitSet _type_name_in_synpred109_C1715 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred109_C1717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred112_C1794 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _argument_expression_list_in_synpred112_C1796 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred112_C1798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_synpred115_C1844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_synpred116_C1858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_synpred133_C2218 = new BitSet(new ulong[]{0x4214211224000000UL,0x2000000000000UL});
		public static readonly BitSet _assignment_operator_in_synpred133_C2220 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _assignment_expression_in_synpred133_C2222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_synpred145_C2365 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_synpred145_C2368 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _expression_in_synpred145_C2370 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_synpred145_C2372 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _conditional_expression_in_synpred145_C2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _28_in_synpred150_C2511 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000004CUL});
		public static readonly BitSet _equality_expression_in_synpred150_C2513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_synpred168_C2766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_synpred182_C3088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_name_in_synpred184_C3157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_synpred187_C3198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred189_C3214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_synpred205_C3864 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
