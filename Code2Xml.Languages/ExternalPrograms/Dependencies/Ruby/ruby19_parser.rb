#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby19Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-480,354,22,25,32,36,42,-480,-480,-480,65,76,-480,-480,-480,91,-480',
'99,102,5,12,19,24,31,-480,337,-480,-480,-480,67,72,79,81,86,88,93,-480',
'-480,7,-480,-480,-480,-480,-480,44,49,546,60,62,70,77,82,87,89,94,98',
'646,4,10,17,546,29,34,-103,45,52,61,-480,-480,-480,-480,-480,-480,-480',
'-480,-480,-480,-480,-480,-480,-480,337,3,-480,-480,-480,66,-480,-480',
'84,617,-480,95,100,-480,-480,13,-480,26,-480,507,-480,48,-480,-480,-480',
'-480,-480,-480,-480,92,-480,336,-480,-99,11,18,23,30,35,39,-93,-101',
'-100,63,71,-480,-480,-480,-480,-560,-480,546,9,-480,-480,-495,-560,-560',
'-560,-107,-556,-494,-560,-560,-103,-560,723,723,-104,371,372,794,-102',
'584,-560,546,337,-101,546,317,-106,648,506,756,319,-560,-560,336,-560',
'-560,-560,-560,-560,317,465,125,-103,467,319,723,317,-103,-105,-100',
'-104,319,-102,-93,148,-99,371,372,551,371,372,615,-560,-560,-560,-560',
'-560,-560,-560,-560,-560,-560,-560,-560,-560,-560,-556,-104,-560,-560',
'-560,655,697,806,-90,653,-560,-405,-93,-560,149,-93,-92,-91,-560,551',
'-560,-93,-560,-560,-560,-560,-560,-560,-560,149,-560,-560,-560,336,-98',
'317,317,317,-557,-94,319,319,319,-95,-483,-560,-560,-93,-94,453,-560',
'-483,-483,-483,-103,-97,-483,-483,-483,317,-483,-101,317,794,319,889',
'-101,319,-483,317,-483,-483,-483,149,319,371,372,-96,757,465,-483,-483',
'592,-483,-483,-483,-483,-483,-104,549,-102,643,-95,-104,688,-102,852',
'-107,610,643,438,440,420,-483,428,800,643,-264,-414,794,-483,-483,-483',
'-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,644,-102',
'-483,-483,-483,445,-483,-483,644,662,-483,-95,-106,-483,-483,644,-483',
'-104,-483,-101,-483,643,-483,-483,-483,-483,-483,-483,-483,662,-483',
'689,-483,445,-95,-491,-414,445,465,807,149,467,-491,-414,-560,-483,-483',
'-483,-483,-560,-483,738,-414,-483,-483,644,-560,-560,-560,-495,344,-560',
'-560,-560,549,-560,441,442,501,-95,-414,149,-95,-93,-560,-560,-560,-560',
'-95,-102,465,-92,-554,467,823,-560,-560,-101,-560,-560,-560,-560,-560',
'460,441,442,458,-560,441,442,479,-91,-98,676,-560,519,-97,-100,-107',
'-556,517,518,-106,-560,371,372,-560,-560,-560,-560,-560,-560,-560,-560',
'-560,-560,-560,-560,-560,-560,18,-560,-560,-560,-560,-483,760,-560,63',
'-85,-560,149,-483,-560,-560,-71,-560,-554,-560,747,-560,-483,-560,-560',
'-560,-560,-560,-560,-560,149,-560,-560,-560,831,770,833,438,440,420',
'-554,428,735,125,-553,-560,-560,-560,-560,-560,-284,-560,-494,497,-560',
'-103,317,-284,-284,-284,498,319,-284,-284,-284,610,-284,438,440,420',
'149,428,730,424,277,123,-284,-284,-284,132,134,278,439,418,422,426,-284',
'-284,838,-284,-284,-284,-284,-284,-90,-285,839,-480,-560,840,-99,-486',
'-285,445,-480,-560,445,317,-486,-553,-556,-285,319,-480,-560,747,842',
'-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284',
'-553,-560,-284,-284,-284,445,759,-284,495,844,-284,149,894,-284,-284',
'346,-284,831,-284,851,-284,149,-284,-284,-284,-284,-284,-284,-284,346',
'-284,149,-284,441,442,443,441,442,469,371,372,814,794,125,-488,-284',
'-284,-284,-284,-284,-284,-488,721,-284,-105,584,-284,-284,-284,136,139',
'149,-284,-284,747,-284,441,442,610,-480,438,440,420,125,428,123,-480',
'127,317,132,134,138,141,319,856,-284,-284,-485,-284,-284,-284,-284,-284',
'317,-485,-487,858,610,319,438,440,420,-487,428,860,123,609,-489,317',
'132,134,138,141,319,-489,614,-284,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-284,-284,-490,861,-284,-284,-284,424,696,-490,862',
'317,-284,328,329,-284,319,717,422,426,-284,715,-284,149,-284,-284,-284',
'-284,-284,-284,-284,317,-284,149,-284,381,319,610,-85,438,440,420,383',
'428,125,149,-562,-284,-284,867,-96,382,-284,-562,-562,-562,-105,149',
'-562,-562,-562,610,-562,438,440,420,149,428,384,385,870,-562,-562,-562',
'-562,609,123,371,372,872,132,134,-562,-562,835,-562,-562,-562,-562,-562',
'610,-263,438,440,420,704,428,814,794,424,876,610,700,438,440,420,-265',
'428,346,695,422,426,694,-562,-562,-562,-562,-562,-562,-562,-562,-562',
'-562,-562,-562,-562,-562,149,609,-562,-562,-562,881,-263,-562,683,680',
'-562,883,609,-562,-562,679,-562,678,-562,887,-562,614,-562,-562,-562',
'-562,-562,-562,-562,662,-562,-562,-562,436,662,438,440,420,625,428,624',
'623,621,619,-285,-562,-562,-562,-562,-278,-562,-285,607,-562,605,896',
'-278,-278,-278,125,-285,-278,-278,-278,770,-278,438,440,420,125,428',
'424,671,125,125,-278,-278,-278,901,125,439,418,422,426,902,-278,-278',
'449,-278,-278,-278,-278,-278,610,451,438,440,420,903,428,125,123,424',
'450,521,132,134,138,141,590,523,439,418,422,426,913,-278,-278,-278,-278',
'-278,-278,-278,-278,-278,-278,-278,-278,-278,-278,584,609,-278,-278',
'-278,-284,582,-278,572,149,-278,-70,-284,-278,-278,-266,-278,-557,-278',
'346,-278,-284,-278,-278,-278,-278,-278,-278,-278,551,-278,610,-278,438',
'440,420,-277,428,348,349,350,351,352,-277,-493,-278,-278,-278,-278,-561',
'-278,-493,-277,-278,545,544,-561,-561,-561,926,-493,-561,-561,-561,610',
'-561,438,440,420,424,428,-492,927,526,-561,-561,-561,-561,-492,125,422',
'426,930,931,508,-561,-561,-492,-561,-561,-561,-561,-561,610,831,438',
'440,420,505,428,935,610,424,438,440,420,847,428,438,440,420,504,428',
'422,426,896,-561,-561,-561,-561,-561,-561,-561,-561,-561,-561,-561,-561',
'-561,-561,831,609,-561,-561,-561,-284,938,-561,831,609,-561,487,-284',
'-561,-561,942,-561,-557,-561,944,-561,-284,-561,-561,-561,-561,-561',
'-561,-561,831,-561,-561,-561,463,947,-331,650,831,484,950,464,460,-331',
'652,462,-561,-561,-561,-561,450,-561,-331,651,-561,354,22,25,32,36,42',
'460,458,-492,65,76,457,956,455,91,-492,99,102,5,12,19,24,31,452,-492',
'448,959,387,67,72,79,81,86,88,93,753,755,7,963,751,10,17,896,44,49,346',
'60,62,70,77,82,87,89,94,98,-284,4,10,17,341,29,34,-284,45,52,61,-493',
'-557,386,149,-285,-284,610,-493,438,440,420,-285,428,148,481,373,-493',
'650,972,66,-285,483,84,973,949,95,100,361,332,13,482,26,327,651,321',
'48,770,680,438,440,420,149,428,92,424,896,831,831,11,18,23,30,35,39',
'984,422,426,63,71,354,22,25,32,36,42,831,9,831,65,76,-557,-556,309,91',
'424,99,102,5,12,19,24,31,307,439,418,422,426,67,72,79,81,86,88,93,149',
'847,7,438,440,420,298,428,44,49,266,60,62,70,77,82,87,89,94,98,-277',
'4,10,17,261,29,34,-277,45,52,61,324,103,831,,953,-277,610,326,438,440',
'420,955,428,,,,325,,,66,954,,84,,,95,100,,,13,,26,,,,48,770,,438,440',
'420,,428,92,424,,,,11,18,23,30,35,39,,422,426,63,71,354,22,25,32,36',
'42,,9,,65,76,,,,91,424,99,102,5,12,19,24,31,,439,418,422,426,67,72,79',
'81,86,88,93,,,7,348,349,350,351,352,44,49,,60,62,70,77,82,87,89,94,98',
',4,10,17,,29,34,,45,52,61,348,349,350,351,352,,610,,438,440,420,,428',
'348,349,350,351,352,,66,,,84,,,95,100,,,13,,26,,,,48,436,,438,440,420',
',428,92,424,,,,11,18,23,30,35,39,,422,426,63,71,354,22,25,32,36,42,',
'9,,65,76,,,,91,424,99,102,5,12,19,24,31,,439,418,422,426,67,72,79,81',
'86,88,93,,,7,,,,,,44,49,,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34',
',45,52,61,,,,,,,610,,438,440,420,,428,,,,,,,66,,,359,,,95,100,,,13,',
'26,,,,48,436,,438,440,420,,428,92,424,,,,11,18,23,30,35,39,,422,426',
'63,71,354,22,25,32,36,42,,9,,65,76,,,,91,424,99,102,5,12,19,24,31,,439',
'418,422,426,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,610,,438,440,420,,428,,,,,,,66',
',,84,,,95,100,,,13,,26,,,,48,436,,438,440,420,,428,92,424,,,,11,18,23',
'30,35,39,,422,426,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,424,99,102',
'5,12,19,24,31,,439,418,422,426,67,72,79,81,86,88,93,,610,7,438,440,420',
',428,44,49,,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,',
',,,,,609,,,,,,,,,,,66,,,359,,,95,100,,,13,,26,,,,48,436,,438,440,420',
',428,92,,,,,11,18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76',
',,,91,424,99,102,5,12,19,24,31,,439,418,422,426,67,72,79,81,86,88,93',
',,7,,,,,,44,49,,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61',
',,,,,,,,,,,,,,,,,,,66,,,84,,,95,100,,,13,,26,,,,48,436,,438,440,420',
',428,92,,,,,11,18,23,30,35,39,,,,63,71,16,22,25,32,36,42,,9,,65,76,',
',,91,424,99,102,5,12,19,24,31,,439,418,422,426,67,72,79,81,86,88,93',
',,7,,,,,,44,49,56,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52',
'61,125,-579,-579,-579,-579,137,140,,,-579,-579,,,,,,136,139,,66,,,84',
',,95,100,,,13,,26,123,,127,48,132,134,138,141,143,145,147,92,124,,,',
'11,18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99,102',
'5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77',
'82,87,89,94,98,,4,10,17,,29,34,,45,52,61,125,,,,,,,,,,,,,,,,136,139',
',66,,,84,,,95,100,,,13,,26,123,,127,48,132,134,138,141,,,147,92,124',
',,,11,18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99',
'102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70',
'77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,125,-579,-579,-579,-579',
'137,140,,,-579,-579,,,,,,136,139,,66,,,84,,,95,100,,,13,,26,123,,127',
'48,132,134,138,141,143,145,147,92,124,,,,11,18,23,30,35,39,,,,63,71',
'354,22,25,32,36,42,,9,,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72',
'79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82,87,89,94,98,,4,10,17,',
'29,34,,45,52,61,125,-579,-579,-579,-579,137,140,,,-579,-579,,,,,,136',
'139,,66,,,84,,,95,100,,,13,,26,123,,127,48,132,134,138,141,143,145,147',
'92,124,,,,11,18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,',
',91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,',
'60,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,125,,,,,,,,,,,',
',,,,136,139,,66,,,84,,,95,100,,,13,,26,123,,127,48,132,134,138,141,',
',147,92,124,,,,11,18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65',
'76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44',
'49,,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,125,126,129',
'131,133,137,140,142,144,146,122,,-579,-579,,,136,139,,66,,,84,,,95,100',
',,13,,26,123,,127,48,132,134,138,141,143,145,147,92,124,,,,11,18,23',
'30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99,102,5,12,19',
'24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,125,-579,-579,-579,-579,137,140,,,-579',
'-579,,,,,,136,139,,66,,,84,,,95,100,,,13,,26,123,,127,48,132,134,138',
'141,143,145,147,92,124,,,,11,18,23,30,35,39,,,,63,71,354,22,25,32,36',
'42,,9,,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,',
',7,,,,,,44,49,,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61',
'125,-579,-579,-579,-579,137,140,,,-579,-579,,,,,,136,139,,66,,,84,,',
'95,100,,,13,,26,123,,127,48,132,134,138,141,143,145,147,92,124,,,,11',
'18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99,102,5',
'12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82',
'87,89,94,98,,4,10,17,,29,34,,45,52,61,125,,,,,,,,,,,,,,,,136,139,,66',
',,84,,,95,100,,,13,,26,123,,127,48,132,134,138,141,,,147,92,124,,,,11',
'18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99,102,5',
'12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82',
'87,89,94,98,,4,10,17,,29,34,,45,52,61,125,126,129,131,133,137,140,142',
',146,122,,,,,,136,139,,66,,,84,,,95,100,,,13,,26,123,,127,48,132,134',
'138,141,143,145,147,92,124,,,,11,18,23,30,35,39,,,,63,71,354,22,25,32',
'36,42,,9,,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93',
',,7,,,,,,44,49,,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61',
'125,126,129,131,133,137,140,,,146,122,,,,,,136,139,,66,,,84,,,95,100',
',,13,,26,123,,127,48,132,134,138,141,143,145,147,92,124,,,,11,18,23',
'30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99,102,5,12,19',
'24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,125,-579,-579,-579,-579,137,140,,,-579',
'-579,,,,,,136,139,,66,,,84,,,95,100,,,13,,26,123,,127,48,132,134,138',
'141,143,145,147,92,124,,,,11,18,23,30,35,39,,,,63,71,354,22,25,32,36',
'42,,9,,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,',
',7,,,,,,44,49,,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61',
'125,126,129,131,133,137,140,142,144,146,122,,-579,-579,,,136,139,,66',
',,84,,,95,100,,,13,,26,123,,127,48,132,134,138,141,143,145,147,92,124',
',,,11,18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99',
'102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70',
'77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,125,,,,,,,,,,,,,,,,136,139',
',66,,,84,,,95,100,,,13,,26,123,,127,48,132,134,138,141,,,147,92,124',
',,,11,18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99',
'102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70',
'77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,125,,,,,,,,,,,,,,,,136,139',
',66,,,84,,,95,100,,,13,,26,123,,,48,132,134,138,141,,,,92,,,,,11,18',
'23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99,102,5,12',
'19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82,87',
'89,94,98,,4,10,17,,29,34,,45,52,61,125,,,,,,,,,,,,,,,,136,139,,66,,',
'84,,,95,100,,,13,,26,123,,127,48,132,134,138,141,,,,92,,,,,11,18,23',
'30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99,102,5,12,19',
'24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,66,,,84,,,95,100',
',,13,,26,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,354,22,25,32',
'36,42,,9,,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93',
',,7,,,,,,44,49,,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61',
',,,,,,,,,,,,,,,,,,,66,,,84,,,95,100,,,13,,26,,,,48,,,,,,,,92,,,,,11',
'18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99,102,5',
'12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82',
'87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,66,,,84,,,95',
'100,,,13,,26,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,354,22,25',
'32,36,42,,9,,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88',
'93,,,7,,,,,,44,49,,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52',
'61,,,,,,,,,,,,,,,,,,,,66,,,84,,,95,100,,,13,,26,,,,48,,,,,,,,92,,,,',
'11,18,23,30,35,39,,,,63,71,354,22,25,32,36,42,,9,,65,76,,,,91,,99,102',
'5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77',
'82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,66,,,359',
',,95,100,,,13,,26,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,16',
'22,25,32,36,42,,9,,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81',
'86,88,93,,,7,,,,,,44,49,56,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34',
',45,52,61,,,,,,,,,,,,,,,,,,,,66,,,84,,,95,100,,,13,,26,,,,48,,,,,,,',
'92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102',
'5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,110,,,62,70',
'77,82,87,89,94,98,,4,10,17,,29,34,,,,112,,,,,,,,,,,,,,,,,,,,273,,,363',
',,95,100,,,13,,,,,,,,,,,,,,,,,,,11,18,23,30,35,39,,,,63,71,22,25,32',
',42,,,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93',
',,7,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,',
',,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,92,,,,,11,18',
'23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24',
'31,,,,,,67,72,79,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98',
'254,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,',
',13,,240,,241,,48,,,,,,,,253,,,,-413,11,18,23,30,35,39,-413,-413,-413',
'63,71,-413,-413,-413,,-413,,,9,,,,,,-413,-413,-413,,,,,,,,,-413,-413',
',-413,-413,-413,-413,-413,,,,,,,,,,,,,,,,,,,,,,,,-413,-413,-413,-413',
'-413,-413,-413,-413,-413,-413,-413,-413,-413,-413,,,-413,-413,-413,',
',-413,,346,-413,,,-413,-413,,-413,,-413,,-413,,-413,-413,-413,-413,-413',
'-413,-413,,-413,-413,-413,,,,,,,,,,,,,-413,-413,,-413,,-413,22,25,32',
',42,,,,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88',
'93,,,104,,,,,,,110,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,,,112',
',,,,,,,,,,,,,,,,,,,273,,,363,,,95,100,,,13,,,,,,,,,,,,,,,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24',
'31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94',
'98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,',
',13,436,796,438,440,420,48,428,,,,,,,253,,,,-291,11,18,23,30,35,39,-291',
'-291,-291,63,71,-291,-291,-291,,-291,,,9,,424,671,,,,-291,-291,,,439',
'418,422,426,,,-291,-291,,-291,-291,-291,-291,-291,,,,,,,,,,,,,,,,,,',
',,,,,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291',
'-291,,,-291,-291,-291,,,-291,,341,-291,,,-291,-291,,-291,,-291,,-291',
',-291,-291,-291,-291,-291,-291,-291,,-291,,-291,,,,,,,,,,,,-578,-291',
'-291,,-291,,-291,-578,-578,-578,,,-578,-578,-578,,-578,,,,,,,,,,-578',
',,,,,,,,,-578,-578,,-578,-578,-578,-578,-578,,,,,,600,539,,,599,,,,',
',,,,180,185,,198,203,209,213,217,222,227,,,154,159,,,-578,172,176,182',
'187,,,-578,,,346,,346,-578,,,,,163,169,,178,183,188,191,196,201,207',
'211,215,224,229,,,157,-578,,,,,,22,25,32,,42,,,-578,65,76,,,-578,91',
',99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,,,49,,,62',
'70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,',
',244,,,249,,,95,100,,,13,,240,,241,,48,,,,,,,,253,,,,,11,18,23,30,35',
'39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31,,,',
',,114,116,119,81,86,88,93,,,104,,,,,,,110,,,62,70,77,82,87,89,94,98',
',4,10,17,,29,34,,,,112,,,,,,,,,,,,,,,,,,,,273,,,363,,,95,100,,,13,,362',
',,,,,,,,,,,,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,',
',91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,686,,49',
',,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,125,126,129,131',
'133,137,140,142,144,146,122,,128,130,,,136,139,,244,,,249,,,95,100,',
',13,,,123,,127,48,132,134,138,141,143,145,147,92,124,,,,11,18,23,30',
'35,39,,,,63,71,317,135,22,25,32,319,42,9,,,65,76,,,,91,,99,102,5,12',
'19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,92,,,,,11,18,23,30',
'35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31',
',,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98',
',4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13',
',,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,',
',49,,,62,70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,,,,,,',
',,,,,,,,,,244,,,249,,,95,100,,,13,,240,,241,,48,,,,,,,,253,,,,,11,18',
'23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24',
'31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,,49,,,62,70,77,82,87,89,94,98',
',4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13',
',,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,',
',,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,240,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19',
'24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,,49,,,62,70,77,82,87,89,94',
'98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,',
',13,,,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,',
'9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,',
',104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,',
',,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18',
'23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,254,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95',
'100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32',
',42,,,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88',
'93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61',
',,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,511,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,',
'42,,,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88',
'93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52',
'61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,241,,48,,,,,,,,253',
',,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102',
'5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70',
'77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,',
',249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71',
'22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119',
'81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,254,4,10,17,,29',
'34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,634,,241,,48',
',,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,',
'91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,',
'49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,',
',,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35',
'39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,',
'67,72,79,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,254,4',
'10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,240',
',241,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9',
'65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24',
'31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94',
'98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,',
',13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,',
',9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,92,,,,,11,18,23,30',
'35,39,,,,63,71,149,22,25,32,,42,,9,,65,76,,,,91,,99,102,5,12,19,24,31',
',,,,,67,72,79,81,86,88,93,,,7,,,,,,,49,,,62,70,77,82,87,89,94,98,,4',
'10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,436',
',438,440,420,48,428,,,,,,,92,,,,-578,11,18,23,30,35,39,-578,-578,-578',
'63,71,-578,-578,-578,,-578,,,9,,424,430,,,,-578,,,,439,418,422,426,',
',-578,-578,,-578,-578,-578,-578,-578,,,,,,489,491,,,488,,,,,,,,,180',
'185,,198,203,209,213,217,222,227,,,154,159,,,-578,172,176,182,187,,',
'-578,,,,,346,-578,,,,,163,169,,178,183,188,191,196,201,207,211,215,224',
'229,,,157,-578,,,,,,22,25,32,,42,,,-578,65,76,,,-578,91,,99,102,5,12',
'19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100',
',,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,36,42,,,9,65,76,,,,91,,99,102,5,12,19,24',
'31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82,87,89,94',
'98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,66,,,84,,,95,100,,,13',
',26,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,523',
',9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,',
',,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,',
',,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,92,,,,,11,18,23,30',
'35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31',
',,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98',
',4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13',
',,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31',
',,,,,67,72,79,81,86,88,93,,,7,,,,,,,49,,,62,70,77,82,87,89,94,98,,4',
'10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,',
',,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76',
',,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104,,,',
',,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,',
',,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30',
'35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31',
',,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98',
'254,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,',
',13,,634,,241,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32',
',42,,,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88',
'93,,,104,,,,,,,110,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,,,112',
',,,,,,,,,,,,,,,,,,,273,,,363,,,95,100,,,13,,,,,,,,,,,,,,,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24',
'31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94',
'98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,',
',13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,',
',9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,',
',,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19',
'24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94',
'98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,',
',13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,',
',9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93',
',,104,,,,,,,110,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,,,112,,,',
',,,,,,,,,,,,,,,,273,,,363,,,95,100,,,13,,,,,,,,,,,,,,,,,,,11,18,23,30',
'35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31',
',,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98',
',4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13',
',,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24',
'31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94',
'98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,',
',13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,',
',9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,',
',,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,',
',,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,92,,,,,11,18,23,30',
'35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31',
',,,,,114,116,119,81,86,88,93,,,104,,,,,,,110,,,62,70,77,82,87,89,94',
'98,,4,10,17,,29,34,,,,112,,,,,,,,,,,,,,,,,,,,273,,,363,,,95,100,,,13',
',,,,,,,,,,,,,,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76',
',,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104,,,',
',,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,',
',,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30',
'35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31',
',,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98',
',4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13',
',,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,',
',,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,634,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,110,,,62,70,77,477,87',
'89,94,478,,4,10,17,,29,34,,,,112,,,,,,,,,,,,,,,,,,,,475,,,249,,,95,100',
',,13,,,,,,,,,,,,,,,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24',
'31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,110,,,62,70,77,477,87,89',
'94,478,,4,10,17,,29,34,,,,112,,,,,,,,,,,,,,,,,,,,475,,,249,,,95,100',
',,13,,,,,,,,,,,,,,,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31',
',,,,,67,72,79,81,86,88,93,,,7,,,,,,,49,,,62,70,77,82,87,89,94,98,,4',
'10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,',
',,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76',
',,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104,,,',
',,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,',
',,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30',
'35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31,,',
',,,67,72,79,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,254',
'4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13',
',240,,241,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,',
',,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,240,,241,,48,,,,,,,,253,,,,',
'11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106',
'108,24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82',
'87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,',
',95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25',
'32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88',
'93,,,7,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61',
',,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,92,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19',
'24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,,49,,,62,70,77,82,87,89,94',
'98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,',
',13,,,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,',
'9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,',
',,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,',
',,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,92,,,,,11,18,23,30',
'35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31,,',
',,,67,72,79,81,86,88,93,,,7,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10',
'17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,',
'48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,',
',,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,,49,,',
'62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,',
',244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,',
'63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114',
'116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17',
',29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,240,,,',
'48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76',
',,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104,,,',
',,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,',
',,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30',
'35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31',
',,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98',
'254,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,',
',13,,,,241,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24',
'31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,110,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,,,112,,,,,,,,,,,,,,,,,,,,911,,,249,,,95,100,',
',13,,,,,,,,,,,,,,,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24',
'31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,110,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,,,112,,,,,,,,,,,,,,,,,,,,273,,,249,,,95,100,',
',13,,,,,,,,,,,,,,,,,,-578,11,18,23,30,35,39,-578,-578,-578,63,71,-578',
'-578,-578,275,-578,,,9,,,,,,-578,-578,-578,,,,,,,,,-578,-578,,-578,-578',
'-578,-578,-578,,,,,,,,,,,,,,,,,,,,,,,,-578,-578,-578,-578,-578,-578',
'-578,-578,-578,-578,-578,-578,-578,-578,,,-578,-578,-578,,,-578,,346',
'-578,,,-578,-578,,-578,,-578,,-578,,-578,-578,-578,-578,-578,-578,-578',
',-578,-578,-578,,,,,,,,,,,,,-578,-578,,-578,,-578,22,25,32,,42,,,,65',
'76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24',
'31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,110,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,,,112,,,,,,,,,,,,,,,,,,,,273,,,249,,,95,100,',
',13,,,,,,,,,,,,,,,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,579,42,,,9',
'65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,',
',,,,49,,,62,70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,,,',
',,,,,,,,,,,,,244,,,249,,,95,100,,,13,,240,,241,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,110,,,62,70,77,82,87',
'89,94,98,,4,10,17,,29,34,,,,112,,,,,,,,,,,,,,,,,,,,919,,,249,,,95,100',
',,13,,,,,,,,,,,,,,,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,',
',49,,,62,70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,,,,,,',
',,,,,,,,,,244,,,249,,,95,100,,,13,,240,,241,,48,,,,,,,,253,,,,,11,18',
'23,30,35,39,,,,63,71,22,25,32,36,42,,,9,65,76,,,,91,,99,102,5,12,19',
'24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,56,60,62,70,77,82,87',
'89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,66,,,84,,,95,100',
',,13,,26,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31',
',,,,,67,72,79,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,',
'4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13',
',511,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,',
'9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88,93,',
',104,,,,,,,49,,,62,70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52,61',
',,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108',
'24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89',
'94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,521,,95',
'100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32',
',42,,,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88',
'93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61',
',,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,634,,,,48,,,,,,,,253,,,',
',11,18,23,30,35,39,,,,63,71,22,25,32,36,42,,,9,65,76,,,,91,,99,102,5',
'12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,56,60,62,70,77',
'82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,66,,,84',
',,95,100,,,13,,26,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22',
'25,32,,42,523,,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81',
'86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45',
'52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253',
',,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102',
'5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82',
'87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249',
',,95,100,,,13,,240,,241,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71',
'22,25,32,36,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81',
'86,88,93,,,7,,,,,,44,49,,60,62,70,77,82,87,89,94,98,,4,10,17,,29,34',
',45,52,61,,,,,,,,,,,,,,,,,,,,66,,,84,,,95,100,,,13,,26,,,,48,,,,,,,',
'92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102',
'5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82',
'87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249',
',,95,100,,,13,,240,,241,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71',
'22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81',
'86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45',
'52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253',
',,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102',
'5,106,108,24,31,,,,,,114,116,119,81,86,88,93,,,104,,,,,,,110,,,62,70',
'77,82,87,89,94,98,,4,10,17,,29,34,,,,112,,,,,,,,,,,,,,,,,,,,113,,,84',
',,95,100,,,13,,26,,,,,,,,,,,,,,,,,11,18,23,30,35,39,,,,63,71,22,25,32',
',42,,,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114,116,119,81,86,88',
'93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61',
',,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11',
'18,23,30,35,39,,,,63,71,22,25,32,36,42,,,9,65,76,,,,91,,99,102,5,12',
'19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,44,49,,60,62,70,77,82,87',
'89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,66,,,84,,,95,100',
',,13,,26,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42',
',,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7',
',,,,,,49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,',
',,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,92,,,,,11,18,23,30',
'35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31',
',,,,,114,116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98',
',4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13',
',,,,,48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,,49',
',,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,',
',,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,',
',,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,106,108,24,31,,,,,,114',
'116,119,81,86,88,93,,,104,,,,,,,49,,,62,70,77,82,87,89,94,98,254,4,10',
'17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,,,241',
',48,,,,,,,,253,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76',
',,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,,,49',
',,62,70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,',
',,,,,,244,,,249,,,95,100,,,13,,240,,241,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31',
',,,,,67,72,79,81,86,88,93,,,7,,,,,,,49,,,62,70,77,82,87,89,94,98,,4',
'10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13,,',
',,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65,76',
',,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,,,49',
',,62,70,77,82,87,89,94,98,254,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,',
',,,,,,244,,,249,,,95,100,,,13,,240,,241,,48,,,,,,,,253,,,,,11,18,23',
'30,35,39,,,,63,71,149,22,25,32,,42,,9,,65,76,,,,91,,99,102,5,12,19,24',
'31,,,,,,67,72,79,81,86,88,93,,,7,,,,,,,49,,,62,70,77,82,87,89,94,98',
',4,10,17,,29,34,,45,52,61,,,,,,,,,,,,,,,,,,,,244,,,249,,,95,100,,,13',
',,,,,48,,,,,,,,92,,,,,11,18,23,30,35,39,,,,63,71,22,25,32,,42,,,9,65',
'76,,,,91,,99,102,5,12,19,24,31,,,,,,67,72,79,81,86,88,93,,,104,,,,,',
',49,,,62,70,77,82,87,89,94,98,,4,10,17,,29,34,,45,52,61,,,,,,,,,,,,',
',,,,,,,244,,,249,,,95,100,,,13,,,,,,48,,,,,,,,253,,,,,11,18,23,30,35',
'39,,,,63,71,22,25,32,,42,,,9,65,76,,,,91,,99,102,5,12,19,24,31,,,,,',
'67,72,79,81,86,88,93,,,104,,,,,714,,49,,,62,70,77,82,87,89,94,98,,4',
'10,17,,29,34,,45,52,61,125,126,129,131,133,137,140,142,144,146,122,',
'128,130,,,136,139,,244,,,249,,,95,100,,,13,,511,123,,127,48,132,134',
'138,141,143,145,147,253,124,,,,11,18,23,30,35,39,,,,63,71,,135,,-240',
',,,9,162,164,167,170,175,181,186,190,194,199,205,214,218,223,226,230',
'233,155,158,161,165,168,173,177,,,,195,200,206,210,219,221,228,231,234',
'156,,,,,,179,184,189,192,197,202,208,212,216,311,,232,,,,,,,,,180,185',
',198,203,209,213,217,222,227,,,154,159,,,,172,176,182,187,,,,,,,,,,',
',,,163,169,,178,183,188,191,196,201,207,211,215,224,229,,,157,11,,,',
',,,,,,71,162,164,167,170,175,181,186,190,194,199,205,214,218,223,226',
'230,233,155,158,161,165,168,173,177,,,,195,200,206,210,219,221,228,231',
'234,156,,,,,,179,184,189,192,197,202,208,212,216,,,232,,,,,,,,,180,185',
',198,203,209,213,217,222,227,,,154,159,,,,172,176,182,187,,,,,,,,,,',
',,,163,169,,178,183,188,191,196,201,207,211,215,224,229,,,157,11,,,',
',,,,,,71,162,164,167,170,175,181,186,190,194,199,205,214,218,223,226',
'230,233,155,158,161,165,168,173,177,,,,195,200,206,210,219,221,228,231',
'234,156,,,,,,179,184,189,192,197,202,208,212,216,,,232,,,,,,,,,180,185',
',198,203,209,213,217,222,227,,,154,159,,,,172,176,182,187,,,,,,,,,,',
',,,163,169,,178,183,188,191,196,201,207,211,215,224,229,,,157,11,,,',
',,,,,,71,162,164,167,170,175,181,186,190,194,199,205,214,218,223,226',
'230,233,155,158,161,165,168,173,177,,,,195,200,206,210,219,221,228,231',
'234,156,,,,,,179,184,189,192,197,202,208,212,216,,,232,,,,,,,,,180,185',
',198,203,209,213,217,222,227,,,154,159,,,,172,176,182,187,,,,,,,,,,',
',,,163,169,,178,183,188,191,196,201,207,211,215,224,229,,,157,11,,,',
',,,,,,71,162,164,167,170,175,181,186,190,194,199,205,214,218,223,226',
'230,233,155,158,161,165,168,173,177,,,,195,200,206,210,219,221,228,231',
'234,156,,,,,,179,184,189,192,197,202,208,212,216,220,225,232,,153,,',
',,,,180,185,,198,203,209,213,217,222,227,,,154,159,,,,172,176,182,187',
',,,,,,,,,,,,,163,169,,178,183,188,191,196,201,207,211,215,224,229,,',
'157,162,164,167,170,175,181,186,190,194,199,205,214,218,223,226,230',
'233,155,158,161,165,168,173,177,,,,195,200,206,210,219,221,228,231,234',
'156,,,,,,179,184,189,192,197,202,208,212,216,,,232,,,,,,,,,180,185,',
'198,203,209,213,217,222,227,,,154,159,,,,172,176,182,187,,,,,,,,,,,',
',,163,169,,178,183,188,191,196,201,207,211,215,224,229,,,157,162,164',
'167,170,175,181,186,190,194,199,205,214,218,223,226,230,233,155,158',
'161,165,168,173,177,,,,195,200,206,289,292,293,294,231,234,156,,,,,',
'179,184,189,192,286,287,288,290,216,89,94,295,,4,,,,,,,180,185,,198',
'203,209,213,217,222,227,,,154,159,,,,172,176,182,187,,,,,,291,714,,',
',,,,163,169,,178,183,188,191,196,201,207,211,215,224,229,,,157,125,126',
'129,131,133,137,140,142,144,146,122,,128,130,,,136,139,,,,,,,,,,,,,',
',123,,127,,132,134,138,141,143,145,147,,124,971,539,,,970,,,,,,,,,180',
'185,135,198,203,209,213,217,222,227,,,154,159,,,,172,176,182,187,,,',
',,346,,,,,,,,163,169,,178,183,188,191,196,201,207,211,215,224,229,537',
'539,157,,536,,,,,,,,,180,185,,198,203,209,213,217,222,227,,,154,159',
',,,172,176,182,187,,,,,,346,,,,,,,,163,169,,178,183,188,191,196,201',
'207,211,215,224,229,779,539,157,,777,,,,,,,,,180,185,,198,203,209,213',
'217,222,227,,,154,159,,,,172,176,182,187,,,,,,346,,,,,,,,163,169,,178',
'183,188,191,196,201,207,211,215,224,229,975,491,157,,974,,,,,,,,,180',
'185,,198,203,209,213,217,222,227,,,154,159,,,,172,176,182,187,,,,,,346',
',,,,,,,163,169,,178,183,188,191,196,201,207,211,215,224,229,658,491',
'157,,657,,,,,,,,,180,185,,198,203,209,213,217,222,227,,,154,159,,,,172',
'176,182,187,,,,,,346,,,,,,,,163,169,,178,183,188,191,196,201,207,211',
'215,224,229,661,539,157,,660,,,,,,,,,180,185,,198,203,209,213,217,222',
'227,,,154,159,,,,172,176,182,187,,,,,,346,,,,,,,,163,169,,178,183,188',
'191,196,201,207,211,215,224,229,489,491,157,,488,,,,,,,,,180,185,,198',
'203,209,213,217,222,227,,,154,159,,,,172,176,182,187,,,,,,,,,,,,,,163',
'169,,178,183,188,191,196,201,207,211,215,224,229,528,491,157,,527,,',
',,,,,,180,185,,198,203,209,213,217,222,227,,,154,159,,,,172,176,182',
'187,,,,,,346,,,,,,,,163,169,,178,183,188,191,196,201,207,211,215,224',
'229,632,539,157,,631,,,,,,,,,180,185,,198,203,209,213,217,222,227,,',
'154,159,,,,172,176,182,187,,,,,,346,,,,,,,,163,169,,178,183,188,191',
'196,201,207,211,215,224,229,629,491,157,,628,,,,,,,,,180,185,,198,203',
'209,213,217,222,227,,,154,159,,,,172,176,182,187,,,,,,346,,,,,,,,163',
'169,,178,183,188,191,196,201,207,211,215,224,229,489,491,157,,488,,',
',,,,,,180,185,,198,203,209,213,217,222,227,,,154,159,,,,172,176,182',
'187,,,,,,346,,,,,,,,163,169,,178,183,188,191,196,201,207,211,215,224',
'229,596,491,157,,595,,,,,,,,,180,185,,198,203,209,213,217,222,227,,',
'154,159,,,,172,176,182,187,,,,,,346,,,,,,,,163,169,,178,183,188,191',
'196,201,207,211,215,224,229,632,539,157,,631,,,,,,,,,180,185,,198,203',
'209,213,217,222,227,,,154,159,,,,172,176,182,187,,,,,,346,,,,,,,,163',
'169,,178,183,188,191,196,201,207,211,215,224,229,978,539,157,,977,,',
',,,,,,180,185,,198,203,209,213,217,222,227,,,154,159,,,,172,176,182',
'187,,,,,,346,,,,,,,,163,169,,178,183,188,191,196,201,207,211,215,224',
'229,629,491,157,,628,,,,,,,,,180,185,,198,203,209,213,217,222,227,,',
'154,159,,,,172,176,182,187,,,,,,346,,,,,,,,163,169,,178,183,188,191',
'196,201,207,211,215,224,229,,,157,125,126,129,131,133,137,140,142,144',
'146,122,,128,130,,,136,139,,,,,,,,,,,,,,,123,,127,,132,134,138,141,143',
'145,147,,124,125,126,129,131,133,137,140,142,144,146,122,,128,130,,135',
'136,139,,,,,,,,,,,,,,,123,,127,,132,134,138,141,143,145,147,,124,125',
'126,129,131,133,137,140,142,144,146,122,,128,130,,135,136,139,,,,,,',
',,,,,,,,123,,127,,132,134,138,141,143,145,147,,124,125,126,129,131,133',
'137,140,142,144,146,122,,128,130,,135,136,139,,,,,,,,,,,,,,,123,,127',
',132,134,138,141,143,145,147,,124,125,126,129,131,133,137,140,142,144',
'146,122,,128,130,,135,136,139,,,,,,,,,,,,,,,123,,127,,132,134,138,141',
'143,145,147,,124,125,126,129,131,133,137,140,142,144,146,122,,128,130',
',135,136,139,,,,,,,,,,,,,,,123,,127,,132,134,138,141,143,145,147,,124',
'125,126,129,131,133,137,140,142,144,146,122,,128,130,,135,136,139,,',
',,,,,,,,,,,,123,,127,,132,134,138,141,143,145,147,,124,125,126,129,131',
'133,137,140,142,144,146,122,,128,130,,135,136,139,,,,,,,,,,,,,,,123',
',127,,132,134,138,141,143,145,147,,124,125,126,129,131,133,137,140,142',
'144,146,122,,128,130,,135,136,139,,,,,,,,,,,,,,,123,,127,,132,134,138',
'141,143,145,147,,124,125,126,129,131,133,137,140,142,144,146,122,,128',
'130,,135,136,139,,,,,,,,,,,,,,,123,,127,,132,134,138,141,143,145,147',
',124,125,126,129,131,133,137,140,142,144,146,122,,128,130,,135,136,139',
',,,,,,,,,,,,,,123,,127,,132,134,138,141,143,145,147,,124,125,126,129',
'131,133,137,140,142,144,146,122,,128,130,149,135,136,139,,,,,,,,,,,',
',,,123,,127,,132,134,138,141,143,145,147,,124,125,126,129,131,133,137',
'140,142,144,146,122,,128,130,,135,136,139,,,,,,,,,,,,,,,123,,127,,132',
'134,138,141,143,145,147,,124,125,126,129,131,133,137,140,142,144,146',
'122,,128,130,,135,136,139,,,,,,,,,,,,,,,123,,127,,132,134,138,141,143',
'145,147,,124,,,,,,,,,,,,,,,,135' ]
        racc_action_table = arr = ::Array.new(23573, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'82,656,656,656,656,656,656,82,82,82,656,656,82,82,82,656,82,656,656',
'656,656,656,656,656,82,115,82,82,82,656,656,656,656,656,656,656,82,82',
'656,82,82,82,82,82,656,656,343,656,656,656,656,656,656,656,656,656,473',
'656,656,656,882,656,656,978,656,656,656,82,82,82,82,82,82,82,82,82,82',
'82,82,82,82,75,1,82,82,82,656,82,82,656,425,82,656,656,82,82,656,82',
'656,82,306,82,656,82,82,82,82,82,82,82,656,82,115,82,105,656,656,656',
'656,656,656,658,728,107,656,656,82,82,82,82,537,82,873,656,82,82,239',
'537,537,537,118,978,236,537,537,600,537,589,594,595,685,685,928,596',
'928,537,330,68,987,824,343,386,473,306,628,343,537,537,75,537,537,537',
'537,537,882,259,702,978,259,882,729,473,978,599,239,974,473,975,658',
'7,236,331,331,698,415,415,425,537,537,537,537,537,537,537,537,537,537',
'537,537,537,537,600,628,537,537,537,475,537,692,105,475,537,68,658,537',
'7,658,728,107,537,690,537,658,537,537,537,537,537,537,537,685,537,537',
'537,68,118,873,589,594,599,600,873,589,594,595,98,537,537,596,537,247',
'537,98,98,98,537,386,98,98,98,330,98,987,824,710,330,824,987,824,98',
'729,98,98,98,415,729,674,674,599,629,377,98,98,377,98,98,98,98,98,974',
'452,975,553,657,974,527,975,758,247,614,468,614,614,614,295,614,687',
'554,682,781,681,295,98,98,98,98,98,98,98,98,98,98,98,98,98,98,553,629',
'98,98,98,297,98,98,468,663,98,527,452,98,98,554,98,527,98,758,98,706',
'98,98,98,98,98,98,98,716,98,528,98,502,657,288,781,268,378,693,674,378',
'288,781,661,98,98,98,98,632,98,614,781,98,98,706,632,632,632,15,78,632',
'632,632,332,632,297,297,297,657,781,659,657,528,632,632,632,632,657',
'528,726,693,478,726,719,632,632,693,632,632,632,632,632,636,502,502',
'635,661,268,268,268,15,78,502,661,311,332,15,78,661,311,311,332,661',
'645,645,632,632,632,632,632,632,632,632,632,632,632,632,632,632,57,661',
'632,632,632,478,632,632,57,713,632,630,478,632,632,713,632,478,632,620',
'632,478,632,632,632,632,632,632,632,613,632,632,632,732,644,733,644',
'644,644,478,644,608,404,477,779,632,632,632,632,631,632,8,283,632,632',
'365,631,631,631,283,365,631,631,631,835,631,835,835,835,736,835,603',
'644,27,404,631,631,631,404,404,27,644,644,644,644,631,631,739,631,631',
'631,631,631,8,956,740,477,779,741,8,289,956,204,477,779,264,353,289',
'477,779,956,353,477,779,644,742,631,631,631,631,631,631,631,631,631',
'631,631,631,631,631,477,779,631,631,631,280,631,631,280,744,631,746',
'835,631,631,601,631,748,631,750,631,598,631,631,631,631,631,631,631',
'597,631,586,631,204,204,204,264,264,264,370,370,958,958,413,294,631',
'631,631,631,536,631,294,585,631,631,583,536,536,536,413,413,581,536',
'536,764,536,280,280,609,290,609,609,609,402,609,413,290,413,865,413',
'413,413,413,865,765,536,536,292,536,536,536,536,536,53,292,293,767,860',
'53,860,860,860,293,860,768,402,609,287,672,402,402,402,402,672,287,609',
'536,536,536,536,536,536,536,536,536,536,536,536,536,536,286,770,536',
'536,536,860,536,286,771,772,536,61,61,536,772,580,860,860,536,576,536',
'571,536,536,536,536,536,536,536,646,536,776,536,111,646,735,570,735',
'735,735,111,735,407,561,538,536,536,780,536,111,536,538,538,538,536',
'556,538,538,538,947,538,947,947,947,784,947,112,112,786,538,538,538',
'538,735,407,96,96,789,407,407,538,538,735,538,538,538,538,538,935,792',
'935,935,935,548,935,703,703,947,795,424,543,424,424,424,797,424,542',
'535,947,947,534,538,538,538,538,538,538,538,538,538,538,538,538,538',
'538,531,935,538,538,538,808,515,538,513,510,538,815,424,538,538,509',
'538,507,538,820,538,424,538,538,538,538,538,538,538,486,538,538,538',
'868,822,868,868,868,436,868,434,432,431,429,484,538,538,538,538,87,538',
'484,421,538,416,837,87,87,87,400,484,87,87,87,856,87,856,856,856,405',
'856,868,868,398,701,87,87,87,848,391,868,868,868,868,853,87,87,243,87',
'87,87,87,87,738,243,738,738,738,854,738,389,405,856,243,380,405,405',
'405,405,376,367,856,856,856,856,864,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,366,738,87,87,87,977,364,87,360,357,87,356,977,87,87,878,87',
'977,87,338,87,977,87,87,87,87,87,87,87,334,87,844,87,844,844,844,920',
'844,358,358,358,358,358,920,917,87,87,87,87,539,87,917,920,87,329,328',
'539,539,539,885,917,539,539,539,944,539,944,944,944,844,944,916,886',
'322,539,539,539,539,916,315,844,844,890,891,307,539,539,916,539,539',
'539,539,539,838,893,838,838,838,300,838,895,894,944,894,894,894,901',
'894,901,901,901,298,901,944,944,897,539,539,539,539,539,539,539,539',
'539,539,539,539,539,539,898,838,539,539,539,660,899,539,900,894,539',
'276,660,539,539,904,539,660,539,905,539,660,539,539,539,539,539,539',
'539,906,539,539,539,256,908,73,474,909,273,911,256,258,73,474,255,539',
'539,539,539,256,539,73,474,539,888,888,888,888,888,888,252,251,270,888',
'888,250,919,248,888,270,888,888,888,888,888,888,888,244,270,242,925',
'121,888,888,888,888,888,888,888,627,627,888,932,627,627,627,934,888',
'888,119,888,888,888,888,888,888,888,888,888,777,888,888,888,116,888',
'888,777,888,888,888,271,777,113,110,653,777,938,271,938,938,938,653',
'938,104,272,97,271,910,951,888,653,272,888,952,910,888,888,85,66,888',
'272,888,60,910,55,888,858,957,858,858,858,49,858,888,938,964,965,966',
'888,888,888,888,888,888,967,938,938,888,888,308,308,308,308,308,308',
'968,888,969,308,308,970,971,43,308,858,308,308,308,308,308,308,308,39',
'858,858,858,858,308,308,308,308,308,308,308,976,747,308,747,747,747',
'35,747,308,308,22,308,308,308,308,308,308,308,308,308,274,308,308,308',
'14,308,308,274,308,308,308,59,3,988,,918,274,984,59,984,984,984,918',
'984,,,,59,,,308,918,,308,,,308,308,,,308,,308,,,,308,942,,942,942,942',
',942,308,984,,,,308,308,308,308,308,308,,984,984,308,308,892,892,892',
'892,892,892,,308,,892,892,,,,892,942,892,892,892,892,892,892,892,,942',
'942,942,942,892,892,892,892,892,892,892,,,892,569,569,569,569,569,892',
'892,,892,892,892,892,892,892,892,892,892,,892,892,892,,892,892,,892',
'892,892,712,712,712,712,712,,623,,623,623,623,,623,83,83,83,83,83,,892',
',,892,,,892,892,,,892,,892,,,,892,842,,842,842,842,,842,892,623,,,,892',
'892,892,892,892,892,,623,623,892,892,359,359,359,359,359,359,,892,,359',
'359,,,,359,842,359,359,359,359,359,359,359,,842,842,842,842,359,359',
'359,359,359,359,359,,,359,,,,,,359,359,,359,359,359,359,359,359,359',
'359,359,,359,359,359,,359,359,,359,359,359,,,,,,,831,,831,831,831,,831',
',,,,,,359,,,359,,,359,359,,,359,,359,,,,359,607,,607,607,607,,607,359',
'831,,,,359,359,359,359,359,359,,831,831,359,359,626,626,626,626,626',
'626,,359,,626,626,,,,626,607,626,626,626,626,626,626,626,,607,607,607',
'607,626,626,626,626,626,626,626,,,626,,,,,,626,626,,626,626,626,626',
'626,626,626,626,626,,626,626,626,,626,626,,626,626,626,,,,,,,833,,833',
'833,833,,833,,,,,,,626,,,626,,,626,626,,,626,,626,,,,626,430,,430,430',
'430,,430,626,833,,,,626,626,626,626,626,626,,833,833,626,626,363,363',
'363,363,363,363,,626,,363,363,,,,363,430,363,363,363,363,363,363,363',
',430,430,430,430,363,363,363,363,363,363,363,,896,363,896,896,896,,896',
'363,363,,363,363,363,363,363,363,363,363,363,,363,363,363,,363,363,',
'363,363,363,,,,,,,,,896,,,,,,,,,,,363,,,363,,,363,363,,,363,,363,,,',
'363,671,,671,671,671,,671,363,,,,,363,363,363,363,363,363,,,,363,363',
'615,615,615,615,615,615,,363,,615,615,,,,615,671,615,615,615,615,615',
'615,615,,671,671,671,671,615,615,615,615,615,615,615,,,615,,,,,,615',
'615,,615,615,615,615,615,615,615,615,615,,615,615,615,,615,615,,615',
'615,615,,,,,,,,,,,,,,,,,,,,615,,,615,,,615,615,,,615,,615,,,,615,619',
',619,619,619,,619,615,,,,,615,615,615,615,615,615,,,,615,615,526,526',
'526,526,526,526,,615,,526,526,,,,526,619,526,526,526,526,526,526,526',
',619,619,619,619,526,526,526,526,526,526,526,,,526,,,,,,526,526,526',
'526,526,526,526,526,526,526,526,526,,526,526,526,,526,526,,526,526,526',
'392,392,392,392,392,392,392,,,392,392,,,,,,392,392,,526,,,526,,,526',
'526,,,526,,526,392,,392,526,392,392,392,392,392,392,392,526,392,,,,526',
'526,526,526,526,526,,,,526,526,327,327,327,327,327,327,,526,,327,327',
',,,327,,327,327,327,327,327,327,327,,,,,,327,327,327,327,327,327,327',
',,327,,,,,,327,327,,327,327,327,327,327,327,327,327,327,,327,327,327',
',327,327,,327,327,327,403,,,,,,,,,,,,,,,,403,403,,327,,,327,,,327,327',
',,327,,327,403,,403,327,403,403,403,403,,,403,327,403,,,,327,327,327',
'327,327,327,,,,327,327,876,876,876,876,876,876,,327,,876,876,,,,876',
',876,876,876,876,876,876,876,,,,,,876,876,876,876,876,876,876,,,876',
',,,,,876,876,,876,876,876,876,876,876,876,876,876,,876,876,876,,876',
'876,,876,876,876,388,388,388,388,388,388,388,,,388,388,,,,,,388,388',
',876,,,876,,,876,876,,,876,,876,388,,388,876,388,388,388,388,388,388',
'388,876,388,,,,876,876,876,876,876,876,,,,876,876,912,912,912,912,912',
'912,,876,,912,912,,,,912,,912,912,912,912,912,912,912,,,,,,912,912,912',
'912,912,912,912,,,912,,,,,,912,912,,912,912,912,912,912,912,912,912',
'912,,912,912,912,,912,912,,912,912,912,399,399,399,399,399,399,399,',
',399,399,,,,,,399,399,,912,,,912,,,912,912,,,912,,912,399,,399,912,399',
'399,399,399,399,399,399,912,399,,,,912,912,912,912,912,912,,,,912,912',
'915,915,915,915,915,915,,912,,915,915,,,,915,,915,915,915,915,915,915',
'915,,,,,,915,915,915,915,915,915,915,,,915,,,,,,915,915,,915,915,915',
'915,915,915,915,915,915,,915,915,915,,915,915,,915,915,915,406,,,,,',
',,,,,,,,,,406,406,,915,,,915,,,915,915,,,915,,915,406,,406,915,406,406',
'406,406,,,406,915,406,,,,915,915,915,915,915,915,,,,915,915,818,818',
'818,818,818,818,,915,,818,818,,,,818,,818,818,818,818,818,818,818,,',
',,,818,818,818,818,818,818,818,,,818,,,,,,818,818,,818,818,818,818,818',
'818,818,818,818,,818,818,818,,818,818,,818,818,818,394,394,394,394,394',
'394,394,394,394,394,394,,394,394,,,394,394,,818,,,818,,,818,818,,,818',
',818,394,,394,818,394,394,394,394,394,394,394,818,394,,,,818,818,818',
'818,818,818,,,,818,818,249,249,249,249,249,249,,818,,249,249,,,,249',
',249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249',
',,,,,249,249,,249,249,249,249,249,249,249,249,249,,249,249,249,,249',
'249,,249,249,249,397,397,397,397,397,397,397,,,397,397,,,,,,397,397',
',249,,,249,,,249,249,,,249,,249,397,,397,249,397,397,397,397,397,397',
'397,249,397,,,,249,249,249,249,249,249,,,,249,249,763,763,763,763,763',
'763,,249,,763,763,,,,763,,763,763,763,763,763,763,763,,,,,,763,763,763',
'763,763,763,763,,,763,,,,,,763,763,,763,763,763,763,763,763,763,763',
'763,,763,763,763,,763,763,,763,763,763,412,412,412,412,412,412,412,',
',412,412,,,,,,412,412,,763,,,763,,,763,763,,,763,,763,412,,412,763,412',
'412,412,412,412,412,412,763,412,,,,763,763,763,763,763,763,,,,763,763',
'922,922,922,922,922,922,,763,,922,922,,,,922,,922,922,922,922,922,922',
'922,,,,,,922,922,922,922,922,922,922,,,922,,,,,,922,922,,922,922,922',
'922,922,922,922,922,922,,922,922,922,,922,922,,922,922,922,411,,,,,',
',,,,,,,,,,411,411,,922,,,922,,,922,922,,,922,,922,411,,411,922,411,411',
'411,411,,,411,922,411,,,,922,922,922,922,922,922,,,,922,922,774,774',
'774,774,774,774,,922,,774,774,,,,774,,774,774,774,774,774,774,774,,',
',,,774,774,774,774,774,774,774,,,774,,,,,,774,774,,774,774,774,774,774',
'774,774,774,774,,774,774,774,,774,774,,774,774,774,410,410,410,410,410',
'410,410,410,,410,410,,,,,,410,410,,774,,,774,,,774,774,,,774,,774,410',
',410,774,410,410,410,410,410,410,410,774,410,,,,774,774,774,774,774',
'774,,,,774,774,819,819,819,819,819,819,,774,,819,819,,,,819,,819,819',
'819,819,819,819,819,,,,,,819,819,819,819,819,819,819,,,819,,,,,,819',
'819,,819,819,819,819,819,819,819,819,819,,819,819,819,,819,819,,819',
'819,819,408,408,408,408,408,408,408,,,408,408,,,,,,408,408,,819,,,819',
',,819,819,,,819,,819,408,,408,819,408,408,408,408,408,408,408,819,408',
',,,819,819,819,819,819,819,,,,819,819,924,924,924,924,924,924,,819,',
'924,924,,,,924,,924,924,924,924,924,924,924,,,,,,924,924,924,924,924',
'924,924,,,924,,,,,,924,924,,924,924,924,924,924,924,924,924,924,,924',
'924,924,,924,924,,924,924,924,395,395,395,395,395,395,395,,,395,395',
',,,,,395,395,,924,,,924,,,924,924,,,924,,924,395,,395,924,395,395,395',
'395,395,395,395,924,395,,,,924,924,924,924,924,924,,,,924,924,558,558',
'558,558,558,558,,924,,558,558,,,,558,,558,558,558,558,558,558,558,,',
',,,558,558,558,558,558,558,558,,,558,,,,,,558,558,,558,558,558,558,558',
'558,558,558,558,,558,558,558,,558,558,,558,558,558,396,396,396,396,396',
'396,396,396,396,396,396,,396,396,,,396,396,,558,,,558,,,558,558,,,558',
',558,396,,396,558,396,396,396,396,396,396,396,558,396,,,,558,558,558',
'558,558,558,,,,558,558,827,827,827,827,827,827,,558,,827,827,,,,827',
',827,827,827,827,827,827,827,,,,,,827,827,827,827,827,827,827,,,827',
',,,,,827,827,,827,827,827,827,827,827,827,827,827,,827,827,827,,827',
'827,,827,827,827,409,,,,,,,,,,,,,,,,409,409,,827,,,827,,,827,827,,,827',
',827,409,,409,827,409,409,409,409,,,409,827,409,,,,827,827,827,827,827',
'827,,,,827,827,825,825,825,825,825,825,,827,,825,825,,,,825,,825,825',
'825,825,825,825,825,,,,,,825,825,825,825,825,825,825,,,825,,,,,,825',
'825,,825,825,825,825,825,825,825,825,825,,825,825,825,,825,825,,825',
'825,825,393,,,,,,,,,,,,,,,,393,393,,825,,,825,,,825,825,,,825,,825,393',
',,825,393,393,393,393,,,,825,,,,,825,825,825,825,825,825,,,,825,825',
'673,673,673,673,673,673,,825,,673,673,,,,673,,673,673,673,673,673,673',
'673,,,,,,673,673,673,673,673,673,673,,,673,,,,,,673,673,,673,673,673',
'673,673,673,673,673,673,,673,673,673,,673,673,,673,673,673,390,,,,,',
',,,,,,,,,,390,390,,673,,,673,,,673,673,,,673,,673,390,,390,673,390,390',
'390,390,,,,673,,,,,673,673,673,673,673,673,,,,673,673,884,884,884,884',
'884,884,,673,,884,884,,,,884,,884,884,884,884,884,884,884,,,,,,884,884',
'884,884,884,884,884,,,884,,,,,,884,884,,884,884,884,884,884,884,884',
'884,884,,884,884,884,,884,884,,884,884,884,,,,,,,,,,,,,,,,,,,,884,,',
'884,,,884,884,,,884,,884,,,,884,,,,,,,,884,,,,,884,884,884,884,884,884',
',,,884,884,794,794,794,794,794,794,,884,,794,794,,,,794,,794,794,794',
'794,794,794,794,,,,,,794,794,794,794,794,794,794,,,794,,,,,,794,794',
',794,794,794,794,794,794,794,794,794,,794,794,794,,794,794,,794,794',
'794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794,794,,,794,,794,,,,794,,,,,,,',
'794,,,,,794,794,794,794,794,794,,,,794,794,617,617,617,617,617,617,',
'794,,617,617,,,,617,,617,617,617,617,617,617,617,,,,,,617,617,617,617',
'617,617,617,,,617,,,,,,617,617,,617,617,617,617,617,617,617,617,617',
',617,617,617,,617,617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617',
'617,,,617,,617,,,,617,,,,,,,,617,,,,,617,617,617,617,617,617,,,,617',
'617,547,547,547,547,547,547,,617,,547,547,,,,547,,547,547,547,547,547',
'547,547,,,,,,547,547,547,547,547,547,547,,,547,,,,,,547,547,,547,547',
'547,547,547,547,547,547,547,,547,547,547,,547,547,,547,547,547,,,,,',
',,,,,,,,,,,,,,547,,,547,,,547,547,,,547,,547,,,,547,,,,,,,,547,,,,,547',
'547,547,547,547,547,,,,547,547,84,84,84,84,84,84,,547,,84,84,,,,84,',
'84,84,84,84,84,84,84,,,,,,84,84,84,84,84,84,84,,,84,,,,,,84,84,,84,84',
'84,84,84,84,84,84,84,,84,84,84,,84,84,,84,84,84,,,,,,,,,,,,,,,,,,,,84',
',,84,,,84,84,,,84,,84,,,,84,,,,,,,,84,,,,,84,84,84,84,84,84,,,,84,84',
'2,2,2,2,2,2,,84,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,',
',2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2',
',,2,2,,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2,2,275,275,275,,275,',
',2,275,275,,,,275,,275,275,275,275,275,275,275,,,,,,275,275,275,275',
'275,275,275,,,275,,,,,,,275,,,275,275,275,275,275,275,275,275,,275,275',
'275,,275,275,,,,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,,',
',,,,,,,,,,,,,,,275,275,275,275,275,275,,,,275,275,76,76,76,,76,,,275',
'76,76,,,,76,,76,76,76,76,76,76,76,,,,,,76,76,76,76,76,76,76,,,76,,,',
',,,76,,,76,76,76,76,76,76,76,76,,76,76,76,,76,76,,76,76,76,,,,,,,,,',
',,,,,,,,,,76,,,76,,,76,76,,,76,,,,,,76,,,,,,,,76,,,,,76,76,76,76,76',
'76,,,,76,76,482,482,482,,482,,,76,482,482,,,,482,,482,482,482,482,482',
'482,482,,,,,,482,482,482,482,482,482,482,,,482,,,,,,,482,,,482,482,482',
'482,482,482,482,482,482,482,482,482,,482,482,,482,482,482,,,,,,,,,,',
',,,,,,,,,482,,,482,,,482,482,,,482,,482,,482,,482,,,,,,,,482,,,,79,482',
'482,482,482,482,482,79,79,79,482,482,79,79,79,,79,,,482,,,,,,79,79,79',
',,,,,,,,79,79,,79,79,79,79,79,,,,,,,,,,,,,,,,,,,,,,,,79,79,79,79,79',
'79,79,79,79,79,79,79,79,79,,,79,79,79,,,79,,79,79,,,79,79,,79,,79,,79',
',79,79,79,79,79,79,79,,79,79,79,,,,,,,,,,,,,79,79,,79,,79,487,487,487',
',487,,,,487,487,,,,487,,487,487,487,487,487,487,487,,,,,,487,487,487',
'487,487,487,487,,,487,,,,,,,487,,,487,487,487,487,487,487,487,487,,487',
'487,487,,487,487,,,,487,,,,,,,,,,,,,,,,,,,,487,,,487,,,487,487,,,487',
',,,,,,,,,,,,,,,,,,487,487,487,487,487,487,,,,487,487,683,683,683,,683',
',,487,683,683,,,,683,,683,683,683,683,683,683,683,,,,,,683,683,683,683',
'683,683,683,,,683,,,,,,,683,,,683,683,683,683,683,683,683,683,,683,683',
'683,,683,683,,683,683,683,,,,,,,,,,,,,,,,,,,,683,,,683,,,683,683,,,683',
'499,683,499,499,499,683,499,,,,,,,683,,,,72,683,683,683,683,683,683',
'72,72,72,683,683,72,72,72,,72,,,683,,499,499,,,,72,72,,,499,499,499',
'499,,,72,72,,72,72,72,72,72,,,,,,,,,,,,,,,,,,,,,,,,72,72,72,72,72,72',
'72,72,72,72,72,72,72,72,,,72,72,72,,,72,,72,72,,,72,72,,72,,72,,72,',
'72,72,72,72,72,72,72,,72,,72,,,,,,,,,,,,492,72,72,,72,,72,492,492,492',
',,492,492,492,,492,,,,,,,,,,492,,,,,,,,,,492,492,,492,492,492,492,492',
',,,,,383,383,,,383,,,,,,,,,383,383,,383,383,383,383,383,383,383,,,383',
'383,,,492,383,383,383,383,,,492,,,383,,492,492,,,,,383,383,,383,383',
'383,383,383,383,383,383,383,383,383,,,383,492,,,,,,67,67,67,,67,,,492',
'67,67,,,492,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67',
',,,,,,67,,,67,67,67,67,67,67,67,67,67,67,67,67,,67,67,,67,67,67,,,,',
',,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,67,,67,,67,,,,,,,,67,,,,,67,67',
'67,67,67,67,,,,67,67,90,90,90,,90,,,67,90,90,,,,90,,90,90,90,90,90,90',
'90,,,,,,90,90,90,90,90,90,90,,,90,,,,,,,90,,,90,90,90,90,90,90,90,90',
',90,90,90,,90,90,,,,90,,,,,,,,,,,,,,,,,,,,90,,,90,,,90,90,,,90,,90,',
',,,,,,,,,,,,,,,90,90,90,90,90,90,,,,90,90,91,91,91,,91,,,90,91,91,,',
',91,,91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91,91,,,91,,,,,524,,91',
',,91,91,91,91,91,91,91,91,,91,91,91,,91,91,,91,91,91,524,524,524,524',
'524,524,524,524,524,524,524,,524,524,,,524,524,,91,,,91,,,91,91,,,91',
',,524,,524,91,524,524,524,524,524,524,524,91,524,,,,91,91,91,91,91,91',
',,,91,91,91,524,92,92,92,91,92,91,,,92,92,,,,92,,92,92,92,92,92,92,92',
',,,,,92,92,92,92,92,92,92,,,92,,,,,,,92,,,92,92,92,92,92,92,92,92,,92',
'92,92,,92,92,,92,92,92,,,,,,,,,,,,,,,,,,,,92,,,92,,,92,92,,,92,,,,,',
'92,,,,,,,,92,,,,,92,92,92,92,92,92,,,,92,92,95,95,95,,95,,,92,95,95',
',,,95,,95,95,95,95,95,95,95,,,,,,95,95,95,95,95,95,95,,,95,,,,,,,95',
',,95,95,95,95,95,95,95,95,,95,95,95,,95,95,,95,95,95,,,,,,,,,,,,,,,',
',,,,95,,,95,,,95,95,,,95,,,,,,95,,,,,,,,95,,,,,95,95,95,95,95,95,,,',
'95,95,714,714,714,,714,,,95,714,714,,,,714,,714,714,714,714,714,714',
'714,,,,,,714,714,714,714,714,714,714,,,714,,,,,,,714,,,714,714,714,714',
'714,714,714,714,,714,714,714,,714,714,,714,714,714,,,,,,,,,,,,,,,,,',
',,714,,,714,,,714,714,,,714,,,,,,714,,,,,,,,714,,,,,714,714,714,714',
'714,714,,,,714,714,954,954,954,,954,,,714,954,954,,,,954,,954,954,954',
'954,954,954,954,,,,,,954,954,954,954,954,954,954,,,954,,,,,,,954,,,954',
'954,954,954,954,954,954,954,954,954,954,954,,954,954,,954,954,954,,',
',,,,,,,,,,,,,,,,,954,,,954,,,954,954,,,954,,954,,954,,954,,,,,,,,954',
',,,,954,954,954,954,954,954,,,,954,954,65,65,65,,65,,,954,65,65,,,,65',
',65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65',
'65,65,65,65,65,65,,65,65,65,,65,65,,65,65,65,,,,,,,,,,,,,,,,,,,,65,',
',65,,,65,65,,,65,,,,,,65,,,,,,,,65,,,,,65,65,65,65,65,65,,,,65,65,100',
'100,100,,100,,,65,100,100,,,,100,,100,100,100,100,100,100,100,,,,,,100',
'100,100,100,100,100,100,,,100,,,,,,,100,,,100,100,100,100,100,100,100',
'100,100,100,100,100,,100,100,,100,100,100,,,,,,,,,,,,,,,,,,,,100,,,100',
',,100,100,,,100,,100,,,,100,,,,,,,,100,,,,,100,100,100,100,100,100,',
',,100,100,471,471,471,,471,,,100,471,471,,,,471,,471,471,471,471,471',
'471,471,,,,,,471,471,471,471,471,471,471,,,471,,,,,,,471,,,471,471,471',
'471,471,471,471,471,,471,471,471,,471,471,,471,471,471,,,,,,,,,,,,,',
',,,,,,471,,,471,,,471,471,,,471,,,,,,471,,,,,,,,471,,,,,471,471,471',
'471,471,471,,,,471,471,549,549,549,,549,,,471,549,549,,,,549,,549,549',
'549,549,549,549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549',
',,549,549,549,549,549,549,549,549,,549,549,549,,549,549,,549,549,549',
',,,,,,,,,,,,,,,,,,,549,,,549,,,549,549,,,549,,,,,,549,,,,,,,,549,,,',
',549,549,549,549,549,549,,,,549,549,467,467,467,,467,,,549,467,467,',
',,467,,467,467,467,467,467,467,467,,,,,,467,467,467,467,467,467,467',
',,467,,,,,,,467,,,467,467,467,467,467,467,467,467,467,467,467,467,,467',
'467,,467,467,467,,,,,,,,,,,,,,,,,,,,467,,,467,,,467,467,,,467,,,,,,467',
',,,,,,,467,,,,,467,467,467,467,467,467,,,,467,467,460,460,460,,460,',
',467,460,460,,,,460,,460,460,460,460,460,460,460,,,,,,460,460,460,460',
'460,460,460,,,460,,,,,,,460,,,460,460,460,460,460,460,460,460,,460,460',
'460,,460,460,,460,460,460,,,,,,,,,,,,,,,,,,,,460,,,460,,,460,460,,,460',
',,,,,460,,,,,,,,460,,,,,460,460,460,460,460,460,,,,460,460,680,680,680',
',680,,,460,680,680,,,,680,,680,680,680,680,680,680,680,,,,,,680,680',
'680,680,680,680,680,,,680,,,,,,,680,,,680,680,680,680,680,680,680,680',
',680,680,680,,680,680,,680,680,680,,,,,,,,,,,,,,,,,,,,680,,,680,,,680',
'680,,,680,,680,,,,680,,,,,,,,680,,,,,680,680,680,680,680,680,,,,680',
'680,458,458,458,,458,,,680,458,458,,,,458,,458,458,458,458,458,458,458',
',,,,,458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458,458',
'458,458,458,458,458,458,458,,458,458,,458,458,458,,,,,,,,,,,,,,,,,,',
',458,,,458,,,458,458,,,458,,,,458,,458,,,,,,,,458,,,,,458,458,458,458',
'458,458,,,,458,458,457,457,457,,457,,,458,457,457,,,,457,,457,457,457',
'457,457,457,457,,,,,,457,457,457,457,457,457,457,,,457,,,,,,,457,,,457',
'457,457,457,457,457,457,457,,457,457,457,,457,457,,457,457,457,,,,,',
',,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,,,,,457,,,,,,,,457,,,,,457',
'457,457,457,457,457,,,,457,457,455,455,455,,455,,,457,455,455,,,,455',
',455,455,455,455,455,455,455,,,,,,455,455,455,455,455,455,455,,,455',
',,,,,,455,,,455,455,455,455,455,455,455,455,455,455,455,455,,455,455',
',455,455,455,,,,,,,,,,,,,,,,,,,,455,,,455,,,455,455,,,455,,455,,455',
',455,,,,,,,,455,,,,,455,455,455,455,455,455,,,,455,455,453,453,453,',
'453,,,455,453,453,,,,453,,453,453,453,453,453,453,453,,,,,,453,453,453',
'453,453,453,453,,,453,,,,,,,453,,,453,453,453,453,453,453,453,453,,453',
'453,453,,453,453,,453,453,453,,,,,,,,,,,,,,,,,,,,453,,,453,,,453,453',
',,453,,,,,,453,,,,,,,,453,,,,,453,453,453,453,453,453,,,,453,453,450',
'450,450,,450,,,453,450,450,,,,450,,450,450,450,450,450,450,450,,,,,',
'450,450,450,450,450,450,450,,,450,,,,,,,450,,,450,450,450,450,450,450',
'450,450,450,450,450,450,,450,450,,450,450,450,,,,,,,,,,,,,,,,,,,,450',
',,450,,,450,450,,,450,,450,,450,,450,,,,,,,,450,,,,,450,450,450,450',
'450,450,,,,450,450,448,448,448,,448,,,450,448,448,,,,448,,448,448,448',
'448,448,448,448,,,,,,448,448,448,448,448,448,448,,,448,,,,,,,448,,,448',
'448,448,448,448,448,448,448,,448,448,448,,448,448,,448,448,448,,,,,',
',,,,,,,,,,,,,,448,,,448,,,448,448,,,448,,,,,,448,,,,,,,,448,,,,,448',
'448,448,448,448,448,,,,448,448,686,686,686,,686,,,448,686,686,,,,686',
',686,686,686,686,686,686,686,,,,,,686,686,686,686,686,686,686,,,686',
',,,,,,686,,,686,686,686,686,686,686,686,686,,686,686,686,,686,686,,686',
'686,686,,,,,,,,,,,,,,,,,,,,686,,,686,,,686,686,,,686,,,,,,686,,,,,,',
',686,,,,,686,686,686,686,686,686,,,,686,686,122,122,122,,122,,,686,122',
'122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122,122',
'122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122,122,',
'122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,',
',,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,123,123,123',
',123,,,122,123,123,,,,123,,123,123,123,123,123,123,123,,,,,,123,123',
'123,123,123,123,123,,,123,,,,,,,123,,,123,123,123,123,123,123,123,123',
',123,123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123',
'123,,,123,,,,,,123,,,,,,,,123,,,,,123,123,123,123,123,123,,,,123,123',
'124,124,124,,124,,,123,124,124,,,,124,,124,124,124,124,124,124,124,',
',,,,124,124,124,124,124,124,124,,,124,,,,,,,124,,,124,124,124,124,124',
'124,124,124,,124,124,124,,124,124,,124,124,124,,,,,,,,,,,,,,,,,,,,124',
',,124,,,124,124,,,124,,,,,,124,,,,,,,,124,,,,,124,124,124,124,124,124',
',,,124,124,125,125,125,,125,,,124,125,125,,,,125,,125,125,125,125,125',
'125,125,,,,,,125,125,125,125,125,125,125,,,125,,,,,,,125,,,125,125,125',
'125,125,125,125,125,,125,125,125,,125,125,,125,125,125,,,,,,,,,,,,,',
',,,,,,125,,,125,,,125,125,,,125,,,,,,125,,,,,,,,125,,,,,125,125,125',
'125,125,125,,,,125,125,126,126,126,,126,,,125,126,126,,,,126,,126,126',
'126,126,126,126,126,,,,,,126,126,126,126,126,126,126,,,126,,,,,,,126',
',,126,126,126,126,126,126,126,126,,126,126,126,,126,126,,126,126,126',
',,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,,,,,126,,,,,,,,126,,,',
',126,126,126,126,126,126,,,,126,126,127,127,127,,127,,,126,127,127,',
',,127,,127,127,127,127,127,127,127,,,,,,127,127,127,127,127,127,127',
',,127,,,,,,,127,,,127,127,127,127,127,127,127,127,,127,127,127,,127',
'127,,127,127,127,,,,,,,,,,,,,,,,,,,,127,,,127,,,127,127,,,127,,,,,,127',
',,,,,,,127,,,,,127,127,127,127,127,127,,,,127,127,128,128,128,,128,',
',127,128,128,,,,128,,128,128,128,128,128,128,128,,,,,,128,128,128,128',
'128,128,128,,,128,,,,,,,128,,,128,128,128,128,128,128,128,128,,128,128',
'128,,128,128,,128,128,128,,,,,,,,,,,,,,,,,,,,128,,,128,,,128,128,,,128',
',,,,,128,,,,,,,,128,,,,,128,128,128,128,128,128,,,,128,128,129,129,129',
',129,,,128,129,129,,,,129,,129,129,129,129,129,129,129,,,,,,129,129',
'129,129,129,129,129,,,129,,,,,,,129,,,129,129,129,129,129,129,129,129',
',129,129,129,,129,129,,129,129,129,,,,,,,,,,,,,,,,,,,,129,,,129,,,129',
'129,,,129,,,,,,129,,,,,,,,129,,,,,129,129,129,129,129,129,,,,129,129',
'130,130,130,,130,,,129,130,130,,,,130,,130,130,130,130,130,130,130,',
',,,,130,130,130,130,130,130,130,,,130,,,,,,,130,,,130,130,130,130,130',
'130,130,130,,130,130,130,,130,130,,130,130,130,,,,,,,,,,,,,,,,,,,,130',
',,130,,,130,130,,,130,,,,,,130,,,,,,,,130,,,,,130,130,130,130,130,130',
',,,130,130,131,131,131,,131,,,130,131,131,,,,131,,131,131,131,131,131',
'131,131,,,,,,131,131,131,131,131,131,131,,,131,,,,,,,131,,,131,131,131',
'131,131,131,131,131,,131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,',
',,,,,,131,,,131,,,131,131,,,131,,,,,,131,,,,,,,,131,,,,,131,131,131',
'131,131,131,,,,131,131,132,132,132,,132,,,131,132,132,,,,132,,132,132',
'132,132,132,132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,,,132',
',,132,132,132,132,132,132,132,132,,132,132,132,,132,132,,132,132,132',
',,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132,,,,,,132,,,,,,,,132,,,',
',132,132,132,132,132,132,,,,132,132,133,133,133,,133,,,132,133,133,',
',,133,,133,133,133,133,133,133,133,,,,,,133,133,133,133,133,133,133',
',,133,,,,,,,133,,,133,133,133,133,133,133,133,133,,133,133,133,,133',
'133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,,,,,133',
',,,,,,,133,,,,,133,133,133,133,133,133,,,,133,133,134,134,134,,134,',
',133,134,134,,,,134,,134,134,134,134,134,134,134,,,,,,134,134,134,134',
'134,134,134,,,134,,,,,,,134,,,134,134,134,134,134,134,134,134,,134,134',
'134,,134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134,,,134',
',,,,,134,,,,,,,,134,,,,,134,134,134,134,134,134,,,,134,134,135,135,135',
',135,,,134,135,135,,,,135,,135,135,135,135,135,135,135,,,,,,135,135',
'135,135,135,135,135,,,135,,,,,,,135,,,135,135,135,135,135,135,135,135',
',135,135,135,,135,135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135',
'135,,,135,,,,,,135,,,,,,,,135,,,,,135,135,135,135,135,135,,,,135,135',
'136,136,136,,136,,,135,136,136,,,,136,,136,136,136,136,136,136,136,',
',,,,136,136,136,136,136,136,136,,,136,,,,,,,136,,,136,136,136,136,136',
'136,136,136,,136,136,136,,136,136,,136,136,136,,,,,,,,,,,,,,,,,,,,136',
',,136,,,136,136,,,136,,,,,,136,,,,,,,,136,,,,,136,136,136,136,136,136',
',,,136,136,137,137,137,,137,,,136,137,137,,,,137,,137,137,137,137,137',
'137,137,,,,,,137,137,137,137,137,137,137,,,137,,,,,,,137,,,137,137,137',
'137,137,137,137,137,,137,137,137,,137,137,,137,137,137,,,,,,,,,,,,,',
',,,,,,137,,,137,,,137,137,,,137,,,,,,137,,,,,,,,137,,,,,137,137,137',
'137,137,137,,,,137,137,138,138,138,,138,,,137,138,138,,,,138,,138,138',
'138,138,138,138,138,,,,,,138,138,138,138,138,138,138,,,138,,,,,,,138',
',,138,138,138,138,138,138,138,138,,138,138,138,,138,138,,138,138,138',
',,,,,,,,,,,,,,,,,,,138,,,138,,,138,138,,,138,,,,,,138,,,,,,,,138,,,',
',138,138,138,138,138,138,,,,138,138,139,139,139,,139,,,138,139,139,',
',,139,,139,139,139,139,139,139,139,,,,,,139,139,139,139,139,139,139',
',,139,,,,,,,139,,,139,139,139,139,139,139,139,139,,139,139,139,,139',
'139,,139,139,139,,,,,,,,,,,,,,,,,,,,139,,,139,,,139,139,,,139,,,,,,139',
',,,,,,,139,,,,,139,139,139,139,139,139,,,,139,139,140,140,140,,140,',
',139,140,140,,,,140,,140,140,140,140,140,140,140,,,,,,140,140,140,140',
'140,140,140,,,140,,,,,,,140,,,140,140,140,140,140,140,140,140,,140,140',
'140,,140,140,,140,140,140,,,,,,,,,,,,,,,,,,,,140,,,140,,,140,140,,,140',
',,,,,140,,,,,,,,140,,,,,140,140,140,140,140,140,,,,140,140,141,141,141',
',141,,,140,141,141,,,,141,,141,141,141,141,141,141,141,,,,,,141,141',
'141,141,141,141,141,,,141,,,,,,,141,,,141,141,141,141,141,141,141,141',
',141,141,141,,141,141,,141,141,141,,,,,,,,,,,,,,,,,,,,141,,,141,,,141',
'141,,,141,,,,,,141,,,,,,,,141,,,,,141,141,141,141,141,141,,,,141,141',
'142,142,142,,142,,,141,142,142,,,,142,,142,142,142,142,142,142,142,',
',,,,142,142,142,142,142,142,142,,,142,,,,,,,142,,,142,142,142,142,142',
'142,142,142,,142,142,142,,142,142,,142,142,142,,,,,,,,,,,,,,,,,,,,142',
',,142,,,142,142,,,142,,,,,,142,,,,,,,,142,,,,,142,142,142,142,142,142',
',,,142,142,143,143,143,,143,,,142,143,143,,,,143,,143,143,143,143,143',
'143,143,,,,,,143,143,143,143,143,143,143,,,143,,,,,,,143,,,143,143,143',
'143,143,143,143,143,,143,143,143,,143,143,,143,143,143,,,,,,,,,,,,,',
',,,,,,143,,,143,,,143,143,,,143,,,,,,143,,,,,,,,143,,,,,143,143,143',
'143,143,143,,,,143,143,144,144,144,,144,,,143,144,144,,,,144,,144,144',
'144,144,144,144,144,,,,,,144,144,144,144,144,144,144,,,144,,,,,,,144',
',,144,144,144,144,144,144,144,144,,144,144,144,,144,144,,144,144,144',
',,,,,,,,,,,,,,,,,,,144,,,144,,,144,144,,,144,,,,,,144,,,,,,,,144,,,',
',144,144,144,144,144,144,,,,144,144,145,145,145,,145,,,144,145,145,',
',,145,,145,145,145,145,145,145,145,,,,,,145,145,145,145,145,145,145',
',,145,,,,,,,145,,,145,145,145,145,145,145,145,145,,145,145,145,,145',
'145,,145,145,145,,,,,,,,,,,,,,,,,,,,145,,,145,,,145,145,,,145,,,,,,145',
',,,,,,,145,,,,,145,145,145,145,145,145,,,,145,145,146,146,146,,146,',
',145,146,146,,,,146,,146,146,146,146,146,146,146,,,,,,146,146,146,146',
'146,146,146,,,146,,,,,,,146,,,146,146,146,146,146,146,146,146,,146,146',
'146,,146,146,,146,146,146,,,,,,,,,,,,,,,,,,,,146,,,146,,,146,146,,,146',
',,,,,146,,,,,,,,146,,,,,146,146,146,146,146,146,,,,146,146,147,147,147',
',147,,,146,147,147,,,,147,,147,147,147,147,147,147,147,,,,,,147,147',
'147,147,147,147,147,,,147,,,,,,,147,,,147,147,147,147,147,147,147,147',
',147,147,147,,147,147,,147,147,147,,,,,,,,,,,,,,,,,,,,147,,,147,,,147',
'147,,,147,,,,,,147,,,,,,,,147,,,,,147,147,147,147,147,147,,,,147,147',
'148,148,148,,148,,,147,148,148,,,,148,,148,148,148,148,148,148,148,',
',,,,148,148,148,148,148,148,148,,,148,,,,,,,148,,,148,148,148,148,148',
'148,148,148,,148,148,148,,148,148,,148,148,148,,,,,,,,,,,,,,,,,,,,148',
',,148,,,148,148,,,148,,,,,,148,,,,,,,,148,,,,,148,148,148,148,148,148',
',,,148,148,148,150,150,150,,150,,148,,150,150,,,,150,,150,150,150,150',
'150,150,150,,,,,,150,150,150,150,150,150,150,,,150,,,,,,,150,,,150,150',
'150,150,150,150,150,150,,150,150,150,,150,150,,150,150,150,,,,,,,,,',
',,,,,,,,,,150,,,150,,,150,150,,,150,152,,152,152,152,150,152,,,,,,,150',
',,,493,150,150,150,150,150,150,493,493,493,150,150,493,493,493,,493',
',,150,,152,152,,,,493,,,,152,152,152,152,,,493,493,,493,493,493,493',
'493,,,,,,278,278,,,278,,,,,,,,,278,278,,278,278,278,278,278,278,278',
',,278,278,,,493,278,278,278,278,,,493,,,,,493,493,,,,,278,278,,278,278',
'278,278,278,278,278,278,278,278,278,,,278,493,,,,,,688,688,688,,688',
',,493,688,688,,,493,688,,688,688,688,688,688,688,688,,,,,,688,688,688',
'688,688,688,688,,,688,,,,,,,688,,,688,688,688,688,688,688,688,688,,688',
'688,688,,688,688,,688,688,688,,,,,,,,,,,,,,,,,,,,688,,,688,,,688,688',
',,688,,,,,,688,,,,,,,,688,,,,,688,688,688,688,688,688,,,,688,688,689',
'689,689,,689,,,688,689,689,,,,689,,689,689,689,689,689,689,689,,,,,',
'689,689,689,689,689,689,689,,,689,,,,,,,689,,,689,689,689,689,689,689',
'689,689,,689,689,689,,689,689,,689,689,689,,,,,,,,,,,,,,,,,,,,689,,',
'689,,,689,689,,,689,,,,,,689,,,,,,,,689,,,,,689,689,689,689,689,689',
',,,689,689,567,567,567,567,567,,,689,567,567,,,,567,,567,567,567,567',
'567,567,567,,,,,,567,567,567,567,567,567,567,,,567,,,,,,567,567,,567',
'567,567,567,567,567,567,567,567,,567,567,567,,567,567,,567,567,567,',
',,,,,,,,,,,,,,,,,,567,,,567,,,567,567,,,567,,567,,,,567,,,,,,,,567,',
',,,567,567,567,567,567,567,,,,567,567,775,775,775,,775,567,,567,775',
'775,,,,775,,775,775,775,775,775,775,775,,,,,,775,775,775,775,775,775',
'775,,,775,,,,,,,775,,,775,775,775,775,775,775,775,775,,775,775,775,',
'775,775,,775,775,775,,,,,,,,,,,,,,,,,,,,775,,,775,,,775,775,,,775,,',
',,,775,,,,,,,,775,,,,,775,775,775,775,775,775,,,,775,775,240,240,240',
',240,,,775,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240',
'240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240',
',240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240',
'240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240',
'241,241,241,,241,,,240,241,241,,,,241,,241,241,241,241,241,241,241,',
',,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241',
'241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241',
',,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241',
',,,241,241,500,500,500,,500,,,241,500,500,,,,500,,500,500,500,500,500',
'500,500,,,,,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500',
'500,500,500,500,500,,500,500,500,,500,500,,500,500,500,,,,,,,,,,,,,',
',,,,,,500,,,500,,,500,500,,,500,,,,,,500,,,,,,,,500,,,,,500,500,500',
'500,500,500,,,,500,500,52,52,52,,52,,,500,52,52,,,,52,,52,52,52,52,52',
'52,52,,,,,,52,52,52,52,52,52,52,,,52,,,,,,,52,,,52,52,52,52,52,52,52',
'52,,52,52,52,,52,52,,52,52,52,,,,,,,,,,,,,,,,,,,,52,,,52,,,52,52,,,52',
',,,,,52,,,,,,,,52,,,,,52,52,52,52,52,52,,,,52,52,694,694,694,,694,,',
'52,694,694,,,,694,,694,694,694,694,694,694,694,,,,,,694,694,694,694',
'694,694,694,,,694,,,,,,,694,,,694,694,694,694,694,694,694,694,694,694',
'694,694,,694,694,,694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694,694',
',,694,,694,,694,,694,,,,,,,,694,,,,,694,694,694,694,694,694,,,,694,694',
'579,579,579,,579,,,694,579,579,,,,579,,579,579,579,579,579,579,579,',
',,,,579,579,579,579,579,579,579,,,579,,,,,,,579,,,579,579,579,579,579',
'579,579,579,,579,579,579,,579,579,,,,579,,,,,,,,,,,,,,,,,,,,579,,,579',
',,579,579,,,579,,,,,,,,,,,,,,,,,,,579,579,579,579,579,579,,,,579,579',
'48,48,48,,48,,,579,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48',
'48,48,48,,,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48',
'48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,',
'48,48,48,48,48,48,,,,48,48,45,45,45,,45,,,48,45,45,,,,45,,45,45,45,45',
'45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45',
'45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45',
',,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,715,715,715,,715',
',,45,715,715,,,,715,,715,715,715,715,715,715,715,,,,,,715,715,715,715',
'715,715,715,,,715,,,,,,,715,,,715,715,715,715,715,715,715,715,,715,715',
'715,,715,715,,715,715,715,,,,,,,,,,,,,,,,,,,,715,,,715,,,715,715,,,715',
',,,,,715,,,,,,,,715,,,,,715,715,715,715,715,715,,,,715,715,662,662,662',
',662,,,715,662,662,,,,662,,662,662,662,662,662,662,662,,,,,,662,662',
'662,662,662,662,662,,,662,,,,,,,662,,,662,662,662,662,662,662,662,662',
',662,662,662,,662,662,,,,662,,,,,,,,,,,,,,,,,,,,662,,,662,,,662,662',
',,662,,,,,,,,,,,,,,,,,,,662,662,662,662,662,662,,,,662,662,760,760,760',
',760,,,662,760,760,,,,760,,760,760,760,760,760,760,760,,,,,,760,760',
'760,760,760,760,760,,,760,,,,,,,760,,,760,760,760,760,760,760,760,760',
',760,760,760,,760,760,,760,760,760,,,,,,,,,,,,,,,,,,,,760,,,760,,,760',
'760,,,760,,,,,,760,,,,,,,,760,,,,,760,760,760,760,760,760,,,,760,760',
'253,253,253,,253,,,760,253,253,,,,253,,253,253,253,253,253,253,253,',
',,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253',
'253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253',
',,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253',
',,,253,253,254,254,254,,254,,,253,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,',
',,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254',
'254,254,254,,,,254,254,814,814,814,,814,,,254,814,814,,,,814,,814,814',
'814,814,814,814,814,,,,,,814,814,814,814,814,814,814,,,814,,,,,,,814',
',,814,814,814,814,814,814,814,814,,814,814,814,,814,814,,814,814,814',
',,,,,,,,,,,,,,,,,,,814,,,814,,,814,814,,,814,,,,,,814,,,,,,,,814,,,',
',814,814,814,814,814,814,,,,814,814,717,717,717,,717,,,814,717,717,',
',,717,,717,717,717,717,717,717,717,,,,,,717,717,717,717,717,717,717',
',,717,,,,,,,717,,,717,717,717,717,717,717,717,717,,717,717,717,,717',
'717,,,,717,,,,,,,,,,,,,,,,,,,,717,,,717,,,717,717,,,717,,,,,,,,,,,,',
',,,,,,717,717,717,717,717,717,,,,717,717,511,511,511,,511,,,717,511',
'511,,,,511,,511,511,511,511,511,511,511,,,,,,511,511,511,511,511,511',
'511,,,511,,,,,,,511,,,511,511,511,511,511,511,511,511,,511,511,511,',
'511,511,,511,511,511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511,511,,,511,,',
',,,511,,,,,,,,511,,,,,511,511,511,511,511,511,,,,511,511,759,759,759',
',759,,,511,759,759,,,,759,,759,759,759,759,759,759,759,,,,,,759,759',
'759,759,759,759,759,,,759,,,,,,,759,,,759,759,759,759,759,759,759,759',
',759,759,759,,759,759,,759,759,759,,,,,,,,,,,,,,,,,,,,759,,,759,,,759',
'759,,,759,,,,,,759,,,,,,,,759,,,,,759,759,759,759,759,759,,,,759,759',
'592,592,592,,592,,,759,592,592,,,,592,,592,592,592,592,592,592,592,',
',,,,592,592,592,592,592,592,592,,,592,,,,,,,592,,,592,592,592,592,592',
'592,592,592,592,592,592,592,,592,592,,592,592,592,,,,,,,,,,,,,,,,,,',
',592,,,592,,,592,592,,,592,,592,,,,592,,,,,,,,592,,,,,592,592,592,592',
'592,592,,,,592,592,267,267,267,,267,,,592,267,267,,,,267,,267,267,267',
'267,267,267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267',
'267,267,267,267,267,267,267,,267,267,267,,267,267,,,,267,,,,,,,,,,,',
',,,,,,,,267,,,267,,,267,267,,,267,,,,,,,,,,,,,,,,,,,267,267,267,267',
'267,267,,,,267,267,757,757,757,,757,,,267,757,757,,,,757,,757,757,757',
'757,757,757,757,,,,,,757,757,757,757,757,757,757,,,757,,,,,,,757,,,757',
'757,757,757,757,757,757,757,,757,757,757,,757,757,,757,757,757,,,,,',
',,,,,,,,,,,,,,757,,,757,,,757,757,,,757,,,,,,757,,,,,,,,757,,,,,757',
'757,757,757,757,757,,,,757,757,269,269,269,,269,,,757,269,269,,,,269',
',269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269,,,269',
',,,,,,269,,,269,269,269,269,269,269,269,269,,269,269,269,,269,269,,',
',269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,,,,,,,,,,,,,',
'269,269,269,269,269,269,,,,269,269,852,852,852,,852,,,269,852,852,,',
',852,,852,852,852,852,852,852,852,,,,,,852,852,852,852,852,852,852,',
',852,,,,,,,852,,,852,852,852,852,852,852,852,852,,852,852,852,,852,852',
',852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852,,,852,,,,,,852,',
',,,,,,852,,,,,852,852,852,852,852,852,,,,852,852,521,521,521,,521,,',
'852,521,521,,,,521,,521,521,521,521,521,521,521,,,,,,521,521,521,521',
'521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521,521,,521,521',
'521,,521,521,,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521',
',,,,,521,,,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521,756,756,756',
',756,,,521,756,756,,,,756,,756,756,756,756,756,756,756,,,,,,756,756',
'756,756,756,756,756,,,756,,,,,,,756,,,756,756,756,756,756,756,756,756',
',756,756,756,,756,756,,756,756,756,,,,,,,,,,,,,,,,,,,,756,,,756,,,756',
'756,,,756,,,,,,756,,,,,,,,756,,,,,756,756,756,756,756,756,,,,756,756',
'651,651,651,,651,,,756,651,651,,,,651,,651,651,651,651,651,651,651,',
',,,,651,651,651,651,651,651,651,,,651,,,,,,,651,,,651,651,651,651,651',
'651,651,651,651,651,651,651,,651,651,,651,651,651,,,,,,,,,,,,,,,,,,',
',651,,,651,,,651,651,,,651,,651,,651,,651,,,,,,,,651,,,,,651,651,651',
'651,651,651,,,,651,651,382,382,382,,382,,,651,382,382,,,,382,,382,382',
'382,382,382,382,382,,,,,,382,382,382,382,382,382,382,,,382,,,,,,,382',
',,382,382,382,382,382,382,382,382,382,382,382,382,,382,382,,382,382',
'382,,,,,,,,,,,,,,,,,,,,382,,,382,,,382,382,,,382,,382,,382,,382,,,,',
',,,382,,,,,382,382,382,382,382,382,,,,382,382,545,545,545,,545,,,382',
'545,545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545,545,545',
'545,545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,,545,545,545',
',545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,',
',,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545,545,379,379,379',
',379,,,545,379,379,,,,379,,379,379,379,379,379,379,379,,,,,,379,379',
'379,379,379,379,379,,,379,,,,,,,379,,,379,379,379,379,379,379,379,379',
',379,379,379,,379,379,,379,379,379,,,,,,,,,,,,,,,,,,,,379,,,379,,,379',
'379,,,379,,,,,,379,,,,,,,,379,,,,,379,379,379,379,379,379,,,,379,379',
'602,602,602,,602,,,379,602,602,,,,602,,602,602,602,602,602,602,602,',
',,,,602,602,602,602,602,602,602,,,602,,,,,,,602,,,602,602,602,602,602',
'602,602,602,,602,602,602,,602,602,,602,602,602,,,,,,,,,,,,,,,,,,,,602',
',,602,,,602,602,,,602,,,,,,602,,,,,,,,602,,,,,602,602,602,602,602,602',
',,,602,602,374,374,374,,374,,,602,374,374,,,,374,,374,374,374,374,374',
'374,374,,,,,,374,374,374,374,374,374,374,,,374,,,,,,,374,,,374,374,374',
'374,374,374,374,374,,374,374,374,,374,374,,374,374,374,,,,,,,,,,,,,',
',,,,,,374,,,374,,,374,374,,,374,,,,,,374,,,,,,,,374,,,,,374,374,374',
'374,374,374,,,,374,374,372,372,372,,372,,,374,372,372,,,,372,,372,372',
'372,372,372,372,372,,,,,,372,372,372,372,372,372,372,,,372,,,,,,,372',
',,372,372,372,372,372,372,372,372,,372,372,372,,372,372,,372,372,372',
',,,,,,,,,,,,,,,,,,,372,,,372,,,372,372,,,372,,,,,,372,,,,,,,,372,,,',
',372,372,372,372,372,372,,,,372,372,371,371,371,,371,,,372,371,371,',
',,371,,371,371,371,371,371,371,371,,,,,,371,371,371,371,371,371,371',
',,371,,,,,,,371,,,371,371,371,371,371,371,371,371,,371,371,371,,371',
'371,,371,371,371,,,,,,,,,,,,,,,,,,,,371,,,371,,,371,371,,,371,,,,,,371',
',,,,,,,371,,,,,371,371,371,371,371,371,,,,371,371,720,720,720,,720,',
',371,720,720,,,,720,,720,720,720,720,720,720,720,,,,,,720,720,720,720',
'720,720,720,,,720,,,,,,,720,,,720,720,720,720,720,720,720,720,,720,720',
'720,,720,720,,720,720,720,,,,,,,,,,,,,,,,,,,,720,,,720,,,720,720,,,720',
',720,,,,720,,,,,,,,720,,,,,720,720,720,720,720,720,,,,720,720,634,634',
'634,,634,,,720,634,634,,,,634,,634,634,634,634,634,634,634,,,,,,634',
'634,634,634,634,634,634,,,634,,,,,,,634,,,634,634,634,634,634,634,634',
'634,,634,634,634,,634,634,,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634',
',,634,634,,,634,,,,,,634,,,,,,,,634,,,,,634,634,634,634,634,634,,,,634',
'634,695,695,695,,695,,,634,695,695,,,,695,,695,695,695,695,695,695,695',
',,,,,695,695,695,695,695,695,695,,,695,,,,,,,695,,,695,695,695,695,695',
'695,695,695,695,695,695,695,,695,695,,695,695,695,,,,,,,,,,,,,,,,,,',
',695,,,695,,,695,695,,,695,,,,695,,695,,,,,,,,695,,,,,695,695,695,695',
'695,695,,,,695,695,696,696,696,,696,,,695,696,696,,,,696,,696,696,696',
'696,696,696,696,,,,,,696,696,696,696,696,696,696,,,696,,,,,,,696,,,696',
'696,696,696,696,696,696,696,,696,696,696,,696,696,,696,696,696,,,,,',
',,,,,,,,,,,,,,696,,,696,,,696,696,,,696,,,,,,696,,,,,,,,696,,,,,696',
'696,696,696,696,696,,,,696,696,861,861,861,,861,,,696,861,861,,,,861',
',861,861,861,861,861,861,861,,,,,,861,861,861,861,861,861,861,,,861',
',,,,,,861,,,861,861,861,861,861,861,861,861,,861,861,861,,861,861,,',
',861,,,,,,,,,,,,,,,,,,,,861,,,861,,,861,861,,,861,,,,,,,,,,,,,,,,,,',
'861,861,861,861,861,861,,,,861,861,730,730,730,,730,,,861,730,730,,',
',730,,730,730,730,730,730,730,730,,,,,,730,730,730,730,730,730,730,',
',730,,,,,,,730,,,730,730,730,730,730,730,730,730,,730,730,730,,730,730',
',730,730,730,,,,,,,,,,,,,,,,,,,,730,,,730,,,730,730,,,730,,,,,,730,',
',,,,,,730,,,,,730,730,730,730,730,730,,,,730,730,26,26,26,,26,,,730',
'26,26,,,,26,,26,26,26,26,26,26,26,,,,,,26,26,26,26,26,26,26,,,26,,,',
',,,26,,,26,26,26,26,26,26,26,26,,26,26,26,,26,26,,,,26,,,,,,,,,,,,,',
',,,,,,26,,,26,,,26,26,,,26,,,,,,,,,,,,,,,,,,530,26,26,26,26,26,26,530',
'530,530,26,26,530,530,530,26,530,,,26,,,,,,530,530,530,,,,,,,,,530,530',
',530,530,530,530,530,,,,,,,,,,,,,,,,,,,,,,,,530,530,530,530,530,530',
'530,530,530,530,530,530,530,530,,,530,530,530,,,530,,530,530,,,530,530',
',530,,530,,530,,530,530,530,530,530,530,530,,530,530,530,,,,,,,,,,,',
',530,530,,530,,530,625,625,625,,625,,,,625,625,,,,625,,625,625,625,625',
'625,625,625,,,,,,625,625,625,625,625,625,625,,,625,,,,,,,625,,,625,625',
'625,625,625,625,625,625,,625,625,625,,625,625,,625,625,625,,,,,,,,,',
',,,,,,,,,,625,,,625,,,625,625,,,625,,,,,,625,,,,,,,,625,,,,,625,625',
'625,625,625,625,,,,625,625,362,362,362,,362,,,625,362,362,,,,362,,362',
'362,362,362,362,362,362,,,,,,362,362,362,362,362,362,362,,,362,,,,,',
',362,,,362,362,362,362,362,362,362,362,,362,362,362,,362,362,,,,362',
',,,,,,,,,,,,,,,,,,,362,,,362,,,362,362,,,362,,,,,,,,,,,,,,,,,,,362,362',
'362,362,362,362,,,,362,362,346,346,346,362,346,,,362,346,346,,,,346',
',346,346,346,346,346,346,346,,,,,,346,346,346,346,346,346,346,,,346',
',,,,,,346,,,346,346,346,346,346,346,346,346,346,346,346,346,,346,346',
',346,346,346,,,,,,,,,,,,,,,,,,,,346,,,346,,,346,346,,,346,,346,,346',
',346,,,,,,,,346,,,,,346,346,346,346,346,346,,,,346,346,872,872,872,',
'872,,,346,872,872,,,,872,,872,872,872,872,872,872,872,,,,,,872,872,872',
'872,872,872,872,,,872,,,,,,,872,,,872,872,872,872,872,872,872,872,,872',
'872,872,,872,872,,,,872,,,,,,,,,,,,,,,,,,,,872,,,872,,,872,872,,,872',
',,,,,,,,,,,,,,,,,,872,872,872,872,872,872,,,,872,872,19,19,19,,19,,',
'872,19,19,,,,19,,19,19,19,19,19,19,19,,,,,,19,19,19,19,19,19,19,,,19',
',,,,,,19,,,19,19,19,19,19,19,19,19,19,19,19,19,,19,19,,19,19,19,,,,',
',,,,,,,,,,,,,,,19,,,19,,,19,19,,,19,,19,,19,,19,,,,,,,,19,,,,,19,19',
'19,19,19,19,,,,19,19,16,16,16,16,16,,,19,16,16,,,,16,,16,16,16,16,16',
'16,16,,,,,,16,16,16,16,16,16,16,,,16,,,,,,16,16,16,16,16,16,16,16,16',
'16,16,16,,16,16,16,,16,16,,16,16,16,,,,,,,,,,,,,,,,,,,,16,,,16,,,16',
'16,,,16,,16,,,,16,,,,,,,,16,,,,,16,16,16,16,16,16,,,,16,16,807,807,807',
',807,,,16,807,807,,,,807,,807,807,807,807,807,807,807,,,,,,807,807,807',
'807,807,807,807,,,807,,,,,,,807,,,807,807,807,807,807,807,807,807,,807',
'807,807,,807,807,,807,807,807,,,,,,,,,,,,,,,,,,,,807,,,807,,,807,807',
',,807,,,,,,807,,,,,,,,807,,,,,807,807,807,807,807,807,,,,807,807,309',
'309,309,,309,,,807,309,309,,,,309,,309,309,309,309,309,309,309,,,,,',
'309,309,309,309,309,309,309,,,309,,,,,,,309,,,309,309,309,309,309,309',
'309,309,,309,309,309,,309,309,,309,309,309,,,,,,,,,,,,,,,,,,,,309,,',
'309,,,309,309,,,309,,309,,,,309,,,,,,,,309,,,,,309,309,309,309,309,309',
',,,309,309,13,13,13,,13,,,309,13,13,,,,13,,13,13,13,13,13,13,13,,,,',
',13,13,13,13,13,13,13,,,13,,,,,,,13,,,13,13,13,13,13,13,13,13,13,13',
'13,13,,13,13,,13,13,13,,,,,,,,,,,,,,,,,,,,13,,,13,,,13,13,,,13,,,,,',
'13,,,,,,,,13,,,,,13,13,13,13,13,13,,,,13,13,314,314,314,,314,,,13,314',
'314,,,,314,,314,314,314,314,314,314,314,,,,,,314,314,314,314,314,314',
'314,,,314,,,,,,,314,,,314,314,314,314,314,314,314,314,,314,314,314,',
'314,314,,314,314,314,,,,,,,,,,,,,,,,,,,,314,,,314,314,,314,314,,,314',
',,,,,314,,,,,,,,314,,,,,314,314,314,314,314,314,,,,314,314,889,889,889',
',889,,,314,889,889,,,,889,,889,889,889,889,889,889,889,,,,,,889,889',
'889,889,889,889,889,,,889,,,,,,,889,,,889,889,889,889,889,889,889,889',
',889,889,889,,889,889,,889,889,889,,,,,,,,,,,,,,,,,,,,889,,,889,,,889',
'889,,,889,,889,,,,889,,,,,,,,889,,,,,889,889,889,889,889,889,,,,889',
'889,316,316,316,316,316,,,889,316,316,,,,316,,316,316,316,316,316,316',
'316,,,,,,316,316,316,316,316,316,316,,,316,,,,,,316,316,316,316,316',
'316,316,316,316,316,316,316,,316,316,316,,316,316,,316,316,316,,,,,',
',,,,,,,,,,,,,,316,,,316,,,316,316,,,316,,316,,,,316,,,,,,,,316,,,,,316',
'316,316,316,316,316,,,,316,316,321,321,321,,321,316,,316,321,321,,,',
'321,,321,321,321,321,321,321,321,,,,,,321,321,321,321,321,321,321,,',
'321,,,,,,,321,,,321,321,321,321,321,321,321,321,,321,321,321,,321,321',
',321,321,321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,,321,,,,,,321,',
',,,,,,321,,,,,321,321,321,321,321,321,,,,321,321,12,12,12,,12,,,321',
'12,12,,,,12,,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,,,12,,,',
',,,12,,,12,12,12,12,12,12,12,12,12,12,12,12,,12,12,,12,12,12,,,,,,,',
',,,,,,,,,,,,12,,,12,,,12,12,,,12,,12,,12,,12,,,,,,,,12,,,,,12,12,12',
'12,12,12,,,,12,12,354,354,354,354,354,,,12,354,354,,,,354,,354,354,354',
'354,354,354,354,,,,,,354,354,354,354,354,354,354,,,354,,,,,,354,354',
',354,354,354,354,354,354,354,354,354,,354,354,354,,354,354,,354,354',
'354,,,,,,,,,,,,,,,,,,,,354,,,354,,,354,354,,,354,,354,,,,354,,,,,,,',
'354,,,,,354,354,354,354,354,354,,,,354,354,325,325,325,,325,,,354,325',
'325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325,325,325,325',
'325,,,325,,,,,,,325,,,325,325,325,325,325,325,325,325,325,325,325,325',
',325,325,,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,,,325,325,,,325,',
'325,,325,,325,,,,,,,,325,,,,,325,325,325,325,325,325,,,,325,325,697',
'697,697,,697,,,325,697,697,,,,697,,697,697,697,697,697,697,697,,,,,',
'697,697,697,697,697,697,697,,,697,,,,,,,697,,,697,697,697,697,697,697',
'697,697,,697,697,697,,697,697,,697,697,697,,,,,,,,,,,,,,,,,,,,697,,',
'697,,,697,697,,,697,,,,,,697,,,,,,,,697,,,,,697,697,697,697,697,697',
',,,697,697,5,5,5,,5,,,697,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5',
',,5,,,,,,,5,,,5,5,5,5,5,5,5,5,,5,5,5,,5,5,,,,5,,,,,,,,,,,,,,,,,,,,5',
',,5,,,5,5,,,5,,5,,,,,,,,,,,,,,,,,5,5,5,5,5,5,,,,5,5,796,796,796,,796',
',,5,796,796,,,,796,,796,796,796,796,796,796,796,,,,,,796,796,796,796',
'796,796,796,,,796,,,,,,,796,,,796,796,796,796,796,796,796,796,,796,796',
'796,,796,796,,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796',
',,,,,796,,,,,,,,796,,,,,796,796,796,796,796,796,,,,796,796,352,352,352',
'352,352,,,796,352,352,,,,352,,352,352,352,352,352,352,352,,,,,,352,352',
'352,352,352,352,352,,,352,,,,,,352,352,,352,352,352,352,352,352,352',
'352,352,,352,352,352,,352,352,,352,352,352,,,,,,,,,,,,,,,,,,,,352,,',
'352,,,352,352,,,352,,352,,,,352,,,,,,,,352,,,,,352,352,352,352,352,352',
',,,352,352,351,351,351,,351,,,352,351,351,,,,351,,351,351,351,351,351',
'351,351,,,,,,351,351,351,351,351,351,351,,,351,,,,,,,351,,,351,351,351',
'351,351,351,351,351,,351,351,351,,351,351,,351,351,351,,,,,,,,,,,,,',
',,,,,,351,,,351,,,351,351,,,351,,,,,,351,,,,,,,,351,,,,,351,351,351',
'351,351,351,,,,351,351,544,544,544,,544,,,351,544,544,,,,544,,544,544',
'544,544,544,544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,,,544',
',,544,544,544,544,544,544,544,544,,544,544,544,,544,544,,544,544,544',
',,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,,,,,544,,,,,,,,544,,,',
',544,544,544,544,544,544,,,,544,544,350,350,350,,350,,,544,350,350,',
',,350,,350,350,350,350,350,350,350,,,,,,350,350,350,350,350,350,350',
',,350,,,,,,,350,,,350,350,350,350,350,350,350,350,,350,350,350,,350',
'350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,,,350,350,,,350,,,,,,350',
',,,,,,,350,,,,,350,350,350,350,350,350,,,,350,350,881,881,881,,881,',
',350,881,881,,,,881,,881,881,881,881,881,881,881,,,,,,881,881,881,881',
'881,881,881,,,881,,,,,,,881,,,881,881,881,881,881,881,881,881,881,881',
'881,881,,881,881,,881,881,881,,,,,,,,,,,,,,,,,,,,881,,,881,,,881,881',
',,881,,,,881,,881,,,,,,,,881,,,,,881,881,881,881,881,881,,,,881,881',
'335,335,335,,335,,,881,335,335,,,,335,,335,335,335,335,335,335,335,',
',,,,335,335,335,335,335,335,335,,,335,,,,,,,335,,,335,335,335,335,335',
'335,335,335,335,335,335,335,,335,335,,335,335,335,,,,,,,,,,,,,,,,,,',
',335,,,335,,,335,335,,,335,,335,,335,,335,,,,,,,,335,,,,,335,335,335',
'335,335,335,,,,335,335,349,349,349,,349,,,335,349,349,,,,349,,349,349',
'349,349,349,349,349,,,,,,349,349,349,349,349,349,349,,,349,,,,,,,349',
',,349,349,349,349,349,349,349,349,,349,349,349,,349,349,,349,349,349',
',,,,,,,,,,,,,,,,,,,349,,,349,,,349,349,,,349,,,,,,349,,,,,,,,349,,,',
',349,349,349,349,349,349,,,,349,349,341,341,341,,341,,,349,341,341,',
',,341,,341,341,341,341,341,341,341,,,,,,341,341,341,341,341,341,341',
',,341,,,,,,,341,,,341,341,341,341,341,341,341,341,341,341,341,341,,341',
'341,,341,341,341,,,,,,,,,,,,,,,,,,,,341,,,341,,,341,341,,,341,,341,',
'341,,341,,,,,,,,341,,,,,341,341,341,341,341,341,,,,341,341,341,348,348',
'348,,348,,341,,348,348,,,,348,,348,348,348,348,348,348,348,,,,,,348',
'348,348,348,348,348,348,,,348,,,,,,,348,,,348,348,348,348,348,348,348',
'348,,348,348,348,,348,348,,348,348,348,,,,,,,,,,,,,,,,,,,,348,,,348',
',,348,348,,,348,,,,,,348,,,,,,,,348,,,,,348,348,348,348,348,348,,,,348',
'348,344,344,344,,344,,,348,344,344,,,,344,,344,344,344,344,344,344,344',
',,,,,344,344,344,344,344,344,344,,,344,,,,,,,344,,,344,344,344,344,344',
'344,344,344,,344,344,344,,344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344',
',,344,,,344,344,,,344,,,,,,344,,,,,,,,344,,,,,344,344,344,344,344,344',
',,,344,344,361,361,361,,361,,,344,361,361,,,,361,,361,361,361,361,361',
'361,361,,,,,,361,361,361,361,361,361,361,,,361,,,,,573,,361,,,361,361',
'361,361,361,361,361,361,,361,361,361,,361,361,,361,361,361,573,573,573',
'573,573,573,573,573,573,573,573,,573,573,,,573,573,,361,,,361,,,361',
'361,,,361,,361,573,,573,361,573,573,573,573,573,573,573,361,573,,,,361',
'361,361,361,361,361,,,,361,361,,573,,573,,,,361,44,44,44,44,44,44,44',
'44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,,,,44,44,44,44,44',
'44,44,44,44,44,,,,,,44,44,44,44,44,44,44,44,44,44,,44,,,,,,,,,44,44',
',44,44,44,44,44,44,44,,,44,44,,,,44,44,44,44,,,,,,,,,,,,,,44,44,,44',
'44,44,44,44,44,44,44,44,44,44,,,44,44,,,,,,,,,,44,677,677,677,677,677',
'677,677,677,677,677,677,677,677,677,677,677,677,677,677,677,677,677',
'677,677,,,,677,677,677,677,677,677,677,677,677,677,,,,,,677,677,677',
'677,677,677,677,677,677,,,677,,,,,,,,,677,677,,677,677,677,677,677,677',
'677,,,677,677,,,,677,677,677,677,,,,,,,,,,,,,,677,677,,677,677,677,677',
'677,677,677,677,677,677,677,,,677,677,,,,,,,,,,677,516,516,516,516,516',
'516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516',
'516,516,,,,516,516,516,516,516,516,516,516,516,516,,,,,,516,516,516',
'516,516,516,516,516,516,,,516,,,,,,,,,516,516,,516,516,516,516,516,516',
'516,,,516,516,,,,516,516,516,516,,,,,,,,,,,,,,516,516,,516,516,516,516',
'516,516,516,516,516,516,516,,,516,516,,,,,,,,,,516,36,36,36,36,36,36',
'36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,,,,36,36,36,36',
'36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,36,36,,,36,,,,,,,,,36,36',
',36,36,36,36,36,36,36,,,36,36,,,,36,36,36,36,,,,,,,,,,,,,,36,36,,36',
'36,36,36,36,36,36,36,36,36,36,,,36,36,,,,,,,,,,36,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11',
'11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,11,11,,11,,,,,',
',11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11',
'11,,11,11,11,11,11,11,11,11,11,11,11,,,11,670,670,670,670,670,670,670',
'670,670,670,670,670,670,670,670,670,670,670,670,670,670,670,670,670',
',,,670,670,670,670,670,670,670,670,670,670,,,,,,670,670,670,670,670',
'670,670,670,670,,,670,,,,,,,,,670,670,,670,670,670,670,670,670,670,',
',670,670,,,,670,670,670,670,,,,,,,,,,,,,,670,670,,670,670,670,670,670',
'670,670,670,670,670,670,,,670,32,32,32,32,32,32,32,32,32,32,32,32,32',
'32,32,32,32,32,32,32,32,32,32,32,,,,32,32,32,32,32,32,32,32,32,32,,',
',,,32,32,32,32,32,32,32,32,32,32,32,32,,32,,,,,,,32,32,,32,32,32,32',
'32,32,32,,,32,32,,,,32,32,32,32,,,,,,32,637,,,,,,,32,32,,32,32,32,32',
'32,32,32,32,32,32,32,,,32,637,637,637,637,637,637,637,637,637,637,637',
',637,637,,,637,637,,,,,,,,,,,,,,,637,,637,,637,637,637,637,637,637,637',
',637,949,949,,,949,,,,,,,,,949,949,637,949,949,949,949,949,949,949,',
',949,949,,,,949,949,949,949,,,,,,949,,,,,,,,949,949,,949,949,949,949',
'949,949,949,949,949,949,949,326,326,949,,326,,,,,,,,,326,326,,326,326',
'326,326,326,326,326,,,326,326,,,,326,326,326,326,,,,,,326,,,,,,,,326',
'326,,326,326,326,326,326,326,326,326,326,326,326,652,652,326,,652,,',
',,,,,,652,652,,652,652,652,652,652,652,652,,,652,652,,,,652,652,652',
'652,,,,,,652,,,,,,,,652,652,,652,652,652,652,652,652,652,652,652,652',
'652,953,953,652,,953,,,,,,,,,953,953,,953,953,953,953,953,953,953,,',
'953,953,,,,953,953,953,953,,,,,,953,,,,,,,,953,953,,953,953,953,953',
'953,953,953,953,953,953,953,481,481,953,,481,,,,,,,,,481,481,,481,481',
'481,481,481,481,481,,,481,481,,,,481,481,481,481,,,,,,481,,,,,,,,481',
'481,,481,481,481,481,481,481,481,481,481,481,481,483,483,481,,483,,',
',,,,,,483,483,,483,483,483,483,483,483,483,,,483,483,,,,483,483,483',
'483,,,,,,483,,,,,,,,483,483,,483,483,483,483,483,483,483,483,483,483',
'483,277,277,483,,277,,,,,,,,,277,277,,277,277,277,277,277,277,277,,',
'277,277,,,,277,277,277,277,,,,,,,,,,,,,,277,277,,277,277,277,277,277',
'277,277,277,277,277,277,324,324,277,,324,,,,,,,,,324,324,,324,324,324',
'324,324,324,324,,,324,324,,,,324,324,324,324,,,,,,324,,,,,,,,324,324',
',324,324,324,324,324,324,324,324,324,324,324,464,464,324,,464,,,,,,',
',,464,464,,464,464,464,464,464,464,464,,,464,464,,,,464,464,464,464',
',,,,,464,,,,,,,,464,464,,464,464,464,464,464,464,464,464,464,464,464',
'463,463,464,,463,,,,,,,,,463,463,,463,463,463,463,463,463,463,,,463',
'463,,,,463,463,463,463,,,,,,463,,,,,,,,463,463,,463,463,463,463,463',
'463,463,463,463,463,463,650,650,463,,650,,,,,,,,,650,650,,650,650,650',
'650,650,650,650,,,650,650,,,,650,650,650,650,,,,,,650,,,,,,,,650,650',
',650,650,650,650,650,650,650,650,650,650,650,381,381,650,,381,,,,,,',
',,381,381,,381,381,381,381,381,381,381,,,381,381,,,,381,381,381,381',
',,,,,381,,,,,,,,381,381,,381,381,381,381,381,381,381,381,381,381,381',
'451,451,381,,451,,,,,,,,,451,451,,451,451,451,451,451,451,451,,,451',
'451,,,,451,451,451,451,,,,,,451,,,,,,,,451,451,,451,451,451,451,451',
'451,451,451,451,451,451,955,955,451,,955,,,,,,,,,955,955,,955,955,955',
'955,955,955,955,,,955,955,,,,955,955,955,955,,,,,,955,,,,,,,,955,955',
',955,955,955,955,955,955,955,955,955,955,955,449,449,955,,449,,,,,,',
',,449,449,,449,449,449,449,449,449,449,,,449,449,,,,449,449,449,449',
',,,,,449,,,,,,,,449,449,,449,449,449,449,449,449,449,449,449,449,449',
',,449,811,811,811,811,811,811,811,811,811,811,811,,811,811,,,811,811',
',,,,,,,,,,,,,,811,,811,,811,811,811,811,811,811,811,,811,801,801,801',
'801,801,801,801,801,801,801,801,,801,801,,811,801,801,,,,,,,,,,,,,,',
'801,,801,,801,801,801,801,801,801,801,,801,829,829,829,829,829,829,829',
'829,829,829,829,,829,829,,801,829,829,,,,,,,,,,,,,,,829,,829,,829,829',
'829,829,829,829,829,,829,799,799,799,799,799,799,799,799,799,799,799',
',799,799,,829,799,799,,,,,,,,,,,,,,,799,,799,,799,799,799,799,799,799',
'799,,799,821,821,821,821,821,821,821,821,821,821,821,,821,821,,799,821',
'821,,,,,,,,,,,,,,,821,,821,,821,821,821,821,821,821,821,,821,705,705',
'705,705,705,705,705,705,705,705,705,,705,705,,821,705,705,,,,,,,,,,',
',,,,705,,705,,705,705,705,705,705,705,705,,705,6,6,6,6,6,6,6,6,6,6,6',
',6,6,,705,6,6,,,,,,,,,,,,,,,6,,6,,6,6,6,6,6,6,6,,6,809,809,809,809,809',
'809,809,809,809,809,809,,809,809,,6,809,809,,,,,,,,,,,,,,,809,,809,',
'809,809,809,809,809,809,809,,809,803,803,803,803,803,803,803,803,803',
'803,803,,803,803,,809,803,803,,,,,,,,,,,,,,,803,,803,,803,803,803,803',
'803,803,803,,803,235,235,235,235,235,235,235,235,235,235,235,,235,235',
',803,235,235,,,,,,,,,,,,,,,235,,235,,235,235,235,235,235,235,235,,235',
'401,401,401,401,401,401,401,401,401,401,401,,401,401,,235,401,401,,',
',,,,,,,,,,,,401,,401,,401,401,401,401,401,401,401,,401,879,879,879,879',
'879,879,879,879,879,879,879,,879,879,401,401,879,879,,,,,,,,,,,,,,,879',
',879,,879,879,879,879,879,879,879,,879,520,520,520,520,520,520,520,520',
'520,520,520,,520,520,,879,520,520,,,,,,,,,,,,,,,520,,520,,520,520,520',
'520,520,520,520,,520,559,559,559,559,559,559,559,559,559,559,559,,559',
'559,,520,559,559,,,,,,,,,,,,,,,559,,559,,559,559,559,559,559,559,559',
',559,,,,,,,,,,,,,,,,559' ]
        racc_action_check = arr = ::Array.new(23573, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    82,  4664,  1357,   nil, 19506, 23130,    99,   430,   nil,
   nil, 21623, 19010, 18390,  1322,   308, 18018,   nil,   nil, 17894,
   nil,   nil,  1252,   nil,   nil,   nil, 17154,   461,   nil,   nil,
   nil,   nil, 21849,   nil,   nil,  1201, 21499,   nil,   nil,  1183,
   nil,   nil,   nil,  1168, 21127, 13310,   nil,   nil, 13186,  1146,
   nil,   nil, 12814,   563,   nil,  1178,   nil,   350,   nil,  1278,
  1151,   676,   nil,   nil,   nil,  6630,  1204,  5760,   132,   nil,
   nil,   nil,  5518,  1068,   nil,    56,  4912,   nil,   309,  5150,
   nil,   nil,     0,  1455,  4539,  1123,   nil,   900,   nil,   nil,
  5884,  6008,  6134,   nil,   nil,  6258,   765,  1117,   255,   nil,
  6754,   nil,   nil,   nil,  1154,    90,   nil,    99,   nil,   nil,
  1108,   681,   731,  1178,   nil,     0,  1134,   nil,   116,  1120,
   nil,  1168,  8366,  8490,  8614,  8738,  8862,  8986,  9110,  9234,
  9358,  9482,  9606,  9730,  9854,  9978, 10102, 10226, 10350, 10474,
 10598, 10722, 10846, 10970, 11094, 11218, 11342, 11466, 11590,   nil,
 11715,   nil, 11761,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   508,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil, 23265,    55,   nil,   nil,    49,
 12442, 12566,  1103,   860,  1133,   nil,   nil,   173,  1049,  2789,
  1041,  1043,  1083, 13806, 13930,  1042,  1066,   nil,  1064,    49,
   nil,   nil,   nil,   nil,   511,   nil,   nil, 14674,   313, 14922,
  1095,  1153,  1167,  1094,  1267,  4788,   993, 22324, 11827,   nil,
   541,   nil,   nil,   440,   nil,   nil,   648,   625,   293,   488,
   587,   nil,   605,   613,   562,   236,   nil,   281,   969,   nil,
   950,   nil,   nil,   nil,   nil,   nil,    40,   942,  1289, 18266,
   nil,   388,   nil,   nil, 18514,   993, 18762,   nil,   nil,   nil,
   nil, 18886,   942,   nil, 22385, 19258, 22019,  2164,   969,   968,
   144,   155,   313,   nil,   913, 20374,   nil,   nil,   910,   nil,
   nil, 20622,   nil,    34, 20871,   nil, 17646,   nil, 20747, 20498,
 20126, 19878, 19754,   446, 19134,   nil,   857,   864,   980,  1539,
   898, 20995, 17522,  1789,   858,   395,   965,   830,   nil,   nil,
   599, 16286, 16162,   nil, 16038,   nil,   865,   164,   248, 15790,
   865, 22629, 15542,  5641,   nil,   nil,   137,   nil,  2289,   884,
  3914,   863,  2039,  3789,  2664,  3414,  3539,  2789,   857,  2414,
   843, 23310,   602,  2164,   441,   853,  2539,   701,  3289,  3664,
  3164,  3039,  2914,   572,   nil,   158,   814,   nil,   nil,   nil,
   nil,   774,   nil,   nil,   774,    62,   nil,   nil,   nil,   765,
  1716,   842,   763,   nil,   840,   nil,   754,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  8118, 22812,
  7994, 22690,   213,  7870,   nil,  7746,   nil,  7622,  7498,   nil,
  7250,   nil,   nil, 22507, 22446,   nil,   nil,  7126,   235,   nil,
   nil,  6878,   nil,    55,  1069,   165,   nil,   484,   393,   nil,
   nil, 22202,  5036, 22263,   817,   nil,   751,  5280,   nil,   nil,
   nil,   nil,  5643, 11829,   nil,   nil,   nil,   nil,   nil,  5450,
 12690,   nil,   309,   nil,   nil,   nil,   nil,   738,   nil,   857,
   853, 14302,   nil,   730,   nil,   728, 21375,   nil,   nil,   nil,
 23400, 15170,   nil,   nil,  6008,   nil,  2039,   218,   280,   nil,
 17268,   725,   nil,   nil,   707,   704,   645,   130,   770,  1030,
   nil,   nil,   742,   713, 20002, 15666,   nil,  4414,   807,  7002,
   nil,   nil,   nil,   227,   242,   nil,   655,   nil,  3539, 23445,
   nil,   643,   nil,   nil,   nil,   nil,   nil, 12194,   nil,  1414,
   633,   621,   nil, 20995,   nil,   nil,   610,   nil,   nil, 13062,
   612,   531,   nil,   635,   nil,   639,   501,   nil,   nil,   121,
   nil,   nil, 14550,   nil,   122,   125,   129,   535,   491,   159,
   121,   521, 15914,   409,   nil,   nil,   nil,  1591,   378,   613,
   nil,   nil,   nil,   369,   258,  1914,   nil,  4289,   nil,  1966,
   354,   nil,   nil,  1436,   nil, 17398,  1664,  1147,    77,   202,
   351,   515,   385,   nil, 16534,   303,   341, 21897,   nil,   nil,
   nil,   nil,   nil,   nil,   449,   414,   629,   nil,   nil,   nil,
 22568, 15418, 22080,  1157,   nil,   nil,     0,   279,    97,   281,
  1038,   355, 13558,   216,   nil,   nil,   nil,   nil,   nil,   nil,
 21736,  1841,   578,  3914,   250,   nil,   nil, 21251,   nil,   nil,
  7374,   306,   189,  5404,   nil,   114,  8242,   203, 11946, 12070,
   133,   nil,   123,   288, 12938, 16658, 16782, 19382,    96,   nil,
   nil,   858,   109,   808,   nil, 23085,   282,   nil,   nil,   nil,
   260,   nil,  1442,   346,  6382, 13434,   236, 14178,   nil,   411,
 16410,   nil,   nil,   nil,   nil,   nil,   290,   nil,    98,   154,
 17030,   nil,   370,   372,   nil,   710,   409,   nil,   893,   424,
   448,   555,   452,   nil,   476,   nil,   481,  1275,   484,   nil,
   502,   nil,   nil,   nil,   nil,   nil, 15294, 14798,   220, 14426,
 13682,   nil,   nil,  2914,   529,   551,   nil,   563,   571,   nil,
   592,   625,   609,   nil,  3164, 12318,   631,  1142,   nil,   485,
   764,   294,   nil,   nil,   664,   nil,   785,   nil,   nil,   715,
   nil,   nil,   686,   nil,  4164,   816, 19630,   701,   nil, 22995,
   nil, 22905,   nil, 23220,   nil,   nil,   nil, 18142,   727, 23175,
   nil, 22860,   nil,   nil, 14054,   853,   nil,   nil,  2664,  3289,
   861, 23040,   756,   nil,   147,  3789,   nil,  3664,   nil, 22950,
   nil,  1561,   nil,  1686,   nil,   479,   nil,   777,  1023,   nil,
   nil,   nil,  1466,   nil,   961,   nil,   nil,   nil,   800,   nil,
   nil,   nil, 15046,   926,   840,   nil,   864,   nil,  1216,   nil,
   642, 16906,   nil,   nil,   957,   548,   nil,   nil,   833,   nil,
   nil,   nil, 17770,   120,   nil,   nil,  2289,   nil,   867, 23355,
   nil, 20250,    48,   nil,  4039,   927,  1044,   nil,  1164, 18638,
  1054,  1055,  1414,   946,  1031,   952,  1775,   967,   982,   988,
   990,  1036,   nil,   nil,   997,  1001,  1011,   nil,  1016,  1019,
  1170,  1095,  2414,   nil,   nil,  2539,   974,   947,  1282,  1122,
   939,   nil,  3039,   nil,  3414,  1078,   nil,   nil,   138,   nil,
   nil,   nil,  1194,   nil,  1078,   763,   nil,   nil,  1186,   nil,
   nil,   nil,  1341,   nil,   994,   nil,   nil,   734,   nil, 21958,
   nil,  1240,  1245, 22141,  6506, 22751,   482,  1261,   624,   nil,
   nil,   nil,   nil,   nil,  1147,  1148,  1149,  1156,  1167,  1169,
  1211,  1212,   nil,   nil,   173,   175,  1199,   908,    51,   nil,
   nil,   nil,   nil,   nil,  1311,   nil,   nil,   146,  1229,   nil ]

racc_action_default = [
    -1,  -579,  -578,  -579,  -484,  -579,   -49,  -567,  -492,  -393,
  -496,  -578,  -327,  -578,   -51,  -493,  -579,  -497,  -578,  -328,
   -52,  -270,  -312,  -578,  -329,  -319,   -82,   -53,  -271,  -476,
  -578,  -330,  -579,  -272,  -477,  -578,  -579,  -273,   -29,  -578,
    -2,  -274,  -279,  -579,  -579,  -579,  -275,   -44,  -579,  -567,
  -435,  -434,  -579,  -565,  -276,  -579,    -9,  -437,  -436,  -579,
  -579,  -579,  -490,  -441,  -438,  -579,  -579,  -288,  -258,    -4,
  -489,  -470,  -258,  -239,    -5,  -296,  -579,  -491,  -277,  -258,
   -70,  -486,  -553,    -8,  -578,  -579,  -485,  -555,  -487,  -482,
   -74,  -565,  -579,  -488,  -481,  -579,   -41,  -579,  -554,  -301,
  -578,   -84,  -304,   990,  -579,  -492,  -327,  -493,  -328,  -353,
  -567,  -579,  -579,  -579,  -288,  -405,  -291,  -331,  -277,  -413,
  -352,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -567,  -568,
  -579,  -298,  -518,  -474,  -131,  -173,  -178,  -153,  -162,  -132,
  -469,  -176,  -164,  -143,  -175,  -180,  -471,  -165,  -182,  -142,
  -188,  -116,  -151,  -174,  -117,  -161,  -152,  -167,  -127,  -159,
  -149,  -181,  -138,  -148,  -166,  -150,  -171,  -139,  -145,  -157,
  -170,  -144,  -158,  -456,  -191,  -183,  -140,  -154,  -146,  -192,
  -190,  -141,  -155,  -128,  -579,  -186,  -185,  -135,  -156,  -129,
  -184,  -133,  -113,  -130,  -169,  -125,  -115,  -137,  -168,  -177,
  -473,  -187,  -134,  -163,  -147,  -472,  -189,  -136,  -172,  -126,
  -193,  -160,  -114,  -194,  -179,  -240,  -492,  -257,  -253,  -493,
  -579,  -579,  -579,  -579,  -579,  -549,   -68,  -277,  -578,  -578,
  -579,  -578,  -263,  -579,  -579,  -579,  -579,  -547,  -579,  -571,
  -402,  -399,    -7,  -454,  -579,   -69,  -315,  -579,  -579,  -579,
   -90,   -91,  -579,  -579,   -98,  -579,   -80,  -579,  -579,  -458,
  -579,  -492,  -493,  -579,  -322,  -544,  -154,  -155,  -156,  -184,
  -113,  -545,  -177,  -187,  -172,  -114,  -446,  -579,  -579,  -122,
   -22,  -118,  -120,  -119,  -121,  -452,  -579,  -579,  -578,  -579,
   -17,  -579,  -216,  -232,  -579,  -217,  -566,  -575,  -576,  -574,
    -3,  -579,  -579,  -439,  -579,  -578,  -579,  -578,  -478,  -479,
  -579,   -50,  -285,   -67,   -59,  -579,  -415,  -418,  -579,  -295,
   -66,  -567,  -297,  -579,  -579,   -65,  -578,  -412,  -579,  -579,
  -579,  -579,  -579,  -565,  -579,   -13,   -72,  -567,   -14,  -578,
  -579,  -579,   -78,  -578,   -75,  -565,  -579,  -566,  -231,   -48,
  -281,  -579,  -579,   -86,  -579,  -241,  -579,  -571,  -571,  -579,
  -579,  -579,  -578,  -579,  -478,  -479,  -285,  -309,  -230,  -210,
  -219,  -213,  -221,  -220,  -206,  -226,  -207,  -227,  -212,  -228,
  -211,  -567,  -233,  -223,  -208,  -234,  -225,  -209,  -235,  -224,
  -236,  -222,  -229,  -218,  -294,  -567,  -579,   -47,  -535,  -523,
  -519,  -543,  -540,  -527,  -579,  -579,  -539,  -533,  -522,  -543,
  -518,  -538,  -543,  -396,  -579,  -517,  -524,  -525,  -521,  -536,
  -520,  -463,  -461,  -475,  -457,  -460,  -264,  -260,  -579,  -579,
  -578,  -579,  -285,  -579,  -262,  -579,  -254,  -579,  -579,  -255,
  -579,  -552,  -287,  -579,  -579,  -572,  -548,  -573,  -578,  -440,
  -455,  -579,  -111,  -579,  -579,  -579,  -277,  -108,  -109,  -442,
  -320,  -579,  -578,  -579,   -97,   -88,   -83,  -579,  -557,  -556,
  -559,  -558,  -258,  -258,  -459,  -443,  -324,  -563,  -564,  -518,
  -579,  -445,  -579,  -448,  -444,  -123,  -451,  -579,  -450,  -579,
  -426,  -579,   -30,  -579,   -40,   -39,  -579,   -21,   -20,   -19,
  -237,  -579,    -6,  -577,  -197,   -31,  -578,  -557,  -556,  -410,
  -258,  -567,  -248,  -249,  -578,  -578,  -557,  -556,  -559,  -558,
  -411,  -409,  -258,  -579,  -579,  -579,  -344,  -578,  -343,  -579,
   -60,   -56,  -259,  -578,  -578,  -406,  -567,  -290,  -578,  -205,
   -37,  -567,   -23,   -24,   -25,   -26,   -27,  -566,   -12,   -16,
   -71,  -567,  -283,  -195,   -43,   -42,  -579,   -38,  -263,  -579,
   -76,  -567,   -87,  -579,  -421,  -579,  -567,   -45,   -46,  -579,
  -286,  -242,  -573,  -244,  -579,  -557,  -556,  -578,  -567,  -284,
  -560,  -579,  -579,  -579,  -293,  -569,  -513,  -579,  -358,  -579,
  -524,  -356,  -354,  -567,  -365,  -578,  -394,  -578,  -510,  -579,
  -578,  -537,  -515,  -579,  -541,  -579,  -578,  -579,  -557,  -556,
  -567,  -557,  -556,  -261,  -579,  -578,  -265,  -195,  -550,  -551,
  -382,  -400,  -383,  -385,  -578,  -316,  -579,  -313,  -499,  -498,
  -579,  -578,  -579,  -109,  -110,  -108,  -578,  -557,  -556,  -567,
   -96,   -94,  -579,   -81,  -246,   -54,  -247,  -403,   -55,  -404,
  -579,  -518,  -579,  -578,  -567,  -449,  -447,  -579,  -453,  -280,
  -578,  -578,  -269,  -579,   -18,  -567,  -579,  -579,  -579,  -579,
   -61,  -407,  -579,  -414,  -250,  -252,  -579,  -579,   -63,  -408,
   -28,  -214,  -215,  -578,  -345,  -204,  -578,  -416,  -419,  -289,
  -578,  -245,   -15,   -73,  -579,  -579,   -79,  -579,   -85,  -579,
  -579,  -308,  -282,  -347,  -302,  -346,  -571,  -305,  -414,  -579,
  -579,  -534,  -543,  -543,  -542,  -579,  -567,  -526,  -579,  -363,
  -579,  -579,  -543,  -528,  -543,  -387,  -567,  -579,  -543,  -529,
  -579,  -467,  -462,  -465,  -468,  -466,  -579,  -579,  -414,  -579,
  -579,  -266,  -256,  -578,  -578,  -543,  -531,  -543,  -543,  -381,
  -524,  -579,  -579,  -501,  -578,  -579,  -567,  -109,  -112,  -108,
  -579,   -92,   -89,  -325,  -567,  -503,  -579,  -546,  -124,  -578,
  -429,  -428,  -427,  -350,  -578,  -578,  -579,  -267,  -292,  -198,
   -10,  -201,   -34,  -200,   -33,   -62,  -570,  -579,  -578,  -203,
   -35,  -202,   -36,   -64,  -579,  -579,  -348,   -57,  -578,  -578,
  -579,  -196,   -77,  -307,  -579,  -578,  -243,  -578,  -310,  -238,
  -514,  -579,  -511,  -579,  -357,  -361,  -355,  -366,  -579,  -397,
  -398,  -506,  -579,  -508,  -579,  -395,  -392,  -391,  -388,  -389,
  -516,  -464,  -579,  -579,  -579,  -374,  -372,  -377,  -579,  -379,
  -579,  -579,  -384,  -317,  -579,  -579,  -414,  -321,  -518,  -502,
  -323,  -431,  -579,  -579,  -351,  -433,  -578,   -11,  -268,  -199,
   -32,  -251,  -579,  -299,  -578,  -579,  -579,  -300,  -578,  -579,
  -579,  -579,  -578,  -543,  -579,  -359,  -579,  -364,  -543,  -543,
  -543,  -579,  -401,  -386,  -543,  -543,  -543,  -532,  -543,  -543,
  -530,  -579,  -578,  -314,  -500,  -578,   -99,  -100,  -579,  -579,
  -107,  -430,  -578,  -432,  -578,  -579,  -417,  -420,  -578,  -265,
  -303,  -306,  -579,  -512,  -362,  -579,  -507,  -504,  -579,  -509,
  -390,  -369,  -579,  -371,  -579,  -378,  -375,  -579,  -380,  -579,
  -285,  -579,  -579,  -579,  -578,  -579,  -106,  -426,  -578,   -58,
  -422,  -424,  -423,  -311,  -360,  -543,  -543,  -543,  -543,  -543,
  -284,  -560,  -318,  -326,  -557,  -556,  -567,  -105,  -560,  -425,
  -349,  -505,  -370,  -367,  -579,  -373,  -376,  -414,  -543,  -368 ]

clist = [
'150,69,166,117,585,547,40,171,238,435,193,364,257,318,681,238,433,263',
'558,466,531,276,193,284,117,693,248,320,171,279,486,369,171,248,296',
'299,303,509,305,83,171,561,314,310,303,743,514,304,492,493,673,318,638',
'83,459,304,550,68,334,574,347,638,340,238,731,366,767,68,360,345,316',
'68,262,612,68,356,633,598,815,633,470,248,795,330,837,654,357,613,117',
'849,641,846,728,834,343,530,494,542,577,375,347,724,746,380,907,204',
'727,789,473,365,480,820,246,503,377,667,669,268,586,265,68,374,68,825',
'758,379,771,827,251,259,602,68,892,267,774,251,471,591,593,68,772,912',
'269,656,499,630,68,68,670,868,68,496,597,781,706,283,884,764,516,647',
'109,300,877,121,848,677,376,333,425,616,152,322,260,468,763,707,708',
'659,553,818,554,819,960,251,897,720,308,873,907,323,264,151,280,297',
'502,2,485,306,752,627,626,733,160,68,775,68,742,342,255,285,500,1,,744',
',,378,,,,530,719,542,,,,,,,,,,,360,597,,,,768,,934,828,663,940,,846',
'854,454,512,,454,,597,,834,,,743,612,,525,,778,739,,117,,117,,,866,',
'736,117,,,,,904,,,964,743,560,,,,435,,638,,,,,620,,,,,731,575,,,,68',
'529,,,,,,543,,318,,633,633,,675,555,,238,538,513,532,318,,568,817,962',
',238,,980,716,,,238,459,583,,,238,360,,532,776,360,,248,356,,,83,356',
'248,435,580,,,117,571,529,68,68,581,562,563,564,565,567,68,522,,,513',
'68,,238,538,68,532,68,,612,780,,612,,566,68,569,589,,603,,68,594,,68',
'414,68,786,68,68,68,68,68,485,68,,,805,574,68,,68,791,68,915,813,597',
',,,,68,68,,68,529,,,649,68,552,899,68,762,85,,556,120,,529,,238,538',
',532,905,251,908,85,,,,251,,,538,979,529,,,,,640,,,987,,822,666,666',
'638,,,238,538,,532,665,668,895,117,826,612,,,,664,664,,,,,,,888,485',
'769,633,864,,68,,,,,,666,171,,,684,303,,,,690,85,,699,692,69,68,304',
'435,664,687,703,698,454,454,784,967,68,,,,,710,612,,612,,,922,725,,',
'640,640,725,68,,924,,,,,,83,,,961,,,,,635,,,,,68,117,666,,,68,699,782',
'612,,,,,,,692,,557,,,664,,,740,,741,68,,712,,773,,,570,750,762,,68,',
',,,,745,729,,68,692,,,,802,804,,,529,785,,454,810,812,,485,,,951,,745',
'952,,,238,538,976,532,,692,,575,,,68,,,117,783,,,,,171,604,59,,68,111',
'68,171,,258,788,303,243,790,793,68,59,,,243,85,,304,725,,,272,,513,',
',,,,,,793,,,640,68,,726,793,,68,,,,117,,,,,,,,,597,435,,,68,,,243,863',
'243,824,,,,,,,,243,68,68,85,880,853,,,59,68,68,85,,732,272,243,243,',
',243,,745,85,,,,,692,68,748,,,,,,,874,,,,,,,,,,871,85,,85,765,865,875',
',85,,576,,85,,885,886,,,,454,709,890,808,891,,711,243,,243,,68,,,,,713',
',914,,,,68,68,,882,718,,,,,722,,,,,,,,,,,68,,,,,,,,,,117,923,,68,,,737',
',,925,68,117,,928,68,68,,932,,,,68,,68,,,,,,,,,,,,,,,,,,,,446,447,,',
'957,,958,,,,,,,59,461,,,,,,,,,,787,793,,,,68,,474,529,474,,798,,68,',
'272,,68,,538,,68,,,238,538,,532,,,,793,,,,,,85,,,,68,,692,68,515,,,59',
'243,,68,,68,,893,59,,85,,,243,836,,898,243,900,59,,85,,,845,,,243,,',
'85,,906,243,909,68,243,,243,,243,243,243,243,59,,59,,,578,,59,,243,272',
'59,,,,,,,869,243,243,,243,,,,,243,,,243,,,,85,,85,,,,,,,,,85,,,,,,,',
',,,,,,,,,,,,,,,965,,,,966,,968,85,,969,,,,,,,,,,,,,,,85,,,,,,243,636',
',,258,,639,,,,,,,258,,,988,,,,,243,,,,,,,,,,,243,,,,576,272,,,,,,,,',
',,,,243,,,,,,,682,,,,,,,,,,,,,,243,,,606,,59,,,,,,618,,85,622,,,,,,',
',,,85,,59,,,15,,,107,,,,,59,,,,,,15,85,,59,,,,,,,271,,,,,272,282,,,',
',,,,636,85,85,,,,,,85,,85,,,,243,,,,,,,,,,235,235,,59,,59,,235,,749',
'55,,,,59,,,,761,,15,,,,55,,271,,,,,921,,312,,85,313,,,243,315,,,85,59',
',,85,,,272,85,,,,235,,,,,,59,,,792,,,797,,,,85,,,85,,243,243,636,258',
'368,85,,85,243,243,,,235,,,,55,,,,,,,,,,,243,578,272,,,,,388,389,390',
'391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407',
'408,409,410,411,412,413,,,,,,,,,,,,,,,,59,,,,,,,,,,,59,243,,,,,331,',
',,,,,,,,,331,878,,59,,,15,,,,,,,,,331,243,,,370,,,,243,282,,282,59,59',
',,,271,,59,,59,,,,,,,,830,832,,,,235,235,,,,841,,843,,,,850,,368,235',
',15,,,,,910,,415,15,417,,,855,55,857,859,918,,,15,59,258,,,,,,,59,929',
',,59,,,,59,,,,,,,,15,,15,78,,,118,15,,235,271,15,59,,520,59,,78,,,,524',
'59,,59,235,,274,55,,,,,,,235,55,,,,,235,,,559,,235,55,,,,,,,243,,,,',
',,573,,,,,,,,,,,55,,55,,,,,55,,,235,55,,78,,,,,,274,,,,,933,,,,,936',
'937,939,,,,941,943,945,,946,948,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,',
',,524,,235,,,559,,235,,637,235,,235,,,331,331,331,331,235,981,982,983',
'985,986,,15,,,,,,,,235,,,,587,588,,331,,989,,,331,15,,,,,,,,,,,15,,',
',,235,,,,15,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,701,702,55,,,705,78,,,,,',
',,,,,,,15,,15,,55,476,,476,,,,15,,274,,55,,,,,,,,645,55,,,,,235,,,,',
',,,,,,,15,,,,,78,271,,,,,674,,78,,,,15,,,,235,,,78,,,,,,235,55,685,55',
',,,,,,,,55,,,,,235,,78,,78,,,,,78,,,274,78,271,,,,,,,,,,,55,,,,235,',
',235,,,799,,801,803,,,,55,235,235,809,811,,,,,8,,,105,,,,,,15,,,821',
'637,8,331,,,235,,15,,,,270,,,,829,,281,,,,,,,,,,15,,,,,,,,,,,,,,801',
'803,,809,811,,,,,,15,15,,,,,,15,,15,,,,,,,,55,8,,,,274,,270,,,,55,,235',
',,,,,,,,,,879,,282,,,,,55,,,,,,917,,,,15,,,78,,,,,15,,,,15,,55,55,15',
',,,,55,,55,78,,,,879,,,,,,,78,15,,,15,,,,,78,,15,,15,,,,,,,,274,235',
',,,,,,,235,331,,,,,,55,,,,,,,,55,,,,55,,,,55,,,,78,,78,,,,,,,,,78,754',
'331,,,55,,,55,,,,,,,55,,55,,,,,8,,,,,235,,,78,,,,,,274,,,,281,,281,',
',,,78,270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,,,,,,,,8,,274,,,,,,,,,8',
',,,,,,,,,,,,,,,,,,,,,,,,8,,8,,,,,8,,,270,8,78,,,,,,,,,,,78,,,,,,,,,',
',,,,,,,,,,78,,,,,,,,,,,,,,,,,,,,,,,,78,78,,,,,,78,,78,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,476,,,,,,,,,,,920,,,,78,,,,,,,,78,,270,,78,,,,78',
',,,,,,,,,,,,,,,,,,,78,,,78,,,,,,,78,,78,8,,,,,,,,,,,,,,,,,,,,,8,,,,',
',,,,,,8,,,,,,,,,8,,,,,,,,,,,,270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'8,,8,,,,,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,,,,,,270,,,,,,,,,,,8,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,270,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,8,,,,,,,,,,,8,,,,,,,,,,,,,,,,,,,,8,,,,,,,,,,',
',,,,,,,,,,,,,8,8,,,,,,8,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,281,,,,',
',,,,,,916,,,,8,,,,,,,,8,,,,8,,,,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,,,,,8,',
'8' ]
        racc_goto_table = arr = ::Array.new(2891, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'33,6,57,64,88,85,2,58,35,133,6,50,6,91,13,35,142,6,85,67,25,51,6,57',
'64,26,66,5,58,6,52,22,58,66,6,17,61,10,6,9,58,25,33,17,61,172,29,62',
'38,38,92,91,178,9,71,62,40,44,39,20,69,178,39,35,173,5,130,44,12,39',
'8,44,7,125,44,46,72,25,86,72,164,66,14,19,127,55,47,126,64,137,41,138',
'26,124,19,38,164,38,29,6,69,87,135,33,174,160,87,154,56,19,56,14,45',
'164,66,70,70,160,96,45,44,97,44,98,26,99,135,100,68,68,101,44,102,103',
'104,68,105,67,67,44,106,107,108,109,110,25,44,44,111,112,44,94,38,26',
'42,93,43,128,32,90,21,18,15,89,136,63,65,45,139,140,141,11,143,144,145',
'41,41,25,148,149,150,151,152,68,127,153,95,155,174,158,159,84,161,162',
'163,3,50,165,166,167,168,131,169,44,170,44,171,82,81,80,177,1,,131,',
',68,,,,38,88,38,,,,,,,,,,,12,38,,,,131,,127,87,52,137,,138,135,6,22',
',6,,38,,124,,,172,125,,22,,55,125,,64,,64,,,26,,126,64,,,,,130,,,127',
'172,22,,,,133,,178,,,,,142,,,,,173,22,,,,44,69,,,,,,12,,91,,72,72,,164',
'69,,35,58,66,6,91,,5,41,14,,35,,86,52,,,35,71,5,,,35,12,,6,25,12,,66',
'46,,,9,46,66,133,51,,,64,47,69,44,44,47,19,19,19,19,8,44,7,,,66,44,',
'35,58,44,6,44,,125,10,,125,,9,44,9,19,,33,,44,19,,44,48,44,10,44,44',
'44,44,44,50,44,,,40,20,44,,44,29,44,92,40,38,,,,,44,44,,44,69,,,91,44',
'45,131,44,71,28,,45,28,,69,,35,58,,6,131,68,131,28,,,,68,,,58,13,69',
',,,,6,,,26,,52,69,69,178,,,35,58,,6,39,39,125,64,67,125,,,,6,6,,,,,',
',85,50,133,72,10,,44,,,,,,69,58,,,17,61,,,,39,28,,69,33,6,44,62,133',
'6,2,12,39,6,6,142,131,44,,,,,12,125,,125,,,85,91,,,6,6,91,44,,85,,,',
',,9,,,88,,,,,68,,,,,44,64,69,,,44,69,50,125,,,,,,,33,,48,,,6,,,12,,12',
'44,,9,,91,,,48,12,71,,44,,,,,,6,19,,44,33,,,,22,22,,,69,91,,6,22,22',
',50,,,10,,6,10,,,35,58,25,6,,33,,22,,,44,,,64,57,,,,,58,48,24,,44,24',
'44,58,,30,17,61,24,6,6,44,24,,,24,28,,62,91,,,24,,66,,,,,,,,6,,,6,44',
',68,6,,44,,,,64,,,,,,,,,38,133,,,44,,,24,91,24,66,,,,,,,,24,44,44,28',
'22,12,,,24,44,44,28,,129,24,24,24,,,24,,6,28,,,,,33,44,129,,,,,,,12',
',,,,,,,,,6,28,,28,129,19,6,,28,,28,,28,,12,12,,,,6,48,12,68,12,,48,24',
',24,,44,,,,,48,,91,,,,44,44,,19,48,,,,,48,,,,,,,,,,,44,,,,,,,,,,64,12',
',44,,,48,,,12,44,64,,12,44,44,,12,,,,44,,44,,,,,,,,,,,,,,,,,,,,30,30',
',,12,,12,,,,,,,24,30,,,,,,,,,,48,6,,,,44,,24,69,24,,48,,44,,24,,44,',
'58,,44,,,35,58,,6,,,,6,,,,,,28,,,,44,,33,44,30,,,24,24,,44,,44,,129',
'24,,28,,,24,48,,129,24,129,24,,28,,,48,,,24,,,28,,129,24,129,44,24,',
'24,,24,24,24,24,24,,24,,,30,,24,,24,24,24,,,,,,,48,24,24,,24,,,,,24',
',,24,,,,28,,28,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,129,,,,129,,129,28,',
'129,,,,,,,,,,,,,,,28,,,,,,24,30,,,30,,30,,,,,,,30,,,129,,,,,24,,,,,',
',,,,,24,,,,28,24,,,,,,,,,,,,,24,,,,,,,30,,,,,,,,,,,,,,24,,,132,,24,',
',,,,132,,28,132,,,,,,,,,,28,,24,,,54,,,54,,,,,24,,,,,,54,28,,24,,,,',
',,54,,,,,24,54,,,,,,,,30,28,28,,,,,,28,,28,,,,24,,,,,,,,,,34,34,,24',
',24,,34,,30,23,,,,24,,,,30,,54,,,,23,,54,,,,,28,,34,,28,34,,,24,34,',
',28,24,,,28,,,24,28,,,,34,,,,,,24,,,30,,,30,,,,28,,,28,,24,24,30,30',
'34,28,,28,24,24,,,34,,,,23,,,,,,,,,,,24,30,24,,,,,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,,,,,,,,',
',,,,,,,24,,,,,,,,,,,24,24,,,,,31,,,,,,,,,,,31,30,,24,,,54,,,,,,,,,31',
'24,,,31,,,,24,54,,54,24,24,,,,54,,24,,24,,,,,,,,132,132,,,,34,34,,,',
'132,,132,,,,132,,34,34,,54,,,,,24,,31,54,31,,,132,23,132,132,24,,,54',
'24,30,,,,,,,24,30,,,24,,,,24,,,,,,,,54,,54,27,,,27,54,,34,54,54,24,',
'34,24,,27,,,,34,24,,24,34,,27,23,,,,,,,34,23,,,,,34,,,34,,34,23,,,,',
',,24,,,,,,,34,,,,,,,,,,,23,,23,,,,,23,,,34,23,,27,,,,,,27,,,,,132,,',
',,132,132,132,,,,132,132,132,,132,132,,,,,,,,,,,,,,,,,,,,,,,54,,,,,',
',,,,,,,34,,34,,,34,,34,,34,34,,34,,,31,31,31,31,34,132,132,132,132,132',
',54,,,,,,,,34,,,,31,31,,31,,132,,,31,54,,,,,,,,,,,54,,,,,34,,,,54,,',
',,,,,,,,,54,,,,,,,,,,,,,,,,,34,34,23,,,34,27,,,,,,,,,,,,,54,,54,,23',
'27,,27,,,,54,,27,,23,,,,,,,,31,23,,,,,34,,,,,,,,,,,,54,,,,,27,54,,,',
',31,,27,,,,54,,,,34,,,27,,,,,,34,23,31,23,,,,,,,,,23,,,,,34,,27,,27',
',,,,27,,,27,27,54,,,,,,,,,,,23,,,,34,,,34,,,34,,34,34,,,,23,34,34,34',
'34,,,,,53,,,53,,,,,,54,,,34,34,53,31,,,34,,54,,,,53,,,,34,,53,,,,,,',
',,,54,,,,,,,,,,,,,,34,34,,34,34,,,,,,54,54,,,,,,54,,54,,,,,,,,23,53',
',,,27,,53,,,,23,,34,,,,,,,,,,,34,,54,,,,,23,,,,,,54,,,,54,,,27,,,,,54',
',,,54,,23,23,54,,,,,23,,23,27,,,,34,,,,,,,27,54,,,54,,,,,27,,54,,54',
',,,,,,,27,34,,,,,,,,34,31,,,,,,23,,,,,,,,23,,,,23,,,,23,,,,27,,27,,',
',,,,,,27,27,31,,,23,,,23,,,,,,,23,,23,,,,,53,,,,,34,,,27,,,,,,27,,,',
'53,,53,,,,,27,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,,,,53,,27,,',
',,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,53,,53,,,,,53,,,53,53,27,,,,,,,,,,',
'27,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,27,27,,,,,,27,,27,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,27,,,,27,,,,,,,,27,,53,',
'27,,,,27,,,,,,,,,,,,,,,,,,,,27,,,27,,,,,,,27,,27,53,,,,,,,,,,,,,,,,',
',,,,53,,,,,,,,,,,53,,,,,,,,,53,,,,,,,,,,,,53,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,53,,53,,,,,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,,53',
',,,,,,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,,,,,,,53,,,,,,,,,,,,,,,,',
',,,53,,,,,,,,,,,,,,,,,,,,,,,,53,53,,,,,,53,,53,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,53,,,,,,,,,,,53,,,,53,,,,,,,,53,,,,53,,,,53,,,,,,,,,,,,',
',,,,,,,53,,,53,,,,,,,53,,53' ]
        racc_goto_check = arr = ::Array.new(2891, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   211,     4,   195,   nil,   -26,    -1,    56,    17,    37,
  -271,   115,   -16,  -496,  -599,  -633,   nil,    -1,   125,    18,
  -302,   155,   -61,  1286,   666,  -305,  -506,  1567,   437,  -263,
   662,  1381,  -152,    -7,  1266,    -4,   nil,   nil,  -229,   -10,
  -278,  -378,  -397,  -661,    55,   100,    -9,     2,   252,   nil,
   -79,    -5,  -245,  1966,  1214,  -390,  -159,    -9,    -4,   nil,
   nil,     0,    11,  -340,    -2,    66,    14,  -240,   116,   -19,
  -377,  -197,  -379,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   177,   195,   132,   nil,   182,  -325,  -625,  -488,  -362,   158,
  -314,   -40,  -449,   123,  -132,   144,  -252,    22,  -601,    23,
  -600,  -257,  -696,   111,  -513,  -130,  -505,  -722,   117,  -337,
  -140,  -348,  -634,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -642,  -351,  -337,  -654,  -487,   148,
  -578,  -406,   769,  -143,   nil,  -518,  -583,  -658,  -656,    16,
  -256,   161,  -136,   158,   -88,  -467,   nil,   nil,  -158,  -528,
  -157,  -527,  -746,  -399,  -573,  -602,   nil,   nil,   132,   172,
    94,   162,   158,  -103,  -184,   158,  -429,  -243,  -241,   191,
  -444,  -413,  -574,  -543,  -754,   nil,   nil,   -81,  -406 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    53,   nil,   355,    74,   367,   358,
   nil,   nil,   510,   nil,   816,   nil,   353,   nil,   nil,   nil,
    38,    43,    47,   242,   256,   nil,   nil,   247,   250,   nil,
   252,    96,   nil,   416,     6,    14,    20,    27,   601,   nil,
   nil,   nil,   nil,   nil,   115,   533,    80,   nil,   nil,    90,
    97,   101,   nil,   236,   239,   472,   nil,   301,   490,   174,
   302,    50,    58,   nil,    73,   nil,   534,   nil,   535,   540,
   691,   456,   237,   335,    21,    28,    33,    37,    41,    46,
    54,   nil,   339,    75,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   548,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   611,   437,   nil,   608,   nil,   429,
   nil,   432,   nil,   734,   642,   nil,   nil,   nil,   419,   nil,
   nil,   nil,   672,   nil,   nil,   nil,   541,   338,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    51,    57,    64,   nil,
   nil,   nil,   nil,   nil,   444,   nil,   nil,   nil,   nil,   nil,
   nil,   421,   423,   427,   766,   431,   434,   nil,   245 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 140, :_reduce_1,
  2, 138, :_reduce_2,
  2, 139, :_reduce_3,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 141, :_reduce_6,
  2, 141, :_reduce_none,
  1, 144, :_reduce_none,
  0, 148, :_reduce_9,
  5, 144, :_reduce_10,
  4, 147, :_reduce_11,
  2, 149, :_reduce_12,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_15,
  2, 153, :_reduce_16,
  0, 169, :_reduce_17,
  4, 146, :_reduce_18,
  3, 146, :_reduce_19,
  3, 146, :_reduce_20,
  3, 146, :_reduce_21,
  2, 146, :_reduce_22,
  3, 146, :_reduce_23,
  3, 146, :_reduce_24,
  3, 146, :_reduce_25,
  3, 146, :_reduce_26,
  3, 146, :_reduce_27,
  4, 146, :_reduce_28,
  1, 146, :_reduce_none,
  3, 146, :_reduce_30,
  3, 146, :_reduce_31,
  6, 146, :_reduce_32,
  5, 146, :_reduce_33,
  5, 146, :_reduce_34,
  5, 146, :_reduce_35,
  5, 146, :_reduce_36,
  3, 146, :_reduce_37,
  3, 146, :_reduce_38,
  3, 146, :_reduce_39,
  3, 146, :_reduce_40,
  1, 146, :_reduce_none,
  3, 157, :_reduce_42,
  3, 157, :_reduce_43,
  1, 168, :_reduce_none,
  3, 168, :_reduce_45,
  3, 168, :_reduce_46,
  3, 168, :_reduce_47,
  2, 168, :_reduce_48,
  1, 168, :_reduce_none,
  1, 156, :_reduce_50,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 173, :_reduce_none,
  4, 173, :_reduce_54,
  4, 173, :_reduce_55,
  0, 179, :_reduce_56,
  0, 180, :_reduce_57,
  6, 177, :_reduce_58,
  2, 172, :_reduce_59,
  3, 172, :_reduce_60,
  4, 172, :_reduce_61,
  5, 172, :_reduce_62,
  4, 172, :_reduce_63,
  5, 172, :_reduce_64,
  2, 172, :_reduce_65,
  2, 172, :_reduce_66,
  2, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 158, :_reduce_none,
  3, 158, :_reduce_71,
  1, 184, :_reduce_none,
  3, 184, :_reduce_73,
  1, 183, :_reduce_74,
  2, 183, :_reduce_75,
  3, 183, :_reduce_76,
  5, 183, :_reduce_77,
  2, 183, :_reduce_78,
  4, 183, :_reduce_79,
  2, 183, :_reduce_80,
  4, 183, :_reduce_81,
  1, 183, :_reduce_82,
  3, 183, :_reduce_83,
  1, 187, :_reduce_none,
  3, 187, :_reduce_85,
  2, 186, :_reduce_86,
  3, 186, :_reduce_87,
  1, 189, :_reduce_88,
  3, 189, :_reduce_89,
  1, 188, :_reduce_90,
  1, 188, :_reduce_91,
  4, 188, :_reduce_92,
  3, 188, :_reduce_93,
  3, 188, :_reduce_94,
  3, 188, :_reduce_95,
  3, 188, :_reduce_96,
  2, 188, :_reduce_97,
  1, 188, :_reduce_98,
  1, 165, :_reduce_99,
  1, 165, :_reduce_100,
  4, 165, :_reduce_101,
  3, 165, :_reduce_102,
  3, 165, :_reduce_103,
  3, 165, :_reduce_104,
  3, 165, :_reduce_105,
  2, 165, :_reduce_106,
  1, 165, :_reduce_107,
  1, 192, :_reduce_108,
  1, 192, :_reduce_none,
  2, 193, :_reduce_110,
  1, 193, :_reduce_111,
  3, 193, :_reduce_112,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_116,
  1, 194, :_reduce_117,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 154, :_reduce_120,
  1, 154, :_reduce_none,
  1, 155, :_reduce_122,
  0, 200, :_reduce_123,
  4, 155, :_reduce_124,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  3, 171, :_reduce_195,
  5, 171, :_reduce_196,
  3, 171, :_reduce_197,
  5, 171, :_reduce_198,
  6, 171, :_reduce_199,
  5, 171, :_reduce_200,
  5, 171, :_reduce_201,
  5, 171, :_reduce_202,
  5, 171, :_reduce_203,
  4, 171, :_reduce_204,
  3, 171, :_reduce_205,
  3, 171, :_reduce_206,
  3, 171, :_reduce_207,
  3, 171, :_reduce_208,
  3, 171, :_reduce_209,
  3, 171, :_reduce_210,
  3, 171, :_reduce_211,
  3, 171, :_reduce_212,
  3, 171, :_reduce_213,
  4, 171, :_reduce_214,
  4, 171, :_reduce_215,
  2, 171, :_reduce_216,
  2, 171, :_reduce_217,
  3, 171, :_reduce_218,
  3, 171, :_reduce_219,
  3, 171, :_reduce_220,
  3, 171, :_reduce_221,
  3, 171, :_reduce_222,
  3, 171, :_reduce_223,
  3, 171, :_reduce_224,
  3, 171, :_reduce_225,
  3, 171, :_reduce_226,
  3, 171, :_reduce_227,
  3, 171, :_reduce_228,
  3, 171, :_reduce_229,
  3, 171, :_reduce_230,
  2, 171, :_reduce_231,
  2, 171, :_reduce_232,
  3, 171, :_reduce_233,
  3, 171, :_reduce_234,
  3, 171, :_reduce_235,
  3, 171, :_reduce_236,
  3, 171, :_reduce_237,
  6, 171, :_reduce_238,
  1, 171, :_reduce_none,
  1, 167, :_reduce_240,
  1, 202, :_reduce_none,
  2, 202, :_reduce_242,
  4, 202, :_reduce_243,
  2, 202, :_reduce_244,
  3, 206, :_reduce_245,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_248,
  1, 162, :_reduce_249,
  2, 162, :_reduce_250,
  4, 162, :_reduce_251,
  2, 162, :_reduce_252,
  1, 182, :_reduce_253,
  2, 182, :_reduce_254,
  2, 182, :_reduce_255,
  4, 182, :_reduce_256,
  1, 182, :_reduce_none,
  0, 210, :_reduce_258,
  2, 176, :_reduce_259,
  2, 209, :_reduce_260,
  2, 208, :_reduce_261,
  1, 208, :_reduce_none,
  1, 203, :_reduce_263,
  2, 203, :_reduce_264,
  3, 203, :_reduce_265,
  4, 203, :_reduce_266,
  3, 166, :_reduce_267,
  4, 166, :_reduce_268,
  2, 166, :_reduce_269,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_278,
  0, 232, :_reduce_279,
  4, 201, :_reduce_280,
  0, 233, :_reduce_281,
  4, 201, :_reduce_282,
  3, 201, :_reduce_283,
  3, 201, :_reduce_284,
  2, 201, :_reduce_285,
  3, 201, :_reduce_286,
  3, 201, :_reduce_287,
  1, 201, :_reduce_288,
  4, 201, :_reduce_289,
  3, 201, :_reduce_290,
  1, 201, :_reduce_291,
  5, 201, :_reduce_292,
  4, 201, :_reduce_293,
  3, 201, :_reduce_294,
  2, 201, :_reduce_295,
  1, 201, :_reduce_none,
  2, 201, :_reduce_297,
  2, 201, :_reduce_298,
  6, 201, :_reduce_299,
  6, 201, :_reduce_300,
  0, 234, :_reduce_301,
  0, 235, :_reduce_302,
  7, 201, :_reduce_303,
  0, 236, :_reduce_304,
  0, 237, :_reduce_305,
  7, 201, :_reduce_306,
  5, 201, :_reduce_307,
  4, 201, :_reduce_308,
  0, 238, :_reduce_309,
  0, 239, :_reduce_310,
  9, 201, :_reduce_311,
  0, 240, :_reduce_312,
  0, 241, :_reduce_313,
  7, 201, :_reduce_314,
  0, 242, :_reduce_315,
  0, 243, :_reduce_316,
  0, 244, :_reduce_317,
  9, 201, :_reduce_318,
  0, 245, :_reduce_319,
  0, 246, :_reduce_320,
  6, 201, :_reduce_321,
  0, 247, :_reduce_322,
  6, 201, :_reduce_323,
  0, 248, :_reduce_324,
  0, 249, :_reduce_325,
  9, 201, :_reduce_326,
  1, 201, :_reduce_327,
  1, 201, :_reduce_328,
  1, 201, :_reduce_329,
  1, 201, :_reduce_330,
  1, 161, :_reduce_331,
  1, 250, :_reduce_none,
  1, 251, :_reduce_none,
  1, 252, :_reduce_none,
  1, 253, :_reduce_none,
  1, 254, :_reduce_none,
  1, 255, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  2, 222, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 223, :_reduce_none,
  5, 223, :_reduce_349,
  1, 151, :_reduce_none,
  2, 151, :_reduce_351,
  1, 226, :_reduce_none,
  1, 226, :_reduce_353,
  1, 261, :_reduce_none,
  3, 261, :_reduce_355,
  1, 264, :_reduce_356,
  3, 264, :_reduce_357,
  1, 263, :_reduce_358,
  4, 263, :_reduce_359,
  6, 263, :_reduce_360,
  3, 263, :_reduce_361,
  5, 263, :_reduce_362,
  2, 263, :_reduce_363,
  4, 263, :_reduce_364,
  1, 263, :_reduce_365,
  3, 263, :_reduce_366,
  6, 265, :_reduce_367,
  8, 265, :_reduce_368,
  4, 265, :_reduce_369,
  6, 265, :_reduce_370,
  4, 265, :_reduce_371,
  2, 265, :_reduce_372,
  6, 265, :_reduce_373,
  2, 265, :_reduce_374,
  4, 265, :_reduce_375,
  6, 265, :_reduce_376,
  2, 265, :_reduce_377,
  4, 265, :_reduce_378,
  2, 265, :_reduce_379,
  4, 265, :_reduce_380,
  1, 265, :_reduce_381,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  3, 271, :_reduce_384,
  1, 271, :_reduce_385,
  4, 271, :_reduce_386,
  1, 272, :_reduce_none,
  2, 272, :_reduce_388,
  1, 273, :_reduce_389,
  3, 273, :_reduce_390,
  1, 274, :_reduce_391,
  1, 274, :_reduce_none,
  0, 278, :_reduce_393,
  3, 221, :_reduce_394,
  4, 276, :_reduce_395,
  1, 276, :_reduce_396,
  3, 277, :_reduce_397,
  3, 277, :_reduce_398,
  0, 281, :_reduce_399,
  0, 282, :_reduce_400,
  6, 280, :_reduce_401,
  2, 174, :_reduce_402,
  4, 174, :_reduce_403,
  4, 174, :_reduce_404,
  0, 284, :_reduce_405,
  3, 220, :_reduce_406,
  4, 220, :_reduce_407,
  4, 220, :_reduce_408,
  3, 220, :_reduce_409,
  3, 220, :_reduce_410,
  3, 220, :_reduce_411,
  2, 220, :_reduce_412,
  1, 220, :_reduce_413,
  4, 220, :_reduce_414,
  0, 285, :_reduce_415,
  0, 286, :_reduce_416,
  6, 219, :_reduce_417,
  0, 287, :_reduce_418,
  0, 288, :_reduce_419,
  6, 219, :_reduce_420,
  0, 290, :_reduce_421,
  6, 225, :_reduce_422,
  1, 289, :_reduce_none,
  1, 289, :_reduce_none,
  6, 150, :_reduce_425,
  0, 150, :_reduce_426,
  1, 291, :_reduce_427,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  2, 292, :_reduce_430,
  1, 292, :_reduce_none,
  2, 152, :_reduce_432,
  1, 152, :_reduce_none,
  1, 211, :_reduce_434,
  1, 211, :_reduce_435,
  1, 211, :_reduce_none,
  1, 212, :_reduce_437,
  1, 294, :_reduce_none,
  2, 294, :_reduce_439,
  3, 295, :_reduce_440,
  1, 295, :_reduce_441,
  3, 213, :_reduce_442,
  3, 214, :_reduce_443,
  3, 215, :_reduce_444,
  3, 215, :_reduce_445,
  1, 299, :_reduce_446,
  3, 299, :_reduce_447,
  1, 300, :_reduce_none,
  2, 300, :_reduce_449,
  3, 216, :_reduce_450,
  3, 216, :_reduce_451,
  1, 302, :_reduce_452,
  3, 302, :_reduce_453,
  1, 296, :_reduce_454,
  2, 296, :_reduce_455,
  1, 297, :_reduce_456,
  2, 297, :_reduce_457,
  1, 298, :_reduce_458,
  2, 298, :_reduce_459,
  1, 301, :_reduce_460,
  0, 304, :_reduce_461,
  3, 301, :_reduce_462,
  0, 305, :_reduce_463,
  4, 301, :_reduce_464,
  1, 303, :_reduce_465,
  1, 303, :_reduce_466,
  1, 303, :_reduce_467,
  1, 303, :_reduce_none,
  2, 198, :_reduce_469,
  1, 198, :_reduce_470,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  3, 199, :_reduce_475,
  1, 293, :_reduce_none,
  1, 293, :_reduce_none,
  2, 293, :_reduce_478,
  2, 293, :_reduce_479,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 191, :_reduce_485,
  1, 191, :_reduce_486,
  1, 191, :_reduce_487,
  1, 191, :_reduce_488,
  1, 191, :_reduce_489,
  1, 191, :_reduce_490,
  1, 191, :_reduce_491,
  1, 217, :_reduce_492,
  1, 217, :_reduce_493,
  1, 160, :_reduce_494,
  1, 160, :_reduce_495,
  1, 164, :_reduce_496,
  1, 164, :_reduce_497,
  1, 227, :_reduce_498,
  0, 307, :_reduce_499,
  4, 227, :_reduce_500,
  2, 227, :_reduce_501,
  3, 229, :_reduce_502,
  2, 229, :_reduce_503,
  6, 279, :_reduce_504,
  8, 279, :_reduce_505,
  4, 279, :_reduce_506,
  6, 279, :_reduce_507,
  4, 279, :_reduce_508,
  6, 279, :_reduce_509,
  2, 279, :_reduce_510,
  4, 279, :_reduce_511,
  6, 279, :_reduce_512,
  2, 279, :_reduce_513,
  4, 279, :_reduce_514,
  2, 279, :_reduce_515,
  4, 279, :_reduce_516,
  1, 279, :_reduce_517,
  0, 279, :_reduce_518,
  1, 275, :_reduce_519,
  1, 275, :_reduce_520,
  1, 275, :_reduce_521,
  1, 275, :_reduce_522,
  1, 262, :_reduce_none,
  1, 262, :_reduce_524,
  1, 309, :_reduce_none,
  3, 309, :_reduce_526,
  1, 266, :_reduce_527,
  3, 266, :_reduce_528,
  3, 310, :_reduce_529,
  3, 311, :_reduce_530,
  1, 267, :_reduce_531,
  3, 267, :_reduce_532,
  1, 308, :_reduce_533,
  3, 308, :_reduce_534,
  1, 312, :_reduce_none,
  1, 312, :_reduce_none,
  2, 268, :_reduce_537,
  1, 268, :_reduce_538,
  1, 313, :_reduce_none,
  1, 313, :_reduce_none,
  2, 270, :_reduce_541,
  2, 269, :_reduce_542,
  0, 269, :_reduce_543,
  1, 230, :_reduce_none,
  0, 314, :_reduce_545,
  4, 230, :_reduce_546,
  1, 218, :_reduce_547,
  2, 218, :_reduce_548,
  1, 205, :_reduce_none,
  3, 205, :_reduce_550,
  3, 315, :_reduce_551,
  2, 315, :_reduce_552,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  0, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 185, :_reduce_none,
  2, 163, :_reduce_none,
  0, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 228, :_reduce_574,
  1, 228, :_reduce_none,
  1, 145, :_reduce_none,
  2, 145, :_reduce_577,
  0, 143, :_reduce_578 ]

racc_reduce_n = 579

racc_shift_n = 990

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAST_TOKEN => 132,
  :tLAMBDA => 133,
  :tLAMBEG => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tLAMBDA",
  "tLAMBEG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_57(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary = list_append val[0], s(:splat, val[2])
                      ary.concat val[4][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      ary = s(:array, s(:splat))
                      ary.concat val[2][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_230(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      lexer.tern.pop
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0] << s(:hash, *val[2][1..-1]) # TODO: self.args
                    
    result
end

def _reduce_252(val, _values, result)
                      result = s(:hash, *val[0].values)
                    
    result
end

def _reduce_253(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_254(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_259(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_280(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_281(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_282(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_294(val, _values, result)
                      raise "no3\non#{val.inspect}"
                    
    result
end

def _reduce_295(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call nil, oper.to_sym
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 296 omitted

def _reduce_297(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_298(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_299(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_301(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_302(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_304(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_case val[1], val[3]
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_case nil, val[2]
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_313(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_315(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_322(val, _values, result)
                      result = [lexer.lineno, self.in_def]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                    
    result
end

def _reduce_323(val, _values, result)
                      line, in_def = val[2]

                      result = new_defn val
                      result[2].line line

                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_325(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_327(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_329(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_330(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_331(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_358(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_359(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_360(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_361(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_362(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_363(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_364(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_365(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_366(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_367(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_368(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_369(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_370(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_371(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

# reduce 382 omitted

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = args val
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_385(val, _values, result)
                      result = 0
                      self.lexer.command_start = true
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

# reduce 387 omitted

def _reduce_388(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                      # TODO: dyna_push ? hrm
                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_394(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      args = 0 if args == s(:args)

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                    
    result
end

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_399(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_400(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_401(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_402(val, _values, result)
                      # TODO:
                      # if (nd_type($1) == NODE_YIELD) {
                      #     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_405(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_406(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_409(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_410(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_415(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_417(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_418(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_420(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_421(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 423 omitted

# reduce 424 omitted

def _reduce_425(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_426(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_427(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 428 omitted

# reduce 429 omitted

def _reduce_430(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 433 omitted

def _reduce_434(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_435(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_444(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_445(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_447(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0] << word
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << s(:str, val[1])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_455(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_457(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_459(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_462(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = [lexer.lex_strterm, lexer.brace_nest, lexer.string_nest]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.cond.push false
                      lexer.cmdarg.push false

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_464(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_465(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_466(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_467(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 471 omitted

# reduce 472 omitted

# reduce 473 omitted

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 476 omitted

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_479(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

def _reduce_485(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_486(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_487(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_488(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:lit, lexer.src.current_line) 
    result
end

def _reduce_491(val, _values, result)
                      result = 
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_492(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_493(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_494(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_496(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_497(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_498(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_499(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_500(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_501(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_505(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_506(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_507(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_508(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_509(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_510(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_511(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_512(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_513(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_514(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_515(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_516(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_517(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_518(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_519(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_520(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_521(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_522(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 523 omitted

def _reduce_524(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 525 omitted

def _reduce_526(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_527(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_528(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_529(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_530(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_532(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_534(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 535 omitted

# reduce 536 omitted

def _reduce_537(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_538(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 539 omitted

# reduce 540 omitted

def _reduce_541(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = nil
                    
    result
end

# reduce 544 omitted

def _reduce_545(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_546(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_547(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 549 omitted

def _reduce_550(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_551(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_552(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      result = s(:array, s(:lit, label.to_sym), val[1])
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

# reduce 555 omitted

# reduce 556 omitted

# reduce 557 omitted

# reduce 558 omitted

# reduce 559 omitted

# reduce 560 omitted

# reduce 561 omitted

# reduce 562 omitted

# reduce 563 omitted

# reduce 564 omitted

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

def _reduce_574(val, _values, result)
 yyerrok 
    result
end

# reduce 575 omitted

# reduce 576 omitted

def _reduce_577(val, _values, result)
 yyerrok 
    result
end

def _reduce_578(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby19Parser
