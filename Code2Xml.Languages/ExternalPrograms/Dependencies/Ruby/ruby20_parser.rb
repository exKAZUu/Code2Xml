#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby20Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-501,528,-102,507,528,-101,237,-501,-501,-501,651,658,-501,-501,-501',
'237,-501,-99,301,651,-107,-85,128,237,-501,651,-501,-501,-501,-101,-103',
'528,-71,356,-103,528,-501,-501,359,-501,-501,-501,-501,-501,652,528',
'-104,530,434,3,299,435,16,652,308,310,-106,-100,129,652,57,251,252,731',
'651,846,506,-501,-501,-501,-501,-501,-501,-501,-501,-501,-501,-501,-501',
'-501,-501,-105,731,-501,-501,-501,-104,-501,-501,731,751,-501,840,236',
'-501,-501,-594,-501,652,-501,-106,-501,236,-501,-501,-501,-501,-501',
'-501,-501,236,-501,-594,-501,-93,356,-102,661,356,-101,359,-102,-90',
'359,-101,-98,-501,-501,-501,-501,-598,-501,556,-501,-92,-94,356,-598',
'-598,-598,-501,359,-598,-598,-598,356,-598,-595,-103,356,359,129,919',
'-103,359,-598,-598,-598,-598,356,-104,-97,-91,356,359,-104,-598,-598',
'359,-598,-598,-598,-598,-598,657,-102,-501,-95,655,428,814,-93,356,-501',
'237,412,-96,359,356,356,-266,-95,412,359,359,749,301,-598,-598,-598',
'-598,-598,-598,-598,-598,-598,-598,-598,-598,-598,-598,301,469,-598',
'-598,-598,-93,777,-598,-93,129,-598,251,252,-598,-598,855,-598,412,-598',
'-93,-598,-107,-598,-598,-598,-598,-598,-598,-598,356,-598,-598,-598',
'-95,359,409,410,411,-417,824,251,252,409,410,-598,-598,-598,-598,-598',
'-289,-598,666,-598,719,530,129,-289,-289,-289,-103,236,-289,-289,-289',
'468,-289,-511,-510,-95,-93,814,-95,572,-511,-510,-289,-289,-289,409',
'410,412,434,-95,472,578,-289,-289,684,-289,-289,-289,-289,-289,-512',
'-515,-93,-97,-598,774,434,-512,129,435,328,-598,412,-102,-106,412,-594',
'773,874,-426,-598,400,401,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,129,-598,-289,-289,-289,412,776,-289,336,412',
'-289,409,410,-289,-289,338,-289,-99,-289,814,-289,-102,-289,-289,-289',
'-289,-289,-289,-289,812,-289,-516,-289,-104,-101,-426,409,410,451,409',
'410,476,-426,-598,-591,-289,-289,-289,-289,-504,-289,-426,-289,388,674',
'356,-504,-504,-504,-105,359,-504,-504,-504,129,-504,409,410,439,-426',
'409,410,455,-504,-506,-504,-504,-504,301,674,-509,-506,-592,129,-100',
'-504,-504,-509,-504,-504,-504,-504,-504,-508,781,-98,-598,-501,434,421',
'-508,435,356,-598,-501,599,-107,359,-594,-591,299,415,-598,-501,308',
'310,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504',
'-504,-598,-591,-504,-504,-504,-504,-504,-504,598,603,-504,873,-504,-504',
'-504,352,-504,-592,-504,839,-504,-504,-504,-504,-504,-504,-504,-504',
'-504,600,-504,744,-504,621,624,596,-504,606,129,-592,599,-515,605,-504',
'372,-504,-504,-504,-504,-289,-504,374,-504,251,252,352,-289,-289,-289',
'-504,373,-92,-289,-289,744,-289,621,624,596,781,606,-336,-101,598,603',
'336,356,-507,-336,762,599,359,338,-90,-507,-289,-289,-336,-289,-289',
'-289,-289,-289,744,-99,621,624,596,515,606,356,761,601,513,514,359,759',
'605,129,980,738,999,758,598,603,129,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,716,-289,-289,-289,882,722,-289',
'826,814,-289,884,-595,-289,-516,885,-289,605,-289,887,-289,888,-289',
'-289,-289,-289,-289,-289,-289,889,-289,891,-289,744,756,621,624,596',
'301,606,754,857,752,-95,-598,-289,-289,747,-96,129,-289,-598,-598,-598',
'-104,738,-91,-598,-598,-105,-598,736,744,897,621,624,596,-100,606,-598',
'299,740,662,129,308,310,314,317,674,943,-598,-598,129,-598,-598,-598',
'-598,-598,663,900,436,727,744,904,621,624,596,437,606,744,740,621,624',
'596,572,606,426,598,603,746,-265,-598,-598,-598,-598,-598,-598,-598',
'-598,-598,-598,-598,-598,-598,-598,-513,906,-598,-598,-598,740,725,-513',
'251,252,-598,352,740,-598,924,910,-513,301,-598,129,-598,746,-598,-598',
'-598,-598,-598,-598,-598,-267,-598,-598,-598,312,315,955,-514,621,624',
'596,129,606,913,-514,914,-598,-598,-85,-94,299,-598,303,-514,308,310',
'314,317,826,814,-103,140,142,144,148,152,158,163,167,170,176,181,192',
'196,202,206,210,213,133,136,139,143,145,150,154,251,252,129,171,177',
'182,187,197,200,208,211,214,134,389,390,391,392,393,156,161,166,169',
'173,179,184,189,194,198,204,212,710,131,301,389,390,391,392,393,157',
'162,709,174,180,186,191,195,201,207,312,315,132,138,341,342,301,149',
'153,159,164,744,129,621,624,596,299,606,251,252,308,310,314,317,141',
'146,705,155,160,165,168,172,178,183,188,193,203,209,299,-265,135,-289',
'308,310,314,317,703,699,-289,740,690,129,744,-595,621,624,596,-289,606',
'688,137,925,687,129,928,151,140,142,144,148,152,158,163,167,170,176',
'181,192,196,202,206,210,213,133,136,139,143,145,150,154,740,929,738',
'171,177,182,187,197,200,208,211,214,134,389,390,391,392,393,156,161',
'166,169,173,179,184,189,194,932,934,212,936,955,301,621,624,596,938',
'606,157,162,936,174,180,186,191,195,201,207,312,315,132,138,301,941',
'942,149,153,159,164,744,301,621,624,596,299,606,303,944,308,310,314',
'317,141,146,301,155,160,165,168,172,178,183,188,193,203,209,301,678',
'135,403,129,-513,675,674,425,959,405,740,-513,961,744,427,621,624,596',
'404,606,-513,137,556,426,517,576,151,140,142,144,148,152,158,163,167',
'170,176,181,192,196,202,206,210,213,133,136,139,143,145,150,154,740',
'574,546,171,177,182,187,197,200,208,211,214,134,389,390,391,392,393',
'156,161,166,169,173,179,184,189,194,572,972,212,768,770,352,-514,766',
'8,15,-268,157,162,-514,174,180,186,191,195,201,207,556,-514,132,138',
'-290,-289,662,149,153,159,164,-290,-289,943,549,129,-70,-595,526,977',
'-290,-289,663,978,141,146,525,155,160,165,168,172,178,183,188,193,203',
'209,662,1005,135,9,459,-290,523,664,1007,982,301,461,-290,64,508,479',
'663,1006,478,470,460,-290,137,466,991,993,995,151,140,142,144,148,152',
'158,163,167,170,176,181,192,196,202,206,210,213,133,136,139,143,145',
'150,154,997,458,995,171,177,182,187,197,200,208,211,214,134,457,738',
'454,438,415,156,161,166,169,173,179,184,189,194,331,430,212,1004,424',
'423,-281,421,418,1010,415,157,162,-281,174,180,186,191,195,201,207,1014',
'-281,132,138,-281,-290,352,149,153,159,164,-281,-290,982,348,936,1018',
'936,936,1021,-281,-290,-595,-594,141,146,402,155,160,165,168,172,178',
'183,188,193,203,209,129,398,135,9,128,395,1027,1028,368,347,345,340',
'690,64,129,328,982,326,995,1040,995,995,137,291,288,129,270,151,140',
'142,144,148,152,158,163,167,170,176,181,192,196,202,206,210,213,133',
'136,139,143,145,150,154,255,982,936,171,177,182,280,283,284,285,211',
'214,134,248,109,995,,,156,161,166,169,275,278,279,281,194,86,93,287',
',4,,,,,,,157,162,,174,180,186,191,195,201,207,,,132,138,,,,149,153,159',
'164,,,,,,282,,,,,,,,141,146,,155,160,165,168,172,178,183,188,193,203',
'209,,,135,,,,,,,,,,,,,,,,,,,,137,,,,,151,140,142,144,148,152,158,163',
'167,170,176,181,192,196,202,206,210,213,133,136,139,143,145,150,154',
',,,171,177,182,187,197,200,208,211,214,134,,,,,,156,161,166,169,173',
'179,184,189,194,,,212,,,,,,,,,157,162,,174,180,186,191,195,201,207,',
',132,138,,,,149,153,159,164,,,,,,,,,,,,,,141,146,,155,160,165,168,172',
'178,183,188,193,203,209,,,135,9,,,,,,,,,,64,,,,,,,,,137,,,,,151,140',
'142,144,148,152,158,163,167,170,176,181,192,196,202,206,210,213,133',
'136,139,143,145,150,154,,,,171,177,182,187,197,200,208,211,214,134,',
',,,,156,161,166,169,173,179,184,189,194,,,212,,,,,,,,,157,162,,174,180',
'186,191,195,201,207,,,132,138,,,,149,153,159,164,,,,,,,,,,,,,,141,146',
',155,160,165,168,172,178,183,188,193,203,209,,,135,9,,,,,,,,,,64,14',
'19,26,33,38,41,,,137,59,69,,,151,88,,100,106,5,11,20,25,32,,,,,,62,66',
'72,74,80,85,92,,,6,,,,,735,43,48,51,54,56,63,70,75,82,86,93,98,,4,8',
'15,,29,35,,45,49,55,301,302,305,307,309,313,316,318,320,322,298,,304',
'306,,,312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317',
'319,321,323,91,300,,,,9,16,23,31,36,40,,,,57,64,,311,,-242,,,108,,,17',
'22,30,362,19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,',
'62,66,72,74,80,85,92,,,6,,,,,714,43,48,,54,56,63,70,75,82,86,93,98,',
'4,8,15,,29,35,,45,49,55,301,302,305,307,309,313,316,318,320,322,298',
',304,306,,,312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314',
'317,319,321,323,91,300,,,,9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17',
'22,30,362,19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,',
'62,66,72,74,80,85,92,,,6,,,,,735,43,48,,54,56,63,70,75,82,86,93,98,',
'4,8,15,,29,35,,45,49,55,301,302,305,307,309,313,316,318,320,322,298',
',304,306,,,312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314',
'317,319,321,323,91,300,,,,9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17',
'22,30,362,19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,',
'62,66,72,74,80,85,92,,,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8',
'15,,29,35,,45,49,55,301,302,305,307,309,313,316,318,320,322,298,,304',
'306,,,312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317',
'319,321,323,91,300,,,,9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22',
'30,362,19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62',
'66,72,74,80,85,92,,,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15',
',29,35,,45,49,55,301,302,305,307,309,313,316,318,320,322,298,,304,306',
',,312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317,319',
'321,323,91,300,,,,9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30',
'362,19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66',
'72,74,80,85,92,,,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29',
'35,,45,49,55,301,302,305,307,309,313,316,318,320,322,298,,304,306,,',
'312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321',
'323,91,300,,,,9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362',
'19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74',
'80,85,92,,,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,',
'45,49,55,301,302,305,307,309,313,316,318,320,322,298,,304,306,,,312',
'315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323',
'91,300,,,,9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362,19,26',
'33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85',
'92,,,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49',
'55,301,302,305,307,309,313,316,318,320,322,298,,304,306,,,312,315,,60',
',,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300',
',,,9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362,19,26,33,38',
'41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,',
',6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301',
'302,305,307,309,313,316,318,320,322,298,,304,306,,,312,315,,60,,,78',
',,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300,,,',
'9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362,19,26,33,38,41',
',,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6',
',,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301',
'302,305,307,309,313,316,318,320,322,298,,304,306,,,312,315,,60,,,78',
',,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300,,,',
'9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362,19,26,33,38,41',
',,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6',
',,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301',
'302,305,307,309,313,316,318,320,322,298,,304,306,,,312,315,,60,,,78',
',,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300,,,',
'9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362,19,26,33,38,41',
',,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6',
',,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301',
'302,305,307,309,313,316,318,320,322,298,,304,306,,,312,315,,60,,,78',
',,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300,,,',
'9,16,23,31,36,40,,,,57,64,129,311,,,,,108,,,17,22,30,362,19,26,33,38',
'41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,',
',6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301',
'302,305,307,309,313,316,318,320,322,298,,304,306,,,312,315,,60,,,365',
',,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300,,,',
'9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362,19,26,33,38,41',
',,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6',
',,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301',
'302,305,307,309,313,316,318,320,322,298,,304,306,,,312,315,,60,,,78',
',,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300,,,',
'9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362,19,26,33,38,41',
',,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6',
',,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301',
'302,305,307,309,313,316,318,320,322,298,,304,306,,,312,315,,60,,,78',
',,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300,,,',
'9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362,19,26,33,38,41',
',,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6',
',,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301',
'302,305,307,309,313,316,318,320,322,298,,304,306,,,312,315,,60,,,78',
',,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300,,,',
'9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362,19,26,33,38,41',
',,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6',
',,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301',
'302,305,307,309,313,316,318,320,322,298,,304,306,,,312,315,,60,,,78',
',,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300,,,',
'9,16,23,31,36,40,,,,57,64,,311,,,,,108,,,17,22,30,362,19,26,33,38,41',
',,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6',
',,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301',
',,,,,,,,,,,,,,,312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310',
'314,317,,,323,91,300,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22',
'30,362,19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62',
'66,72,74,80,85,92,,,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15',
',29,35,,45,49,55,301,-617,-617,-617,-617,313,316,,,-617,-617,,,,,,312',
'315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323',
'91,300,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,362,19,26,33',
'38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92',
',,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55',
'301,,,,,,,,,,,,,,,,312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308',
'310,314,317,,,323,91,300,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17',
'22,30,362,19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,',
'62,66,72,74,80,85,92,,,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8',
'15,,29,35,,45,49,55,301,-617,-617,-617,-617,313,316,,,-617,-617,,,,',
',312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317,319',
'321,323,91,300,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,362',
'19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74',
'80,85,92,,,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,',
'45,49,55,301,302,305,307,309,313,316,318,320,322,298,,-617,-617,,,312',
'315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323',
'91,300,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,362,19,26,33',
'38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92',
',,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55',
'301,-617,-617,-617,-617,313,316,,,-617,-617,,,,,,312,315,,60,,,78,,',
'97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91,300,,,,9',
'16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,362,19,26,33,38,41,,,,59',
'69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,43',
'48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301,302,305',
'307,309,313,316,,,322,298,,,,,,312,315,,60,,,365,,,97,101,,,13,,27,299',
',303,46,308,310,314,317,319,321,323,91,300,,,,9,16,23,31,36,40,,,,57',
'64,,,,,,,108,,,17,22,30,362,19,26,33,38,41,,,,59,69,,,,88,,100,106,5',
'11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,43,48,,54,56,63,70,75',
'82,86,93,98,,4,8,15,,29,35,,45,49,55,301,,,,,,,,,,,,,,,,312,315,,60',
',,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317,,,323,91,300,,,,9',
'16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,362,19,26,33,38,41,,,,59',
'69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,43',
'48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301,-617,-617',
'-617,-617,313,316,,,-617,-617,,,,,,312,315,,60,,,78,,,97,101,,,13,,27',
'299,,303,46,308,310,314,317,319,321,323,91,300,,,,9,16,23,31,36,40,',
',,57,64,,,,,,,108,,,17,22,30,362,19,26,33,38,41,,,,59,69,,,,88,,100',
'106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,43,48,,54,56,63',
'70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,301,302,305,307,309,313,316',
'318,320,322,298,,-617,-617,,,312,315,,60,,,365,,,97,101,,,13,,27,299',
',303,46,308,310,314,317,319,321,323,91,300,,,,9,16,23,31,36,40,,,,57',
'64,,,,,,,108,,,17,22,30,362,19,26,33,38,41,,,,59,69,,,,88,,100,106,5',
'11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,43,48,,54,56,63,70,75',
'82,86,93,98,,4,8,15,,29,35,,45,49,55,301,-617,-617,-617,-617,313,316',
',,-617,-617,,,,,,312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308',
'310,314,317,319,321,323,91,300,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108',
',,17,22,30,362,19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32',
',,,,,62,66,72,74,80,85,92,,,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98',
',4,8,15,,29,35,,45,49,55,301,302,305,307,309,313,316,318,,322,298,,',
',,,312,315,,60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317,319',
'321,323,91,300,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,14',
'19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74',
'80,85,92,,,6,,,,,,43,48,51,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35',
',45,49,55,301,-617,-617,-617,-617,313,316,,,-617,-617,,,,,,312,315,',
'60,,,78,,,97,101,,,13,,27,299,,303,46,308,310,314,317,319,321,323,91',
'300,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,',
',,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92',
',,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,',
',,,,,,,,,,,,,,,,,226,,,228,,,97,101,,744,13,621,624,596,600,606,46,',
',,,,,,231,599,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,601,,17,22,30,19',
'26,33,,41,,598,603,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72',
'74,80,85,92,,,110,,,,605,,,48,,,56,63,70,75,82,86,93,98,233,4,8,15,',
'29,35,,45,49,55,301,,,,,,,,,,,,,,,,312,315,,226,,,228,,,97,101,,,13',
',218,299,220,303,46,308,310,314,317,,,323,231,300,,,,9,16,23,31,36,40',
',,,57,64,,,,,,,108,,215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106',
'5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63',
'70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,',
'228,,,97,101,,744,13,621,624,596,781,606,46,,,,,,,,231,599,,,,9,16,23',
'31,36,40,,,,57,64,,,,,,,108,601,,17,22,30,19,26,33,,41,,598,603,59,69',
',,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,110,,,,605',
',,48,,,56,63,70,75,82,86,93,98,233,4,8,15,,29,35,,45,49,55,,,,,,,,,',
',,,,,,,,,,226,,,228,,,97,101,,,13,,218,,220,,46,,,,,,,,231,,,,,9,16',
'23,31,36,40,,,,57,64,,,,,,,108,,215,17,22,30,19,26,33,,41,,,,59,69,',
',,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,',
',,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,',
',,,,,,,,226,,,228,,,97,101,,744,13,621,624,596,781,606,46,,,,,,,,231',
'599,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,601,,17,22,30,19,26,33,,41',
',598,603,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80',
'85,92,,,110,,,,605,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45',
'49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,744,13,621,624,596,781',
'606,46,,,,,,,,231,599,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,601,,17',
'22,30,19,26,33,,41,,598,603,59,69,,,,88,,100,106,5,11,20,25,32,,,,,',
'62,66,72,74,80,85,92,,,6,,,,605,,,48,,,56,63,70,75,82,86,93,98,,4,8',
'15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,744,13,621',
'624,596,600,606,46,,,,,,,,91,599,,,,9,16,23,31,36,40,,,,57,64,356,,',
',,359,108,601,,17,22,30,19,26,33,,41,,598,603,59,69,,,,88,,100,106,5',
'11,20,25,32,,,,,,62,66,72,74,80,85,92,,,110,,,,605,,,48,,,56,63,70,75',
'82,86,93,98,233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228',
',,97,101,,,13,,218,,220,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64',
',,,,,,108,,215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20',
'25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,,48,,,56,63,70,75,82,86,93',
'98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,744',
'13,621,624,596,781,606,46,,,,,,,,91,599,,,,9,16,23,31,36,40,,,,57,64',
'129,,,,,,108,601,,17,22,30,19,26,33,,41,,598,603,59,69,,,,88,,100,106',
'5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,110,,,,605,,,48,,,56,63,70',
'75,82,86,93,98,233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,',
'228,,,97,101,,,13,,218,,220,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57',
'64,,,,,,,108,,215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111',
'112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75',
'82,86,93,98,233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228',
',,97,101,,,13,,218,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,',
',,,,108,,215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25',
'32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,,48,,,56,63,70,75,82,86,93,98',
',4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,744',
'13,621,624,596,600,606,46,,,,,,,,91,599,,,,9,16,23,31,36,40,,,,57,64',
',,,,,,108,601,,17,22,30,19,26,33,,41,,598,603,59,69,,,,88,,100,106,5',
'111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,605,,,48,,,56,63',
'70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,',
'228,,,97,101,,744,13,621,624,596,600,606,46,,,,,,,,231,599,,,,9,16,23',
'31,36,40,,,,57,64,,,,,,,108,601,,17,22,30,19,26,33,,41,,598,603,59,69',
',,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,',
',605,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,',
',,,,,,,,,,,,226,,,228,,,97,101,,744,13,621,624,596,600,606,46,,,,,,',
',231,599,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,601,,17,22,30,19,26',
'33,,41,,598,603,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74',
'80,85,92,,,6,,,,605,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45',
'49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,91,',
',,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59',
'69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110',
',,,,,,115,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,,,117,,,,,,,,,,',
',,,,,,,,,877,,,228,,,97,101,,,13,,,,,,,,,,,,,,,,,,,9,16,23,31,36,40',
',,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5',
'111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70',
'75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228',
',,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,',
',108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32',
',,,,,119,121,122,74,80,85,92,,,110,,,,,,,115,,,56,63,70,75,82,86,93',
'98,,4,8,15,,29,35,,,,117,,,,,,,,,,,,,,,,,,,,261,,,267,,,97,101,,,13',
',,,,,,,,,,,,,,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19',
'26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80',
'85,92,,,6,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55',
',,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,91,,,,,9,16',
'23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88',
',100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48',
',,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,',
',,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,',
',57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111',
'112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75',
'82,86,93,98,233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228',
',,97,101,,,13,,638,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,',
',,,,108,,215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112',
'25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86',
'93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101',
',,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17',
'22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119',
'121,122,74,80,85,92,,,110,,,,,,,115,,,56,63,70,75,82,86,93,98,,4,8,15',
',29,35,,,,117,,,,,,,,,,,,,,,,,,,,261,,,267,,,97,101,,,13,,,,,,,,,,,',
',,,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,',
',,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92',
',,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,',
',,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16',
'23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88',
',100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48',
',,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,',
',,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,',
',57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111',
'112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75',
'82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,',
'97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108',
',,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62',
'66,72,74,80,85,92,,,6,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29',
'35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,',
',,,91,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41',
',,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6',
',,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,',
',,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,91,,,,,9,16,23,31',
'36,40,,,,57,64,129,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,',
'100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,,48,,,56,63',
'70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,',
'228,,,97,101,,,13,,,,,,46,,,,,,,,91,,,,,9,16,23,31,36,40,,,,57,64,,',
',,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25',
'32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93',
'98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,',
'13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22',
'30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121',
'122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29',
'35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,',
',,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,38',
'41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,',
',6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,',
',,,,,,,,,,,,,,,,,,60,,,78,,,97,101,,,13,,27,,,,46,,,,,,,,91,,,,,9,16',
'23,31,36,40,,,,57,64,,,,,,546,108,,,17,22,30,19,26,33,,41,,,,59,69,',
',,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,',
',,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,',
',,,,,,,,226,,,228,,,97,101,,,13,,534,,,,46,,,,,,,,231,,,,,9,16,23,31',
'36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100',
'106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56',
'63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226',
',,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64',
',,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112',
'25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86',
'93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101',
',,13,,829,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,',
',17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,',
'119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4',
'8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,',
',,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19',
'26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80',
'85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49',
'55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,',
',9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69',
',,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,110,,,,,,,48',
',,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,',
',,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,',
',57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111',
'112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75',
'82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,',
'97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108',
',,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,',
',119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4',
'8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,',
',,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19',
'26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74',
'80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45',
'49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231',
',,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59',
'69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110',
',,,,,,115,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,,,117,,,,,,,,,,',
',,,,,,,,,261,,,267,,,97,101,,,13,,265,,,,,,,,,,,,,,,,,9,16,23,31,36',
'40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106',
'5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,115,,,56,63',
'70,75,82,86,93,98,,4,8,15,,29,35,,,,117,,,,,,,,,,,,,,,,,,,,261,,,228',
',,97,101,,,13,,,,,,,,,,,,,,,,,,,9,16,23,31,36,40,,,,57,64,,,,263,,,108',
',,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,',
',119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4',
'8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,',
',,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19',
'26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74',
'80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45',
'49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231',
',,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59',
'69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110',
',,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,',
',,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31',
'36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100',
'106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56',
'63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226',
',,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64',
',,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112',
'25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86',
'93,98,233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97',
'101,,,13,,638,,220,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,',
',,108,,215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25',
'32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93',
'98,233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101',
',,13,,,,220,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,',
'215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,',
',62,66,72,74,80,85,92,,,6,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15',
',29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46',
',,,,,,,91,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33',
',41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92',
',,110,,,,,,,48,,,56,63,70,75,82,86,93,98,233,4,8,15,,29,35,,45,49,55',
',,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,218,,220,,46,,,,,,,,231',
',,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,215,17,22,30,19,26,33,,41,',
',,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92',
',,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,',
',,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16',
'23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88',
',100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,115',
',,56,63,70,445,82,86,93,448,,4,8,15,,29,35,,,,117,,,,,,,,,,,,,,,,,,',
',443,,,228,,,97,101,,,13,,,,,,,,,,,,,,,,,,,9,16,23,31,36,40,,,,57,64',
',,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25',
'32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,,48,,,56,63,70,75,82,86,93,98',
',4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13',
',,,,,46,,,,,,,,91,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30',
'19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74',
'80,85,92,,,6,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49',
'55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,91,,,,',
'9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69',
',,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,',
',,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,',
',,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36',
'40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106',
'5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75',
'82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,',
'97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108',
',,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62',
'66,72,74,80,85,92,,,6,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29',
'35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,',
',,,91,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41',
',,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92',
',,110,,,,,,,115,,,56,63,70,445,82,86,93,448,,4,8,15,,29,35,,,,117,,',
',,,,,,,,,,,,,,,,,443,,,228,,,97,101,,,13,,,,,,,,,,,,,,,,,,,9,16,23,31',
'36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100',
'106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,115,,,56',
'63,70,75,82,86,93,98,,4,8,15,,29,35,,,,117,,,,,,,,,,,,,,,,,,,,877,,',
'228,,,97,101,,,13,,,,,,,,,,,,,,,,,,,9,16,23,31,36,40,,,,57,64,,,,,,',
'108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32',
',,,,,119,121,122,74,80,85,92,,,110,,,,,,,115,,,56,63,70,75,82,86,93',
'98,,4,8,15,,29,35,,,,117,,,,,,,,,,,,,,,,,,,,261,,,267,,,97,101,,,13',
',,,,,,,,,,,,,,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19',
'26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80',
'85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,233,4,8,15,,29,35,,45',
'49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,218,,220,,46,,,,,',
',,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,215,17,22,30,19,26,33',
',41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85',
'92,,,110,,,,,,,115,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,,,117,',
',,,,,,,,,,,,,,,,,,261,,,267,,,97,101,,,13,,,,,,,,,,,,,,,,,,,9,16,23',
'31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,',
'100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,,48,,,56,63',
'70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,',
'228,,,97,101,,,13,,,,,,46,,,,,,,,91,,,,,9,16,23,31,36,40,,,,57,64,,',
',,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25',
'32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,115,,,56,63,70,75,82,86',
'93,98,,4,8,15,,29,35,,,,117,,,,,,,,,,,,,,,,,,,,261,,,267,,,97,101,,',
'13,,,,,,,,,,,,,,,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30',
'19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122',
'74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,233,4,8,15,,29',
'35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,',
',,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,215,17,22,30,19,26,33',
',41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85',
'92,,,110,,,,,,,115,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,,,117,',
',,,,,,,,,,,,,,,,,,261,,,228,,,97,101,,,13,,,,,,,,,,,,,,,,,,,9,16,23',
'31,36,40,,,,57,64,,,,465,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88',
',100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48',
',,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,',
',,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,',
',57,64,,,,,,,108,,,17,22,30,19,26,33,38,41,,,,59,69,,,,88,,100,106,5',
'11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,43,48,51,54,56,63,70',
'75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,60,,,78,',
',97,101,,,13,,27,,,,46,,,,,,,,91,,,,,9,16,23,31,36,40,,,,57,64,,,,,',
',108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32',
',,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98',
',4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13',
',,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30',
'19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122',
'74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,233,4,8,15,,29',
'35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,',
',,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,215,17,22,30,19,26,33',
',41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92',
',,110,,,,,,,48,,,56,63,70,75,82,86,93,98,233,4,8,15,,29,35,,45,49,55',
',,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,218,,220,,46,,,,,,,,231',
',,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,215,17,22,30,19,26,33,,41,',
',,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92',
',,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,',
',,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16',
'23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88',
',100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48',
',,56,63,70,75,82,86,93,98,233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,',
',,,,,226,,,228,,,97,101,,,13,,,,220,,46,,,,,,,,231,,,,,9,16,23,31,36',
'40,,,,57,64,,,,,,,108,,215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100',
'106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56',
'63,70,75,82,86,93,98,233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,',
'226,,,228,,,97,101,,,13,,638,,220,,46,,,,,,,,231,,,,,9,16,23,31,36,40',
',,,57,64,,,,,,,108,,215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106',
'5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63',
'70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,',
'228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,',
',,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25',
'32,,,,,,62,66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98',
'233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,',
'13,,218,,220,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108',
',215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,',
',,62,66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8',
'15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,534',
',,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30',
'19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74',
'80,85,92,,,6,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49',
'55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,91,,,,',
'9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,38,41,,,,59',
'69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,43',
'48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,',
',,,,,,,60,,,78,,,97,101,,,13,,27,,,,46,,,,,,,,91,,,,,9,16,23,31,36,40',
',,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5',
'11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,,48,,,56,63,70,75,82',
'86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97',
'101,,,13,,,,,,46,,,,,,,,91,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,',
',17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62',
'66,72,74,80,85,92,,,6,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29',
'35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,',
',,,91,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41',
',,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6',
',,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,',
',,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,91,,,,,9,16,23,31',
'36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100',
'106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,,48,,,56,63,70',
'75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228',
',,97,101,,,13,,,,,,46,,,,,,,,91,,,,,9,16,23,31,36,40,,,,57,64,,,,,,',
'108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,',
',,,62,66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4',
'8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,',
',,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19',
'26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74',
'80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45',
'49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231',
',,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59',
'69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,',
'48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,',
',,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,91,,,,,9,16,23,31,36,40',
',,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5',
'111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70',
'75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228',
',,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,',
',108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32',
',,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98',
',4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13',
',,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30',
'19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122',
'74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35',
',45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,',
'231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41',
',,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92',
',,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,',
',,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16',
'23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88',
',100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48',
',,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,',
',,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,',
',57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111',
'112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75',
'82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,',
'97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108',
',,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,',
',119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4',
'8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,',
',,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19',
'26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74',
'80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45',
'49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231',
',,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59',
'69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110',
',,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,',
',,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31',
'36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100',
'106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56',
'63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226',
',,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64',
',,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112',
'25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86',
'93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101',
',,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17',
'22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119',
'121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15',
',29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46',
',,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26',
'33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80',
'85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49',
'55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,',
',9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69',
',,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,',
',,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,',
',,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36',
'40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106',
'5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63',
'70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,',
'228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,',
',,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25',
'32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93',
'98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,',
'13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22',
'30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121',
'122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29',
'35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,',
',,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,',
'41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85',
'92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55',
',,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9',
'16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,',
',,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,',
',,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,',
',,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36',
'40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106',
'5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63',
'70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,',
'228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,',
',,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25',
'32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93',
'98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,',
'13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22',
'30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121',
'122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29',
'35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,',
',,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,',
'41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85',
'92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55',
',,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9',
'16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,',
',,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,',
',,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,',
',,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36',
'40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106',
'5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,6,,,,,,,48,,,56,63,70,75,82',
'86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97',
'101,,,13,,,,,,46,,,,,,,,91,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,',
',17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62',
'66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,',
'29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,',
',,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33',
',41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92',
',,110,,,,,,,48,,,56,63,70,75,82,86,93,98,233,4,8,15,,29,35,,45,49,55',
',,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,218,,220,,46,,,,,,,,231',
',,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,215,17,22,30,19,26,33,,41,',
',,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92',
',,110,,,,,,,115,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,,,117,,,,',
',,,,,,,,,,,,,,,967,,,228,,,97,101,,,13,,,,,,,,,,,,,,,,,,,9,16,23,31',
'36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100',
'106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56',
'63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226',
',,228,517,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57',
'64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20',
'25,32,,,,,,62,66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93',
'98,233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101',
',,13,,218,,220,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108',
',215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,111,112,25,32,',
',,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98',
'233,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,',
'13,,,,220,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,215',
'17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62',
'66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,',
'29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,',
',,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33',
',41,,,,59,69,,,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85',
'92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55',
',,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,218,,,,46,,,,,,,,231,,,',
',9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69',
',,,88,,100,106,5,111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,',
',,,,115,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,,,117,,,,,,,,,,,,',
',,,,,,,118,,,78,,,97,101,,,13,,27,,,,,,,,,,,,,,,,,9,16,23,31,36,40,',
',,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5',
'111,112,25,32,,,,,,119,121,122,74,80,85,92,,,110,,,,,,,48,,,56,63,70',
'75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228',
',,97,101,,,13,,638,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,',
',,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32',
',,,,,62,66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,',
'4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,',
',,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30',
'19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74',
'80,85,92,,,6,,,,,,43,48,,54,56,63,70,75,82,86,93,98,,4,8,15,,29,35,',
'45,49,55,,,,,,,,,,,,,,,,,,,,60,,,78,,,97,101,,,13,,27,,,,46,,,,,,,,91',
',,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59',
'69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,110,,,,',
',,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,',
',,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,,9,16,23,31,36',
'40,,,,57,64,,,,,,,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106',
'5,11,20,25,32,,,,,,62,66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75',
'82,86,93,98,,4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,',
'97,101,,,13,,534,,,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,',
',,108,,,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32',
',,,,,62,66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,233',
'4,8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,',
'218,,220,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,129,,,,,,108,',
'215,17,22,30,19,26,33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,',
',62,66,72,74,80,85,92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,233,4',
'8,15,,29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,218',
',220,,46,,,,,,,,231,,,,,9,16,23,31,36,40,,,,57,64,,,,,,,108,,215,17',
'22,30,19,26,33,38,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66',
'72,74,80,85,92,,,6,,,,,,43,48,51,54,56,63,70,75,82,86,93,98,,4,8,15',
',29,35,,45,49,55,,,,,,,,,,,,,,,,,,,,60,,,78,,,97,101,,,13,,27,,,,46',
',,,,,,,91,,,,,9,16,23,31,36,40,,,,57,64,,,,,,546,108,,,17,22,30,19,26',
'33,,41,,,,59,69,,,,88,,100,106,5,11,20,25,32,,,,,,62,66,72,74,80,85',
'92,,,110,,,,,,,48,,,56,63,70,75,82,86,93,98,,4,8,15,,29,35,,45,49,55',
',,,,,,,,,,,,,,,,,,,226,,,228,,,97,101,,,13,,,,,,46,,,,,,,,231,,,,-282',
'9,16,23,31,36,40,-282,-282,-282,57,64,-282,-282,-282,,-282,,108,,,17',
'22,30,,,-282,-282,-282,,,,,,,,-282,-282,,-282,-282,-282,-282,-282,,',
',,,,,,,,,,,,,,,,,,,,,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282',
'-282,-282,-282,-282,,,-282,-282,-282,,,-282,,,-282,,,-282,-282,,-282',
',-282,,-282,,-282,-282,-282,-282,-282,-282,-282,,-282,,-282,,,,,,,,',
',,,,-282,-282,-282,-282,-599,-282,,-282,,,,-599,-599,-599,,,-599,-599',
'-599,786,-599,621,624,596,781,606,,,,-599,-599,-599,-599,,,599,,,,,-599',
'-599,,-599,-599,-599,-599,-599,,,,,,,,,,601,,,,,,,,,622,594,598,603',
',-599,-599,-599,-599,-599,-599,-599,-599,-599,-599,-599,-599,-599,-599',
',,-599,-599,-599,,,-599,,,-599,,,-599,-599,,-599,605,-599,,-599,,-599',
'-599,-599,-599,-599,-599,-599,,-599,-599,-599,,,,,,,,,,,,,-599,-599',
'-599,-599,-600,-599,,-599,,,,-600,-600,-600,,,-600,-600,-600,618,-600',
'621,624,596,600,606,,,,-600,-600,-600,-600,,,599,,,,,-600,-600,,-600',
'-600,-600,-600,-600,,,,,,,,,,601,680,,,,,,,,622,594,598,603,,-600,-600',
'-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,,,-600,-600',
'-600,,,-600,,,-600,,,-600,-600,,-600,605,-600,,-600,,-600,-600,-600',
'-600,-600,-600,-600,,-600,-600,-600,,,,,,,,,,,,,-600,-600,-600,-600',
'-616,-600,,-600,,,,-616,-616,-616,,,-616,-616,-616,618,-616,621,624',
'596,600,606,,,,-616,-616,-616,,,,599,,,,,-616,-616,,-616,-616,-616,-616',
'-616,,,,,,,,,,601,,,,,,,,,622,594,598,603,,-616,-616,-616,-616,-616',
'-616,-616,-616,-616,-616,-616,-616,-616,-616,,,-616,-616,-616,,,-616',
',352,-616,,,-616,-616,,-616,605,-616,,-616,,-616,-616,-616,-616,-616',
'-616,-616,,-616,-616,-616,,,,,,,,,,,,-616,-616,-616,,-616,,-616,-616',
'-616,-616,,,-616,-616,-616,786,-616,621,624,596,781,606,,,,-616,-616',
',,,,599,,,,,-616,-616,,-616,-616,-616,-616,-616,,,,,,,,,,601,,,,,,,',
',622,594,598,603,,-425,,,,,,,-425,-425,-425,,-616,-425,-425,-425,,-425',
',-616,,,,,352,-616,-425,-425,-425,,,,605,,,,,-425,-425,,-425,-425,-425',
'-425,-425,,-616,-616,,,,,,,,,,,,,-616,,,,,-616,,,-425,-425,-425,-425',
'-425,-425,-425,-425,-425,-425,-425,-425,-425,-425,,,-425,-425,-425,',
',-425,,352,-425,,,-425,-425,,-425,,-425,,-425,,-425,-425,-425,-425,-425',
'-425,-425,,-425,-425,-425,,,,,,,,,,,,-296,-425,-425,,-425,,-425,-296',
'-296,-296,,,-296,-296,-296,618,-296,621,624,596,600,606,,,,,-296,-296',
',,,599,,,,,-296,-296,,-296,-296,-296,-296,-296,,,,,,,,,,601,680,,,,',
',,,622,594,598,603,,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,,,-296,-296,-296,,,-296,,348,-296,,,-296,-296,,-296',
'605,-296,,-296,,-296,-296,-296,-296,-296,-296,-296,,-296,,-296,,,,,',
'521,522,,,518,,,-296,-296,,-296,,-296,157,162,,174,180,186,191,195,201',
'207,,,132,138,,,,149,153,159,164,,,,,,,,,,,,,,141,146,,155,160,165,168',
'172,178,183,188,193,203,209,,,135,,,,,,,,,,632,568,,,630,,,,,,137,,',
'157,162,151,174,180,186,191,195,201,207,,,132,138,,,,149,153,159,164',
',,,,,352,,,,,,,,141,146,,155,160,165,168,172,178,183,188,193,203,209',
',,135,,,,,,,,,,628,522,,,626,,,,,,137,,,157,162,151,174,180,186,191',
'195,201,207,,,132,138,,,,149,153,159,164,,,,,,352,,,,,,,,141,146,,155',
'160,165,168,172,178,183,188,193,203,209,,,135,,,,,,,,,,1033,568,,,1032',
',,,,,137,,,157,162,151,174,180,186,191,195,201,207,,,132,138,,,,149',
'153,159,164,,,,,,352,,,,,,,,141,146,,155,160,165,168,172,178,183,188',
'193,203,209,,,135,,,,,,,,,,643,522,,,642,,,,,,137,,,157,162,151,174',
'180,186,191,195,201,207,,,132,138,,,,149,153,159,164,,,,,,352,,,,,,',
',141,146,,155,160,165,168,172,178,183,188,193,203,209,,,135,,,,,,,,',
',521,522,,,518,,,,,,137,,,157,162,151,174,180,186,191,195,201,207,,',
'132,138,,,,149,153,159,164,,,,,,352,,,,,,,,141,146,,155,160,165,168',
'172,178,183,188,193,203,209,,,135,,,,,,,,,,801,568,,,799,,,,,,137,,',
'157,162,151,174,180,186,191,195,201,207,,,132,138,,,,149,153,159,164',
',,,,,352,,,,,,,,141,146,,155,160,165,168,172,178,183,188,193,203,209',
',,135,,,,,,,,,,1030,522,,,1029,,,,,,137,,,157,162,151,174,180,186,191',
'195,201,207,,,132,138,,,,149,153,159,164,,,,,,352,,,,,,,,141,146,,155',
'160,165,168,172,178,183,188,193,203,209,,,135,,,,,,,,,,567,568,,,563',
',,,,,137,,,157,162,151,174,180,186,191,195,201,207,,,132,138,,,,149',
'153,159,164,,,,,,352,,,,,,,,141,146,,155,160,165,168,172,178,183,188',
'193,203,209,,,135,,,,,,,,,,673,568,,,672,,,,,,137,,,157,162,151,174',
'180,186,191,195,201,207,,,132,138,,,,149,153,159,164,,,,,,352,,,,,,',
',141,146,,155,160,165,168,172,178,183,188,193,203,209,,,135,,,,,,,,',
',646,568,,,645,,,,,,137,,,157,162,151,174,180,186,191,195,201,207,,',
'132,138,,,,149,153,159,164,,,,,,352,,,,,,,,141,146,,155,160,165,168',
'172,178,183,188,193,203,209,,,135,,,,,,,,,,670,522,,,669,,,,,,137,,',
'157,162,151,174,180,186,191,195,201,207,,,132,138,,,,149,153,159,164',
',,,,,352,,,,,,,,141,146,,155,160,165,168,172,178,183,188,193,203,209',
',,135,,,,,,,,,,989,568,,,988,,,,,,137,,,157,162,151,174,180,186,191',
'195,201,207,,,132,138,,,,149,153,159,164,,,,,,352,,,,,,,,141,146,,155',
'160,165,168,172,178,183,188,193,203,209,,,135,,,,,,,,,,561,522,,,558',
',,,,,137,,,157,162,151,174,180,186,191,195,201,207,,,132,138,,,,149',
'153,159,164,,,,,,352,,,,,,,,141,146,,155,160,165,168,172,178,183,188',
'193,203,209,,,135,,,,,,,,,,646,568,,,645,,,,,,137,,,157,162,151,174',
'180,186,191,195,201,207,,,132,138,,,,149,153,159,164,,,,,,352,,,,,,',
',141,146,,155,160,165,168,172,178,183,188,193,203,209,,,135,,,,,,,,',
',643,522,,,642,,,,,,137,,,157,162,151,174,180,186,191,195,201,207,,',
'132,138,,,,149,153,159,164,,,,,,352,,,,,,,,141,146,,155,160,165,168',
'172,178,183,188,193,203,209,,786,135,621,624,596,781,606,786,,621,624',
'596,781,606,,,599,,,,,137,,599,,618,151,621,624,596,600,606,,,,,,,601',
',,599,,,,601,,622,594,598,603,,,,622,594,598,603,,,,,618,601,621,624',
'596,600,606,,,,622,594,598,603,,,599,,,,129,605,,,,,,618,605,621,624',
'596,600,606,,,,,601,,,,,599,,,605,622,594,598,603,618,,621,624,596,600',
'606,,,,,,,,601,618,599,621,624,596,600,606,,622,594,598,603,,,,,599',
'605,,,,,,601,,,,,,,,,622,594,598,603,,,601,608,,,,,605,,,622,594,598',
'603,,,,,,,,,,,,,,,,,,605,,,,,,,,,,,,,,,605' ]
        racc_action_table = arr = ::Array.new(25699, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'75,351,1030,325,911,1043,695,75,75,75,715,444,75,75,75,12,75,113,496',
'511,125,713,6,123,75,431,75,75,75,764,632,344,713,681,1033,847,75,75',
'681,75,75,75,75,75,715,908,1029,423,240,1,496,240,18,511,496,496,402',
'116,6,431,18,406,406,575,432,726,325,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,630,763,75,75,75,626,75,75,587,609,75,721,695,75,75,632,75',
'432,75,423,75,12,75,75,75,75,75,75,75,123,75,1033,75,670,351,1030,444',
'911,1043,351,1030,113,911,1043,125,75,75,75,75,646,75,718,75,764,632',
'444,646,646,646,75,444,646,646,646,344,646,630,1033,847,344,406,847',
'1033,847,646,646,646,646,908,1029,402,116,575,908,1029,646,646,575,646',
'646,646,646,646,443,628,281,669,443,232,708,670,763,281,81,147,630,763',
'375,587,706,626,452,375,587,609,701,646,646,646,646,646,646,646,646',
'646,646,646,646,646,646,700,269,646,646,646,670,646,646,670,743,646',
'683,683,646,646,745,646,477,646,670,646,232,646,646,646,646,646,646',
'646,364,646,646,646,669,364,147,147,147,81,698,693,693,452,452,673,646',
'646,646,646,645,646,452,646,561,345,748,645,645,645,646,81,645,645,645',
'269,645,275,278,669,628,975,669,975,275,278,645,645,645,477,477,271',
'385,669,271,385,645,645,477,645,645,645,645,645,279,223,561,345,673',
'643,386,279,683,386,697,673,254,561,345,289,673,642,775,803,673,117',
'117,645,645,645,645,645,645,645,645,645,645,645,645,645,645,693,673',
'645,645,645,245,645,645,276,256,645,271,271,645,645,276,645,223,645',
'689,645,643,645,645,645,645,645,645,645,686,645,225,645,642,775,803',
'254,254,254,289,289,289,803,801,445,645,645,645,645,98,645,803,645,102',
'676,794,98,98,98,645,794,98,98,98,671,98,245,245,245,803,256,256,256',
'98,283,98,98,98,499,668,285,283,448,644,225,98,98,285,98,98,98,98,98',
'284,891,102,801,445,733,639,284,733,76,801,445,891,102,76,801,445,499',
'637,801,445,499,499,98,98,98,98,98,98,98,98,98,98,98,98,98,98,801,445',
'98,98,98,448,98,98,891,891,98,765,448,98,98,631,98,448,98,720,98,448',
'98,98,98,98,98,98,98,754,98,924,98,924,924,924,287,924,629,448,754,44',
'891,287,84,98,98,98,98,563,98,84,98,343,343,627,563,563,563,98,84,720',
'563,563,997,563,997,997,997,997,997,104,720,754,754,50,895,280,104,623',
'997,895,50,44,280,563,563,104,563,563,563,563,563,746,44,746,746,746',
'331,746,658,619,997,331,331,658,618,754,956,924,779,956,616,997,997',
'783,563,563,563,563,563,563,563,563,563,563,563,563,563,563,1032,558',
'563,563,563,784,563,1032,702,702,563,785,1032,563,52,786,1032,997,563',
'787,563,789,563,563,563,563,563,563,563,791,563,792,563,982,613,982',
'982,982,494,982,612,746,610,558,567,563,563,604,563,798,563,567,567',
'567,558,597,52,567,567,563,567,593,740,802,740,740,740,52,740,567,494',
'982,878,573,494,494,494,494,805,878,567,567,807,567,567,567,567,567',
'878,809,241,571,855,813,855,855,855,241,855,601,740,601,601,601,570',
'601,241,738,738,740,817,567,567,567,567,567,567,567,567,567,567,567',
'567,567,567,965,819,567,567,567,855,567,965,21,21,567,566,601,567,855',
'825,965,505,567,562,567,601,567,567,567,567,567,567,567,828,567,567',
'567,505,505,999,966,999,999,999,552,999,830,966,831,567,567,547,567',
'505,567,505,966,505,505,505,505,1009,1009,567,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,654,654,543,9,9,9,9,9,9,9,9,9,9,105,105,105',
'105,105,9,9,9,9,9,9,9,9,9,9,9,9,541,9,485,712,712,712,712,712,9,9,540',
'9,9,9,9,9,9,9,485,485,9,9,55,55,497,9,9,9,9,925,537,925,925,925,485',
'925,380,380,485,485,485,485,9,9,533,9,9,9,9,9,9,9,9,9,9,9,497,532,9',
'799,497,497,497,497,529,524,799,925,510,853,857,799,857,857,857,799',
'857,509,9,856,507,858,859,9,679,679,679,679,679,679,679,679,679,679',
'679,679,679,679,679,679,679,679,679,679,679,679,679,679,857,860,861',
'679,679,679,679,679,679,679,679,679,679,548,548,548,548,548,679,679',
'679,679,679,679,679,679,679,864,866,679,868,889,482,889,889,889,869',
'889,679,679,871,679,679,679,679,679,679,679,482,482,679,679,492,875',
'877,679,679,679,679,980,490,980,980,980,482,980,482,879,482,482,482',
'482,679,679,483,679,679,679,679,679,679,679,679,679,679,679,481,469',
'679,124,467,259,464,463,230,892,124,980,259,894,1014,230,1014,1014,1014',
'124,1014,259,679,724,230,399,384,679,685,685,685,685,685,685,685,685',
'685,685,685,685,685,685,685,685,685,685,685,685,685,685,685,685,1014',
'382,377,685,685,685,685,685,685,685,685,685,685,367,367,367,367,367',
'685,685,685,685,685,685,685,685,685,376,909,685,635,635,371,260,635',
'635,635,912,685,685,260,685,685,685,685,685,685,685,369,260,685,685',
'458,672,951,685,685,685,685,458,672,951,363,361,360,672,342,920,458',
'672,951,921,685,685,341,685,685,685,685,685,685,685,685,685,685,685',
'446,968,685,685,262,655,339,446,968,926,335,262,655,685,326,293,446',
'968,291,270,262,655,685,266,945,946,949,685,43,43,43,43,43,43,43,43',
'43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,950,261,952,43,43,43',
'43,43,43,43,43,43,43,258,957,255,243,239,43,43,43,43,43,43,43,43,43',
'43,234,43,967,229,226,969,219,217,974,216,43,43,969,43,43,43,43,43,43',
'43,979,969,43,43,264,1004,122,43,43,43,43,264,1004,981,121,983,984,985',
'986,987,264,1004,988,989,43,43,118,43,43,43,43,43,43,43,43,43,43,43',
'115,114,43,43,110,107,1002,1003,79,65,60,54,1008,43,48,42,1015,40,1022',
'1023,1024,1025,43,36,34,1031,30,43,33,33,33,33,33,33,33,33,33,33,33',
'33,33,33,33,33,33,33,33,33,33,33,33,33,22,1036,1037,33,33,33,33,33,33',
'33,33,33,33,19,3,1045,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,,,,',
',,33,33,,33,33,33,33,33,33,33,,,33,33,,,,33,33,33,33,,,,,,33,,,,,,,',
'33,33,,33,33,33,33,33,33,33,33,33,33,33,,,33,,,,,,,,,,,,,,,,,,,,33,',
',,,33,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512',
'512,512,512,512,512,512,512,512,,,,512,512,512,512,512,512,512,512,512',
'512,,,,,,512,512,512,512,512,512,512,512,512,,,512,,,,,,,,,512,512,',
'512,512,512,512,512,512,512,,,512,512,,,,512,512,512,512,,,,,,,,,,,',
',,512,512,,512,512,512,512,512,512,512,512,512,512,512,,,512,512,,,',
',,,,,,512,,,,,,,,,512,,,,,512,38,38,38,38,38,38,38,38,38,38,38,38,38',
'38,38,38,38,38,38,38,38,38,38,38,,,,38,38,38,38,38,38,38,38,38,38,,',
',,,38,38,38,38,38,38,38,38,38,,,38,,,,,,,,,38,38,,38,38,38,38,38,38',
'38,,,38,38,,,,38,38,38,38,,,,,,,,,,,,,,38,38,,38,38,38,38,38,38,38,38',
'38,38,38,,,38,38,,,,,,,,,,38,523,523,523,523,523,523,,,38,523,523,,',
'38,523,,523,523,523,523,523,523,523,,,,,,523,523,523,523,523,523,523',
',,523,,,,,590,523,523,523,523,523,523,523,523,523,523,523,523,,523,523',
'523,,523,523,,523,523,523,590,590,590,590,590,590,590,590,590,590,590',
',590,590,,,590,590,,523,,,523,,,523,523,,,523,,523,590,,590,523,590',
'590,590,590,590,590,590,523,590,,,,523,523,523,523,523,523,,,,523,523',
',590,,590,,,523,,,523,523,523,850,850,850,850,850,850,,,,850,850,,,',
'850,,850,850,850,850,850,850,850,,,,,,850,850,850,850,850,850,850,,',
'850,,,,,553,850,850,,850,850,850,850,850,850,850,850,850,,850,850,850',
',850,850,,850,850,850,553,553,553,553,553,553,553,553,553,553,553,,553',
'553,,,553,553,,850,,,850,,,850,850,,,850,,850,553,,553,850,553,553,553',
'553,553,553,553,850,553,,,,850,850,850,850,850,850,,,,850,850,,553,',
',,,850,,,850,850,850,527,527,527,527,527,527,,,,527,527,,,,527,,527',
'527,527,527,527,527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,647',
'527,527,,527,527,527,527,527,527,527,527,527,,527,527,527,,527,527,',
'527,527,527,647,647,647,647,647,647,647,647,647,647,647,,647,647,,,647',
'647,,527,,,527,,,527,527,,,527,,527,647,,647,527,647,647,647,647,647',
'647,647,527,647,,,,527,527,527,527,527,527,,,,527,527,,647,,,,,527,',
',527,527,527,848,848,848,848,848,848,,,,848,848,,,,848,,848,848,848',
'848,848,848,848,,,,,,848,848,848,848,848,848,848,,,848,,,,,,848,848',
',848,848,848,848,848,848,848,848,848,,848,848,848,,848,848,,848,848',
'848,834,834,834,834,834,834,834,834,834,834,834,,834,834,,,834,834,',
'848,,,848,,,848,848,,,848,,848,834,,834,848,834,834,834,834,834,834',
'834,848,834,,,,848,848,848,848,848,848,,,,848,848,,834,,,,,848,,,848',
'848,848,228,228,228,228,228,228,,,,228,228,,,,228,,228,228,228,228,228',
'228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,228,228,,228,228',
'228,228,228,228,228,228,228,,228,228,228,,228,228,,228,228,228,39,39',
'39,39,39,39,39,39,39,39,39,,39,39,,,39,39,,228,,,228,,,228,228,,,228',
',228,39,,39,228,39,39,39,39,39,39,39,228,39,,,,228,228,228,228,228,228',
',,,228,228,,39,,,,,228,,,228,228,228,963,963,963,963,963,963,,,,963',
'963,,,,963,,963,963,963,963,963,963,963,,,,,,963,963,963,963,963,963',
'963,,,963,,,,,,963,963,,963,963,963,963,963,963,963,963,963,,963,963',
'963,,963,963,,963,963,963,851,851,851,851,851,851,851,851,851,851,851',
',851,851,,,851,851,,963,,,963,,,963,963,,,963,,963,851,,851,963,851',
'851,851,851,851,851,851,963,851,,,,963,963,963,963,963,963,,,,963,963',
',851,,,,,963,,,963,963,963,539,539,539,539,539,539,,,,539,539,,,,539',
',539,539,539,539,539,539,539,,,,,,539,539,539,539,539,539,539,,,539',
',,,,,539,539,,539,539,539,539,539,539,539,539,539,,539,539,539,,539',
'539,,539,539,539,916,916,916,916,916,916,916,916,916,916,916,,916,916',
',,916,916,,539,,,539,,,539,539,,,539,,539,916,,916,539,916,916,916,916',
'916,916,916,539,916,,,,539,539,539,539,539,539,,,,539,539,,916,,,,,539',
',,539,539,539,971,971,971,971,971,971,,,,971,971,,,,971,,971,971,971',
'971,971,971,971,,,,,,971,971,971,971,971,971,971,,,971,,,,,,971,971',
',971,971,971,971,971,971,971,971,971,,971,971,971,,971,971,,971,971',
'971,832,832,832,832,832,832,832,832,832,832,832,,832,832,,,832,832,',
'971,,,971,,,971,971,,,971,,971,832,,832,971,832,832,832,832,832,832',
'832,971,832,,,,971,971,971,971,971,971,,,,971,971,,832,,,,,971,,,971',
'971,971,960,960,960,960,960,960,,,,960,960,,,,960,,960,960,960,960,960',
'960,960,,,,,,960,960,960,960,960,960,960,,,960,,,,,,960,960,,960,960',
'960,960,960,960,960,960,960,,960,960,960,,960,960,,960,960,960,516,516',
'516,516,516,516,516,516,516,516,516,,516,516,,,516,516,,960,,,960,,',
'960,960,,,960,,960,516,,516,960,516,516,516,516,516,516,516,960,516',
',,,960,960,960,960,960,960,,,,960,960,,516,,,,,960,,,960,960,960,749',
'749,749,749,749,749,,,,749,749,,,,749,,749,749,749,749,749,749,749,',
',,,,749,749,749,749,749,749,749,,,749,,,,,,749,749,,749,749,749,749',
'749,749,749,749,749,,749,749,749,,749,749,,749,749,749,580,580,580,580',
'580,580,580,580,580,580,580,,580,580,,,580,580,,749,,,749,,,749,749',
',,749,,749,580,,580,749,580,580,580,580,580,580,580,749,580,,,,749,749',
'749,749,749,749,,,,749,749,,580,,,,,749,,,749,749,749,973,973,973,973',
'973,973,,,,973,973,,,,973,,973,973,973,973,973,973,973,,,,,,973,973',
'973,973,973,973,973,,,973,,,,,,973,973,,973,973,973,973,973,973,973',
'973,973,,973,973,973,,973,973,,973,973,973,837,837,837,837,837,837,837',
'837,837,837,837,,837,837,,,837,837,,973,,,973,,,973,973,,,973,,973,837',
',837,973,837,837,837,837,837,837,837,973,837,,,,973,973,973,973,973',
'973,,,,973,973,,837,,,,,973,,,973,973,973,751,751,751,751,751,751,,',
',751,751,,,,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751,751',
'751,751,,,751,,,,,,751,751,,751,751,751,751,751,751,751,751,751,,751',
'751,751,,751,751,,751,751,751,493,493,493,493,493,493,493,493,493,493',
'493,,493,493,,,493,493,,751,,,751,,,751,751,,,751,,751,493,,493,751',
'493,493,493,493,493,493,493,751,493,,,,751,751,751,751,751,751,,,,751',
'751,493,493,,,,,751,,,751,751,751,267,267,267,267,267,267,,,,267,267',
',,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267',
',,267,,,,,,267,267,,267,267,267,267,267,267,267,267,267,,267,267,267',
',267,267,,267,267,267,221,221,221,221,221,221,221,221,221,221,221,,221',
'221,,,221,221,,267,,,267,,,267,267,,,267,,267,221,,221,267,221,221,221',
'221,221,221,221,267,221,,,,267,267,267,267,267,267,,,,267,267,,221,',
',,,267,,,267,267,267,940,940,940,940,940,940,,,,940,940,,,,940,,940',
'940,940,940,940,940,940,,,,,,940,940,940,940,940,940,940,,,940,,,,,',
'940,940,,940,940,940,940,940,940,940,940,940,,940,940,940,,940,940,',
'940,940,940,841,841,841,841,841,841,841,841,841,841,841,,841,841,,,841',
'841,,940,,,940,,,940,940,,,940,,940,841,,841,940,841,841,841,841,841',
'841,841,940,841,,,,940,940,940,940,940,940,,,,940,940,,841,,,,,940,',
',940,940,940,904,904,904,904,904,904,,,,904,904,,,,904,,904,904,904',
'904,904,904,904,,,,,,904,904,904,904,904,904,904,,,904,,,,,,904,904',
',904,904,904,904,904,904,904,904,904,,904,904,904,,904,904,,904,904',
'904,844,844,844,844,844,844,844,844,844,844,844,,844,844,,,844,844,',
'904,,,904,,,904,904,,,904,,904,844,,844,904,844,844,844,844,844,844',
'844,904,844,,,,904,904,904,904,904,904,,,,904,904,,844,,,,,904,,,904',
'904,904,820,820,820,820,820,820,,,,820,820,,,,820,,820,820,820,820,820',
'820,820,,,,,,820,820,820,820,820,820,820,,,820,,,,,,820,820,,820,820',
'820,820,820,820,820,820,820,,820,820,820,,820,820,,820,820,820,704,704',
'704,704,704,704,704,704,704,704,704,,704,704,,,704,704,,820,,,820,,',
'820,820,,,820,,820,704,,704,820,704,704,704,704,704,704,704,820,704',
',,,820,820,820,820,820,820,,,,820,820,,704,,,,,820,,,820,820,820,682',
'682,682,682,682,682,,,,682,682,,,,682,,682,682,682,682,682,682,682,',
',,,,682,682,682,682,682,682,682,,,682,,,,,,682,682,,682,682,682,682',
'682,682,682,682,682,,682,682,682,,682,682,,682,682,682,901,901,901,901',
'901,901,901,901,901,901,901,,901,901,,,901,901,,682,,,682,,,682,682',
',,682,,682,901,,901,682,901,901,901,901,901,901,901,682,901,,,,682,682',
'682,682,682,682,,,,682,682,,901,,,,,682,,,682,682,682,327,327,327,327',
'327,327,,,,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327,327',
'327,327,327,327,327,,,327,,,,,,327,327,,327,327,327,327,327,327,327',
'327,327,,327,327,327,,327,327,,327,327,327,498,,,,,,,,,,,,,,,,498,498',
',327,,,327,,,327,327,,,327,,327,498,,498,327,498,498,498,498,,,498,327',
'498,,,,327,327,327,327,327,327,,,,327,327,,,,,,,327,,,327,327,327,340',
'340,340,340,340,340,,,,340,340,,,,340,,340,340,340,340,340,340,340,',
',,,,340,340,340,340,340,340,340,,,340,,,,,,340,340,,340,340,340,340',
'340,340,340,340,340,,340,340,340,,340,340,,340,340,340,487,487,487,487',
'487,487,487,,,487,487,,,,,,487,487,,340,,,340,,,340,340,,,340,,340,487',
',487,340,487,487,487,487,487,487,487,340,487,,,,340,340,340,340,340',
'340,,,,340,340,,,,,,,340,,,340,340,340,814,814,814,814,814,814,,,,814',
'814,,,,814,,814,814,814,814,814,814,814,,,,,,814,814,814,814,814,814',
'814,,,814,,,,,,814,814,,814,814,814,814,814,814,814,814,814,,814,814',
'814,,814,814,,814,814,814,495,,,,,,,,,,,,,,,,495,495,,814,,,814,,,814',
'814,,,814,,814,495,,495,814,495,495,495,495,,,495,814,495,,,,814,814',
'814,814,814,814,,,,814,814,,,,,,,814,,,814,814,814,796,796,796,796,796',
'796,,,,796,796,,,,796,,796,796,796,796,796,796,796,,,,,,796,796,796',
'796,796,796,796,,,796,,,,,,796,796,,796,796,796,796,796,796,796,796',
'796,,796,796,796,,796,796,,796,796,796,480,480,480,480,480,480,480,',
',480,480,,,,,,480,480,,796,,,796,,,796,796,,,796,,796,480,,480,796,480',
'480,480,480,480,480,480,796,480,,,,796,796,796,796,796,796,,,,796,796',
',,,,,,796,,,796,796,796,793,793,793,793,793,793,,,,793,793,,,,793,,793',
'793,793,793,793,793,793,,,,,,793,793,793,793,793,793,793,,,793,,,,,',
'793,793,,793,793,793,793,793,793,793,793,793,,793,793,793,,793,793,',
'793,793,793,486,486,486,486,486,486,486,486,486,486,486,,486,486,,,486',
'486,,793,,,793,,,793,793,,,793,,793,486,,486,793,486,486,486,486,486',
'486,486,793,486,,,,793,793,793,793,793,793,,,,793,793,,,,,,,793,,,793',
'793,793,778,778,778,778,778,778,,,,778,778,,,,778,,778,778,778,778,778',
'778,778,,,,,,778,778,778,778,778,778,778,,,778,,,,,,778,778,,778,778',
'778,778,778,778,778,778,778,,778,778,778,,778,778,,778,778,778,491,491',
'491,491,491,491,491,,,491,491,,,,,,491,491,,778,,,778,,,778,778,,,778',
',778,491,,491,778,491,491,491,491,491,491,491,778,491,,,,778,778,778',
'778,778,778,,,,778,778,,,,,,,778,,,778,778,778,365,365,365,365,365,365',
',,,365,365,,,,365,,365,365,365,365,365,365,365,,,,,,365,365,365,365',
'365,365,365,,,365,,,,,,365,365,,365,365,365,365,365,365,365,365,365',
',365,365,365,,365,365,,365,365,365,500,500,500,500,500,500,500,,,500',
'500,,,,,,500,500,,365,,,365,,,365,365,,,365,,365,500,,500,365,500,500',
'500,500,500,500,500,365,500,,,,365,365,365,365,365,365,,,,365,365,,',
',,,,365,,,365,365,365,634,634,634,634,634,634,,,,634,634,,,,634,,634',
'634,634,634,634,634,634,,,,,,634,634,634,634,634,634,634,,,634,,,,,',
'634,634,,634,634,634,634,634,634,634,634,634,,634,634,634,,634,634,',
'634,634,634,501,,,,,,,,,,,,,,,,501,501,,634,,,634,,,634,634,,,634,,634',
'501,,501,634,501,501,501,501,,,501,634,501,,,,634,634,634,634,634,634',
',,,634,634,,,,,,,634,,,634,634,634,667,667,667,667,667,667,,,,667,667',
',,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667,667',
',,667,,,,,,667,667,,667,667,667,667,667,667,667,667,667,,667,667,667',
',667,667,,667,667,667,484,484,484,484,484,484,484,,,484,484,,,,,,484',
'484,,667,,,667,,,667,667,,,667,,667,484,,484,667,484,484,484,484,484',
'484,484,667,484,,,,667,667,667,667,667,667,,,,667,667,,,,,,,667,,,667',
'667,667,78,78,78,78,78,78,,,,78,78,,,,78,,78,78,78,78,78,78,78,,,,,',
'78,78,78,78,78,78,78,,,78,,,,,,78,78,,78,78,78,78,78,78,78,78,78,,78',
'78,78,,78,78,,78,78,78,488,488,488,488,488,488,488,488,488,488,488,',
'488,488,,,488,488,,78,,,78,,,78,78,,,78,,78,488,,488,78,488,488,488',
'488,488,488,488,78,488,,,,78,78,78,78,78,78,,,,78,78,,,,,,,78,,,78,78',
'78,915,915,915,915,915,915,,,,915,915,,,,915,,915,915,915,915,915,915',
'915,,,,,,915,915,915,915,915,915,915,,,915,,,,,,915,915,,915,915,915',
'915,915,915,915,915,915,,915,915,915,,915,915,,915,915,915,489,489,489',
'489,489,489,489,,,489,489,,,,,,489,489,,915,,,915,,,915,915,,,915,,915',
'489,,489,915,489,489,489,489,489,489,489,915,489,,,,915,915,915,915',
'915,915,,,,915,915,,,,,,,915,,,915,915,915,918,918,918,918,918,918,',
',,918,918,,,,918,,918,918,918,918,918,918,918,,,,,,918,918,918,918,918',
'918,918,,,918,,,,,,918,918,,918,918,918,918,918,918,918,918,918,,918',
'918,918,,918,918,,918,918,918,502,502,502,502,502,502,502,502,,502,502',
',,,,,502,502,,918,,,918,,,918,918,,,918,,918,502,,502,918,502,502,502',
'502,502,502,502,918,502,,,,918,918,918,918,918,918,,,,918,918,,,,,,',
'918,,,918,918,918,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2',
'2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,504,504',
'504,504,504,504,504,,,504,504,,,,,,504,504,,2,,,2,,,2,2,,,2,,2,504,',
'504,2,504,504,504,504,504,504,504,2,504,,,,2,2,2,2,2,2,,,,2,2,,,,,,',
'2,,,2,2,2,299,299,299,,299,,,,299,299,,,,299,,299,299,299,299,299,299',
'299,,,,,,299,299,299,299,299,299,299,,,299,,,,,,,299,,,299,299,299,299',
'299,299,299,299,,299,299,299,,299,299,,299,299,299,,,,,,,,,,,,,,,,,',
',,299,,,299,,,299,299,,761,299,761,761,761,761,761,299,,,,,,,,299,761',
',,,299,299,299,299,299,299,,,,299,299,,,,,,,299,761,,299,299,299,663',
'663,663,,663,,761,761,663,663,,,,663,,663,663,663,663,663,663,663,,',
',,,663,663,663,663,663,663,663,,,663,,,,761,,,663,,,663,663,663,663',
'663,663,663,663,663,663,663,663,,663,663,,663,663,663,503,,,,,,,,,,',
',,,,,503,503,,663,,,663,,,663,663,,,663,,663,503,663,503,663,503,503',
'503,503,,,503,663,503,,,,663,663,663,663,663,663,,,,663,663,,,,,,,663',
',663,663,663,663,638,638,638,,638,,,,638,638,,,,638,,638,638,638,638',
'638,638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638',
'638,638,638,638,638,638,,638,638,638,,638,638,,638,638,638,,,,,,,,,',
',,,,,,,,,,638,,,638,,,638,638,,1040,638,1040,1040,1040,1040,1040,638',
',,,,,,,638,1040,,,,638,638,638,638,638,638,,,,638,638,,,,,,,638,1040',
',638,638,638,62,62,62,,62,,1040,1040,62,62,,,,62,,62,62,62,62,62,62',
'62,,,,,,62,62,62,62,62,62,62,,,62,,,,1040,,,62,,,62,62,62,62,62,62,62',
'62,62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,',
',62,,62,,62,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62',
'62,62,62,773,773,773,,773,,,,773,773,,,,773,,773,773,773,773,773,773',
'773,,,,,,773,773,773,773,773,773,773,,,773,,,,,,,773,,,773,773,773,773',
'773,773,773,773,,773,773,773,,773,773,,773,773,773,,,,,,,,,,,,,,,,,',
',,773,,,773,,,773,773,,995,773,995,995,995,995,995,773,,,,,,,,773,995',
',,,773,773,773,773,773,773,,,,773,773,,,,,,,773,995,,773,773,773,774',
'774,774,,774,,995,995,774,774,,,,774,,774,774,774,774,774,774,774,,',
',,,774,774,774,774,774,774,774,,,774,,,,995,,,774,,,774,774,774,774',
'774,774,774,774,,774,774,774,,774,774,,774,774,774,,,,,,,,,,,,,,,,,',
',,774,,,774,,,774,774,,887,774,887,887,887,887,887,774,,,,,,,,774,887',
',,,774,774,774,774,774,774,,,,774,774,,,,,,,774,887,,774,774,774,88',
'88,88,,88,,887,887,88,88,,,,88,,88,88,88,88,88,88,88,,,,,,88,88,88,88',
'88,88,88,,,88,,,,887,,,88,,,88,88,88,88,88,88,88,88,,88,88,88,,88,88',
',88,88,88,,,,,,,,,,,,,,,,,,,,88,,,88,,,88,88,,1018,88,1018,1018,1018',
'1018,1018,88,,,,,,,,88,1018,,,,88,88,88,88,88,88,,,,88,88,88,,,,,88',
'88,1018,,88,88,88,352,352,352,,352,,1018,1018,352,352,,,,352,,352,352',
'352,352,352,352,352,,,,,,352,352,352,352,352,352,352,,,352,,,,1018,',
',352,,,352,352,352,352,352,352,352,352,352,352,352,352,,352,352,,352',
'352,352,,,,,,,,,,,,,,,,,,,,352,,,352,,,352,352,,,352,,352,,352,,352',
',,,,,,,352,,,,,352,352,352,352,352,352,,,,352,352,,,,,,,352,,352,352',
'352,352,97,97,97,,97,,,,97,97,,,,97,,97,97,97,97,97,97,97,,,,,,97,97',
'97,97,97,97,97,,,97,,,,,,,97,,,97,97,97,97,97,97,97,97,,97,97,97,,97',
'97,,97,97,97,,,,,,,,,,,,,,,,,,,,97,,,97,,,97,97,,993,97,993,993,993',
'993,993,97,,,,,,,,97,993,,,,97,97,97,97,97,97,,,,97,97,97,,,,,,97,993',
',97,97,97,1006,1006,1006,,1006,,993,993,1006,1006,,,,1006,,1006,1006',
'1006,1006,1006,1006,1006,,,,,,1006,1006,1006,1006,1006,1006,1006,,,1006',
',,,993,,,1006,,,1006,1006,1006,1006,1006,1006,1006,1006,1006,1006,1006',
'1006,,1006,1006,,1006,1006,1006,,,,,,,,,,,,,,,,,,,,1006,,,1006,,,1006',
'1006,,,1006,,1006,,1006,,1006,,,,,,,,1006,,,,,1006,1006,1006,1006,1006',
'1006,,,,1006,1006,,,,,,,1006,,1006,1006,1006,1006,101,101,101,,101,',
',,101,101,,,,101,,101,101,101,101,101,101,101,,,,,,101,101,101,101,101',
'101,101,,,101,,,,,,,101,,,101,101,101,101,101,101,101,101,101,101,101',
'101,,101,101,,101,101,101,,,,,,,,,,,,,,,,,,,,101,,,101,,,101,101,,,101',
',101,,,,101,,,,,,,,101,,,,,101,101,101,101,101,101,,,,101,101,,,,,,',
'101,,101,101,101,101,625,625,625,,625,,,,625,625,,,,625,,625,625,625',
'625,625,625,625,,,,,,625,625,625,625,625,625,625,,,625,,,,,,,625,,,625',
'625,625,625,625,625,625,625,,625,625,625,,625,625,,625,625,625,,,,,',
',,,,,,,,,,,,,,625,,,625,,,625,625,,936,625,936,936,936,936,936,625,',
',,,,,,625,936,,,,625,625,625,625,625,625,,,,625,625,,,,,,,625,936,,625',
'625,625,776,776,776,,776,,936,936,776,776,,,,776,,776,776,776,776,776',
'776,776,,,,,,776,776,776,776,776,776,776,,,776,,,,936,,,776,,,776,776',
'776,776,776,776,776,776,,776,776,776,,776,776,,776,776,776,,,,,,,,,',
',,,,,,,,,,776,,,776,,,776,776,,938,776,938,938,938,938,938,776,,,,,',
',,776,938,,,,776,776,776,776,776,776,,,,776,776,,,,,,,776,938,,776,776',
'776,777,777,777,,777,,938,938,777,777,,,,777,,777,777,777,777,777,777',
'777,,,,,,777,777,777,777,777,777,777,,,777,,,,938,,,777,,,777,777,777',
'777,777,777,777,777,,777,777,777,,777,777,,777,777,777,,,,,,,,,,,,,',
',,,,,,777,,,777,,,777,777,,934,777,934,934,934,934,934,777,,,,,,,,777',
'934,,,,777,777,777,777,777,777,,,,777,777,,,,,,,777,934,,777,777,777',
'59,59,59,,59,,934,934,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59',
'59,59,59,59,,,59,,,,934,,,59,,,59,59,59,59,59,59,59,59,,59,59,59,,59',
'59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,,,,,59,,,,,,,',
'59,,,,,59,59,59,59,59,59,,,,59,59,,,,,,,59,,,59,59,59,781,781,781,,781',
',,,781,781,,,,781,,781,781,781,781,781,781,781,,,,,,781,781,781,781',
'781,781,781,,,781,,,,,,,781,,,781,781,781,781,781,781,781,781,,781,781',
'781,,781,781,,,,781,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,781,,,781,,,',
',,,,,,,,,,,,,,,781,781,781,781,781,781,,,,781,781,,,,,,,781,,,781,781',
'781,759,759,759,,759,,,,759,759,,,,759,,759,759,759,759,759,759,759',
',,,,,759,759,759,759,759,759,759,,,759,,,,,,,759,,,759,759,759,759,759',
'759,759,759,,759,759,759,,759,759,,759,759,759,,,,,,,,,,,,,,,,,,,,759',
',,759,,,759,759,,,759,,,,,,759,,,,,,,,759,,,,,759,759,759,759,759,759',
',,,759,759,,,,,,,759,,,759,759,759,674,674,674,,674,,,,674,674,,,,674',
',674,674,674,674,674,674,674,,,,,,674,674,674,674,674,674,674,,,674',
',,,,,,674,,,674,674,674,674,674,674,674,674,,674,674,674,,674,674,,',
',674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,,,,,,,,,,,,,,,,,',
'674,674,674,674,674,674,,,,674,674,,,,,,,674,,,674,674,674,797,797,797',
',797,,,,797,797,,,,797,,797,797,797,797,797,797,797,,,,,,797,797,797',
'797,797,797,797,,,797,,,,,,,797,,,797,797,797,797,797,797,797,797,,797',
'797,797,,797,797,,797,797,797,,,,,,,,,,,,,,,,,,,,797,,,797,,,797,797',
',,797,,,,,,797,,,,,,,,797,,,,,797,797,797,797,797,797,,,,797,797,,,',
',,,797,,,797,797,797,600,600,600,,600,,,,600,600,,,,600,,600,600,600',
'600,600,600,600,,,,,,600,600,600,600,600,600,600,,,600,,,,,,,600,,,600',
'600,600,600,600,600,600,600,,600,600,600,,600,600,,600,600,600,,,,,',
',,,,,,,,,,,,,,600,,,600,,,600,600,,,600,,,,,,600,,,,,,,,600,,,,,600',
'600,600,600,600,600,,,,600,600,,,,,,,600,,,600,600,600,578,578,578,',
'578,,,,578,578,,,,578,,578,578,578,578,578,578,578,,,,,,578,578,578',
'578,578,578,578,,,578,,,,,,,578,,,578,578,578,578,578,578,578,578,578',
'578,578,578,,578,578,,578,578,578,,,,,,,,,,,,,,,,,,,,578,,,578,,,578',
'578,,,578,,578,,,,578,,,,,,,,578,,,,,578,578,578,578,578,578,,,,578',
'578,,,,,,,578,,578,578,578,578,812,812,812,,812,,,,812,812,,,,812,,812',
'812,812,812,812,812,812,,,,,,812,812,812,812,812,812,812,,,812,,,,,',
',812,,,812,812,812,812,812,812,812,812,,812,812,812,,812,812,,812,812',
'812,,,,,,,,,,,,,,,,,,,,812,,,812,,,812,812,,,812,,,,,,812,,,,,,,,812',
',,,,812,812,812,812,812,812,,,,812,812,,,,,,,812,,,812,812,812,675,675',
'675,,675,,,,675,675,,,,675,,675,675,675,675,675,675,675,,,,,,675,675',
'675,675,675,675,675,,,675,,,,,,,675,,,675,675,675,675,675,675,675,675',
',675,675,675,,675,675,,,,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675',
',,675,,,,,,,,,,,,,,,,,,,675,675,675,675,675,675,,,,675,675,,,,,,,675',
',,675,675,675,49,49,49,,49,,,,49,49,,,,49,,49,49,49,49,49,49,49,,,,',
',49,49,49,49,49,49,49,,,49,,,,,,,49,,,49,49,49,49,49,49,49,49,,49,49',
'49,,49,49,,49,49,49,,,,,,,,,,,,,,,,,,,,49,,,49,,,49,49,,,49,,,,,,49',
',,,,,,,49,,,,,49,49,49,49,49,49,,,,49,49,,,,,,,49,,,49,49,49,46,46,46',
',46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,',
',46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,',
',,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46',
'46,46,46,,,,46,46,,,,,,,46,,,46,46,46,45,45,45,,45,,,,45,45,,,,45,,45',
'45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45',
'45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45',
',,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,',
'45,,,45,45,45,826,826,826,,826,,,,826,826,,,,826,,826,826,826,826,826',
'826,826,,,,,,826,826,826,826,826,826,826,,,826,,,,,,,826,,,826,826,826',
'826,826,826,826,826,,826,826,826,,826,826,,826,826,826,,,,,,,,,,,,,',
',,,,,,826,,,826,,,826,826,,,826,,,,,,826,,,,,,,,826,,,,,826,826,826',
'826,826,826,,,,826,826,,,,,,,826,,,826,826,826,128,128,128,,128,,,,128',
'128,,,,128,,128,128,128,128,128,128,128,,,,,,128,128,128,128,128,128',
'128,,,128,,,,,,,128,,,128,128,128,128,128,128,128,128,,128,128,128,',
'128,128,,128,128,128,,,,,,,,,,,,,,,,,,,,128,,,128,,,128,128,,,128,,',
',,,128,,,,,,,,128,,,,,128,128,128,128,128,128,,,,128,128,128,,,,,,128',
',,128,128,128,130,130,130,,130,,,,130,130,,,,130,,130,130,130,130,130',
'130,130,,,,,,130,130,130,130,130,130,130,,,130,,,,,,,130,,,130,130,130',
'130,130,130,130,130,,130,130,130,,130,130,,130,130,130,,,,,,,,,,,,,',
',,,,,,130,,,130,,,130,130,,,130,,,,,,130,,,,,,,,130,,,,,130,130,130',
'130,130,130,,,,130,130,,,,,,,130,,,130,130,130,829,829,829,,829,,,,829',
'829,,,,829,,829,829,829,829,829,829,829,,,,,,829,829,829,829,829,829',
'829,,,829,,,,,,,829,,,829,829,829,829,829,829,829,829,,829,829,829,',
'829,829,,829,829,829,,,,,,,,,,,,,,,,,,,,829,,,829,,,829,829,,,829,,',
',,,829,,,,,,,,829,,,,,829,829,829,829,829,829,,,,829,829,,,,,,,829,',
',829,829,829,215,215,215,,215,,,,215,215,,,,215,,215,215,215,215,215',
'215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215,215,215',
'215,215,215,215,215,,215,215,215,,215,215,,215,215,215,,,,,,,,,,,,,',
',,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,,,215,,,,,215,215,215',
'215,215,215,,,,215,215,,,,,,,215,,,215,215,215,551,551,551,551,551,',
',,551,551,,,,551,,551,551,551,551,551,551,551,,,,,,551,551,551,551,551',
'551,551,,,551,,,,,,551,551,,551,551,551,551,551,551,551,551,551,,551',
'551,551,,551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,,,551,551',
',,551,,551,,,,551,,,,,,,,551,,,,,551,551,551,551,551,551,,,,551,551',
',,,,,551,551,,,551,551,551,690,690,690,,690,,,,690,690,,,,690,,690,690',
'690,690,690,690,690,,,,,,690,690,690,690,690,690,690,,,690,,,,,,,690',
',,690,690,690,690,690,690,690,690,,690,690,690,,690,690,,690,690,690',
',,,,,,,,,,,,,,,,,,,690,,,690,,,690,690,,,690,,690,,,,690,,,,,,,,690',
',,,,690,690,690,690,690,690,,,,690,690,,,,,,,690,,,690,690,690,218,218',
'218,,218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218',
'218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218',
',218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218',
'218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218',
',,,,,,218,,,218,218,218,705,705,705,,705,,,,705,705,,,,705,,705,705',
'705,705,705,705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,,705',
',,705,705,705,705,705,705,705,705,,705,705,705,,705,705,,705,705,705',
',,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,,705,,705,,,,705,,,,,,,,705',
',,,,705,705,705,705,705,705,,,,705,705,,,,,,,705,,,705,705,705,220,220',
'220,,220,,,,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220',
'220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220',
',220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220',
'220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220',
',,,,,,220,,,220,220,220,839,839,839,,839,,,,839,839,,,,839,,839,839',
'839,839,839,839,839,,,,,,839,839,839,839,839,839,839,,,839,,,,,,,839',
',,839,839,839,839,839,839,839,839,,839,839,839,,839,839,,839,839,839',
',,,,,,,,,,,,,,,,,,,839,,,839,,,839,839,,,839,,,,,,839,,,,,,,,839,,,',
',839,839,839,839,839,839,,,,839,839,,,,,,,839,,,839,839,839,736,736',
'736,,736,,,,736,736,,,,736,,736,736,736,736,736,736,736,,,,,,736,736',
'736,736,736,736,736,,,736,,,,,,,736,,,736,736,736,736,736,736,736,736',
',736,736,736,,736,736,,736,736,736,,,,,,,,,,,,,,,,,,,,736,,,736,,,736',
'736,,,736,,,,,,736,,,,,,,,736,,,,,736,736,736,736,736,736,,,,736,736',
',,,,,,736,,,736,736,736,534,534,534,,534,,,,534,534,,,,534,,534,534',
'534,534,534,534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,,534',
',,534,534,534,534,534,534,534,534,,534,534,534,,534,534,,534,534,534',
',,,,,,,,,,,,,,,,,,,534,,,534,,,534,534,,,534,,,,,,534,,,,,,,,534,,,',
',534,534,534,534,534,534,,,,534,534,,,,,,,534,,,534,534,534,530,530',
'530,,530,,,,530,530,,,,530,,530,530,530,530,530,530,530,,,,,,530,530',
'530,530,530,530,530,,,530,,,,,,,530,,,530,530,530,530,530,530,530,530',
',530,530,530,,530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530',
'530,,,530,,,,,,530,,,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530',
',,,,,,530,,,530,530,530,735,735,735,,735,,,,735,735,,,,735,,735,735',
'735,735,735,735,735,,,,,,735,735,735,735,735,735,735,,,735,,,,,,,735',
',,735,735,735,735,735,735,735,735,,735,735,735,,735,735,,735,735,735',
',,,,,,,,,,,,,,,,,,,735,,,735,,,735,735,,,735,,,,,,735,,,,,,,,735,,,',
',735,735,735,735,735,735,,,,735,735,,,,,,,735,,,735,735,735,28,28,28',
',28,,,,28,28,,,,28,,28,28,28,28,28,28,28,,,,,,28,28,28,28,28,28,28,',
',28,,,,,,,28,,,28,28,28,28,28,28,28,28,,28,28,28,,28,28,,,,28,,,,,,',
',,,,,,,,,,,,,28,,,28,,,28,28,,,28,,28,,,,,,,,,,,,,,,,,28,28,28,28,28',
'28,,,,28,28,,,,,,,28,,,28,28,28,27,27,27,,27,,,,27,27,,,,27,,27,27,27',
'27,27,27,27,,,,,,27,27,27,27,27,27,27,,,27,,,,,,,27,,,27,27,27,27,27',
'27,27,27,,27,27,27,,27,27,,,,27,,,,,,,,,,,,,,,,,,,,27,,,27,,,27,27,',
',27,,,,,,,,,,,,,,,,,,,27,27,27,27,27,27,,,,27,27,,,,27,,,27,,,27,27',
'27,231,231,231,,231,,,,231,231,,,,231,,231,231,231,231,231,231,231,',
',,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231',
'231,231,231,,231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231',
',,231,,,231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231',
',,,231,231,,,,,,,231,,,231,231,231,526,526,526,,526,,,,526,526,,,,526',
',526,526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526',
',,,,,,526,,,526,526,526,526,526,526,526,526,,526,526,526,,526,526,,526',
'526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,,,,',
',526,,,,,526,526,526,526,526,526,,,,526,526,,,,,,,526,,,526,526,526',
'233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,',
',233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233',
'233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,',
'233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233',
',,,233,233,,,,,,,233,,,233,233,233,525,525,525,,525,,,,525,525,,,,525',
',525,525,525,525,525,525,525,,,,,,525,525,525,525,525,525,525,,,525',
',,,,,,525,,,525,525,525,525,525,525,525,525,,525,525,525,,525,525,,525',
'525,525,,,,,,,,,,,,,,,,,,,,525,,,525,,,525,525,,,525,,,,,,525,,,,,,',
',525,,,,,525,525,525,525,525,525,,,,525,525,,,,,,,525,,,525,525,525',
'709,709,709,,709,,,,709,709,,,,709,,709,709,709,709,709,709,709,,,,',
',709,709,709,709,709,709,709,,,709,,,,,,,709,,,709,709,709,709,709,709',
'709,709,709,709,709,709,,709,709,,709,709,709,,,,,,,,,,,,,,,,,,,,709',
',,709,,,709,709,,,709,,709,,709,,709,,,,,,,,709,,,,,709,709,709,709',
'709,709,,,,709,709,,,,,,,709,,709,709,709,709,710,710,710,,710,,,,710',
'710,,,,710,,710,710,710,710,710,710,710,,,,,,710,710,710,710,710,710',
'710,,,710,,,,,,,710,,,710,710,710,710,710,710,710,710,710,710,710,710',
',710,710,,710,710,710,,,,,,,,,,,,,,,,,,,,710,,,710,,,710,710,,,710,',
',,710,,710,,,,,,,,710,,,,,710,710,710,710,710,710,,,,710,710,,,,,,,710',
',710,710,710,710,517,517,517,,517,,,,517,517,,,,517,,517,517,517,517',
'517,517,517,,,,,,517,517,517,517,517,517,517,,,517,,,,,,,517,,,517,517',
'517,517,517,517,517,517,,517,517,517,,517,517,,517,517,517,,,,,,,,,',
',,,,,,,,,,517,,,517,,,517,517,,,517,,,,,,517,,,,,,,,517,,,,,517,517',
'517,517,517,517,,,,517,517,,,,,,,517,,,517,517,517,20,20,20,,20,,,,20',
'20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20,,,,,,',
'20,,,20,20,20,20,20,20,20,20,20,20,20,20,,20,20,,20,20,20,,,,,,,,,,',
',,,,,,,,,20,,,20,,,20,20,,,20,,20,,20,,20,,,,,,,,20,,,,,20,20,20,20',
'20,20,,,,20,20,,,,,,,20,,20,20,20,20,714,714,714,,714,,,,714,714,,,',
'714,,714,714,714,714,714,714,714,,,,,,714,714,714,714,714,714,714,,',
'714,,,,,,,714,,,714,714,714,714,714,714,714,714,,714,714,714,,714,714',
',714,714,714,,,,,,,,,,,,,,,,,,,,714,,,714,,,714,714,,,714,,,,,,714,',
',,,,,,714,,,,,714,714,714,714,714,714,,,,714,714,,,,,,,714,,,714,714',
'714,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249',
',,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249',
'249,249,249,,249,249,249,,249,249,,,,249,,,,,,,,,,,,,,,,,,,,249,,,249',
',,249,249,,,249,,,,,,,,,,,,,,,,,,,249,249,249,249,249,249,,,,249,249',
',,,,,,249,,,249,249,249,251,251,251,,251,,,,251,251,,,,251,,251,251',
'251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251',
',,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251',
',,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,',
',251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,252,252',
'252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252',
'252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252',
',252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252',
'252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252',
',,,,,,252,,,252,252,252,874,874,874,,874,,,,874,874,,,,874,,874,874',
'874,874,874,874,874,,,,,,874,874,874,874,874,874,874,,,874,,,,,,,874',
',,874,874,874,874,874,874,874,874,,874,874,874,,874,874,,874,874,874',
',,,,,,,,,,,,,,,,,,,874,,,874,,,874,874,,,874,,,,,,874,,,,,,,,874,,,',
',874,874,874,874,874,874,,,,874,874,,,,,,,874,,,874,874,874,716,716',
'716,,716,,,,716,716,,,,716,,716,716,716,716,716,716,716,,,,,,716,716',
'716,716,716,716,716,,,716,,,,,,,716,,,716,716,716,716,716,716,716,716',
',716,716,716,,716,716,,716,716,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716',
'716,,,716,,,,,,716,,,,,,,,716,,,,,716,716,716,716,716,716,,,,716,716',
',,,,,,716,,,716,716,716,475,475,475,,475,,,,475,475,,,,475,,475,475',
'475,475,475,475,475,,,,,,475,475,475,475,475,475,475,,,475,,,,,,,475',
',,475,475,475,475,475,475,475,475,,475,475,475,,475,475,,475,475,475',
',,,,,,,,,,,,,,,,,,,475,,,475,,,475,475,,,475,,,,,,475,,,,,,,,475,,,',
',475,475,475,475,475,475,,,,475,475,,,,,,,475,,,475,475,475,257,257',
'257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257',
'257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257',
',257,257,257,,257,257,,,,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257',
',,257,,,,,,,,,,,,,,,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257',
',,257,257,257,885,885,885,,885,,,,885,885,,,,885,,885,885,885,885,885',
'885,885,,,,,,885,885,885,885,885,885,885,,,885,,,,,,,885,,,885,885,885',
'885,885,885,885,885,,885,885,885,,885,885,,,,885,,,,,,,,,,,,,,,,,,,',
'885,,,885,,,885,885,,,885,,,,,,,,,,,,,,,,,,,885,885,885,885,885,885',
',,,885,885,,,,,,,885,,,885,885,885,465,465,465,,465,,,,465,465,,,,465',
',465,465,465,465,465,465,465,,,,,,465,465,465,465,465,465,465,,,465',
',,,,,,465,,,465,465,465,465,465,465,465,465,,465,465,465,,465,465,,',
',465,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,465,,,465,,,,,,,,,,,,,,,,,,',
'465,465,465,465,465,465,,,,465,465,,,,,,,465,,,465,465,465,460,460,460',
',460,,,,460,460,,,,460,,460,460,460,460,460,460,460,,,,,,460,460,460',
'460,460,460,460,,,460,,,,,,,460,,,460,460,460,460,460,460,460,460,460',
'460,460,460,,460,460,,460,460,460,,,,,,,,,,,,,,,,,,,,460,,,460,,,460',
'460,,,460,,460,,460,,460,,,,,,,,460,,,,,460,460,460,460,460,460,,,,460',
'460,,,,,,,460,,460,460,460,460,457,457,457,,457,,,,457,457,,,,457,,457',
'457,457,457,457,457,457,,,,,,457,457,457,457,457,457,457,,,457,,,,,',
',457,,,457,457,457,457,457,457,457,457,,457,457,457,,457,457,,,,457',
',,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,,,,,,,,,,,,,,,,,,457,457',
'457,457,457,457,,,,457,457,,,,,,,457,,,457,457,457,441,441,441,,441',
',,,441,441,,,,441,,441,441,441,441,441,441,441,,,,,,441,441,441,441',
'441,441,441,,,441,,,,,,,441,,,441,441,441,441,441,441,441,441,,441,441',
'441,,441,441,,441,441,441,,,,,,,,,,,,,,,,,,,,441,,,441,,,441,441,,,441',
',,,,,441,,,,,,,,441,,,,,441,441,441,441,441,441,,,,441,441,,,,,,,441',
',,441,441,441,263,263,263,,263,,,,263,263,,,,263,,263,263,263,263,263',
'263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263',
'263,263,263,263,263,,263,263,263,,263,263,,,,263,,,,,,,,,,,,,,,,,,,',
'263,,,263,,,263,263,,,263,,,,,,,,,,,,,,,,,,,263,263,263,263,263,263',
',,,263,263,,,,,,,263,,,263,263,263,435,435,435,,435,,,,435,435,,,,435',
',435,435,435,435,435,435,435,,,,,,435,435,435,435,435,435,435,,,435',
',,,,,,435,,,435,435,435,435,435,435,435,435,435,435,435,435,,435,435',
',435,435,435,,,,,,,,,,,,,,,,,,,,435,,,435,,,435,435,,,435,,,,,,435,',
',,,,,,435,,,,,435,435,435,435,435,435,,,,435,435,,,,,,,435,,435,435',
'435,435,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265,265',
'265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265',
'265,265,265,265,,265,265,265,,265,265,,,,265,,,,,,,,,,,,,,,,,,,,265',
',,265,,,265,265,,,265,,,,,,,,,,,,,,,,,,,265,265,265,265,265,265,,,,265',
'265,,,,265,,,265,,,265,265,265,430,430,430,,430,,,,430,430,,,,430,,430',
'430,430,430,430,430,430,,,,,,430,430,430,430,430,430,430,,,430,,,,,',
',430,,,430,430,430,430,430,430,430,430,,430,430,430,,430,430,,430,430',
'430,,,,,,,,,,,,,,,,,,,,430,,,430,,,430,430,,,430,,,,,,430,,,,,,,,430',
',,,,430,430,430,430,430,430,,,,430,430,,,,,,,430,,,430,430,430,14,14',
'14,14,14,,,,14,14,,,,14,,14,14,14,14,14,14,14,,,,,,14,14,14,14,14,14',
'14,,,14,,,,,,14,14,14,14,14,14,14,14,14,14,14,14,,14,14,14,,14,14,,14',
'14,14,,,,,,,,,,,,,,,,,,,,14,,,14,,,14,14,,,14,,14,,,,14,,,,,,,,14,,',
',,14,14,14,14,14,14,,,,14,14,,,,,,,14,,,14,14,14,428,428,428,,428,,',
',428,428,,,,428,,428,428,428,428,428,428,428,,,,,,428,428,428,428,428',
'428,428,,,428,,,,,,,428,,,428,428,428,428,428,428,428,428,,428,428,428',
',428,428,,428,428,428,,,,,,,,,,,,,,,,,,,,428,,,428,,,428,428,,,428,',
',,,,428,,,,,,,,428,,,,,428,428,428,428,428,428,,,,428,428,,,,,,,428',
',,428,428,428,13,13,13,,13,,,,13,13,,,,13,,13,13,13,13,13,13,13,,,,',
',13,13,13,13,13,13,13,,,13,,,,,,,13,,,13,13,13,13,13,13,13,13,13,13',
'13,13,,13,13,,13,13,13,,,,,,,,,,,,,,,,,,,,13,,,13,,,13,13,,,13,,,,,',
'13,,,,,,,,13,,,,,13,13,13,13,13,13,,,,13,13,,,,,,,13,,13,13,13,13,426',
'426,426,,426,,,,426,426,,,,426,,426,426,426,426,426,426,426,,,,,,426',
'426,426,426,426,426,426,,,426,,,,,,,426,,,426,426,426,426,426,426,426',
'426,426,426,426,426,,426,426,,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426',
',,426,426,,,426,,426,,426,,426,,,,,,,,426,,,,,426,426,426,426,426,426',
',,,426,426,,,,,,,426,,426,426,426,426,424,424,424,,424,,,,424,424,,',
',424,,424,424,424,424,424,424,424,,,,,,424,424,424,424,424,424,424,',
',424,,,,,,,424,,,424,424,424,424,424,424,424,424,,424,424,424,,424,424',
',424,424,424,,,,,,,,,,,,,,,,,,,,424,,,424,,,424,424,,,424,,,,,,424,',
',,,,,,424,,,,,424,424,424,424,424,424,,,,424,424,,,,,,,424,,,424,424',
'424,421,421,421,,421,,,,421,421,,,,421,,421,421,421,421,421,421,421',
',,,,,421,421,421,421,421,421,421,,,421,,,,,,,421,,,421,421,421,421,421',
'421,421,421,421,421,421,421,,421,421,,421,421,421,,,,,,,,,,,,,,,,,,',
',421,,,421,,,421,421,,,421,,,,421,,421,,,,,,,,421,,,,,421,421,421,421',
'421,421,,,,421,421,,,,,,,421,,421,421,421,421,418,418,418,,418,,,,418',
'418,,,,418,,418,418,418,418,418,418,418,,,,,,418,418,418,418,418,418',
'418,,,418,,,,,,,418,,,418,418,418,418,418,418,418,418,418,418,418,418',
',418,418,,418,418,418,,,,,,,,,,,,,,,,,,,,418,,,418,,,418,418,,,418,',
'418,,418,,418,,,,,,,,418,,,,,418,418,418,418,418,418,,,,418,418,,,,',
',,418,,418,418,418,418,415,415,415,,415,,,,415,415,,,,415,,415,415,415',
'415,415,415,415,,,,,,415,415,415,415,415,415,415,,,415,,,,,,,415,,,415',
'415,415,415,415,415,415,415,,415,415,415,,415,415,,415,415,415,,,,,',
',,,,,,,,,,,,,,415,,,415,,,415,415,,,415,,,,,,415,,,,,,,,415,,,,,415',
'415,415,415,415,415,,,,415,415,,,,,,,415,,,415,415,415,404,404,404,',
'404,,,,404,404,,,,404,,404,404,404,404,404,404,404,,,,,,404,404,404',
'404,404,404,404,,,404,,,,,,,404,,,404,404,404,404,404,404,404,404,404',
'404,404,404,,404,404,,404,404,404,,,,,,,,,,,,,,,,,,,,404,,,404,,,404',
'404,,,404,,404,,404,,404,,,,,,,,404,,,,,404,404,404,404,404,404,,,,404',
'404,,,,,,,404,,404,404,404,404,395,395,395,,395,,,,395,395,,,,395,,395',
'395,395,395,395,395,395,,,,,,395,395,395,395,395,395,395,,,395,,,,,',
',395,,,395,395,395,395,395,395,395,395,,395,395,395,,395,395,,395,395',
'395,,,,,,,,,,,,,,,,,,,,395,,,395,,,395,395,,,395,,395,,,,395,,,,,,,',
'395,,,,,395,395,395,395,395,395,,,,395,395,,,,,,,395,,,395,395,395,394',
'394,394,,394,,,,394,394,,,,394,,394,394,394,394,394,394,394,,,,,,394',
'394,394,394,394,394,394,,,394,,,,,,,394,,,394,394,394,394,394,394,394',
'394,,394,394,394,,394,394,,394,394,394,,,,,,,,,,,,,,,,,,,,394,,,394',
',,394,394,,,394,,,,,,394,,,,,,,,394,,,,,394,394,394,394,394,394,,,,394',
'394,,,,,,,394,,,394,394,394,393,393,393,393,393,,,,393,393,,,,393,,393',
'393,393,393,393,393,393,,,,,,393,393,393,393,393,393,393,,,393,,,,,',
'393,393,,393,393,393,393,393,393,393,393,393,,393,393,393,,393,393,',
'393,393,393,,,,,,,,,,,,,,,,,,,,393,,,393,,,393,393,,,393,,393,,,,393',
',,,,,,,393,,,,,393,393,393,393,393,393,,,,393,393,,,,,,,393,,,393,393',
'393,392,392,392,,392,,,,392,392,,,,392,,392,392,392,392,392,392,392',
',,,,,392,392,392,392,392,392,392,,,392,,,,,,,392,,,392,392,392,392,392',
'392,392,392,,392,392,392,,392,392,,392,392,392,,,,,,,,,,,,,,,,,,,,392',
',,392,,,392,392,,,392,,,,,,392,,,,,,,,392,,,,,392,392,392,392,392,392',
',,,392,392,,,,,,,392,,,392,392,392,391,391,391,,391,,,,391,391,,,,391',
',391,391,391,391,391,391,391,,,,,,391,391,391,391,391,391,391,,,391',
',,,,,,391,,,391,391,391,391,391,391,391,391,,391,391,391,,391,391,,391',
'391,391,,,,,,,,,,,,,,,,,,,,391,,,391,,,391,391,,,391,,,,,,391,,,,,,',
',391,,,,,391,391,391,391,391,391,,,,391,391,,,,,,,391,,,391,391,391',
'390,390,390,,390,,,,390,390,,,,390,,390,390,390,390,390,390,390,,,,',
',390,390,390,390,390,390,390,,,390,,,,,,,390,,,390,390,390,390,390,390',
'390,390,,390,390,390,,390,390,,390,390,390,,,,,,,,,,,,,,,,,,,,390,,',
'390,,,390,390,,,390,,,,,,390,,,,,,,,390,,,,,390,390,390,390,390,390',
',,,390,390,,,,,,,390,,,390,390,390,389,389,389,,389,,,,389,389,,,,389',
',389,389,389,389,389,389,389,,,,,,389,389,389,389,389,389,389,,,389',
',,,,,,389,,,389,389,389,389,389,389,389,389,,389,389,389,,389,389,,389',
'389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389,389,,,389,,,,,,389,,,,,,',
',389,,,,,389,389,389,389,389,389,,,,389,389,,,,,,,389,,,389,389,389',
'388,388,388,,388,,,,388,388,,,,388,,388,388,388,388,388,388,388,,,,',
',388,388,388,388,388,388,388,,,388,,,,,,,388,,,388,388,388,388,388,388',
'388,388,,388,388,388,,388,388,,388,388,388,,,,,,,,,,,,,,,,,,,,388,,',
'388,,,388,388,,,388,,,,,,388,,,,,,,,388,,,,,388,388,388,388,388,388',
',,,388,388,,,,,,,388,,,388,388,388,298,298,298,,298,,,,298,298,,,,298',
',298,298,298,298,298,298,298,,,,,,298,298,298,298,298,298,298,,,298',
',,,,,,298,,,298,298,298,298,298,298,298,298,,298,298,298,,298,298,,298',
'298,298,,,,,,,,,,,,,,,,,,,,298,,,298,,,298,298,,,298,,,,,,298,,,,,,',
',298,,,,,298,298,298,298,298,298,,,,298,298,,,,,,,298,,,298,298,298',
'69,69,69,,69,,,,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69,69',
'69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,69,69',
'69,,,,,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,,,,,,69,,,,,,,,69,,,,,69',
'69,69,69,69,69,,,,69,69,,,,,,,69,,,69,69,69,300,300,300,,300,,,,300',
'300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300,300,300,300',
'300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300,300,300,',
'300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,',
',,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300,300,,,,,,,300,',
',300,300,300,301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301',
'301,301,,,,,,301,301,301,301,301,301,301,,,301,,,,,,,301,,,301,301,301',
'301,301,301,301,301,,301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,',
',,,,,,301,,,301,,,301,301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301',
'301,301,301,,,,301,301,,,,,,,301,,,301,301,301,302,302,302,,302,,,,302',
'302,,,,302,,302,302,302,302,302,302,302,,,,,,302,302,302,302,302,302',
'302,,,302,,,,,,,302,,,302,302,302,302,302,302,302,302,,302,302,302,',
'302,302,,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,',
',,,302,,,,,,,,302,,,,,302,302,302,302,302,302,,,,302,302,,,,,,,302,',
',302,302,302,303,303,303,,303,,,,303,303,,,,303,,303,303,303,303,303',
'303,303,,,,,,303,303,303,303,303,303,303,,,303,,,,,,,303,,,303,303,303',
'303,303,303,303,303,,303,303,303,,303,303,,303,303,303,,,,,,,,,,,,,',
',,,,,,303,,,303,,,303,303,,,303,,,,,,303,,,,,,,,303,,,,,303,303,303',
'303,303,303,,,,303,303,,,,,,,303,,,303,303,303,304,304,304,,304,,,,304',
'304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304',
'304,,,304,,,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304,',
'304,304,,304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,',
',,,304,,,,,,,,304,,,,,304,304,304,304,304,304,,,,304,304,,,,,,,304,',
',304,304,304,305,305,305,,305,,,,305,305,,,,305,,305,305,305,305,305',
'305,305,,,,,,305,305,305,305,305,305,305,,,305,,,,,,,305,,,305,305,305',
'305,305,305,305,305,,305,305,305,,305,305,,305,305,305,,,,,,,,,,,,,',
',,,,,,305,,,305,,,305,305,,,305,,,,,,305,,,,,,,,305,,,,,305,305,305',
'305,305,305,,,,305,305,,,,,,,305,,,305,305,305,306,306,306,,306,,,,306',
'306,,,,306,,306,306,306,306,306,306,306,,,,,,306,306,306,306,306,306',
'306,,,306,,,,,,,306,,,306,306,306,306,306,306,306,306,,306,306,306,',
'306,306,,306,306,306,,,,,,,,,,,,,,,,,,,,306,,,306,,,306,306,,,306,,',
',,,306,,,,,,,,306,,,,,306,306,306,306,306,306,,,,306,306,,,,,,,306,',
',306,306,306,307,307,307,,307,,,,307,307,,,,307,,307,307,307,307,307',
'307,307,,,,,,307,307,307,307,307,307,307,,,307,,,,,,,307,,,307,307,307',
'307,307,307,307,307,,307,307,307,,307,307,,307,307,307,,,,,,,,,,,,,',
',,,,,,307,,,307,,,307,307,,,307,,,,,,307,,,,,,,,307,,,,,307,307,307',
'307,307,307,,,,307,307,,,,,,,307,,,307,307,307,308,308,308,,308,,,,308',
'308,,,,308,,308,308,308,308,308,308,308,,,,,,308,308,308,308,308,308',
'308,,,308,,,,,,,308,,,308,308,308,308,308,308,308,308,,308,308,308,',
'308,308,,308,308,308,,,,,,,,,,,,,,,,,,,,308,,,308,,,308,308,,,308,,',
',,,308,,,,,,,,308,,,,,308,308,308,308,308,308,,,,308,308,,,,,,,308,',
',308,308,308,309,309,309,,309,,,,309,309,,,,309,,309,309,309,309,309',
'309,309,,,,,,309,309,309,309,309,309,309,,,309,,,,,,,309,,,309,309,309',
'309,309,309,309,309,,309,309,309,,309,309,,309,309,309,,,,,,,,,,,,,',
',,,,,,309,,,309,,,309,309,,,309,,,,,,309,,,,,,,,309,,,,,309,309,309',
'309,309,309,,,,309,309,,,,,,,309,,,309,309,309,310,310,310,,310,,,,310',
'310,,,,310,,310,310,310,310,310,310,310,,,,,,310,310,310,310,310,310',
'310,,,310,,,,,,,310,,,310,310,310,310,310,310,310,310,,310,310,310,',
'310,310,,310,310,310,,,,,,,,,,,,,,,,,,,,310,,,310,,,310,310,,,310,,',
',,,310,,,,,,,,310,,,,,310,310,310,310,310,310,,,,310,310,,,,,,,310,',
',310,310,310,311,311,311,,311,,,,311,311,,,,311,,311,311,311,311,311',
'311,311,,,,,,311,311,311,311,311,311,311,,,311,,,,,,,311,,,311,311,311',
'311,311,311,311,311,,311,311,311,,311,311,,311,311,311,,,,,,,,,,,,,',
',,,,,,311,,,311,,,311,311,,,311,,,,,,311,,,,,,,,311,,,,,311,311,311',
'311,311,311,,,,311,311,,,,,,,311,,,311,311,311,312,312,312,,312,,,,312',
'312,,,,312,,312,312,312,312,312,312,312,,,,,,312,312,312,312,312,312',
'312,,,312,,,,,,,312,,,312,312,312,312,312,312,312,312,,312,312,312,',
'312,312,,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312,,,312,312,,,312,,',
',,,312,,,,,,,,312,,,,,312,312,312,312,312,312,,,,312,312,,,,,,,312,',
',312,312,312,313,313,313,,313,,,,313,313,,,,313,,313,313,313,313,313',
'313,313,,,,,,313,313,313,313,313,313,313,,,313,,,,,,,313,,,313,313,313',
'313,313,313,313,313,,313,313,313,,313,313,,313,313,313,,,,,,,,,,,,,',
',,,,,,313,,,313,,,313,313,,,313,,,,,,313,,,,,,,,313,,,,,313,313,313',
'313,313,313,,,,313,313,,,,,,,313,,,313,313,313,314,314,314,,314,,,,314',
'314,,,,314,,314,314,314,314,314,314,314,,,,,,314,314,314,314,314,314',
'314,,,314,,,,,,,314,,,314,314,314,314,314,314,314,314,,314,314,314,',
'314,314,,314,314,314,,,,,,,,,,,,,,,,,,,,314,,,314,,,314,314,,,314,,',
',,,314,,,,,,,,314,,,,,314,314,314,314,314,314,,,,314,314,,,,,,,314,',
',314,314,314,315,315,315,,315,,,,315,315,,,,315,,315,315,315,315,315',
'315,315,,,,,,315,315,315,315,315,315,315,,,315,,,,,,,315,,,315,315,315',
'315,315,315,315,315,,315,315,315,,315,315,,315,315,315,,,,,,,,,,,,,',
',,,,,,315,,,315,,,315,315,,,315,,,,,,315,,,,,,,,315,,,,,315,315,315',
'315,315,315,,,,315,315,,,,,,,315,,,315,315,315,316,316,316,,316,,,,316',
'316,,,,316,,316,316,316,316,316,316,316,,,,,,316,316,316,316,316,316',
'316,,,316,,,,,,,316,,,316,316,316,316,316,316,316,316,,316,316,316,',
'316,316,,316,316,316,,,,,,,,,,,,,,,,,,,,316,,,316,,,316,316,,,316,,',
',,,316,,,,,,,,316,,,,,316,316,316,316,316,316,,,,316,316,,,,,,,316,',
',316,316,316,317,317,317,,317,,,,317,317,,,,317,,317,317,317,317,317',
'317,317,,,,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317,317,317',
'317,317,317,317,317,,317,317,317,,317,317,,317,317,317,,,,,,,,,,,,,',
',,,,,,317,,,317,,,317,317,,,317,,,,,,317,,,,,,,,317,,,,,317,317,317',
'317,317,317,,,,317,317,,,,,,,317,,,317,317,317,318,318,318,,318,,,,318',
'318,,,,318,,318,318,318,318,318,318,318,,,,,,318,318,318,318,318,318',
'318,,,318,,,,,,,318,,,318,318,318,318,318,318,318,318,,318,318,318,',
'318,318,,318,318,318,,,,,,,,,,,,,,,,,,,,318,,,318,,,318,318,,,318,,',
',,,318,,,,,,,,318,,,,,318,318,318,318,318,318,,,,318,318,,,,,,,318,',
',318,318,318,319,319,319,,319,,,,319,319,,,,319,,319,319,319,319,319',
'319,319,,,,,,319,319,319,319,319,319,319,,,319,,,,,,,319,,,319,319,319',
'319,319,319,319,319,,319,319,319,,319,319,,319,319,319,,,,,,,,,,,,,',
',,,,,,319,,,319,,,319,319,,,319,,,,,,319,,,,,,,,319,,,,,319,319,319',
'319,319,319,,,,319,319,,,,,,,319,,,319,319,319,320,320,320,,320,,,,320',
'320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320,320,320,320',
'320,,,320,,,,,,,320,,,320,320,320,320,320,320,320,320,,320,320,320,',
'320,320,,320,320,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320,320,,,320,,',
',,,320,,,,,,,,320,,,,,320,320,320,320,320,320,,,,320,320,,,,,,,320,',
',320,320,320,321,321,321,,321,,,,321,321,,,,321,,321,321,321,321,321',
'321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,,321,,,321,321,321',
'321,321,321,321,321,,321,321,321,,321,321,,321,321,321,,,,,,,,,,,,,',
',,,,,,321,,,321,,,321,321,,,321,,,,,,321,,,,,,,,321,,,,,321,321,321',
'321,321,321,,,,321,321,,,,,,,321,,,321,321,321,322,322,322,,322,,,,322',
'322,,,,322,,322,322,322,322,322,322,322,,,,,,322,322,322,322,322,322',
'322,,,322,,,,,,,322,,,322,322,322,322,322,322,322,322,,322,322,322,',
'322,322,,322,322,322,,,,,,,,,,,,,,,,,,,,322,,,322,,,322,322,,,322,,',
',,,322,,,,,,,,322,,,,,322,322,322,322,322,322,,,,322,322,,,,,,,322,',
',322,322,322,323,323,323,,323,,,,323,323,,,,323,,323,323,323,323,323',
'323,323,,,,,,323,323,323,323,323,323,323,,,323,,,,,,,323,,,323,323,323',
'323,323,323,323,323,,323,323,323,,323,323,,323,323,323,,,,,,,,,,,,,',
',,,,,,323,,,323,,,323,323,,,323,,,,,,323,,,,,,,,323,,,,,323,323,323',
'323,323,323,,,,323,323,,,,,,,323,,,323,323,323,383,383,383,,383,,,,383',
'383,,,,383,,383,383,383,383,383,383,383,,,,,,383,383,383,383,383,383',
'383,,,383,,,,,,,383,,,383,383,383,383,383,383,383,383,,383,383,383,',
'383,383,,383,383,383,,,,,,,,,,,,,,,,,,,,383,,,383,,,383,383,,,383,,',
',,,383,,,,,,,,383,,,,,383,383,383,383,383,383,,,,383,383,,,,,,,383,',
',383,383,383,719,719,719,,719,,,,719,719,,,,719,,719,719,719,719,719',
'719,719,,,,,,719,719,719,719,719,719,719,,,719,,,,,,,719,,,719,719,719',
'719,719,719,719,719,,719,719,719,,719,719,,719,719,719,,,,,,,,,,,,,',
',,,,,,719,,,719,,,719,719,,,719,,,,,,719,,,,,,,,719,,,,,719,719,719',
'719,719,719,,,,719,719,,,,,,,719,,,719,719,719,11,11,11,,11,,,,11,11',
',,,11,,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,,,11,,,,,,,11',
',,11,11,11,11,11,11,11,11,11,11,11,11,,11,11,,11,11,11,,,,,,,,,,,,,',
',,,,,,11,,,11,,,11,11,,,11,,11,,11,,11,,,,,,,,11,,,,,11,11,11,11,11',
'11,,,,11,11,,,,,,,11,,11,11,11,11,906,906,906,,906,,,,906,906,,,,906',
',906,906,906,906,906,906,906,,,,,,906,906,906,906,906,906,906,,,906',
',,,,,,906,,,906,906,906,906,906,906,906,906,,906,906,906,,906,906,,',
',906,,,,,,,,,,,,,,,,,,,,906,,,906,,,906,906,,,906,,,,,,,,,,,,,,,,,,',
'906,906,906,906,906,906,,,,906,906,,,,,,,906,,,906,906,906,334,334,334',
',334,,,,334,334,,,,334,,334,334,334,334,334,334,334,,,,,,334,334,334',
'334,334,334,334,,,334,,,,,,,334,,,334,334,334,334,334,334,334,334,,334',
'334,334,,334,334,,334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334,334,,334',
'334,,,334,,,,,,334,,,,,,,,334,,,,,334,334,334,334,334,334,,,,334,334',
',,,,,,334,,,334,334,334,373,373,373,,373,,,,373,373,,,,373,,373,373',
'373,373,373,373,373,,,,,,373,373,373,373,373,373,373,,,373,,,,,,,373',
',,373,373,373,373,373,373,373,373,373,373,373,373,,373,373,,373,373',
'373,,,,,,,,,,,,,,,,,,,,373,,,373,,,373,373,,,373,,373,,373,,373,,,,',
',,,373,,,,,373,373,373,373,373,373,,,,373,373,,,,,,,373,,373,373,373',
'373,914,914,914,,914,,,,914,914,,,,914,,914,914,914,914,914,914,914',
',,,,,914,914,914,914,914,914,914,,,914,,,,,,,914,,,914,914,914,914,914',
'914,914,914,914,914,914,914,,914,914,,914,914,914,,,,,,,,,,,,,,,,,,',
',914,,,914,,,914,914,,,914,,,,914,,914,,,,,,,,914,,,,,914,914,914,914',
'914,914,,,,914,914,,,,,,,914,,914,914,914,914,368,368,368,,368,,,,368',
'368,,,,368,,368,368,368,368,368,368,368,,,,,,368,368,368,368,368,368',
'368,,,368,,,,,,,368,,,368,368,368,368,368,368,368,368,,368,368,368,',
'368,368,,368,368,368,,,,,,,,,,,,,,,,,,,,368,,,368,,,368,368,,,368,,',
',,,368,,,,,,,,368,,,,,368,368,368,368,368,368,,,,368,368,,,,,,,368,',
',368,368,368,728,728,728,,728,,,,728,728,,,,728,,728,728,728,728,728',
'728,728,,,,,,728,728,728,728,728,728,728,,,728,,,,,,,728,,,728,728,728',
'728,728,728,728,728,,728,728,728,,728,728,,728,728,728,,,,,,,,,,,,,',
',,,,,,728,,,728,,,728,728,,,728,,728,,,,728,,,,,,,,728,,,,,728,728,728',
'728,728,728,,,,728,728,,,,,,,728,,,728,728,728,5,5,5,,5,,,,5,5,,,,5',
',5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,,5,,,5,5,5,5,5,5,5,5,,5,5',
'5,,5,5,,,,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,,,,,,,,,,,,,,5',
'5,5,5,5,5,,,,5,5,,,,,,,5,,,5,5,5,919,919,919,,919,,,,919,919,,,,919',
',919,919,919,919,919,919,919,,,,,,919,919,919,919,919,919,919,,,919',
',,,,,,919,,,919,919,919,919,919,919,919,919,,919,919,919,,919,919,,919',
'919,919,,,,,,,,,,,,,,,,,,,,919,,,919,,,919,919,,,919,,919,,,,919,,,',
',,,,919,,,,,919,919,919,919,919,919,,,,919,919,,,,,,,919,,,919,919,919',
'722,722,722,,722,,,,722,722,,,,722,,722,722,722,722,722,722,722,,,,',
',722,722,722,722,722,722,722,,,722,,,,,,,722,,,722,722,722,722,722,722',
'722,722,,722,722,722,,722,722,,722,722,722,,,,,,,,,,,,,,,,,,,,722,,',
'722,,,722,722,,,722,,,,,,722,,,,,,,,722,,,,,722,722,722,722,722,722',
',,,722,722,,,,,,,722,,,722,722,722,362,362,362,362,362,,,,362,362,,',
',362,,362,362,362,362,362,362,362,,,,,,362,362,362,362,362,362,362,',
',362,,,,,,362,362,,362,362,362,362,362,362,362,362,362,,362,362,362',
',362,362,,362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,,,362,362,,,362,',
'362,,,,362,,,,,,,,362,,,,,362,362,362,362,362,362,,,,362,362,,,,,,,362',
',,362,362,362,725,725,725,,725,,,,725,725,,,,725,,725,725,725,725,725',
'725,725,,,,,,725,725,725,725,725,725,725,,,725,,,,,,,725,,,725,725,725',
'725,725,725,725,725,,725,725,725,,725,725,,725,725,725,,,,,,,,,,,,,',
',,,,,,725,,,725,,,725,725,,,725,,,,,,725,,,,,,,,725,,,,,725,725,725',
'725,725,725,,,,725,725,,,,,,,725,,,725,725,725,347,347,347,,347,,,,347',
'347,,,,347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347',
'347,,,347,,,,,,,347,,,347,347,347,347,347,347,347,347,,347,347,347,',
'347,347,,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347,,347',
',,,347,,,,,,,,347,,,,,347,347,347,347,347,347,,,,347,347,,,,,,,347,',
',347,347,347,348,348,348,,348,,,,348,348,,,,348,,348,348,348,348,348',
'348,348,,,,,,348,348,348,348,348,348,348,,,348,,,,,,,348,,,348,348,348',
'348,348,348,348,348,348,348,348,348,,348,348,,348,348,348,,,,,,,,,,',
',,,,,,,,,348,,,348,,,348,348,,,348,,348,,348,,348,,,,,,,,348,,,,,348',
'348,348,348,348,348,,,,348,348,348,,,,,,348,,348,348,348,348,350,350',
'350,,350,,,,350,350,,,,350,,350,350,350,350,350,350,350,,,,,,350,350',
'350,350,350,350,350,,,350,,,,,,,350,,,350,350,350,350,350,350,350,350',
'350,350,350,350,,350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,',
',350,350,,,350,,350,,350,,350,,,,,,,,350,,,,,350,350,350,350,350,350',
',,,350,350,,,,,,,350,,350,350,350,350,358,358,358,358,358,,,,358,358',
',,,358,,358,358,358,358,358,358,358,,,,,,358,358,358,358,358,358,358',
',,358,,,,,,358,358,358,358,358,358,358,358,358,358,358,358,,358,358',
'358,,358,358,,358,358,358,,,,,,,,,,,,,,,,,,,,358,,,358,,,358,358,,,358',
',358,,,,358,,,,,,,,358,,,,,358,358,358,358,358,358,,,,358,358,,,,,,358',
'358,,,358,358,358,91,91,91,,91,,,,91,91,,,,91,,91,91,91,91,91,91,91',
',,,,,91,91,91,91,91,91,91,,,91,,,,,,,91,,,91,91,91,91,91,91,91,91,,91',
'91,91,,91,91,,91,91,91,,,,,,,,,,,,,,,,,,,,91,,,91,,,91,91,,,91,,,,,',
'91,,,,,,,,91,,,,82,91,91,91,91,91,91,82,82,82,91,91,82,82,82,,82,,91',
',,91,91,91,,,82,82,82,,,,,,,,82,82,,82,82,82,82,82,,,,,,,,,,,,,,,,,',
',,,,,,82,82,82,82,82,82,82,82,82,82,82,82,82,82,,,82,82,82,,,82,,,82',
',,82,82,,82,,82,,82,,82,82,82,82,82,82,82,,82,,82,,,,,,,,,,,,,82,82',
'82,82,568,82,,82,,,,568,568,568,,,568,568,568,991,568,991,991,991,991',
'991,,,,568,568,568,568,,,991,,,,,568,568,,568,568,568,568,568,,,,,,',
',,,991,,,,,,,,,991,991,991,991,,568,568,568,568,568,568,568,568,568',
'568,568,568,568,568,,,568,568,568,,,568,,,568,,,568,568,,568,991,568',
',568,,568,568,568,568,568,568,568,,568,568,568,,,,,,,,,,,,,568,568,568',
'568,564,568,,568,,,,564,564,564,,,564,564,564,474,564,474,474,474,474',
'474,,,,564,564,564,564,,,474,,,,,564,564,,564,564,564,564,564,,,,,,',
',,,474,474,,,,,,,,474,474,474,474,,564,564,564,564,564,564,564,564,564',
'564,564,564,564,564,,,564,564,564,,,564,,,564,,,564,564,,564,474,564',
',564,,564,564,564,564,564,564,564,,564,564,564,,,,,,,,,,,,,564,564,564',
'564,560,564,,564,,,,560,560,560,,,560,560,560,608,560,608,608,608,608',
'608,,,,560,560,560,,,,608,,,,,560,560,,560,560,560,560,560,,,,,,,,,',
'608,,,,,,,,,608,608,608,608,,560,560,560,560,560,560,560,560,560,560',
'560,560,560,560,,,560,560,560,,,560,,560,560,,,560,560,,560,608,560',
',560,,560,560,560,560,560,560,560,,560,560,560,,,,,,,,,,,,520,560,560',
',560,,560,520,520,520,,,520,520,520,884,520,884,884,884,884,884,,,,520',
'520,,,,,884,,,,,520,520,,520,520,520,520,520,,,,,,,,,,884,,,,,,,,,884',
'884,884,884,,72,,,,,,,72,72,72,,520,72,72,72,,72,,520,,,,,520,520,72',
'72,72,,,,884,,,,,72,72,,72,72,72,72,72,,520,520,,,,,,,,,,,,,520,,,,',
'520,,,72,72,72,72,72,72,72,72,72,72,72,72,72,72,,,72,72,72,,,72,,72',
'72,,,72,72,,72,,72,,72,,72,72,72,72,72,72,72,,72,72,72,,,,,,,,,,,,66',
'72,72,,72,,72,66,66,66,,,66,66,66,898,66,898,898,898,898,898,,,,,66',
'66,,,,898,,,,,66,66,,66,66,66,66,66,,,,,,,,,,898,898,,,,,,,,898,898',
'898,898,,66,66,66,66,66,66,66,66,66,66,66,66,66,66,,,66,66,66,,,66,',
'66,66,,,66,66,,66,898,66,,66,,66,66,66,66,66,66,66,,66,,66,,,,,,337',
'337,,,337,,,66,66,,66,,66,337,337,,337,337,337,337,337,337,337,,,337',
'337,,,,337,337,337,337,,,,,,,,,,,,,,337,337,,337,337,337,337,337,337',
'337,337,337,337,337,,,337,,,,,,,,,,405,405,,,405,,,,,,337,,,405,405',
'337,405,405,405,405,405,405,405,,,405,405,,,,405,405,405,405,,,,,,405',
',,,,,,,405,405,,405,405,405,405,405,405,405,405,405,405,405,,,405,,',
',,,,,,,403,403,,,403,,,,,,405,,,403,403,405,403,403,403,403,403,403',
'403,,,403,403,,,,403,403,403,403,,,,,,403,,,,,,,,403,403,,403,403,403',
'403,403,403,403,403,403,403,403,,,403,,,,,,,,,,1007,1007,,,1007,,,,',
',403,,,1007,1007,403,1007,1007,1007,1007,1007,1007,1007,,,1007,1007',
',,,1007,1007,1007,1007,,,,,,1007,,,,,,,,1007,1007,,1007,1007,1007,1007',
'1007,1007,1007,1007,1007,1007,1007,,,1007,,,,,,,,,,436,436,,,436,,,',
',,1007,,,436,436,1007,436,436,436,436,436,436,436,,,436,436,,,,436,436',
'436,436,,,,,,436,,,,,,,,436,436,,436,436,436,436,436,436,436,436,436',
'436,436,,,436,,,,,,,,,,662,662,,,662,,,,,,436,,,662,662,436,662,662',
'662,662,662,662,662,,,662,662,,,,662,662,662,662,,,,,,662,,,,,,,,662',
'662,,662,662,662,662,662,662,662,662,662,662,662,,,662,,,,,,,,,,664',
'664,,,664,,,,,,662,,,664,664,662,664,664,664,664,664,664,664,,,664,664',
',,,664,664,664,664,,,,,,664,,,,,,,,664,664,,664,664,664,664,664,664',
'664,664,664,664,664,,,664,,,,,,,,,,1005,1005,,,1005,,,,,,664,,,1005',
'1005,664,1005,1005,1005,1005,1005,1005,1005,,,1005,1005,,,,1005,1005',
'1005,1005,,,,,,1005,,,,,,,,1005,1005,,1005,1005,1005,1005,1005,1005',
'1005,1005,1005,1005,1005,,,1005,,,,,,,,,,374,374,,,374,,,,,,1005,,,374',
'374,1005,374,374,374,374,374,374,374,,,374,374,,,,374,374,374,374,,',
',,,374,,,,,,,,374,374,,374,374,374,374,374,374,374,374,374,374,374,',
',374,,,,,,,,,,461,461,,,461,,,,,,374,,,461,461,374,461,461,461,461,461',
'461,461,,,461,461,,,,461,461,461,461,,,,,,461,,,,,,,,461,461,,461,461',
'461,461,461,461,461,461,461,461,461,,,461,,,,,,,,,,427,427,,,427,,,',
',,461,,,427,427,461,427,427,427,427,427,427,427,,,427,427,,,,427,427',
'427,427,,,,,,427,,,,,,,,427,427,,427,427,427,427,427,427,427,427,427',
'427,427,,,427,,,,,,,,,,459,459,,,459,,,,,,427,,,459,459,427,459,459',
'459,459,459,459,459,,,459,459,,,,459,459,459,459,,,,,,459,,,,,,,,459',
'459,,459,459,459,459,459,459,459,459,459,459,459,,,459,,,,,,,,,,943',
'943,,,943,,,,,,459,,,943,943,459,943,943,943,943,943,943,943,,,943,943',
',,,943,943,943,943,,,,,,943,,,,,,,,943,943,,943,943,943,943,943,943',
'943,943,943,943,943,,,943,,,,,,,,,,372,372,,,372,,,,,,943,,,372,372',
'943,372,372,372,372,372,372,372,,,372,372,,,,372,372,372,372,,,,,,372',
',,,,,,,372,372,,372,372,372,372,372,372,372,372,372,372,372,,,372,,',
',,,,,,,437,437,,,437,,,,,,372,,,437,437,372,437,437,437,437,437,437',
'437,,,437,437,,,,437,437,437,437,,,,,,437,,,,,,,,437,437,,437,437,437',
'437,437,437,437,437,437,437,437,,,437,,,,,,,,,,425,425,,,425,,,,,,437',
',,425,425,437,425,425,425,425,425,425,425,,,425,425,,,,425,425,425,425',
',,,,,425,,,,,,,,425,425,,425,425,425,425,425,425,425,425,425,425,425',
',882,425,882,882,882,882,882,652,,652,652,652,652,652,,,882,,,,,425',
',652,,758,425,758,758,758,758,758,,,,,,,882,,,758,,,,652,,882,882,882',
'882,,,,652,652,652,652,,,,,756,758,756,756,756,756,756,,,,758,758,758',
'758,,,756,,,,652,882,,,,,,680,652,680,680,680,680,680,,,,,756,,,,,680',
',,758,756,756,756,756,932,,932,932,932,932,932,,,,,,,,680,396,932,396',
'396,396,396,396,,680,680,680,680,,,,,396,756,,,,,,932,,,,,,,,,932,932',
'932,932,,,396,396,,,,,680,,,396,396,396,396,,,,,,,,,,,,,,,,,,932,,,',
',,,,,,,,,,,396' ]
        racc_action_check = arr = ::Array.new(25699, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    49,  5710,  1376,   nil, 22166,   -68,   nil,   nil,   784,
   nil, 21214,   -10, 15366, 15094,   nil,   nil,   nil,   -64,  1292,
 12646,   698,  1232,   nil,   nil,   nil,   nil, 11558, 11422,   nil,
  1206,   nil,   nil,  1336,  1205,   nil,  1203,   nil,  1612,  2285,
  1197,   nil,  1298,  1198,   425,  9246,  9110,   nil,  1198,  8974,
   468,   nil,   528,   nil,  1209,   801,   nil,   nil,   nil,  7750,
  1265,   nil,  6254,   nil,   nil,  1179, 24211,   nil,   nil, 17542,
   nil,   nil, 24086,   nil,   nil,     0,   317,   nil,  5299,  1231,
   nil,   159, 23504,   nil,   437,   nil,   nil,   nil,  6662,   nil,
   nil, 23390,   nil,   nil,   nil,   nil,   nil,  6934,   390,   nil,
   nil,  7206,   307,   nil,   464,   784,   nil,  1175,   nil,   nil,
  1224,   nil,   nil,    -7,  1287,  1184,    33,   264,  1243,   nil,
   nil,  1196,  1188,    -2,   959,    -4,   nil,   nil,  9518,   nil,
  9654,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   125,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  9926,  1173,  1130, 10334,  1129,
 10606,  3381,   nil,   218,   nil,   285,  1201,   nil,  2285,  1168,
   964, 11694,    92, 11966,  1112,   nil,   nil,   nil,   nil,  1153,
   -78,   613,   nil,  1127,   nil,   286,   nil,   nil,   nil, 12918,
   nil, 13054, 13190,   nil,   256,  1116,   290, 13734,  1108,   961,
  1041,  1170,  1098, 14550,  1198, 14822,  1066,  3381,   nil,   152,
  1068,   231,   nil,   nil,   nil,   199,   271,   nil,   200,   226,
   470,    98,   nil,   337,   356,   343,   nil,   429,   nil,   259,
   nil,  1067,   nil,  1058,   nil,   nil,   nil,   nil, 17406,  5846,
 17678, 17814, 17950, 18086, 18222, 18358, 18494, 18630, 18766, 18902,
 19038, 19174, 19310, 19446, 19582, 19718, 19854, 19990, 20126, 20262,
 20398, 20534, 20670, 20806,   nil,   -57,  1063,  4066,   nil,   nil,
   nil,   516,   nil,   nil, 21486,  1115,   nil, 24279,   nil,  1066,
  4203,  1093,  1085,   488,    19,   178,   nil, 22846, 22982,   nil,
 23118,   -11,  6798,   nil,   nil,   nil,   nil,   nil, 23254,   nil,
  1010,  1023, 22574,  1057,   114,  4888,   nil,  1060, 21894,  1037,
   nil,  1028, 25228, 21622, 24863,    62,  1097,   957,   nil,   nil,
   840,   nil,   996, 20942,   965,   166,   184,   nil, 17270, 17134,
 16998, 16862, 16726, 16590, 16454, 16318, 25564,   nil,   nil,   969,
   nil,   nil,    32, 24425, 16182, 24352,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil, 16046,   nil,   nil, 15910,   nil,
   nil, 15774,   nil,   -40, 15638, 25374, 15502, 25009, 15230,   nil,
 14958,   -50,   -11,   nil,   nil, 14686, 24571, 25301,   nil,   nil,
   nil, 14414,   nil,   123,    10,   360,  1094,   nil,   398,   nil,
   nil,   nil,   132,   nil,   nil,   nil,   nil, 14278,  1060, 25082,
 14142, 24936,   nil,   912,   911, 14006,   nil,   912,   nil,   905,
   nil,   nil,   nil,   nil, 23728, 13598,   nil,   168,   nil,   nil,
  4477,   967,   913,   955,  5162,   775,  4614,  4203,  5299,  5436,
   941,  4751,   933,  3244,   572,  4340,   -49,   797,  4066,   352,
  4888,  5025,  5573,  5982,  5710,   676,   nil,   790,   nil,   908,
   901,   -56,  1474,   nil,   nil,   nil,  2833, 12510,   nil,   nil,
 24019,   nil,   nil,  1737,   792, 12102, 11830,  2011,   nil,   892,
 11150,   nil,   768,   755, 11014,   nil,   nil,   744,   nil,  2559,
   721,   711,   nil,   686,   nil,   nil,   nil,   644,   922,   nil,
   nil, 10062,   640,  1874,   nil,   nil,   nil,   nil,   515,   nil,
 23894,   177,   619,   520, 23764,   nil,   647,   645, 23634,   nil,
   689,   683,   nil,   548,   nil,    37,   nil,   nil,  8566,   nil,
  2970,   nil,   nil,   nil,   nil,   nil,   nil,    63,   nil,   nil,
  1737,   nil,   nil,   522,   nil,   nil,   nil,   527,   nil,   nil,
  8430,   649,   nil,   nil,   597,   nil,   nil,   nil, 23858,    62,
   592,   nil,   512,   506,   nil,   nil,   454,   nil,   437,   443,
   nil,   nil,   nil,   499,   nil,  7342,    62,   436,   151,   383,
    57,   396,     6,   nil,  5025,  1063,   nil,   364,  6118,   311,
   nil,   nil,   234,   222,   298,   260,   130,  2011,   nil,   nil,
   nil,   nil, 25443,   nil,   774,  1099,   nil,   nil,   445,   nil,
   nil,   nil, 24644,  5982, 24717,   nil,   nil,  5162,   291,   153,
    90,   279,  1061,   230,  8158,  8838,   266,   nil,   nil,   922,
 25525,   -93,  3929,   186,   nil,  1060,   242,   nil,   nil,   346,
 10198,   nil,   nil,   215,   nil,   -19,   nil,   287,   137,   nil,
   144,   129,   596,   nil,  3792, 10470,    61,   nil,   166, 12238,
 12374,   nil,   804,  -108, 12782,   -65, 13462,   nil,    35, 21078,
   403,    -3, 22438,   nil,   960, 22710,    56,   nil, 22030,   nil,
   nil,   nil,   nil,   313,   nil, 11286, 10878,   nil,   608,   nil,
   612,   nil,   nil,    94,   nil,    97,   513,   nil,   140,  2970,
   nil,  3244,   nil,   nil,   444,   nil, 25498,   nil, 25461,  8022,
   nil,  5890,   nil,    56,     5,   369,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  6390,  6526,   235,  7478,  7614,  4751,   452,
   nil,  7886,   nil,   460,   477,   483,   476,   491,   nil,   513,
   nil,   499,   503,  4614,   270,   nil,  4477,  8294,   524,   821,
   nil,   359,   655,   298,   nil,   550,   nil,   557,   nil,   681,
   nil,   nil,  8702,   686,  4340,   nil,   nil,   582,   nil,   639,
  3792,   nil,   nil,   nil,   nil,   732,  9382,   nil,   626,  9790,
   759,   641,  2696,   nil,  2148,   nil,   nil,  3107,   nil, 10742,
   nil,  3518,   nil,   nil,  3655,   nil,   nil,    23,  2148,   nil,
  1874,  2422,   nil,   783,   nil,   642,   790,   859,   795,   809,
   940,   821,   nil,   nil,   846,   nil,   847,   nil,   849,   855,
   nil,   859,   nil,   nil, 13326,   888,   nil,   947,   595,   906,
   nil,   nil, 25436,   nil, 23983, 13870,   nil,  6570,   nil,   928,
   nil,   379,  1034,   nil,  1038,   421,   nil,   nil, 24175,   nil,
   nil,  3929,   nil,   nil,  3655,   nil, 21350,   nil,    33,  1105,
   nil,    -8,   994,   nil, 21758,  5436,  2559,   nil,  5573, 22302,
  1144,  1148,   nil,   nil,   451,   818,  1052,   nil,   nil,   nil,
   nil,   nil, 25549,   nil,  7658,   nil,  7386,   nil,  7522,   nil,
  3518,   nil,   nil, 25155,   nil,  1067,  1068,   nil,   nil,  1069,
  1095,  1062,  1097,   nil,   nil,   nil,   453,  1109,   nil,   nil,
  2833,   nil,   nil,  2422,   nil,   648,   684,  1199,  1095,  1179,
   nil,  2696,   nil,  3107,  1147,   267,   nil,   nil,   nil,  1143,
   956,  1156,   583,  1158,  1159,  1160,  1161,  1282,  1204,  1205,
   nil, 23598,   nil,  6978,   nil,  6434,   nil,   484,   nil,   710,
   nil,   nil,  1307,  1308,  1199, 24790,  7070, 24498,  1315,   770,
   nil,   nil,   nil,   nil,   997,  1197,   nil,   nil,  6706,   nil,
   nil,   nil,  1199,  1200,  1201,  1202,   nil,   nil,   nil,    34,
   -10,  1209,   523,    22,   nil,   nil,  1234,  1235,   nil,   nil,
  6162,   nil,   nil,    -7,   nil,  1248,   nil ]

racc_action_default = [
    -1,  -617,  -616,  -617,  -505,  -617,  -605,   -70,  -517,  -616,
  -446,  -332,  -301,  -616,  -617,  -518,  -616,  -450,  -449,  -317,
  -333,   -41,  -616,  -616,  -451,  -334,  -324,   -82,   -74,  -497,
  -616,  -616,  -335,  -617,  -617,  -498,  -616,   -84,  -617,   -49,
  -616,  -283,   -51,  -617,  -513,  -617,  -617,   -52,  -605,  -617,
   -53,    -9,  -514,  -272,  -617,  -617,  -511,  -454,  -273,  -617,
  -617,   -29,  -293,  -510,  -491,  -617,  -260,    -2,  -274,  -617,
  -512,   -44,  -260,  -275,  -507,  -591,  -603,  -276,  -616,  -617,
  -506,  -260,  -593,  -277,  -617,  -508,  -503,  -447,  -603,    -4,
  -278,  -617,  -509,  -502,  -448,    -5,  -279,  -605,  -592,  -280,
  -306,  -616,  -281,   -58,  -241,    -8,  -309,  -617,  -404,  1047,
  -617,  -332,  -333,  -513,  -617,  -605,  -514,  -617,  -617,  -293,
  -358,  -296,  -425,  -417,  -617,  -281,  -336,  -357,  -605,  -606,
  -617,  -495,  -131,  -175,  -180,  -155,  -164,  -147,  -132,  -178,
  -166,  -143,  -177,  -182,  -167,  -184,  -142,  -617,  -190,  -153,
  -176,  -152,  -163,  -154,  -169,  -127,  -161,  -150,  -183,  -138,
  -149,  -168,  -151,  -173,  -139,  -145,  -159,  -172,  -144,  -160,
  -193,  -185,  -140,  -156,  -146,  -492,  -194,  -192,  -141,  -157,
  -128,  -188,  -187,  -135,  -158,  -116,  -129,  -186,  -133,  -113,
  -117,  -130,  -171,  -125,  -115,  -137,  -170,  -179,  -494,  -477,
  -189,  -134,  -165,  -148,  -493,  -490,  -191,  -136,  -174,  -126,
  -195,  -162,  -114,  -196,  -181,  -617,  -265,  -616,  -617,  -616,
  -617,  -242,  -255,  -513,  -259,  -514,  -617,  -586,  -616,  -617,
  -617,  -617,  -281,  -617,  -617,   -68,  -427,  -430,  -302,  -617,
  -609,  -617,  -584,  -617,    -7,  -617,  -475,  -452,  -320,  -617,
   -69,  -617,  -617,  -465,  -617,  -617,  -617,  -617,   -80,   -90,
   -91,  -617,  -617,  -617,   -98,   -78,   -75,  -616,  -473,  -617,
  -617,  -617,  -479,  -513,  -514,  -156,  -617,  -327,  -157,  -158,
  -186,  -113,  -582,  -179,  -189,  -174,  -581,  -114,   -86,  -617,
  -459,  -617,  -122,   -22,  -118,  -120,  -119,  -121,  -617,  -617,
  -617,  -617,  -617,  -617,  -617,  -617,  -617,  -617,  -617,  -617,
  -617,  -617,  -617,  -617,  -617,  -617,  -617,  -617,  -617,  -617,
  -617,  -617,  -617,  -617,  -471,  -617,  -617,  -616,  -410,  -413,
   -17,  -617,  -218,  -234,  -617,  -219,  -601,  -617,  -602,  -617,
  -616,  -499,  -500,   -50,  -617,  -290,   -67,  -617,  -605,   -66,
  -617,  -617,  -616,  -424,   -65,    -3,  -613,  -614,  -604,  -612,
   -72,  -605,  -617,  -617,  -603,  -616,   -13,   -14,  -617,   -59,
  -300,  -617,  -617,  -616,  -617,  -603,  -617,  -604,  -233,   -48,
  -286,  -285,  -617,  -617,  -617,  -609,  -609,  -243,  -617,  -617,
  -617,  -617,  -617,  -617,  -617,  -617,  -545,  -303,  -314,  -617,
  -499,  -500,  -290,  -617,  -616,  -617,  -605,  -299,   -47,  -484,
  -482,  -496,  -481,  -478,  -590,  -617,  -264,  -256,  -617,  -266,
  -257,  -617,  -262,  -290,  -617,  -617,  -616,  -617,  -617,  -589,
  -617,  -616,  -616,  -585,  -610,  -611,  -617,  -617,  -292,  -453,
  -476,  -617,  -111,  -617,  -617,  -108,  -617,  -281,  -109,   -45,
   -46,  -464,  -617,  -461,  -463,  -455,  -325,  -617,   -97,  -617,
  -616,  -617,   -88,   -83,   -76,  -617,   -87,  -605,  -470,  -617,
  -469,  -480,  -456,  -329,  -545,  -617,  -458,  -617,  -457,  -123,
  -232,  -212,  -221,  -215,  -223,  -222,  -208,  -228,  -209,  -229,
  -214,  -230,  -213,  -605,  -235,  -225,  -210,  -236,  -227,  -211,
  -237,  -226,  -238,  -224,  -231,  -220,  -468,  -617,  -467,  -617,
  -438,  -616,  -617,   -21,   -20,   -19,  -239,  -617,  -595,  -597,
  -260,  -594,  -596,  -616,  -617,  -617,  -617,  -616,  -349,  -348,
  -617,   -40,   -39,  -617,  -617,   -30,  -295,  -605,  -261,  -616,
  -616,  -616,  -250,  -605,  -251,    -6,  -615,   -71,   -16,  -288,
   -12,  -604,  -605,  -199,   -31,   -60,   -55,  -418,  -595,  -422,
  -260,  -594,  -605,  -595,  -597,  -423,  -260,  -594,  -596,  -421,
  -617,  -617,  -433,  -605,  -607,  -617,  -291,  -244,  -611,  -246,
  -207,   -37,   -23,   -24,   -25,   -26,   -27,  -617,   -38,  -265,
  -197,   -43,   -42,  -617,  -572,  -570,  -546,  -580,  -577,  -562,
  -617,  -617,  -550,  -576,  -575,  -563,  -549,  -528,  -545,  -617,
  -617,  -544,  -580,  -530,  -407,  -552,  -530,  -554,  -551,  -530,
  -560,  -548,  -573,  -565,  -547,  -617,  -595,  -616,  -594,  -605,
  -289,  -617,  -598,  -298,  -616,  -617,  -588,  -267,  -617,  -616,
  -263,  -587,  -595,  -594,  -605,  -595,  -594,  -197,  -393,  -428,
  -394,  -396,  -605,  -431,  -321,  -109,  -110,  -108,  -617,  -318,
  -519,  -520,  -617,  -616,  -617,  -462,  -466,  -616,   -81,  -595,
  -594,  -605,   -96,   -94,  -617,  -617,   -79,   -85,  -474,  -617,
  -545,  -617,  -616,  -605,  -460,  -617,  -617,  -472,  -284,  -616,
  -616,  -411,   -18,  -605,  -249,  -414,  -248,   -54,  -617,   -28,
  -216,  -217,  -616,  -350,  -206,  -617,  -271,  -294,  -616,  -252,
  -254,  -247,   -15,   -73,  -617,  -616,  -617,  -419,   -61,  -617,
  -426,  -617,  -617,  -420,   -63,  -617,  -617,  -313,  -617,  -287,
  -307,  -352,  -351,  -609,  -310,  -617,  -617,  -527,  -617,  -556,
  -617,  -361,  -359,  -605,  -551,  -363,  -370,  -574,  -605,  -616,
  -405,  -616,  -578,  -526,  -617,  -537,  -617,  -540,  -617,  -617,
  -542,  -617,  -564,  -617,  -426,  -617,  -488,  -489,  -486,  -483,
  -487,  -268,  -258,  -617,  -617,  -426,  -617,  -617,  -616,  -580,
  -568,  -617,  -375,  -605,  -616,  -616,  -551,  -616,  -558,  -617,
  -392,  -398,  -580,  -616,  -617,  -522,  -616,  -617,  -605,  -109,
  -112,  -108,  -617,   -92,   -89,   -77,  -330,  -605,  -524,  -617,
  -583,  -124,  -617,  -616,  -616,  -355,  -440,  -439,  -441,  -616,
  -616,  -297,  -415,  -416,   -10,  -617,  -617,  -353,  -269,  -617,
  -617,  -616,  -200,   -56,  -203,   -34,   -62,  -202,   -33,  -617,
  -608,  -205,   -35,   -64,  -204,   -36,  -312,  -617,  -616,  -245,
  -616,  -198,  -579,  -605,  -553,  -617,  -368,  -617,  -605,  -617,
  -617,  -580,  -561,  -529,  -530,  -555,  -530,  -571,  -530,  -530,
  -566,  -530,  -315,  -485,  -617,  -617,  -374,  -617,  -557,  -617,
  -385,  -377,  -383,  -388,  -617,  -617,  -390,  -617,  -395,  -617,
  -373,  -617,  -617,  -322,  -617,  -617,  -426,  -326,  -545,  -523,
  -328,  -240,   -11,  -445,  -616,  -356,  -617,  -443,  -617,  -617,
  -304,  -617,  -270,  -305,  -253,  -616,  -201,   -32,  -616,  -617,
  -617,  -617,  -360,  -362,  -366,  -617,  -371,  -406,  -408,  -409,
  -525,  -533,  -617,  -535,  -617,  -541,  -617,  -538,  -617,  -543,
  -616,  -429,  -290,  -617,  -397,  -616,  -616,  -376,  -569,  -616,
  -616,  -567,  -616,  -400,  -403,  -402,  -605,  -580,  -559,  -432,
  -616,  -319,  -521,  -616,  -444,   -99,  -100,  -617,  -617,  -107,
  -442,  -616,  -412,  -616,  -617,  -616,  -267,  -308,  -311,  -364,
  -617,  -369,  -617,  -530,  -530,  -530,  -530,  -617,  -289,  -598,
  -380,  -617,  -382,  -617,  -389,  -617,  -386,  -617,  -391,  -617,
  -399,  -372,  -617,  -617,  -106,  -617,  -616,  -617,  -438,  -616,
   -57,  -435,  -436,  -434,  -617,  -367,  -534,  -531,  -617,  -536,
  -539,  -316,  -616,  -616,  -616,  -616,  -401,  -323,  -331,  -595,
  -594,  -605,  -105,  -598,  -437,  -354,  -365,  -530,  -381,  -378,
  -617,  -384,  -387,  -426,  -532,  -616,  -379 ]

clist = [
'89,130,344,175,357,571,105,199,222,238,329,242,351,126,246,67,357,222',
'105,358,253,199,353,379,217,292,185,277,268,272,330,375,296,217,290',
'126,126,296,324,219,433,240,520,334,509,689,297,420,219,527,185,297',
'682,720,463,185,539,543,555,222,185,266,611,591,361,349,244,825,641',
'531,865,354,353,640,258,217,640,560,562,566,369,785,641,656,867,743',
'360,337,235,355,219,789,953,84,813,730,124,250,614,387,923,376,230,649',
'653,84,926,734,627,629,399,230,452,830,385,954,948,588,262,262,764,750',
'249,147,796,444,441,794,960,386,560,644,566,456,257,775,737,256,667',
'346,611,627,474,679,898,339,659,477,625,114,230,753,790,230,902,397',
'293,243,783,286,230,120,803,695,627,671,850,956,394,84,848,609,940,396',
'981,512,384,511,820,230,431,778,230,691,432,577,579,858,230,793,1013',
'728,819,908,247,245,865,383,271,726,289,573,1026,685,254,325,269,769',
'635,634,205,797,715,2,864,416,915,416,862,230,958,230,879,948,853,954',
'327,923,440,1015,276,475,1,,,,,453,,,,,,,,,,,668,,865,,,467,471,,676',
'126,867,,,,,1036,,126,,,,,343,126,453,126,611,360,,,,535,343,,,872,',
',,,,896,,,357,,,,462,,,343,554,,,357,800,,,551,380,865,748,945,464,473',
',,,,876,84,581,557,559,,,,575,592,,,,890,582,583,584,585,,587,,406,446',
'408,230,230,,222,611,222,446,222,542,552,,559,262,,262,641,84,,533,217',
'105,217,640,640,548,627,798,420,222,542,660,360,1035,559,219,550,219',
',1011,,807,,802,,559,833,570,,,564,,,,,,586,,809,930,222,542,,591,,',
'836,533,559,545,,816,843,,,,,84,,,,564,222,542,537,,538,,648,648,84',
',,,665,,,230,230,,230,,230,564,,639,,,84,,,,84,564,,84,222,542,230,665',
',449,450,230,126,805,772,,239,694,,,126,230,,963,,564,230,230,230,230',
'230,84,230,230,,686,,462,755,,,757,230,1001,760,462,692,,,,732,,,296',
',,648,694,,,894,,732,723,230,696,697,297,89,1043,,,,,105,,185,,,230',
'849,,,698,,416,416,784,,,1034,,,,,262,,,230,918,,,712,262,721,696,718',
',641,,,611,724,230,,763,640,,,,,,,,694,,,,723,,,,,795,,,,,,,,343,,,',
',,343,343,343,343,1012,343,733,,230,808,,,559,971,84,,973,787,84,,,',
',,721,696,,,,,84,,,,,,,416,,721,,,84,,,,868,791,835,871,,838,654,,842',
',,845,,772,222,542,,,,823,721,,592,742,,414,811,806,419,,422,1002,,296',
'1003,564,126,126,,,683,815,818,429,,732,822,297,,,185,,,779,815,,185',
'533,,,815,804,462,,627,1031,,648,,,230,,,,81,866,893,869,,84,,,693,81',
',,81,,,,,831,81,,895,847,931,791,933,,935,937,,939,,,,,230,,,,84,,,',
',,,262,262,,,911,,917,949,84,,952,,81,791,,81,,881,881,,881,,81,,126',
',,,721,,,81,782,,,,861,,532,,,81,230,742,81,230,903,,230,856,81,230',
'907,,,983,,985,962,,,986,230,,416,,,,,,,343,,,,84,,84,,,,81,946,81,950',
',589,,,,,,,,,,1016,1017,1019,1020,,,,,84,,636,878,,637,,,239,,1022,',
'1024,,852,84,1025,,84,230,,,239,,126,,,,984,,852,,,,,,84,1037,,,,,84',
',,126,1044,,230,,,,,,742,,742,,,1045,779,230,779,,,779,,,,957,84,,84',
',881,881,,81,881,881,,881,1000,,,107,559,1023,127,,,564,,,,,,107,,,81',
'81,,,815,,,951,,,,,,,,,81,,,,,706,,979,742,,84,,968,,,,,,222,542,,84',
'815,343,84,,,,,,,,,,,881,881,881,881,564,,721,782,,782,107,84,782,,637',
',852,343,779,,779,,779,881,779,81,,,742,,742,84,,,84,,739,,81,,,,84',
',84,81,81,,81,,81,,,,,,81,,,,81,,742,81,,,81,779,,,,81,,,771,,,230,',
',,81,,,,,81,81,81,81,81,81,81,81,,,221,,221,,,,81,,,221,,,880,883,,886',
',,,,782,,782,,782,,782,,81,,817,,,,332,333,,,335,,,,,81,,828,,,,637',
'239,221,,,,,,,,,,,81,,107,,,,589,782,,,,,,,,81,,,378,,,,,,,363,,,221',
',,,,,,,,870,,,,107,,44,,,113,,,,,,,,,44,,81,,,,,,81,,,,81,259,259,,',
',,273,381,,,,81,,,,,,,,,,,,81,,,,,,,,,,107,,,,,407,912,,,,990,992,,107',
'994,996,,998,44,,,,,,,,,,,,,107,,,,107,,,107,,,221,,,221,,221,,,,,,',
',,,,378,,221,,,,,81,,107,,593,,,,,81,363,,,,,,,,,,,,,1038,1039,1041',
'1042,239,,,,,976,,,,,,81,,,79,81,,,,1046,,,363,,,,79,,,,81,,,480,481',
'482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498',
'499,500,501,502,503,504,505,,,,,,81,,,81,,516,81,,,81,,,,44,,,,,221',
'221,81,221,,221,,,79,,,,,524,,81,273,81,,,,553,,107,273,,221,107,,,259',
',259,,44,,,,363,107,,580,,,81,,,,590,,,107,536,,,,,221,,81,,,81,81,',
'547,,,221,,,221,,,221,,,553,,221,81,580,,647,,,81,,221,,,,81,,44,,,',
',,,,,,,81,,44,,,633,,,221,81,,81,,,,,,,,,44,,,,44,,,44,,107,,,,,,,,',
',,,,,,,,,,,,,,,79,,44,,,,,,,107,,,81,677,,,,,,,700,701,,81,107,704,81',
',,221,,,,,,,,,,79,,,702,,,,,,81,,,,,,708,,,,,,,,,,,,259,,81,,,81,,221',
'259,,,,593,81,,81,,707,,,,,,711,,107,,107,,221,,,713,79,,,,,,,,,,,,',
'79,,81,102,,,125,729,107,,,,,,,102,,,79,,44,221,79,107,44,79,107,,264',
'264,,,,,,,44,765,,,,,,,107,,221,,44,,107,,,79,,,,,,,,,,,,,,,,,,,,221',
',,,,107,102,107,,,,,,,,221,,,,221,221,,,,832,,834,,,837,,,841,,,844',
',,221,,,,,,810,851,647,,,,,,,,821,,,,44,,,107,,970,,,,,,221,,,107,,',
'107,,,,859,,860,,834,837,,841,844,,,,44,,52,,,116,107,259,259,,,,,854',
'52,44,,875,,79,,,,79,,,107,260,260,107,,901,892,274,,79,,107,,107,,',
',,,,,79,221,,,,,905,,,,,916,909,,,,,,102,,,,,,,,,,,,899,52,,,,44,,44',
',447,920,,921,,,,916,447,,,,,,264,,264,,102,,,,,,,44,,,273,,,,,,,,,922',
',,44,,927,44,79,,,221,,,,,221,,,,,964,,,,44,,,,,,44,974,,,975,,,,,,79',
'102,,,,,,,,,,,,,102,79,987,,44,,44,,,,,,,,,,,,102,,,,102,,,102,,,,,',
',,1008,,1009,,,,,,273,,,,,,,221,,,52,,102,,,,,,,44,,965,,,,,,79,,79',
'44,274,,44,,,,,,274,,,,,,260,,260,,52,,,,,,44,79,,,,,,,,,,,,,,,79,,',
'79,44,264,,44,,,,,,264,,44,,44,,,,79,,,,,,79,,,,,,,,,,,52,,,,,,,,,,',
',,52,,,,79,,79,,,,,,,,,,,,52,,102,,52,,102,52,,,,,,,,,,,102,,,,,,,,',
',,,102,,,,,52,,,,,,,79,,,,,,,,,,,79,,,79,,,,,,,,,,,,,,,,,,,,,,79,,,',
',,,,,,,,,,,,,,,,79,260,,79,,,,,,260,,79,,79,,102,767,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,102,,,,,,,264,264,,,,,,,102,,,,52,,,,52,,,,,,,,,,,,52',
',,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,,102,,,,,,,,,,,',
',,,,,,,,,,,,,,,102,,,447,,,,,,,,,,,,102,,,102,52,,,,,,,,,,,,,,,,,102',
',,,,,102,,,,,,,,,,52,,,,,,,260,260,,,,,,,52,,,102,,102,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,447,,,,,,,,,,,,,,,,,,,102,,969,,,,,,52,,52,102',
',,102,,,,,,,,,,,,,,,,,,,,,,102,52,,,274,,,,,,,,,,,,52,,,52,102,,,102',
',,,,,,,102,,102,,,,52,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,52,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,,,,,,,,,,,,,52,,966,,,,,,,,',
'52,,,52,,,,,,,,,,,,,,,,,,,,,,52,,,,,,,,,,,,,,,,,,,,52,,,52,,,,,,,,52',
',52' ]
        racc_goto_table = arr = ::Array.new(2860, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,19,59,95,92,9,6,35,86,150,6,19,66,6,2,95,35,9,8,6,6,71,22,68,17',
'60,59,6,6,17,19,63,68,6,66,66,63,6,70,69,70,39,33,10,13,64,73,70,89',
'60,64,96,26,54,60,89,25,41,35,60,52,180,20,49,40,7,90,193,29,184,40',
'71,74,53,68,74,39,25,39,40,139,193,57,188,129,48,38,47,5,70,142,144',
'24,14,91,24,47,149,6,127,5,24,42,42,24,130,91,39,25,33,24,170,14,68',
'145,189,29,24,24,26,147,106,167,107,58,108,109,110,70,39,25,39,58,111',
'26,134,167,112,47,180,39,113,114,115,11,94,170,104,93,24,134,131,24',
'15,88,18,85,137,84,24,21,26,72,39,25,103,143,102,24,101,146,105,148',
'130,32,67,151,152,24,155,156,24,42,157,69,69,142,24,158,159,160,161',
'162,165,166,184,100,168,92,169,99,144,65,172,173,174,175,176,177,178',
'179,44,3,183,6,45,6,185,24,186,24,142,189,129,145,98,127,171,130,97',
'192,1,,,,,171,,,,,,,,,,,54,,184,,,49,171,,54,66,188,,,,,130,,66,,,,',
'31,66,171,66,180,48,,,,22,31,,,91,,,,,,26,,,95,,,,52,,,31,22,,,95,57',
',,8,31,184,149,139,53,38,,,,,134,24,22,71,71,,,,19,22,,,,134,19,19,19',
'19,,19,,31,24,31,24,24,,35,180,35,24,35,6,49,,71,24,,24,193,24,,68,68',
'9,68,74,74,9,39,25,73,35,6,95,48,90,71,70,5,70,,14,,149,,10,,71,42,5',
',,60,,,,,,9,,10,134,35,6,,20,,,41,68,71,7,,29,41,,,,,24,,,,60,35,6,47',
',47,,6,6,24,,,,171,,,24,24,,24,,24,60,,70,,,24,,,,24,60,,24,35,6,24',
'171,,31,31,24,66,54,73,,30,71,,,66,24,,96,,60,24,24,24,24,24,24,24,24',
',33,,52,182,,,182,24,134,182,52,17,,,,95,,,63,,,6,71,,,10,,95,71,24',
'6,40,64,6,26,,,,,9,,60,,,24,69,,,2,,6,6,138,,,13,,,,,24,,,24,89,,,9',
'24,33,6,40,,193,,,180,40,24,,19,74,,,,,,,,71,,,,71,,,,,95,,,,,,,,31',
',,,,,31,31,31,31,92,31,70,,24,95,,,71,89,24,,89,140,24,,,,,,33,6,,,',
',24,,,,,,,6,,33,,,24,,,,138,33,22,138,,22,31,,22,,,22,,73,35,6,,,,150',
'33,,22,128,,30,17,59,30,,30,10,,63,10,60,66,66,,,31,6,6,30,,95,86,64',
',,60,,,133,6,,60,68,,,6,52,52,,39,25,,6,,,24,,,,43,140,95,140,,24,,',
'31,43,,,43,,,,,70,43,,19,68,182,33,182,,182,182,,182,,,,,24,,,,24,,',
',,,,24,24,,,19,,22,138,24,,138,,43,33,,43,,6,6,,6,,43,,66,,,,33,,,43',
'135,,,,133,,30,,,43,24,128,43,24,6,,24,128,43,24,6,,,138,,138,95,,,138',
'24,,6,,,,,,,31,,,,24,,24,,,,43,140,43,140,,30,,,,,,,,,,182,182,182,182',
',,,,24,,30,24,,30,,,30,,138,,138,,135,24,138,,24,24,,,30,,66,,,,140',
',135,,,,,,24,138,,,,,24,,,66,182,,24,,,,,,128,,128,,,138,133,24,133',
',,133,,,,133,24,,24,,6,6,,43,6,6,,6,33,,,28,71,140,28,,,60,,,,,,28,',
',43,43,,,6,,,24,,,,,,,,,43,,,,,30,,128,128,,24,,24,,,,,,35,6,,24,6,31',
'24,,,,,,,,,,,6,6,6,6,60,,33,135,,135,28,24,135,,30,,135,31,133,,133',
',133,6,133,43,,,128,,128,24,,,24,,30,,43,,,,24,,24,43,43,,43,,43,,,',
',,43,,,,43,,128,43,,,43,133,,,,43,,,30,,,24,,,,43,,,,,43,43,43,43,43',
'43,43,43,,,34,,34,,,,43,,,34,,,136,136,,136,,,,,135,,135,,135,,135,',
'43,,30,,,,34,34,,,34,,,,,43,,30,,,,30,30,34,,,,,,,,,,,43,,28,,,,30,135',
',,,,,,,43,,,34,,,,,,,12,,,34,,,,,,,,,30,,,,28,,55,,,55,,,,,,,,,55,,43',
',,,,,43,,,,43,55,55,,,,,55,50,,,,43,,,,,,,,,,,,43,,,,,,,,,,28,,,,,50',
'30,,,,136,136,,28,136,136,,136,55,,,,,,,,,,,,,28,,,,28,,,28,,,34,,,34',
',34,,,,,,,,,,,34,,34,,,,,43,,28,,28,,,,,43,12,,,,,,,,,,,,,136,136,136',
'136,30,,,,,30,,,,,,43,,,23,43,,,,136,,,12,,,,23,,,,43,,,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,,',
',,,43,,,43,,34,43,,,43,,,,55,,,,,34,34,43,34,,34,,,23,,,,,12,,43,55',
'43,,,,34,,28,55,,34,28,,,55,,55,,55,,,,12,28,,34,,,43,,,,34,,,28,50',
',,,,34,,43,,,43,43,,50,,,34,,,34,,,34,,,34,,34,43,34,,34,,,43,,34,,',
',43,,55,,,,,,,,,,,43,,55,,,50,,,34,43,,43,,,,,,,,,55,,,,55,,,55,,28',
',,,,,,,,,,,,,,,,,,,,,,,23,,55,,,,,,,28,,,43,50,,,,,,,34,34,,43,28,34',
'43,,,34,,,,,,,,,,23,,,12,,,,,,43,,,,,,12,,,,,,,,,,,,55,,43,,,43,,34',
'55,,,,28,43,,43,,50,,,,,,50,,28,,28,,34,,,50,23,,,,,,,,,,,,,23,,43,27',
',,27,50,28,,,,,,,27,,,23,,55,34,23,28,55,23,28,,27,27,,,,,,,55,12,,',
',,,,28,,34,,55,,28,,,23,,,,,,,,,,,,,,,,,,,,34,,,,,28,27,28,,,,,,,,34',
',,,34,34,,,,34,,34,,,34,,,34,,,34,,,34,,,,,,50,34,34,,,,,,,,50,,,,55',
',,28,,28,,,,,,34,,,28,,,28,,,,12,,12,,34,34,,34,34,,,,55,,56,,,56,28',
'55,55,,,,,50,56,55,,12,,23,,,,23,,,28,56,56,28,,34,12,56,,23,,28,,28',
',,,,,,,23,34,,,,,12,,,,,34,12,,,,,,27,,,,,,,,,,,,50,56,,,,55,,55,,27',
'12,,12,,,,34,27,,,,,,27,,27,,27,,,,,,,55,,,55,,,,,,,,,50,,,55,,50,55',
'23,,,34,,,,,34,,,,,12,,,,55,,,,,,55,12,,,12,,,,,,23,27,,,,,,,,,,,,,27',
'23,12,,55,,55,,,,,,,,,,,,27,,,,27,,,27,,,,,,,,12,,12,,,,,,55,,,,,,,34',
',,56,,27,,,,,,,55,,55,,,,,,23,,23,55,56,,55,,,,,,56,,,,,,56,,56,,56',
',,,,,55,23,,,,,,,,,,,,,,,23,,,23,55,27,,55,,,,,,27,,55,,55,,,,23,,,',
',,23,,,,,,,,,,,56,,,,,,,,,,,,,56,,,,23,,23,,,,,,,,,,,,56,,27,,56,,27',
'56,,,,,,,,,,,27,,,,,,,,,,,,27,,,,,56,,,,,,,23,,,,,,,,,,,23,,,23,,,,',
',,,,,,,,,,,,,,,,,23,,,,,,,,,,,,,,,,,,,,23,56,,23,,,,,,56,,23,,23,,27',
'27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,27,27,,,,,,,27,,,,56,,,,56',
',,,,,,,,,,,56,,,,,,,,,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,27',
',,,,,,,,,,,,,,,,,,,,,,,,,,27,,,27,,,,,,,,,,,,27,,,27,56,,,,,,,,,,,,',
',,,,27,,,,,,27,,,,,,,,,,56,,,,,,,56,56,,,,,,,56,,,27,,27,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,27,,27,,,,,,56,,56,27,,',
'27,,,,,,,,,,,,,,,,,,,,,,27,56,,,56,,,,,,,,,,,,56,,,56,27,,,27,,,,,,',
',27,,27,,,,56,,,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,56,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,56,,,,,,,,,,,,,,,,,,,56,,56,,,,,,,,,56,,,56,,',
',,,,,,,,,,,,,,,,,,,56,,,,,,,,,,,,,,,,,,,,56,,,56,,,,,,,,56,,56' ]
        racc_goto_check = arr = ::Array.new(2860, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   232,    13,   213,   nil,    13,    -2,    52,   -57,     4,
  -283,    94,  1125,  -465,  -595,  -659,   nil,   -13,   118,   -57,
  -332,   156,   -68,  1382,    91,  -295,  -509,  1723,   952,  -278,
   456,   211,  -155,    -5,  1105,    -3,   nil,   nil,    37,  -295,
    -1,  -311,  -328,   718,  -344,  -617,   nil,    77,     8,   -14,
  1156,   nil,    33,    47,  -209,  1219,  1886,  -360,  -124,    -6,
    17,   nil,   nil,    -6,     8,  -276,     8,    75,    13,  -200,
    28,   -50,  -357,  -172,  -345,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   126,   144,    -3,   nil,    47,  -295,
  -635,  -480,  -371,   144,  -298,   -72,  -422,   197,   185,  -179,
    97,  -560,    62,  -568,  -250,  -700,   103,  -535,  -122,  -527,
  -765,   108,  -318,  -135,  -330,  -662,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -755,    68,  -516,
  -751,  -500,   nil,    47,  -461,   145,   344,  -494,  -112,  -571,
   -35,   nil,  -561,  -722,  -797,  -774,  -225,  -488,    65,  -298,
   -32,  -151,  -513,   nil,   nil,   -56,  -468,   -53,  -464,  -785,
  -381,  -498,  -626,   nil,   nil,   176,   179,   114,   167,   164,
  -142,   -17,   182,   165,   176,  -428,  -202,  -200,   201,  -450,
  -334,   nil,  -122,  -542,  -686,  -536,  -671,   nil,  -674,  -768,
   nil,   nil,   -51,  -353 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    76,   nil,   366,    95,   377,   367,
   nil,   nil,   510,   nil,   827,   nil,   364,   nil,   nil,   nil,
    61,    65,    71,   229,   241,   nil,   nil,   232,   234,   nil,
   216,    21,   nil,   382,    39,    42,    47,    50,   nil,   631,
   nil,   nil,   nil,   123,   nil,   nil,   103,   544,     7,   nil,
   nil,    28,    34,    37,   nil,   223,   225,   442,   nil,   294,
   519,   190,   295,    87,    94,   nil,   104,   nil,   540,   nil,
   541,   565,   717,   417,   224,   350,    53,    58,    68,    73,
    77,    83,    90,    96,    99,   nil,   370,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   529,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   741,   615,   nil,
   745,   947,   792,   597,   nil,   607,   nil,   nil,   613,   nil,
   619,   650,   nil,   nil,   nil,   602,   nil,   nil,   nil,   681,
   nil,   nil,   nil,   569,   371,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,    18,    24,   nil,   nil,   nil,   nil,
   nil,   413,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   863,   612,   nil,   616,   617,   620,   788,   623,   595,   780,
   604,   610,   nil,   227 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 145, :_reduce_1,
  2, 143, :_reduce_2,
  2, 144, :_reduce_3,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 146, :_reduce_6,
  2, 146, :_reduce_none,
  1, 149, :_reduce_8,
  0, 153, :_reduce_9,
  5, 149, :_reduce_10,
  4, 152, :_reduce_11,
  2, 154, :_reduce_12,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  3, 158, :_reduce_15,
  2, 158, :_reduce_16,
  0, 174, :_reduce_17,
  4, 151, :_reduce_18,
  3, 151, :_reduce_19,
  3, 151, :_reduce_20,
  3, 151, :_reduce_21,
  2, 151, :_reduce_22,
  3, 151, :_reduce_23,
  3, 151, :_reduce_24,
  3, 151, :_reduce_25,
  3, 151, :_reduce_26,
  3, 151, :_reduce_27,
  4, 151, :_reduce_28,
  1, 151, :_reduce_none,
  3, 151, :_reduce_30,
  3, 151, :_reduce_31,
  6, 151, :_reduce_32,
  5, 151, :_reduce_33,
  5, 151, :_reduce_34,
  5, 151, :_reduce_35,
  5, 151, :_reduce_36,
  3, 151, :_reduce_37,
  3, 151, :_reduce_38,
  3, 151, :_reduce_39,
  3, 151, :_reduce_40,
  1, 151, :_reduce_none,
  3, 162, :_reduce_42,
  3, 162, :_reduce_43,
  1, 173, :_reduce_none,
  3, 173, :_reduce_45,
  3, 173, :_reduce_46,
  3, 173, :_reduce_47,
  2, 173, :_reduce_48,
  1, 173, :_reduce_none,
  1, 161, :_reduce_50,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 178, :_reduce_none,
  4, 178, :_reduce_54,
  0, 186, :_reduce_55,
  0, 187, :_reduce_56,
  6, 183, :_reduce_57,
  1, 185, :_reduce_58,
  2, 177, :_reduce_59,
  3, 177, :_reduce_60,
  4, 177, :_reduce_61,
  5, 177, :_reduce_62,
  4, 177, :_reduce_63,
  5, 177, :_reduce_64,
  2, 177, :_reduce_65,
  2, 177, :_reduce_66,
  2, 177, :_reduce_67,
  2, 177, :_reduce_68,
  2, 177, :_reduce_69,
  1, 163, :_reduce_none,
  3, 163, :_reduce_71,
  1, 191, :_reduce_none,
  3, 191, :_reduce_73,
  1, 190, :_reduce_74,
  2, 190, :_reduce_75,
  3, 190, :_reduce_76,
  5, 190, :_reduce_77,
  2, 190, :_reduce_78,
  4, 190, :_reduce_79,
  2, 190, :_reduce_80,
  4, 190, :_reduce_81,
  1, 190, :_reduce_82,
  3, 190, :_reduce_83,
  1, 194, :_reduce_none,
  3, 194, :_reduce_85,
  2, 193, :_reduce_86,
  3, 193, :_reduce_87,
  1, 196, :_reduce_88,
  3, 196, :_reduce_89,
  1, 195, :_reduce_90,
  1, 195, :_reduce_91,
  4, 195, :_reduce_92,
  3, 195, :_reduce_93,
  3, 195, :_reduce_94,
  3, 195, :_reduce_95,
  3, 195, :_reduce_96,
  2, 195, :_reduce_97,
  1, 195, :_reduce_98,
  1, 170, :_reduce_99,
  1, 170, :_reduce_100,
  4, 170, :_reduce_101,
  3, 170, :_reduce_102,
  3, 170, :_reduce_103,
  3, 170, :_reduce_104,
  3, 170, :_reduce_105,
  2, 170, :_reduce_106,
  1, 170, :_reduce_107,
  1, 199, :_reduce_108,
  1, 199, :_reduce_none,
  2, 200, :_reduce_110,
  1, 200, :_reduce_111,
  3, 200, :_reduce_112,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_116,
  1, 201, :_reduce_117,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 159, :_reduce_120,
  1, 159, :_reduce_none,
  1, 160, :_reduce_122,
  0, 207, :_reduce_123,
  4, 160, :_reduce_124,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  3, 176, :_reduce_197,
  5, 176, :_reduce_198,
  3, 176, :_reduce_199,
  5, 176, :_reduce_200,
  6, 176, :_reduce_201,
  5, 176, :_reduce_202,
  5, 176, :_reduce_203,
  5, 176, :_reduce_204,
  5, 176, :_reduce_205,
  4, 176, :_reduce_206,
  3, 176, :_reduce_207,
  3, 176, :_reduce_208,
  3, 176, :_reduce_209,
  3, 176, :_reduce_210,
  3, 176, :_reduce_211,
  3, 176, :_reduce_212,
  3, 176, :_reduce_213,
  3, 176, :_reduce_214,
  3, 176, :_reduce_215,
  4, 176, :_reduce_216,
  4, 176, :_reduce_217,
  2, 176, :_reduce_218,
  2, 176, :_reduce_219,
  3, 176, :_reduce_220,
  3, 176, :_reduce_221,
  3, 176, :_reduce_222,
  3, 176, :_reduce_223,
  3, 176, :_reduce_224,
  3, 176, :_reduce_225,
  3, 176, :_reduce_226,
  3, 176, :_reduce_227,
  3, 176, :_reduce_228,
  3, 176, :_reduce_229,
  3, 176, :_reduce_230,
  3, 176, :_reduce_231,
  3, 176, :_reduce_232,
  2, 176, :_reduce_233,
  2, 176, :_reduce_234,
  3, 176, :_reduce_235,
  3, 176, :_reduce_236,
  3, 176, :_reduce_237,
  3, 176, :_reduce_238,
  3, 176, :_reduce_239,
  6, 176, :_reduce_240,
  1, 176, :_reduce_none,
  1, 172, :_reduce_242,
  1, 209, :_reduce_none,
  2, 209, :_reduce_244,
  4, 209, :_reduce_245,
  2, 209, :_reduce_246,
  3, 213, :_reduce_247,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 167, :_reduce_250,
  1, 167, :_reduce_251,
  2, 167, :_reduce_252,
  4, 167, :_reduce_253,
  2, 167, :_reduce_254,
  1, 189, :_reduce_255,
  2, 189, :_reduce_256,
  2, 189, :_reduce_257,
  4, 189, :_reduce_258,
  1, 189, :_reduce_259,
  0, 217, :_reduce_260,
  2, 182, :_reduce_261,
  2, 216, :_reduce_262,
  2, 215, :_reduce_263,
  1, 215, :_reduce_none,
  1, 210, :_reduce_265,
  2, 210, :_reduce_266,
  3, 210, :_reduce_267,
  4, 210, :_reduce_268,
  3, 171, :_reduce_269,
  4, 171, :_reduce_270,
  2, 171, :_reduce_271,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_282,
  0, 240, :_reduce_283,
  4, 208, :_reduce_284,
  2, 208, :_reduce_285,
  0, 241, :_reduce_286,
  4, 208, :_reduce_287,
  3, 208, :_reduce_288,
  3, 208, :_reduce_289,
  2, 208, :_reduce_290,
  3, 208, :_reduce_291,
  3, 208, :_reduce_292,
  1, 208, :_reduce_293,
  4, 208, :_reduce_294,
  3, 208, :_reduce_295,
  1, 208, :_reduce_296,
  5, 208, :_reduce_297,
  4, 208, :_reduce_298,
  3, 208, :_reduce_299,
  2, 208, :_reduce_300,
  1, 208, :_reduce_none,
  2, 208, :_reduce_302,
  2, 208, :_reduce_303,
  6, 208, :_reduce_304,
  6, 208, :_reduce_305,
  0, 242, :_reduce_306,
  0, 243, :_reduce_307,
  7, 208, :_reduce_308,
  0, 244, :_reduce_309,
  0, 245, :_reduce_310,
  7, 208, :_reduce_311,
  5, 208, :_reduce_312,
  4, 208, :_reduce_313,
  0, 246, :_reduce_314,
  0, 247, :_reduce_315,
  9, 208, :_reduce_316,
  0, 248, :_reduce_317,
  0, 249, :_reduce_318,
  7, 208, :_reduce_319,
  0, 250, :_reduce_320,
  0, 251, :_reduce_321,
  0, 252, :_reduce_322,
  9, 208, :_reduce_323,
  0, 253, :_reduce_324,
  0, 254, :_reduce_325,
  6, 208, :_reduce_326,
  0, 255, :_reduce_327,
  6, 208, :_reduce_328,
  0, 256, :_reduce_329,
  0, 257, :_reduce_330,
  9, 208, :_reduce_331,
  1, 208, :_reduce_332,
  1, 208, :_reduce_333,
  1, 208, :_reduce_334,
  1, 208, :_reduce_335,
  1, 166, :_reduce_336,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 261, :_reduce_none,
  1, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  2, 231, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 232, :_reduce_none,
  5, 232, :_reduce_354,
  1, 156, :_reduce_none,
  2, 156, :_reduce_356,
  1, 235, :_reduce_none,
  1, 235, :_reduce_358,
  1, 269, :_reduce_none,
  3, 269, :_reduce_360,
  1, 272, :_reduce_361,
  3, 272, :_reduce_362,
  1, 271, :_reduce_363,
  4, 271, :_reduce_364,
  6, 271, :_reduce_365,
  3, 271, :_reduce_366,
  5, 271, :_reduce_367,
  2, 271, :_reduce_368,
  4, 271, :_reduce_369,
  1, 271, :_reduce_370,
  3, 271, :_reduce_371,
  4, 273, :_reduce_372,
  2, 273, :_reduce_373,
  2, 273, :_reduce_374,
  1, 273, :_reduce_375,
  2, 278, :_reduce_376,
  1, 278, :_reduce_none,
  6, 279, :_reduce_378,
  8, 279, :_reduce_379,
  4, 279, :_reduce_380,
  6, 279, :_reduce_381,
  4, 279, :_reduce_382,
  2, 279, :_reduce_383,
  6, 279, :_reduce_384,
  2, 279, :_reduce_385,
  4, 279, :_reduce_386,
  6, 279, :_reduce_387,
  2, 279, :_reduce_388,
  4, 279, :_reduce_389,
  2, 279, :_reduce_390,
  4, 279, :_reduce_391,
  1, 279, :_reduce_392,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  3, 283, :_reduce_395,
  1, 283, :_reduce_396,
  4, 283, :_reduce_397,
  1, 284, :_reduce_none,
  4, 284, :_reduce_399,
  1, 285, :_reduce_400,
  3, 285, :_reduce_401,
  1, 286, :_reduce_402,
  1, 286, :_reduce_none,
  0, 290, :_reduce_404,
  3, 230, :_reduce_405,
  4, 288, :_reduce_406,
  1, 288, :_reduce_407,
  3, 289, :_reduce_408,
  3, 289, :_reduce_409,
  0, 293, :_reduce_410,
  0, 294, :_reduce_411,
  6, 292, :_reduce_412,
  2, 179, :_reduce_413,
  4, 179, :_reduce_414,
  5, 179, :_reduce_415,
  5, 179, :_reduce_416,
  0, 296, :_reduce_417,
  3, 229, :_reduce_418,
  4, 229, :_reduce_419,
  4, 229, :_reduce_420,
  3, 229, :_reduce_421,
  3, 229, :_reduce_422,
  3, 229, :_reduce_423,
  2, 229, :_reduce_424,
  1, 229, :_reduce_425,
  4, 229, :_reduce_426,
  0, 297, :_reduce_427,
  0, 298, :_reduce_428,
  6, 228, :_reduce_429,
  0, 299, :_reduce_430,
  0, 300, :_reduce_431,
  6, 228, :_reduce_432,
  0, 302, :_reduce_433,
  6, 234, :_reduce_434,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  6, 155, :_reduce_437,
  0, 155, :_reduce_438,
  1, 303, :_reduce_439,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  2, 304, :_reduce_442,
  1, 304, :_reduce_none,
  2, 157, :_reduce_444,
  1, 157, :_reduce_none,
  1, 218, :_reduce_446,
  1, 218, :_reduce_447,
  1, 218, :_reduce_none,
  1, 219, :_reduce_449,
  1, 306, :_reduce_450,
  1, 306, :_reduce_none,
  2, 306, :_reduce_452,
  3, 307, :_reduce_453,
  1, 307, :_reduce_454,
  3, 220, :_reduce_455,
  3, 221, :_reduce_456,
  3, 222, :_reduce_457,
  3, 222, :_reduce_458,
  1, 311, :_reduce_459,
  3, 311, :_reduce_460,
  1, 312, :_reduce_none,
  2, 312, :_reduce_462,
  3, 224, :_reduce_463,
  3, 224, :_reduce_464,
  1, 314, :_reduce_465,
  3, 314, :_reduce_466,
  3, 223, :_reduce_467,
  3, 223, :_reduce_468,
  3, 225, :_reduce_469,
  3, 225, :_reduce_470,
  1, 315, :_reduce_471,
  3, 315, :_reduce_472,
  1, 316, :_reduce_473,
  3, 316, :_reduce_474,
  1, 308, :_reduce_475,
  2, 308, :_reduce_476,
  1, 309, :_reduce_477,
  2, 309, :_reduce_478,
  1, 310, :_reduce_479,
  2, 310, :_reduce_480,
  1, 313, :_reduce_481,
  0, 318, :_reduce_482,
  3, 313, :_reduce_483,
  0, 319, :_reduce_484,
  4, 313, :_reduce_485,
  1, 317, :_reduce_486,
  1, 317, :_reduce_487,
  1, 317, :_reduce_488,
  1, 317, :_reduce_none,
  2, 205, :_reduce_490,
  1, 205, :_reduce_491,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  3, 206, :_reduce_496,
  1, 305, :_reduce_none,
  1, 305, :_reduce_none,
  2, 305, :_reduce_499,
  2, 305, :_reduce_500,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 198, :_reduce_506,
  1, 198, :_reduce_507,
  1, 198, :_reduce_508,
  1, 198, :_reduce_509,
  1, 198, :_reduce_510,
  1, 198, :_reduce_511,
  1, 198, :_reduce_512,
  1, 226, :_reduce_513,
  1, 226, :_reduce_514,
  1, 165, :_reduce_515,
  1, 165, :_reduce_516,
  1, 169, :_reduce_517,
  1, 169, :_reduce_518,
  1, 236, :_reduce_519,
  0, 321, :_reduce_520,
  4, 236, :_reduce_521,
  2, 236, :_reduce_522,
  3, 238, :_reduce_523,
  2, 238, :_reduce_524,
  4, 322, :_reduce_525,
  2, 322, :_reduce_526,
  2, 322, :_reduce_527,
  1, 322, :_reduce_none,
  2, 324, :_reduce_529,
  0, 324, :_reduce_530,
  6, 291, :_reduce_531,
  8, 291, :_reduce_532,
  4, 291, :_reduce_533,
  6, 291, :_reduce_534,
  4, 291, :_reduce_535,
  6, 291, :_reduce_536,
  2, 291, :_reduce_537,
  4, 291, :_reduce_538,
  6, 291, :_reduce_539,
  2, 291, :_reduce_540,
  4, 291, :_reduce_541,
  2, 291, :_reduce_542,
  4, 291, :_reduce_543,
  1, 291, :_reduce_544,
  0, 291, :_reduce_545,
  1, 287, :_reduce_546,
  1, 287, :_reduce_547,
  1, 287, :_reduce_548,
  1, 287, :_reduce_549,
  1, 270, :_reduce_none,
  1, 270, :_reduce_551,
  1, 326, :_reduce_none,
  3, 326, :_reduce_553,
  1, 280, :_reduce_554,
  3, 280, :_reduce_555,
  2, 327, :_reduce_556,
  2, 328, :_reduce_557,
  1, 274, :_reduce_none,
  3, 274, :_reduce_559,
  1, 323, :_reduce_none,
  3, 323, :_reduce_561,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 275, :_reduce_564,
  1, 275, :_reduce_565,
  3, 330, :_reduce_566,
  3, 331, :_reduce_567,
  1, 281, :_reduce_568,
  3, 281, :_reduce_569,
  1, 325, :_reduce_570,
  3, 325, :_reduce_571,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  2, 282, :_reduce_574,
  1, 282, :_reduce_575,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  2, 277, :_reduce_578,
  2, 276, :_reduce_579,
  0, 276, :_reduce_580,
  1, 239, :_reduce_none,
  0, 334, :_reduce_582,
  4, 239, :_reduce_583,
  1, 227, :_reduce_584,
  2, 227, :_reduce_585,
  1, 212, :_reduce_none,
  3, 212, :_reduce_587,
  3, 335, :_reduce_588,
  2, 335, :_reduce_589,
  2, 335, :_reduce_590,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 295, :_reduce_none,
  1, 295, :_reduce_none,
  1, 295, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  0, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 175, :_reduce_none,
  1, 175, :_reduce_none,
  2, 192, :_reduce_none,
  2, 168, :_reduce_none,
  0, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 237, :_reduce_612,
  1, 237, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_615,
  0, 148, :_reduce_616 ]

racc_reduce_n = 617

racc_shift_n = 1047

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tEQL => 140,
  :tLOWEST => 141 }

racc_nt_base = 142

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_56(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_60(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

def _reduce_197(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_198(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_201(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_205(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_206(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_207(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_208(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_209(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                      debug20 12, val, result
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_235(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      lexer.tern.pop
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_255(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_260(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_261(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 264 omitted

def _reduce_265(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_267(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

def _reduce_282(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_283(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_284(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_285(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_286(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_299(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_300(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_303(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_case val[1], val[3]
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_case nil, val[2]
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_316(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_318(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_319(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_323(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_324(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_325(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_326(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_327(val, _values, result)
                      result = [lexer.lineno, self.in_def]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      line, in_def = val[2]

                      result = new_defn val
                      result[2].line line

                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_330(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_331(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_363(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_371(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = args val
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

# reduce 393 omitted

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = 0
                      self.lexer.command_start = true
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

# reduce 398 omitted

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 403 omitted

def _reduce_404(val, _values, result)
                      # TODO: dyna_push ? hrm
                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_405(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      args = 0 if args == s(:args)

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_411(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_412(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_413(val, _values, result)
                      # TODO:
                      # if (nd_type($1) == NODE_YIELD) {
                      #     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_414(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_415(val, _values, result)
                      debug20 21, val, result
                    
    result
end

def _reduce_416(val, _values, result)
                      debug20 22, val, result
                    
    result
end

def _reduce_417(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_418(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_427(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_428(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_429(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_430(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_431(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_432(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 435 omitted

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_438(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_439(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 440 omitted

# reduce 441 omitted

def _reduce_442(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_450(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_457(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_460(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0].dup << word
                    
    result
end

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_466(val, _values, result)
                      list, sym, _ = val

                      case sym[0]
                      when :dstr then
                        sym[0] = :dsym
                      when :str then
                        sym = s(:lit, sym.last.to_sym)
                      else
                        debug20 24
                        sym = s(:dsym, "", result)
                      end

                      result = list.dup << sym
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[0].dup << s(:str, val[1])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].dup << s(:lit, val[1].to_sym)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_476(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_478(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_480(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_483(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [lexer.lex_strterm, lexer.brace_nest, lexer.string_nest]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.cond.push false
                      lexer.cmdarg.push false

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_485(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_DEND
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_486(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 489 omitted

def _reduce_490(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_491(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

def _reduce_496(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 497 omitted

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_500(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

def _reduce_506(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_507(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_508(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_509(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_510(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:lit, lexer.src.current_line) 
    result
end

def _reduce_512(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_513(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_514(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_515(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_516(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_517(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_518(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_519(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_520(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_522(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_524(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                      result = val[0]
                    
    result
end

def _reduce_525(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_526(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

# reduce 528 omitted

def _reduce_529(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_530(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_531(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_547(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_554(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_555(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_556(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      result = s(:array, s(:kwarg, label.to_sym, val[1]))
                    
    result
end

def _reduce_557(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      result = s(:array, s(:kwarg, label.to_sym, val[1]))
                    
    result
end

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      debug20 35, val, result
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      result = args val
                    
    result
end

# reduce 562 omitted

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_565(val, _values, result)
                      debug20 36, val, result
                    
    result
end

def _reduce_566(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_567(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_568(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_569(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_570(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 572 omitted

# reduce 573 omitted

def _reduce_574(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_575(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 576 omitted

# reduce 577 omitted

def _reduce_578(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_579(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_580(val, _values, result)
                      result = nil
                    
    result
end

# reduce 581 omitted

def _reduce_582(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_583(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_584(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_585(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_588(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_590(val, _values, result)
                      result = s(:kwsplat, val[1])
                    
    result
end

# reduce 591 omitted

# reduce 592 omitted

# reduce 593 omitted

# reduce 594 omitted

# reduce 595 omitted

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

def _reduce_612(val, _values, result)
 yyerrok 
    result
end

# reduce 613 omitted

# reduce 614 omitted

def _reduce_615(val, _values, result)
 yyerrok 
    result
end

def _reduce_616(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
