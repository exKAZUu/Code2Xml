using Code2Xml.Core.Antlr;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 cs.g 2012-03-28 18:56:27

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class csParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "COMMENT", "Character_literal", "DECIMAL_DIGIT", "DEFINE", "DEFINE_TOKEN", "DOC_LINE_COMMENT", "DOT", "Decimal_digits", "Decimal_integer_literal", "ELIF", "ELSE_TOKEN", "ENDIF", "ENDIF_TOKEN", "ENUM", "EscapeSequence", "Exponent_part", "FALSE", "GT", "GooBall", "GooBallIdentifier", "HEX_DIGIT", "HEX_DIGITS", "Hex_number", "IDENTIFIER", "IF", "IF_TOKEN", "INTEGER_TYPE_SUFFIX", "IdentifierPart", "IdentifierStart", "LINE_COMMENT", "MINUS", "NULL", "NUMBER", "PP_AND_EXPRESSION", "PP_CONDITIONAL", "PP_EQUALITY_EXPRESSION", "PP_EXPRESSION", "PP_OR_EXPRESSION", "PP_PRIMARY_EXPRESSION", "PP_UNARY_EXPRESSION", "PREPROCESSOR_DIRECTIVE", "PTR", "Pragma", "RPAREN", "Real_literal", "Real_type_suffix", "SEMI", "STRINGLITERAL", "Sign", "TRUE", "TS", "UNDEF", "UNDEF_TOKEN", "USING", "Verbatim_string_literal", "Verbatim_string_literal_character", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'--'", "'-='", "'/'", "'/='", "':'", "'::'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>='", "'?'", "'??'", "'['", "']'", "'^'", "'^='", "'__arglist'", "'abstract'", "'add'", "'alias'", "'as'", "'ascending'", "'assembly'", "'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", "'char'", "'checked'", "'class'", "'const'", "'continue'", "'decimal'", "'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", "'else'", "'equals'", "'event'", "'explicit'", "'extern'", "'field'", "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", "'goto'", "'group'", "'implicit'", "'in'", "'int'", "'interface'", "'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", "'method'", "'module'", "'namespace'", "'new'", "'object'", "'on'", "'operator'", "'orderby'", "'out'", "'override'", "'param'", "'params'", "'partial'", "'pragma'", "'private'", "'property'", "'protected'", "'public'", "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", "'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", "'try'", "'type'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unsafe'", "'ushort'", "'var'", "'virtual'", "'void'", "'volatile'", "'where'", "'while'", "'yield'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int T__187=187;
	public const int T__188=188;
	public const int T__189=189;
	public const int T__190=190;
	public const int T__191=191;
	public const int T__192=192;
	public const int T__193=193;
	public const int T__194=194;
	public const int T__195=195;
	public const int T__196=196;
	public const int T__197=197;
	public const int T__198=198;
	public const int T__199=199;
	public const int T__200=200;
	public const int T__201=201;
	public const int T__202=202;
	public const int COMMENT=4;
	public const int Character_literal=5;
	public const int DECIMAL_DIGIT=6;
	public const int DEFINE=7;
	public const int DEFINE_TOKEN=8;
	public const int DOC_LINE_COMMENT=9;
	public const int DOT=10;
	public const int Decimal_digits=11;
	public const int Decimal_integer_literal=12;
	public const int ELIF=13;
	public const int ELSE_TOKEN=14;
	public const int ENDIF=15;
	public const int ENDIF_TOKEN=16;
	public const int ENUM=17;
	public const int EscapeSequence=18;
	public const int Exponent_part=19;
	public const int FALSE=20;
	public const int GT=21;
	public const int GooBall=22;
	public const int GooBallIdentifier=23;
	public const int HEX_DIGIT=24;
	public const int HEX_DIGITS=25;
	public const int Hex_number=26;
	public const int IDENTIFIER=27;
	public const int IF=28;
	public const int IF_TOKEN=29;
	public const int INTEGER_TYPE_SUFFIX=30;
	public const int IdentifierPart=31;
	public const int IdentifierStart=32;
	public const int LINE_COMMENT=33;
	public const int MINUS=34;
	public const int NULL=35;
	public const int NUMBER=36;
	public const int PP_AND_EXPRESSION=37;
	public const int PP_CONDITIONAL=38;
	public const int PP_EQUALITY_EXPRESSION=39;
	public const int PP_EXPRESSION=40;
	public const int PP_OR_EXPRESSION=41;
	public const int PP_PRIMARY_EXPRESSION=42;
	public const int PP_UNARY_EXPRESSION=43;
	public const int PREPROCESSOR_DIRECTIVE=44;
	public const int PTR=45;
	public const int Pragma=46;
	public const int RPAREN=47;
	public const int Real_literal=48;
	public const int Real_type_suffix=49;
	public const int SEMI=50;
	public const int STRINGLITERAL=51;
	public const int Sign=52;
	public const int TRUE=53;
	public const int TS=54;
	public const int UNDEF=55;
	public const int UNDEF_TOKEN=56;
	public const int USING=57;
	public const int Verbatim_string_literal=58;
	public const int Verbatim_string_literal_character=59;
	public const int WS=60;

	public csParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public csParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[356+1];


		XmlTreeAdaptor treeAdaptor = default(XmlTreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor);

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return csParser.tokenNames; } }
	public override string GrammarFileName { get { return "cs.g"; } }


		protected bool is_class_modifier() 
		{
			return false;
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compilation_unit();
	partial void LeaveRule_compilation_unit();

	// $ANTLR start "compilation_unit"
	// cs.g:32:8: public compilation_unit : namespace_body[true] ;
	[GrammarRule("compilation_unit")]
	public XAstParserRuleReturnScope compilation_unit()
	{
		EnterRule_compilation_unit();
		EnterRule("compilation_unit", 1);
		var retval = new XAstParserRuleReturnScope("compilation_unit");
		
		retval.Start = (IToken)input.LT(1);
		int compilation_unit_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope namespace_body1 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "compilation_unit");
		DebugLocation(32, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// cs.g:32:24: ( namespace_body[true] )
			DebugEnterAlt(1);
			// cs.g:33:2: namespace_body[true]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(33, 2);
			PushFollow(Follow._namespace_body_in_compilation_unit72);
			namespace_body1=namespace_body(true);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_body1.Tree, namespace_body1, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compilation_unit", 1);
			LeaveRule("compilation_unit", 1);
			LeaveRule_compilation_unit();
			if (state.backtracking > 0) { Memoize(input, 1, compilation_unit_StartIndex); }

		}
		DebugLocation(33, 21);
		} finally { DebugExitRule(GrammarFileName, "compilation_unit"); }
		return retval;

	}
	// $ANTLR end "compilation_unit"

	partial void EnterRule_namespace_declaration();
	partial void LeaveRule_namespace_declaration();

	// $ANTLR start "namespace_declaration"
	// cs.g:35:8: public namespace_declaration : 'namespace' qualified_identifier namespace_block ( ';' )? ;
	[GrammarRule("namespace_declaration")]
	public XAstParserRuleReturnScope namespace_declaration()
	{
		EnterRule_namespace_declaration();
		EnterRule("namespace_declaration", 2);
		var retval = new XAstParserRuleReturnScope("namespace_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal2 = default(IToken);
		IToken char_literal5 = default(IToken);
		XAstParserRuleReturnScope qualified_identifier3 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope namespace_block4 = default(XAstParserRuleReturnScope);

		object string_literal2_tree = default(object);
		object char_literal5_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespace_declaration");
		DebugLocation(35, 61);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// cs.g:35:29: ( 'namespace' qualified_identifier namespace_block ( ';' )? )
			DebugEnterAlt(1);
			// cs.g:36:2: 'namespace' qualified_identifier namespace_block ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(36, 2);
			string_literal2=(IToken)Match(input,149,Follow._149_in_namespace_declaration83); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal2_tree = (object)adaptor.Create(string_literal2, retval);
			adaptor.AddChild(root_0, string_literal2_tree);
			}
			DebugLocation(36, 16);
			PushFollow(Follow._qualified_identifier_in_namespace_declaration87);
			qualified_identifier3=qualified_identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualified_identifier3.Tree, qualified_identifier3, retval);
			DebugLocation(36, 39);
			PushFollow(Follow._namespace_block_in_namespace_declaration91);
			namespace_block4=namespace_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_block4.Tree, namespace_block4, retval);
			DebugLocation(36, 57);
			// cs.g:36:57: ( ';' )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0==SEMI))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:36:57: ';'
				{
				DebugLocation(36, 57);
				char_literal5=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_namespace_declaration95), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal5_tree = (object)adaptor.Create(char_literal5, retval);
				adaptor.AddChild(root_0, char_literal5_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_declaration", 2);
			LeaveRule("namespace_declaration", 2);
			LeaveRule_namespace_declaration();
			if (state.backtracking > 0) { Memoize(input, 2, namespace_declaration_StartIndex); }

		}
		DebugLocation(36, 61);
		} finally { DebugExitRule(GrammarFileName, "namespace_declaration"); }
		return retval;

	}
	// $ANTLR end "namespace_declaration"

	partial void EnterRule_namespace_block();
	partial void LeaveRule_namespace_block();

	// $ANTLR start "namespace_block"
	// cs.g:37:8: public namespace_block : '{' namespace_body[false] '}' ;
	[GrammarRule("namespace_block")]
	public XAstParserRuleReturnScope namespace_block()
	{
		EnterRule_namespace_block();
		EnterRule("namespace_block", 3);
		var retval = new XAstParserRuleReturnScope("namespace_block");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_block_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal6 = default(IToken);
		IToken char_literal8 = default(IToken);
		XAstParserRuleReturnScope namespace_body7 = default(XAstParserRuleReturnScope);

		object char_literal6_tree = default(object);
		object char_literal8_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespace_block");
		DebugLocation(37, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// cs.g:37:23: ( '{' namespace_body[false] '}' )
			DebugEnterAlt(1);
			// cs.g:38:2: '{' namespace_body[false] '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(38, 2);
			char_literal6=(IToken)Match(input,197,Follow._197_in_namespace_block106); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal6_tree = (object)adaptor.Create(char_literal6, retval);
			adaptor.AddChild(root_0, char_literal6_tree);
			}
			DebugLocation(38, 8);
			PushFollow(Follow._namespace_body_in_namespace_block110);
			namespace_body7=namespace_body(false);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_body7.Tree, namespace_body7, retval);
			DebugLocation(38, 32);
			char_literal8=(IToken)Match(input,201,Follow._201_in_namespace_block115); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal8_tree = (object)adaptor.Create(char_literal8, retval);
			adaptor.AddChild(root_0, char_literal8_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_block", 3);
			LeaveRule("namespace_block", 3);
			LeaveRule_namespace_block();
			if (state.backtracking > 0) { Memoize(input, 3, namespace_block_StartIndex); }

		}
		DebugLocation(38, 35);
		} finally { DebugExitRule(GrammarFileName, "namespace_block"); }
		return retval;

	}
	// $ANTLR end "namespace_block"

	partial void EnterRule_namespace_body();
	partial void LeaveRule_namespace_body();

	// $ANTLR start "namespace_body"
	// cs.g:39:1: namespace_body[bool bGlobal] : ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? ;
	[GrammarRule("namespace_body")]
	public XAstParserRuleReturnScope namespace_body(bool bGlobal)
	{
		EnterRule_namespace_body();
		EnterRule("namespace_body", 4);
		var retval = new XAstParserRuleReturnScope("namespace_body");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope extern_alias_directives9 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope using_directives10 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope global_attributes11 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope namespace_member_declarations12 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "namespace_body");
		DebugLocation(39, 100);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// cs.g:39:29: ( ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? )
			DebugEnterAlt(1);
			// cs.g:40:2: ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(40, 2);
			// cs.g:40:2: ( extern_alias_directives )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==125))
			{
				int LA2_1 = input.LA(2);

				if ((LA2_1==98))
				{
					alt2 = 1;
				}
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:40:2: extern_alias_directives
				{
				DebugLocation(40, 2);
				PushFollow(Follow._extern_alias_directives_in_namespace_body124);
				extern_alias_directives9=extern_alias_directives();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, extern_alias_directives9.Tree, extern_alias_directives9, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(40, 29);
			// cs.g:40:29: ( using_directives )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==USING))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:40:29: using_directives
				{
				DebugLocation(40, 29);
				PushFollow(Follow._using_directives_in_namespace_body129);
				using_directives10=using_directives();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_directives10.Tree, using_directives10, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(40, 49);
			// cs.g:40:49: ( global_attributes )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==91))
			{
				int LA4_1 = input.LA(2);

				if ((LA4_1==101||LA4_1==148))
				{
					int LA4_3 = input.LA(3);

					if ((LA4_3==79))
					{
						alt4 = 1;
					}
				}
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:40:49: global_attributes
				{
				DebugLocation(40, 49);
				PushFollow(Follow._global_attributes_in_namespace_body134);
				global_attributes11=global_attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_attributes11.Tree, global_attributes11, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(40, 70);
			// cs.g:40:70: ( namespace_member_declarations )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==ENUM||LA5_0==91||LA5_0==96||LA5_0==111||LA5_0==116||LA5_0==125||(LA5_0>=139 && LA5_0<=140)||(LA5_0>=149 && LA5_0<=150)||LA5_0==156||LA5_0==159||LA5_0==161||(LA5_0>=163 && LA5_0<=165)||LA5_0==170||LA5_0==176||LA5_0==178||LA5_0==188||LA5_0==191||LA5_0==193))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:40:70: namespace_member_declarations
				{
				DebugLocation(40, 70);
				PushFollow(Follow._namespace_member_declarations_in_namespace_body139);
				namespace_member_declarations12=namespace_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_member_declarations12.Tree, namespace_member_declarations12, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_body", 4);
			LeaveRule("namespace_body", 4);
			LeaveRule_namespace_body();
			if (state.backtracking > 0) { Memoize(input, 4, namespace_body_StartIndex); }

		}
		DebugLocation(40, 100);
		} finally { DebugExitRule(GrammarFileName, "namespace_body"); }
		return retval;

	}
	// $ANTLR end "namespace_body"

	partial void EnterRule_extern_alias_directives();
	partial void LeaveRule_extern_alias_directives();

	// $ANTLR start "extern_alias_directives"
	// cs.g:41:8: public extern_alias_directives : ( extern_alias_directive )+ ;
	[GrammarRule("extern_alias_directives")]
	public XAstParserRuleReturnScope extern_alias_directives()
	{
		EnterRule_extern_alias_directives();
		EnterRule("extern_alias_directives", 5);
		var retval = new XAstParserRuleReturnScope("extern_alias_directives");
		
		retval.Start = (IToken)input.LT(1);
		int extern_alias_directives_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope extern_alias_directive13 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "extern_alias_directives");
		DebugLocation(41, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// cs.g:41:31: ( ( extern_alias_directive )+ )
			DebugEnterAlt(1);
			// cs.g:42:2: ( extern_alias_directive )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(42, 2);
			// cs.g:42:2: ( extern_alias_directive )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==125))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2==98))
					{
						alt6 = 1;
					}


				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:42:2: extern_alias_directive
					{
					DebugLocation(42, 2);
					PushFollow(Follow._extern_alias_directive_in_extern_alias_directives150);
					extern_alias_directive13=extern_alias_directive();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, extern_alias_directive13.Tree, extern_alias_directive13, retval);

					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("extern_alias_directives", 5);
			LeaveRule("extern_alias_directives", 5);
			LeaveRule_extern_alias_directives();
			if (state.backtracking > 0) { Memoize(input, 5, extern_alias_directives_StartIndex); }

		}
		DebugLocation(42, 25);
		} finally { DebugExitRule(GrammarFileName, "extern_alias_directives"); }
		return retval;

	}
	// $ANTLR end "extern_alias_directives"

	partial void EnterRule_extern_alias_directive();
	partial void LeaveRule_extern_alias_directive();

	// $ANTLR start "extern_alias_directive"
	// cs.g:43:8: public extern_alias_directive : 'extern' 'alias' identifier ';' ;
	[GrammarRule("extern_alias_directive")]
	public XAstParserRuleReturnScope extern_alias_directive()
	{
		EnterRule_extern_alias_directive();
		EnterRule("extern_alias_directive", 6);
		var retval = new XAstParserRuleReturnScope("extern_alias_directive");
		
		retval.Start = (IToken)input.LT(1);
		int extern_alias_directive_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal14 = default(IToken);
		IToken string_literal15 = default(IToken);
		IToken char_literal17 = default(IToken);
		XAstParserRuleReturnScope identifier16 = default(XAstParserRuleReturnScope);

		object string_literal14_tree = default(object);
		object string_literal15_tree = default(object);
		object char_literal17_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "extern_alias_directive");
		DebugLocation(43, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// cs.g:43:30: ( 'extern' 'alias' identifier ';' )
			DebugEnterAlt(1);
			// cs.g:44:2: 'extern' 'alias' identifier ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(44, 2);
			string_literal14=(IToken)Match(input,125,Follow._125_in_extern_alias_directive161); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal14_tree = (object)adaptor.Create(string_literal14, retval);
			adaptor.AddChild(root_0, string_literal14_tree);
			}
			DebugLocation(44, 13);
			string_literal15=(IToken)Match(input,98,Follow._98_in_extern_alias_directive165); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal15_tree = (object)adaptor.Create(string_literal15, retval);
			adaptor.AddChild(root_0, string_literal15_tree);
			}
			DebugLocation(44, 23);
			PushFollow(Follow._identifier_in_extern_alias_directive169);
			identifier16=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier16.Tree, identifier16, retval);
			DebugLocation(44, 35);
			char_literal17=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_extern_alias_directive172), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal17_tree = (object)adaptor.Create(char_literal17, retval);
			adaptor.AddChild(root_0, char_literal17_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("extern_alias_directive", 6);
			LeaveRule("extern_alias_directive", 6);
			LeaveRule_extern_alias_directive();
			if (state.backtracking > 0) { Memoize(input, 6, extern_alias_directive_StartIndex); }

		}
		DebugLocation(44, 38);
		} finally { DebugExitRule(GrammarFileName, "extern_alias_directive"); }
		return retval;

	}
	// $ANTLR end "extern_alias_directive"

	partial void EnterRule_using_directives();
	partial void LeaveRule_using_directives();

	// $ANTLR start "using_directives"
	// cs.g:45:8: public using_directives : ( using_directive )+ ;
	[GrammarRule("using_directives")]
	public XAstParserRuleReturnScope using_directives()
	{
		EnterRule_using_directives();
		EnterRule("using_directives", 7);
		var retval = new XAstParserRuleReturnScope("using_directives");
		
		retval.Start = (IToken)input.LT(1);
		int using_directives_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope using_directive18 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "using_directives");
		DebugLocation(45, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// cs.g:45:24: ( ( using_directive )+ )
			DebugEnterAlt(1);
			// cs.g:46:2: ( using_directive )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(46, 2);
			// cs.g:46:2: ( using_directive )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==USING))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:46:2: using_directive
					{
					DebugLocation(46, 2);
					PushFollow(Follow._using_directive_in_using_directives182);
					using_directive18=using_directive();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, using_directive18.Tree, using_directive18, retval);

					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_directives", 7);
			LeaveRule("using_directives", 7);
			LeaveRule_using_directives();
			if (state.backtracking > 0) { Memoize(input, 7, using_directives_StartIndex); }

		}
		DebugLocation(46, 18);
		} finally { DebugExitRule(GrammarFileName, "using_directives"); }
		return retval;

	}
	// $ANTLR end "using_directives"

	partial void EnterRule_using_directive();
	partial void LeaveRule_using_directive();

	// $ANTLR start "using_directive"
	// cs.g:47:8: public using_directive : ( using_alias_directive | using_namespace_directive ) ;
	[GrammarRule("using_directive")]
	public XAstParserRuleReturnScope using_directive()
	{
		EnterRule_using_directive();
		EnterRule("using_directive", 8);
		var retval = new XAstParserRuleReturnScope("using_directive");
		
		retval.Start = (IToken)input.LT(1);
		int using_directive_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope using_alias_directive19 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope using_namespace_directive20 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "using_directive");
		DebugLocation(47, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// cs.g:47:23: ( ( using_alias_directive | using_namespace_directive ) )
			DebugEnterAlt(1);
			// cs.g:48:2: ( using_alias_directive | using_namespace_directive )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(48, 2);
			// cs.g:48:2: ( using_alias_directive | using_namespace_directive )
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==USING))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==IDENTIFIER))
				{
					int LA8_2 = input.LA(3);

					if ((LA8_2==85))
					{
						alt8 = 1;
					}
					else if ((LA8_2==DOT||LA8_2==SEMI||(LA8_2>=80 && LA8_2<=81)))
					{
						alt8 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 8, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA8_1==DEFINE||LA8_1==ELIF||LA8_1==ENDIF||LA8_1==UNDEF||LA8_1==95||(LA8_1>=97 && LA8_1<=98)||(LA8_1>=100 && LA8_1<=101)||LA8_1==105||LA8_1==117||LA8_1==120||LA8_1==122||LA8_1==126||(LA8_1>=132 && LA8_1<=133)||LA8_1==135||LA8_1==141||(LA8_1>=143 && LA8_1<=144)||(LA8_1>=147 && LA8_1<=148)||LA8_1==152||LA8_1==154||LA8_1==157||LA8_1==160||LA8_1==162||LA8_1==167||(LA8_1>=171 && LA8_1<=172)||LA8_1==183||LA8_1==190||LA8_1==194||LA8_1==196))
				{
					int LA8_3 = input.LA(3);

					if ((LA8_3==85))
					{
						alt8 = 1;
					}
					else if ((LA8_3==DOT||LA8_3==SEMI||(LA8_3>=80 && LA8_3<=81)))
					{
						alt8 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 8, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:48:3: using_alias_directive
				{
				DebugLocation(48, 3);
				PushFollow(Follow._using_alias_directive_in_using_directive194);
				using_alias_directive19=using_alias_directive();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_alias_directive19.Tree, using_alias_directive19, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:49:4: using_namespace_directive
				{
				DebugLocation(49, 4);
				PushFollow(Follow._using_namespace_directive_in_using_directive199);
				using_namespace_directive20=using_namespace_directive();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_namespace_directive20.Tree, using_namespace_directive20, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_directive", 8);
			LeaveRule("using_directive", 8);
			LeaveRule_using_directive();
			if (state.backtracking > 0) { Memoize(input, 8, using_directive_StartIndex); }

		}
		DebugLocation(49, 30);
		} finally { DebugExitRule(GrammarFileName, "using_directive"); }
		return retval;

	}
	// $ANTLR end "using_directive"

	partial void EnterRule_using_alias_directive();
	partial void LeaveRule_using_alias_directive();

	// $ANTLR start "using_alias_directive"
	// cs.g:50:8: public using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
	[GrammarRule("using_alias_directive")]
	public XAstParserRuleReturnScope using_alias_directive()
	{
		EnterRule_using_alias_directive();
		EnterRule("using_alias_directive", 9);
		var retval = new XAstParserRuleReturnScope("using_alias_directive");
		
		retval.Start = (IToken)input.LT(1);
		int using_alias_directive_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal21 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken char_literal25 = default(IToken);
		XAstParserRuleReturnScope identifier22 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope namespace_or_type_name24 = default(XAstParserRuleReturnScope);

		object string_literal21_tree = default(object);
		object char_literal23_tree = default(object);
		object char_literal25_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "using_alias_directive");
		DebugLocation(50, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// cs.g:50:29: ( 'using' identifier '=' namespace_or_type_name ';' )
			DebugEnterAlt(1);
			// cs.g:51:2: 'using' identifier '=' namespace_or_type_name ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(51, 2);
			string_literal21=(IToken)new XToken((IToken)Match(input,USING,Follow._USING_in_using_alias_directive210), "USING"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal21_tree = (object)adaptor.Create(string_literal21, retval);
			adaptor.AddChild(root_0, string_literal21_tree);
			}
			DebugLocation(51, 12);
			PushFollow(Follow._identifier_in_using_alias_directive214);
			identifier22=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier22.Tree, identifier22, retval);
			DebugLocation(51, 25);
			char_literal23=(IToken)Match(input,85,Follow._85_in_using_alias_directive218); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal23_tree = (object)adaptor.Create(char_literal23, retval);
			adaptor.AddChild(root_0, char_literal23_tree);
			}
			DebugLocation(51, 31);
			PushFollow(Follow._namespace_or_type_name_in_using_alias_directive222);
			namespace_or_type_name24=namespace_or_type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_or_type_name24.Tree, namespace_or_type_name24, retval);
			DebugLocation(51, 56);
			char_literal25=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_using_alias_directive226), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal25_tree = (object)adaptor.Create(char_literal25, retval);
			adaptor.AddChild(root_0, char_literal25_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_alias_directive", 9);
			LeaveRule("using_alias_directive", 9);
			LeaveRule_using_alias_directive();
			if (state.backtracking > 0) { Memoize(input, 9, using_alias_directive_StartIndex); }

		}
		DebugLocation(51, 59);
		} finally { DebugExitRule(GrammarFileName, "using_alias_directive"); }
		return retval;

	}
	// $ANTLR end "using_alias_directive"

	partial void EnterRule_using_namespace_directive();
	partial void LeaveRule_using_namespace_directive();

	// $ANTLR start "using_namespace_directive"
	// cs.g:52:8: public using_namespace_directive : 'using' namespace_name ';' ;
	[GrammarRule("using_namespace_directive")]
	public XAstParserRuleReturnScope using_namespace_directive()
	{
		EnterRule_using_namespace_directive();
		EnterRule("using_namespace_directive", 10);
		var retval = new XAstParserRuleReturnScope("using_namespace_directive");
		
		retval.Start = (IToken)input.LT(1);
		int using_namespace_directive_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		XAstParserRuleReturnScope namespace_name27 = default(XAstParserRuleReturnScope);

		object string_literal26_tree = default(object);
		object char_literal28_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "using_namespace_directive");
		DebugLocation(52, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// cs.g:52:33: ( 'using' namespace_name ';' )
			DebugEnterAlt(1);
			// cs.g:53:2: 'using' namespace_name ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(53, 2);
			string_literal26=(IToken)new XToken((IToken)Match(input,USING,Follow._USING_in_using_namespace_directive236), "USING"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal26_tree = (object)adaptor.Create(string_literal26, retval);
			adaptor.AddChild(root_0, string_literal26_tree);
			}
			DebugLocation(53, 12);
			PushFollow(Follow._namespace_name_in_using_namespace_directive240);
			namespace_name27=namespace_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_name27.Tree, namespace_name27, retval);
			DebugLocation(53, 29);
			char_literal28=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_using_namespace_directive244), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal28_tree = (object)adaptor.Create(char_literal28, retval);
			adaptor.AddChild(root_0, char_literal28_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_namespace_directive", 10);
			LeaveRule("using_namespace_directive", 10);
			LeaveRule_using_namespace_directive();
			if (state.backtracking > 0) { Memoize(input, 10, using_namespace_directive_StartIndex); }

		}
		DebugLocation(53, 32);
		} finally { DebugExitRule(GrammarFileName, "using_namespace_directive"); }
		return retval;

	}
	// $ANTLR end "using_namespace_directive"

	partial void EnterRule_namespace_member_declarations();
	partial void LeaveRule_namespace_member_declarations();

	// $ANTLR start "namespace_member_declarations"
	// cs.g:54:8: public namespace_member_declarations : ( namespace_member_declaration )+ ;
	[GrammarRule("namespace_member_declarations")]
	public XAstParserRuleReturnScope namespace_member_declarations()
	{
		EnterRule_namespace_member_declarations();
		EnterRule("namespace_member_declarations", 11);
		var retval = new XAstParserRuleReturnScope("namespace_member_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_member_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope namespace_member_declaration29 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "namespace_member_declarations");
		DebugLocation(54, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// cs.g:54:37: ( ( namespace_member_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:55:2: ( namespace_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(55, 2);
			// cs.g:55:2: ( namespace_member_declaration )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==ENUM||LA9_0==91||LA9_0==96||LA9_0==111||LA9_0==116||LA9_0==125||(LA9_0>=139 && LA9_0<=140)||(LA9_0>=149 && LA9_0<=150)||LA9_0==156||LA9_0==159||LA9_0==161||(LA9_0>=163 && LA9_0<=165)||LA9_0==170||LA9_0==176||LA9_0==178||LA9_0==188||LA9_0==191||LA9_0==193))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:55:2: namespace_member_declaration
					{
					DebugLocation(55, 2);
					PushFollow(Follow._namespace_member_declaration_in_namespace_member_declarations254);
					namespace_member_declaration29=namespace_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_member_declaration29.Tree, namespace_member_declaration29, retval);

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_member_declarations", 11);
			LeaveRule("namespace_member_declarations", 11);
			LeaveRule_namespace_member_declarations();
			if (state.backtracking > 0) { Memoize(input, 11, namespace_member_declarations_StartIndex); }

		}
		DebugLocation(55, 31);
		} finally { DebugExitRule(GrammarFileName, "namespace_member_declarations"); }
		return retval;

	}
	// $ANTLR end "namespace_member_declarations"

	partial void EnterRule_namespace_member_declaration();
	partial void LeaveRule_namespace_member_declaration();

	// $ANTLR start "namespace_member_declaration"
	// cs.g:56:8: public namespace_member_declaration : ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration );
	[GrammarRule("namespace_member_declaration")]
	public XAstParserRuleReturnScope namespace_member_declaration()
	{
		EnterRule_namespace_member_declaration();
		EnterRule("namespace_member_declaration", 12);
		var retval = new XAstParserRuleReturnScope("namespace_member_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_member_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope namespace_declaration30 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes31 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope modifiers32 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_declaration33 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "namespace_member_declaration");
		DebugLocation(56, 47);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// cs.g:56:36: ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==149))
			{
				alt12 = 1;
			}
			else if ((LA12_0==ENUM||LA12_0==91||LA12_0==96||LA12_0==111||LA12_0==116||LA12_0==125||(LA12_0>=139 && LA12_0<=140)||LA12_0==150||LA12_0==156||LA12_0==159||LA12_0==161||(LA12_0>=163 && LA12_0<=165)||LA12_0==170||LA12_0==176||LA12_0==178||LA12_0==188||LA12_0==191||LA12_0==193))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:57:2: namespace_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(57, 2);
				PushFollow(Follow._namespace_declaration_in_namespace_member_declaration265);
				namespace_declaration30=namespace_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_declaration30.Tree, namespace_declaration30, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:58:4: ( attributes )? ( modifiers )? type_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(58, 4);
				// cs.g:58:4: ( attributes )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==91))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:58:4: attributes
					{
					DebugLocation(58, 4);
					PushFollow(Follow._attributes_in_namespace_member_declaration270);
					attributes31=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes31.Tree, attributes31, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(58, 18);
				// cs.g:58:18: ( modifiers )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==96||LA11_0==125||LA11_0==140||LA11_0==150||LA11_0==156||LA11_0==161||(LA11_0>=163 && LA11_0<=165)||LA11_0==170||LA11_0==176||LA11_0==188||LA11_0==191||LA11_0==193))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:58:18: modifiers
					{
					DebugLocation(58, 18);
					PushFollow(Follow._modifiers_in_namespace_member_declaration275);
					modifiers32=modifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers32.Tree, modifiers32, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(58, 31);
				PushFollow(Follow._type_declaration_in_namespace_member_declaration280);
				type_declaration33=type_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_declaration33.Tree, type_declaration33, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_member_declaration", 12);
			LeaveRule("namespace_member_declaration", 12);
			LeaveRule_namespace_member_declaration();
			if (state.backtracking > 0) { Memoize(input, 12, namespace_member_declaration_StartIndex); }

		}
		DebugLocation(58, 47);
		} finally { DebugExitRule(GrammarFileName, "namespace_member_declaration"); }
		return retval;

	}
	// $ANTLR end "namespace_member_declaration"

	partial void EnterRule_type_declaration();
	partial void LeaveRule_type_declaration();

	// $ANTLR start "type_declaration"
	// cs.g:59:8: public type_declaration : ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );
	[GrammarRule("type_declaration")]
	public XAstParserRuleReturnScope type_declaration()
	{
		EnterRule_type_declaration();
		EnterRule("type_declaration", 13);
		var retval = new XAstParserRuleReturnScope("type_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int type_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal34 = default(IToken);
		XAstParserRuleReturnScope class_declaration35 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration36 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration37 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_declaration38 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration39 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration40 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_declaration41 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope delegate_declaration42 = default(XAstParserRuleReturnScope);

		object string_literal34_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_declaration");
		DebugLocation(59, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// cs.g:59:24: ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration )
			int alt14=6;
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==159) && (EvaluatePredicate(synpred1_cs_fragment)))
			{
				alt14 = 1;
			}
			else if ((LA14_0==111))
			{
				alt14 = 2;
			}
			else if ((LA14_0==178))
			{
				alt14 = 3;
			}
			else if ((LA14_0==139))
			{
				alt14 = 4;
			}
			else if ((LA14_0==ENUM))
			{
				alt14 = 5;
			}
			else if ((LA14_0==116))
			{
				alt14 = 6;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:60:2: ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(60, 17);
				string_literal34=(IToken)Match(input,159,Follow._159_in_type_declaration296); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal34_tree = (object)adaptor.Create(string_literal34, retval);
				adaptor.AddChild(root_0, string_literal34_tree);
				}
				DebugLocation(60, 29);
				// cs.g:60:29: ( class_declaration | struct_declaration | interface_declaration )
				int alt13=3;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case 111:
					{
					alt13 = 1;
					}
					break;
				case 178:
					{
					alt13 = 2;
					}
					break;
				case 139:
					{
					alt13 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:60:30: class_declaration
					{
					DebugLocation(60, 30);
					PushFollow(Follow._class_declaration_in_type_declaration301);
					class_declaration35=class_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration35.Tree, class_declaration35, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:61:11: struct_declaration
					{
					DebugLocation(61, 11);
					PushFollow(Follow._struct_declaration_in_type_declaration313);
					struct_declaration36=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration36.Tree, struct_declaration36, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:62:11: interface_declaration
					{
					DebugLocation(62, 11);
					PushFollow(Follow._interface_declaration_in_type_declaration325);
					interface_declaration37=interface_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration37.Tree, interface_declaration37, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:63:4: class_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(63, 4);
				PushFollow(Follow._class_declaration_in_type_declaration331);
				class_declaration38=class_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration38.Tree, class_declaration38, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:64:4: struct_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(64, 4);
				PushFollow(Follow._struct_declaration_in_type_declaration336);
				struct_declaration39=struct_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration39.Tree, struct_declaration39, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:65:4: interface_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(65, 4);
				PushFollow(Follow._interface_declaration_in_type_declaration341);
				interface_declaration40=interface_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration40.Tree, interface_declaration40, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:66:4: enum_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(66, 4);
				PushFollow(Follow._enum_declaration_in_type_declaration346);
				enum_declaration41=enum_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_declaration41.Tree, enum_declaration41, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:67:4: delegate_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(67, 4);
				PushFollow(Follow._delegate_declaration_in_type_declaration351);
				delegate_declaration42=delegate_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration42.Tree, delegate_declaration42, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_declaration", 13);
			LeaveRule("type_declaration", 13);
			LeaveRule_type_declaration();
			if (state.backtracking > 0) { Memoize(input, 13, type_declaration_StartIndex); }

		}
		DebugLocation(67, 24);
		} finally { DebugExitRule(GrammarFileName, "type_declaration"); }
		return retval;

	}
	// $ANTLR end "type_declaration"

	partial void EnterRule_qualified_identifier();
	partial void LeaveRule_qualified_identifier();

	// $ANTLR start "qualified_identifier"
	// cs.g:69:8: public qualified_identifier : identifier ( '.' identifier )* ;
	[GrammarRule("qualified_identifier")]
	public XAstParserRuleReturnScope qualified_identifier()
	{
		EnterRule_qualified_identifier();
		EnterRule("qualified_identifier", 14);
		var retval = new XAstParserRuleReturnScope("qualified_identifier");
		
		retval.Start = (IToken)input.LT(1);
		int qualified_identifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal44 = default(IToken);
		XAstParserRuleReturnScope identifier43 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier45 = default(XAstParserRuleReturnScope);

		object char_literal44_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualified_identifier");
		DebugLocation(69, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// cs.g:69:28: ( identifier ( '.' identifier )* )
			DebugEnterAlt(1);
			// cs.g:70:2: identifier ( '.' identifier )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(70, 2);
			PushFollow(Follow._identifier_in_qualified_identifier362);
			identifier43=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier43.Tree, identifier43, retval);
			DebugLocation(70, 13);
			// cs.g:70:13: ( '.' identifier )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==DOT))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:70:14: '.' identifier
					{
					DebugLocation(70, 14);
					char_literal44=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_qualified_identifier365), "DOT"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal44_tree = (object)adaptor.Create(char_literal44, retval);
					adaptor.AddChild(root_0, char_literal44_tree);
					}
					DebugLocation(70, 18);
					PushFollow(Follow._identifier_in_qualified_identifier367);
					identifier45=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier45.Tree, identifier45, retval);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualified_identifier", 14);
			LeaveRule("qualified_identifier", 14);
			LeaveRule_qualified_identifier();
			if (state.backtracking > 0) { Memoize(input, 14, qualified_identifier_StartIndex); }

		}
		DebugLocation(70, 30);
		} finally { DebugExitRule(GrammarFileName, "qualified_identifier"); }
		return retval;

	}
	// $ANTLR end "qualified_identifier"

	partial void EnterRule_namespace_name();
	partial void LeaveRule_namespace_name();

	// $ANTLR start "namespace_name"
	// cs.g:71:1: namespace_name : namespace_or_type_name ;
	[GrammarRule("namespace_name")]
	public XAstParserRuleReturnScope namespace_name()
	{
		EnterRule_namespace_name();
		EnterRule("namespace_name", 15);
		var retval = new XAstParserRuleReturnScope("namespace_name");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope namespace_or_type_name46 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "namespace_name");
		DebugLocation(71, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// cs.g:72:2: ( namespace_or_type_name )
			DebugEnterAlt(1);
			// cs.g:72:4: namespace_or_type_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(72, 4);
			PushFollow(Follow._namespace_or_type_name_in_namespace_name378);
			namespace_or_type_name46=namespace_or_type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_or_type_name46.Tree, namespace_or_type_name46, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_name", 15);
			LeaveRule("namespace_name", 15);
			LeaveRule_namespace_name();
			if (state.backtracking > 0) { Memoize(input, 15, namespace_name_StartIndex); }

		}
		DebugLocation(72, 26);
		} finally { DebugExitRule(GrammarFileName, "namespace_name"); }
		return retval;

	}
	// $ANTLR end "namespace_name"

	partial void EnterRule_modifiers();
	partial void LeaveRule_modifiers();

	// $ANTLR start "modifiers"
	// cs.g:74:8: public modifiers : ( modifier )+ ;
	[GrammarRule("modifiers")]
	public XAstParserRuleReturnScope modifiers()
	{
		EnterRule_modifiers();
		EnterRule("modifiers", 16);
		var retval = new XAstParserRuleReturnScope("modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope modifier47 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "modifiers");
		DebugLocation(74, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// cs.g:74:17: ( ( modifier )+ )
			DebugEnterAlt(1);
			// cs.g:75:2: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(75, 2);
			// cs.g:75:2: ( modifier )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==96||LA16_0==125||LA16_0==140||LA16_0==150||LA16_0==156||LA16_0==161||(LA16_0>=163 && LA16_0<=165)||LA16_0==170||LA16_0==176||LA16_0==188||LA16_0==191||LA16_0==193))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:75:2: modifier
					{
					DebugLocation(75, 2);
					PushFollow(Follow._modifier_in_modifiers389);
					modifier47=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier47.Tree, modifier47, retval);

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifiers", 16);
			LeaveRule("modifiers", 16);
			LeaveRule_modifiers();
			if (state.backtracking > 0) { Memoize(input, 16, modifiers_StartIndex); }

		}
		DebugLocation(75, 11);
		} finally { DebugExitRule(GrammarFileName, "modifiers"); }
		return retval;

	}
	// $ANTLR end "modifiers"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();

	// $ANTLR start "modifier"
	// cs.g:76:8: public modifier : ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' );
	[GrammarRule("modifier")]
	public XAstParserRuleReturnScope modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 17);
		var retval = new XAstParserRuleReturnScope("modifier");
		
		retval.Start = (IToken)input.LT(1);
		int modifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set48 = default(IToken);

		object set48_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(76, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// cs.g:76:16: ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(76, 16);

			set48=(IToken)input.LT(1);
			if (input.LA(1)==96||input.LA(1)==125||input.LA(1)==140||input.LA(1)==150||input.LA(1)==156||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=165)||input.LA(1)==170||input.LA(1)==176||input.LA(1)==188||input.LA(1)==191||input.LA(1)==193)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set48, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifier", 17);
			LeaveRule("modifier", 17);
			LeaveRule_modifier();
			if (state.backtracking > 0) { Memoize(input, 17, modifier_StartIndex); }

		}
		DebugLocation(78, 62);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return retval;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_class_member_declaration();
	partial void LeaveRule_class_member_declaration();

	// $ANTLR start "class_member_declaration"
	// cs.g:80:8: public class_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) ;
	[GrammarRule("class_member_declaration")]
	public XAstParserRuleReturnScope class_member_declaration()
	{
		EnterRule_class_member_declaration();
		EnterRule("class_member_declaration", 18);
		var retval = new XAstParserRuleReturnScope("class_member_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int class_member_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal50 = default(IToken);
		IToken char_literal53 = default(IToken);
		IToken string_literal55 = default(IToken);
		IToken string_literal56 = default(IToken);
		IToken string_literal62 = default(IToken);
		IToken char_literal68 = default(IToken);
		XAstParserRuleReturnScope m = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes49 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type51 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_declarators52 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope event_declaration54 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration57 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration58 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_declaration59 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration60 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration61 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration63 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type64 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration65 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope property_declaration66 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name67 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope indexer_declaration69 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope indexer_declaration70 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope field_declaration71 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope operator_declaration72 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_declaration73 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration74 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_declaration75 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope delegate_declaration76 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conversion_operator_declaration77 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_declaration78 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope destructor_declaration79 = default(XAstParserRuleReturnScope);

		object string_literal50_tree = default(object);
		object char_literal53_tree = default(object);
		object string_literal55_tree = default(object);
		object string_literal56_tree = default(object);
		object string_literal62_tree = default(object);
		object char_literal68_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "class_member_declaration");
		DebugLocation(80, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// cs.g:80:32: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) )
			DebugEnterAlt(1);
			// cs.g:81:2: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(81, 2);
			// cs.g:81:2: ( attributes )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==91))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:81:2: attributes
				{
				DebugLocation(81, 2);
				PushFollow(Follow._attributes_in_class_member_declaration465);
				attributes49=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes49.Tree, attributes49, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(82, 3);
			// cs.g:82:3: (m= modifiers )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==96||LA18_0==125||LA18_0==140||LA18_0==150||LA18_0==156||LA18_0==161||(LA18_0>=163 && LA18_0<=165)||LA18_0==170||LA18_0==176||LA18_0==188||LA18_0==191||LA18_0==193))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:82:3: m= modifiers
				{
				DebugLocation(82, 3);
				PushFollow(Follow._modifiers_in_class_member_declaration471);
				m=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, m.Tree, m, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(83, 2);
			// cs.g:83:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
			int alt21=13;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case 112:
				{
				alt21 = 1;
				}
				break;
			case 123:
				{
				alt21 = 2;
				}
				break;
			case 159:
				{
				alt21 = 3;
				}
				break;
			case 139:
				{
				alt21 = 4;
				}
				break;
			case 192:
				{
				int LA21_5 = input.LA(2);

				if ((LA21_5==Character_literal||LA21_5==DEFINE||LA21_5==ELIF||LA21_5==ENDIF||LA21_5==FALSE||(LA21_5>=Hex_number && LA21_5<=IDENTIFIER)||(LA21_5>=NULL && LA21_5<=NUMBER)||LA21_5==Real_literal||LA21_5==STRINGLITERAL||LA21_5==TRUE||LA21_5==UNDEF||LA21_5==Verbatim_string_literal||LA21_5==95||(LA21_5>=97 && LA21_5<=98)||(LA21_5>=100 && LA21_5<=101)||LA21_5==103||(LA21_5>=105 && LA21_5<=106)||LA21_5==109||LA21_5==114||LA21_5==117||(LA21_5>=119 && LA21_5<=120)||LA21_5==122||LA21_5==126||LA21_5==129||(LA21_5>=132 && LA21_5<=133)||LA21_5==135||LA21_5==138||LA21_5==141||(LA21_5>=143 && LA21_5<=144)||(LA21_5>=146 && LA21_5<=148)||(LA21_5>=151 && LA21_5<=152)||LA21_5==154||LA21_5==157||LA21_5==160||LA21_5==162||LA21_5==167||LA21_5==169||(LA21_5>=171 && LA21_5<=173)||LA21_5==177||LA21_5==183||(LA21_5>=185 && LA21_5<=186)||(LA21_5>=189 && LA21_5<=190)||LA21_5==194||LA21_5==196))
				{
					alt21 = 5;
				}
				else if ((LA21_5==69))
				{
					alt21 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt21 = 6;
				}
				break;
			case IDENTIFIER:
				{
				int LA21_7 = input.LA(2);

				if ((LA21_7==Character_literal||LA21_7==DEFINE||LA21_7==DOT||LA21_7==ELIF||LA21_7==ENDIF||LA21_7==FALSE||(LA21_7>=Hex_number && LA21_7<=IDENTIFIER)||(LA21_7>=NULL && LA21_7<=NUMBER)||LA21_7==Real_literal||LA21_7==STRINGLITERAL||LA21_7==TRUE||LA21_7==UNDEF||LA21_7==Verbatim_string_literal||LA21_7==69||(LA21_7>=80 && LA21_7<=81)||LA21_7==89||LA21_7==91||LA21_7==95||(LA21_7>=97 && LA21_7<=98)||(LA21_7>=100 && LA21_7<=101)||LA21_7==103||(LA21_7>=105 && LA21_7<=106)||LA21_7==109||LA21_7==114||LA21_7==117||(LA21_7>=119 && LA21_7<=120)||LA21_7==122||LA21_7==126||LA21_7==129||(LA21_7>=132 && LA21_7<=133)||LA21_7==135||LA21_7==138||LA21_7==141||(LA21_7>=143 && LA21_7<=144)||(LA21_7>=146 && LA21_7<=148)||(LA21_7>=151 && LA21_7<=154)||LA21_7==157||LA21_7==160||LA21_7==162||LA21_7==167||LA21_7==169||(LA21_7>=171 && LA21_7<=173)||LA21_7==177||LA21_7==180||LA21_7==183||(LA21_7>=185 && LA21_7<=186)||(LA21_7>=189 && LA21_7<=190)||LA21_7==194||LA21_7==196))
				{
					alt21 = 6;
				}
				else if ((LA21_7==68))
				{
					alt21 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA21_8 = input.LA(2);

				if ((LA21_8==Character_literal||LA21_8==DEFINE||LA21_8==DOT||LA21_8==ELIF||LA21_8==ENDIF||LA21_8==FALSE||(LA21_8>=Hex_number && LA21_8<=IDENTIFIER)||(LA21_8>=NULL && LA21_8<=NUMBER)||LA21_8==Real_literal||LA21_8==STRINGLITERAL||LA21_8==TRUE||LA21_8==UNDEF||LA21_8==Verbatim_string_literal||LA21_8==69||(LA21_8>=80 && LA21_8<=81)||LA21_8==89||LA21_8==91||LA21_8==95||(LA21_8>=97 && LA21_8<=98)||(LA21_8>=100 && LA21_8<=101)||LA21_8==103||(LA21_8>=105 && LA21_8<=106)||LA21_8==109||LA21_8==114||LA21_8==117||(LA21_8>=119 && LA21_8<=120)||LA21_8==122||LA21_8==126||LA21_8==129||(LA21_8>=132 && LA21_8<=133)||LA21_8==135||LA21_8==138||LA21_8==141||(LA21_8>=143 && LA21_8<=144)||(LA21_8>=146 && LA21_8<=148)||(LA21_8>=151 && LA21_8<=154)||LA21_8==157||LA21_8==160||LA21_8==162||LA21_8==167||LA21_8==169||(LA21_8>=171 && LA21_8<=173)||LA21_8==177||LA21_8==180||LA21_8==183||(LA21_8>=185 && LA21_8<=186)||(LA21_8>=189 && LA21_8<=190)||LA21_8==194||LA21_8==196))
				{
					alt21 = 6;
				}
				else if ((LA21_8==68))
				{
					alt21 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 111:
				{
				alt21 = 7;
				}
				break;
			case 178:
				{
				alt21 = 8;
				}
				break;
			case ENUM:
				{
				alt21 = 9;
				}
				break;
			case 116:
				{
				alt21 = 10;
				}
				break;
			case 124:
			case 136:
				{
				alt21 = 11;
				}
				break;
			case 202:
				{
				alt21 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:83:4: 'const' type constant_declarators ';'
				{
				DebugLocation(83, 4);
				string_literal50=(IToken)Match(input,112,Follow._112_in_class_member_declaration477); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal50_tree = (object)adaptor.Create(string_literal50, retval);
				adaptor.AddChild(root_0, string_literal50_tree);
				}
				DebugLocation(83, 14);
				PushFollow(Follow._type_in_class_member_declaration481);
				type51=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type51.Tree, type51, retval);
				DebugLocation(83, 21);
				PushFollow(Follow._constant_declarators_in_class_member_declaration485);
				constant_declarators52=constant_declarators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators52.Tree, constant_declarators52, retval);
				DebugLocation(83, 44);
				char_literal53=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_class_member_declaration489), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal53_tree = (object)adaptor.Create(char_literal53, retval);
				adaptor.AddChild(root_0, char_literal53_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:84:4: event_declaration
				{
				DebugLocation(84, 4);
				PushFollow(Follow._event_declaration_in_class_member_declaration494);
				event_declaration54=event_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, event_declaration54.Tree, event_declaration54, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:85:4: 'partial' ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration )
				{
				DebugLocation(85, 4);
				string_literal55=(IToken)Match(input,159,Follow._159_in_class_member_declaration501); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal55_tree = (object)adaptor.Create(string_literal55, retval);
				adaptor.AddChild(root_0, string_literal55_tree);
				}
				DebugLocation(85, 14);
				// cs.g:85:14: ( 'void' method_declaration | interface_declaration | class_declaration | struct_declaration )
				int alt19=4;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				switch (input.LA(1))
				{
				case 192:
					{
					alt19 = 1;
					}
					break;
				case 139:
					{
					alt19 = 2;
					}
					break;
				case 111:
					{
					alt19 = 3;
					}
					break;
				case 178:
					{
					alt19 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:85:15: 'void' method_declaration
					{
					DebugLocation(85, 15);
					string_literal56=(IToken)Match(input,192,Follow._192_in_class_member_declaration504); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal56_tree = (object)adaptor.Create(string_literal56, retval);
					adaptor.AddChild(root_0, string_literal56_tree);
					}
					DebugLocation(85, 22);
					PushFollow(Follow._method_declaration_in_class_member_declaration506);
					method_declaration57=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration57.Tree, method_declaration57, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:86:9: interface_declaration
					{
					DebugLocation(86, 9);
					PushFollow(Follow._interface_declaration_in_class_member_declaration517);
					interface_declaration58=interface_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration58.Tree, interface_declaration58, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:87:9: class_declaration
					{
					DebugLocation(87, 9);
					PushFollow(Follow._class_declaration_in_class_member_declaration528);
					class_declaration59=class_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration59.Tree, class_declaration59, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// cs.g:88:9: struct_declaration
					{
					DebugLocation(88, 9);
					PushFollow(Follow._struct_declaration_in_class_member_declaration539);
					struct_declaration60=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration60.Tree, struct_declaration60, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:89:4: interface_declaration
				{
				DebugLocation(89, 4);
				PushFollow(Follow._interface_declaration_in_class_member_declaration545);
				interface_declaration61=interface_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration61.Tree, interface_declaration61, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:90:4: 'void' method_declaration
				{
				DebugLocation(90, 4);
				string_literal62=(IToken)Match(input,192,Follow._192_in_class_member_declaration551); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal62_tree = (object)adaptor.Create(string_literal62, retval);
				adaptor.AddChild(root_0, string_literal62_tree);
				}
				DebugLocation(90, 13);
				PushFollow(Follow._method_declaration_in_class_member_declaration555);
				method_declaration63=method_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration63.Tree, method_declaration63, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:91:4: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				{
				DebugLocation(91, 4);
				PushFollow(Follow._type_in_class_member_declaration560);
				type64=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type64.Tree, type64, retval);
				DebugLocation(91, 9);
				// cs.g:91:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				int alt20=6;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				switch (input.LA(1))
				{
				case 103:
				case 106:
				case 109:
				case 114:
				case 119:
				case 129:
				case 138:
				case 146:
				case 151:
				case 169:
				case 173:
				case 177:
				case 185:
				case 186:
				case 189:
					{
					int LA20_1 = input.LA(2);

					if ((EvaluatePredicate(synpred2_cs_fragment)))
					{
						alt20 = 1;
					}
					else if ((EvaluatePredicate(synpred3_cs_fragment)))
					{
						alt20 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred2_cs_fragment)))
					{
						alt20 = 1;
					}
					else if ((EvaluatePredicate(synpred3_cs_fragment)))
					{
						alt20 = 2;
					}
					else if ((EvaluatePredicate(synpred4_cs_fragment)))
					{
						alt20 = 3;
					}
					else if ((true))
					{
						alt20 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case DEFINE:
				case ELIF:
				case ENDIF:
				case UNDEF:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 133:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA20_3 = input.LA(2);

					if ((EvaluatePredicate(synpred2_cs_fragment)))
					{
						alt20 = 1;
					}
					else if ((EvaluatePredicate(synpred3_cs_fragment)))
					{
						alt20 = 2;
					}
					else if ((EvaluatePredicate(synpred4_cs_fragment)))
					{
						alt20 = 3;
					}
					else if ((true))
					{
						alt20 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Character_literal:
				case FALSE:
				case Hex_number:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case Verbatim_string_literal:
					{
					int LA20_4 = input.LA(2);

					if ((EvaluatePredicate(synpred2_cs_fragment)))
					{
						alt20 = 1;
					}
					else if ((EvaluatePredicate(synpred3_cs_fragment)))
					{
						alt20 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 180:
					{
					alt20 = 4;
					}
					break;
				case 153:
					{
					alt20 = 6;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:91:11: ( member_name '(' )=> method_declaration
					{
					DebugLocation(91, 34);
					PushFollow(Follow._method_declaration_in_class_member_declaration574);
					method_declaration65=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration65.Tree, method_declaration65, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:92:8: ( member_name '{' )=> property_declaration
					{
					DebugLocation(92, 31);
					PushFollow(Follow._property_declaration_in_class_member_declaration593);
					property_declaration66=property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, property_declaration66.Tree, property_declaration66, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:93:8: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
					{
					DebugLocation(93, 40);
					PushFollow(Follow._type_name_in_class_member_declaration616);
					type_name67=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name67.Tree, type_name67, retval);
					DebugLocation(93, 50);
					char_literal68=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_class_member_declaration618), "DOT"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal68_tree = (object)adaptor.Create(char_literal68, retval);
					adaptor.AddChild(root_0, char_literal68_tree);
					}
					DebugLocation(93, 54);
					PushFollow(Follow._indexer_declaration_in_class_member_declaration620);
					indexer_declaration69=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration69.Tree, indexer_declaration69, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// cs.g:94:8: indexer_declaration
					{
					DebugLocation(94, 8);
					PushFollow(Follow._indexer_declaration_in_class_member_declaration629);
					indexer_declaration70=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration70.Tree, indexer_declaration70, retval);

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// cs.g:95:11: field_declaration
					{
					DebugLocation(95, 11);
					PushFollow(Follow._field_declaration_in_class_member_declaration642);
					field_declaration71=field_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, field_declaration71.Tree, field_declaration71, retval);

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// cs.g:96:11: operator_declaration
					{
					DebugLocation(96, 11);
					PushFollow(Follow._operator_declaration_in_class_member_declaration660);
					operator_declaration72=operator_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, operator_declaration72.Tree, operator_declaration72, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(20); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:100:4: class_declaration
				{
				DebugLocation(100, 4);
				PushFollow(Follow._class_declaration_in_class_member_declaration678);
				class_declaration73=class_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration73.Tree, class_declaration73, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:101:4: struct_declaration
				{
				DebugLocation(101, 4);
				PushFollow(Follow._struct_declaration_in_class_member_declaration685);
				struct_declaration74=struct_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration74.Tree, struct_declaration74, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:102:4: enum_declaration
				{
				DebugLocation(102, 4);
				PushFollow(Follow._enum_declaration_in_class_member_declaration691);
				enum_declaration75=enum_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_declaration75.Tree, enum_declaration75, retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:103:4: delegate_declaration
				{
				DebugLocation(103, 4);
				PushFollow(Follow._delegate_declaration_in_class_member_declaration698);
				delegate_declaration76=delegate_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration76.Tree, delegate_declaration76, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// cs.g:104:4: conversion_operator_declaration
				{
				DebugLocation(104, 4);
				PushFollow(Follow._conversion_operator_declaration_in_class_member_declaration704);
				conversion_operator_declaration77=conversion_operator_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conversion_operator_declaration77.Tree, conversion_operator_declaration77, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// cs.g:105:4: constructor_declaration
				{
				DebugLocation(105, 4);
				PushFollow(Follow._constructor_declaration_in_class_member_declaration709);
				constructor_declaration78=constructor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_declaration78.Tree, constructor_declaration78, retval);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// cs.g:106:4: destructor_declaration
				{
				DebugLocation(106, 4);
				PushFollow(Follow._destructor_declaration_in_class_member_declaration715);
				destructor_declaration79=destructor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, destructor_declaration79.Tree, destructor_declaration79, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_member_declaration", 18);
			LeaveRule("class_member_declaration", 18);
			LeaveRule_class_member_declaration();
			if (state.backtracking > 0) { Memoize(input, 18, class_member_declaration_StartIndex); }

		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "class_member_declaration"); }
		return retval;

	}
	// $ANTLR end "class_member_declaration"

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();

	// $ANTLR start "primary_expression"
	// cs.g:110:8: public primary_expression : ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'base' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
	[GrammarRule("primary_expression")]
	public XAstParserRuleReturnScope primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 19);
		var retval = new XAstParserRuleReturnScope("primary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal80 = default(IToken);
		IToken string_literal83 = default(IToken);
		IToken string_literal88 = default(IToken);
		XAstParserRuleReturnScope brackets81 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression_part82 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope brackets84 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression_part85 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression_start86 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression_part87 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope object_creation_expression89 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression_part90 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope delegate_creation_expression91 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope object_creation_expression92 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope anonymous_object_creation_expression93 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope sizeof_expression94 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope checked_expression95 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unchecked_expression96 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope default_value_expression97 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope anonymous_method_expression98 = default(XAstParserRuleReturnScope);

		object string_literal80_tree = default(object);
		object string_literal83_tree = default(object);
		object string_literal88_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(110, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// cs.g:110:26: ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'base' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
			int alt27=9;
			try { DebugEnterDecision(27, false);
			switch (input.LA(1))
			{
			case 180:
				{
				int LA27_1 = input.LA(2);

				if ((EvaluatePredicate(synpred5_cs_fragment)))
				{
					alt27 = 1;
				}
				else if ((true))
				{
					alt27 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 27, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 102:
				{
				int LA27_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_cs_fragment)))
				{
					alt27 = 2;
				}
				else if ((true))
				{
					alt27 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 27, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case DEFINE:
			case ELIF:
			case ENDIF:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case UNDEF:
			case Verbatim_string_literal:
			case 68:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 133:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 184:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt27 = 3;
				}
				break;
			case 150:
				{
				alt27 = 4;
				}
				break;
			case 174:
				{
				alt27 = 5;
				}
				break;
			case 110:
				{
				alt27 = 6;
				}
				break;
			case 187:
				{
				alt27 = 7;
				}
				break;
			case 115:
				{
				alt27 = 8;
				}
				break;
			case 116:
				{
				alt27 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:111:2: ( 'this' brackets )=> 'this' brackets ( primary_expression_part )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(111, 26);
				string_literal80=(IToken)Match(input,180,Follow._180_in_primary_expression743); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal80_tree = (object)adaptor.Create(string_literal80, retval);
				adaptor.AddChild(root_0, string_literal80_tree);
				}
				DebugLocation(111, 35);
				PushFollow(Follow._brackets_in_primary_expression747);
				brackets81=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets81.Tree, brackets81, retval);
				DebugLocation(111, 46);
				// cs.g:111:46: ( primary_expression_part )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==DOT||LA22_0==PTR||LA22_0==68||LA22_0==72||LA22_0==75||LA22_0==91))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:111:46: primary_expression_part
						{
						DebugLocation(111, 46);
						PushFollow(Follow._primary_expression_part_in_primary_expression751);
						primary_expression_part82=primary_expression_part();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part82.Tree, primary_expression_part82, retval);

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:112:4: ( 'base' brackets )=> 'base' brackets ( primary_expression_part )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 27);
				string_literal83=(IToken)Match(input,102,Follow._102_in_primary_expression767); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal83_tree = (object)adaptor.Create(string_literal83, retval);
				adaptor.AddChild(root_0, string_literal83_tree);
				}
				DebugLocation(112, 36);
				PushFollow(Follow._brackets_in_primary_expression771);
				brackets84=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets84.Tree, brackets84, retval);
				DebugLocation(112, 47);
				// cs.g:112:47: ( primary_expression_part )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==DOT||LA23_0==PTR||LA23_0==68||LA23_0==72||LA23_0==75||LA23_0==91))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:112:47: primary_expression_part
						{
						DebugLocation(112, 47);
						PushFollow(Follow._primary_expression_part_in_primary_expression775);
						primary_expression_part85=primary_expression_part();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part85.Tree, primary_expression_part85, retval);

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:113:4: primary_expression_start ( primary_expression_part )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 4);
				PushFollow(Follow._primary_expression_start_in_primary_expression781);
				primary_expression_start86=primary_expression_start();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_start86.Tree, primary_expression_start86, retval);
				DebugLocation(113, 31);
				// cs.g:113:31: ( primary_expression_part )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==DOT||LA24_0==PTR||LA24_0==68||LA24_0==72||LA24_0==75||LA24_0==91))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:113:31: primary_expression_part
						{
						DebugLocation(113, 31);
						PushFollow(Follow._primary_expression_part_in_primary_expression785);
						primary_expression_part87=primary_expression_part();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part87.Tree, primary_expression_part87, retval);

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:114:4: 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 4);
				string_literal88=(IToken)Match(input,150,Follow._150_in_primary_expression791); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal88_tree = (object)adaptor.Create(string_literal88, retval);
				adaptor.AddChild(root_0, string_literal88_tree);
				}
				DebugLocation(114, 10);
				// cs.g:114:10: ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
				int alt26=4;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				switch (input.LA(1))
				{
				case 103:
				case 106:
				case 109:
				case 114:
				case 119:
				case 129:
				case 138:
				case 146:
				case 151:
				case 169:
				case 173:
				case 177:
				case 185:
				case 186:
				case 189:
					{
					int LA26_1 = input.LA(2);

					if ((EvaluatePredicate(synpred7_cs_fragment)))
					{
						alt26 = 1;
					}
					else if ((true))
					{
						alt26 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA26_2 = input.LA(2);

					if ((EvaluatePredicate(synpred7_cs_fragment)))
					{
						alt26 = 1;
					}
					else if ((EvaluatePredicate(synpred8_cs_fragment)))
					{
						alt26 = 2;
					}
					else if ((true))
					{
						alt26 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case DEFINE:
				case ELIF:
				case ENDIF:
				case UNDEF:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 133:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA26_3 = input.LA(2);

					if ((EvaluatePredicate(synpred7_cs_fragment)))
					{
						alt26 = 1;
					}
					else if ((EvaluatePredicate(synpred8_cs_fragment)))
					{
						alt26 = 2;
					}
					else if ((true))
					{
						alt26 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 192:
					{
					int LA26_4 = input.LA(2);

					if ((EvaluatePredicate(synpred7_cs_fragment)))
					{
						alt26 = 1;
					}
					else if ((true))
					{
						alt26 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 197:
					{
					alt26 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:114:14: ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+
					{
					DebugLocation(115, 6);
					PushFollow(Follow._object_creation_expression_in_primary_expression819);
					object_creation_expression89=object_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, object_creation_expression89.Tree, object_creation_expression89, retval);
					DebugLocation(115, 35);
					// cs.g:115:35: ( primary_expression_part )+
					int cnt25=0;
					try { DebugEnterSubRule(25);
					while (true)
					{
						int alt25=2;
						try { DebugEnterDecision(25, false);
						int LA25_0 = input.LA(1);

						if ((LA25_0==DOT||LA25_0==PTR||LA25_0==68||LA25_0==72||LA25_0==75||LA25_0==91))
						{
							alt25 = 1;
						}


						} finally { DebugExitDecision(25); }
						switch (alt25)
						{
						case 1:
							DebugEnterAlt(1);
							// cs.g:115:35: primary_expression_part
							{
							DebugLocation(115, 35);
							PushFollow(Follow._primary_expression_part_in_primary_expression823);
							primary_expression_part90=primary_expression_part();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part90.Tree, primary_expression_part90, retval);

							}
							break;

						default:
							if (cnt25 >= 1)
								goto loop25;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee25 = new EarlyExitException( 25, input );
							DebugRecognitionException(eee25);
							throw eee25;
						}
						cnt25++;
					}
					loop25:
						;

					} finally { DebugExitSubRule(25); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:118:7: ( delegate_creation_expression )=> delegate_creation_expression
					{
					DebugLocation(118, 41);
					PushFollow(Follow._delegate_creation_expression_in_primary_expression851);
					delegate_creation_expression91=delegate_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_creation_expression91.Tree, delegate_creation_expression91, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:119:7: object_creation_expression
					{
					DebugLocation(119, 7);
					PushFollow(Follow._object_creation_expression_in_primary_expression859);
					object_creation_expression92=object_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, object_creation_expression92.Tree, object_creation_expression92, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// cs.g:120:7: anonymous_object_creation_expression
					{
					DebugLocation(120, 7);
					PushFollow(Follow._anonymous_object_creation_expression_in_primary_expression867);
					anonymous_object_creation_expression93=anonymous_object_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_object_creation_expression93.Tree, anonymous_object_creation_expression93, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:121:4: sizeof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(121, 4);
				PushFollow(Follow._sizeof_expression_in_primary_expression880);
				sizeof_expression94=sizeof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sizeof_expression94.Tree, sizeof_expression94, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:122:4: checked_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(122, 4);
				PushFollow(Follow._checked_expression_in_primary_expression891);
				checked_expression95=checked_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, checked_expression95.Tree, checked_expression95, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:123:4: unchecked_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._unchecked_expression_in_primary_expression910);
				unchecked_expression96=unchecked_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unchecked_expression96.Tree, unchecked_expression96, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:124:4: default_value_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._default_value_expression_in_primary_expression927);
				default_value_expression97=default_value_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, default_value_expression97.Tree, default_value_expression97, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:125:4: anonymous_method_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(125, 4);
				PushFollow(Follow._anonymous_method_expression_in_primary_expression940);
				anonymous_method_expression98=anonymous_method_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_method_expression98.Tree, anonymous_method_expression98, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 19);
			LeaveRule("primary_expression", 19);
			LeaveRule_primary_expression();
			if (state.backtracking > 0) { Memoize(input, 19, primary_expression_StartIndex); }

		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	partial void EnterRule_primary_expression_start();
	partial void LeaveRule_primary_expression_start();

	// $ANTLR start "primary_expression_start"
	// cs.g:128:8: public primary_expression_start : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal );
	[GrammarRule("primary_expression_start")]
	public XAstParserRuleReturnScope primary_expression_start()
	{
		EnterRule_primary_expression_start();
		EnterRule("primary_expression_start", 20);
		var retval = new XAstParserRuleReturnScope("primary_expression_start");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_start_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal103 = default(IToken);
		IToken string_literal105 = default(IToken);
		IToken string_literal106 = default(IToken);
		XAstParserRuleReturnScope predefined_type99 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier100 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list101 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier102 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier104 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope paren_expression107 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope typeof_expression108 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope literal109 = default(XAstParserRuleReturnScope);

		object string_literal103_tree = default(object);
		object string_literal105_tree = default(object);
		object string_literal106_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression_start");
		DebugLocation(128, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// cs.g:128:32: ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal )
			int alt29=8;
			try { DebugEnterDecision(29, false);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt29 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA29_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_cs_fragment)))
				{
					alt29 = 2;
				}
				else if ((true))
				{
					alt29 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA29_3 = input.LA(2);

				if ((EvaluatePredicate(synpred9_cs_fragment)))
				{
					alt29 = 2;
				}
				else if ((true))
				{
					alt29 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 180:
				{
				alt29 = 4;
				}
				break;
			case 102:
				{
				alt29 = 5;
				}
				break;
			case 68:
				{
				alt29 = 6;
				}
				break;
			case 184:
				{
				alt29 = 7;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				alt29 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:129:2: predefined_type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(129, 2);
				PushFollow(Follow._predefined_type_in_primary_expression_start955);
				predefined_type99=predefined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type99.Tree, predefined_type99, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:130:4: ( identifier generic_argument_list )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(130, 45);
				PushFollow(Follow._identifier_in_primary_expression_start983);
				identifier100=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier100.Tree, identifier100, retval);
				DebugLocation(130, 58);
				PushFollow(Follow._generic_argument_list_in_primary_expression_start987);
				generic_argument_list101=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list101.Tree, generic_argument_list101, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:131:4: identifier ( '::' identifier )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(131, 4);
				PushFollow(Follow._identifier_in_primary_expression_start992);
				identifier102=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier102.Tree, identifier102, retval);
				DebugLocation(131, 15);
				// cs.g:131:15: ( '::' identifier )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==80))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:131:16: '::' identifier
					{
					DebugLocation(131, 16);
					string_literal103=(IToken)Match(input,80,Follow._80_in_primary_expression_start995); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal103_tree = (object)adaptor.Create(string_literal103, retval);
					adaptor.AddChild(root_0, string_literal103_tree);
					}
					DebugLocation(131, 23);
					PushFollow(Follow._identifier_in_primary_expression_start999);
					identifier104=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier104.Tree, identifier104, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(28); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:132:4: 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(132, 4);
				string_literal105=(IToken)Match(input,180,Follow._180_in_primary_expression_start1006); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal105_tree = (object)adaptor.Create(string_literal105, retval);
				adaptor.AddChild(root_0, string_literal105_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:133:4: 'base'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(133, 4);
				string_literal106=(IToken)Match(input,102,Follow._102_in_primary_expression_start1012); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal106_tree = (object)adaptor.Create(string_literal106, retval);
				adaptor.AddChild(root_0, string_literal106_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:134:4: paren_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(134, 4);
				PushFollow(Follow._paren_expression_in_primary_expression_start1017);
				paren_expression107=paren_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, paren_expression107.Tree, paren_expression107, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:135:4: typeof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 4);
				PushFollow(Follow._typeof_expression_in_primary_expression_start1022);
				typeof_expression108=typeof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeof_expression108.Tree, typeof_expression108, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:136:4: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 4);
				PushFollow(Follow._literal_in_primary_expression_start1040);
				literal109=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal109.Tree, literal109, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression_start", 20);
			LeaveRule("primary_expression_start", 20);
			LeaveRule_primary_expression_start();
			if (state.backtracking > 0) { Memoize(input, 20, primary_expression_start_StartIndex); }

		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression_start"); }
		return retval;

	}
	// $ANTLR end "primary_expression_start"

	partial void EnterRule_primary_expression_part();
	partial void LeaveRule_primary_expression_part();

	// $ANTLR start "primary_expression_part"
	// cs.g:139:8: public primary_expression_part : ( access_identifier | brackets_or_arguments | '++' | '--' );
	[GrammarRule("primary_expression_part")]
	public XAstParserRuleReturnScope primary_expression_part()
	{
		EnterRule_primary_expression_part();
		EnterRule("primary_expression_part", 21);
		var retval = new XAstParserRuleReturnScope("primary_expression_part");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_part_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal112 = default(IToken);
		IToken string_literal113 = default(IToken);
		XAstParserRuleReturnScope access_identifier110 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope brackets_or_arguments111 = default(XAstParserRuleReturnScope);

		object string_literal112_tree = default(object);
		object string_literal113_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression_part");
		DebugLocation(139, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// cs.g:139:31: ( access_identifier | brackets_or_arguments | '++' | '--' )
			int alt30=4;
			try { DebugEnterDecision(30, false);
			switch (input.LA(1))
			{
			case DOT:
			case PTR:
				{
				alt30 = 1;
				}
				break;
			case 68:
			case 91:
				{
				alt30 = 2;
				}
				break;
			case 72:
				{
				alt30 = 3;
				}
				break;
			case 75:
				{
				alt30 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:140:3: access_identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 3);
				PushFollow(Follow._access_identifier_in_primary_expression_part1053);
				access_identifier110=access_identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, access_identifier110.Tree, access_identifier110, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:141:4: brackets_or_arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				PushFollow(Follow._brackets_or_arguments_in_primary_expression_part1058);
				brackets_or_arguments111=brackets_or_arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets_or_arguments111.Tree, brackets_or_arguments111, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:142:4: '++'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 4);
				string_literal112=(IToken)Match(input,72,Follow._72_in_primary_expression_part1064); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal112_tree = (object)adaptor.Create(string_literal112, retval);
				adaptor.AddChild(root_0, string_literal112_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:143:4: '--'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 4);
				string_literal113=(IToken)Match(input,75,Follow._75_in_primary_expression_part1069); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal113_tree = (object)adaptor.Create(string_literal113, retval);
				adaptor.AddChild(root_0, string_literal113_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression_part", 21);
			LeaveRule("primary_expression_part", 21);
			LeaveRule_primary_expression_part();
			if (state.backtracking > 0) { Memoize(input, 21, primary_expression_part_StartIndex); }

		}
		DebugLocation(143, 8);
		} finally { DebugExitRule(GrammarFileName, "primary_expression_part"); }
		return retval;

	}
	// $ANTLR end "primary_expression_part"

	partial void EnterRule_access_identifier();
	partial void LeaveRule_access_identifier();

	// $ANTLR start "access_identifier"
	// cs.g:144:8: public access_identifier : access_operator type_or_generic ;
	[GrammarRule("access_identifier")]
	public XAstParserRuleReturnScope access_identifier()
	{
		EnterRule_access_identifier();
		EnterRule("access_identifier", 22);
		var retval = new XAstParserRuleReturnScope("access_identifier");
		
		retval.Start = (IToken)input.LT(1);
		int access_identifier_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope access_operator114 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_or_generic115 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "access_identifier");
		DebugLocation(144, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// cs.g:144:25: ( access_operator type_or_generic )
			DebugEnterAlt(1);
			// cs.g:145:2: access_operator type_or_generic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(145, 2);
			PushFollow(Follow._access_operator_in_access_identifier1079);
			access_operator114=access_operator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, access_operator114.Tree, access_operator114, retval);
			DebugLocation(145, 20);
			PushFollow(Follow._type_or_generic_in_access_identifier1083);
			type_or_generic115=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic115.Tree, type_or_generic115, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("access_identifier", 22);
			LeaveRule("access_identifier", 22);
			LeaveRule_access_identifier();
			if (state.backtracking > 0) { Memoize(input, 22, access_identifier_StartIndex); }

		}
		DebugLocation(145, 35);
		} finally { DebugExitRule(GrammarFileName, "access_identifier"); }
		return retval;

	}
	// $ANTLR end "access_identifier"

	partial void EnterRule_access_operator();
	partial void LeaveRule_access_operator();

	// $ANTLR start "access_operator"
	// cs.g:146:8: public access_operator : ( '.' | '->' );
	[GrammarRule("access_operator")]
	public XAstParserRuleReturnScope access_operator()
	{
		EnterRule_access_operator();
		EnterRule("access_operator", 23);
		var retval = new XAstParserRuleReturnScope("access_operator");
		
		retval.Start = (IToken)input.LT(1);
		int access_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set116 = default(IToken);

		object set116_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "access_operator");
		DebugLocation(146, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// cs.g:146:23: ( '.' | '->' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(146, 23);

			set116=(IToken)input.LT(1);
			if (input.LA(1)==DOT||input.LA(1)==PTR)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set116, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("access_operator", 23);
			LeaveRule("access_operator", 23);
			LeaveRule_access_operator();
			if (state.backtracking > 0) { Memoize(input, 23, access_operator_StartIndex); }

		}
		DebugLocation(147, 14);
		} finally { DebugExitRule(GrammarFileName, "access_operator"); }
		return retval;

	}
	// $ANTLR end "access_operator"

	partial void EnterRule_brackets_or_arguments();
	partial void LeaveRule_brackets_or_arguments();

	// $ANTLR start "brackets_or_arguments"
	// cs.g:148:8: public brackets_or_arguments : ( brackets | arguments );
	[GrammarRule("brackets_or_arguments")]
	public XAstParserRuleReturnScope brackets_or_arguments()
	{
		EnterRule_brackets_or_arguments();
		EnterRule("brackets_or_arguments", 24);
		var retval = new XAstParserRuleReturnScope("brackets_or_arguments");
		
		retval.Start = (IToken)input.LT(1);
		int brackets_or_arguments_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope brackets117 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments118 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "brackets_or_arguments");
		DebugLocation(148, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// cs.g:148:29: ( brackets | arguments )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==91))
			{
				alt31 = 1;
			}
			else if ((LA31_0==68))
			{
				alt31 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:149:2: brackets
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(149, 2);
				PushFollow(Follow._brackets_in_brackets_or_arguments1109);
				brackets117=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets117.Tree, brackets117, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:149:13: arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(149, 13);
				PushFollow(Follow._arguments_in_brackets_or_arguments1113);
				arguments118=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments118.Tree, arguments118, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("brackets_or_arguments", 24);
			LeaveRule("brackets_or_arguments", 24);
			LeaveRule_brackets_or_arguments();
			if (state.backtracking > 0) { Memoize(input, 24, brackets_or_arguments_StartIndex); }

		}
		DebugLocation(149, 22);
		} finally { DebugExitRule(GrammarFileName, "brackets_or_arguments"); }
		return retval;

	}
	// $ANTLR end "brackets_or_arguments"

	partial void EnterRule_brackets();
	partial void LeaveRule_brackets();

	// $ANTLR start "brackets"
	// cs.g:150:8: public brackets : '[' ( expression_list )? ']' ;
	[GrammarRule("brackets")]
	public XAstParserRuleReturnScope brackets()
	{
		EnterRule_brackets();
		EnterRule("brackets", 25);
		var retval = new XAstParserRuleReturnScope("brackets");
		
		retval.Start = (IToken)input.LT(1);
		int brackets_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal119 = default(IToken);
		IToken char_literal121 = default(IToken);
		XAstParserRuleReturnScope expression_list120 = default(XAstParserRuleReturnScope);

		object char_literal119_tree = default(object);
		object char_literal121_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "brackets");
		DebugLocation(150, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// cs.g:150:16: ( '[' ( expression_list )? ']' )
			DebugEnterAlt(1);
			// cs.g:151:2: '[' ( expression_list )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(151, 2);
			char_literal119=(IToken)Match(input,91,Follow._91_in_brackets1123); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal119_tree = (object)adaptor.Create(char_literal119, retval);
			adaptor.AddChild(root_0, char_literal119_tree);
			}
			DebugLocation(151, 8);
			// cs.g:151:8: ( expression_list )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==Character_literal||LA32_0==DEFINE||LA32_0==ELIF||LA32_0==ENDIF||LA32_0==FALSE||(LA32_0>=Hex_number && LA32_0<=IDENTIFIER)||(LA32_0>=MINUS && LA32_0<=NUMBER)||LA32_0==Real_literal||LA32_0==STRINGLITERAL||LA32_0==TRUE||LA32_0==UNDEF||LA32_0==Verbatim_string_literal||LA32_0==61||LA32_0==66||(LA32_0>=68 && LA32_0<=69)||(LA32_0>=71 && LA32_0<=72)||LA32_0==75||LA32_0==95||(LA32_0>=97 && LA32_0<=98)||(LA32_0>=100 && LA32_0<=103)||(LA32_0>=105 && LA32_0<=106)||(LA32_0>=109 && LA32_0<=110)||(LA32_0>=114 && LA32_0<=117)||(LA32_0>=119 && LA32_0<=120)||LA32_0==122||LA32_0==126||LA32_0==129||(LA32_0>=132 && LA32_0<=133)||LA32_0==135||LA32_0==138||LA32_0==141||(LA32_0>=143 && LA32_0<=144)||(LA32_0>=146 && LA32_0<=148)||(LA32_0>=150 && LA32_0<=152)||LA32_0==154||LA32_0==157||LA32_0==160||LA32_0==162||LA32_0==167||LA32_0==169||(LA32_0>=171 && LA32_0<=174)||LA32_0==177||LA32_0==180||(LA32_0>=183 && LA32_0<=187)||(LA32_0>=189 && LA32_0<=190)||LA32_0==194||LA32_0==196||LA32_0==202))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:151:8: expression_list
				{
				DebugLocation(151, 8);
				PushFollow(Follow._expression_list_in_brackets1127);
				expression_list120=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list120.Tree, expression_list120, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(151, 27);
			char_literal121=(IToken)Match(input,92,Follow._92_in_brackets1132); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal121_tree = (object)adaptor.Create(char_literal121, retval);
			adaptor.AddChild(root_0, char_literal121_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("brackets", 25);
			LeaveRule("brackets", 25);
			LeaveRule_brackets();
			if (state.backtracking > 0) { Memoize(input, 25, brackets_StartIndex); }

		}
		DebugLocation(151, 30);
		} finally { DebugExitRule(GrammarFileName, "brackets"); }
		return retval;

	}
	// $ANTLR end "brackets"

	partial void EnterRule_paren_expression();
	partial void LeaveRule_paren_expression();

	// $ANTLR start "paren_expression"
	// cs.g:152:8: public paren_expression : '(' expression ')' ;
	[GrammarRule("paren_expression")]
	public XAstParserRuleReturnScope paren_expression()
	{
		EnterRule_paren_expression();
		EnterRule("paren_expression", 26);
		var retval = new XAstParserRuleReturnScope("paren_expression");
		
		retval.Start = (IToken)input.LT(1);
		int paren_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal122 = default(IToken);
		IToken char_literal124 = default(IToken);
		XAstParserRuleReturnScope expression123 = default(XAstParserRuleReturnScope);

		object char_literal122_tree = default(object);
		object char_literal124_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paren_expression");
		DebugLocation(152, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// cs.g:152:24: ( '(' expression ')' )
			DebugEnterAlt(1);
			// cs.g:153:2: '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(153, 2);
			char_literal122=(IToken)Match(input,68,Follow._68_in_paren_expression1144); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal122_tree = (object)adaptor.Create(char_literal122, retval);
			adaptor.AddChild(root_0, char_literal122_tree);
			}
			DebugLocation(153, 8);
			PushFollow(Follow._expression_in_paren_expression1148);
			expression123=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression123.Tree, expression123, retval);
			DebugLocation(153, 21);
			char_literal124=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_paren_expression1152), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal124_tree = (object)adaptor.Create(char_literal124, retval);
			adaptor.AddChild(root_0, char_literal124_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paren_expression", 26);
			LeaveRule("paren_expression", 26);
			LeaveRule_paren_expression();
			if (state.backtracking > 0) { Memoize(input, 26, paren_expression_StartIndex); }

		}
		DebugLocation(153, 24);
		} finally { DebugExitRule(GrammarFileName, "paren_expression"); }
		return retval;

	}
	// $ANTLR end "paren_expression"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// cs.g:154:8: public arguments : '(' ( argument_list )? ')' ;
	[GrammarRule("arguments")]
	public XAstParserRuleReturnScope arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 27);
		var retval = new XAstParserRuleReturnScope("arguments");
		
		retval.Start = (IToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		XAstParserRuleReturnScope argument_list126 = default(XAstParserRuleReturnScope);

		object char_literal125_tree = default(object);
		object char_literal127_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(154, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// cs.g:154:17: ( '(' ( argument_list )? ')' )
			DebugEnterAlt(1);
			// cs.g:155:2: '(' ( argument_list )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(155, 2);
			char_literal125=(IToken)Match(input,68,Follow._68_in_arguments1163); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal125_tree = (object)adaptor.Create(char_literal125, retval);
			adaptor.AddChild(root_0, char_literal125_tree);
			}
			DebugLocation(155, 8);
			// cs.g:155:8: ( argument_list )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==Character_literal||LA33_0==DEFINE||LA33_0==ELIF||LA33_0==ENDIF||LA33_0==FALSE||(LA33_0>=Hex_number && LA33_0<=IDENTIFIER)||(LA33_0>=MINUS && LA33_0<=NUMBER)||LA33_0==Real_literal||LA33_0==STRINGLITERAL||LA33_0==TRUE||LA33_0==UNDEF||LA33_0==Verbatim_string_literal||LA33_0==61||LA33_0==66||(LA33_0>=68 && LA33_0<=69)||(LA33_0>=71 && LA33_0<=72)||LA33_0==75||LA33_0==95||(LA33_0>=97 && LA33_0<=98)||(LA33_0>=100 && LA33_0<=103)||(LA33_0>=105 && LA33_0<=106)||(LA33_0>=109 && LA33_0<=110)||(LA33_0>=114 && LA33_0<=117)||(LA33_0>=119 && LA33_0<=120)||LA33_0==122||LA33_0==126||LA33_0==129||(LA33_0>=132 && LA33_0<=133)||LA33_0==135||LA33_0==138||LA33_0==141||(LA33_0>=143 && LA33_0<=144)||(LA33_0>=146 && LA33_0<=148)||(LA33_0>=150 && LA33_0<=152)||(LA33_0>=154 && LA33_0<=155)||LA33_0==157||LA33_0==160||LA33_0==162||(LA33_0>=166 && LA33_0<=167)||LA33_0==169||(LA33_0>=171 && LA33_0<=174)||LA33_0==177||LA33_0==180||(LA33_0>=183 && LA33_0<=187)||(LA33_0>=189 && LA33_0<=190)||LA33_0==194||LA33_0==196||LA33_0==202))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:155:8: argument_list
				{
				DebugLocation(155, 8);
				PushFollow(Follow._argument_list_in_arguments1167);
				argument_list126=argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_list126.Tree, argument_list126, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(155, 25);
			char_literal127=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments1172), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal127_tree = (object)adaptor.Create(char_literal127, retval);
			adaptor.AddChild(root_0, char_literal127_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 27);
			LeaveRule("arguments", 27);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 27, arguments_StartIndex); }

		}
		DebugLocation(155, 28);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_argument_list();
	partial void LeaveRule_argument_list();

	// $ANTLR start "argument_list"
	// cs.g:156:8: public argument_list : argument ( ',' argument )* ;
	[GrammarRule("argument_list")]
	public XAstParserRuleReturnScope argument_list()
	{
		EnterRule_argument_list();
		EnterRule("argument_list", 28);
		var retval = new XAstParserRuleReturnScope("argument_list");
		
		retval.Start = (IToken)input.LT(1);
		int argument_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal129 = default(IToken);
		XAstParserRuleReturnScope argument128 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument130 = default(XAstParserRuleReturnScope);

		object char_literal129_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_list");
		DebugLocation(156, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// cs.g:156:21: ( argument ( ',' argument )* )
			DebugEnterAlt(1);
			// cs.g:157:2: argument ( ',' argument )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(157, 2);
			PushFollow(Follow._argument_in_argument_list1183);
			argument128=argument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, argument128.Tree, argument128, retval);
			DebugLocation(157, 11);
			// cs.g:157:11: ( ',' argument )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==74))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:157:12: ',' argument
					{
					DebugLocation(157, 12);
					char_literal129=(IToken)Match(input,74,Follow._74_in_argument_list1186); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal129_tree = (object)adaptor.Create(char_literal129, retval);
					adaptor.AddChild(root_0, char_literal129_tree);
					}
					DebugLocation(157, 16);
					PushFollow(Follow._argument_in_argument_list1188);
					argument130=argument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, argument130.Tree, argument130, retval);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_list", 28);
			LeaveRule("argument_list", 28);
			LeaveRule_argument_list();
			if (state.backtracking > 0) { Memoize(input, 28, argument_list_StartIndex); }

		}
		DebugLocation(157, 25);
		} finally { DebugExitRule(GrammarFileName, "argument_list"); }
		return retval;

	}
	// $ANTLR end "argument_list"

	partial void EnterRule_argument();
	partial void LeaveRule_argument();

	// $ANTLR start "argument"
	// cs.g:159:8: public argument : ( argument_name argument_value | argument_value );
	[GrammarRule("argument")]
	public XAstParserRuleReturnScope argument()
	{
		EnterRule_argument();
		EnterRule("argument", 29);
		var retval = new XAstParserRuleReturnScope("argument");
		
		retval.Start = (IToken)input.LT(1);
		int argument_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope argument_name131 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_value132 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_value133 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "argument");
		DebugLocation(159, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// cs.g:159:16: ( argument_name argument_value | argument_value )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA35_1 = input.LA(2);

				if ((LA35_1==79))
				{
					alt35 = 1;
				}
				else if ((LA35_1==DOT||LA35_1==GT||LA35_1==MINUS||LA35_1==PTR||LA35_1==RPAREN||(LA35_1>=62 && LA35_1<=78)||(LA35_1>=80 && LA35_1<=91)||(LA35_1>=93 && LA35_1<=94)||LA35_1==99||LA35_1==142||(LA35_1>=198 && LA35_1<=200)))
				{
					alt35 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				int LA35_2 = input.LA(2);

				if ((LA35_2==79))
				{
					alt35 = 1;
				}
				else if ((LA35_2==DEFINE||LA35_2==DOT||LA35_2==ELIF||LA35_2==ENDIF||LA35_2==GT||LA35_2==IDENTIFIER||LA35_2==MINUS||LA35_2==PTR||LA35_2==RPAREN||LA35_2==UNDEF||(LA35_2>=62 && LA35_2<=78)||(LA35_2>=80 && LA35_2<=91)||(LA35_2>=93 && LA35_2<=95)||(LA35_2>=97 && LA35_2<=101)||LA35_2==103||(LA35_2>=105 && LA35_2<=106)||LA35_2==109||LA35_2==114||LA35_2==117||(LA35_2>=119 && LA35_2<=120)||LA35_2==122||LA35_2==126||LA35_2==129||(LA35_2>=132 && LA35_2<=133)||LA35_2==135||LA35_2==138||(LA35_2>=141 && LA35_2<=144)||(LA35_2>=146 && LA35_2<=148)||(LA35_2>=151 && LA35_2<=152)||LA35_2==154||LA35_2==157||LA35_2==160||LA35_2==162||LA35_2==167||LA35_2==169||(LA35_2>=171 && LA35_2<=173)||LA35_2==177||LA35_2==183||(LA35_2>=185 && LA35_2<=186)||(LA35_2>=189 && LA35_2<=190)||LA35_2==192||LA35_2==194||LA35_2==196||(LA35_2>=198 && LA35_2<=200)))
				{
					alt35 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 155:
			case 166:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 202:
				{
				alt35 = 2;
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA35_4 = input.LA(2);

				if ((LA35_4==79))
				{
					alt35 = 1;
				}
				else if ((LA35_4==DOT||LA35_4==GT||LA35_4==MINUS||LA35_4==PTR||LA35_4==RPAREN||(LA35_4>=62 && LA35_4<=78)||(LA35_4>=80 && LA35_4<=91)||(LA35_4>=93 && LA35_4<=94)||LA35_4==99||LA35_4==142||(LA35_4>=198 && LA35_4<=200)))
				{
					alt35 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:160:2: argument_name argument_value
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(160, 2);
				PushFollow(Follow._argument_name_in_argument1200);
				argument_name131=argument_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_name131.Tree, argument_name131, retval);
				DebugLocation(160, 18);
				PushFollow(Follow._argument_value_in_argument1204);
				argument_value132=argument_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_value132.Tree, argument_value132, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:161:4: argument_value
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._argument_value_in_argument1209);
				argument_value133=argument_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_value133.Tree, argument_value133, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument", 29);
			LeaveRule("argument", 29);
			LeaveRule_argument();
			if (state.backtracking > 0) { Memoize(input, 29, argument_StartIndex); }

		}
		DebugLocation(161, 17);
		} finally { DebugExitRule(GrammarFileName, "argument"); }
		return retval;

	}
	// $ANTLR end "argument"

	partial void EnterRule_argument_name();
	partial void LeaveRule_argument_name();

	// $ANTLR start "argument_name"
	// cs.g:162:8: public argument_name : identifier ':' ;
	[GrammarRule("argument_name")]
	public XAstParserRuleReturnScope argument_name()
	{
		EnterRule_argument_name();
		EnterRule("argument_name", 30);
		var retval = new XAstParserRuleReturnScope("argument_name");
		
		retval.Start = (IToken)input.LT(1);
		int argument_name_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal135 = default(IToken);
		XAstParserRuleReturnScope identifier134 = default(XAstParserRuleReturnScope);

		object char_literal135_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_name");
		DebugLocation(162, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// cs.g:162:21: ( identifier ':' )
			DebugEnterAlt(1);
			// cs.g:163:2: identifier ':'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(163, 2);
			PushFollow(Follow._identifier_in_argument_name1218);
			identifier134=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier134.Tree, identifier134, retval);
			DebugLocation(163, 15);
			char_literal135=(IToken)Match(input,79,Follow._79_in_argument_name1222); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal135_tree = (object)adaptor.Create(char_literal135, retval);
			adaptor.AddChild(root_0, char_literal135_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_name", 30);
			LeaveRule("argument_name", 30);
			LeaveRule_argument_name();
			if (state.backtracking > 0) { Memoize(input, 30, argument_name_StartIndex); }

		}
		DebugLocation(163, 17);
		} finally { DebugExitRule(GrammarFileName, "argument_name"); }
		return retval;

	}
	// $ANTLR end "argument_name"

	partial void EnterRule_argument_value();
	partial void LeaveRule_argument_value();

	// $ANTLR start "argument_value"
	// cs.g:164:8: public argument_value : ( expression | ref_variable_reference | 'out' variable_reference );
	[GrammarRule("argument_value")]
	public XAstParserRuleReturnScope argument_value()
	{
		EnterRule_argument_value();
		EnterRule("argument_value", 31);
		var retval = new XAstParserRuleReturnScope("argument_value");
		
		retval.Start = (IToken)input.LT(1);
		int argument_value_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal138 = default(IToken);
		XAstParserRuleReturnScope expression136 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope ref_variable_reference137 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_reference139 = default(XAstParserRuleReturnScope);

		object string_literal138_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_value");
		DebugLocation(164, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// cs.g:164:22: ( expression | ref_variable_reference | 'out' variable_reference )
			int alt36=3;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case Character_literal:
			case DEFINE:
			case ELIF:
			case ENDIF:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case UNDEF:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 133:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
			case 202:
				{
				alt36 = 1;
				}
				break;
			case 166:
				{
				alt36 = 2;
				}
				break;
			case 155:
				{
				alt36 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:165:2: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(165, 2);
				PushFollow(Follow._expression_in_argument_value1232);
				expression136=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression136.Tree, expression136, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:166:4: ref_variable_reference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(166, 4);
				PushFollow(Follow._ref_variable_reference_in_argument_value1238);
				ref_variable_reference137=ref_variable_reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ref_variable_reference137.Tree, ref_variable_reference137, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:167:4: 'out' variable_reference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(167, 4);
				string_literal138=(IToken)Match(input,155,Follow._155_in_argument_value1244); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal138_tree = (object)adaptor.Create(string_literal138, retval);
				adaptor.AddChild(root_0, string_literal138_tree);
				}
				DebugLocation(167, 12);
				PushFollow(Follow._variable_reference_in_argument_value1248);
				variable_reference139=variable_reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_reference139.Tree, variable_reference139, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_value", 31);
			LeaveRule("argument_value", 31);
			LeaveRule_argument_value();
			if (state.backtracking > 0) { Memoize(input, 31, argument_value_StartIndex); }

		}
		DebugLocation(167, 30);
		} finally { DebugExitRule(GrammarFileName, "argument_value"); }
		return retval;

	}
	// $ANTLR end "argument_value"

	partial void EnterRule_ref_variable_reference();
	partial void LeaveRule_ref_variable_reference();

	// $ANTLR start "ref_variable_reference"
	// cs.g:168:8: public ref_variable_reference : 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) ;
	[GrammarRule("ref_variable_reference")]
	public XAstParserRuleReturnScope ref_variable_reference()
	{
		EnterRule_ref_variable_reference();
		EnterRule("ref_variable_reference", 32);
		var retval = new XAstParserRuleReturnScope("ref_variable_reference");
		
		retval.Start = (IToken)input.LT(1);
		int ref_variable_reference_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal140 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		XAstParserRuleReturnScope type142 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope ref_variable_reference144 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_reference145 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_reference146 = default(XAstParserRuleReturnScope);

		object string_literal140_tree = default(object);
		object char_literal141_tree = default(object);
		object char_literal143_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ref_variable_reference");
		DebugLocation(168, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// cs.g:168:30: ( 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) )
			DebugEnterAlt(1);
			// cs.g:169:2: 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(169, 2);
			string_literal140=(IToken)Match(input,166,Follow._166_in_ref_variable_reference1258); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal140_tree = (object)adaptor.Create(string_literal140, retval);
			adaptor.AddChild(root_0, string_literal140_tree);
			}
			DebugLocation(170, 3);
			// cs.g:170:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==68))
			{
				int LA38_1 = input.LA(2);

				if ((EvaluatePredicate(synpred10_cs_fragment)))
				{
					alt38 = 1;
				}
				else if ((true))
				{
					alt38 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA38_0==Character_literal||LA38_0==DEFINE||LA38_0==ELIF||LA38_0==ENDIF||LA38_0==FALSE||(LA38_0>=Hex_number && LA38_0<=IDENTIFIER)||(LA38_0>=MINUS && LA38_0<=NUMBER)||LA38_0==Real_literal||LA38_0==STRINGLITERAL||LA38_0==TRUE||LA38_0==UNDEF||LA38_0==Verbatim_string_literal||LA38_0==61||LA38_0==66||LA38_0==69||(LA38_0>=71 && LA38_0<=72)||LA38_0==75||LA38_0==95||(LA38_0>=97 && LA38_0<=98)||(LA38_0>=100 && LA38_0<=103)||(LA38_0>=105 && LA38_0<=106)||(LA38_0>=109 && LA38_0<=110)||(LA38_0>=114 && LA38_0<=117)||(LA38_0>=119 && LA38_0<=120)||LA38_0==122||LA38_0==126||LA38_0==129||(LA38_0>=132 && LA38_0<=133)||LA38_0==135||LA38_0==138||LA38_0==141||(LA38_0>=143 && LA38_0<=144)||(LA38_0>=146 && LA38_0<=148)||(LA38_0>=150 && LA38_0<=152)||LA38_0==154||LA38_0==157||LA38_0==160||LA38_0==162||LA38_0==167||LA38_0==169||(LA38_0>=171 && LA38_0<=174)||LA38_0==177||LA38_0==180||(LA38_0>=183 && LA38_0<=187)||(LA38_0>=189 && LA38_0<=190)||LA38_0==194||LA38_0==196||LA38_0==202))
			{
				alt38 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:170:4: ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference )
				{
				DebugLocation(170, 28);
				char_literal141=(IToken)Match(input,68,Follow._68_in_ref_variable_reference1280); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal141_tree = (object)adaptor.Create(char_literal141, retval);
				adaptor.AddChild(root_0, char_literal141_tree);
				}
				DebugLocation(170, 34);
				PushFollow(Follow._type_in_ref_variable_reference1284);
				type142=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type142.Tree, type142, retval);
				DebugLocation(170, 41);
				char_literal143=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_ref_variable_reference1288), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal143_tree = (object)adaptor.Create(char_literal143, retval);
				adaptor.AddChild(root_0, char_literal143_tree);
				}
				DebugLocation(170, 47);
				// cs.g:170:47: ( ref_variable_reference | variable_reference )
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==166))
				{
					alt37 = 1;
				}
				else if ((LA37_0==Character_literal||LA37_0==DEFINE||LA37_0==ELIF||LA37_0==ENDIF||LA37_0==FALSE||(LA37_0>=Hex_number && LA37_0<=IDENTIFIER)||(LA37_0>=MINUS && LA37_0<=NUMBER)||LA37_0==Real_literal||LA37_0==STRINGLITERAL||LA37_0==TRUE||LA37_0==UNDEF||LA37_0==Verbatim_string_literal||LA37_0==61||LA37_0==66||(LA37_0>=68 && LA37_0<=69)||(LA37_0>=71 && LA37_0<=72)||LA37_0==75||LA37_0==95||(LA37_0>=97 && LA37_0<=98)||(LA37_0>=100 && LA37_0<=103)||(LA37_0>=105 && LA37_0<=106)||(LA37_0>=109 && LA37_0<=110)||(LA37_0>=114 && LA37_0<=117)||(LA37_0>=119 && LA37_0<=120)||LA37_0==122||LA37_0==126||LA37_0==129||(LA37_0>=132 && LA37_0<=133)||LA37_0==135||LA37_0==138||LA37_0==141||(LA37_0>=143 && LA37_0<=144)||(LA37_0>=146 && LA37_0<=148)||(LA37_0>=150 && LA37_0<=152)||LA37_0==154||LA37_0==157||LA37_0==160||LA37_0==162||LA37_0==167||LA37_0==169||(LA37_0>=171 && LA37_0<=174)||LA37_0==177||LA37_0==180||(LA37_0>=183 && LA37_0<=187)||(LA37_0>=189 && LA37_0<=190)||LA37_0==194||LA37_0==196||LA37_0==202))
				{
					alt37 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:170:48: ref_variable_reference
					{
					DebugLocation(170, 48);
					PushFollow(Follow._ref_variable_reference_in_ref_variable_reference1293);
					ref_variable_reference144=ref_variable_reference();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ref_variable_reference144.Tree, ref_variable_reference144, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:170:73: variable_reference
					{
					DebugLocation(170, 73);
					PushFollow(Follow._variable_reference_in_ref_variable_reference1297);
					variable_reference145=variable_reference();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable_reference145.Tree, variable_reference145, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:172:5: variable_reference
				{
				DebugLocation(172, 5);
				PushFollow(Follow._variable_reference_in_ref_variable_reference1333);
				variable_reference146=variable_reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_reference146.Tree, variable_reference146, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ref_variable_reference", 32);
			LeaveRule("ref_variable_reference", 32);
			LeaveRule_ref_variable_reference();
			if (state.backtracking > 0) { Memoize(input, 32, ref_variable_reference_StartIndex); }

		}
		DebugLocation(172, 23);
		} finally { DebugExitRule(GrammarFileName, "ref_variable_reference"); }
		return retval;

	}
	// $ANTLR end "ref_variable_reference"

	partial void EnterRule_variable_reference();
	partial void LeaveRule_variable_reference();

	// $ANTLR start "variable_reference"
	// cs.g:174:8: public variable_reference : expression ;
	[GrammarRule("variable_reference")]
	public XAstParserRuleReturnScope variable_reference()
	{
		EnterRule_variable_reference();
		EnterRule("variable_reference", 33);
		var retval = new XAstParserRuleReturnScope("variable_reference");
		
		retval.Start = (IToken)input.LT(1);
		int variable_reference_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression147 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "variable_reference");
		DebugLocation(174, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// cs.g:174:26: ( expression )
			DebugEnterAlt(1);
			// cs.g:175:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(175, 2);
			PushFollow(Follow._expression_in_variable_reference1345);
			expression147=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression147.Tree, expression147, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_reference", 33);
			LeaveRule("variable_reference", 33);
			LeaveRule_variable_reference();
			if (state.backtracking > 0) { Memoize(input, 33, variable_reference_StartIndex); }

		}
		DebugLocation(175, 11);
		} finally { DebugExitRule(GrammarFileName, "variable_reference"); }
		return retval;

	}
	// $ANTLR end "variable_reference"

	partial void EnterRule_rank_specifiers();
	partial void LeaveRule_rank_specifiers();

	// $ANTLR start "rank_specifiers"
	// cs.g:176:8: public rank_specifiers : ( rank_specifier )+ ;
	[GrammarRule("rank_specifiers")]
	public XAstParserRuleReturnScope rank_specifiers()
	{
		EnterRule_rank_specifiers();
		EnterRule("rank_specifiers", 34);
		var retval = new XAstParserRuleReturnScope("rank_specifiers");
		
		retval.Start = (IToken)input.LT(1);
		int rank_specifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope rank_specifier148 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "rank_specifiers");
		DebugLocation(176, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// cs.g:176:23: ( ( rank_specifier )+ )
			DebugEnterAlt(1);
			// cs.g:177:2: ( rank_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(177, 2);
			// cs.g:177:2: ( rank_specifier )+
			int cnt39=0;
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==91))
				{
					int LA39_2 = input.LA(2);

					if ((LA39_2==74||LA39_2==92))
					{
						alt39 = 1;
					}


				}


				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:177:2: rank_specifier
					{
					DebugLocation(177, 2);
					PushFollow(Follow._rank_specifier_in_rank_specifiers1355);
					rank_specifier148=rank_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifier148.Tree, rank_specifier148, retval);

					}
					break;

				default:
					if (cnt39 >= 1)
						goto loop39;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee39 = new EarlyExitException( 39, input );
					DebugRecognitionException(eee39);
					throw eee39;
				}
				cnt39++;
			}
			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rank_specifiers", 34);
			LeaveRule("rank_specifiers", 34);
			LeaveRule_rank_specifiers();
			if (state.backtracking > 0) { Memoize(input, 34, rank_specifiers_StartIndex); }

		}
		DebugLocation(177, 17);
		} finally { DebugExitRule(GrammarFileName, "rank_specifiers"); }
		return retval;

	}
	// $ANTLR end "rank_specifiers"

	partial void EnterRule_rank_specifier();
	partial void LeaveRule_rank_specifier();

	// $ANTLR start "rank_specifier"
	// cs.g:178:8: public rank_specifier : '[' ( dim_separators )? ']' ;
	[GrammarRule("rank_specifier")]
	public XAstParserRuleReturnScope rank_specifier()
	{
		EnterRule_rank_specifier();
		EnterRule("rank_specifier", 35);
		var retval = new XAstParserRuleReturnScope("rank_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int rank_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal149 = default(IToken);
		IToken char_literal151 = default(IToken);
		XAstParserRuleReturnScope dim_separators150 = default(XAstParserRuleReturnScope);

		object char_literal149_tree = default(object);
		object char_literal151_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "rank_specifier");
		DebugLocation(178, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// cs.g:178:22: ( '[' ( dim_separators )? ']' )
			DebugEnterAlt(1);
			// cs.g:179:2: '[' ( dim_separators )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(179, 2);
			char_literal149=(IToken)Match(input,91,Follow._91_in_rank_specifier1375); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal149_tree = (object)adaptor.Create(char_literal149, retval);
			adaptor.AddChild(root_0, char_literal149_tree);
			}
			DebugLocation(179, 8);
			// cs.g:179:8: ( dim_separators )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==74))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:179:8: dim_separators
				{
				DebugLocation(179, 8);
				PushFollow(Follow._dim_separators_in_rank_specifier1379);
				dim_separators150=dim_separators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dim_separators150.Tree, dim_separators150, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(179, 26);
			char_literal151=(IToken)Match(input,92,Follow._92_in_rank_specifier1384); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal151_tree = (object)adaptor.Create(char_literal151, retval);
			adaptor.AddChild(root_0, char_literal151_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rank_specifier", 35);
			LeaveRule("rank_specifier", 35);
			LeaveRule_rank_specifier();
			if (state.backtracking > 0) { Memoize(input, 35, rank_specifier_StartIndex); }

		}
		DebugLocation(179, 29);
		} finally { DebugExitRule(GrammarFileName, "rank_specifier"); }
		return retval;

	}
	// $ANTLR end "rank_specifier"

	partial void EnterRule_dim_separators();
	partial void LeaveRule_dim_separators();

	// $ANTLR start "dim_separators"
	// cs.g:180:8: public dim_separators : ( ',' )+ ;
	[GrammarRule("dim_separators")]
	public XAstParserRuleReturnScope dim_separators()
	{
		EnterRule_dim_separators();
		EnterRule("dim_separators", 36);
		var retval = new XAstParserRuleReturnScope("dim_separators");
		
		retval.Start = (IToken)input.LT(1);
		int dim_separators_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal152 = default(IToken);

		object char_literal152_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "dim_separators");
		DebugLocation(180, 6);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// cs.g:180:22: ( ( ',' )+ )
			DebugEnterAlt(1);
			// cs.g:181:2: ( ',' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(181, 2);
			// cs.g:181:2: ( ',' )+
			int cnt41=0;
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==74))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:181:2: ','
					{
					DebugLocation(181, 2);
					char_literal152=(IToken)Match(input,74,Follow._74_in_dim_separators1395); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal152_tree = (object)adaptor.Create(char_literal152, retval);
					adaptor.AddChild(root_0, char_literal152_tree);
					}

					}
					break;

				default:
					if (cnt41 >= 1)
						goto loop41;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee41 = new EarlyExitException( 41, input );
					DebugRecognitionException(eee41);
					throw eee41;
				}
				cnt41++;
			}
			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dim_separators", 36);
			LeaveRule("dim_separators", 36);
			LeaveRule_dim_separators();
			if (state.backtracking > 0) { Memoize(input, 36, dim_separators_StartIndex); }

		}
		DebugLocation(181, 6);
		} finally { DebugExitRule(GrammarFileName, "dim_separators"); }
		return retval;

	}
	// $ANTLR end "dim_separators"

	partial void EnterRule_delegate_creation_expression();
	partial void LeaveRule_delegate_creation_expression();

	// $ANTLR start "delegate_creation_expression"
	// cs.g:183:8: public delegate_creation_expression : type_name '(' type_name ')' ;
	[GrammarRule("delegate_creation_expression")]
	public XAstParserRuleReturnScope delegate_creation_expression()
	{
		EnterRule_delegate_creation_expression();
		EnterRule("delegate_creation_expression", 37);
		var retval = new XAstParserRuleReturnScope("delegate_creation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int delegate_creation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal154 = default(IToken);
		IToken char_literal156 = default(IToken);
		XAstParserRuleReturnScope type_name153 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name155 = default(XAstParserRuleReturnScope);

		object char_literal154_tree = default(object);
		object char_literal156_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "delegate_creation_expression");
		DebugLocation(183, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// cs.g:183:36: ( type_name '(' type_name ')' )
			DebugEnterAlt(1);
			// cs.g:185:2: type_name '(' type_name ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(185, 2);
			PushFollow(Follow._type_name_in_delegate_creation_expression1410);
			type_name153=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name153.Tree, type_name153, retval);
			DebugLocation(185, 14);
			char_literal154=(IToken)Match(input,68,Follow._68_in_delegate_creation_expression1414); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal154_tree = (object)adaptor.Create(char_literal154, retval);
			adaptor.AddChild(root_0, char_literal154_tree);
			}
			DebugLocation(185, 20);
			PushFollow(Follow._type_name_in_delegate_creation_expression1418);
			type_name155=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name155.Tree, type_name155, retval);
			DebugLocation(185, 32);
			char_literal156=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_delegate_creation_expression1422), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal156_tree = (object)adaptor.Create(char_literal156, retval);
			adaptor.AddChild(root_0, char_literal156_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_creation_expression", 37);
			LeaveRule("delegate_creation_expression", 37);
			LeaveRule_delegate_creation_expression();
			if (state.backtracking > 0) { Memoize(input, 37, delegate_creation_expression_StartIndex); }

		}
		DebugLocation(185, 35);
		} finally { DebugExitRule(GrammarFileName, "delegate_creation_expression"); }
		return retval;

	}
	// $ANTLR end "delegate_creation_expression"

	partial void EnterRule_anonymous_object_creation_expression();
	partial void LeaveRule_anonymous_object_creation_expression();

	// $ANTLR start "anonymous_object_creation_expression"
	// cs.g:186:8: public anonymous_object_creation_expression : anonymous_object_initializer ;
	[GrammarRule("anonymous_object_creation_expression")]
	public XAstParserRuleReturnScope anonymous_object_creation_expression()
	{
		EnterRule_anonymous_object_creation_expression();
		EnterRule("anonymous_object_creation_expression", 38);
		var retval = new XAstParserRuleReturnScope("anonymous_object_creation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_object_creation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope anonymous_object_initializer157 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "anonymous_object_creation_expression");
		DebugLocation(186, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// cs.g:186:44: ( anonymous_object_initializer )
			DebugEnterAlt(1);
			// cs.g:188:2: anonymous_object_initializer
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(188, 2);
			PushFollow(Follow._anonymous_object_initializer_in_anonymous_object_creation_expression1435);
			anonymous_object_initializer157=anonymous_object_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_object_initializer157.Tree, anonymous_object_initializer157, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_object_creation_expression", 38);
			LeaveRule("anonymous_object_creation_expression", 38);
			LeaveRule_anonymous_object_creation_expression();
			if (state.backtracking > 0) { Memoize(input, 38, anonymous_object_creation_expression_StartIndex); }

		}
		DebugLocation(188, 30);
		} finally { DebugExitRule(GrammarFileName, "anonymous_object_creation_expression"); }
		return retval;

	}
	// $ANTLR end "anonymous_object_creation_expression"

	partial void EnterRule_anonymous_object_initializer();
	partial void LeaveRule_anonymous_object_initializer();

	// $ANTLR start "anonymous_object_initializer"
	// cs.g:189:8: public anonymous_object_initializer : '{' ( member_declarator_list ( ',' )? )? '}' ;
	[GrammarRule("anonymous_object_initializer")]
	public XAstParserRuleReturnScope anonymous_object_initializer()
	{
		EnterRule_anonymous_object_initializer();
		EnterRule("anonymous_object_initializer", 39);
		var retval = new XAstParserRuleReturnScope("anonymous_object_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_object_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		IToken char_literal161 = default(IToken);
		XAstParserRuleReturnScope member_declarator_list159 = default(XAstParserRuleReturnScope);

		object char_literal158_tree = default(object);
		object char_literal160_tree = default(object);
		object char_literal161_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymous_object_initializer");
		DebugLocation(189, 45);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// cs.g:189:36: ( '{' ( member_declarator_list ( ',' )? )? '}' )
			DebugEnterAlt(1);
			// cs.g:190:2: '{' ( member_declarator_list ( ',' )? )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(190, 2);
			char_literal158=(IToken)Match(input,197,Follow._197_in_anonymous_object_initializer1446); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal158_tree = (object)adaptor.Create(char_literal158, retval);
			adaptor.AddChild(root_0, char_literal158_tree);
			}
			DebugLocation(190, 8);
			// cs.g:190:8: ( member_declarator_list ( ',' )? )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==Character_literal||LA43_0==DEFINE||LA43_0==ELIF||LA43_0==ENDIF||LA43_0==FALSE||(LA43_0>=Hex_number && LA43_0<=IDENTIFIER)||(LA43_0>=NULL && LA43_0<=NUMBER)||LA43_0==Real_literal||LA43_0==STRINGLITERAL||LA43_0==TRUE||LA43_0==UNDEF||LA43_0==Verbatim_string_literal||LA43_0==95||(LA43_0>=97 && LA43_0<=98)||(LA43_0>=100 && LA43_0<=101)||LA43_0==103||(LA43_0>=105 && LA43_0<=106)||LA43_0==109||LA43_0==114||LA43_0==117||(LA43_0>=119 && LA43_0<=120)||LA43_0==122||LA43_0==126||LA43_0==129||(LA43_0>=132 && LA43_0<=133)||LA43_0==135||LA43_0==138||LA43_0==141||(LA43_0>=143 && LA43_0<=144)||(LA43_0>=146 && LA43_0<=148)||(LA43_0>=151 && LA43_0<=152)||LA43_0==154||LA43_0==157||LA43_0==160||LA43_0==162||LA43_0==167||LA43_0==169||(LA43_0>=171 && LA43_0<=173)||LA43_0==177||LA43_0==183||(LA43_0>=185 && LA43_0<=186)||(LA43_0>=189 && LA43_0<=190)||LA43_0==194||LA43_0==196))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:190:9: member_declarator_list ( ',' )?
				{
				DebugLocation(190, 9);
				PushFollow(Follow._member_declarator_list_in_anonymous_object_initializer1451);
				member_declarator_list159=member_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, member_declarator_list159.Tree, member_declarator_list159, retval);
				DebugLocation(190, 34);
				// cs.g:190:34: ( ',' )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==74))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:190:34: ','
					{
					DebugLocation(190, 34);
					char_literal160=(IToken)Match(input,74,Follow._74_in_anonymous_object_initializer1455); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal160_tree = (object)adaptor.Create(char_literal160, retval);
					adaptor.AddChild(root_0, char_literal160_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(42); }


				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(190, 43);
			char_literal161=(IToken)Match(input,201,Follow._201_in_anonymous_object_initializer1462); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal161_tree = (object)adaptor.Create(char_literal161, retval);
			adaptor.AddChild(root_0, char_literal161_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_object_initializer", 39);
			LeaveRule("anonymous_object_initializer", 39);
			LeaveRule_anonymous_object_initializer();
			if (state.backtracking > 0) { Memoize(input, 39, anonymous_object_initializer_StartIndex); }

		}
		DebugLocation(190, 45);
		} finally { DebugExitRule(GrammarFileName, "anonymous_object_initializer"); }
		return retval;

	}
	// $ANTLR end "anonymous_object_initializer"

	partial void EnterRule_member_declarator_list();
	partial void LeaveRule_member_declarator_list();

	// $ANTLR start "member_declarator_list"
	// cs.g:191:8: public member_declarator_list : member_declarator ( ',' member_declarator )* ;
	[GrammarRule("member_declarator_list")]
	public XAstParserRuleReturnScope member_declarator_list()
	{
		EnterRule_member_declarator_list();
		EnterRule("member_declarator_list", 40);
		var retval = new XAstParserRuleReturnScope("member_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int member_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal163 = default(IToken);
		XAstParserRuleReturnScope member_declarator162 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope member_declarator164 = default(XAstParserRuleReturnScope);

		object char_literal163_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "member_declarator_list");
		DebugLocation(191, 45);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// cs.g:191:30: ( member_declarator ( ',' member_declarator )* )
			DebugEnterAlt(1);
			// cs.g:192:2: member_declarator ( ',' member_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(192, 2);
			PushFollow(Follow._member_declarator_in_member_declarator_list1472);
			member_declarator162=member_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_declarator162.Tree, member_declarator162, retval);
			DebugLocation(192, 21);
			// cs.g:192:21: ( ',' member_declarator )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==74))
				{
					int LA44_1 = input.LA(2);

					if ((LA44_1==Character_literal||LA44_1==DEFINE||LA44_1==ELIF||LA44_1==ENDIF||LA44_1==FALSE||(LA44_1>=Hex_number && LA44_1<=IDENTIFIER)||(LA44_1>=NULL && LA44_1<=NUMBER)||LA44_1==Real_literal||LA44_1==STRINGLITERAL||LA44_1==TRUE||LA44_1==UNDEF||LA44_1==Verbatim_string_literal||LA44_1==95||(LA44_1>=97 && LA44_1<=98)||(LA44_1>=100 && LA44_1<=101)||LA44_1==103||(LA44_1>=105 && LA44_1<=106)||LA44_1==109||LA44_1==114||LA44_1==117||(LA44_1>=119 && LA44_1<=120)||LA44_1==122||LA44_1==126||LA44_1==129||(LA44_1>=132 && LA44_1<=133)||LA44_1==135||LA44_1==138||LA44_1==141||(LA44_1>=143 && LA44_1<=144)||(LA44_1>=146 && LA44_1<=148)||(LA44_1>=151 && LA44_1<=152)||LA44_1==154||LA44_1==157||LA44_1==160||LA44_1==162||LA44_1==167||LA44_1==169||(LA44_1>=171 && LA44_1<=173)||LA44_1==177||LA44_1==183||(LA44_1>=185 && LA44_1<=186)||(LA44_1>=189 && LA44_1<=190)||LA44_1==194||LA44_1==196))
					{
						alt44 = 1;
					}


				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:192:22: ',' member_declarator
					{
					DebugLocation(192, 22);
					char_literal163=(IToken)Match(input,74,Follow._74_in_member_declarator_list1476); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal163_tree = (object)adaptor.Create(char_literal163, retval);
					adaptor.AddChild(root_0, char_literal163_tree);
					}
					DebugLocation(192, 26);
					PushFollow(Follow._member_declarator_in_member_declarator_list1478);
					member_declarator164=member_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, member_declarator164.Tree, member_declarator164, retval);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_declarator_list", 40);
			LeaveRule("member_declarator_list", 40);
			LeaveRule_member_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 40, member_declarator_list_StartIndex); }

		}
		DebugLocation(192, 45);
		} finally { DebugExitRule(GrammarFileName, "member_declarator_list"); }
		return retval;

	}
	// $ANTLR end "member_declarator_list"

	partial void EnterRule_member_declarator();
	partial void LeaveRule_member_declarator();

	// $ANTLR start "member_declarator"
	// cs.g:193:8: public member_declarator : qid ( '=' expression )? ;
	[GrammarRule("member_declarator")]
	public XAstParserRuleReturnScope member_declarator()
	{
		EnterRule_member_declarator();
		EnterRule("member_declarator", 41);
		var retval = new XAstParserRuleReturnScope("member_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int member_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal166 = default(IToken);
		XAstParserRuleReturnScope qid165 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression167 = default(XAstParserRuleReturnScope);

		object char_literal166_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "member_declarator");
		DebugLocation(193, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// cs.g:193:25: ( qid ( '=' expression )? )
			DebugEnterAlt(1);
			// cs.g:194:2: qid ( '=' expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(194, 2);
			PushFollow(Follow._qid_in_member_declarator1492);
			qid165=qid();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qid165.Tree, qid165, retval);
			DebugLocation(194, 8);
			// cs.g:194:8: ( '=' expression )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==85))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:194:9: '=' expression
				{
				DebugLocation(194, 9);
				char_literal166=(IToken)Match(input,85,Follow._85_in_member_declarator1497); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal166_tree = (object)adaptor.Create(char_literal166, retval);
				adaptor.AddChild(root_0, char_literal166_tree);
				}
				DebugLocation(194, 15);
				PushFollow(Follow._expression_in_member_declarator1501);
				expression167=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression167.Tree, expression167, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_declarator", 41);
			LeaveRule("member_declarator", 41);
			LeaveRule_member_declarator();
			if (state.backtracking > 0) { Memoize(input, 41, member_declarator_StartIndex); }

		}
		DebugLocation(194, 27);
		} finally { DebugExitRule(GrammarFileName, "member_declarator"); }
		return retval;

	}
	// $ANTLR end "member_declarator"

	partial void EnterRule_primary_or_array_creation_expression();
	partial void LeaveRule_primary_or_array_creation_expression();

	// $ANTLR start "primary_or_array_creation_expression"
	// cs.g:195:8: public primary_or_array_creation_expression : ( ( array_creation_expression )=> array_creation_expression | primary_expression );
	[GrammarRule("primary_or_array_creation_expression")]
	public XAstParserRuleReturnScope primary_or_array_creation_expression()
	{
		EnterRule_primary_or_array_creation_expression();
		EnterRule("primary_or_array_creation_expression", 42);
		var retval = new XAstParserRuleReturnScope("primary_or_array_creation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_or_array_creation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope array_creation_expression168 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression169 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "primary_or_array_creation_expression");
		DebugLocation(195, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// cs.g:195:44: ( ( array_creation_expression )=> array_creation_expression | primary_expression )
			int alt46=2;
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==150))
			{
				int LA46_1 = input.LA(2);

				if ((EvaluatePredicate(synpred11_cs_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA46_0==Character_literal||LA46_0==DEFINE||LA46_0==ELIF||LA46_0==ENDIF||LA46_0==FALSE||(LA46_0>=Hex_number && LA46_0<=IDENTIFIER)||(LA46_0>=NULL && LA46_0<=NUMBER)||LA46_0==Real_literal||LA46_0==STRINGLITERAL||LA46_0==TRUE||LA46_0==UNDEF||LA46_0==Verbatim_string_literal||LA46_0==68||LA46_0==95||(LA46_0>=97 && LA46_0<=98)||(LA46_0>=100 && LA46_0<=103)||(LA46_0>=105 && LA46_0<=106)||(LA46_0>=109 && LA46_0<=110)||(LA46_0>=114 && LA46_0<=117)||(LA46_0>=119 && LA46_0<=120)||LA46_0==122||LA46_0==126||LA46_0==129||(LA46_0>=132 && LA46_0<=133)||LA46_0==135||LA46_0==138||LA46_0==141||(LA46_0>=143 && LA46_0<=144)||(LA46_0>=146 && LA46_0<=148)||(LA46_0>=151 && LA46_0<=152)||LA46_0==154||LA46_0==157||LA46_0==160||LA46_0==162||LA46_0==167||LA46_0==169||(LA46_0>=171 && LA46_0<=174)||LA46_0==177||LA46_0==180||(LA46_0>=183 && LA46_0<=187)||(LA46_0>=189 && LA46_0<=190)||LA46_0==194||LA46_0==196))
			{
				alt46 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:196:2: ( array_creation_expression )=> array_creation_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(196, 33);
				PushFollow(Follow._array_creation_expression_in_primary_or_array_creation_expression1519);
				array_creation_expression168=array_creation_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_creation_expression168.Tree, array_creation_expression168, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:197:4: primary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(197, 4);
				PushFollow(Follow._primary_expression_in_primary_or_array_creation_expression1524);
				primary_expression169=primary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression169.Tree, primary_expression169, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_or_array_creation_expression", 42);
			LeaveRule("primary_or_array_creation_expression", 42);
			LeaveRule_primary_or_array_creation_expression();
			if (state.backtracking > 0) { Memoize(input, 42, primary_or_array_creation_expression_StartIndex); }

		}
		DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_or_array_creation_expression"); }
		return retval;

	}
	// $ANTLR end "primary_or_array_creation_expression"

	partial void EnterRule_array_creation_expression();
	partial void LeaveRule_array_creation_expression();

	// $ANTLR start "array_creation_expression"
	// cs.g:200:8: public array_creation_expression : 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) ;
	[GrammarRule("array_creation_expression")]
	public XAstParserRuleReturnScope array_creation_expression()
	{
		EnterRule_array_creation_expression();
		EnterRule("array_creation_expression", 43);
		var retval = new XAstParserRuleReturnScope("array_creation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int array_creation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal170 = default(IToken);
		IToken char_literal172 = default(IToken);
		IToken char_literal174 = default(IToken);
		XAstParserRuleReturnScope type171 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_list173 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope rank_specifiers175 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope array_initializer176 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments177 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope invocation_part178 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope invocation_part179 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments180 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope array_initializer181 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope rank_specifier182 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope array_initializer183 = default(XAstParserRuleReturnScope);

		object string_literal170_tree = default(object);
		object char_literal172_tree = default(object);
		object char_literal174_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "array_creation_expression");
		DebugLocation(200, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// cs.g:200:33: ( 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) )
			DebugEnterAlt(1);
			// cs.g:201:2: 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(201, 2);
			string_literal170=(IToken)Match(input,150,Follow._150_in_array_creation_expression1537); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal170_tree = (object)adaptor.Create(string_literal170, retval);
			adaptor.AddChild(root_0, string_literal170_tree);
			}
			DebugLocation(202, 3);
			// cs.g:202:3: ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==DEFINE||LA52_0==ELIF||LA52_0==ENDIF||LA52_0==IDENTIFIER||LA52_0==UNDEF||LA52_0==95||(LA52_0>=97 && LA52_0<=98)||(LA52_0>=100 && LA52_0<=101)||LA52_0==103||(LA52_0>=105 && LA52_0<=106)||LA52_0==109||LA52_0==114||LA52_0==117||(LA52_0>=119 && LA52_0<=120)||LA52_0==122||LA52_0==126||LA52_0==129||(LA52_0>=132 && LA52_0<=133)||LA52_0==135||LA52_0==138||LA52_0==141||(LA52_0>=143 && LA52_0<=144)||(LA52_0>=146 && LA52_0<=148)||(LA52_0>=151 && LA52_0<=152)||LA52_0==154||LA52_0==157||LA52_0==160||LA52_0==162||LA52_0==167||LA52_0==169||(LA52_0>=171 && LA52_0<=173)||LA52_0==177||LA52_0==183||(LA52_0>=185 && LA52_0<=186)||(LA52_0>=189 && LA52_0<=190)||LA52_0==192||LA52_0==194||LA52_0==196))
			{
				alt52 = 1;
			}
			else if ((LA52_0==91))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:202:4: type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
				{
				DebugLocation(202, 4);
				PushFollow(Follow._type_in_array_creation_expression1545);
				type171=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type171.Tree, type171, retval);
				DebugLocation(202, 11);
				// cs.g:202:11: ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==91))
				{
					alt51 = 1;
				}
				else if ((LA51_0==197))
				{
					alt51 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:202:12: '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
					{
					DebugLocation(202, 12);
					char_literal172=(IToken)Match(input,91,Follow._91_in_array_creation_expression1550); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal172_tree = (object)adaptor.Create(char_literal172, retval);
					adaptor.AddChild(root_0, char_literal172_tree);
					}
					DebugLocation(202, 18);
					PushFollow(Follow._expression_list_in_array_creation_expression1554);
					expression_list173=expression_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list173.Tree, expression_list173, retval);
					DebugLocation(202, 36);
					char_literal174=(IToken)Match(input,92,Follow._92_in_array_creation_expression1558); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal174_tree = (object)adaptor.Create(char_literal174, retval);
					adaptor.AddChild(root_0, char_literal174_tree);
					}
					DebugLocation(203, 6);
					// cs.g:203:6: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
					int alt50=2;
					try { DebugEnterSubRule(50);
					try { DebugEnterDecision(50, false);
					try
					{
						alt50 = dfa50.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:203:8: ( rank_specifiers )? ( array_initializer )?
						{
						DebugLocation(203, 8);
						// cs.g:203:8: ( rank_specifiers )?
						int alt47=2;
						try { DebugEnterSubRule(47);
						try { DebugEnterDecision(47, false);
						int LA47_0 = input.LA(1);

						if ((LA47_0==91))
						{
							alt47 = 1;
						}
						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// cs.g:203:8: rank_specifiers
							{
							DebugLocation(203, 8);
							PushFollow(Follow._rank_specifiers_in_array_creation_expression1570);
							rank_specifiers175=rank_specifiers();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifiers175.Tree, rank_specifiers175, retval);

							}
							break;

						}
						} finally { DebugExitSubRule(47); }

						DebugLocation(203, 27);
						// cs.g:203:27: ( array_initializer )?
						int alt48=2;
						try { DebugEnterSubRule(48);
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==197))
						{
							alt48 = 1;
						}
						} finally { DebugExitDecision(48); }
						switch (alt48)
						{
						case 1:
							DebugEnterAlt(1);
							// cs.g:203:27: array_initializer
							{
							DebugLocation(203, 27);
							PushFollow(Follow._array_initializer_in_array_creation_expression1575);
							array_initializer176=array_initializer();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer176.Tree, array_initializer176, retval);

							}
							break;

						}
						} finally { DebugExitSubRule(48); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// cs.g:205:8: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
						{
						DebugLocation(205, 8);
						// cs.g:205:8: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
						try { DebugEnterSubRule(49);
						while (true)
						{
							int alt49=3;
							try { DebugEnterDecision(49, false);
							int LA49_0 = input.LA(1);

							if ((LA49_0==68))
							{
								int LA49_1 = input.LA(2);

								if ((EvaluatePredicate(synpred12_cs_fragment)))
								{
									alt49 = 1;
								}


							}
							else if ((LA49_0==DOT||LA49_0==PTR||LA49_0==91))
							{
								alt49 = 2;
							}


							} finally { DebugExitDecision(49); }
							switch ( alt49 )
							{
							case 1:
								DebugEnterAlt(1);
								// cs.g:205:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
								{
								DebugLocation(205, 10);
								// cs.g:205:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
								DebugEnterAlt(1);
								// cs.g:205:11: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
								{
								DebugLocation(205, 43);
								PushFollow(Follow._arguments_in_array_creation_expression1611);
								arguments177=arguments();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, arguments177.Tree, arguments177, retval);
								DebugLocation(205, 55);
								PushFollow(Follow._invocation_part_in_array_creation_expression1615);
								invocation_part178=invocation_part();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part178.Tree, invocation_part178, retval);

								}


								}
								break;
							case 2:
								DebugEnterAlt(2);
								// cs.g:206:10: invocation_part
								{
								DebugLocation(206, 10);
								PushFollow(Follow._invocation_part_in_array_creation_expression1627);
								invocation_part179=invocation_part();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part179.Tree, invocation_part179, retval);

								}
								break;

							default:
								goto loop49;
							}
						}

						loop49:
							;

						} finally { DebugExitSubRule(49); }

						DebugLocation(206, 30);
						PushFollow(Follow._arguments_in_array_creation_expression1633);
						arguments180=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, arguments180.Tree, arguments180, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(50); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:208:7: array_initializer
					{
					DebugLocation(208, 7);
					PushFollow(Follow._array_initializer_in_array_creation_expression1655);
					array_initializer181=array_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer181.Tree, array_initializer181, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:210:5: rank_specifier ( array_initializer )
				{
				DebugLocation(210, 5);
				PushFollow(Follow._rank_specifier_in_array_creation_expression1669);
				rank_specifier182=rank_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifier182.Tree, rank_specifier182, retval);
				DebugLocation(211, 4);
				// cs.g:211:4: ( array_initializer )
				DebugEnterAlt(1);
				// cs.g:211:5: array_initializer
				{
				DebugLocation(211, 5);
				PushFollow(Follow._array_initializer_in_array_creation_expression1678);
				array_initializer183=array_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer183.Tree, array_initializer183, retval);

				}


				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_creation_expression", 43);
			LeaveRule("array_creation_expression", 43);
			LeaveRule_array_creation_expression();
			if (state.backtracking > 0) { Memoize(input, 43, array_creation_expression_StartIndex); }

		}
		DebugLocation(213, 4);
		} finally { DebugExitRule(GrammarFileName, "array_creation_expression"); }
		return retval;

	}
	// $ANTLR end "array_creation_expression"

	partial void EnterRule_array_initializer();
	partial void LeaveRule_array_initializer();

	// $ANTLR start "array_initializer"
	// cs.g:214:8: public array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
	[GrammarRule("array_initializer")]
	public XAstParserRuleReturnScope array_initializer()
	{
		EnterRule_array_initializer();
		EnterRule("array_initializer", 44);
		var retval = new XAstParserRuleReturnScope("array_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int array_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal184 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken char_literal187 = default(IToken);
		XAstParserRuleReturnScope variable_initializer_list185 = default(XAstParserRuleReturnScope);

		object char_literal184_tree = default(object);
		object char_literal186_tree = default(object);
		object char_literal187_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "array_initializer");
		DebugLocation(214, 47);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// cs.g:214:25: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// cs.g:215:2: '{' ( variable_initializer_list )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(215, 2);
			char_literal184=(IToken)Match(input,197,Follow._197_in_array_initializer1701); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal184_tree = (object)adaptor.Create(char_literal184, retval);
			adaptor.AddChild(root_0, char_literal184_tree);
			}
			DebugLocation(215, 8);
			// cs.g:215:8: ( variable_initializer_list )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==Character_literal||LA53_0==DEFINE||LA53_0==ELIF||LA53_0==ENDIF||LA53_0==FALSE||(LA53_0>=Hex_number && LA53_0<=IDENTIFIER)||(LA53_0>=MINUS && LA53_0<=NUMBER)||LA53_0==Real_literal||LA53_0==STRINGLITERAL||LA53_0==TRUE||LA53_0==UNDEF||LA53_0==Verbatim_string_literal||LA53_0==61||LA53_0==66||(LA53_0>=68 && LA53_0<=69)||(LA53_0>=71 && LA53_0<=72)||LA53_0==75||LA53_0==95||(LA53_0>=97 && LA53_0<=98)||(LA53_0>=100 && LA53_0<=103)||(LA53_0>=105 && LA53_0<=106)||(LA53_0>=109 && LA53_0<=110)||(LA53_0>=114 && LA53_0<=117)||(LA53_0>=119 && LA53_0<=120)||LA53_0==122||LA53_0==126||LA53_0==129||(LA53_0>=132 && LA53_0<=133)||LA53_0==135||LA53_0==138||LA53_0==141||(LA53_0>=143 && LA53_0<=144)||(LA53_0>=146 && LA53_0<=148)||(LA53_0>=150 && LA53_0<=152)||LA53_0==154||LA53_0==157||LA53_0==160||LA53_0==162||LA53_0==167||LA53_0==169||(LA53_0>=171 && LA53_0<=174)||LA53_0==177||LA53_0==180||(LA53_0>=183 && LA53_0<=187)||(LA53_0>=189 && LA53_0<=190)||LA53_0==194||(LA53_0>=196 && LA53_0<=197)||LA53_0==202))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:215:8: variable_initializer_list
				{
				DebugLocation(215, 8);
				PushFollow(Follow._variable_initializer_list_in_array_initializer1705);
				variable_initializer_list185=variable_initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer_list185.Tree, variable_initializer_list185, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(215, 37);
			// cs.g:215:37: ( ',' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==74))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:215:37: ','
				{
				DebugLocation(215, 37);
				char_literal186=(IToken)Match(input,74,Follow._74_in_array_initializer1710); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal186_tree = (object)adaptor.Create(char_literal186, retval);
				adaptor.AddChild(root_0, char_literal186_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(215, 44);
			char_literal187=(IToken)Match(input,201,Follow._201_in_array_initializer1715); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal187_tree = (object)adaptor.Create(char_literal187, retval);
			adaptor.AddChild(root_0, char_literal187_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_initializer", 44);
			LeaveRule("array_initializer", 44);
			LeaveRule_array_initializer();
			if (state.backtracking > 0) { Memoize(input, 44, array_initializer_StartIndex); }

		}
		DebugLocation(215, 47);
		} finally { DebugExitRule(GrammarFileName, "array_initializer"); }
		return retval;

	}
	// $ANTLR end "array_initializer"

	partial void EnterRule_variable_initializer_list();
	partial void LeaveRule_variable_initializer_list();

	// $ANTLR start "variable_initializer_list"
	// cs.g:216:8: public variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
	[GrammarRule("variable_initializer_list")]
	public XAstParserRuleReturnScope variable_initializer_list()
	{
		EnterRule_variable_initializer_list();
		EnterRule("variable_initializer_list", 45);
		var retval = new XAstParserRuleReturnScope("variable_initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int variable_initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal189 = default(IToken);
		XAstParserRuleReturnScope variable_initializer188 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_initializer190 = default(XAstParserRuleReturnScope);

		object char_literal189_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variable_initializer_list");
		DebugLocation(216, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// cs.g:216:33: ( variable_initializer ( ',' variable_initializer )* )
			DebugEnterAlt(1);
			// cs.g:217:2: variable_initializer ( ',' variable_initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(217, 2);
			PushFollow(Follow._variable_initializer_in_variable_initializer_list1725);
			variable_initializer188=variable_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer188.Tree, variable_initializer188, retval);
			DebugLocation(217, 23);
			// cs.g:217:23: ( ',' variable_initializer )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==74))
				{
					int LA55_1 = input.LA(2);

					if ((LA55_1==Character_literal||LA55_1==DEFINE||LA55_1==ELIF||LA55_1==ENDIF||LA55_1==FALSE||(LA55_1>=Hex_number && LA55_1<=IDENTIFIER)||(LA55_1>=MINUS && LA55_1<=NUMBER)||LA55_1==Real_literal||LA55_1==STRINGLITERAL||LA55_1==TRUE||LA55_1==UNDEF||LA55_1==Verbatim_string_literal||LA55_1==61||LA55_1==66||(LA55_1>=68 && LA55_1<=69)||(LA55_1>=71 && LA55_1<=72)||LA55_1==75||LA55_1==95||(LA55_1>=97 && LA55_1<=98)||(LA55_1>=100 && LA55_1<=103)||(LA55_1>=105 && LA55_1<=106)||(LA55_1>=109 && LA55_1<=110)||(LA55_1>=114 && LA55_1<=117)||(LA55_1>=119 && LA55_1<=120)||LA55_1==122||LA55_1==126||LA55_1==129||(LA55_1>=132 && LA55_1<=133)||LA55_1==135||LA55_1==138||LA55_1==141||(LA55_1>=143 && LA55_1<=144)||(LA55_1>=146 && LA55_1<=148)||(LA55_1>=150 && LA55_1<=152)||LA55_1==154||LA55_1==157||LA55_1==160||LA55_1==162||LA55_1==167||LA55_1==169||(LA55_1>=171 && LA55_1<=174)||LA55_1==177||LA55_1==180||(LA55_1>=183 && LA55_1<=187)||(LA55_1>=189 && LA55_1<=190)||LA55_1==194||(LA55_1>=196 && LA55_1<=197)||LA55_1==202))
					{
						alt55 = 1;
					}


				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:217:24: ',' variable_initializer
					{
					DebugLocation(217, 24);
					char_literal189=(IToken)Match(input,74,Follow._74_in_variable_initializer_list1728); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal189_tree = (object)adaptor.Create(char_literal189, retval);
					adaptor.AddChild(root_0, char_literal189_tree);
					}
					DebugLocation(217, 28);
					PushFollow(Follow._variable_initializer_in_variable_initializer_list1730);
					variable_initializer190=variable_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer190.Tree, variable_initializer190, retval);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_initializer_list", 45);
			LeaveRule("variable_initializer_list", 45);
			LeaveRule_variable_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 45, variable_initializer_list_StartIndex); }

		}
		DebugLocation(217, 50);
		} finally { DebugExitRule(GrammarFileName, "variable_initializer_list"); }
		return retval;

	}
	// $ANTLR end "variable_initializer_list"

	partial void EnterRule_variable_initializer();
	partial void LeaveRule_variable_initializer();

	// $ANTLR start "variable_initializer"
	// cs.g:218:8: public variable_initializer : ( expression | array_initializer );
	[GrammarRule("variable_initializer")]
	public XAstParserRuleReturnScope variable_initializer()
	{
		EnterRule_variable_initializer();
		EnterRule("variable_initializer", 46);
		var retval = new XAstParserRuleReturnScope("variable_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int variable_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression191 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope array_initializer192 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "variable_initializer");
		DebugLocation(218, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// cs.g:218:28: ( expression | array_initializer )
			int alt56=2;
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==Character_literal||LA56_0==DEFINE||LA56_0==ELIF||LA56_0==ENDIF||LA56_0==FALSE||(LA56_0>=Hex_number && LA56_0<=IDENTIFIER)||(LA56_0>=MINUS && LA56_0<=NUMBER)||LA56_0==Real_literal||LA56_0==STRINGLITERAL||LA56_0==TRUE||LA56_0==UNDEF||LA56_0==Verbatim_string_literal||LA56_0==61||LA56_0==66||(LA56_0>=68 && LA56_0<=69)||(LA56_0>=71 && LA56_0<=72)||LA56_0==75||LA56_0==95||(LA56_0>=97 && LA56_0<=98)||(LA56_0>=100 && LA56_0<=103)||(LA56_0>=105 && LA56_0<=106)||(LA56_0>=109 && LA56_0<=110)||(LA56_0>=114 && LA56_0<=117)||(LA56_0>=119 && LA56_0<=120)||LA56_0==122||LA56_0==126||LA56_0==129||(LA56_0>=132 && LA56_0<=133)||LA56_0==135||LA56_0==138||LA56_0==141||(LA56_0>=143 && LA56_0<=144)||(LA56_0>=146 && LA56_0<=148)||(LA56_0>=150 && LA56_0<=152)||LA56_0==154||LA56_0==157||LA56_0==160||LA56_0==162||LA56_0==167||LA56_0==169||(LA56_0>=171 && LA56_0<=174)||LA56_0==177||LA56_0==180||(LA56_0>=183 && LA56_0<=187)||(LA56_0>=189 && LA56_0<=190)||LA56_0==194||LA56_0==196||LA56_0==202))
			{
				alt56 = 1;
			}
			else if ((LA56_0==197))
			{
				alt56 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:219:2: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(219, 2);
				PushFollow(Follow._expression_in_variable_initializer1742);
				expression191=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression191.Tree, expression191, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:219:15: array_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(219, 15);
				PushFollow(Follow._array_initializer_in_variable_initializer1746);
				array_initializer192=array_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer192.Tree, array_initializer192, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_initializer", 46);
			LeaveRule("variable_initializer", 46);
			LeaveRule_variable_initializer();
			if (state.backtracking > 0) { Memoize(input, 46, variable_initializer_StartIndex); }

		}
		DebugLocation(219, 32);
		} finally { DebugExitRule(GrammarFileName, "variable_initializer"); }
		return retval;

	}
	// $ANTLR end "variable_initializer"

	partial void EnterRule_sizeof_expression();
	partial void LeaveRule_sizeof_expression();

	// $ANTLR start "sizeof_expression"
	// cs.g:220:8: public sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
	[GrammarRule("sizeof_expression")]
	public XAstParserRuleReturnScope sizeof_expression()
	{
		EnterRule_sizeof_expression();
		EnterRule("sizeof_expression", 47);
		var retval = new XAstParserRuleReturnScope("sizeof_expression");
		
		retval.Start = (IToken)input.LT(1);
		int sizeof_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal193 = default(IToken);
		IToken char_literal194 = default(IToken);
		IToken char_literal196 = default(IToken);
		XAstParserRuleReturnScope unmanaged_type195 = default(XAstParserRuleReturnScope);

		object string_literal193_tree = default(object);
		object char_literal194_tree = default(object);
		object char_literal196_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "sizeof_expression");
		DebugLocation(220, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// cs.g:220:25: ( 'sizeof' '(' unmanaged_type ')' )
			DebugEnterAlt(1);
			// cs.g:221:2: 'sizeof' '(' unmanaged_type ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(221, 2);
			string_literal193=(IToken)Match(input,174,Follow._174_in_sizeof_expression1756); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal193_tree = (object)adaptor.Create(string_literal193, retval);
			adaptor.AddChild(root_0, string_literal193_tree);
			}
			DebugLocation(221, 13);
			char_literal194=(IToken)Match(input,68,Follow._68_in_sizeof_expression1760); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal194_tree = (object)adaptor.Create(char_literal194, retval);
			adaptor.AddChild(root_0, char_literal194_tree);
			}
			DebugLocation(221, 19);
			PushFollow(Follow._unmanaged_type_in_sizeof_expression1764);
			unmanaged_type195=unmanaged_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unmanaged_type195.Tree, unmanaged_type195, retval);
			DebugLocation(221, 36);
			char_literal196=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_sizeof_expression1768), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal196_tree = (object)adaptor.Create(char_literal196, retval);
			adaptor.AddChild(root_0, char_literal196_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sizeof_expression", 47);
			LeaveRule("sizeof_expression", 47);
			LeaveRule_sizeof_expression();
			if (state.backtracking > 0) { Memoize(input, 47, sizeof_expression_StartIndex); }

		}
		DebugLocation(221, 38);
		} finally { DebugExitRule(GrammarFileName, "sizeof_expression"); }
		return retval;

	}
	// $ANTLR end "sizeof_expression"

	partial void EnterRule_checked_expression();
	partial void LeaveRule_checked_expression();

	// $ANTLR start "checked_expression"
	// cs.g:222:8: public checked_expression : 'checked' '(' expression ')' ;
	[GrammarRule("checked_expression")]
	public XAstParserRuleReturnScope checked_expression()
	{
		EnterRule_checked_expression();
		EnterRule("checked_expression", 48);
		var retval = new XAstParserRuleReturnScope("checked_expression");
		
		retval.Start = (IToken)input.LT(1);
		int checked_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal197 = default(IToken);
		IToken char_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		XAstParserRuleReturnScope expression199 = default(XAstParserRuleReturnScope);

		object string_literal197_tree = default(object);
		object char_literal198_tree = default(object);
		object char_literal200_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "checked_expression");
		DebugLocation(222, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// cs.g:222:26: ( 'checked' '(' expression ')' )
			DebugEnterAlt(1);
			// cs.g:223:2: 'checked' '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(223, 2);
			string_literal197=(IToken)Match(input,110,Follow._110_in_checked_expression1778); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal197_tree = (object)adaptor.Create(string_literal197, retval);
			adaptor.AddChild(root_0, string_literal197_tree);
			}
			DebugLocation(223, 14);
			char_literal198=(IToken)Match(input,68,Follow._68_in_checked_expression1782); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal198_tree = (object)adaptor.Create(char_literal198, retval);
			adaptor.AddChild(root_0, char_literal198_tree);
			}
			DebugLocation(223, 20);
			PushFollow(Follow._expression_in_checked_expression1786);
			expression199=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression199.Tree, expression199, retval);
			DebugLocation(223, 33);
			char_literal200=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_checked_expression1790), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal200_tree = (object)adaptor.Create(char_literal200, retval);
			adaptor.AddChild(root_0, char_literal200_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("checked_expression", 48);
			LeaveRule("checked_expression", 48);
			LeaveRule_checked_expression();
			if (state.backtracking > 0) { Memoize(input, 48, checked_expression_StartIndex); }

		}
		DebugLocation(223, 36);
		} finally { DebugExitRule(GrammarFileName, "checked_expression"); }
		return retval;

	}
	// $ANTLR end "checked_expression"

	partial void EnterRule_unchecked_expression();
	partial void LeaveRule_unchecked_expression();

	// $ANTLR start "unchecked_expression"
	// cs.g:224:8: public unchecked_expression : 'unchecked' '(' expression ')' ;
	[GrammarRule("unchecked_expression")]
	public XAstParserRuleReturnScope unchecked_expression()
	{
		EnterRule_unchecked_expression();
		EnterRule("unchecked_expression", 49);
		var retval = new XAstParserRuleReturnScope("unchecked_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unchecked_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal201 = default(IToken);
		IToken char_literal202 = default(IToken);
		IToken char_literal204 = default(IToken);
		XAstParserRuleReturnScope expression203 = default(XAstParserRuleReturnScope);

		object string_literal201_tree = default(object);
		object char_literal202_tree = default(object);
		object char_literal204_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unchecked_expression");
		DebugLocation(224, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// cs.g:224:28: ( 'unchecked' '(' expression ')' )
			DebugEnterAlt(1);
			// cs.g:225:2: 'unchecked' '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(225, 2);
			string_literal201=(IToken)Match(input,187,Follow._187_in_unchecked_expression1801); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal201_tree = (object)adaptor.Create(string_literal201, retval);
			adaptor.AddChild(root_0, string_literal201_tree);
			}
			DebugLocation(225, 16);
			char_literal202=(IToken)Match(input,68,Follow._68_in_unchecked_expression1805); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal202_tree = (object)adaptor.Create(char_literal202, retval);
			adaptor.AddChild(root_0, char_literal202_tree);
			}
			DebugLocation(225, 22);
			PushFollow(Follow._expression_in_unchecked_expression1809);
			expression203=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression203.Tree, expression203, retval);
			DebugLocation(225, 35);
			char_literal204=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_unchecked_expression1813), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal204_tree = (object)adaptor.Create(char_literal204, retval);
			adaptor.AddChild(root_0, char_literal204_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unchecked_expression", 49);
			LeaveRule("unchecked_expression", 49);
			LeaveRule_unchecked_expression();
			if (state.backtracking > 0) { Memoize(input, 49, unchecked_expression_StartIndex); }

		}
		DebugLocation(225, 38);
		} finally { DebugExitRule(GrammarFileName, "unchecked_expression"); }
		return retval;

	}
	// $ANTLR end "unchecked_expression"

	partial void EnterRule_default_value_expression();
	partial void LeaveRule_default_value_expression();

	// $ANTLR start "default_value_expression"
	// cs.g:226:8: public default_value_expression : 'default' '(' type ')' ;
	[GrammarRule("default_value_expression")]
	public XAstParserRuleReturnScope default_value_expression()
	{
		EnterRule_default_value_expression();
		EnterRule("default_value_expression", 50);
		var retval = new XAstParserRuleReturnScope("default_value_expression");
		
		retval.Start = (IToken)input.LT(1);
		int default_value_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal205 = default(IToken);
		IToken char_literal206 = default(IToken);
		IToken char_literal208 = default(IToken);
		XAstParserRuleReturnScope type207 = default(XAstParserRuleReturnScope);

		object string_literal205_tree = default(object);
		object char_literal206_tree = default(object);
		object char_literal208_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "default_value_expression");
		DebugLocation(226, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// cs.g:226:32: ( 'default' '(' type ')' )
			DebugEnterAlt(1);
			// cs.g:227:2: 'default' '(' type ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(227, 2);
			string_literal205=(IToken)Match(input,115,Follow._115_in_default_value_expression1824); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal205_tree = (object)adaptor.Create(string_literal205, retval);
			adaptor.AddChild(root_0, string_literal205_tree);
			}
			DebugLocation(227, 14);
			char_literal206=(IToken)Match(input,68,Follow._68_in_default_value_expression1828); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal206_tree = (object)adaptor.Create(char_literal206, retval);
			adaptor.AddChild(root_0, char_literal206_tree);
			}
			DebugLocation(227, 20);
			PushFollow(Follow._type_in_default_value_expression1832);
			type207=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type207.Tree, type207, retval);
			DebugLocation(227, 27);
			char_literal208=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_default_value_expression1836), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal208_tree = (object)adaptor.Create(char_literal208, retval);
			adaptor.AddChild(root_0, char_literal208_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("default_value_expression", 50);
			LeaveRule("default_value_expression", 50);
			LeaveRule_default_value_expression();
			if (state.backtracking > 0) { Memoize(input, 50, default_value_expression_StartIndex); }

		}
		DebugLocation(227, 30);
		} finally { DebugExitRule(GrammarFileName, "default_value_expression"); }
		return retval;

	}
	// $ANTLR end "default_value_expression"

	partial void EnterRule_anonymous_method_expression();
	partial void LeaveRule_anonymous_method_expression();

	// $ANTLR start "anonymous_method_expression"
	// cs.g:228:8: public anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
	[GrammarRule("anonymous_method_expression")]
	public XAstParserRuleReturnScope anonymous_method_expression()
	{
		EnterRule_anonymous_method_expression();
		EnterRule("anonymous_method_expression", 51);
		var retval = new XAstParserRuleReturnScope("anonymous_method_expression");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_method_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal209 = default(IToken);
		XAstParserRuleReturnScope explicit_anonymous_function_signature210 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope block211 = default(XAstParserRuleReturnScope);

		object string_literal209_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymous_method_expression");
		DebugLocation(228, 60);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// cs.g:228:35: ( 'delegate' ( explicit_anonymous_function_signature )? block )
			DebugEnterAlt(1);
			// cs.g:229:2: 'delegate' ( explicit_anonymous_function_signature )? block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(229, 2);
			string_literal209=(IToken)Match(input,116,Follow._116_in_anonymous_method_expression1846); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal209_tree = (object)adaptor.Create(string_literal209, retval);
			adaptor.AddChild(root_0, string_literal209_tree);
			}
			DebugLocation(229, 15);
			// cs.g:229:15: ( explicit_anonymous_function_signature )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==68))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:229:15: explicit_anonymous_function_signature
				{
				DebugLocation(229, 15);
				PushFollow(Follow._explicit_anonymous_function_signature_in_anonymous_method_expression1850);
				explicit_anonymous_function_signature210=explicit_anonymous_function_signature();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_signature210.Tree, explicit_anonymous_function_signature210, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(229, 56);
			PushFollow(Follow._block_in_anonymous_method_expression1855);
			block211=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block211.Tree, block211, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_method_expression", 51);
			LeaveRule("anonymous_method_expression", 51);
			LeaveRule_anonymous_method_expression();
			if (state.backtracking > 0) { Memoize(input, 51, anonymous_method_expression_StartIndex); }

		}
		DebugLocation(229, 60);
		} finally { DebugExitRule(GrammarFileName, "anonymous_method_expression"); }
		return retval;

	}
	// $ANTLR end "anonymous_method_expression"

	partial void EnterRule_explicit_anonymous_function_signature();
	partial void LeaveRule_explicit_anonymous_function_signature();

	// $ANTLR start "explicit_anonymous_function_signature"
	// cs.g:230:8: public explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' ;
	[GrammarRule("explicit_anonymous_function_signature")]
	public XAstParserRuleReturnScope explicit_anonymous_function_signature()
	{
		EnterRule_explicit_anonymous_function_signature();
		EnterRule("explicit_anonymous_function_signature", 52);
		var retval = new XAstParserRuleReturnScope("explicit_anonymous_function_signature");
		
		retval.Start = (IToken)input.LT(1);
		int explicit_anonymous_function_signature_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal212 = default(IToken);
		IToken char_literal214 = default(IToken);
		XAstParserRuleReturnScope explicit_anonymous_function_parameter_list213 = default(XAstParserRuleReturnScope);

		object char_literal212_tree = default(object);
		object char_literal214_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_signature");
		DebugLocation(230, 57);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// cs.g:230:45: ( '(' ( explicit_anonymous_function_parameter_list )? ')' )
			DebugEnterAlt(1);
			// cs.g:231:2: '(' ( explicit_anonymous_function_parameter_list )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(231, 2);
			char_literal212=(IToken)Match(input,68,Follow._68_in_explicit_anonymous_function_signature1864); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal212_tree = (object)adaptor.Create(char_literal212, retval);
			adaptor.AddChild(root_0, char_literal212_tree);
			}
			DebugLocation(231, 8);
			// cs.g:231:8: ( explicit_anonymous_function_parameter_list )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==DEFINE||LA58_0==ELIF||LA58_0==ENDIF||LA58_0==IDENTIFIER||LA58_0==UNDEF||LA58_0==95||(LA58_0>=97 && LA58_0<=98)||(LA58_0>=100 && LA58_0<=101)||LA58_0==103||(LA58_0>=105 && LA58_0<=106)||LA58_0==109||LA58_0==114||LA58_0==117||(LA58_0>=119 && LA58_0<=120)||LA58_0==122||LA58_0==126||LA58_0==129||(LA58_0>=132 && LA58_0<=133)||LA58_0==135||LA58_0==138||LA58_0==141||(LA58_0>=143 && LA58_0<=144)||(LA58_0>=146 && LA58_0<=148)||(LA58_0>=151 && LA58_0<=152)||(LA58_0>=154 && LA58_0<=155)||LA58_0==157||LA58_0==160||LA58_0==162||(LA58_0>=166 && LA58_0<=167)||LA58_0==169||(LA58_0>=171 && LA58_0<=173)||LA58_0==177||LA58_0==183||(LA58_0>=185 && LA58_0<=186)||(LA58_0>=189 && LA58_0<=190)||LA58_0==192||LA58_0==194||LA58_0==196))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:231:8: explicit_anonymous_function_parameter_list
				{
				DebugLocation(231, 8);
				PushFollow(Follow._explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature1868);
				explicit_anonymous_function_parameter_list213=explicit_anonymous_function_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter_list213.Tree, explicit_anonymous_function_parameter_list213, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(58); }

			DebugLocation(231, 54);
			char_literal214=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_explicit_anonymous_function_signature1873), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal214_tree = (object)adaptor.Create(char_literal214, retval);
			adaptor.AddChild(root_0, char_literal214_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicit_anonymous_function_signature", 52);
			LeaveRule("explicit_anonymous_function_signature", 52);
			LeaveRule_explicit_anonymous_function_signature();
			if (state.backtracking > 0) { Memoize(input, 52, explicit_anonymous_function_signature_StartIndex); }

		}
		DebugLocation(231, 57);
		} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_signature"); }
		return retval;

	}
	// $ANTLR end "explicit_anonymous_function_signature"

	partial void EnterRule_explicit_anonymous_function_parameter_list();
	partial void LeaveRule_explicit_anonymous_function_parameter_list();

	// $ANTLR start "explicit_anonymous_function_parameter_list"
	// cs.g:232:8: public explicit_anonymous_function_parameter_list : explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* ;
	[GrammarRule("explicit_anonymous_function_parameter_list")]
	public XAstParserRuleReturnScope explicit_anonymous_function_parameter_list()
	{
		EnterRule_explicit_anonymous_function_parameter_list();
		EnterRule("explicit_anonymous_function_parameter_list", 53);
		var retval = new XAstParserRuleReturnScope("explicit_anonymous_function_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int explicit_anonymous_function_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal216 = default(IToken);
		XAstParserRuleReturnScope explicit_anonymous_function_parameter215 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope explicit_anonymous_function_parameter217 = default(XAstParserRuleReturnScope);

		object char_literal216_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_parameter_list");
		DebugLocation(232, 88);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// cs.g:232:50: ( explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* )
			DebugEnterAlt(1);
			// cs.g:233:2: explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(233, 2);
			PushFollow(Follow._explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list1883);
			explicit_anonymous_function_parameter215=explicit_anonymous_function_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter215.Tree, explicit_anonymous_function_parameter215, retval);
			DebugLocation(233, 42);
			// cs.g:233:42: ( ',' explicit_anonymous_function_parameter )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==74))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:233:43: ',' explicit_anonymous_function_parameter
					{
					DebugLocation(233, 43);
					char_literal216=(IToken)Match(input,74,Follow._74_in_explicit_anonymous_function_parameter_list1888); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal216_tree = (object)adaptor.Create(char_literal216, retval);
					adaptor.AddChild(root_0, char_literal216_tree);
					}
					DebugLocation(233, 49);
					PushFollow(Follow._explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list1892);
					explicit_anonymous_function_parameter217=explicit_anonymous_function_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter217.Tree, explicit_anonymous_function_parameter217, retval);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicit_anonymous_function_parameter_list", 53);
			LeaveRule("explicit_anonymous_function_parameter_list", 53);
			LeaveRule_explicit_anonymous_function_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 53, explicit_anonymous_function_parameter_list_StartIndex); }

		}
		DebugLocation(233, 88);
		} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_parameter_list"); }
		return retval;

	}
	// $ANTLR end "explicit_anonymous_function_parameter_list"

	partial void EnterRule_explicit_anonymous_function_parameter();
	partial void LeaveRule_explicit_anonymous_function_parameter();

	// $ANTLR start "explicit_anonymous_function_parameter"
	// cs.g:234:8: public explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
	[GrammarRule("explicit_anonymous_function_parameter")]
	public XAstParserRuleReturnScope explicit_anonymous_function_parameter()
	{
		EnterRule_explicit_anonymous_function_parameter();
		EnterRule("explicit_anonymous_function_parameter", 54);
		var retval = new XAstParserRuleReturnScope("explicit_anonymous_function_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int explicit_anonymous_function_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope anonymous_function_parameter_modifier218 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type219 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier220 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_parameter");
		DebugLocation(234, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// cs.g:234:45: ( ( anonymous_function_parameter_modifier )? type identifier )
			DebugEnterAlt(1);
			// cs.g:235:2: ( anonymous_function_parameter_modifier )? type identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(235, 2);
			// cs.g:235:2: ( anonymous_function_parameter_modifier )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==155||LA60_0==166))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:235:2: anonymous_function_parameter_modifier
				{
				DebugLocation(235, 2);
				PushFollow(Follow._anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter1905);
				anonymous_function_parameter_modifier218=anonymous_function_parameter_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_function_parameter_modifier218.Tree, anonymous_function_parameter_modifier218, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(235, 43);
			PushFollow(Follow._type_in_explicit_anonymous_function_parameter1910);
			type219=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type219.Tree, type219, retval);
			DebugLocation(235, 50);
			PushFollow(Follow._identifier_in_explicit_anonymous_function_parameter1914);
			identifier220=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier220.Tree, identifier220, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicit_anonymous_function_parameter", 54);
			LeaveRule("explicit_anonymous_function_parameter", 54);
			LeaveRule_explicit_anonymous_function_parameter();
			if (state.backtracking > 0) { Memoize(input, 54, explicit_anonymous_function_parameter_StartIndex); }

		}
		DebugLocation(235, 59);
		} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_parameter"); }
		return retval;

	}
	// $ANTLR end "explicit_anonymous_function_parameter"

	partial void EnterRule_anonymous_function_parameter_modifier();
	partial void LeaveRule_anonymous_function_parameter_modifier();

	// $ANTLR start "anonymous_function_parameter_modifier"
	// cs.g:236:8: public anonymous_function_parameter_modifier : ( 'ref' | 'out' );
	[GrammarRule("anonymous_function_parameter_modifier")]
	public XAstParserRuleReturnScope anonymous_function_parameter_modifier()
	{
		EnterRule_anonymous_function_parameter_modifier();
		EnterRule("anonymous_function_parameter_modifier", 55);
		var retval = new XAstParserRuleReturnScope("anonymous_function_parameter_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_function_parameter_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set221 = default(IToken);

		object set221_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymous_function_parameter_modifier");
		DebugLocation(236, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// cs.g:236:45: ( 'ref' | 'out' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(236, 45);

			set221=(IToken)input.LT(1);
			if (input.LA(1)==155||input.LA(1)==166)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set221, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_parameter_modifier", 55);
			LeaveRule("anonymous_function_parameter_modifier", 55);
			LeaveRule_anonymous_function_parameter_modifier();
			if (state.backtracking > 0) { Memoize(input, 55, anonymous_function_parameter_modifier_StartIndex); }

		}
		DebugLocation(237, 14);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_parameter_modifier"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_parameter_modifier"

	partial void EnterRule_object_creation_expression();
	partial void LeaveRule_object_creation_expression();

	// $ANTLR start "object_creation_expression"
	// cs.g:241:8: public object_creation_expression : type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
	[GrammarRule("object_creation_expression")]
	public XAstParserRuleReturnScope object_creation_expression()
	{
		EnterRule_object_creation_expression();
		EnterRule("object_creation_expression", 56);
		var retval = new XAstParserRuleReturnScope("object_creation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int object_creation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal223 = default(IToken);
		IToken char_literal225 = default(IToken);
		XAstParserRuleReturnScope type222 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_list224 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope object_or_collection_initializer226 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope object_or_collection_initializer227 = default(XAstParserRuleReturnScope);

		object char_literal223_tree = default(object);
		object char_literal225_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "object_creation_expression");
		DebugLocation(241, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// cs.g:241:34: ( type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
			DebugEnterAlt(1);
			// cs.g:243:2: type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(243, 2);
			PushFollow(Follow._type_in_object_creation_expression1942);
			type222=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type222.Tree, type222, retval);
			DebugLocation(244, 3);
			// cs.g:244:3: ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==68))
			{
				alt63 = 1;
			}
			else if ((LA63_0==197))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:244:5: '(' ( argument_list )? ')' ( object_or_collection_initializer )?
				{
				DebugLocation(244, 5);
				char_literal223=(IToken)Match(input,68,Follow._68_in_object_creation_expression1951); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal223_tree = (object)adaptor.Create(char_literal223, retval);
				adaptor.AddChild(root_0, char_literal223_tree);
				}
				DebugLocation(244, 11);
				// cs.g:244:11: ( argument_list )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==Character_literal||LA61_0==DEFINE||LA61_0==ELIF||LA61_0==ENDIF||LA61_0==FALSE||(LA61_0>=Hex_number && LA61_0<=IDENTIFIER)||(LA61_0>=MINUS && LA61_0<=NUMBER)||LA61_0==Real_literal||LA61_0==STRINGLITERAL||LA61_0==TRUE||LA61_0==UNDEF||LA61_0==Verbatim_string_literal||LA61_0==61||LA61_0==66||(LA61_0>=68 && LA61_0<=69)||(LA61_0>=71 && LA61_0<=72)||LA61_0==75||LA61_0==95||(LA61_0>=97 && LA61_0<=98)||(LA61_0>=100 && LA61_0<=103)||(LA61_0>=105 && LA61_0<=106)||(LA61_0>=109 && LA61_0<=110)||(LA61_0>=114 && LA61_0<=117)||(LA61_0>=119 && LA61_0<=120)||LA61_0==122||LA61_0==126||LA61_0==129||(LA61_0>=132 && LA61_0<=133)||LA61_0==135||LA61_0==138||LA61_0==141||(LA61_0>=143 && LA61_0<=144)||(LA61_0>=146 && LA61_0<=148)||(LA61_0>=150 && LA61_0<=152)||(LA61_0>=154 && LA61_0<=155)||LA61_0==157||LA61_0==160||LA61_0==162||(LA61_0>=166 && LA61_0<=167)||LA61_0==169||(LA61_0>=171 && LA61_0<=174)||LA61_0==177||LA61_0==180||(LA61_0>=183 && LA61_0<=187)||(LA61_0>=189 && LA61_0<=190)||LA61_0==194||LA61_0==196||LA61_0==202))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:244:11: argument_list
					{
					DebugLocation(244, 11);
					PushFollow(Follow._argument_list_in_object_creation_expression1955);
					argument_list224=argument_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, argument_list224.Tree, argument_list224, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(61); }

				DebugLocation(244, 28);
				char_literal225=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_object_creation_expression1960), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal225_tree = (object)adaptor.Create(char_literal225, retval);
				adaptor.AddChild(root_0, char_literal225_tree);
				}
				DebugLocation(244, 34);
				// cs.g:244:34: ( object_or_collection_initializer )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==197))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:244:34: object_or_collection_initializer
					{
					DebugLocation(244, 34);
					PushFollow(Follow._object_or_collection_initializer_in_object_creation_expression1964);
					object_or_collection_initializer226=object_or_collection_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, object_or_collection_initializer226.Tree, object_or_collection_initializer226, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(62); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:245:7: object_or_collection_initializer
				{
				DebugLocation(245, 7);
				PushFollow(Follow._object_or_collection_initializer_in_object_creation_expression1975);
				object_or_collection_initializer227=object_or_collection_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, object_or_collection_initializer227.Tree, object_or_collection_initializer227, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_creation_expression", 56);
			LeaveRule("object_creation_expression", 56);
			LeaveRule_object_creation_expression();
			if (state.backtracking > 0) { Memoize(input, 56, object_creation_expression_StartIndex); }

		}
		DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "object_creation_expression"); }
		return retval;

	}
	// $ANTLR end "object_creation_expression"

	partial void EnterRule_object_or_collection_initializer();
	partial void LeaveRule_object_or_collection_initializer();

	// $ANTLR start "object_or_collection_initializer"
	// cs.g:247:8: public object_or_collection_initializer : '{' ( object_initializer | collection_initializer ) ;
	[GrammarRule("object_or_collection_initializer")]
	public XAstParserRuleReturnScope object_or_collection_initializer()
	{
		EnterRule_object_or_collection_initializer();
		EnterRule("object_or_collection_initializer", 57);
		var retval = new XAstParserRuleReturnScope("object_or_collection_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int object_or_collection_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal228 = default(IToken);
		XAstParserRuleReturnScope object_initializer229 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope collection_initializer230 = default(XAstParserRuleReturnScope);

		object char_literal228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "object_or_collection_initializer");
		DebugLocation(247, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// cs.g:247:40: ( '{' ( object_initializer | collection_initializer ) )
			DebugEnterAlt(1);
			// cs.g:248:2: '{' ( object_initializer | collection_initializer )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(248, 2);
			char_literal228=(IToken)Match(input,197,Follow._197_in_object_or_collection_initializer1989); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal228_tree = (object)adaptor.Create(char_literal228, retval);
			adaptor.AddChild(root_0, char_literal228_tree);
			}
			DebugLocation(248, 7);
			// cs.g:248:7: ( object_initializer | collection_initializer )
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA64_1 = input.LA(2);

				if ((LA64_1==85))
				{
					alt64 = 1;
				}
				else if ((LA64_1==DOT||LA64_1==GT||LA64_1==MINUS||LA64_1==PTR||(LA64_1>=62 && LA64_1<=63)||(LA64_1>=65 && LA64_1<=66)||(LA64_1>=68 && LA64_1<=69)||(LA64_1>=71 && LA64_1<=72)||(LA64_1>=74 && LA64_1<=75)||LA64_1==77||(LA64_1>=80 && LA64_1<=82)||LA64_1==84||(LA64_1>=86 && LA64_1<=91)||LA64_1==93||LA64_1==99||LA64_1==142||LA64_1==198||(LA64_1>=200 && LA64_1<=201)))
				{
					alt64 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				int LA64_2 = input.LA(2);

				if ((LA64_2==85))
				{
					alt64 = 1;
				}
				else if ((LA64_2==DEFINE||LA64_2==DOT||LA64_2==ELIF||LA64_2==ENDIF||LA64_2==GT||LA64_2==IDENTIFIER||LA64_2==MINUS||LA64_2==PTR||LA64_2==UNDEF||(LA64_2>=62 && LA64_2<=63)||(LA64_2>=65 && LA64_2<=66)||(LA64_2>=68 && LA64_2<=69)||(LA64_2>=71 && LA64_2<=72)||(LA64_2>=74 && LA64_2<=75)||LA64_2==77||(LA64_2>=80 && LA64_2<=82)||LA64_2==84||(LA64_2>=86 && LA64_2<=91)||LA64_2==93||LA64_2==95||(LA64_2>=97 && LA64_2<=101)||LA64_2==103||(LA64_2>=105 && LA64_2<=106)||LA64_2==109||LA64_2==114||LA64_2==117||(LA64_2>=119 && LA64_2<=120)||LA64_2==122||LA64_2==126||LA64_2==129||(LA64_2>=132 && LA64_2<=133)||LA64_2==135||LA64_2==138||(LA64_2>=141 && LA64_2<=144)||(LA64_2>=146 && LA64_2<=148)||(LA64_2>=151 && LA64_2<=152)||LA64_2==154||LA64_2==157||LA64_2==160||LA64_2==162||LA64_2==167||LA64_2==169||(LA64_2>=171 && LA64_2<=173)||LA64_2==177||LA64_2==183||(LA64_2>=185 && LA64_2<=186)||(LA64_2>=189 && LA64_2<=190)||LA64_2==192||LA64_2==194||LA64_2==196||LA64_2==198||(LA64_2>=200 && LA64_2<=201)))
				{
					alt64 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 74:
			case 201:
				{
				alt64 = 1;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 197:
			case 202:
				{
				alt64 = 2;
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA64_5 = input.LA(2);

				if ((LA64_5==85))
				{
					alt64 = 1;
				}
				else if ((LA64_5==DOT||LA64_5==GT||LA64_5==MINUS||LA64_5==PTR||(LA64_5>=62 && LA64_5<=63)||(LA64_5>=65 && LA64_5<=66)||(LA64_5>=68 && LA64_5<=69)||(LA64_5>=71 && LA64_5<=72)||(LA64_5>=74 && LA64_5<=75)||LA64_5==77||(LA64_5>=80 && LA64_5<=82)||LA64_5==84||(LA64_5>=86 && LA64_5<=91)||LA64_5==93||LA64_5==99||LA64_5==142||LA64_5==198||(LA64_5>=200 && LA64_5<=201)))
				{
					alt64 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:248:8: object_initializer
				{
				DebugLocation(248, 8);
				PushFollow(Follow._object_initializer_in_object_or_collection_initializer1993);
				object_initializer229=object_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, object_initializer229.Tree, object_initializer229, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:249:5: collection_initializer
				{
				DebugLocation(249, 5);
				PushFollow(Follow._collection_initializer_in_object_or_collection_initializer2000);
				collection_initializer230=collection_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collection_initializer230.Tree, collection_initializer230, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_or_collection_initializer", 57);
			LeaveRule("object_or_collection_initializer", 57);
			LeaveRule_object_or_collection_initializer();
			if (state.backtracking > 0) { Memoize(input, 57, object_or_collection_initializer_StartIndex); }

		}
		DebugLocation(249, 28);
		} finally { DebugExitRule(GrammarFileName, "object_or_collection_initializer"); }
		return retval;

	}
	// $ANTLR end "object_or_collection_initializer"

	partial void EnterRule_collection_initializer();
	partial void LeaveRule_collection_initializer();

	// $ANTLR start "collection_initializer"
	// cs.g:250:8: public collection_initializer : element_initializer_list ( ',' )? '}' ;
	[GrammarRule("collection_initializer")]
	public XAstParserRuleReturnScope collection_initializer()
	{
		EnterRule_collection_initializer();
		EnterRule("collection_initializer", 58);
		var retval = new XAstParserRuleReturnScope("collection_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int collection_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal232 = default(IToken);
		IToken char_literal233 = default(IToken);
		XAstParserRuleReturnScope element_initializer_list231 = default(XAstParserRuleReturnScope);

		object char_literal232_tree = default(object);
		object char_literal233_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "collection_initializer");
		DebugLocation(250, 39);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// cs.g:250:30: ( element_initializer_list ( ',' )? '}' )
			DebugEnterAlt(1);
			// cs.g:251:2: element_initializer_list ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(251, 2);
			PushFollow(Follow._element_initializer_list_in_collection_initializer2012);
			element_initializer_list231=element_initializer_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, element_initializer_list231.Tree, element_initializer_list231, retval);
			DebugLocation(251, 29);
			// cs.g:251:29: ( ',' )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==74))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:251:29: ','
				{
				DebugLocation(251, 29);
				char_literal232=(IToken)Match(input,74,Follow._74_in_collection_initializer2016); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal232_tree = (object)adaptor.Create(char_literal232, retval);
				adaptor.AddChild(root_0, char_literal232_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(251, 36);
			char_literal233=(IToken)Match(input,201,Follow._201_in_collection_initializer2021); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal233_tree = (object)adaptor.Create(char_literal233, retval);
			adaptor.AddChild(root_0, char_literal233_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collection_initializer", 58);
			LeaveRule("collection_initializer", 58);
			LeaveRule_collection_initializer();
			if (state.backtracking > 0) { Memoize(input, 58, collection_initializer_StartIndex); }

		}
		DebugLocation(251, 39);
		} finally { DebugExitRule(GrammarFileName, "collection_initializer"); }
		return retval;

	}
	// $ANTLR end "collection_initializer"

	partial void EnterRule_element_initializer_list();
	partial void LeaveRule_element_initializer_list();

	// $ANTLR start "element_initializer_list"
	// cs.g:252:8: public element_initializer_list : element_initializer ( ',' element_initializer )* ;
	[GrammarRule("element_initializer_list")]
	public XAstParserRuleReturnScope element_initializer_list()
	{
		EnterRule_element_initializer_list();
		EnterRule("element_initializer_list", 59);
		var retval = new XAstParserRuleReturnScope("element_initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int element_initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal235 = default(IToken);
		XAstParserRuleReturnScope element_initializer234 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope element_initializer236 = default(XAstParserRuleReturnScope);

		object char_literal235_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "element_initializer_list");
		DebugLocation(252, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// cs.g:252:32: ( element_initializer ( ',' element_initializer )* )
			DebugEnterAlt(1);
			// cs.g:253:2: element_initializer ( ',' element_initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(253, 2);
			PushFollow(Follow._element_initializer_in_element_initializer_list2032);
			element_initializer234=element_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, element_initializer234.Tree, element_initializer234, retval);
			DebugLocation(253, 23);
			// cs.g:253:23: ( ',' element_initializer )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==74))
				{
					int LA66_1 = input.LA(2);

					if ((LA66_1==Character_literal||LA66_1==DEFINE||LA66_1==ELIF||LA66_1==ENDIF||LA66_1==FALSE||(LA66_1>=Hex_number && LA66_1<=IDENTIFIER)||(LA66_1>=MINUS && LA66_1<=NUMBER)||LA66_1==Real_literal||LA66_1==STRINGLITERAL||LA66_1==TRUE||LA66_1==UNDEF||LA66_1==Verbatim_string_literal||LA66_1==61||LA66_1==66||(LA66_1>=68 && LA66_1<=69)||(LA66_1>=71 && LA66_1<=72)||LA66_1==75||LA66_1==95||(LA66_1>=97 && LA66_1<=98)||(LA66_1>=100 && LA66_1<=103)||(LA66_1>=105 && LA66_1<=106)||(LA66_1>=109 && LA66_1<=110)||(LA66_1>=114 && LA66_1<=117)||(LA66_1>=119 && LA66_1<=120)||LA66_1==122||LA66_1==126||LA66_1==129||(LA66_1>=132 && LA66_1<=133)||LA66_1==135||LA66_1==138||LA66_1==141||(LA66_1>=143 && LA66_1<=144)||(LA66_1>=146 && LA66_1<=148)||(LA66_1>=150 && LA66_1<=152)||LA66_1==154||LA66_1==157||LA66_1==160||LA66_1==162||LA66_1==167||LA66_1==169||(LA66_1>=171 && LA66_1<=174)||LA66_1==177||LA66_1==180||(LA66_1>=183 && LA66_1<=187)||(LA66_1>=189 && LA66_1<=190)||LA66_1==194||(LA66_1>=196 && LA66_1<=197)||LA66_1==202))
					{
						alt66 = 1;
					}


				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:253:24: ',' element_initializer
					{
					DebugLocation(253, 24);
					char_literal235=(IToken)Match(input,74,Follow._74_in_element_initializer_list2036); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal235_tree = (object)adaptor.Create(char_literal235, retval);
					adaptor.AddChild(root_0, char_literal235_tree);
					}
					DebugLocation(253, 28);
					PushFollow(Follow._element_initializer_in_element_initializer_list2038);
					element_initializer236=element_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, element_initializer236.Tree, element_initializer236, retval);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_initializer_list", 59);
			LeaveRule("element_initializer_list", 59);
			LeaveRule_element_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 59, element_initializer_list_StartIndex); }

		}
		DebugLocation(253, 49);
		} finally { DebugExitRule(GrammarFileName, "element_initializer_list"); }
		return retval;

	}
	// $ANTLR end "element_initializer_list"

	partial void EnterRule_element_initializer();
	partial void LeaveRule_element_initializer();

	// $ANTLR start "element_initializer"
	// cs.g:254:8: public element_initializer : ( non_assignment_expression | '{' expression_list '}' );
	[GrammarRule("element_initializer")]
	public XAstParserRuleReturnScope element_initializer()
	{
		EnterRule_element_initializer();
		EnterRule("element_initializer", 60);
		var retval = new XAstParserRuleReturnScope("element_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int element_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal238 = default(IToken);
		IToken char_literal240 = default(IToken);
		XAstParserRuleReturnScope non_assignment_expression237 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_list239 = default(XAstParserRuleReturnScope);

		object char_literal238_tree = default(object);
		object char_literal240_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "element_initializer");
		DebugLocation(254, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// cs.g:254:27: ( non_assignment_expression | '{' expression_list '}' )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==Character_literal||LA67_0==DEFINE||LA67_0==ELIF||LA67_0==ENDIF||LA67_0==FALSE||(LA67_0>=Hex_number && LA67_0<=IDENTIFIER)||(LA67_0>=MINUS && LA67_0<=NUMBER)||LA67_0==Real_literal||LA67_0==STRINGLITERAL||LA67_0==TRUE||LA67_0==UNDEF||LA67_0==Verbatim_string_literal||LA67_0==61||LA67_0==66||(LA67_0>=68 && LA67_0<=69)||(LA67_0>=71 && LA67_0<=72)||LA67_0==75||LA67_0==95||(LA67_0>=97 && LA67_0<=98)||(LA67_0>=100 && LA67_0<=103)||(LA67_0>=105 && LA67_0<=106)||(LA67_0>=109 && LA67_0<=110)||(LA67_0>=114 && LA67_0<=117)||(LA67_0>=119 && LA67_0<=120)||LA67_0==122||LA67_0==126||LA67_0==129||(LA67_0>=132 && LA67_0<=133)||LA67_0==135||LA67_0==138||LA67_0==141||(LA67_0>=143 && LA67_0<=144)||(LA67_0>=146 && LA67_0<=148)||(LA67_0>=150 && LA67_0<=152)||LA67_0==154||LA67_0==157||LA67_0==160||LA67_0==162||LA67_0==167||LA67_0==169||(LA67_0>=171 && LA67_0<=174)||LA67_0==177||LA67_0==180||(LA67_0>=183 && LA67_0<=187)||(LA67_0>=189 && LA67_0<=190)||LA67_0==194||LA67_0==196||LA67_0==202))
			{
				alt67 = 1;
			}
			else if ((LA67_0==197))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:255:2: non_assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(255, 2);
				PushFollow(Follow._non_assignment_expression_in_element_initializer2051);
				non_assignment_expression237=non_assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, non_assignment_expression237.Tree, non_assignment_expression237, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:256:4: '{' expression_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(256, 4);
				char_literal238=(IToken)Match(input,197,Follow._197_in_element_initializer2057); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal238_tree = (object)adaptor.Create(char_literal238, retval);
				adaptor.AddChild(root_0, char_literal238_tree);
				}
				DebugLocation(256, 10);
				PushFollow(Follow._expression_list_in_element_initializer2061);
				expression_list239=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list239.Tree, expression_list239, retval);
				DebugLocation(256, 28);
				char_literal240=(IToken)Match(input,201,Follow._201_in_element_initializer2065); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal240_tree = (object)adaptor.Create(char_literal240, retval);
				adaptor.AddChild(root_0, char_literal240_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_initializer", 60);
			LeaveRule("element_initializer", 60);
			LeaveRule_element_initializer();
			if (state.backtracking > 0) { Memoize(input, 60, element_initializer_StartIndex); }

		}
		DebugLocation(256, 31);
		} finally { DebugExitRule(GrammarFileName, "element_initializer"); }
		return retval;

	}
	// $ANTLR end "element_initializer"

	partial void EnterRule_object_initializer();
	partial void LeaveRule_object_initializer();

	// $ANTLR start "object_initializer"
	// cs.g:263:8: public object_initializer : ( member_initializer_list )? ( ',' )? '}' ;
	[GrammarRule("object_initializer")]
	public XAstParserRuleReturnScope object_initializer()
	{
		EnterRule_object_initializer();
		EnterRule("object_initializer", 61);
		var retval = new XAstParserRuleReturnScope("object_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int object_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal242 = default(IToken);
		IToken char_literal243 = default(IToken);
		XAstParserRuleReturnScope member_initializer_list241 = default(XAstParserRuleReturnScope);

		object char_literal242_tree = default(object);
		object char_literal243_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "object_initializer");
		DebugLocation(263, 39);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// cs.g:263:26: ( ( member_initializer_list )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// cs.g:264:2: ( member_initializer_list )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(264, 2);
			// cs.g:264:2: ( member_initializer_list )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==DEFINE||LA68_0==ELIF||LA68_0==ENDIF||LA68_0==IDENTIFIER||LA68_0==UNDEF||LA68_0==95||(LA68_0>=97 && LA68_0<=98)||(LA68_0>=100 && LA68_0<=101)||LA68_0==105||LA68_0==117||LA68_0==120||LA68_0==122||LA68_0==126||(LA68_0>=132 && LA68_0<=133)||LA68_0==135||LA68_0==141||(LA68_0>=143 && LA68_0<=144)||(LA68_0>=147 && LA68_0<=148)||LA68_0==152||LA68_0==154||LA68_0==157||LA68_0==160||LA68_0==162||LA68_0==167||(LA68_0>=171 && LA68_0<=172)||LA68_0==183||LA68_0==190||LA68_0==194||LA68_0==196))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:264:2: member_initializer_list
				{
				DebugLocation(264, 2);
				PushFollow(Follow._member_initializer_list_in_object_initializer2082);
				member_initializer_list241=member_initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, member_initializer_list241.Tree, member_initializer_list241, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(264, 29);
			// cs.g:264:29: ( ',' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==74))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:264:29: ','
				{
				DebugLocation(264, 29);
				char_literal242=(IToken)Match(input,74,Follow._74_in_object_initializer2087); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal242_tree = (object)adaptor.Create(char_literal242, retval);
				adaptor.AddChild(root_0, char_literal242_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(264, 36);
			char_literal243=(IToken)Match(input,201,Follow._201_in_object_initializer2092); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal243_tree = (object)adaptor.Create(char_literal243, retval);
			adaptor.AddChild(root_0, char_literal243_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_initializer", 61);
			LeaveRule("object_initializer", 61);
			LeaveRule_object_initializer();
			if (state.backtracking > 0) { Memoize(input, 61, object_initializer_StartIndex); }

		}
		DebugLocation(264, 39);
		} finally { DebugExitRule(GrammarFileName, "object_initializer"); }
		return retval;

	}
	// $ANTLR end "object_initializer"

	partial void EnterRule_member_initializer_list();
	partial void LeaveRule_member_initializer_list();

	// $ANTLR start "member_initializer_list"
	// cs.g:265:8: public member_initializer_list : member_initializer ( ',' member_initializer ) ;
	[GrammarRule("member_initializer_list")]
	public XAstParserRuleReturnScope member_initializer_list()
	{
		EnterRule_member_initializer_list();
		EnterRule("member_initializer_list", 62);
		var retval = new XAstParserRuleReturnScope("member_initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int member_initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal245 = default(IToken);
		XAstParserRuleReturnScope member_initializer244 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope member_initializer246 = default(XAstParserRuleReturnScope);

		object char_literal245_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "member_initializer_list");
		DebugLocation(265, 46);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// cs.g:265:31: ( member_initializer ( ',' member_initializer ) )
			DebugEnterAlt(1);
			// cs.g:266:2: member_initializer ( ',' member_initializer )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(266, 2);
			PushFollow(Follow._member_initializer_in_member_initializer_list2103);
			member_initializer244=member_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_initializer244.Tree, member_initializer244, retval);
			DebugLocation(266, 22);
			// cs.g:266:22: ( ',' member_initializer )
			DebugEnterAlt(1);
			// cs.g:266:23: ',' member_initializer
			{
			DebugLocation(266, 23);
			char_literal245=(IToken)Match(input,74,Follow._74_in_member_initializer_list2107); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal245_tree = (object)adaptor.Create(char_literal245, retval);
			adaptor.AddChild(root_0, char_literal245_tree);
			}
			DebugLocation(266, 27);
			PushFollow(Follow._member_initializer_in_member_initializer_list2109);
			member_initializer246=member_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_initializer246.Tree, member_initializer246, retval);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_initializer_list", 62);
			LeaveRule("member_initializer_list", 62);
			LeaveRule_member_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 62, member_initializer_list_StartIndex); }

		}
		DebugLocation(266, 46);
		} finally { DebugExitRule(GrammarFileName, "member_initializer_list"); }
		return retval;

	}
	// $ANTLR end "member_initializer_list"

	partial void EnterRule_member_initializer();
	partial void LeaveRule_member_initializer();

	// $ANTLR start "member_initializer"
	// cs.g:267:8: public member_initializer : identifier '=' initializer_value ;
	[GrammarRule("member_initializer")]
	public XAstParserRuleReturnScope member_initializer()
	{
		EnterRule_member_initializer();
		EnterRule("member_initializer", 63);
		var retval = new XAstParserRuleReturnScope("member_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int member_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal248 = default(IToken);
		XAstParserRuleReturnScope identifier247 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer_value249 = default(XAstParserRuleReturnScope);

		object char_literal248_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "member_initializer");
		DebugLocation(267, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// cs.g:267:26: ( identifier '=' initializer_value )
			DebugEnterAlt(1);
			// cs.g:268:2: identifier '=' initializer_value
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(268, 2);
			PushFollow(Follow._identifier_in_member_initializer2121);
			identifier247=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier247.Tree, identifier247, retval);
			DebugLocation(268, 15);
			char_literal248=(IToken)Match(input,85,Follow._85_in_member_initializer2125); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal248_tree = (object)adaptor.Create(char_literal248, retval);
			adaptor.AddChild(root_0, char_literal248_tree);
			}
			DebugLocation(268, 21);
			PushFollow(Follow._initializer_value_in_member_initializer2129);
			initializer_value249=initializer_value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, initializer_value249.Tree, initializer_value249, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_initializer", 63);
			LeaveRule("member_initializer", 63);
			LeaveRule_member_initializer();
			if (state.backtracking > 0) { Memoize(input, 63, member_initializer_StartIndex); }

		}
		DebugLocation(268, 38);
		} finally { DebugExitRule(GrammarFileName, "member_initializer"); }
		return retval;

	}
	// $ANTLR end "member_initializer"

	partial void EnterRule_initializer_value();
	partial void LeaveRule_initializer_value();

	// $ANTLR start "initializer_value"
	// cs.g:269:8: public initializer_value : ( expression | object_or_collection_initializer );
	[GrammarRule("initializer_value")]
	public XAstParserRuleReturnScope initializer_value()
	{
		EnterRule_initializer_value();
		EnterRule("initializer_value", 64);
		var retval = new XAstParserRuleReturnScope("initializer_value");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_value_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression250 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope object_or_collection_initializer251 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "initializer_value");
		DebugLocation(269, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// cs.g:269:25: ( expression | object_or_collection_initializer )
			int alt70=2;
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==Character_literal||LA70_0==DEFINE||LA70_0==ELIF||LA70_0==ENDIF||LA70_0==FALSE||(LA70_0>=Hex_number && LA70_0<=IDENTIFIER)||(LA70_0>=MINUS && LA70_0<=NUMBER)||LA70_0==Real_literal||LA70_0==STRINGLITERAL||LA70_0==TRUE||LA70_0==UNDEF||LA70_0==Verbatim_string_literal||LA70_0==61||LA70_0==66||(LA70_0>=68 && LA70_0<=69)||(LA70_0>=71 && LA70_0<=72)||LA70_0==75||LA70_0==95||(LA70_0>=97 && LA70_0<=98)||(LA70_0>=100 && LA70_0<=103)||(LA70_0>=105 && LA70_0<=106)||(LA70_0>=109 && LA70_0<=110)||(LA70_0>=114 && LA70_0<=117)||(LA70_0>=119 && LA70_0<=120)||LA70_0==122||LA70_0==126||LA70_0==129||(LA70_0>=132 && LA70_0<=133)||LA70_0==135||LA70_0==138||LA70_0==141||(LA70_0>=143 && LA70_0<=144)||(LA70_0>=146 && LA70_0<=148)||(LA70_0>=150 && LA70_0<=152)||LA70_0==154||LA70_0==157||LA70_0==160||LA70_0==162||LA70_0==167||LA70_0==169||(LA70_0>=171 && LA70_0<=174)||LA70_0==177||LA70_0==180||(LA70_0>=183 && LA70_0<=187)||(LA70_0>=189 && LA70_0<=190)||LA70_0==194||LA70_0==196||LA70_0==202))
			{
				alt70 = 1;
			}
			else if ((LA70_0==197))
			{
				alt70 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:270:2: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(270, 2);
				PushFollow(Follow._expression_in_initializer_value2140);
				expression250=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression250.Tree, expression250, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:271:4: object_or_collection_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(271, 4);
				PushFollow(Follow._object_or_collection_initializer_in_initializer_value2146);
				object_or_collection_initializer251=object_or_collection_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, object_or_collection_initializer251.Tree, object_or_collection_initializer251, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer_value", 64);
			LeaveRule("initializer_value", 64);
			LeaveRule_initializer_value();
			if (state.backtracking > 0) { Memoize(input, 64, initializer_value_StartIndex); }

		}
		DebugLocation(271, 36);
		} finally { DebugExitRule(GrammarFileName, "initializer_value"); }
		return retval;

	}
	// $ANTLR end "initializer_value"

	partial void EnterRule_typeof_expression();
	partial void LeaveRule_typeof_expression();

	// $ANTLR start "typeof_expression"
	// cs.g:275:8: public typeof_expression : 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' ;
	[GrammarRule("typeof_expression")]
	public XAstParserRuleReturnScope typeof_expression()
	{
		EnterRule_typeof_expression();
		EnterRule("typeof_expression", 65);
		var retval = new XAstParserRuleReturnScope("typeof_expression");
		
		retval.Start = (IToken)input.LT(1);
		int typeof_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal252 = default(IToken);
		IToken char_literal253 = default(IToken);
		IToken string_literal256 = default(IToken);
		IToken char_literal257 = default(IToken);
		XAstParserRuleReturnScope unbound_type_name254 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type255 = default(XAstParserRuleReturnScope);

		object string_literal252_tree = default(object);
		object char_literal253_tree = default(object);
		object string_literal256_tree = default(object);
		object char_literal257_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeof_expression");
		DebugLocation(275, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// cs.g:275:25: ( 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' )
			DebugEnterAlt(1);
			// cs.g:276:2: 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(276, 2);
			string_literal252=(IToken)Match(input,184,Follow._184_in_typeof_expression2160); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal252_tree = (object)adaptor.Create(string_literal252, retval);
			adaptor.AddChild(root_0, string_literal252_tree);
			}
			DebugLocation(276, 13);
			char_literal253=(IToken)Match(input,68,Follow._68_in_typeof_expression2164); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal253_tree = (object)adaptor.Create(char_literal253, retval);
			adaptor.AddChild(root_0, char_literal253_tree);
			}
			DebugLocation(276, 19);
			// cs.g:276:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )
			int alt71=3;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			try
			{
				alt71 = dfa71.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:276:20: ( unbound_type_name )=> unbound_type_name
				{
				DebugLocation(276, 43);
				PushFollow(Follow._unbound_type_name_in_typeof_expression2175);
				unbound_type_name254=unbound_type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name254.Tree, unbound_type_name254, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:277:10: type
				{
				DebugLocation(277, 10);
				PushFollow(Follow._type_in_typeof_expression2186);
				type255=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type255.Tree, type255, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:278:10: 'void'
				{
				DebugLocation(278, 10);
				string_literal256=(IToken)Match(input,192,Follow._192_in_typeof_expression2198); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal256_tree = (object)adaptor.Create(string_literal256, retval);
				adaptor.AddChild(root_0, string_literal256_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(278, 20);
			char_literal257=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_typeof_expression2203), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal257_tree = (object)adaptor.Create(char_literal257, retval);
			adaptor.AddChild(root_0, char_literal257_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeof_expression", 65);
			LeaveRule("typeof_expression", 65);
			LeaveRule_typeof_expression();
			if (state.backtracking > 0) { Memoize(input, 65, typeof_expression_StartIndex); }

		}
		DebugLocation(278, 23);
		} finally { DebugExitRule(GrammarFileName, "typeof_expression"); }
		return retval;

	}
	// $ANTLR end "typeof_expression"

	partial void EnterRule_unbound_type_name();
	partial void LeaveRule_unbound_type_name();

	// $ANTLR start "unbound_type_name"
	// cs.g:283:8: public unbound_type_name : unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier ;
	[GrammarRule("unbound_type_name")]
	public XAstParserRuleReturnScope unbound_type_name()
	{
		EnterRule_unbound_type_name();
		EnterRule("unbound_type_name", 66);
		var retval = new XAstParserRuleReturnScope("unbound_type_name");
		
		retval.Start = (IToken)input.LT(1);
		int unbound_type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unbound_type_name_start258 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_dimension_specifier259 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unbound_type_name_part260 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unbound_type_name_part261 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_dimension_specifier262 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "unbound_type_name");
		DebugLocation(283, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// cs.g:283:25: ( unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier )
			DebugEnterAlt(1);
			// cs.g:285:2: unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(285, 2);
			PushFollow(Follow._unbound_type_name_start_in_unbound_type_name2220);
			unbound_type_name_start258=unbound_type_name_start();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name_start258.Tree, unbound_type_name_start258, retval);
			DebugLocation(286, 3);
			// cs.g:286:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=3;
				try { DebugEnterDecision(72, false);
				try
				{
					alt72 = dfa72.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:286:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
					{
					DebugLocation(286, 4);
					// cs.g:286:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
					DebugEnterAlt(1);
					// cs.g:286:5: ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part
					{
					DebugLocation(286, 44);
					PushFollow(Follow._generic_dimension_specifier_in_unbound_type_name2239);
					generic_dimension_specifier259=generic_dimension_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, generic_dimension_specifier259.Tree, generic_dimension_specifier259, retval);
					DebugLocation(286, 74);
					PushFollow(Follow._unbound_type_name_part_in_unbound_type_name2243);
					unbound_type_name_part260=unbound_type_name_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name_part260.Tree, unbound_type_name_part260, retval);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:287:5: unbound_type_name_part
					{
					DebugLocation(287, 5);
					PushFollow(Follow._unbound_type_name_part_in_unbound_type_name2250);
					unbound_type_name_part261=unbound_type_name_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name_part261.Tree, unbound_type_name_part261, retval);

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }

			DebugLocation(288, 4);
			PushFollow(Follow._generic_dimension_specifier_in_unbound_type_name2260);
			generic_dimension_specifier262=generic_dimension_specifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, generic_dimension_specifier262.Tree, generic_dimension_specifier262, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unbound_type_name", 66);
			LeaveRule("unbound_type_name", 66);
			LeaveRule_unbound_type_name();
			if (state.backtracking > 0) { Memoize(input, 66, unbound_type_name_StartIndex); }

		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "unbound_type_name"); }
		return retval;

	}
	// $ANTLR end "unbound_type_name"

	partial void EnterRule_unbound_type_name_start();
	partial void LeaveRule_unbound_type_name_start();

	// $ANTLR start "unbound_type_name_start"
	// cs.g:291:8: public unbound_type_name_start : identifier ( '::' identifier )? ;
	[GrammarRule("unbound_type_name_start")]
	public XAstParserRuleReturnScope unbound_type_name_start()
	{
		EnterRule_unbound_type_name_start();
		EnterRule("unbound_type_name_start", 67);
		var retval = new XAstParserRuleReturnScope("unbound_type_name_start");
		
		retval.Start = (IToken)input.LT(1);
		int unbound_type_name_start_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal264 = default(IToken);
		XAstParserRuleReturnScope identifier263 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier265 = default(XAstParserRuleReturnScope);

		object string_literal264_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unbound_type_name_start");
		DebugLocation(291, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// cs.g:291:31: ( identifier ( '::' identifier )? )
			DebugEnterAlt(1);
			// cs.g:292:2: identifier ( '::' identifier )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(292, 2);
			PushFollow(Follow._identifier_in_unbound_type_name_start2272);
			identifier263=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier263.Tree, identifier263, retval);
			DebugLocation(292, 13);
			// cs.g:292:13: ( '::' identifier )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==80))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:292:14: '::' identifier
				{
				DebugLocation(292, 14);
				string_literal264=(IToken)Match(input,80,Follow._80_in_unbound_type_name_start2275); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal264_tree = (object)adaptor.Create(string_literal264, retval);
				adaptor.AddChild(root_0, string_literal264_tree);
				}
				DebugLocation(292, 19);
				PushFollow(Follow._identifier_in_unbound_type_name_start2277);
				identifier265=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier265.Tree, identifier265, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unbound_type_name_start", 67);
			LeaveRule("unbound_type_name_start", 67);
			LeaveRule_unbound_type_name_start();
			if (state.backtracking > 0) { Memoize(input, 67, unbound_type_name_start_StartIndex); }

		}
		DebugLocation(292, 30);
		} finally { DebugExitRule(GrammarFileName, "unbound_type_name_start"); }
		return retval;

	}
	// $ANTLR end "unbound_type_name_start"

	partial void EnterRule_unbound_type_name_part();
	partial void LeaveRule_unbound_type_name_part();

	// $ANTLR start "unbound_type_name_part"
	// cs.g:293:8: public unbound_type_name_part : '.' identifier ;
	[GrammarRule("unbound_type_name_part")]
	public XAstParserRuleReturnScope unbound_type_name_part()
	{
		EnterRule_unbound_type_name_part();
		EnterRule("unbound_type_name_part", 68);
		var retval = new XAstParserRuleReturnScope("unbound_type_name_part");
		
		retval.Start = (IToken)input.LT(1);
		int unbound_type_name_part_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal266 = default(IToken);
		XAstParserRuleReturnScope identifier267 = default(XAstParserRuleReturnScope);

		object char_literal266_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unbound_type_name_part");
		DebugLocation(293, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// cs.g:293:30: ( '.' identifier )
			DebugEnterAlt(1);
			// cs.g:294:2: '.' identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(294, 2);
			char_literal266=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_unbound_type_name_part2288), "DOT"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal266_tree = (object)adaptor.Create(char_literal266, retval);
			adaptor.AddChild(root_0, char_literal266_tree);
			}
			DebugLocation(294, 8);
			PushFollow(Follow._identifier_in_unbound_type_name_part2292);
			identifier267=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier267.Tree, identifier267, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unbound_type_name_part", 68);
			LeaveRule("unbound_type_name_part", 68);
			LeaveRule_unbound_type_name_part();
			if (state.backtracking > 0) { Memoize(input, 68, unbound_type_name_part_StartIndex); }

		}
		DebugLocation(294, 17);
		} finally { DebugExitRule(GrammarFileName, "unbound_type_name_part"); }
		return retval;

	}
	// $ANTLR end "unbound_type_name_part"

	partial void EnterRule_generic_dimension_specifier();
	partial void LeaveRule_generic_dimension_specifier();

	// $ANTLR start "generic_dimension_specifier"
	// cs.g:295:8: public generic_dimension_specifier : '<' ( commas )? '>' ;
	[GrammarRule("generic_dimension_specifier")]
	public XAstParserRuleReturnScope generic_dimension_specifier()
	{
		EnterRule_generic_dimension_specifier();
		EnterRule("generic_dimension_specifier", 69);
		var retval = new XAstParserRuleReturnScope("generic_dimension_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int generic_dimension_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal268 = default(IToken);
		IToken char_literal270 = default(IToken);
		XAstParserRuleReturnScope commas269 = default(XAstParserRuleReturnScope);

		object char_literal268_tree = default(object);
		object char_literal270_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "generic_dimension_specifier");
		DebugLocation(295, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// cs.g:295:35: ( '<' ( commas )? '>' )
			DebugEnterAlt(1);
			// cs.g:296:2: '<' ( commas )? '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(296, 2);
			char_literal268=(IToken)Match(input,81,Follow._81_in_generic_dimension_specifier2302); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal268_tree = (object)adaptor.Create(char_literal268, retval);
			adaptor.AddChild(root_0, char_literal268_tree);
			}
			DebugLocation(296, 8);
			// cs.g:296:8: ( commas )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==74))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:296:8: commas
				{
				DebugLocation(296, 8);
				PushFollow(Follow._commas_in_generic_dimension_specifier2306);
				commas269=commas();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commas269.Tree, commas269, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(296, 18);
			char_literal270=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_generic_dimension_specifier2311), "GT"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal270_tree = (object)adaptor.Create(char_literal270, retval);
			adaptor.AddChild(root_0, char_literal270_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_dimension_specifier", 69);
			LeaveRule("generic_dimension_specifier", 69);
			LeaveRule_generic_dimension_specifier();
			if (state.backtracking > 0) { Memoize(input, 69, generic_dimension_specifier_StartIndex); }

		}
		DebugLocation(296, 21);
		} finally { DebugExitRule(GrammarFileName, "generic_dimension_specifier"); }
		return retval;

	}
	// $ANTLR end "generic_dimension_specifier"

	partial void EnterRule_commas();
	partial void LeaveRule_commas();

	// $ANTLR start "commas"
	// cs.g:297:8: public commas : ( ',' )+ ;
	[GrammarRule("commas")]
	public XAstParserRuleReturnScope commas()
	{
		EnterRule_commas();
		EnterRule("commas", 70);
		var retval = new XAstParserRuleReturnScope("commas");
		
		retval.Start = (IToken)input.LT(1);
		int commas_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal271 = default(IToken);

		object char_literal271_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "commas");
		DebugLocation(297, 6);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// cs.g:297:14: ( ( ',' )+ )
			DebugEnterAlt(1);
			// cs.g:298:2: ( ',' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(298, 2);
			// cs.g:298:2: ( ',' )+
			int cnt75=0;
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==74))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:298:2: ','
					{
					DebugLocation(298, 2);
					char_literal271=(IToken)Match(input,74,Follow._74_in_commas2322); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal271_tree = (object)adaptor.Create(char_literal271, retval);
					adaptor.AddChild(root_0, char_literal271_tree);
					}

					}
					break;

				default:
					if (cnt75 >= 1)
						goto loop75;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee75 = new EarlyExitException( 75, input );
					DebugRecognitionException(eee75);
					throw eee75;
				}
				cnt75++;
			}
			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commas", 70);
			LeaveRule("commas", 70);
			LeaveRule_commas();
			if (state.backtracking > 0) { Memoize(input, 70, commas_StartIndex); }

		}
		DebugLocation(298, 6);
		} finally { DebugExitRule(GrammarFileName, "commas"); }
		return retval;

	}
	// $ANTLR end "commas"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// cs.g:304:8: public type_name : namespace_or_type_name ;
	[GrammarRule("type_name")]
	public XAstParserRuleReturnScope type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 71);
		var retval = new XAstParserRuleReturnScope("type_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope namespace_or_type_name272 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(304, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// cs.g:304:17: ( namespace_or_type_name )
			DebugEnterAlt(1);
			// cs.g:305:2: namespace_or_type_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(305, 2);
			PushFollow(Follow._namespace_or_type_name_in_type_name2340);
			namespace_or_type_name272=namespace_or_type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_or_type_name272.Tree, namespace_or_type_name272, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 71);
			LeaveRule("type_name", 71);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 71, type_name_StartIndex); }

		}
		DebugLocation(305, 24);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_namespace_or_type_name();
	partial void LeaveRule_namespace_or_type_name();

	// $ANTLR start "namespace_or_type_name"
	// cs.g:306:8: public namespace_or_type_name : type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* ;
	[GrammarRule("namespace_or_type_name")]
	public XAstParserRuleReturnScope namespace_or_type_name()
	{
		EnterRule_namespace_or_type_name();
		EnterRule("namespace_or_type_name", 72);
		var retval = new XAstParserRuleReturnScope("namespace_or_type_name");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_or_type_name_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal274 = default(IToken);
		IToken char_literal276 = default(IToken);
		XAstParserRuleReturnScope type_or_generic273 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_or_generic275 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_or_generic277 = default(XAstParserRuleReturnScope);

		object string_literal274_tree = default(object);
		object char_literal276_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespace_or_type_name");
		DebugLocation(306, 69);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// cs.g:306:30: ( type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* )
			DebugEnterAlt(1);
			// cs.g:307:3: type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(307, 3);
			PushFollow(Follow._type_or_generic_in_namespace_or_type_name2351);
			type_or_generic273=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic273.Tree, type_or_generic273, retval);
			DebugLocation(307, 21);
			// cs.g:307:21: ( '::' type_or_generic )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==80))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:307:22: '::' type_or_generic
				{
				DebugLocation(307, 22);
				string_literal274=(IToken)Match(input,80,Follow._80_in_namespace_or_type_name2356); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal274_tree = (object)adaptor.Create(string_literal274, retval);
				adaptor.AddChild(root_0, string_literal274_tree);
				}
				DebugLocation(307, 27);
				PushFollow(Follow._type_or_generic_in_namespace_or_type_name2358);
				type_or_generic275=type_or_generic();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic275.Tree, type_or_generic275, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(307, 45);
			// cs.g:307:45: ( '.' type_or_generic )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==DOT))
				{
					int LA77_2 = input.LA(2);

					if ((LA77_2==DEFINE||LA77_2==ELIF||LA77_2==ENDIF||LA77_2==IDENTIFIER||LA77_2==UNDEF||LA77_2==95||(LA77_2>=97 && LA77_2<=98)||(LA77_2>=100 && LA77_2<=101)||LA77_2==105||LA77_2==117||LA77_2==120||LA77_2==122||LA77_2==126||(LA77_2>=132 && LA77_2<=133)||LA77_2==135||LA77_2==141||(LA77_2>=143 && LA77_2<=144)||(LA77_2>=147 && LA77_2<=148)||LA77_2==152||LA77_2==154||LA77_2==157||LA77_2==160||LA77_2==162||LA77_2==167||(LA77_2>=171 && LA77_2<=172)||LA77_2==183||LA77_2==190||LA77_2==194||LA77_2==196))
					{
						alt77 = 1;
					}


				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:307:46: '.' type_or_generic
					{
					DebugLocation(307, 46);
					char_literal276=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_namespace_or_type_name2363), "DOT"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal276_tree = (object)adaptor.Create(char_literal276, retval);
					adaptor.AddChild(root_0, char_literal276_tree);
					}
					DebugLocation(307, 52);
					PushFollow(Follow._type_or_generic_in_namespace_or_type_name2367);
					type_or_generic277=type_or_generic();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic277.Tree, type_or_generic277, retval);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_or_type_name", 72);
			LeaveRule("namespace_or_type_name", 72);
			LeaveRule_namespace_or_type_name();
			if (state.backtracking > 0) { Memoize(input, 72, namespace_or_type_name_StartIndex); }

		}
		DebugLocation(307, 69);
		} finally { DebugExitRule(GrammarFileName, "namespace_or_type_name"); }
		return retval;

	}
	// $ANTLR end "namespace_or_type_name"

	partial void EnterRule_type_or_generic();
	partial void LeaveRule_type_or_generic();

	// $ANTLR start "type_or_generic"
	// cs.g:308:8: public type_or_generic : ( ( identifier generic_argument_list )=> identifier generic_argument_list | identifier );
	[GrammarRule("type_or_generic")]
	public XAstParserRuleReturnScope type_or_generic()
	{
		EnterRule_type_or_generic();
		EnterRule("type_or_generic", 73);
		var retval = new XAstParserRuleReturnScope("type_or_generic");
		
		retval.Start = (IToken)input.LT(1);
		int type_or_generic_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope identifier278 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list279 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier280 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_or_generic");
		DebugLocation(308, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// cs.g:308:23: ( ( identifier generic_argument_list )=> identifier generic_argument_list | identifier )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==IDENTIFIER))
			{
				int LA78_1 = input.LA(2);

				if ((EvaluatePredicate(synpred15_cs_fragment)))
				{
					alt78 = 1;
				}
				else if ((true))
				{
					alt78 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 78, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA78_0==DEFINE||LA78_0==ELIF||LA78_0==ENDIF||LA78_0==UNDEF||LA78_0==95||(LA78_0>=97 && LA78_0<=98)||(LA78_0>=100 && LA78_0<=101)||LA78_0==105||LA78_0==117||LA78_0==120||LA78_0==122||LA78_0==126||(LA78_0>=132 && LA78_0<=133)||LA78_0==135||LA78_0==141||(LA78_0>=143 && LA78_0<=144)||(LA78_0>=147 && LA78_0<=148)||LA78_0==152||LA78_0==154||LA78_0==157||LA78_0==160||LA78_0==162||LA78_0==167||(LA78_0>=171 && LA78_0<=172)||LA78_0==183||LA78_0==190||LA78_0==194||LA78_0==196))
			{
				int LA78_2 = input.LA(2);

				if ((EvaluatePredicate(synpred15_cs_fragment)))
				{
					alt78 = 1;
				}
				else if ((true))
				{
					alt78 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 78, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:309:2: ( identifier generic_argument_list )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(309, 42);
				PushFollow(Follow._identifier_in_type_or_generic2389);
				identifier278=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier278.Tree, identifier278, retval);
				DebugLocation(309, 55);
				PushFollow(Follow._generic_argument_list_in_type_or_generic2393);
				generic_argument_list279=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list279.Tree, generic_argument_list279, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:310:4: identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(310, 4);
				PushFollow(Follow._identifier_in_type_or_generic2398);
				identifier280=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier280.Tree, identifier280, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_or_generic", 73);
			LeaveRule("type_or_generic", 73);
			LeaveRule_type_or_generic();
			if (state.backtracking > 0) { Memoize(input, 73, type_or_generic_StartIndex); }

		}
		DebugLocation(310, 14);
		} finally { DebugExitRule(GrammarFileName, "type_or_generic"); }
		return retval;

	}
	// $ANTLR end "type_or_generic"

	partial void EnterRule_qid();
	partial void LeaveRule_qid();

	// $ANTLR start "qid"
	// cs.g:312:8: public qid : qid_start ( qid_part )* ;
	[GrammarRule("qid")]
	public XAstParserRuleReturnScope qid()
	{
		EnterRule_qid();
		EnterRule("qid", 74);
		var retval = new XAstParserRuleReturnScope("qid");
		
		retval.Start = (IToken)input.LT(1);
		int qid_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope qid_start281 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope qid_part282 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "qid");
		DebugLocation(312, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// cs.g:312:11: ( qid_start ( qid_part )* )
			DebugEnterAlt(1);
			// cs.g:313:2: qid_start ( qid_part )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(313, 2);
			PushFollow(Follow._qid_start_in_qid2411);
			qid_start281=qid_start();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qid_start281.Tree, qid_start281, retval);
			DebugLocation(313, 14);
			// cs.g:313:14: ( qid_part )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==DOT))
				{
					int LA79_2 = input.LA(2);

					if ((LA79_2==DEFINE||LA79_2==ELIF||LA79_2==ENDIF||LA79_2==IDENTIFIER||LA79_2==UNDEF||LA79_2==95||(LA79_2>=97 && LA79_2<=98)||(LA79_2>=100 && LA79_2<=101)||LA79_2==105||LA79_2==117||LA79_2==120||LA79_2==122||LA79_2==126||(LA79_2>=132 && LA79_2<=133)||LA79_2==135||LA79_2==141||(LA79_2>=143 && LA79_2<=144)||(LA79_2>=147 && LA79_2<=148)||LA79_2==152||LA79_2==154||LA79_2==157||LA79_2==160||LA79_2==162||LA79_2==167||(LA79_2>=171 && LA79_2<=172)||LA79_2==183||LA79_2==190||LA79_2==194||LA79_2==196))
					{
						alt79 = 1;
					}


				}
				else if ((LA79_0==PTR))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:313:14: qid_part
					{
					DebugLocation(313, 14);
					PushFollow(Follow._qid_part_in_qid2415);
					qid_part282=qid_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qid_part282.Tree, qid_part282, retval);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qid", 74);
			LeaveRule("qid", 74);
			LeaveRule_qid();
			if (state.backtracking > 0) { Memoize(input, 74, qid_StartIndex); }

		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "qid"); }
		return retval;

	}
	// $ANTLR end "qid"

	partial void EnterRule_qid_start();
	partial void LeaveRule_qid_start();

	// $ANTLR start "qid_start"
	// cs.g:315:8: public qid_start : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal );
	[GrammarRule("qid_start")]
	public XAstParserRuleReturnScope qid_start()
	{
		EnterRule_qid_start();
		EnterRule("qid_start", 75);
		var retval = new XAstParserRuleReturnScope("qid_start");
		
		retval.Start = (IToken)input.LT(1);
		int qid_start_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal287 = default(IToken);
		XAstParserRuleReturnScope predefined_type283 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier284 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list285 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier286 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier288 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope literal289 = default(XAstParserRuleReturnScope);

		object string_literal287_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qid_start");
		DebugLocation(315, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// cs.g:315:17: ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal )
			int alt81=4;
			try { DebugEnterDecision(81, false);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt81 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA81_2 = input.LA(2);

				if ((LA81_2==81) && (EvaluatePredicate(synpred16_cs_fragment)))
				{
					alt81 = 2;
				}
				else if ((LA81_2==DOT||LA81_2==PTR||LA81_2==68||LA81_2==74||LA81_2==80||LA81_2==85||LA81_2==197||LA81_2==201))
				{
					alt81 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA81_3 = input.LA(2);

				if ((LA81_3==81) && (EvaluatePredicate(synpred16_cs_fragment)))
				{
					alt81 = 2;
				}
				else if ((LA81_3==DOT||LA81_3==PTR||LA81_3==68||LA81_3==74||LA81_3==80||LA81_3==85||LA81_3==197||LA81_3==201))
				{
					alt81 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				alt81 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:316:2: predefined_type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(316, 2);
				PushFollow(Follow._predefined_type_in_qid_start2427);
				predefined_type283=predefined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type283.Tree, predefined_type283, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:317:4: ( identifier generic_argument_list )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(317, 44);
				PushFollow(Follow._identifier_in_qid_start2442);
				identifier284=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier284.Tree, identifier284, retval);
				DebugLocation(317, 57);
				PushFollow(Follow._generic_argument_list_in_qid_start2446);
				generic_argument_list285=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list285.Tree, generic_argument_list285, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:320:4: identifier ( '::' identifier )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(320, 4);
				PushFollow(Follow._identifier_in_qid_start2453);
				identifier286=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier286.Tree, identifier286, retval);
				DebugLocation(320, 17);
				// cs.g:320:17: ( '::' identifier )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==80))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:320:18: '::' identifier
					{
					DebugLocation(320, 18);
					string_literal287=(IToken)Match(input,80,Follow._80_in_qid_start2458); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal287_tree = (object)adaptor.Create(string_literal287, retval);
					adaptor.AddChild(root_0, string_literal287_tree);
					}
					DebugLocation(320, 25);
					PushFollow(Follow._identifier_in_qid_start2462);
					identifier288=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier288.Tree, identifier288, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(80); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:321:4: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(321, 4);
				PushFollow(Follow._literal_in_qid_start2469);
				literal289=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal289.Tree, literal289, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qid_start", 75);
			LeaveRule("qid_start", 75);
			LeaveRule_qid_start();
			if (state.backtracking > 0) { Memoize(input, 75, qid_start_StartIndex); }

		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "qid_start"); }
		return retval;

	}
	// $ANTLR end "qid_start"

	partial void EnterRule_qid_part();
	partial void LeaveRule_qid_part();

	// $ANTLR start "qid_part"
	// cs.g:325:8: public qid_part : access_identifier ;
	[GrammarRule("qid_part")]
	public XAstParserRuleReturnScope qid_part()
	{
		EnterRule_qid_part();
		EnterRule("qid_part", 76);
		var retval = new XAstParserRuleReturnScope("qid_part");
		
		retval.Start = (IToken)input.LT(1);
		int qid_part_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope access_identifier290 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "qid_part");
		DebugLocation(325, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// cs.g:325:16: ( access_identifier )
			DebugEnterAlt(1);
			// cs.g:326:2: access_identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(326, 2);
			PushFollow(Follow._access_identifier_in_qid_part2485);
			access_identifier290=access_identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, access_identifier290.Tree, access_identifier290, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qid_part", 76);
			LeaveRule("qid_part", 76);
			LeaveRule_qid_part();
			if (state.backtracking > 0) { Memoize(input, 76, qid_part_StartIndex); }

		}
		DebugLocation(326, 19);
		} finally { DebugExitRule(GrammarFileName, "qid_part"); }
		return retval;

	}
	// $ANTLR end "qid_part"

	partial void EnterRule_generic_argument_list();
	partial void LeaveRule_generic_argument_list();

	// $ANTLR start "generic_argument_list"
	// cs.g:328:8: public generic_argument_list : '<' type_arguments '>' ;
	[GrammarRule("generic_argument_list")]
	public XAstParserRuleReturnScope generic_argument_list()
	{
		EnterRule_generic_argument_list();
		EnterRule("generic_argument_list", 77);
		var retval = new XAstParserRuleReturnScope("generic_argument_list");
		
		retval.Start = (IToken)input.LT(1);
		int generic_argument_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal291 = default(IToken);
		IToken char_literal293 = default(IToken);
		XAstParserRuleReturnScope type_arguments292 = default(XAstParserRuleReturnScope);

		object char_literal291_tree = default(object);
		object char_literal293_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "generic_argument_list");
		DebugLocation(328, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// cs.g:328:29: ( '<' type_arguments '>' )
			DebugEnterAlt(1);
			// cs.g:329:2: '<' type_arguments '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(329, 2);
			char_literal291=(IToken)Match(input,81,Follow._81_in_generic_argument_list2497); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal291_tree = (object)adaptor.Create(char_literal291, retval);
			adaptor.AddChild(root_0, char_literal291_tree);
			}
			DebugLocation(329, 8);
			PushFollow(Follow._type_arguments_in_generic_argument_list2501);
			type_arguments292=type_arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_arguments292.Tree, type_arguments292, retval);
			DebugLocation(329, 25);
			char_literal293=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_generic_argument_list2505), "GT"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal293_tree = (object)adaptor.Create(char_literal293, retval);
			adaptor.AddChild(root_0, char_literal293_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_argument_list", 77);
			LeaveRule("generic_argument_list", 77);
			LeaveRule_generic_argument_list();
			if (state.backtracking > 0) { Memoize(input, 77, generic_argument_list_StartIndex); }

		}
		DebugLocation(329, 28);
		} finally { DebugExitRule(GrammarFileName, "generic_argument_list"); }
		return retval;

	}
	// $ANTLR end "generic_argument_list"

	partial void EnterRule_type_arguments();
	partial void LeaveRule_type_arguments();

	// $ANTLR start "type_arguments"
	// cs.g:330:8: public type_arguments : type ( ',' type )* ;
	[GrammarRule("type_arguments")]
	public XAstParserRuleReturnScope type_arguments()
	{
		EnterRule_type_arguments();
		EnterRule("type_arguments", 78);
		var retval = new XAstParserRuleReturnScope("type_arguments");
		
		retval.Start = (IToken)input.LT(1);
		int type_arguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal295 = default(IToken);
		XAstParserRuleReturnScope type294 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type296 = default(XAstParserRuleReturnScope);

		object char_literal295_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_arguments");
		DebugLocation(330, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// cs.g:330:22: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// cs.g:331:2: type ( ',' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(331, 2);
			PushFollow(Follow._type_in_type_arguments2516);
			type294=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type294.Tree, type294, retval);
			DebugLocation(331, 7);
			// cs.g:331:7: ( ',' type )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==74))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:331:8: ',' type
					{
					DebugLocation(331, 8);
					char_literal295=(IToken)Match(input,74,Follow._74_in_type_arguments2519); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal295_tree = (object)adaptor.Create(char_literal295, retval);
					adaptor.AddChild(root_0, char_literal295_tree);
					}
					DebugLocation(331, 12);
					PushFollow(Follow._type_in_type_arguments2521);
					type296=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type296.Tree, type296, retval);

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_arguments", 78);
			LeaveRule("type_arguments", 78);
			LeaveRule_type_arguments();
			if (state.backtracking > 0) { Memoize(input, 78, type_arguments_StartIndex); }

		}
		DebugLocation(331, 18);
		} finally { DebugExitRule(GrammarFileName, "type_arguments"); }
		return retval;

	}
	// $ANTLR end "type_arguments"

	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// cs.g:333:8: public type : ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ );
	[GrammarRule("type")]
	public XAstParserRuleReturnScope type()
	{
		EnterRule_type();
		EnterRule("type", 79);
		var retval = new XAstParserRuleReturnScope("type");
		
		retval.Start = (IToken)input.LT(1);
		int type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal300 = default(IToken);
		IToken char_literal303 = default(IToken);
		IToken char_literal304 = default(IToken);
		IToken string_literal307 = default(IToken);
		IToken char_literal308 = default(IToken);
		XAstParserRuleReturnScope predefined_type297 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name298 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope rank_specifiers299 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope predefined_type301 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name302 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope predefined_type305 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name306 = default(XAstParserRuleReturnScope);

		object char_literal300_tree = default(object);
		object char_literal303_tree = default(object);
		object char_literal304_tree = default(object);
		object string_literal307_tree = default(object);
		object char_literal308_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(333, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// cs.g:333:12: ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ )
			int alt90=4;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				int LA90_1 = input.LA(2);

				if ((EvaluatePredicate(synpred17_cs_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred18_cs_fragment)))
				{
					alt90 = 2;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred17_cs_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred18_cs_fragment)))
				{
					alt90 = 2;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA90_3 = input.LA(2);

				if ((EvaluatePredicate(synpred17_cs_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred18_cs_fragment)))
				{
					alt90 = 2;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 192:
				{
				alt90 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:334:4: ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(334, 56);
				// cs.g:334:56: ( predefined_type | type_name )
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==103||LA83_0==106||LA83_0==109||LA83_0==114||LA83_0==119||LA83_0==129||LA83_0==138||LA83_0==146||LA83_0==151||LA83_0==169||LA83_0==173||LA83_0==177||(LA83_0>=185 && LA83_0<=186)||LA83_0==189))
				{
					alt83 = 1;
				}
				else if ((LA83_0==DEFINE||LA83_0==ELIF||LA83_0==ENDIF||LA83_0==IDENTIFIER||LA83_0==UNDEF||LA83_0==95||(LA83_0>=97 && LA83_0<=98)||(LA83_0>=100 && LA83_0<=101)||LA83_0==105||LA83_0==117||LA83_0==120||LA83_0==122||LA83_0==126||(LA83_0>=132 && LA83_0<=133)||LA83_0==135||LA83_0==141||(LA83_0>=143 && LA83_0<=144)||(LA83_0>=147 && LA83_0<=148)||LA83_0==152||LA83_0==154||LA83_0==157||LA83_0==160||LA83_0==162||LA83_0==167||(LA83_0>=171 && LA83_0<=172)||LA83_0==183||LA83_0==190||LA83_0==194||LA83_0==196))
				{
					alt83 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:334:57: predefined_type
					{
					DebugLocation(334, 57);
					PushFollow(Follow._predefined_type_in_type2552);
					predefined_type297=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type297.Tree, predefined_type297, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:334:75: type_name
					{
					DebugLocation(334, 75);
					PushFollow(Follow._type_name_in_type2556);
					type_name298=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name298.Tree, type_name298, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(83); }

				DebugLocation(334, 88);
				PushFollow(Follow._rank_specifiers_in_type2561);
				rank_specifiers299=rank_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifiers299.Tree, rank_specifiers299, retval);
				DebugLocation(334, 106);
				// cs.g:334:106: ( '*' )*
				try { DebugEnterSubRule(84);
				while (true)
				{
					int alt84=2;
					try { DebugEnterDecision(84, false);
					int LA84_0 = input.LA(1);

					if ((LA84_0==69))
					{
						alt84 = 1;
					}


					} finally { DebugExitDecision(84); }
					switch ( alt84 )
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:334:106: '*'
						{
						DebugLocation(334, 106);
						char_literal300=(IToken)Match(input,69,Follow._69_in_type2565); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal300_tree = (object)adaptor.Create(char_literal300, retval);
						adaptor.AddChild(root_0, char_literal300_tree);
						}

						}
						break;

					default:
						goto loop84;
					}
				}

				loop84:
					;

				} finally { DebugExitSubRule(84); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:335:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(335, 53);
				// cs.g:335:53: ( predefined_type | type_name )
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==103||LA85_0==106||LA85_0==109||LA85_0==114||LA85_0==119||LA85_0==129||LA85_0==138||LA85_0==146||LA85_0==151||LA85_0==169||LA85_0==173||LA85_0==177||(LA85_0>=185 && LA85_0<=186)||LA85_0==189))
				{
					alt85 = 1;
				}
				else if ((LA85_0==DEFINE||LA85_0==ELIF||LA85_0==ENDIF||LA85_0==IDENTIFIER||LA85_0==UNDEF||LA85_0==95||(LA85_0>=97 && LA85_0<=98)||(LA85_0>=100 && LA85_0<=101)||LA85_0==105||LA85_0==117||LA85_0==120||LA85_0==122||LA85_0==126||(LA85_0>=132 && LA85_0<=133)||LA85_0==135||LA85_0==141||(LA85_0>=143 && LA85_0<=144)||(LA85_0>=147 && LA85_0<=148)||LA85_0==152||LA85_0==154||LA85_0==157||LA85_0==160||LA85_0==162||LA85_0==167||(LA85_0>=171 && LA85_0<=172)||LA85_0==183||LA85_0==190||LA85_0==194||LA85_0==196))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:335:54: predefined_type
					{
					DebugLocation(335, 54);
					PushFollow(Follow._predefined_type_in_type2594);
					predefined_type301=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type301.Tree, predefined_type301, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:335:72: type_name
					{
					DebugLocation(335, 72);
					PushFollow(Follow._type_name_in_type2598);
					type_name302=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name302.Tree, type_name302, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(85); }

				DebugLocation(335, 85);
				// cs.g:335:85: ( ( '*' )+ | '?' )
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==69))
				{
					alt87 = 1;
				}
				else if ((LA87_0==89))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:335:86: ( '*' )+
					{
					DebugLocation(335, 86);
					// cs.g:335:86: ( '*' )+
					int cnt86=0;
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, false);
						int LA86_0 = input.LA(1);

						if ((LA86_0==69))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch (alt86)
						{
						case 1:
							DebugEnterAlt(1);
							// cs.g:335:86: '*'
							{
							DebugLocation(335, 86);
							char_literal303=(IToken)Match(input,69,Follow._69_in_type2604); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal303_tree = (object)adaptor.Create(char_literal303, retval);
							adaptor.AddChild(root_0, char_literal303_tree);
							}

							}
							break;

						default:
							if (cnt86 >= 1)
								goto loop86;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee86 = new EarlyExitException( 86, input );
							DebugRecognitionException(eee86);
							throw eee86;
						}
						cnt86++;
					}
					loop86:
						;

					} finally { DebugExitSubRule(86); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:335:93: '?'
					{
					DebugLocation(335, 93);
					char_literal304=(IToken)Match(input,89,Follow._89_in_type2609); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal304_tree = (object)adaptor.Create(char_literal304, retval);
					adaptor.AddChild(root_0, char_literal304_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:336:4: ( predefined_type | type_name )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(336, 4);
				// cs.g:336:4: ( predefined_type | type_name )
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==103||LA88_0==106||LA88_0==109||LA88_0==114||LA88_0==119||LA88_0==129||LA88_0==138||LA88_0==146||LA88_0==151||LA88_0==169||LA88_0==173||LA88_0==177||(LA88_0>=185 && LA88_0<=186)||LA88_0==189))
				{
					alt88 = 1;
				}
				else if ((LA88_0==DEFINE||LA88_0==ELIF||LA88_0==ENDIF||LA88_0==IDENTIFIER||LA88_0==UNDEF||LA88_0==95||(LA88_0>=97 && LA88_0<=98)||(LA88_0>=100 && LA88_0<=101)||LA88_0==105||LA88_0==117||LA88_0==120||LA88_0==122||LA88_0==126||(LA88_0>=132 && LA88_0<=133)||LA88_0==135||LA88_0==141||(LA88_0>=143 && LA88_0<=144)||(LA88_0>=147 && LA88_0<=148)||LA88_0==152||LA88_0==154||LA88_0==157||LA88_0==160||LA88_0==162||LA88_0==167||(LA88_0>=171 && LA88_0<=172)||LA88_0==183||LA88_0==190||LA88_0==194||LA88_0==196))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:336:5: predefined_type
					{
					DebugLocation(336, 5);
					PushFollow(Follow._predefined_type_in_type2616);
					predefined_type305=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type305.Tree, predefined_type305, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:336:23: type_name
					{
					DebugLocation(336, 23);
					PushFollow(Follow._type_name_in_type2620);
					type_name306=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name306.Tree, type_name306, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(88); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:337:4: 'void' ( '*' )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(337, 4);
				string_literal307=(IToken)Match(input,192,Follow._192_in_type2626); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal307_tree = (object)adaptor.Create(string_literal307, retval);
				adaptor.AddChild(root_0, string_literal307_tree);
				}
				DebugLocation(337, 11);
				// cs.g:337:11: ( '*' )+
				int cnt89=0;
				try { DebugEnterSubRule(89);
				while (true)
				{
					int alt89=2;
					try { DebugEnterDecision(89, false);
					int LA89_0 = input.LA(1);

					if ((LA89_0==69))
					{
						alt89 = 1;
					}


					} finally { DebugExitDecision(89); }
					switch (alt89)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:337:11: '*'
						{
						DebugLocation(337, 11);
						char_literal308=(IToken)Match(input,69,Follow._69_in_type2628); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal308_tree = (object)adaptor.Create(char_literal308, retval);
						adaptor.AddChild(root_0, char_literal308_tree);
						}

						}
						break;

					default:
						if (cnt89 >= 1)
							goto loop89;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee89 = new EarlyExitException( 89, input );
						DebugRecognitionException(eee89);
						throw eee89;
					}
					cnt89++;
				}
				loop89:
					;

				} finally { DebugExitSubRule(89); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 79);
			LeaveRule("type", 79);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 79, type_StartIndex); }

		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_non_nullable_type();
	partial void LeaveRule_non_nullable_type();

	// $ANTLR start "non_nullable_type"
	// cs.g:339:8: public non_nullable_type : ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ );
	[GrammarRule("non_nullable_type")]
	public XAstParserRuleReturnScope non_nullable_type()
	{
		EnterRule_non_nullable_type();
		EnterRule("non_nullable_type", 80);
		var retval = new XAstParserRuleReturnScope("non_nullable_type");
		
		retval.Start = (IToken)input.LT(1);
		int non_nullable_type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal312 = default(IToken);
		IToken char_literal313 = default(IToken);
		IToken string_literal314 = default(IToken);
		IToken char_literal315 = default(IToken);
		XAstParserRuleReturnScope predefined_type309 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name310 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope rank_specifiers311 = default(XAstParserRuleReturnScope);

		object char_literal312_tree = default(object);
		object char_literal313_tree = default(object);
		object string_literal314_tree = default(object);
		object char_literal315_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "non_nullable_type");
		DebugLocation(339, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// cs.g:339:25: ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ )
			int alt97=2;
			try { DebugEnterDecision(97, false);
			int LA97_0 = input.LA(1);

			if ((LA97_0==DEFINE||LA97_0==ELIF||LA97_0==ENDIF||LA97_0==IDENTIFIER||LA97_0==UNDEF||LA97_0==95||(LA97_0>=97 && LA97_0<=98)||(LA97_0>=100 && LA97_0<=101)||LA97_0==103||(LA97_0>=105 && LA97_0<=106)||LA97_0==109||LA97_0==114||LA97_0==117||(LA97_0>=119 && LA97_0<=120)||LA97_0==122||LA97_0==126||LA97_0==129||(LA97_0>=132 && LA97_0<=133)||LA97_0==135||LA97_0==138||LA97_0==141||(LA97_0>=143 && LA97_0<=144)||(LA97_0>=146 && LA97_0<=148)||(LA97_0>=151 && LA97_0<=152)||LA97_0==154||LA97_0==157||LA97_0==160||LA97_0==162||LA97_0==167||LA97_0==169||(LA97_0>=171 && LA97_0<=173)||LA97_0==177||LA97_0==183||(LA97_0>=185 && LA97_0<=186)||(LA97_0>=189 && LA97_0<=190)||LA97_0==194||LA97_0==196))
			{
				alt97 = 1;
			}
			else if ((LA97_0==192))
			{
				alt97 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:340:2: ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(340, 2);
				// cs.g:340:2: ( predefined_type | type_name )
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==103||LA91_0==106||LA91_0==109||LA91_0==114||LA91_0==119||LA91_0==129||LA91_0==138||LA91_0==146||LA91_0==151||LA91_0==169||LA91_0==173||LA91_0==177||(LA91_0>=185 && LA91_0<=186)||LA91_0==189))
				{
					alt91 = 1;
				}
				else if ((LA91_0==DEFINE||LA91_0==ELIF||LA91_0==ENDIF||LA91_0==IDENTIFIER||LA91_0==UNDEF||LA91_0==95||(LA91_0>=97 && LA91_0<=98)||(LA91_0>=100 && LA91_0<=101)||LA91_0==105||LA91_0==117||LA91_0==120||LA91_0==122||LA91_0==126||(LA91_0>=132 && LA91_0<=133)||LA91_0==135||LA91_0==141||(LA91_0>=143 && LA91_0<=144)||(LA91_0>=147 && LA91_0<=148)||LA91_0==152||LA91_0==154||LA91_0==157||LA91_0==160||LA91_0==162||LA91_0==167||(LA91_0>=171 && LA91_0<=172)||LA91_0==183||LA91_0==190||LA91_0==194||LA91_0==196))
				{
					alt91 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:340:3: predefined_type
					{
					DebugLocation(340, 3);
					PushFollow(Follow._predefined_type_in_non_nullable_type2641);
					predefined_type309=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type309.Tree, predefined_type309, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:340:21: type_name
					{
					DebugLocation(340, 21);
					PushFollow(Follow._type_name_in_non_nullable_type2645);
					type_name310=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name310.Tree, type_name310, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(341, 3);
				// cs.g:341:3: ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_0 = input.LA(1);

				if ((LA95_0==91))
				{
					alt95 = 1;
				}
				else if ((LA95_0==EOF||LA95_0==DEFINE||LA95_0==ELIF||LA95_0==ENDIF||LA95_0==GT||LA95_0==IDENTIFIER||LA95_0==RPAREN||LA95_0==SEMI||LA95_0==UNDEF||LA95_0==62||(LA95_0>=65 && LA95_0<=66)||LA95_0==69||LA95_0==74||LA95_0==79||LA95_0==81||LA95_0==84||LA95_0==86||(LA95_0>=88 && LA95_0<=90)||(LA95_0>=92 && LA95_0<=93)||LA95_0==95||(LA95_0>=97 && LA95_0<=101)||LA95_0==105||LA95_0==117||LA95_0==120||LA95_0==122||LA95_0==126||(LA95_0>=132 && LA95_0<=133)||LA95_0==135||(LA95_0>=141 && LA95_0<=144)||(LA95_0>=147 && LA95_0<=148)||LA95_0==152||LA95_0==154||LA95_0==157||LA95_0==160||LA95_0==162||LA95_0==167||(LA95_0>=171 && LA95_0<=172)||LA95_0==183||LA95_0==190||LA95_0==194||LA95_0==196||LA95_0==198||(LA95_0>=200 && LA95_0<=201)))
				{
					alt95 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:341:7: rank_specifiers ( '*' )*
					{
					DebugLocation(341, 7);
					PushFollow(Follow._rank_specifiers_in_non_nullable_type2654);
					rank_specifiers311=rank_specifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifiers311.Tree, rank_specifiers311, retval);
					DebugLocation(341, 25);
					// cs.g:341:25: ( '*' )*
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==69))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch ( alt92 )
						{
						case 1:
							DebugEnterAlt(1);
							// cs.g:341:25: '*'
							{
							DebugLocation(341, 25);
							char_literal312=(IToken)Match(input,69,Follow._69_in_non_nullable_type2658); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal312_tree = (object)adaptor.Create(char_literal312, retval);
							adaptor.AddChild(root_0, char_literal312_tree);
							}

							}
							break;

						default:
							goto loop92;
						}
					}

					loop92:
						;

					} finally { DebugExitSubRule(92); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:342:6: ( ( '*' )+ )?
					{
					DebugLocation(342, 6);
					// cs.g:342:6: ( ( '*' )+ )?
					int alt94=2;
					try { DebugEnterSubRule(94);
					try { DebugEnterDecision(94, false);
					int LA94_0 = input.LA(1);

					if ((LA94_0==69))
					{
						alt94 = 1;
					}
					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:342:7: ( '*' )+
						{
						DebugLocation(342, 7);
						// cs.g:342:7: ( '*' )+
						int cnt93=0;
						try { DebugEnterSubRule(93);
						while (true)
						{
							int alt93=2;
							try { DebugEnterDecision(93, false);
							int LA93_0 = input.LA(1);

							if ((LA93_0==69))
							{
								alt93 = 1;
							}


							} finally { DebugExitDecision(93); }
							switch (alt93)
							{
							case 1:
								DebugEnterAlt(1);
								// cs.g:342:7: '*'
								{
								DebugLocation(342, 7);
								char_literal313=(IToken)Match(input,69,Follow._69_in_non_nullable_type2667); if (state.failed) return retval;
								if (state.backtracking == 0) {
								char_literal313_tree = (object)adaptor.Create(char_literal313, retval);
								adaptor.AddChild(root_0, char_literal313_tree);
								}

								}
								break;

							default:
								if (cnt93 >= 1)
									goto loop93;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee93 = new EarlyExitException( 93, input );
								DebugRecognitionException(eee93);
								throw eee93;
							}
							cnt93++;
						}
						loop93:
							;

						} finally { DebugExitSubRule(93); }


						}
						break;

					}
					} finally { DebugExitSubRule(94); }


					}
					break;

				}
				} finally { DebugExitSubRule(95); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:344:4: 'void' ( '*' )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(344, 4);
				string_literal314=(IToken)Match(input,192,Follow._192_in_non_nullable_type2679); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal314_tree = (object)adaptor.Create(string_literal314, retval);
				adaptor.AddChild(root_0, string_literal314_tree);
				}
				DebugLocation(344, 13);
				// cs.g:344:13: ( '*' )+
				int cnt96=0;
				try { DebugEnterSubRule(96);
				while (true)
				{
					int alt96=2;
					try { DebugEnterDecision(96, false);
					int LA96_0 = input.LA(1);

					if ((LA96_0==69))
					{
						alt96 = 1;
					}


					} finally { DebugExitDecision(96); }
					switch (alt96)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:344:13: '*'
						{
						DebugLocation(344, 13);
						char_literal315=(IToken)Match(input,69,Follow._69_in_non_nullable_type2683); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal315_tree = (object)adaptor.Create(char_literal315, retval);
						adaptor.AddChild(root_0, char_literal315_tree);
						}

						}
						break;

					default:
						if (cnt96 >= 1)
							goto loop96;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee96 = new EarlyExitException( 96, input );
						DebugRecognitionException(eee96);
						throw eee96;
					}
					cnt96++;
				}
				loop96:
					;

				} finally { DebugExitSubRule(96); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_nullable_type", 80);
			LeaveRule("non_nullable_type", 80);
			LeaveRule_non_nullable_type();
			if (state.backtracking > 0) { Memoize(input, 80, non_nullable_type_StartIndex); }

		}
		DebugLocation(344, 17);
		} finally { DebugExitRule(GrammarFileName, "non_nullable_type"); }
		return retval;

	}
	// $ANTLR end "non_nullable_type"

	partial void EnterRule_non_array_type();
	partial void LeaveRule_non_array_type();

	// $ANTLR start "non_array_type"
	// cs.g:346:8: public non_array_type : type ;
	[GrammarRule("non_array_type")]
	public XAstParserRuleReturnScope non_array_type()
	{
		EnterRule_non_array_type();
		EnterRule("non_array_type", 81);
		var retval = new XAstParserRuleReturnScope("non_array_type");
		
		retval.Start = (IToken)input.LT(1);
		int non_array_type_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type316 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "non_array_type");
		DebugLocation(346, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// cs.g:346:22: ( type )
			DebugEnterAlt(1);
			// cs.g:347:2: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(347, 2);
			PushFollow(Follow._type_in_non_array_type2696);
			type316=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type316.Tree, type316, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_array_type", 81);
			LeaveRule("non_array_type", 81);
			LeaveRule_non_array_type();
			if (state.backtracking > 0) { Memoize(input, 81, non_array_type_StartIndex); }

		}
		DebugLocation(347, 5);
		} finally { DebugExitRule(GrammarFileName, "non_array_type"); }
		return retval;

	}
	// $ANTLR end "non_array_type"

	partial void EnterRule_array_type();
	partial void LeaveRule_array_type();

	// $ANTLR start "array_type"
	// cs.g:348:8: public array_type : type ;
	[GrammarRule("array_type")]
	public XAstParserRuleReturnScope array_type()
	{
		EnterRule_array_type();
		EnterRule("array_type", 82);
		var retval = new XAstParserRuleReturnScope("array_type");
		
		retval.Start = (IToken)input.LT(1);
		int array_type_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type317 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "array_type");
		DebugLocation(348, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// cs.g:348:18: ( type )
			DebugEnterAlt(1);
			// cs.g:349:2: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(349, 2);
			PushFollow(Follow._type_in_array_type2705);
			type317=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type317.Tree, type317, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_type", 82);
			LeaveRule("array_type", 82);
			LeaveRule_array_type();
			if (state.backtracking > 0) { Memoize(input, 82, array_type_StartIndex); }

		}
		DebugLocation(349, 5);
		} finally { DebugExitRule(GrammarFileName, "array_type"); }
		return retval;

	}
	// $ANTLR end "array_type"

	partial void EnterRule_unmanaged_type();
	partial void LeaveRule_unmanaged_type();

	// $ANTLR start "unmanaged_type"
	// cs.g:350:8: public unmanaged_type : type ;
	[GrammarRule("unmanaged_type")]
	public XAstParserRuleReturnScope unmanaged_type()
	{
		EnterRule_unmanaged_type();
		EnterRule("unmanaged_type", 83);
		var retval = new XAstParserRuleReturnScope("unmanaged_type");
		
		retval.Start = (IToken)input.LT(1);
		int unmanaged_type_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type318 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "unmanaged_type");
		DebugLocation(350, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// cs.g:350:22: ( type )
			DebugEnterAlt(1);
			// cs.g:351:2: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(351, 2);
			PushFollow(Follow._type_in_unmanaged_type2714);
			type318=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type318.Tree, type318, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unmanaged_type", 83);
			LeaveRule("unmanaged_type", 83);
			LeaveRule_unmanaged_type();
			if (state.backtracking > 0) { Memoize(input, 83, unmanaged_type_StartIndex); }

		}
		DebugLocation(351, 5);
		} finally { DebugExitRule(GrammarFileName, "unmanaged_type"); }
		return retval;

	}
	// $ANTLR end "unmanaged_type"

	partial void EnterRule_class_type();
	partial void LeaveRule_class_type();

	// $ANTLR start "class_type"
	// cs.g:352:8: public class_type : type ;
	[GrammarRule("class_type")]
	public XAstParserRuleReturnScope class_type()
	{
		EnterRule_class_type();
		EnterRule("class_type", 84);
		var retval = new XAstParserRuleReturnScope("class_type");
		
		retval.Start = (IToken)input.LT(1);
		int class_type_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type319 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "class_type");
		DebugLocation(352, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// cs.g:352:18: ( type )
			DebugEnterAlt(1);
			// cs.g:353:2: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(353, 2);
			PushFollow(Follow._type_in_class_type2723);
			type319=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type319.Tree, type319, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_type", 84);
			LeaveRule("class_type", 84);
			LeaveRule_class_type();
			if (state.backtracking > 0) { Memoize(input, 84, class_type_StartIndex); }

		}
		DebugLocation(353, 5);
		} finally { DebugExitRule(GrammarFileName, "class_type"); }
		return retval;

	}
	// $ANTLR end "class_type"

	partial void EnterRule_pointer_type();
	partial void LeaveRule_pointer_type();

	// $ANTLR start "pointer_type"
	// cs.g:354:8: public pointer_type : type ;
	[GrammarRule("pointer_type")]
	public XAstParserRuleReturnScope pointer_type()
	{
		EnterRule_pointer_type();
		EnterRule("pointer_type", 85);
		var retval = new XAstParserRuleReturnScope("pointer_type");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_type_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type320 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "pointer_type");
		DebugLocation(354, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// cs.g:354:20: ( type )
			DebugEnterAlt(1);
			// cs.g:355:2: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(355, 2);
			PushFollow(Follow._type_in_pointer_type2732);
			type320=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type320.Tree, type320, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer_type", 85);
			LeaveRule("pointer_type", 85);
			LeaveRule_pointer_type();
			if (state.backtracking > 0) { Memoize(input, 85, pointer_type_StartIndex); }

		}
		DebugLocation(355, 5);
		} finally { DebugExitRule(GrammarFileName, "pointer_type"); }
		return retval;

	}
	// $ANTLR end "pointer_type"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// cs.g:361:8: public block : ( ';' | '{' ( statement_list )? '}' );
	[GrammarRule("block")]
	public XAstParserRuleReturnScope block()
	{
		EnterRule_block();
		EnterRule("block", 86);
		var retval = new XAstParserRuleReturnScope("block");
		
		retval.Start = (IToken)input.LT(1);
		int block_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal321 = default(IToken);
		IToken char_literal322 = default(IToken);
		IToken char_literal324 = default(IToken);
		XAstParserRuleReturnScope statement_list323 = default(XAstParserRuleReturnScope);

		object char_literal321_tree = default(object);
		object char_literal322_tree = default(object);
		object char_literal324_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(361, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// cs.g:361:13: ( ';' | '{' ( statement_list )? '}' )
			int alt99=2;
			try { DebugEnterDecision(99, false);
			int LA99_0 = input.LA(1);

			if ((LA99_0==SEMI))
			{
				alt99 = 1;
			}
			else if ((LA99_0==197))
			{
				alt99 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:362:2: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(362, 2);
				char_literal321=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_block2746), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal321_tree = (object)adaptor.Create(char_literal321, retval);
				adaptor.AddChild(root_0, char_literal321_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:363:4: '{' ( statement_list )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(363, 4);
				char_literal322=(IToken)Match(input,197,Follow._197_in_block2751); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal322_tree = (object)adaptor.Create(char_literal322, retval);
				adaptor.AddChild(root_0, char_literal322_tree);
				}
				DebugLocation(363, 10);
				// cs.g:363:10: ( statement_list )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==Character_literal||LA98_0==DEFINE||LA98_0==ELIF||LA98_0==ENDIF||LA98_0==FALSE||(LA98_0>=Hex_number && LA98_0<=IF)||(LA98_0>=MINUS && LA98_0<=NUMBER)||LA98_0==Real_literal||(LA98_0>=SEMI && LA98_0<=STRINGLITERAL)||LA98_0==TRUE||LA98_0==UNDEF||(LA98_0>=USING && LA98_0<=Verbatim_string_literal)||LA98_0==61||LA98_0==66||(LA98_0>=68 && LA98_0<=69)||(LA98_0>=71 && LA98_0<=72)||LA98_0==75||LA98_0==95||(LA98_0>=97 && LA98_0<=98)||(LA98_0>=100 && LA98_0<=106)||(LA98_0>=109 && LA98_0<=110)||(LA98_0>=112 && LA98_0<=120)||LA98_0==122||LA98_0==126||(LA98_0>=128 && LA98_0<=135)||LA98_0==138||LA98_0==141||(LA98_0>=143 && LA98_0<=148)||(LA98_0>=150 && LA98_0<=152)||LA98_0==154||LA98_0==157||LA98_0==160||LA98_0==162||(LA98_0>=167 && LA98_0<=169)||(LA98_0>=171 && LA98_0<=174)||LA98_0==177||(LA98_0>=179 && LA98_0<=190)||LA98_0==192||(LA98_0>=194 && LA98_0<=197)||LA98_0==202))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:363:10: statement_list
					{
					DebugLocation(363, 10);
					PushFollow(Follow._statement_list_in_block2755);
					statement_list323=statement_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list323.Tree, statement_list323, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(363, 28);
				char_literal324=(IToken)Match(input,201,Follow._201_in_block2760); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal324_tree = (object)adaptor.Create(char_literal324, retval);
				adaptor.AddChild(root_0, char_literal324_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 86);
			LeaveRule("block", 86);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 86, block_StartIndex); }

		}
		DebugLocation(363, 30);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_statement_list();
	partial void LeaveRule_statement_list();

	// $ANTLR start "statement_list"
	// cs.g:364:8: public statement_list : ( statement )+ ;
	[GrammarRule("statement_list")]
	public XAstParserRuleReturnScope statement_list()
	{
		EnterRule_statement_list();
		EnterRule("statement_list", 87);
		var retval = new XAstParserRuleReturnScope("statement_list");
		
		retval.Start = (IToken)input.LT(1);
		int statement_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope statement325 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement_list");
		DebugLocation(364, 12);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// cs.g:364:22: ( ( statement )+ )
			DebugEnterAlt(1);
			// cs.g:365:2: ( statement )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(365, 2);
			// cs.g:365:2: ( statement )+
			int cnt100=0;
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==115))
				{
					int LA100_2 = input.LA(2);

					if ((LA100_2==68))
					{
						alt100 = 1;
					}


				}
				else if ((LA100_0==Character_literal||LA100_0==DEFINE||LA100_0==ELIF||LA100_0==ENDIF||LA100_0==FALSE||(LA100_0>=Hex_number && LA100_0<=IF)||(LA100_0>=MINUS && LA100_0<=NUMBER)||LA100_0==Real_literal||(LA100_0>=SEMI && LA100_0<=STRINGLITERAL)||LA100_0==TRUE||LA100_0==UNDEF||(LA100_0>=USING && LA100_0<=Verbatim_string_literal)||LA100_0==61||LA100_0==66||(LA100_0>=68 && LA100_0<=69)||(LA100_0>=71 && LA100_0<=72)||LA100_0==75||LA100_0==95||(LA100_0>=97 && LA100_0<=98)||(LA100_0>=100 && LA100_0<=106)||(LA100_0>=109 && LA100_0<=110)||(LA100_0>=112 && LA100_0<=114)||(LA100_0>=116 && LA100_0<=120)||LA100_0==122||LA100_0==126||(LA100_0>=128 && LA100_0<=135)||LA100_0==138||LA100_0==141||(LA100_0>=143 && LA100_0<=148)||(LA100_0>=150 && LA100_0<=152)||LA100_0==154||LA100_0==157||LA100_0==160||LA100_0==162||(LA100_0>=167 && LA100_0<=169)||(LA100_0>=171 && LA100_0<=174)||LA100_0==177||(LA100_0>=179 && LA100_0<=190)||LA100_0==192||(LA100_0>=194 && LA100_0<=197)||LA100_0==202))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:365:2: statement
					{
					DebugLocation(365, 2);
					PushFollow(Follow._statement_in_statement_list2769);
					statement325=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement325.Tree, statement325, retval);

					}
					break;

				default:
					if (cnt100 >= 1)
						goto loop100;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee100 = new EarlyExitException( 100, input );
					DebugRecognitionException(eee100);
					throw eee100;
				}
				cnt100++;
			}
			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_list", 87);
			LeaveRule("statement_list", 87);
			LeaveRule_statement_list();
			if (state.backtracking > 0) { Memoize(input, 87, statement_list_StartIndex); }

		}
		DebugLocation(365, 12);
		} finally { DebugExitRule(GrammarFileName, "statement_list"); }
		return retval;

	}
	// $ANTLR end "statement_list"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// cs.g:370:8: public expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );
	[GrammarRule("expression")]
	public XAstParserRuleReturnScope expression()
	{
		EnterRule_expression();
		EnterRule("expression", 88);
		var retval = new XAstParserRuleReturnScope("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope assignment326 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope non_assignment_expression327 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(370, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// cs.g:370:18: ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression )
			int alt101=2;
			try { DebugEnterDecision(101, false);
			switch (input.LA(1))
			{
			case 68:
				{
				int LA101_1 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 150:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 180:
				{
				int LA101_3 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 102:
				{
				int LA101_4 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				int LA101_5 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA101_6 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				int LA101_7 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 184:
				{
				int LA101_8 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				int LA101_9 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 174:
				{
				int LA101_10 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 110:
				{
				int LA101_11 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 187:
				{
				int LA101_12 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 115:
				{
				int LA101_13 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 116:
				{
				int LA101_14 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 71:
				{
				int LA101_15 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MINUS:
				{
				int LA101_16 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 16, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 61:
				{
				int LA101_17 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 17, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 202:
				{
				int LA101_18 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 18, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 72:
				{
				int LA101_19 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 19, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 75:
				{
				int LA101_20 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 20, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 69:
				{
				int LA101_21 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 21, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 66:
				{
				int LA101_22 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 22, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA101_23 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 23, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:371:2: ( unary_expression assignment_operator )=> assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(371, 46);
				PushFollow(Follow._assignment_in_expression2796);
				assignment326=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment326.Tree, assignment326, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:372:4: non_assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(372, 4);
				PushFollow(Follow._non_assignment_expression_in_expression2802);
				non_assignment_expression327=non_assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, non_assignment_expression327.Tree, non_assignment_expression327, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 88);
			LeaveRule("expression", 88);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 88, expression_StartIndex); }

		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expression_list();
	partial void LeaveRule_expression_list();

	// $ANTLR start "expression_list"
	// cs.g:374:8: public expression_list : expression ( ',' expression )* ;
	[GrammarRule("expression_list")]
	public XAstParserRuleReturnScope expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 89);
		var retval = new XAstParserRuleReturnScope("expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal329 = default(IToken);
		XAstParserRuleReturnScope expression328 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression330 = default(XAstParserRuleReturnScope);

		object char_literal329_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(374, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// cs.g:374:23: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// cs.g:375:2: expression ( ',' expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(375, 2);
			PushFollow(Follow._expression_in_expression_list2813);
			expression328=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression328.Tree, expression328, retval);
			DebugLocation(375, 14);
			// cs.g:375:14: ( ',' expression )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==74))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:375:15: ',' expression
					{
					DebugLocation(375, 15);
					char_literal329=(IToken)Match(input,74,Follow._74_in_expression_list2817); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal329_tree = (object)adaptor.Create(char_literal329, retval);
					adaptor.AddChild(root_0, char_literal329_tree);
					}
					DebugLocation(375, 21);
					PushFollow(Follow._expression_in_expression_list2821);
					expression330=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression330.Tree, expression330, retval);

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 89);
			LeaveRule("expression_list", 89);
			LeaveRule_expression_list();
			if (state.backtracking > 0) { Memoize(input, 89, expression_list_StartIndex); }

		}
		DebugLocation(375, 33);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();

	// $ANTLR start "assignment"
	// cs.g:376:8: public assignment : unary_expression assignment_operator expression ;
	[GrammarRule("assignment")]
	public XAstParserRuleReturnScope assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 90);
		var retval = new XAstParserRuleReturnScope("assignment");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unary_expression331 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_operator332 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression333 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(376, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// cs.g:376:18: ( unary_expression assignment_operator expression )
			DebugEnterAlt(1);
			// cs.g:377:2: unary_expression assignment_operator expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(377, 2);
			PushFollow(Follow._unary_expression_in_assignment2833);
			unary_expression331=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression331.Tree, unary_expression331, retval);
			DebugLocation(377, 21);
			PushFollow(Follow._assignment_operator_in_assignment2837);
			assignment_operator332=assignment_operator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_operator332.Tree, assignment_operator332, retval);
			DebugLocation(377, 43);
			PushFollow(Follow._expression_in_assignment2841);
			expression333=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression333.Tree, expression333, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 90);
			LeaveRule("assignment", 90);
			LeaveRule_assignment();
			if (state.backtracking > 0) { Memoize(input, 90, assignment_StartIndex); }

		}
		DebugLocation(377, 53);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();

	// $ANTLR start "unary_expression"
	// cs.g:378:8: public unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression );
	[GrammarRule("unary_expression")]
	public XAstParserRuleReturnScope unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 91);
		var retval = new XAstParserRuleReturnScope("unary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal336 = default(IToken);
		IToken char_literal338 = default(IToken);
		IToken char_literal340 = default(IToken);
		IToken char_literal342 = default(IToken);
		XAstParserRuleReturnScope cast_expression334 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_or_array_creation_expression335 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression337 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression339 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression341 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression343 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pre_increment_expression344 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pre_decrement_expression345 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer_indirection_expression346 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope addressof_expression347 = default(XAstParserRuleReturnScope);

		object char_literal336_tree = default(object);
		object char_literal338_tree = default(object);
		object char_literal340_tree = default(object);
		object char_literal342_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(378, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// cs.g:378:24: ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression )
			int alt103=10;
			try { DebugEnterDecision(103, false);
			switch (input.LA(1))
			{
			case 68:
				{
				int LA103_1 = input.LA(2);

				if ((EvaluatePredicate(synpred20_cs_fragment)))
				{
					alt103 = 1;
				}
				else if ((true))
				{
					alt103 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case DEFINE:
			case ELIF:
			case ENDIF:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case UNDEF:
			case Verbatim_string_literal:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 133:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt103 = 2;
				}
				break;
			case 71:
				{
				alt103 = 3;
				}
				break;
			case MINUS:
				{
				alt103 = 4;
				}
				break;
			case 61:
				{
				alt103 = 5;
				}
				break;
			case 202:
				{
				alt103 = 6;
				}
				break;
			case 72:
				{
				alt103 = 7;
				}
				break;
			case 75:
				{
				alt103 = 8;
				}
				break;
			case 69:
				{
				alt103 = 9;
				}
				break;
			case 66:
				{
				alt103 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:380:2: ( cast_expression )=> cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(380, 23);
				PushFollow(Follow._cast_expression_in_unary_expression2860);
				cast_expression334=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression334.Tree, cast_expression334, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:381:4: primary_or_array_creation_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(381, 4);
				PushFollow(Follow._primary_or_array_creation_expression_in_unary_expression2865);
				primary_or_array_creation_expression335=primary_or_array_creation_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_or_array_creation_expression335.Tree, primary_or_array_creation_expression335, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:382:4: '+' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(382, 4);
				char_literal336=(IToken)Match(input,71,Follow._71_in_unary_expression2870); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal336_tree = (object)adaptor.Create(char_literal336, retval);
				adaptor.AddChild(root_0, char_literal336_tree);
				}
				DebugLocation(382, 10);
				PushFollow(Follow._unary_expression_in_unary_expression2874);
				unary_expression337=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression337.Tree, unary_expression337, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:383:4: '-' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(383, 4);
				char_literal338=(IToken)new XToken((IToken)Match(input,MINUS,Follow._MINUS_in_unary_expression2880), "MINUS"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal338_tree = (object)adaptor.Create(char_literal338, retval);
				adaptor.AddChild(root_0, char_literal338_tree);
				}
				DebugLocation(383, 10);
				PushFollow(Follow._unary_expression_in_unary_expression2884);
				unary_expression339=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression339.Tree, unary_expression339, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:384:4: '!' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(384, 4);
				char_literal340=(IToken)Match(input,61,Follow._61_in_unary_expression2890); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal340_tree = (object)adaptor.Create(char_literal340, retval);
				adaptor.AddChild(root_0, char_literal340_tree);
				}
				DebugLocation(384, 10);
				PushFollow(Follow._unary_expression_in_unary_expression2894);
				unary_expression341=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression341.Tree, unary_expression341, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:385:4: '~' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(385, 4);
				char_literal342=(IToken)Match(input,202,Follow._202_in_unary_expression2900); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal342_tree = (object)adaptor.Create(char_literal342, retval);
				adaptor.AddChild(root_0, char_literal342_tree);
				}
				DebugLocation(385, 10);
				PushFollow(Follow._unary_expression_in_unary_expression2904);
				unary_expression343=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression343.Tree, unary_expression343, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:386:4: pre_increment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(386, 4);
				PushFollow(Follow._pre_increment_expression_in_unary_expression2910);
				pre_increment_expression344=pre_increment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pre_increment_expression344.Tree, pre_increment_expression344, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:387:4: pre_decrement_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(387, 4);
				PushFollow(Follow._pre_decrement_expression_in_unary_expression2916);
				pre_decrement_expression345=pre_decrement_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pre_decrement_expression345.Tree, pre_decrement_expression345, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:388:4: pointer_indirection_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(388, 4);
				PushFollow(Follow._pointer_indirection_expression_in_unary_expression2922);
				pointer_indirection_expression346=pointer_indirection_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer_indirection_expression346.Tree, pointer_indirection_expression346, retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:389:4: addressof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(389, 4);
				PushFollow(Follow._addressof_expression_in_unary_expression2927);
				addressof_expression347=addressof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, addressof_expression347.Tree, addressof_expression347, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 91);
			LeaveRule("unary_expression", 91);
			LeaveRule_unary_expression();
			if (state.backtracking > 0) { Memoize(input, 91, unary_expression_StartIndex); }

		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();

	// $ANTLR start "cast_expression"
	// cs.g:391:8: public cast_expression : '(' type ')' unary_expression ;
	[GrammarRule("cast_expression")]
	public XAstParserRuleReturnScope cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 92);
		var retval = new XAstParserRuleReturnScope("cast_expression");
		
		retval.Start = (IToken)input.LT(1);
		int cast_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal348 = default(IToken);
		IToken char_literal350 = default(IToken);
		XAstParserRuleReturnScope type349 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression351 = default(XAstParserRuleReturnScope);

		object char_literal348_tree = default(object);
		object char_literal350_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(391, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// cs.g:391:23: ( '(' type ')' unary_expression )
			DebugEnterAlt(1);
			// cs.g:392:2: '(' type ')' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(392, 2);
			char_literal348=(IToken)Match(input,68,Follow._68_in_cast_expression2939); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal348_tree = (object)adaptor.Create(char_literal348, retval);
			adaptor.AddChild(root_0, char_literal348_tree);
			}
			DebugLocation(392, 8);
			PushFollow(Follow._type_in_cast_expression2943);
			type349=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type349.Tree, type349, retval);
			DebugLocation(392, 15);
			char_literal350=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_cast_expression2947), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal350_tree = (object)adaptor.Create(char_literal350, retval);
			adaptor.AddChild(root_0, char_literal350_tree);
			}
			DebugLocation(392, 21);
			PushFollow(Follow._unary_expression_in_cast_expression2951);
			unary_expression351=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression351.Tree, unary_expression351, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expression", 92);
			LeaveRule("cast_expression", 92);
			LeaveRule_cast_expression();
			if (state.backtracking > 0) { Memoize(input, 92, cast_expression_StartIndex); }

		}
		DebugLocation(392, 37);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	partial void EnterRule_assignment_operator();
	partial void LeaveRule_assignment_operator();

	// $ANTLR start "assignment_operator"
	// cs.g:393:8: public assignment_operator : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' );
	[GrammarRule("assignment_operator")]
	public XAstParserRuleReturnScope assignment_operator()
	{
		EnterRule_assignment_operator();
		EnterRule("assignment_operator", 93);
		var retval = new XAstParserRuleReturnScope("assignment_operator");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal352 = default(IToken);
		IToken string_literal353 = default(IToken);
		IToken string_literal354 = default(IToken);
		IToken string_literal355 = default(IToken);
		IToken string_literal356 = default(IToken);
		IToken string_literal357 = default(IToken);
		IToken string_literal358 = default(IToken);
		IToken string_literal359 = default(IToken);
		IToken string_literal360 = default(IToken);
		IToken string_literal361 = default(IToken);
		IToken char_literal362 = default(IToken);
		IToken string_literal363 = default(IToken);

		object char_literal352_tree = default(object);
		object string_literal353_tree = default(object);
		object string_literal354_tree = default(object);
		object string_literal355_tree = default(object);
		object string_literal356_tree = default(object);
		object string_literal357_tree = default(object);
		object string_literal358_tree = default(object);
		object string_literal359_tree = default(object);
		object string_literal360_tree = default(object);
		object string_literal361_tree = default(object);
		object char_literal362_tree = default(object);
		object string_literal363_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_operator");
		DebugLocation(393, 80);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// cs.g:393:27: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' )
			int alt104=11;
			try { DebugEnterDecision(104, false);
			switch (input.LA(1))
			{
			case 85:
				{
				alt104 = 1;
				}
				break;
			case 73:
				{
				alt104 = 2;
				}
				break;
			case 76:
				{
				alt104 = 3;
				}
				break;
			case 70:
				{
				alt104 = 4;
				}
				break;
			case 78:
				{
				alt104 = 5;
				}
				break;
			case 64:
				{
				alt104 = 6;
				}
				break;
			case 67:
				{
				alt104 = 7;
				}
				break;
			case 199:
				{
				alt104 = 8;
				}
				break;
			case 94:
				{
				alt104 = 9;
				}
				break;
			case 83:
				{
				alt104 = 10;
				}
				break;
			case GT:
				{
				alt104 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:394:2: '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 2);
				char_literal352=(IToken)Match(input,85,Follow._85_in_assignment_operator2961); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal352_tree = (object)adaptor.Create(char_literal352, retval);
				adaptor.AddChild(root_0, char_literal352_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:394:8: '+='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 8);
				string_literal353=(IToken)Match(input,73,Follow._73_in_assignment_operator2965); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal353_tree = (object)adaptor.Create(string_literal353, retval);
				adaptor.AddChild(root_0, string_literal353_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:394:15: '-='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 15);
				string_literal354=(IToken)Match(input,76,Follow._76_in_assignment_operator2969); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal354_tree = (object)adaptor.Create(string_literal354, retval);
				adaptor.AddChild(root_0, string_literal354_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:394:22: '*='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 22);
				string_literal355=(IToken)Match(input,70,Follow._70_in_assignment_operator2973); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal355_tree = (object)adaptor.Create(string_literal355, retval);
				adaptor.AddChild(root_0, string_literal355_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:394:29: '/='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 29);
				string_literal356=(IToken)Match(input,78,Follow._78_in_assignment_operator2977); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal356_tree = (object)adaptor.Create(string_literal356, retval);
				adaptor.AddChild(root_0, string_literal356_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:394:36: '%='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 36);
				string_literal357=(IToken)Match(input,64,Follow._64_in_assignment_operator2981); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal357_tree = (object)adaptor.Create(string_literal357, retval);
				adaptor.AddChild(root_0, string_literal357_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:394:43: '&='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 43);
				string_literal358=(IToken)Match(input,67,Follow._67_in_assignment_operator2985); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal358_tree = (object)adaptor.Create(string_literal358, retval);
				adaptor.AddChild(root_0, string_literal358_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:394:50: '|='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 50);
				string_literal359=(IToken)Match(input,199,Follow._199_in_assignment_operator2989); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal359_tree = (object)adaptor.Create(string_literal359, retval);
				adaptor.AddChild(root_0, string_literal359_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:394:57: '^='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 57);
				string_literal360=(IToken)Match(input,94,Follow._94_in_assignment_operator2993); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal360_tree = (object)adaptor.Create(string_literal360, retval);
				adaptor.AddChild(root_0, string_literal360_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:394:64: '<<='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 64);
				string_literal361=(IToken)Match(input,83,Follow._83_in_assignment_operator2997); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal361_tree = (object)adaptor.Create(string_literal361, retval);
				adaptor.AddChild(root_0, string_literal361_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// cs.g:394:72: '>' '>='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 72);
				char_literal362=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_assignment_operator3001), "GT"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal362_tree = (object)adaptor.Create(char_literal362, retval);
				adaptor.AddChild(root_0, char_literal362_tree);
				}
				DebugLocation(394, 76);
				string_literal363=(IToken)Match(input,88,Follow._88_in_assignment_operator3003); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal363_tree = (object)adaptor.Create(string_literal363, retval);
				adaptor.AddChild(root_0, string_literal363_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_operator", 93);
			LeaveRule("assignment_operator", 93);
			LeaveRule_assignment_operator();
			if (state.backtracking > 0) { Memoize(input, 93, assignment_operator_StartIndex); }

		}
		DebugLocation(394, 80);
		} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
		return retval;

	}
	// $ANTLR end "assignment_operator"

	partial void EnterRule_pre_increment_expression();
	partial void LeaveRule_pre_increment_expression();

	// $ANTLR start "pre_increment_expression"
	// cs.g:395:8: public pre_increment_expression : '++' unary_expression ;
	[GrammarRule("pre_increment_expression")]
	public XAstParserRuleReturnScope pre_increment_expression()
	{
		EnterRule_pre_increment_expression();
		EnterRule("pre_increment_expression", 94);
		var retval = new XAstParserRuleReturnScope("pre_increment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int pre_increment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal364 = default(IToken);
		XAstParserRuleReturnScope unary_expression365 = default(XAstParserRuleReturnScope);

		object string_literal364_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pre_increment_expression");
		DebugLocation(395, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// cs.g:395:32: ( '++' unary_expression )
			DebugEnterAlt(1);
			// cs.g:396:2: '++' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(396, 2);
			string_literal364=(IToken)Match(input,72,Follow._72_in_pre_increment_expression3014); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal364_tree = (object)adaptor.Create(string_literal364, retval);
			adaptor.AddChild(root_0, string_literal364_tree);
			}
			DebugLocation(396, 9);
			PushFollow(Follow._unary_expression_in_pre_increment_expression3018);
			unary_expression365=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression365.Tree, unary_expression365, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pre_increment_expression", 94);
			LeaveRule("pre_increment_expression", 94);
			LeaveRule_pre_increment_expression();
			if (state.backtracking > 0) { Memoize(input, 94, pre_increment_expression_StartIndex); }

		}
		DebugLocation(396, 25);
		} finally { DebugExitRule(GrammarFileName, "pre_increment_expression"); }
		return retval;

	}
	// $ANTLR end "pre_increment_expression"

	partial void EnterRule_pre_decrement_expression();
	partial void LeaveRule_pre_decrement_expression();

	// $ANTLR start "pre_decrement_expression"
	// cs.g:397:8: public pre_decrement_expression : '--' unary_expression ;
	[GrammarRule("pre_decrement_expression")]
	public XAstParserRuleReturnScope pre_decrement_expression()
	{
		EnterRule_pre_decrement_expression();
		EnterRule("pre_decrement_expression", 95);
		var retval = new XAstParserRuleReturnScope("pre_decrement_expression");
		
		retval.Start = (IToken)input.LT(1);
		int pre_decrement_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal366 = default(IToken);
		XAstParserRuleReturnScope unary_expression367 = default(XAstParserRuleReturnScope);

		object string_literal366_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pre_decrement_expression");
		DebugLocation(397, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// cs.g:397:32: ( '--' unary_expression )
			DebugEnterAlt(1);
			// cs.g:398:2: '--' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(398, 2);
			string_literal366=(IToken)Match(input,75,Follow._75_in_pre_decrement_expression3029); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal366_tree = (object)adaptor.Create(string_literal366, retval);
			adaptor.AddChild(root_0, string_literal366_tree);
			}
			DebugLocation(398, 9);
			PushFollow(Follow._unary_expression_in_pre_decrement_expression3033);
			unary_expression367=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression367.Tree, unary_expression367, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pre_decrement_expression", 95);
			LeaveRule("pre_decrement_expression", 95);
			LeaveRule_pre_decrement_expression();
			if (state.backtracking > 0) { Memoize(input, 95, pre_decrement_expression_StartIndex); }

		}
		DebugLocation(398, 25);
		} finally { DebugExitRule(GrammarFileName, "pre_decrement_expression"); }
		return retval;

	}
	// $ANTLR end "pre_decrement_expression"

	partial void EnterRule_pointer_indirection_expression();
	partial void LeaveRule_pointer_indirection_expression();

	// $ANTLR start "pointer_indirection_expression"
	// cs.g:399:8: public pointer_indirection_expression : '*' unary_expression ;
	[GrammarRule("pointer_indirection_expression")]
	public XAstParserRuleReturnScope pointer_indirection_expression()
	{
		EnterRule_pointer_indirection_expression();
		EnterRule("pointer_indirection_expression", 96);
		var retval = new XAstParserRuleReturnScope("pointer_indirection_expression");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_indirection_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal368 = default(IToken);
		XAstParserRuleReturnScope unary_expression369 = default(XAstParserRuleReturnScope);

		object char_literal368_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pointer_indirection_expression");
		DebugLocation(399, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// cs.g:399:38: ( '*' unary_expression )
			DebugEnterAlt(1);
			// cs.g:400:2: '*' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(400, 2);
			char_literal368=(IToken)Match(input,69,Follow._69_in_pointer_indirection_expression3043); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal368_tree = (object)adaptor.Create(char_literal368, retval);
			adaptor.AddChild(root_0, char_literal368_tree);
			}
			DebugLocation(400, 8);
			PushFollow(Follow._unary_expression_in_pointer_indirection_expression3047);
			unary_expression369=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression369.Tree, unary_expression369, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer_indirection_expression", 96);
			LeaveRule("pointer_indirection_expression", 96);
			LeaveRule_pointer_indirection_expression();
			if (state.backtracking > 0) { Memoize(input, 96, pointer_indirection_expression_StartIndex); }

		}
		DebugLocation(400, 24);
		} finally { DebugExitRule(GrammarFileName, "pointer_indirection_expression"); }
		return retval;

	}
	// $ANTLR end "pointer_indirection_expression"

	partial void EnterRule_addressof_expression();
	partial void LeaveRule_addressof_expression();

	// $ANTLR start "addressof_expression"
	// cs.g:401:8: public addressof_expression : '&' unary_expression ;
	[GrammarRule("addressof_expression")]
	public XAstParserRuleReturnScope addressof_expression()
	{
		EnterRule_addressof_expression();
		EnterRule("addressof_expression", 97);
		var retval = new XAstParserRuleReturnScope("addressof_expression");
		
		retval.Start = (IToken)input.LT(1);
		int addressof_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal370 = default(IToken);
		XAstParserRuleReturnScope unary_expression371 = default(XAstParserRuleReturnScope);

		object char_literal370_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "addressof_expression");
		DebugLocation(401, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }

			// cs.g:401:28: ( '&' unary_expression )
			DebugEnterAlt(1);
			// cs.g:402:2: '&' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(402, 2);
			char_literal370=(IToken)Match(input,66,Follow._66_in_addressof_expression3057); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal370_tree = (object)adaptor.Create(char_literal370, retval);
			adaptor.AddChild(root_0, char_literal370_tree);
			}
			DebugLocation(402, 8);
			PushFollow(Follow._unary_expression_in_addressof_expression3061);
			unary_expression371=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression371.Tree, unary_expression371, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addressof_expression", 97);
			LeaveRule("addressof_expression", 97);
			LeaveRule_addressof_expression();
			if (state.backtracking > 0) { Memoize(input, 97, addressof_expression_StartIndex); }

		}
		DebugLocation(402, 24);
		} finally { DebugExitRule(GrammarFileName, "addressof_expression"); }
		return retval;

	}
	// $ANTLR end "addressof_expression"

	partial void EnterRule_non_assignment_expression();
	partial void LeaveRule_non_assignment_expression();

	// $ANTLR start "non_assignment_expression"
	// cs.g:404:8: public non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );
	[GrammarRule("non_assignment_expression")]
	public XAstParserRuleReturnScope non_assignment_expression()
	{
		EnterRule_non_assignment_expression();
		EnterRule("non_assignment_expression", 98);
		var retval = new XAstParserRuleReturnScope("non_assignment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int non_assignment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope lambda_expression372 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope query_expression373 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression374 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "non_assignment_expression");
		DebugLocation(404, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }

			// cs.g:404:33: ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression )
			int alt105=3;
			try { DebugEnterDecision(105, false);
			switch (input.LA(1))
			{
			case 68:
				{
				int LA105_1 = input.LA(2);

				if ((EvaluatePredicate(synpred21_cs_fragment)))
				{
					alt105 = 1;
				}
				else if ((true))
				{
					alt105 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA105_2 = input.LA(2);

				if ((EvaluatePredicate(synpred21_cs_fragment)))
				{
					alt105 = 1;
				}
				else if ((true))
				{
					alt105 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				int LA105_3 = input.LA(2);

				if ((EvaluatePredicate(synpred21_cs_fragment)))
				{
					alt105 = 1;
				}
				else if ((EvaluatePredicate(synpred22_cs_fragment)))
				{
					alt105 = 2;
				}
				else if ((true))
				{
					alt105 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA105_4 = input.LA(2);

				if ((EvaluatePredicate(synpred21_cs_fragment)))
				{
					alt105 = 1;
				}
				else if ((true))
				{
					alt105 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 202:
				{
				alt105 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:406:2: ( anonymous_function_signature '=>' )=> lambda_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(406, 43);
				PushFollow(Follow._lambda_expression_in_non_assignment_expression3084);
				lambda_expression372=lambda_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expression372.Tree, lambda_expression372, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:407:4: ( query_expression )=> query_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(407, 26);
				PushFollow(Follow._query_expression_in_non_assignment_expression3095);
				query_expression373=query_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, query_expression373.Tree, query_expression373, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:408:4: conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(408, 4);
				PushFollow(Follow._conditional_expression_in_non_assignment_expression3101);
				conditional_expression374=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression374.Tree, conditional_expression374, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_assignment_expression", 98);
			LeaveRule("non_assignment_expression", 98);
			LeaveRule_non_assignment_expression();
			if (state.backtracking > 0) { Memoize(input, 98, non_assignment_expression_StartIndex); }

		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "non_assignment_expression"); }
		return retval;

	}
	// $ANTLR end "non_assignment_expression"

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();

	// $ANTLR start "multiplicative_expression"
	// cs.g:415:8: public multiplicative_expression : unary_expression ( ( '*' | '/' | '%' ) unary_expression )* ;
	[GrammarRule("multiplicative_expression")]
	public XAstParserRuleReturnScope multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 99);
		var retval = new XAstParserRuleReturnScope("multiplicative_expression");
		
		retval.Start = (IToken)input.LT(1);
		int multiplicative_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set376 = default(IToken);
		XAstParserRuleReturnScope unary_expression375 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression377 = default(XAstParserRuleReturnScope);

		object set376_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(415, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }

			// cs.g:415:33: ( unary_expression ( ( '*' | '/' | '%' ) unary_expression )* )
			DebugEnterAlt(1);
			// cs.g:416:2: unary_expression ( ( '*' | '/' | '%' ) unary_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(416, 2);
			PushFollow(Follow._unary_expression_in_multiplicative_expression3117);
			unary_expression375=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression375.Tree, unary_expression375, retval);
			DebugLocation(416, 19);
			// cs.g:416:19: ( ( '*' | '/' | '%' ) unary_expression )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==63||LA106_0==69||LA106_0==77))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:416:22: ( '*' | '/' | '%' ) unary_expression
					{
					DebugLocation(416, 22);

					set376=(IToken)input.LT(1);
					if (input.LA(1)==63||input.LA(1)==69||input.LA(1)==77)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set376, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(416, 38);
					PushFollow(Follow._unary_expression_in_multiplicative_expression3132);
					unary_expression377=unary_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression377.Tree, unary_expression377, retval);

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 99);
			LeaveRule("multiplicative_expression", 99);
			LeaveRule_multiplicative_expression();
			if (state.backtracking > 0) { Memoize(input, 99, multiplicative_expression_StartIndex); }

		}
		DebugLocation(416, 56);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();

	// $ANTLR start "additive_expression"
	// cs.g:417:8: public additive_expression : multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	public XAstParserRuleReturnScope additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 100);
		var retval = new XAstParserRuleReturnScope("additive_expression");
		
		retval.Start = (IToken)input.LT(1);
		int additive_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set379 = default(IToken);
		XAstParserRuleReturnScope multiplicative_expression378 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression380 = default(XAstParserRuleReturnScope);

		object set379_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(417, 68);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }

			// cs.g:417:27: ( multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* )
			DebugEnterAlt(1);
			// cs.g:418:2: multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(418, 2);
			PushFollow(Follow._multiplicative_expression_in_additive_expression3144);
			multiplicative_expression378=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression378.Tree, multiplicative_expression378, retval);
			DebugLocation(418, 28);
			// cs.g:418:28: ( ( '+' | '-' ) multiplicative_expression )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==MINUS||LA107_0==71))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:418:29: ( '+' | '-' ) multiplicative_expression
					{
					DebugLocation(418, 29);

					set379=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==71)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set379, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(418, 41);
					PushFollow(Follow._multiplicative_expression_in_additive_expression3155);
					multiplicative_expression380=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression380.Tree, multiplicative_expression380, retval);

					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 100);
			LeaveRule("additive_expression", 100);
			LeaveRule_additive_expression();
			if (state.backtracking > 0) { Memoize(input, 100, additive_expression_StartIndex); }

		}
		DebugLocation(418, 68);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	partial void EnterRule_shift_expression();
	partial void LeaveRule_shift_expression();

	// $ANTLR start "shift_expression"
	// cs.g:420:8: public shift_expression : additive_expression ( ( '<<' | '>' '>' ) additive_expression )* ;
	[GrammarRule("shift_expression")]
	public XAstParserRuleReturnScope shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 101);
		var retval = new XAstParserRuleReturnScope("shift_expression");
		
		retval.Start = (IToken)input.LT(1);
		int shift_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal382 = default(IToken);
		IToken char_literal383 = default(IToken);
		IToken char_literal384 = default(IToken);
		XAstParserRuleReturnScope additive_expression381 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope additive_expression385 = default(XAstParserRuleReturnScope);

		object string_literal382_tree = default(object);
		object char_literal383_tree = default(object);
		object char_literal384_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(420, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }

			// cs.g:420:24: ( additive_expression ( ( '<<' | '>' '>' ) additive_expression )* )
			DebugEnterAlt(1);
			// cs.g:421:2: additive_expression ( ( '<<' | '>' '>' ) additive_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(421, 2);
			PushFollow(Follow._additive_expression_in_shift_expression3168);
			additive_expression381=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression381.Tree, additive_expression381, retval);
			DebugLocation(421, 22);
			// cs.g:421:22: ( ( '<<' | '>' '>' ) additive_expression )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==GT))
				{
					int LA109_1 = input.LA(2);

					if ((LA109_1==GT))
					{
						alt109 = 1;
					}


				}
				else if ((LA109_0==82))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:421:23: ( '<<' | '>' '>' ) additive_expression
					{
					DebugLocation(421, 23);
					// cs.g:421:23: ( '<<' | '>' '>' )
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, false);
					int LA108_0 = input.LA(1);

					if ((LA108_0==82))
					{
						alt108 = 1;
					}
					else if ((LA108_0==GT))
					{
						alt108 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 108, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:421:24: '<<'
						{
						DebugLocation(421, 24);
						string_literal382=(IToken)Match(input,82,Follow._82_in_shift_expression3172); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal382_tree = (object)adaptor.Create(string_literal382, retval);
						adaptor.AddChild(root_0, string_literal382_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// cs.g:421:29: '>' '>'
						{
						DebugLocation(421, 29);
						char_literal383=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_shift_expression3174), "GT"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal383_tree = (object)adaptor.Create(char_literal383, retval);
						adaptor.AddChild(root_0, char_literal383_tree);
						}
						DebugLocation(421, 33);
						char_literal384=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_shift_expression3176), "GT"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal384_tree = (object)adaptor.Create(char_literal384, retval);
						adaptor.AddChild(root_0, char_literal384_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(108); }

					DebugLocation(421, 38);
					PushFollow(Follow._additive_expression_in_shift_expression3179);
					additive_expression385=additive_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression385.Tree, additive_expression385, retval);

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expression", 101);
			LeaveRule("shift_expression", 101);
			LeaveRule_shift_expression();
			if (state.backtracking > 0) { Memoize(input, 101, shift_expression_StartIndex); }

		}
		DebugLocation(421, 59);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();

	// $ANTLR start "relational_expression"
	// cs.g:422:8: public relational_expression : shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* ;
	[GrammarRule("relational_expression")]
	public XAstParserRuleReturnScope relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 102);
		var retval = new XAstParserRuleReturnScope("relational_expression");
		
		retval.Start = (IToken)input.LT(1);
		int relational_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set387 = default(IToken);
		IToken set389 = default(IToken);
		XAstParserRuleReturnScope shift_expression386 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shift_expression388 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope non_nullable_type390 = default(XAstParserRuleReturnScope);

		object set387_tree = default(object);
		object set389_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(422, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }

			// cs.g:422:29: ( shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* )
			DebugEnterAlt(1);
			// cs.g:423:2: shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(423, 2);
			PushFollow(Follow._shift_expression_in_relational_expression3191);
			shift_expression386=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression386.Tree, shift_expression386, retval);
			DebugLocation(424, 3);
			// cs.g:424:3: ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=3;
				try { DebugEnterDecision(110, false);
				int LA110_0 = input.LA(1);

				if ((LA110_0==GT||LA110_0==81||LA110_0==84||LA110_0==88))
				{
					alt110 = 1;
				}
				else if ((LA110_0==99||LA110_0==142))
				{
					alt110 = 2;
				}


				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:424:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
					{
					DebugLocation(424, 5);
					// cs.g:424:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
					DebugEnterAlt(1);
					// cs.g:424:6: ( '<' | '>' | '>=' | '<=' ) shift_expression
					{
					DebugLocation(424, 6);

					set387=(IToken)input.LT(1);
					if (input.LA(1)==GT||input.LA(1)==81||input.LA(1)==84||input.LA(1)==88)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set387, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(424, 26);
					PushFollow(Follow._shift_expression_in_relational_expression3208);
					shift_expression388=shift_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression388.Tree, shift_expression388, retval);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:425:6: ( ( 'is' | 'as' ) non_nullable_type )
					{
					DebugLocation(425, 6);
					// cs.g:425:6: ( ( 'is' | 'as' ) non_nullable_type )
					DebugEnterAlt(1);
					// cs.g:425:7: ( 'is' | 'as' ) non_nullable_type
					{
					DebugLocation(425, 7);

					set389=(IToken)input.LT(1);
					if (input.LA(1)==99||input.LA(1)==142)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set389, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(425, 21);
					PushFollow(Follow._non_nullable_type_in_relational_expression3225);
					non_nullable_type390=non_nullable_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, non_nullable_type390.Tree, non_nullable_type390, retval);

					}


					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 102);
			LeaveRule("relational_expression", 102);
			LeaveRule_relational_expression();
			if (state.backtracking > 0) { Memoize(input, 102, relational_expression_StartIndex); }

		}
		DebugLocation(426, 5);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();

	// $ANTLR start "equality_expression"
	// cs.g:427:8: public equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
	[GrammarRule("equality_expression")]
	public XAstParserRuleReturnScope equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 103);
		var retval = new XAstParserRuleReturnScope("equality_expression");
		
		retval.Start = (IToken)input.LT(1);
		int equality_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set392 = default(IToken);
		XAstParserRuleReturnScope relational_expression391 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relational_expression393 = default(XAstParserRuleReturnScope);

		object set392_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(427, 43);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }

			// cs.g:427:27: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
			DebugEnterAlt(1);
			// cs.g:428:2: relational_expression ( ( '==' | '!=' ) relational_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(428, 2);
			PushFollow(Follow._relational_expression_in_equality_expression3241);
			relational_expression391=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression391.Tree, relational_expression391, retval);
			DebugLocation(429, 5);
			// cs.g:429:5: ( ( '==' | '!=' ) relational_expression )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==62||LA111_0==86))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:429:6: ( '==' | '!=' ) relational_expression
					{
					DebugLocation(429, 6);

					set392=(IToken)input.LT(1);
					if (input.LA(1)==62||input.LA(1)==86)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set392, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(429, 20);
					PushFollow(Follow._relational_expression_in_equality_expression3256);
					relational_expression393=relational_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression393.Tree, relational_expression393, retval);

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 103);
			LeaveRule("equality_expression", 103);
			LeaveRule_equality_expression();
			if (state.backtracking > 0) { Memoize(input, 103, equality_expression_StartIndex); }

		}
		DebugLocation(429, 43);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();

	// $ANTLR start "and_expression"
	// cs.g:430:8: public and_expression : equality_expression ( '&' equality_expression )* ;
	[GrammarRule("and_expression")]
	public XAstParserRuleReturnScope and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 104);
		var retval = new XAstParserRuleReturnScope("and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal395 = default(IToken);
		XAstParserRuleReturnScope equality_expression394 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equality_expression396 = default(XAstParserRuleReturnScope);

		object char_literal395_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(430, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }

			// cs.g:430:22: ( equality_expression ( '&' equality_expression )* )
			DebugEnterAlt(1);
			// cs.g:431:2: equality_expression ( '&' equality_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(431, 2);
			PushFollow(Follow._equality_expression_in_and_expression3268);
			equality_expression394=equality_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression394.Tree, equality_expression394, retval);
			DebugLocation(431, 22);
			// cs.g:431:22: ( '&' equality_expression )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==66))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:431:23: '&' equality_expression
					{
					DebugLocation(431, 23);
					char_literal395=(IToken)Match(input,66,Follow._66_in_and_expression3271); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal395_tree = (object)adaptor.Create(char_literal395, retval);
					adaptor.AddChild(root_0, char_literal395_tree);
					}
					DebugLocation(431, 29);
					PushFollow(Follow._equality_expression_in_and_expression3275);
					equality_expression396=equality_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression396.Tree, equality_expression396, retval);

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 104);
			LeaveRule("and_expression", 104);
			LeaveRule_and_expression();
			if (state.backtracking > 0) { Memoize(input, 104, and_expression_StartIndex); }

		}
		DebugLocation(431, 50);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_exclusive_or_expression();
	partial void LeaveRule_exclusive_or_expression();

	// $ANTLR start "exclusive_or_expression"
	// cs.g:432:8: public exclusive_or_expression : and_expression ( '^' and_expression )* ;
	[GrammarRule("exclusive_or_expression")]
	public XAstParserRuleReturnScope exclusive_or_expression()
	{
		EnterRule_exclusive_or_expression();
		EnterRule("exclusive_or_expression", 105);
		var retval = new XAstParserRuleReturnScope("exclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int exclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal398 = default(IToken);
		XAstParserRuleReturnScope and_expression397 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope and_expression399 = default(XAstParserRuleReturnScope);

		object char_literal398_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
		DebugLocation(432, 40);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }

			// cs.g:432:31: ( and_expression ( '^' and_expression )* )
			DebugEnterAlt(1);
			// cs.g:433:2: and_expression ( '^' and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(433, 2);
			PushFollow(Follow._and_expression_in_exclusive_or_expression3287);
			and_expression397=and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression397.Tree, and_expression397, retval);
			DebugLocation(433, 17);
			// cs.g:433:17: ( '^' and_expression )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_0 = input.LA(1);

				if ((LA113_0==93))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:433:18: '^' and_expression
					{
					DebugLocation(433, 18);
					char_literal398=(IToken)Match(input,93,Follow._93_in_exclusive_or_expression3290); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal398_tree = (object)adaptor.Create(char_literal398, retval);
					adaptor.AddChild(root_0, char_literal398_tree);
					}
					DebugLocation(433, 24);
					PushFollow(Follow._and_expression_in_exclusive_or_expression3294);
					and_expression399=and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression399.Tree, and_expression399, retval);

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusive_or_expression", 105);
			LeaveRule("exclusive_or_expression", 105);
			LeaveRule_exclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 105, exclusive_or_expression_StartIndex); }

		}
		DebugLocation(433, 40);
		} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "exclusive_or_expression"

	partial void EnterRule_inclusive_or_expression();
	partial void LeaveRule_inclusive_or_expression();

	// $ANTLR start "inclusive_or_expression"
	// cs.g:434:8: public inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
	[GrammarRule("inclusive_or_expression")]
	public XAstParserRuleReturnScope inclusive_or_expression()
	{
		EnterRule_inclusive_or_expression();
		EnterRule("inclusive_or_expression", 106);
		var retval = new XAstParserRuleReturnScope("inclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int inclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal401 = default(IToken);
		XAstParserRuleReturnScope exclusive_or_expression400 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope exclusive_or_expression402 = default(XAstParserRuleReturnScope);

		object char_literal401_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
		DebugLocation(434, 60);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }

			// cs.g:434:31: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
			DebugEnterAlt(1);
			// cs.g:435:2: exclusive_or_expression ( '|' exclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(435, 2);
			PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression3306);
			exclusive_or_expression400=exclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression400.Tree, exclusive_or_expression400, retval);
			DebugLocation(435, 28);
			// cs.g:435:28: ( '|' exclusive_or_expression )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==198))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:435:29: '|' exclusive_or_expression
					{
					DebugLocation(435, 29);
					char_literal401=(IToken)Match(input,198,Follow._198_in_inclusive_or_expression3311); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal401_tree = (object)adaptor.Create(char_literal401, retval);
					adaptor.AddChild(root_0, char_literal401_tree);
					}
					DebugLocation(435, 35);
					PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression3315);
					exclusive_or_expression402=exclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression402.Tree, exclusive_or_expression402, retval);

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusive_or_expression", 106);
			LeaveRule("inclusive_or_expression", 106);
			LeaveRule_inclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 106, inclusive_or_expression_StartIndex); }

		}
		DebugLocation(435, 60);
		} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "inclusive_or_expression"

	partial void EnterRule_conditional_and_expression();
	partial void LeaveRule_conditional_and_expression();

	// $ANTLR start "conditional_and_expression"
	// cs.g:436:8: public conditional_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
	[GrammarRule("conditional_and_expression")]
	public XAstParserRuleReturnScope conditional_and_expression()
	{
		EnterRule_conditional_and_expression();
		EnterRule("conditional_and_expression", 107);
		var retval = new XAstParserRuleReturnScope("conditional_and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal404 = default(IToken);
		XAstParserRuleReturnScope inclusive_or_expression403 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope inclusive_or_expression405 = default(XAstParserRuleReturnScope);

		object string_literal404_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_and_expression");
		DebugLocation(436, 61);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }

			// cs.g:436:34: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
			DebugEnterAlt(1);
			// cs.g:437:2: inclusive_or_expression ( '&&' inclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(437, 2);
			PushFollow(Follow._inclusive_or_expression_in_conditional_and_expression3327);
			inclusive_or_expression403=inclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression403.Tree, inclusive_or_expression403, retval);
			DebugLocation(437, 28);
			// cs.g:437:28: ( '&&' inclusive_or_expression )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==65))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:437:29: '&&' inclusive_or_expression
					{
					DebugLocation(437, 29);
					string_literal404=(IToken)Match(input,65,Follow._65_in_conditional_and_expression3332); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal404_tree = (object)adaptor.Create(string_literal404, retval);
					adaptor.AddChild(root_0, string_literal404_tree);
					}
					DebugLocation(437, 36);
					PushFollow(Follow._inclusive_or_expression_in_conditional_and_expression3336);
					inclusive_or_expression405=inclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression405.Tree, inclusive_or_expression405, retval);

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_and_expression", 107);
			LeaveRule("conditional_and_expression", 107);
			LeaveRule_conditional_and_expression();
			if (state.backtracking > 0) { Memoize(input, 107, conditional_and_expression_StartIndex); }

		}
		DebugLocation(437, 61);
		} finally { DebugExitRule(GrammarFileName, "conditional_and_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_and_expression"

	partial void EnterRule_conditional_or_expression();
	partial void LeaveRule_conditional_or_expression();

	// $ANTLR start "conditional_or_expression"
	// cs.g:438:8: public conditional_or_expression : conditional_and_expression ( '||' conditional_and_expression )* ;
	[GrammarRule("conditional_or_expression")]
	public XAstParserRuleReturnScope conditional_or_expression()
	{
		EnterRule_conditional_or_expression();
		EnterRule("conditional_or_expression", 108);
		var retval = new XAstParserRuleReturnScope("conditional_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal407 = default(IToken);
		XAstParserRuleReturnScope conditional_and_expression406 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_and_expression408 = default(XAstParserRuleReturnScope);

		object string_literal407_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_or_expression");
		DebugLocation(438, 66);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }

			// cs.g:438:33: ( conditional_and_expression ( '||' conditional_and_expression )* )
			DebugEnterAlt(1);
			// cs.g:439:2: conditional_and_expression ( '||' conditional_and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(439, 2);
			PushFollow(Follow._conditional_and_expression_in_conditional_or_expression3348);
			conditional_and_expression406=conditional_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_and_expression406.Tree, conditional_and_expression406, retval);
			DebugLocation(439, 30);
			// cs.g:439:30: ( '||' conditional_and_expression )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==200))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:439:31: '||' conditional_and_expression
					{
					DebugLocation(439, 31);
					string_literal407=(IToken)Match(input,200,Follow._200_in_conditional_or_expression3352); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal407_tree = (object)adaptor.Create(string_literal407, retval);
					adaptor.AddChild(root_0, string_literal407_tree);
					}
					DebugLocation(439, 38);
					PushFollow(Follow._conditional_and_expression_in_conditional_or_expression3356);
					conditional_and_expression408=conditional_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_and_expression408.Tree, conditional_and_expression408, retval);

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_or_expression", 108);
			LeaveRule("conditional_or_expression", 108);
			LeaveRule_conditional_or_expression();
			if (state.backtracking > 0) { Memoize(input, 108, conditional_or_expression_StartIndex); }

		}
		DebugLocation(439, 66);
		} finally { DebugExitRule(GrammarFileName, "conditional_or_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_or_expression"

	partial void EnterRule_null_coalescing_expression();
	partial void LeaveRule_null_coalescing_expression();

	// $ANTLR start "null_coalescing_expression"
	// cs.g:441:8: public null_coalescing_expression : conditional_or_expression ( '??' conditional_or_expression )* ;
	[GrammarRule("null_coalescing_expression")]
	public XAstParserRuleReturnScope null_coalescing_expression()
	{
		EnterRule_null_coalescing_expression();
		EnterRule("null_coalescing_expression", 109);
		var retval = new XAstParserRuleReturnScope("null_coalescing_expression");
		
		retval.Start = (IToken)input.LT(1);
		int null_coalescing_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal410 = default(IToken);
		XAstParserRuleReturnScope conditional_or_expression409 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_or_expression411 = default(XAstParserRuleReturnScope);

		object string_literal410_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "null_coalescing_expression");
		DebugLocation(441, 65);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }

			// cs.g:441:34: ( conditional_or_expression ( '??' conditional_or_expression )* )
			DebugEnterAlt(1);
			// cs.g:442:2: conditional_or_expression ( '??' conditional_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(442, 2);
			PushFollow(Follow._conditional_or_expression_in_null_coalescing_expression3369);
			conditional_or_expression409=conditional_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_or_expression409.Tree, conditional_or_expression409, retval);
			DebugLocation(442, 30);
			// cs.g:442:30: ( '??' conditional_or_expression )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==90))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:442:31: '??' conditional_or_expression
					{
					DebugLocation(442, 31);
					string_literal410=(IToken)Match(input,90,Follow._90_in_null_coalescing_expression3374); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal410_tree = (object)adaptor.Create(string_literal410, retval);
					adaptor.AddChild(root_0, string_literal410_tree);
					}
					DebugLocation(442, 38);
					PushFollow(Follow._conditional_or_expression_in_null_coalescing_expression3378);
					conditional_or_expression411=conditional_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_or_expression411.Tree, conditional_or_expression411, retval);

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("null_coalescing_expression", 109);
			LeaveRule("null_coalescing_expression", 109);
			LeaveRule_null_coalescing_expression();
			if (state.backtracking > 0) { Memoize(input, 109, null_coalescing_expression_StartIndex); }

		}
		DebugLocation(442, 65);
		} finally { DebugExitRule(GrammarFileName, "null_coalescing_expression"); }
		return retval;

	}
	// $ANTLR end "null_coalescing_expression"

	partial void EnterRule_conditional_expression();
	partial void LeaveRule_conditional_expression();

	// $ANTLR start "conditional_expression"
	// cs.g:443:8: public conditional_expression : null_coalescing_expression ( '?' expression ':' expression )? ;
	[GrammarRule("conditional_expression")]
	public XAstParserRuleReturnScope conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 110);
		var retval = new XAstParserRuleReturnScope("conditional_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal413 = default(IToken);
		IToken char_literal415 = default(IToken);
		XAstParserRuleReturnScope null_coalescing_expression412 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression414 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression416 = default(XAstParserRuleReturnScope);

		object char_literal413_tree = default(object);
		object char_literal415_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(443, 69);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }

			// cs.g:443:30: ( null_coalescing_expression ( '?' expression ':' expression )? )
			DebugEnterAlt(1);
			// cs.g:444:2: null_coalescing_expression ( '?' expression ':' expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(444, 2);
			PushFollow(Follow._null_coalescing_expression_in_conditional_expression3390);
			null_coalescing_expression412=null_coalescing_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, null_coalescing_expression412.Tree, null_coalescing_expression412, retval);
			DebugLocation(444, 31);
			// cs.g:444:31: ( '?' expression ':' expression )?
			int alt118=2;
			try { DebugEnterSubRule(118);
			try { DebugEnterDecision(118, false);
			int LA118_0 = input.LA(1);

			if ((LA118_0==89))
			{
				alt118 = 1;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:444:32: '?' expression ':' expression
				{
				DebugLocation(444, 32);
				char_literal413=(IToken)Match(input,89,Follow._89_in_conditional_expression3395); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal413_tree = (object)adaptor.Create(char_literal413, retval);
				adaptor.AddChild(root_0, char_literal413_tree);
				}
				DebugLocation(444, 38);
				PushFollow(Follow._expression_in_conditional_expression3399);
				expression414=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression414.Tree, expression414, retval);
				DebugLocation(444, 51);
				char_literal415=(IToken)Match(input,79,Follow._79_in_conditional_expression3403); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal415_tree = (object)adaptor.Create(char_literal415, retval);
				adaptor.AddChild(root_0, char_literal415_tree);
				}
				DebugLocation(444, 57);
				PushFollow(Follow._expression_in_conditional_expression3407);
				expression416=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression416.Tree, expression416, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(118); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_expression", 110);
			LeaveRule("conditional_expression", 110);
			LeaveRule_conditional_expression();
			if (state.backtracking > 0) { Memoize(input, 110, conditional_expression_StartIndex); }

		}
		DebugLocation(444, 69);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"

	partial void EnterRule_lambda_expression();
	partial void LeaveRule_lambda_expression();

	// $ANTLR start "lambda_expression"
	// cs.g:449:8: public lambda_expression : anonymous_function_signature '=>' anonymous_function_body ;
	[GrammarRule("lambda_expression")]
	public XAstParserRuleReturnScope lambda_expression()
	{
		EnterRule_lambda_expression();
		EnterRule("lambda_expression", 111);
		var retval = new XAstParserRuleReturnScope("lambda_expression");
		
		retval.Start = (IToken)input.LT(1);
		int lambda_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal418 = default(IToken);
		XAstParserRuleReturnScope anonymous_function_signature417 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope anonymous_function_body419 = default(XAstParserRuleReturnScope);

		object string_literal418_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "lambda_expression");
		DebugLocation(449, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 111)) { return retval; }

			// cs.g:449:25: ( anonymous_function_signature '=>' anonymous_function_body )
			DebugEnterAlt(1);
			// cs.g:450:2: anonymous_function_signature '=>' anonymous_function_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(450, 2);
			PushFollow(Follow._anonymous_function_signature_in_lambda_expression3429);
			anonymous_function_signature417=anonymous_function_signature();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_function_signature417.Tree, anonymous_function_signature417, retval);
			DebugLocation(450, 33);
			string_literal418=(IToken)Match(input,87,Follow._87_in_lambda_expression3433); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal418_tree = (object)adaptor.Create(string_literal418, retval);
			adaptor.AddChild(root_0, string_literal418_tree);
			}
			DebugLocation(450, 40);
			PushFollow(Follow._anonymous_function_body_in_lambda_expression3437);
			anonymous_function_body419=anonymous_function_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_function_body419.Tree, anonymous_function_body419, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expression", 111);
			LeaveRule("lambda_expression", 111);
			LeaveRule_lambda_expression();
			if (state.backtracking > 0) { Memoize(input, 111, lambda_expression_StartIndex); }

		}
		DebugLocation(450, 62);
		} finally { DebugExitRule(GrammarFileName, "lambda_expression"); }
		return retval;

	}
	// $ANTLR end "lambda_expression"

	partial void EnterRule_anonymous_function_signature();
	partial void LeaveRule_anonymous_function_signature();

	// $ANTLR start "anonymous_function_signature"
	// cs.g:451:8: public anonymous_function_signature : ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list );
	[GrammarRule("anonymous_function_signature")]
	public XAstParserRuleReturnScope anonymous_function_signature()
	{
		EnterRule_anonymous_function_signature();
		EnterRule("anonymous_function_signature", 112);
		var retval = new XAstParserRuleReturnScope("anonymous_function_signature");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_function_signature_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal420 = default(IToken);
		IToken char_literal423 = default(IToken);
		XAstParserRuleReturnScope explicit_anonymous_function_parameter_list421 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope implicit_anonymous_function_parameter_list422 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope implicit_anonymous_function_parameter_list424 = default(XAstParserRuleReturnScope);

		object char_literal420_tree = default(object);
		object char_literal423_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymous_function_signature");
		DebugLocation(451, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 112)) { return retval; }

			// cs.g:451:36: ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list )
			int alt120=2;
			try { DebugEnterDecision(120, false);
			int LA120_0 = input.LA(1);

			if ((LA120_0==68))
			{
				alt120 = 1;
			}
			else if ((LA120_0==DEFINE||LA120_0==ELIF||LA120_0==ENDIF||LA120_0==IDENTIFIER||LA120_0==UNDEF||LA120_0==95||(LA120_0>=97 && LA120_0<=98)||(LA120_0>=100 && LA120_0<=101)||LA120_0==105||LA120_0==117||LA120_0==120||LA120_0==122||LA120_0==126||(LA120_0>=132 && LA120_0<=133)||LA120_0==135||LA120_0==141||(LA120_0>=143 && LA120_0<=144)||(LA120_0>=147 && LA120_0<=148)||LA120_0==152||LA120_0==154||LA120_0==157||LA120_0==160||LA120_0==162||LA120_0==167||(LA120_0>=171 && LA120_0<=172)||LA120_0==183||LA120_0==190||LA120_0==194||LA120_0==196))
			{
				alt120 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:452:2: '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(452, 2);
				char_literal420=(IToken)Match(input,68,Follow._68_in_anonymous_function_signature3446); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal420_tree = (object)adaptor.Create(char_literal420, retval);
				adaptor.AddChild(root_0, char_literal420_tree);
				}
				DebugLocation(452, 6);
				// cs.g:452:6: ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )?
				int alt119=3;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, false);
				switch (input.LA(1))
				{
				case 103:
				case 106:
				case 109:
				case 114:
				case 119:
				case 129:
				case 138:
				case 146:
				case 151:
				case 155:
				case 166:
				case 169:
				case 173:
				case 177:
				case 185:
				case 186:
				case 189:
				case 192:
					{
					alt119 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA119_2 = input.LA(2);

					if ((LA119_2==DEFINE||LA119_2==DOT||LA119_2==ELIF||LA119_2==ENDIF||LA119_2==IDENTIFIER||LA119_2==UNDEF||LA119_2==69||(LA119_2>=80 && LA119_2<=81)||LA119_2==89||LA119_2==91||LA119_2==95||(LA119_2>=97 && LA119_2<=98)||(LA119_2>=100 && LA119_2<=101)||LA119_2==105||LA119_2==117||LA119_2==120||LA119_2==122||LA119_2==126||(LA119_2>=132 && LA119_2<=133)||LA119_2==135||LA119_2==141||(LA119_2>=143 && LA119_2<=144)||(LA119_2>=147 && LA119_2<=148)||LA119_2==152||LA119_2==154||LA119_2==157||LA119_2==160||LA119_2==162||LA119_2==167||(LA119_2>=171 && LA119_2<=172)||LA119_2==183||LA119_2==190||LA119_2==194||LA119_2==196))
					{
						alt119 = 1;
					}
					else if ((LA119_2==RPAREN||LA119_2==74))
					{
						alt119 = 2;
					}
					}
					break;
				case DEFINE:
				case ELIF:
				case ENDIF:
				case UNDEF:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 133:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA119_3 = input.LA(2);

					if ((LA119_3==DEFINE||LA119_3==DOT||LA119_3==ELIF||LA119_3==ENDIF||LA119_3==IDENTIFIER||LA119_3==UNDEF||LA119_3==69||(LA119_3>=80 && LA119_3<=81)||LA119_3==89||LA119_3==91||LA119_3==95||(LA119_3>=97 && LA119_3<=98)||(LA119_3>=100 && LA119_3<=101)||LA119_3==105||LA119_3==117||LA119_3==120||LA119_3==122||LA119_3==126||(LA119_3>=132 && LA119_3<=133)||LA119_3==135||LA119_3==141||(LA119_3>=143 && LA119_3<=144)||(LA119_3>=147 && LA119_3<=148)||LA119_3==152||LA119_3==154||LA119_3==157||LA119_3==160||LA119_3==162||LA119_3==167||(LA119_3>=171 && LA119_3<=172)||LA119_3==183||LA119_3==190||LA119_3==194||LA119_3==196))
					{
						alt119 = 1;
					}
					else if ((LA119_3==RPAREN||LA119_3==74))
					{
						alt119 = 2;
					}
					}
					break;
				}

				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:452:7: explicit_anonymous_function_parameter_list
					{
					DebugLocation(452, 7);
					PushFollow(Follow._explicit_anonymous_function_parameter_list_in_anonymous_function_signature3449);
					explicit_anonymous_function_parameter_list421=explicit_anonymous_function_parameter_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter_list421.Tree, explicit_anonymous_function_parameter_list421, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:453:5: implicit_anonymous_function_parameter_list
					{
					DebugLocation(453, 5);
					PushFollow(Follow._implicit_anonymous_function_parameter_list_in_anonymous_function_signature3455);
					implicit_anonymous_function_parameter_list422=implicit_anonymous_function_parameter_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list422.Tree, implicit_anonymous_function_parameter_list422, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(119); }

				DebugLocation(453, 50);
				char_literal423=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_signature3459), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal423_tree = (object)adaptor.Create(char_literal423, retval);
				adaptor.AddChild(root_0, char_literal423_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:454:4: implicit_anonymous_function_parameter_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(454, 4);
				PushFollow(Follow._implicit_anonymous_function_parameter_list_in_anonymous_function_signature3464);
				implicit_anonymous_function_parameter_list424=implicit_anonymous_function_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list424.Tree, implicit_anonymous_function_parameter_list424, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_signature", 112);
			LeaveRule("anonymous_function_signature", 112);
			LeaveRule_anonymous_function_signature();
			if (state.backtracking > 0) { Memoize(input, 112, anonymous_function_signature_StartIndex); }

		}
		DebugLocation(455, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_signature"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_signature"

	partial void EnterRule_implicit_anonymous_function_parameter_list();
	partial void LeaveRule_implicit_anonymous_function_parameter_list();

	// $ANTLR start "implicit_anonymous_function_parameter_list"
	// cs.g:456:8: public implicit_anonymous_function_parameter_list : implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* ;
	[GrammarRule("implicit_anonymous_function_parameter_list")]
	public XAstParserRuleReturnScope implicit_anonymous_function_parameter_list()
	{
		EnterRule_implicit_anonymous_function_parameter_list();
		EnterRule("implicit_anonymous_function_parameter_list", 113);
		var retval = new XAstParserRuleReturnScope("implicit_anonymous_function_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int implicit_anonymous_function_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal426 = default(IToken);
		XAstParserRuleReturnScope implicit_anonymous_function_parameter425 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope implicit_anonymous_function_parameter427 = default(XAstParserRuleReturnScope);

		object char_literal426_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "implicit_anonymous_function_parameter_list");
		DebugLocation(456, 88);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 113)) { return retval; }

			// cs.g:456:50: ( implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* )
			DebugEnterAlt(1);
			// cs.g:457:2: implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(457, 2);
			PushFollow(Follow._implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3475);
			implicit_anonymous_function_parameter425=implicit_anonymous_function_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter425.Tree, implicit_anonymous_function_parameter425, retval);
			DebugLocation(457, 42);
			// cs.g:457:42: ( ',' implicit_anonymous_function_parameter )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				int LA121_0 = input.LA(1);

				if ((LA121_0==74))
				{
					alt121 = 1;
				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:457:43: ',' implicit_anonymous_function_parameter
					{
					DebugLocation(457, 43);
					char_literal426=(IToken)Match(input,74,Follow._74_in_implicit_anonymous_function_parameter_list3480); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal426_tree = (object)adaptor.Create(char_literal426, retval);
					adaptor.AddChild(root_0, char_literal426_tree);
					}
					DebugLocation(457, 49);
					PushFollow(Follow._implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3484);
					implicit_anonymous_function_parameter427=implicit_anonymous_function_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter427.Tree, implicit_anonymous_function_parameter427, retval);

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implicit_anonymous_function_parameter_list", 113);
			LeaveRule("implicit_anonymous_function_parameter_list", 113);
			LeaveRule_implicit_anonymous_function_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 113, implicit_anonymous_function_parameter_list_StartIndex); }

		}
		DebugLocation(457, 88);
		} finally { DebugExitRule(GrammarFileName, "implicit_anonymous_function_parameter_list"); }
		return retval;

	}
	// $ANTLR end "implicit_anonymous_function_parameter_list"

	partial void EnterRule_implicit_anonymous_function_parameter();
	partial void LeaveRule_implicit_anonymous_function_parameter();

	// $ANTLR start "implicit_anonymous_function_parameter"
	// cs.g:458:8: public implicit_anonymous_function_parameter : identifier ;
	[GrammarRule("implicit_anonymous_function_parameter")]
	public XAstParserRuleReturnScope implicit_anonymous_function_parameter()
	{
		EnterRule_implicit_anonymous_function_parameter();
		EnterRule("implicit_anonymous_function_parameter", 114);
		var retval = new XAstParserRuleReturnScope("implicit_anonymous_function_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int implicit_anonymous_function_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope identifier428 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "implicit_anonymous_function_parameter");
		DebugLocation(458, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 114)) { return retval; }

			// cs.g:458:45: ( identifier )
			DebugEnterAlt(1);
			// cs.g:459:2: identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(459, 2);
			PushFollow(Follow._identifier_in_implicit_anonymous_function_parameter3496);
			identifier428=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier428.Tree, identifier428, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implicit_anonymous_function_parameter", 114);
			LeaveRule("implicit_anonymous_function_parameter", 114);
			LeaveRule_implicit_anonymous_function_parameter();
			if (state.backtracking > 0) { Memoize(input, 114, implicit_anonymous_function_parameter_StartIndex); }

		}
		DebugLocation(459, 11);
		} finally { DebugExitRule(GrammarFileName, "implicit_anonymous_function_parameter"); }
		return retval;

	}
	// $ANTLR end "implicit_anonymous_function_parameter"

	partial void EnterRule_anonymous_function_body();
	partial void LeaveRule_anonymous_function_body();

	// $ANTLR start "anonymous_function_body"
	// cs.g:460:8: public anonymous_function_body : ( expression | block );
	[GrammarRule("anonymous_function_body")]
	public XAstParserRuleReturnScope anonymous_function_body()
	{
		EnterRule_anonymous_function_body();
		EnterRule("anonymous_function_body", 115);
		var retval = new XAstParserRuleReturnScope("anonymous_function_body");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_function_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression429 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope block430 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "anonymous_function_body");
		DebugLocation(460, 9);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 115)) { return retval; }

			// cs.g:460:31: ( expression | block )
			int alt122=2;
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==Character_literal||LA122_0==DEFINE||LA122_0==ELIF||LA122_0==ENDIF||LA122_0==FALSE||(LA122_0>=Hex_number && LA122_0<=IDENTIFIER)||(LA122_0>=MINUS && LA122_0<=NUMBER)||LA122_0==Real_literal||LA122_0==STRINGLITERAL||LA122_0==TRUE||LA122_0==UNDEF||LA122_0==Verbatim_string_literal||LA122_0==61||LA122_0==66||(LA122_0>=68 && LA122_0<=69)||(LA122_0>=71 && LA122_0<=72)||LA122_0==75||LA122_0==95||(LA122_0>=97 && LA122_0<=98)||(LA122_0>=100 && LA122_0<=103)||(LA122_0>=105 && LA122_0<=106)||(LA122_0>=109 && LA122_0<=110)||(LA122_0>=114 && LA122_0<=117)||(LA122_0>=119 && LA122_0<=120)||LA122_0==122||LA122_0==126||LA122_0==129||(LA122_0>=132 && LA122_0<=133)||LA122_0==135||LA122_0==138||LA122_0==141||(LA122_0>=143 && LA122_0<=144)||(LA122_0>=146 && LA122_0<=148)||(LA122_0>=150 && LA122_0<=152)||LA122_0==154||LA122_0==157||LA122_0==160||LA122_0==162||LA122_0==167||LA122_0==169||(LA122_0>=171 && LA122_0<=174)||LA122_0==177||LA122_0==180||(LA122_0>=183 && LA122_0<=187)||(LA122_0>=189 && LA122_0<=190)||LA122_0==194||LA122_0==196||LA122_0==202))
			{
				alt122 = 1;
			}
			else if ((LA122_0==SEMI||LA122_0==197))
			{
				alt122 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:461:2: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 2);
				PushFollow(Follow._expression_in_anonymous_function_body3505);
				expression429=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression429.Tree, expression429, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:462:4: block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(462, 4);
				PushFollow(Follow._block_in_anonymous_function_body3510);
				block430=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block430.Tree, block430, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_body", 115);
			LeaveRule("anonymous_function_body", 115);
			LeaveRule_anonymous_function_body();
			if (state.backtracking > 0) { Memoize(input, 115, anonymous_function_body_StartIndex); }

		}
		DebugLocation(462, 9);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_body"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_body"

	partial void EnterRule_query_expression();
	partial void LeaveRule_query_expression();

	// $ANTLR start "query_expression"
	// cs.g:467:8: public query_expression : from_clause query_body ;
	[GrammarRule("query_expression")]
	public XAstParserRuleReturnScope query_expression()
	{
		EnterRule_query_expression();
		EnterRule("query_expression", 116);
		var retval = new XAstParserRuleReturnScope("query_expression");
		
		retval.Start = (IToken)input.LT(1);
		int query_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope from_clause431 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope query_body432 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "query_expression");
		DebugLocation(467, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 116)) { return retval; }

			// cs.g:467:24: ( from_clause query_body )
			DebugEnterAlt(1);
			// cs.g:468:2: from_clause query_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(468, 2);
			PushFollow(Follow._from_clause_in_query_expression3524);
			from_clause431=from_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, from_clause431.Tree, from_clause431, retval);
			DebugLocation(468, 16);
			PushFollow(Follow._query_body_in_query_expression3528);
			query_body432=query_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, query_body432.Tree, query_body432, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_expression", 116);
			LeaveRule("query_expression", 116);
			LeaveRule_query_expression();
			if (state.backtracking > 0) { Memoize(input, 116, query_expression_StartIndex); }

		}
		DebugLocation(468, 26);
		} finally { DebugExitRule(GrammarFileName, "query_expression"); }
		return retval;

	}
	// $ANTLR end "query_expression"

	partial void EnterRule_query_body();
	partial void LeaveRule_query_body();

	// $ANTLR start "query_body"
	// cs.g:469:8: public query_body : ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? ;
	[GrammarRule("query_body")]
	public XAstParserRuleReturnScope query_body()
	{
		EnterRule_query_body();
		EnterRule("query_body", 117);
		var retval = new XAstParserRuleReturnScope("query_body");
		
		retval.Start = (IToken)input.LT(1);
		int query_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope query_body_clauses433 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope select_or_group_clause434 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope query_continuation435 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "query_body");
		DebugLocation(469, 82);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 117)) { return retval; }

			// cs.g:469:18: ( ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? )
			DebugEnterAlt(1);
			// cs.g:471:2: ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(471, 2);
			// cs.g:471:2: ( query_body_clauses )?
			int alt123=2;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, false);
			int LA123_0 = input.LA(1);

			if ((LA123_0==132||(LA123_0>=143 && LA123_0<=144)||LA123_0==154||LA123_0==194))
			{
				alt123 = 1;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:471:2: query_body_clauses
				{
				DebugLocation(471, 2);
				PushFollow(Follow._query_body_clauses_in_query_body3540);
				query_body_clauses433=query_body_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, query_body_clauses433.Tree, query_body_clauses433, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(123); }

			DebugLocation(471, 24);
			PushFollow(Follow._select_or_group_clause_in_query_body3545);
			select_or_group_clause434=select_or_group_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, select_or_group_clause434.Tree, select_or_group_clause434, retval);
			DebugLocation(471, 49);
			// cs.g:471:49: ( ( 'into' )=> query_continuation )?
			int alt124=2;
			try { DebugEnterSubRule(124);
			try { DebugEnterDecision(124, false);
			int LA124_0 = input.LA(1);

			if ((LA124_0==141))
			{
				int LA124_1 = input.LA(2);

				if ((EvaluatePredicate(synpred23_cs_fragment)))
				{
					alt124 = 1;
				}
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:471:50: ( 'into' )=> query_continuation
				{
				DebugLocation(471, 62);
				PushFollow(Follow._query_continuation_in_query_body3556);
				query_continuation435=query_continuation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, query_continuation435.Tree, query_continuation435, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(124); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_body", 117);
			LeaveRule("query_body", 117);
			LeaveRule_query_body();
			if (state.backtracking > 0) { Memoize(input, 117, query_body_StartIndex); }

		}
		DebugLocation(471, 82);
		} finally { DebugExitRule(GrammarFileName, "query_body"); }
		return retval;

	}
	// $ANTLR end "query_body"

	partial void EnterRule_query_continuation();
	partial void LeaveRule_query_continuation();

	// $ANTLR start "query_continuation"
	// cs.g:472:8: public query_continuation : 'into' identifier query_body ;
	[GrammarRule("query_continuation")]
	public XAstParserRuleReturnScope query_continuation()
	{
		EnterRule_query_continuation();
		EnterRule("query_continuation", 118);
		var retval = new XAstParserRuleReturnScope("query_continuation");
		
		retval.Start = (IToken)input.LT(1);
		int query_continuation_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal436 = default(IToken);
		XAstParserRuleReturnScope identifier437 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope query_body438 = default(XAstParserRuleReturnScope);

		object string_literal436_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "query_continuation");
		DebugLocation(472, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 118)) { return retval; }

			// cs.g:472:26: ( 'into' identifier query_body )
			DebugEnterAlt(1);
			// cs.g:473:2: 'into' identifier query_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(473, 2);
			string_literal436=(IToken)Match(input,141,Follow._141_in_query_continuation3568); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal436_tree = (object)adaptor.Create(string_literal436, retval);
			adaptor.AddChild(root_0, string_literal436_tree);
			}
			DebugLocation(473, 11);
			PushFollow(Follow._identifier_in_query_continuation3572);
			identifier437=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier437.Tree, identifier437, retval);
			DebugLocation(473, 24);
			PushFollow(Follow._query_body_in_query_continuation3576);
			query_body438=query_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, query_body438.Tree, query_body438, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_continuation", 118);
			LeaveRule("query_continuation", 118);
			LeaveRule_query_continuation();
			if (state.backtracking > 0) { Memoize(input, 118, query_continuation_StartIndex); }

		}
		DebugLocation(473, 33);
		} finally { DebugExitRule(GrammarFileName, "query_continuation"); }
		return retval;

	}
	// $ANTLR end "query_continuation"

	partial void EnterRule_query_body_clauses();
	partial void LeaveRule_query_body_clauses();

	// $ANTLR start "query_body_clauses"
	// cs.g:474:8: public query_body_clauses : ( query_body_clause )+ ;
	[GrammarRule("query_body_clauses")]
	public XAstParserRuleReturnScope query_body_clauses()
	{
		EnterRule_query_body_clauses();
		EnterRule("query_body_clauses", 119);
		var retval = new XAstParserRuleReturnScope("query_body_clauses");
		
		retval.Start = (IToken)input.LT(1);
		int query_body_clauses_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope query_body_clause439 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "query_body_clauses");
		DebugLocation(474, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 119)) { return retval; }

			// cs.g:474:26: ( ( query_body_clause )+ )
			DebugEnterAlt(1);
			// cs.g:475:2: ( query_body_clause )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(475, 2);
			// cs.g:475:2: ( query_body_clause )+
			int cnt125=0;
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==132||(LA125_0>=143 && LA125_0<=144)||LA125_0==154||LA125_0==194))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:475:2: query_body_clause
					{
					DebugLocation(475, 2);
					PushFollow(Follow._query_body_clause_in_query_body_clauses3585);
					query_body_clause439=query_body_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, query_body_clause439.Tree, query_body_clause439, retval);

					}
					break;

				default:
					if (cnt125 >= 1)
						goto loop125;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee125 = new EarlyExitException( 125, input );
					DebugRecognitionException(eee125);
					throw eee125;
				}
				cnt125++;
			}
			loop125:
				;

			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_body_clauses", 119);
			LeaveRule("query_body_clauses", 119);
			LeaveRule_query_body_clauses();
			if (state.backtracking > 0) { Memoize(input, 119, query_body_clauses_StartIndex); }

		}
		DebugLocation(475, 20);
		} finally { DebugExitRule(GrammarFileName, "query_body_clauses"); }
		return retval;

	}
	// $ANTLR end "query_body_clauses"

	partial void EnterRule_query_body_clause();
	partial void LeaveRule_query_body_clause();

	// $ANTLR start "query_body_clause"
	// cs.g:476:8: public query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
	[GrammarRule("query_body_clause")]
	public XAstParserRuleReturnScope query_body_clause()
	{
		EnterRule_query_body_clause();
		EnterRule("query_body_clause", 120);
		var retval = new XAstParserRuleReturnScope("query_body_clause");
		
		retval.Start = (IToken)input.LT(1);
		int query_body_clause_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope from_clause440 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope let_clause441 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope where_clause442 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope join_clause443 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope orderby_clause444 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "query_body_clause");
		DebugLocation(476, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 120)) { return retval; }

			// cs.g:476:25: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
			int alt126=5;
			try { DebugEnterDecision(126, false);
			switch (input.LA(1))
			{
			case 132:
				{
				alt126 = 1;
				}
				break;
			case 144:
				{
				alt126 = 2;
				}
				break;
			case 194:
				{
				alt126 = 3;
				}
				break;
			case 143:
				{
				alt126 = 4;
				}
				break;
			case 154:
				{
				alt126 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:477:2: from_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(477, 2);
				PushFollow(Follow._from_clause_in_query_body_clause3596);
				from_clause440=from_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, from_clause440.Tree, from_clause440, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:478:4: let_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(478, 4);
				PushFollow(Follow._let_clause_in_query_body_clause3601);
				let_clause441=let_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_clause441.Tree, let_clause441, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:479:4: where_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(479, 4);
				PushFollow(Follow._where_clause_in_query_body_clause3606);
				where_clause442=where_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, where_clause442.Tree, where_clause442, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:480:4: join_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(480, 4);
				PushFollow(Follow._join_clause_in_query_body_clause3611);
				join_clause443=join_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, join_clause443.Tree, join_clause443, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:481:4: orderby_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(481, 4);
				PushFollow(Follow._orderby_clause_in_query_body_clause3616);
				orderby_clause444=orderby_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, orderby_clause444.Tree, orderby_clause444, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_body_clause", 120);
			LeaveRule("query_body_clause", 120);
			LeaveRule_query_body_clause();
			if (state.backtracking > 0) { Memoize(input, 120, query_body_clause_StartIndex); }

		}
		DebugLocation(481, 17);
		} finally { DebugExitRule(GrammarFileName, "query_body_clause"); }
		return retval;

	}
	// $ANTLR end "query_body_clause"

	partial void EnterRule_from_clause();
	partial void LeaveRule_from_clause();

	// $ANTLR start "from_clause"
	// cs.g:482:8: public from_clause : 'from' ( type )? identifier 'in' expression ;
	[GrammarRule("from_clause")]
	public XAstParserRuleReturnScope from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 121);
		var retval = new XAstParserRuleReturnScope("from_clause");
		
		retval.Start = (IToken)input.LT(1);
		int from_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal445 = default(IToken);
		IToken string_literal448 = default(IToken);
		XAstParserRuleReturnScope type446 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier447 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression449 = default(XAstParserRuleReturnScope);

		object string_literal445_tree = default(object);
		object string_literal448_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(482, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 121)) { return retval; }

			// cs.g:482:19: ( 'from' ( type )? identifier 'in' expression )
			DebugEnterAlt(1);
			// cs.g:483:2: 'from' ( type )? identifier 'in' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(483, 2);
			string_literal445=(IToken)Match(input,132,Follow._132_in_from_clause3625); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal445_tree = (object)adaptor.Create(string_literal445, retval);
			adaptor.AddChild(root_0, string_literal445_tree);
			}
			DebugLocation(483, 11);
			// cs.g:483:11: ( type )?
			int alt127=2;
			try { DebugEnterSubRule(127);
			try { DebugEnterDecision(127, false);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
			case 192:
				{
				alt127 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA127_2 = input.LA(2);

				if ((LA127_2==DEFINE||LA127_2==DOT||LA127_2==ELIF||LA127_2==ENDIF||LA127_2==IDENTIFIER||LA127_2==UNDEF||LA127_2==69||(LA127_2>=80 && LA127_2<=81)||LA127_2==89||LA127_2==91||LA127_2==95||(LA127_2>=97 && LA127_2<=98)||(LA127_2>=100 && LA127_2<=101)||LA127_2==105||LA127_2==117||LA127_2==120||LA127_2==122||LA127_2==126||(LA127_2>=132 && LA127_2<=133)||LA127_2==135||LA127_2==141||(LA127_2>=143 && LA127_2<=144)||(LA127_2>=147 && LA127_2<=148)||LA127_2==152||LA127_2==154||LA127_2==157||LA127_2==160||LA127_2==162||LA127_2==167||(LA127_2>=171 && LA127_2<=172)||LA127_2==183||LA127_2==190||LA127_2==194||LA127_2==196))
				{
					alt127 = 1;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA127_3 = input.LA(2);

				if ((LA127_3==DEFINE||LA127_3==DOT||LA127_3==ELIF||LA127_3==ENDIF||LA127_3==IDENTIFIER||LA127_3==UNDEF||LA127_3==69||(LA127_3>=80 && LA127_3<=81)||LA127_3==89||LA127_3==91||LA127_3==95||(LA127_3>=97 && LA127_3<=98)||(LA127_3>=100 && LA127_3<=101)||LA127_3==105||LA127_3==117||LA127_3==120||LA127_3==122||LA127_3==126||(LA127_3>=132 && LA127_3<=133)||LA127_3==135||LA127_3==141||(LA127_3>=143 && LA127_3<=144)||(LA127_3>=147 && LA127_3<=148)||LA127_3==152||LA127_3==154||LA127_3==157||LA127_3==160||LA127_3==162||LA127_3==167||(LA127_3>=171 && LA127_3<=172)||LA127_3==183||LA127_3==190||LA127_3==194||LA127_3==196))
				{
					alt127 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:483:11: type
				{
				DebugLocation(483, 11);
				PushFollow(Follow._type_in_from_clause3629);
				type446=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type446.Tree, type446, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(127); }

			DebugLocation(483, 19);
			PushFollow(Follow._identifier_in_from_clause3634);
			identifier447=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier447.Tree, identifier447, retval);
			DebugLocation(483, 32);
			string_literal448=(IToken)Match(input,137,Follow._137_in_from_clause3638); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal448_tree = (object)adaptor.Create(string_literal448, retval);
			adaptor.AddChild(root_0, string_literal448_tree);
			}
			DebugLocation(483, 39);
			PushFollow(Follow._expression_in_from_clause3642);
			expression449=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression449.Tree, expression449, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 121);
			LeaveRule("from_clause", 121);
			LeaveRule_from_clause();
			if (state.backtracking > 0) { Memoize(input, 121, from_clause_StartIndex); }

		}
		DebugLocation(483, 49);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"

	partial void EnterRule_join_clause();
	partial void LeaveRule_join_clause();

	// $ANTLR start "join_clause"
	// cs.g:484:8: public join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
	[GrammarRule("join_clause")]
	public XAstParserRuleReturnScope join_clause()
	{
		EnterRule_join_clause();
		EnterRule("join_clause", 122);
		var retval = new XAstParserRuleReturnScope("join_clause");
		
		retval.Start = (IToken)input.LT(1);
		int join_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal450 = default(IToken);
		IToken string_literal453 = default(IToken);
		IToken string_literal455 = default(IToken);
		IToken string_literal457 = default(IToken);
		IToken string_literal459 = default(IToken);
		XAstParserRuleReturnScope type451 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier452 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression454 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression456 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression458 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier460 = default(XAstParserRuleReturnScope);

		object string_literal450_tree = default(object);
		object string_literal453_tree = default(object);
		object string_literal455_tree = default(object);
		object string_literal457_tree = default(object);
		object string_literal459_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "join_clause");
		DebugLocation(484, 114);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 122)) { return retval; }

			// cs.g:484:19: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
			DebugEnterAlt(1);
			// cs.g:485:2: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(485, 2);
			string_literal450=(IToken)Match(input,143,Follow._143_in_join_clause3652); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal450_tree = (object)adaptor.Create(string_literal450, retval);
			adaptor.AddChild(root_0, string_literal450_tree);
			}
			DebugLocation(485, 11);
			// cs.g:485:11: ( type )?
			int alt128=2;
			try { DebugEnterSubRule(128);
			try { DebugEnterDecision(128, false);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
			case 192:
				{
				alt128 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA128_2 = input.LA(2);

				if ((LA128_2==DEFINE||LA128_2==DOT||LA128_2==ELIF||LA128_2==ENDIF||LA128_2==IDENTIFIER||LA128_2==UNDEF||LA128_2==69||(LA128_2>=80 && LA128_2<=81)||LA128_2==89||LA128_2==91||LA128_2==95||(LA128_2>=97 && LA128_2<=98)||(LA128_2>=100 && LA128_2<=101)||LA128_2==105||LA128_2==117||LA128_2==120||LA128_2==122||LA128_2==126||(LA128_2>=132 && LA128_2<=133)||LA128_2==135||LA128_2==141||(LA128_2>=143 && LA128_2<=144)||(LA128_2>=147 && LA128_2<=148)||LA128_2==152||LA128_2==154||LA128_2==157||LA128_2==160||LA128_2==162||LA128_2==167||(LA128_2>=171 && LA128_2<=172)||LA128_2==183||LA128_2==190||LA128_2==194||LA128_2==196))
				{
					alt128 = 1;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA128_3 = input.LA(2);

				if ((LA128_3==DEFINE||LA128_3==DOT||LA128_3==ELIF||LA128_3==ENDIF||LA128_3==IDENTIFIER||LA128_3==UNDEF||LA128_3==69||(LA128_3>=80 && LA128_3<=81)||LA128_3==89||LA128_3==91||LA128_3==95||(LA128_3>=97 && LA128_3<=98)||(LA128_3>=100 && LA128_3<=101)||LA128_3==105||LA128_3==117||LA128_3==120||LA128_3==122||LA128_3==126||(LA128_3>=132 && LA128_3<=133)||LA128_3==135||LA128_3==141||(LA128_3>=143 && LA128_3<=144)||(LA128_3>=147 && LA128_3<=148)||LA128_3==152||LA128_3==154||LA128_3==157||LA128_3==160||LA128_3==162||LA128_3==167||(LA128_3>=171 && LA128_3<=172)||LA128_3==183||LA128_3==190||LA128_3==194||LA128_3==196))
				{
					alt128 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:485:11: type
				{
				DebugLocation(485, 11);
				PushFollow(Follow._type_in_join_clause3656);
				type451=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type451.Tree, type451, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(128); }

			DebugLocation(485, 19);
			PushFollow(Follow._identifier_in_join_clause3661);
			identifier452=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier452.Tree, identifier452, retval);
			DebugLocation(485, 32);
			string_literal453=(IToken)Match(input,137,Follow._137_in_join_clause3665); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal453_tree = (object)adaptor.Create(string_literal453, retval);
			adaptor.AddChild(root_0, string_literal453_tree);
			}
			DebugLocation(485, 39);
			PushFollow(Follow._expression_in_join_clause3669);
			expression454=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression454.Tree, expression454, retval);
			DebugLocation(485, 52);
			string_literal455=(IToken)Match(input,152,Follow._152_in_join_clause3673); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal455_tree = (object)adaptor.Create(string_literal455, retval);
			adaptor.AddChild(root_0, string_literal455_tree);
			}
			DebugLocation(485, 59);
			PushFollow(Follow._expression_in_join_clause3677);
			expression456=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression456.Tree, expression456, retval);
			DebugLocation(485, 72);
			string_literal457=(IToken)Match(input,122,Follow._122_in_join_clause3681); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal457_tree = (object)adaptor.Create(string_literal457, retval);
			adaptor.AddChild(root_0, string_literal457_tree);
			}
			DebugLocation(485, 83);
			PushFollow(Follow._expression_in_join_clause3685);
			expression458=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression458.Tree, expression458, retval);
			DebugLocation(485, 94);
			// cs.g:485:94: ( 'into' identifier )?
			int alt129=2;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==141))
			{
				alt129 = 1;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:485:95: 'into' identifier
				{
				DebugLocation(485, 95);
				string_literal459=(IToken)Match(input,141,Follow._141_in_join_clause3688); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal459_tree = (object)adaptor.Create(string_literal459, retval);
				adaptor.AddChild(root_0, string_literal459_tree);
				}
				DebugLocation(485, 102);
				PushFollow(Follow._identifier_in_join_clause3690);
				identifier460=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier460.Tree, identifier460, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("join_clause", 122);
			LeaveRule("join_clause", 122);
			LeaveRule_join_clause();
			if (state.backtracking > 0) { Memoize(input, 122, join_clause_StartIndex); }

		}
		DebugLocation(485, 114);
		} finally { DebugExitRule(GrammarFileName, "join_clause"); }
		return retval;

	}
	// $ANTLR end "join_clause"

	partial void EnterRule_let_clause();
	partial void LeaveRule_let_clause();

	// $ANTLR start "let_clause"
	// cs.g:486:8: public let_clause : 'let' identifier '=' expression ;
	[GrammarRule("let_clause")]
	public XAstParserRuleReturnScope let_clause()
	{
		EnterRule_let_clause();
		EnterRule("let_clause", 123);
		var retval = new XAstParserRuleReturnScope("let_clause");
		
		retval.Start = (IToken)input.LT(1);
		int let_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal461 = default(IToken);
		IToken char_literal463 = default(IToken);
		XAstParserRuleReturnScope identifier462 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression464 = default(XAstParserRuleReturnScope);

		object string_literal461_tree = default(object);
		object char_literal463_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "let_clause");
		DebugLocation(486, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 123)) { return retval; }

			// cs.g:486:18: ( 'let' identifier '=' expression )
			DebugEnterAlt(1);
			// cs.g:487:2: 'let' identifier '=' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(487, 2);
			string_literal461=(IToken)Match(input,144,Follow._144_in_let_clause3702); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal461_tree = (object)adaptor.Create(string_literal461, retval);
			adaptor.AddChild(root_0, string_literal461_tree);
			}
			DebugLocation(487, 10);
			PushFollow(Follow._identifier_in_let_clause3706);
			identifier462=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier462.Tree, identifier462, retval);
			DebugLocation(487, 23);
			char_literal463=(IToken)Match(input,85,Follow._85_in_let_clause3710); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal463_tree = (object)adaptor.Create(char_literal463, retval);
			adaptor.AddChild(root_0, char_literal463_tree);
			}
			DebugLocation(487, 29);
			PushFollow(Follow._expression_in_let_clause3714);
			expression464=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression464.Tree, expression464, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_clause", 123);
			LeaveRule("let_clause", 123);
			LeaveRule_let_clause();
			if (state.backtracking > 0) { Memoize(input, 123, let_clause_StartIndex); }

		}
		DebugLocation(487, 38);
		} finally { DebugExitRule(GrammarFileName, "let_clause"); }
		return retval;

	}
	// $ANTLR end "let_clause"

	partial void EnterRule_orderby_clause();
	partial void LeaveRule_orderby_clause();

	// $ANTLR start "orderby_clause"
	// cs.g:488:8: public orderby_clause : 'orderby' ordering_list ;
	[GrammarRule("orderby_clause")]
	public XAstParserRuleReturnScope orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 124);
		var retval = new XAstParserRuleReturnScope("orderby_clause");
		
		retval.Start = (IToken)input.LT(1);
		int orderby_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal465 = default(IToken);
		XAstParserRuleReturnScope ordering_list466 = default(XAstParserRuleReturnScope);

		object string_literal465_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(488, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 124)) { return retval; }

			// cs.g:488:22: ( 'orderby' ordering_list )
			DebugEnterAlt(1);
			// cs.g:489:2: 'orderby' ordering_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(489, 2);
			string_literal465=(IToken)Match(input,154,Follow._154_in_orderby_clause3723); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal465_tree = (object)adaptor.Create(string_literal465, retval);
			adaptor.AddChild(root_0, string_literal465_tree);
			}
			DebugLocation(489, 14);
			PushFollow(Follow._ordering_list_in_orderby_clause3727);
			ordering_list466=ordering_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ordering_list466.Tree, ordering_list466, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 124);
			LeaveRule("orderby_clause", 124);
			LeaveRule_orderby_clause();
			if (state.backtracking > 0) { Memoize(input, 124, orderby_clause_StartIndex); }

		}
		DebugLocation(489, 27);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"

	partial void EnterRule_ordering_list();
	partial void LeaveRule_ordering_list();

	// $ANTLR start "ordering_list"
	// cs.g:490:8: public ordering_list : ordering ( ',' ordering )* ;
	[GrammarRule("ordering_list")]
	public XAstParserRuleReturnScope ordering_list()
	{
		EnterRule_ordering_list();
		EnterRule("ordering_list", 125);
		var retval = new XAstParserRuleReturnScope("ordering_list");
		
		retval.Start = (IToken)input.LT(1);
		int ordering_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal468 = default(IToken);
		XAstParserRuleReturnScope ordering467 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope ordering469 = default(XAstParserRuleReturnScope);

		object char_literal468_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ordering_list");
		DebugLocation(490, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 125)) { return retval; }

			// cs.g:490:21: ( ordering ( ',' ordering )* )
			DebugEnterAlt(1);
			// cs.g:491:2: ordering ( ',' ordering )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(491, 2);
			PushFollow(Follow._ordering_in_ordering_list3737);
			ordering467=ordering();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ordering467.Tree, ordering467, retval);
			DebugLocation(491, 13);
			// cs.g:491:13: ( ',' ordering )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==74))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:491:14: ',' ordering
					{
					DebugLocation(491, 14);
					char_literal468=(IToken)Match(input,74,Follow._74_in_ordering_list3742); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal468_tree = (object)adaptor.Create(char_literal468, retval);
					adaptor.AddChild(root_0, char_literal468_tree);
					}
					DebugLocation(491, 20);
					PushFollow(Follow._ordering_in_ordering_list3746);
					ordering469=ordering();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ordering469.Tree, ordering469, retval);

					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ordering_list", 125);
			LeaveRule("ordering_list", 125);
			LeaveRule_ordering_list();
			if (state.backtracking > 0) { Memoize(input, 125, ordering_list_StartIndex); }

		}
		DebugLocation(491, 30);
		} finally { DebugExitRule(GrammarFileName, "ordering_list"); }
		return retval;

	}
	// $ANTLR end "ordering_list"

	partial void EnterRule_ordering();
	partial void LeaveRule_ordering();

	// $ANTLR start "ordering"
	// cs.g:492:8: public ordering : expression ordering_direction ;
	[GrammarRule("ordering")]
	public XAstParserRuleReturnScope ordering()
	{
		EnterRule_ordering();
		EnterRule("ordering", 126);
		var retval = new XAstParserRuleReturnScope("ordering");
		
		retval.Start = (IToken)input.LT(1);
		int ordering_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression470 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope ordering_direction471 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "ordering");
		DebugLocation(492, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 126)) { return retval; }

			// cs.g:492:16: ( expression ordering_direction )
			DebugEnterAlt(1);
			// cs.g:493:2: expression ordering_direction
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(493, 2);
			PushFollow(Follow._expression_in_ordering3758);
			expression470=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression470.Tree, expression470, retval);
			DebugLocation(493, 16);
			PushFollow(Follow._ordering_direction_in_ordering3763);
			ordering_direction471=ordering_direction();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ordering_direction471.Tree, ordering_direction471, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ordering", 126);
			LeaveRule("ordering", 126);
			LeaveRule_ordering();
			if (state.backtracking > 0) { Memoize(input, 126, ordering_StartIndex); }

		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "ordering"); }
		return retval;

	}
	// $ANTLR end "ordering"

	partial void EnterRule_ordering_direction();
	partial void LeaveRule_ordering_direction();

	// $ANTLR start "ordering_direction"
	// cs.g:495:8: public ordering_direction : ( 'ascending' | 'descending' );
	[GrammarRule("ordering_direction")]
	public XAstParserRuleReturnScope ordering_direction()
	{
		EnterRule_ordering_direction();
		EnterRule("ordering_direction", 127);
		var retval = new XAstParserRuleReturnScope("ordering_direction");
		
		retval.Start = (IToken)input.LT(1);
		int ordering_direction_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set472 = default(IToken);

		object set472_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ordering_direction");
		DebugLocation(495, 16);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 127)) { return retval; }

			// cs.g:495:26: ( 'ascending' | 'descending' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(495, 26);

			set472=(IToken)input.LT(1);
			if (input.LA(1)==100||input.LA(1)==117)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set472, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ordering_direction", 127);
			LeaveRule("ordering_direction", 127);
			LeaveRule_ordering_direction();
			if (state.backtracking > 0) { Memoize(input, 127, ordering_direction_StartIndex); }

		}
		DebugLocation(497, 16);
		} finally { DebugExitRule(GrammarFileName, "ordering_direction"); }
		return retval;

	}
	// $ANTLR end "ordering_direction"

	partial void EnterRule_select_or_group_clause();
	partial void LeaveRule_select_or_group_clause();

	// $ANTLR start "select_or_group_clause"
	// cs.g:498:8: public select_or_group_clause : ( select_clause | group_clause );
	[GrammarRule("select_or_group_clause")]
	public XAstParserRuleReturnScope select_or_group_clause()
	{
		EnterRule_select_or_group_clause();
		EnterRule("select_or_group_clause", 128);
		var retval = new XAstParserRuleReturnScope("select_or_group_clause");
		
		retval.Start = (IToken)input.LT(1);
		int select_or_group_clause_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope select_clause473 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope group_clause474 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "select_or_group_clause");
		DebugLocation(498, 16);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 128)) { return retval; }

			// cs.g:498:30: ( select_clause | group_clause )
			int alt131=2;
			try { DebugEnterDecision(131, false);
			int LA131_0 = input.LA(1);

			if ((LA131_0==171))
			{
				alt131 = 1;
			}
			else if ((LA131_0==135))
			{
				alt131 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 131, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:499:2: select_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(499, 2);
				PushFollow(Follow._select_clause_in_select_or_group_clause3789);
				select_clause473=select_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_clause473.Tree, select_clause473, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:500:4: group_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(500, 4);
				PushFollow(Follow._group_clause_in_select_or_group_clause3794);
				group_clause474=group_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, group_clause474.Tree, group_clause474, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_or_group_clause", 128);
			LeaveRule("select_or_group_clause", 128);
			LeaveRule_select_or_group_clause();
			if (state.backtracking > 0) { Memoize(input, 128, select_or_group_clause_StartIndex); }

		}
		DebugLocation(500, 16);
		} finally { DebugExitRule(GrammarFileName, "select_or_group_clause"); }
		return retval;

	}
	// $ANTLR end "select_or_group_clause"

	partial void EnterRule_select_clause();
	partial void LeaveRule_select_clause();

	// $ANTLR start "select_clause"
	// cs.g:501:8: public select_clause : 'select' expression ;
	[GrammarRule("select_clause")]
	public XAstParserRuleReturnScope select_clause()
	{
		EnterRule_select_clause();
		EnterRule("select_clause", 129);
		var retval = new XAstParserRuleReturnScope("select_clause");
		
		retval.Start = (IToken)input.LT(1);
		int select_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal475 = default(IToken);
		XAstParserRuleReturnScope expression476 = default(XAstParserRuleReturnScope);

		object string_literal475_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select_clause");
		DebugLocation(501, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 129)) { return retval; }

			// cs.g:501:21: ( 'select' expression )
			DebugEnterAlt(1);
			// cs.g:502:2: 'select' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(502, 2);
			string_literal475=(IToken)Match(input,171,Follow._171_in_select_clause3804); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal475_tree = (object)adaptor.Create(string_literal475, retval);
			adaptor.AddChild(root_0, string_literal475_tree);
			}
			DebugLocation(502, 13);
			PushFollow(Follow._expression_in_select_clause3808);
			expression476=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression476.Tree, expression476, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_clause", 129);
			LeaveRule("select_clause", 129);
			LeaveRule_select_clause();
			if (state.backtracking > 0) { Memoize(input, 129, select_clause_StartIndex); }

		}
		DebugLocation(502, 23);
		} finally { DebugExitRule(GrammarFileName, "select_clause"); }
		return retval;

	}
	// $ANTLR end "select_clause"

	partial void EnterRule_group_clause();
	partial void LeaveRule_group_clause();

	// $ANTLR start "group_clause"
	// cs.g:503:8: public group_clause : 'group' expression 'by' expression ;
	[GrammarRule("group_clause")]
	public XAstParserRuleReturnScope group_clause()
	{
		EnterRule_group_clause();
		EnterRule("group_clause", 130);
		var retval = new XAstParserRuleReturnScope("group_clause");
		
		retval.Start = (IToken)input.LT(1);
		int group_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal477 = default(IToken);
		IToken string_literal479 = default(IToken);
		XAstParserRuleReturnScope expression478 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression480 = default(XAstParserRuleReturnScope);

		object string_literal477_tree = default(object);
		object string_literal479_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "group_clause");
		DebugLocation(503, 42);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 130)) { return retval; }

			// cs.g:503:20: ( 'group' expression 'by' expression )
			DebugEnterAlt(1);
			// cs.g:504:2: 'group' expression 'by' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(504, 2);
			string_literal477=(IToken)Match(input,135,Follow._135_in_group_clause3818); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal477_tree = (object)adaptor.Create(string_literal477, retval);
			adaptor.AddChild(root_0, string_literal477_tree);
			}
			DebugLocation(504, 12);
			PushFollow(Follow._expression_in_group_clause3822);
			expression478=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression478.Tree, expression478, retval);
			DebugLocation(504, 25);
			string_literal479=(IToken)Match(input,105,Follow._105_in_group_clause3826); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal479_tree = (object)adaptor.Create(string_literal479, retval);
			adaptor.AddChild(root_0, string_literal479_tree);
			}
			DebugLocation(504, 32);
			PushFollow(Follow._expression_in_group_clause3830);
			expression480=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression480.Tree, expression480, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("group_clause", 130);
			LeaveRule("group_clause", 130);
			LeaveRule_group_clause();
			if (state.backtracking > 0) { Memoize(input, 130, group_clause_StartIndex); }

		}
		DebugLocation(504, 42);
		} finally { DebugExitRule(GrammarFileName, "group_clause"); }
		return retval;

	}
	// $ANTLR end "group_clause"

	partial void EnterRule_where_clause();
	partial void LeaveRule_where_clause();

	// $ANTLR start "where_clause"
	// cs.g:505:8: public where_clause : 'where' boolean_expression ;
	[GrammarRule("where_clause")]
	public XAstParserRuleReturnScope where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 131);
		var retval = new XAstParserRuleReturnScope("where_clause");
		
		retval.Start = (IToken)input.LT(1);
		int where_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal481 = default(IToken);
		XAstParserRuleReturnScope boolean_expression482 = default(XAstParserRuleReturnScope);

		object string_literal481_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(505, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 131)) { return retval; }

			// cs.g:505:20: ( 'where' boolean_expression )
			DebugEnterAlt(1);
			// cs.g:506:2: 'where' boolean_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(506, 2);
			string_literal481=(IToken)Match(input,194,Follow._194_in_where_clause3840); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal481_tree = (object)adaptor.Create(string_literal481, retval);
			adaptor.AddChild(root_0, string_literal481_tree);
			}
			DebugLocation(506, 12);
			PushFollow(Follow._boolean_expression_in_where_clause3844);
			boolean_expression482=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression482.Tree, boolean_expression482, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 131);
			LeaveRule("where_clause", 131);
			LeaveRule_where_clause();
			if (state.backtracking > 0) { Memoize(input, 131, where_clause_StartIndex); }

		}
		DebugLocation(506, 30);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"

	partial void EnterRule_boolean_expression();
	partial void LeaveRule_boolean_expression();

	// $ANTLR start "boolean_expression"
	// cs.g:507:8: public boolean_expression : expression ;
	[GrammarRule("boolean_expression")]
	public XAstParserRuleReturnScope boolean_expression()
	{
		EnterRule_boolean_expression();
		EnterRule("boolean_expression", 132);
		var retval = new XAstParserRuleReturnScope("boolean_expression");
		
		retval.Start = (IToken)input.LT(1);
		int boolean_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression483 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "boolean_expression");
		DebugLocation(507, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 132)) { return retval; }

			// cs.g:507:26: ( expression )
			DebugEnterAlt(1);
			// cs.g:508:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(508, 2);
			PushFollow(Follow._expression_in_boolean_expression3854);
			expression483=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression483.Tree, expression483, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolean_expression", 132);
			LeaveRule("boolean_expression", 132);
			LeaveRule_boolean_expression();
			if (state.backtracking > 0) { Memoize(input, 132, boolean_expression_StartIndex); }

		}
		DebugLocation(508, 11);
		} finally { DebugExitRule(GrammarFileName, "boolean_expression"); }
		return retval;

	}
	// $ANTLR end "boolean_expression"

	partial void EnterRule_global_attributes();
	partial void LeaveRule_global_attributes();

	// $ANTLR start "global_attributes"
	// cs.g:513:8: public global_attributes : ( global_attribute )+ ;
	[GrammarRule("global_attributes")]
	public XAstParserRuleReturnScope global_attributes()
	{
		EnterRule_global_attributes();
		EnterRule("global_attributes", 133);
		var retval = new XAstParserRuleReturnScope("global_attributes");
		
		retval.Start = (IToken)input.LT(1);
		int global_attributes_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope global_attribute484 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "global_attributes");
		DebugLocation(513, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 133)) { return retval; }

			// cs.g:513:25: ( ( global_attribute )+ )
			DebugEnterAlt(1);
			// cs.g:514:2: ( global_attribute )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(514, 2);
			// cs.g:514:2: ( global_attribute )+
			int cnt132=0;
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==91))
				{
					int LA132_2 = input.LA(2);

					if ((LA132_2==101||LA132_2==148))
					{
						int LA132_3 = input.LA(3);

						if ((LA132_3==79))
						{
							alt132 = 1;
						}


					}


				}


				} finally { DebugExitDecision(132); }
				switch (alt132)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:514:2: global_attribute
					{
					DebugLocation(514, 2);
					PushFollow(Follow._global_attribute_in_global_attributes3868);
					global_attribute484=global_attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, global_attribute484.Tree, global_attribute484, retval);

					}
					break;

				default:
					if (cnt132 >= 1)
						goto loop132;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee132 = new EarlyExitException( 132, input );
					DebugRecognitionException(eee132);
					throw eee132;
				}
				cnt132++;
			}
			loop132:
				;

			} finally { DebugExitSubRule(132); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attributes", 133);
			LeaveRule("global_attributes", 133);
			LeaveRule_global_attributes();
			if (state.backtracking > 0) { Memoize(input, 133, global_attributes_StartIndex); }

		}
		DebugLocation(514, 19);
		} finally { DebugExitRule(GrammarFileName, "global_attributes"); }
		return retval;

	}
	// $ANTLR end "global_attributes"

	partial void EnterRule_global_attribute();
	partial void LeaveRule_global_attribute();

	// $ANTLR start "global_attribute"
	// cs.g:515:8: public global_attribute : '[' global_attribute_target_specifier attribute_list ( ',' )? ']' ;
	[GrammarRule("global_attribute")]
	public XAstParserRuleReturnScope global_attribute()
	{
		EnterRule_global_attribute();
		EnterRule("global_attribute", 134);
		var retval = new XAstParserRuleReturnScope("global_attribute");
		
		retval.Start = (IToken)input.LT(1);
		int global_attribute_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal485 = default(IToken);
		IToken char_literal488 = default(IToken);
		IToken char_literal489 = default(IToken);
		XAstParserRuleReturnScope global_attribute_target_specifier486 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute_list487 = default(XAstParserRuleReturnScope);

		object char_literal485_tree = default(object);
		object char_literal488_tree = default(object);
		object char_literal489_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "global_attribute");
		DebugLocation(515, 71);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 134)) { return retval; }

			// cs.g:515:24: ( '[' global_attribute_target_specifier attribute_list ( ',' )? ']' )
			DebugEnterAlt(1);
			// cs.g:516:2: '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(516, 2);
			char_literal485=(IToken)Match(input,91,Follow._91_in_global_attribute3880); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal485_tree = (object)adaptor.Create(char_literal485, retval);
			adaptor.AddChild(root_0, char_literal485_tree);
			}
			DebugLocation(516, 8);
			PushFollow(Follow._global_attribute_target_specifier_in_global_attribute3884);
			global_attribute_target_specifier486=global_attribute_target_specifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, global_attribute_target_specifier486.Tree, global_attribute_target_specifier486, retval);
			DebugLocation(516, 44);
			PushFollow(Follow._attribute_list_in_global_attribute3888);
			attribute_list487=attribute_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_list487.Tree, attribute_list487, retval);
			DebugLocation(516, 61);
			// cs.g:516:61: ( ',' )?
			int alt133=2;
			try { DebugEnterSubRule(133);
			try { DebugEnterDecision(133, false);
			int LA133_0 = input.LA(1);

			if ((LA133_0==74))
			{
				alt133 = 1;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:516:61: ','
				{
				DebugLocation(516, 61);
				char_literal488=(IToken)Match(input,74,Follow._74_in_global_attribute3892); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal488_tree = (object)adaptor.Create(char_literal488, retval);
				adaptor.AddChild(root_0, char_literal488_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(133); }

			DebugLocation(516, 68);
			char_literal489=(IToken)Match(input,92,Follow._92_in_global_attribute3897); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal489_tree = (object)adaptor.Create(char_literal489, retval);
			adaptor.AddChild(root_0, char_literal489_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attribute", 134);
			LeaveRule("global_attribute", 134);
			LeaveRule_global_attribute();
			if (state.backtracking > 0) { Memoize(input, 134, global_attribute_StartIndex); }

		}
		DebugLocation(516, 71);
		} finally { DebugExitRule(GrammarFileName, "global_attribute"); }
		return retval;

	}
	// $ANTLR end "global_attribute"

	partial void EnterRule_global_attribute_target_specifier();
	partial void LeaveRule_global_attribute_target_specifier();

	// $ANTLR start "global_attribute_target_specifier"
	// cs.g:517:8: public global_attribute_target_specifier : global_attribute_target ':' ;
	[GrammarRule("global_attribute_target_specifier")]
	public XAstParserRuleReturnScope global_attribute_target_specifier()
	{
		EnterRule_global_attribute_target_specifier();
		EnterRule("global_attribute_target_specifier", 135);
		var retval = new XAstParserRuleReturnScope("global_attribute_target_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int global_attribute_target_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal491 = default(IToken);
		XAstParserRuleReturnScope global_attribute_target490 = default(XAstParserRuleReturnScope);

		object char_literal491_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "global_attribute_target_specifier");
		DebugLocation(517, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 135)) { return retval; }

			// cs.g:517:41: ( global_attribute_target ':' )
			DebugEnterAlt(1);
			// cs.g:518:2: global_attribute_target ':'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(518, 2);
			PushFollow(Follow._global_attribute_target_in_global_attribute_target_specifier3908);
			global_attribute_target490=global_attribute_target();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, global_attribute_target490.Tree, global_attribute_target490, retval);
			DebugLocation(518, 28);
			char_literal491=(IToken)Match(input,79,Follow._79_in_global_attribute_target_specifier3912); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal491_tree = (object)adaptor.Create(char_literal491, retval);
			adaptor.AddChild(root_0, char_literal491_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attribute_target_specifier", 135);
			LeaveRule("global_attribute_target_specifier", 135);
			LeaveRule_global_attribute_target_specifier();
			if (state.backtracking > 0) { Memoize(input, 135, global_attribute_target_specifier_StartIndex); }

		}
		DebugLocation(518, 31);
		} finally { DebugExitRule(GrammarFileName, "global_attribute_target_specifier"); }
		return retval;

	}
	// $ANTLR end "global_attribute_target_specifier"

	partial void EnterRule_global_attribute_target();
	partial void LeaveRule_global_attribute_target();

	// $ANTLR start "global_attribute_target"
	// cs.g:519:8: public global_attribute_target : ( 'assembly' | 'module' );
	[GrammarRule("global_attribute_target")]
	public XAstParserRuleReturnScope global_attribute_target()
	{
		EnterRule_global_attribute_target();
		EnterRule("global_attribute_target", 136);
		var retval = new XAstParserRuleReturnScope("global_attribute_target");
		
		retval.Start = (IToken)input.LT(1);
		int global_attribute_target_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set492 = default(IToken);

		object set492_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "global_attribute_target");
		DebugLocation(519, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 136)) { return retval; }

			// cs.g:519:31: ( 'assembly' | 'module' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(519, 31);

			set492=(IToken)input.LT(1);
			if (input.LA(1)==101||input.LA(1)==148)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set492, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attribute_target", 136);
			LeaveRule("global_attribute_target", 136);
			LeaveRule_global_attribute_target();
			if (state.backtracking > 0) { Memoize(input, 136, global_attribute_target_StartIndex); }

		}
		DebugLocation(520, 23);
		} finally { DebugExitRule(GrammarFileName, "global_attribute_target"); }
		return retval;

	}
	// $ANTLR end "global_attribute_target"

	partial void EnterRule_attributes();
	partial void LeaveRule_attributes();

	// $ANTLR start "attributes"
	// cs.g:521:8: public attributes : attribute_sections ;
	[GrammarRule("attributes")]
	public XAstParserRuleReturnScope attributes()
	{
		EnterRule_attributes();
		EnterRule("attributes", 137);
		var retval = new XAstParserRuleReturnScope("attributes");
		
		retval.Start = (IToken)input.LT(1);
		int attributes_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attribute_sections493 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "attributes");
		DebugLocation(521, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 137)) { return retval; }

			// cs.g:521:18: ( attribute_sections )
			DebugEnterAlt(1);
			// cs.g:522:2: attribute_sections
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(522, 2);
			PushFollow(Follow._attribute_sections_in_attributes3938);
			attribute_sections493=attribute_sections();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_sections493.Tree, attribute_sections493, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attributes", 137);
			LeaveRule("attributes", 137);
			LeaveRule_attributes();
			if (state.backtracking > 0) { Memoize(input, 137, attributes_StartIndex); }

		}
		DebugLocation(522, 20);
		} finally { DebugExitRule(GrammarFileName, "attributes"); }
		return retval;

	}
	// $ANTLR end "attributes"

	partial void EnterRule_attribute_sections();
	partial void LeaveRule_attribute_sections();

	// $ANTLR start "attribute_sections"
	// cs.g:523:8: public attribute_sections : ( attribute_section )+ ;
	[GrammarRule("attribute_sections")]
	public XAstParserRuleReturnScope attribute_sections()
	{
		EnterRule_attribute_sections();
		EnterRule("attribute_sections", 138);
		var retval = new XAstParserRuleReturnScope("attribute_sections");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_sections_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attribute_section494 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "attribute_sections");
		DebugLocation(523, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 138)) { return retval; }

			// cs.g:523:26: ( ( attribute_section )+ )
			DebugEnterAlt(1);
			// cs.g:524:2: ( attribute_section )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(524, 2);
			// cs.g:524:2: ( attribute_section )+
			int cnt134=0;
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==91))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:524:2: attribute_section
					{
					DebugLocation(524, 2);
					PushFollow(Follow._attribute_section_in_attribute_sections3949);
					attribute_section494=attribute_section();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_section494.Tree, attribute_section494, retval);

					}
					break;

				default:
					if (cnt134 >= 1)
						goto loop134;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee134 = new EarlyExitException( 134, input );
					DebugRecognitionException(eee134);
					throw eee134;
				}
				cnt134++;
			}
			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_sections", 138);
			LeaveRule("attribute_sections", 138);
			LeaveRule_attribute_sections();
			if (state.backtracking > 0) { Memoize(input, 138, attribute_sections_StartIndex); }

		}
		DebugLocation(524, 20);
		} finally { DebugExitRule(GrammarFileName, "attribute_sections"); }
		return retval;

	}
	// $ANTLR end "attribute_sections"

	partial void EnterRule_attribute_section();
	partial void LeaveRule_attribute_section();

	// $ANTLR start "attribute_section"
	// cs.g:525:8: public attribute_section : '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' ;
	[GrammarRule("attribute_section")]
	public XAstParserRuleReturnScope attribute_section()
	{
		EnterRule_attribute_section();
		EnterRule("attribute_section", 139);
		var retval = new XAstParserRuleReturnScope("attribute_section");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_section_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal495 = default(IToken);
		IToken char_literal498 = default(IToken);
		IToken char_literal499 = default(IToken);
		XAstParserRuleReturnScope attribute_target_specifier496 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute_list497 = default(XAstParserRuleReturnScope);

		object char_literal495_tree = default(object);
		object char_literal498_tree = default(object);
		object char_literal499_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_section");
		DebugLocation(525, 65);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 139)) { return retval; }

			// cs.g:525:25: ( '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' )
			DebugEnterAlt(1);
			// cs.g:526:2: '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(526, 2);
			char_literal495=(IToken)Match(input,91,Follow._91_in_attribute_section3961); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal495_tree = (object)adaptor.Create(char_literal495, retval);
			adaptor.AddChild(root_0, char_literal495_tree);
			}
			DebugLocation(526, 8);
			// cs.g:526:8: ( attribute_target_specifier )?
			int alt135=2;
			try { DebugEnterSubRule(135);
			try { DebugEnterDecision(135, false);
			int LA135_0 = input.LA(1);

			if ((LA135_0==126||LA135_0==147||LA135_0==157||LA135_0==162||LA135_0==183))
			{
				int LA135_1 = input.LA(2);

				if ((LA135_1==79))
				{
					alt135 = 1;
				}
			}
			else if ((LA135_0==123||LA135_0==168))
			{
				alt135 = 1;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:526:8: attribute_target_specifier
				{
				DebugLocation(526, 8);
				PushFollow(Follow._attribute_target_specifier_in_attribute_section3965);
				attribute_target_specifier496=attribute_target_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_target_specifier496.Tree, attribute_target_specifier496, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(135); }

			DebugLocation(526, 38);
			PushFollow(Follow._attribute_list_in_attribute_section3970);
			attribute_list497=attribute_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_list497.Tree, attribute_list497, retval);
			DebugLocation(526, 55);
			// cs.g:526:55: ( ',' )?
			int alt136=2;
			try { DebugEnterSubRule(136);
			try { DebugEnterDecision(136, false);
			int LA136_0 = input.LA(1);

			if ((LA136_0==74))
			{
				alt136 = 1;
			}
			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:526:55: ','
				{
				DebugLocation(526, 55);
				char_literal498=(IToken)Match(input,74,Follow._74_in_attribute_section3974); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal498_tree = (object)adaptor.Create(char_literal498, retval);
				adaptor.AddChild(root_0, char_literal498_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(136); }

			DebugLocation(526, 62);
			char_literal499=(IToken)Match(input,92,Follow._92_in_attribute_section3979); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal499_tree = (object)adaptor.Create(char_literal499, retval);
			adaptor.AddChild(root_0, char_literal499_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_section", 139);
			LeaveRule("attribute_section", 139);
			LeaveRule_attribute_section();
			if (state.backtracking > 0) { Memoize(input, 139, attribute_section_StartIndex); }

		}
		DebugLocation(526, 65);
		} finally { DebugExitRule(GrammarFileName, "attribute_section"); }
		return retval;

	}
	// $ANTLR end "attribute_section"

	partial void EnterRule_attribute_target_specifier();
	partial void LeaveRule_attribute_target_specifier();

	// $ANTLR start "attribute_target_specifier"
	// cs.g:527:8: public attribute_target_specifier : attribute_target ':' ;
	[GrammarRule("attribute_target_specifier")]
	public XAstParserRuleReturnScope attribute_target_specifier()
	{
		EnterRule_attribute_target_specifier();
		EnterRule("attribute_target_specifier", 140);
		var retval = new XAstParserRuleReturnScope("attribute_target_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_target_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal501 = default(IToken);
		XAstParserRuleReturnScope attribute_target500 = default(XAstParserRuleReturnScope);

		object char_literal501_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_target_specifier");
		DebugLocation(527, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 140)) { return retval; }

			// cs.g:527:34: ( attribute_target ':' )
			DebugEnterAlt(1);
			// cs.g:528:2: attribute_target ':'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(528, 2);
			PushFollow(Follow._attribute_target_in_attribute_target_specifier3990);
			attribute_target500=attribute_target();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_target500.Tree, attribute_target500, retval);
			DebugLocation(528, 21);
			char_literal501=(IToken)Match(input,79,Follow._79_in_attribute_target_specifier3994); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal501_tree = (object)adaptor.Create(char_literal501, retval);
			adaptor.AddChild(root_0, char_literal501_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_target_specifier", 140);
			LeaveRule("attribute_target_specifier", 140);
			LeaveRule_attribute_target_specifier();
			if (state.backtracking > 0) { Memoize(input, 140, attribute_target_specifier_StartIndex); }

		}
		DebugLocation(528, 24);
		} finally { DebugExitRule(GrammarFileName, "attribute_target_specifier"); }
		return retval;

	}
	// $ANTLR end "attribute_target_specifier"

	partial void EnterRule_attribute_target();
	partial void LeaveRule_attribute_target();

	// $ANTLR start "attribute_target"
	// cs.g:529:8: public attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
	[GrammarRule("attribute_target")]
	public XAstParserRuleReturnScope attribute_target()
	{
		EnterRule_attribute_target();
		EnterRule("attribute_target", 141);
		var retval = new XAstParserRuleReturnScope("attribute_target");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_target_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set502 = default(IToken);

		object set502_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_target");
		DebugLocation(529, 73);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 141)) { return retval; }

			// cs.g:529:24: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(529, 24);

			set502=(IToken)input.LT(1);
			if (input.LA(1)==123||input.LA(1)==126||input.LA(1)==147||input.LA(1)==157||input.LA(1)==162||input.LA(1)==168||input.LA(1)==183)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set502, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_target", 141);
			LeaveRule("attribute_target", 141);
			LeaveRule_attribute_target();
			if (state.backtracking > 0) { Memoize(input, 141, attribute_target_StartIndex); }

		}
		DebugLocation(530, 73);
		} finally { DebugExitRule(GrammarFileName, "attribute_target"); }
		return retval;

	}
	// $ANTLR end "attribute_target"

	partial void EnterRule_attribute_list();
	partial void LeaveRule_attribute_list();

	// $ANTLR start "attribute_list"
	// cs.g:531:8: public attribute_list : attribute ( ',' attribute )* ;
	[GrammarRule("attribute_list")]
	public XAstParserRuleReturnScope attribute_list()
	{
		EnterRule_attribute_list();
		EnterRule("attribute_list", 142);
		var retval = new XAstParserRuleReturnScope("attribute_list");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal504 = default(IToken);
		XAstParserRuleReturnScope attribute503 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute505 = default(XAstParserRuleReturnScope);

		object char_literal504_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_list");
		DebugLocation(531, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 142)) { return retval; }

			// cs.g:531:22: ( attribute ( ',' attribute )* )
			DebugEnterAlt(1);
			// cs.g:532:2: attribute ( ',' attribute )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(532, 2);
			PushFollow(Follow._attribute_in_attribute_list4040);
			attribute503=attribute();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute503.Tree, attribute503, retval);
			DebugLocation(532, 12);
			// cs.g:532:12: ( ',' attribute )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==74))
				{
					int LA137_1 = input.LA(2);

					if ((LA137_1==DEFINE||LA137_1==ELIF||LA137_1==ENDIF||LA137_1==IDENTIFIER||LA137_1==UNDEF||LA137_1==95||(LA137_1>=97 && LA137_1<=98)||(LA137_1>=100 && LA137_1<=101)||LA137_1==105||LA137_1==117||LA137_1==120||LA137_1==122||LA137_1==126||(LA137_1>=132 && LA137_1<=133)||LA137_1==135||LA137_1==141||(LA137_1>=143 && LA137_1<=144)||(LA137_1>=147 && LA137_1<=148)||LA137_1==152||LA137_1==154||LA137_1==157||LA137_1==160||LA137_1==162||LA137_1==167||(LA137_1>=171 && LA137_1<=172)||LA137_1==183||LA137_1==190||LA137_1==194||LA137_1==196))
					{
						alt137 = 1;
					}


				}


				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:532:13: ',' attribute
					{
					DebugLocation(532, 13);
					char_literal504=(IToken)Match(input,74,Follow._74_in_attribute_list4043); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal504_tree = (object)adaptor.Create(char_literal504, retval);
					adaptor.AddChild(root_0, char_literal504_tree);
					}
					DebugLocation(532, 17);
					PushFollow(Follow._attribute_in_attribute_list4045);
					attribute505=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attribute505.Tree, attribute505, retval);

					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_list", 142);
			LeaveRule("attribute_list", 142);
			LeaveRule_attribute_list();
			if (state.backtracking > 0) { Memoize(input, 142, attribute_list_StartIndex); }

		}
		DebugLocation(532, 28);
		} finally { DebugExitRule(GrammarFileName, "attribute_list"); }
		return retval;

	}
	// $ANTLR end "attribute_list"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// cs.g:533:8: public attribute : type_name ( attribute_arguments )? ;
	[GrammarRule("attribute")]
	public XAstParserRuleReturnScope attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 143);
		var retval = new XAstParserRuleReturnScope("attribute");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_name506 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute_arguments507 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(533, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 143)) { return retval; }

			// cs.g:533:17: ( type_name ( attribute_arguments )? )
			DebugEnterAlt(1);
			// cs.g:534:2: type_name ( attribute_arguments )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(534, 2);
			PushFollow(Follow._type_name_in_attribute4059);
			type_name506=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name506.Tree, type_name506, retval);
			DebugLocation(534, 14);
			// cs.g:534:14: ( attribute_arguments )?
			int alt138=2;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, false);
			int LA138_0 = input.LA(1);

			if ((LA138_0==68))
			{
				alt138 = 1;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:534:14: attribute_arguments
				{
				DebugLocation(534, 14);
				PushFollow(Follow._attribute_arguments_in_attribute4063);
				attribute_arguments507=attribute_arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_arguments507.Tree, attribute_arguments507, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 143);
			LeaveRule("attribute", 143);
			LeaveRule_attribute();
			if (state.backtracking > 0) { Memoize(input, 143, attribute_StartIndex); }

		}
		DebugLocation(534, 34);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_attribute_arguments();
	partial void LeaveRule_attribute_arguments();

	// $ANTLR start "attribute_arguments"
	// cs.g:536:8: public attribute_arguments : '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) ;
	[GrammarRule("attribute_arguments")]
	public XAstParserRuleReturnScope attribute_arguments()
	{
		EnterRule_attribute_arguments();
		EnterRule("attribute_arguments", 144);
		var retval = new XAstParserRuleReturnScope("attribute_arguments");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_arguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal508 = default(IToken);
		IToken char_literal509 = default(IToken);
		IToken char_literal512 = default(IToken);
		IToken char_literal514 = default(IToken);
		XAstParserRuleReturnScope positional_argument510 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope named_argument511 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope positional_argument513 = default(XAstParserRuleReturnScope);

		object char_literal508_tree = default(object);
		object char_literal509_tree = default(object);
		object char_literal512_tree = default(object);
		object char_literal514_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_arguments");
		DebugLocation(536, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 144)) { return retval; }

			// cs.g:536:27: ( '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) )
			DebugEnterAlt(1);
			// cs.g:537:2: '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(537, 2);
			char_literal508=(IToken)Match(input,68,Follow._68_in_attribute_arguments4076); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal508_tree = (object)adaptor.Create(char_literal508, retval);
			adaptor.AddChild(root_0, char_literal508_tree);
			}
			DebugLocation(537, 8);
			// cs.g:537:8: ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
			int alt140=2;
			try { DebugEnterSubRule(140);
			try { DebugEnterDecision(140, false);
			int LA140_0 = input.LA(1);

			if ((LA140_0==RPAREN))
			{
				alt140 = 1;
			}
			else if ((LA140_0==Character_literal||LA140_0==DEFINE||LA140_0==ELIF||LA140_0==ENDIF||LA140_0==FALSE||(LA140_0>=Hex_number && LA140_0<=IDENTIFIER)||(LA140_0>=MINUS && LA140_0<=NUMBER)||LA140_0==Real_literal||LA140_0==STRINGLITERAL||LA140_0==TRUE||LA140_0==UNDEF||LA140_0==Verbatim_string_literal||LA140_0==61||LA140_0==66||(LA140_0>=68 && LA140_0<=69)||(LA140_0>=71 && LA140_0<=72)||LA140_0==75||LA140_0==95||(LA140_0>=97 && LA140_0<=98)||(LA140_0>=100 && LA140_0<=103)||(LA140_0>=105 && LA140_0<=106)||(LA140_0>=109 && LA140_0<=110)||(LA140_0>=114 && LA140_0<=117)||(LA140_0>=119 && LA140_0<=120)||LA140_0==122||LA140_0==126||LA140_0==129||(LA140_0>=132 && LA140_0<=133)||LA140_0==135||LA140_0==138||LA140_0==141||(LA140_0>=143 && LA140_0<=144)||(LA140_0>=146 && LA140_0<=148)||(LA140_0>=150 && LA140_0<=152)||LA140_0==154||LA140_0==157||LA140_0==160||LA140_0==162||LA140_0==167||LA140_0==169||(LA140_0>=171 && LA140_0<=174)||LA140_0==177||LA140_0==180||(LA140_0>=183 && LA140_0<=187)||(LA140_0>=189 && LA140_0<=190)||LA140_0==194||LA140_0==196||LA140_0==202))
			{
				alt140 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 140, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:537:9: ')'
				{
				DebugLocation(537, 9);
				char_literal509=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_attribute_arguments4081), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal509_tree = (object)adaptor.Create(char_literal509, retval);
				adaptor.AddChild(root_0, char_literal509_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:538:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')'
				{
				DebugLocation(538, 8);
				// cs.g:538:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* )
				DebugEnterAlt(1);
				// cs.g:538:9: positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
				{
				DebugLocation(538, 9);
				PushFollow(Follow._positional_argument_in_attribute_arguments4101);
				positional_argument510=positional_argument();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument510.Tree, positional_argument510, retval);
				DebugLocation(538, 31);
				// cs.g:538:31: ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
				try { DebugEnterSubRule(139);
				while (true)
				{
					int alt139=3;
					try { DebugEnterDecision(139, false);
					int LA139_0 = input.LA(1);

					if ((LA139_0==IDENTIFIER) && (EvaluatePredicate(synpred24_cs_fragment)))
					{
						alt139 = 1;
					}
					else if ((LA139_0==DEFINE||LA139_0==ELIF||LA139_0==ENDIF||LA139_0==UNDEF||LA139_0==95||(LA139_0>=97 && LA139_0<=98)||(LA139_0>=100 && LA139_0<=101)||LA139_0==105||LA139_0==117||LA139_0==120||LA139_0==122||LA139_0==126||(LA139_0>=132 && LA139_0<=133)||LA139_0==135||LA139_0==141||(LA139_0>=143 && LA139_0<=144)||(LA139_0>=147 && LA139_0<=148)||LA139_0==152||LA139_0==154||LA139_0==157||LA139_0==160||LA139_0==162||LA139_0==167||(LA139_0>=171 && LA139_0<=172)||LA139_0==183||LA139_0==190||LA139_0==194||LA139_0==196) && (EvaluatePredicate(synpred24_cs_fragment)))
					{
						alt139 = 1;
					}
					else if ((LA139_0==74))
					{
						alt139 = 2;
					}


					} finally { DebugExitDecision(139); }
					switch ( alt139 )
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:538:32: ( ',' identifier '=' )=> named_argument
						{
						DebugLocation(538, 60);
						PushFollow(Follow._named_argument_in_attribute_arguments4120);
						named_argument511=named_argument();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, named_argument511.Tree, named_argument511, retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// cs.g:539:15: ',' positional_argument
						{
						DebugLocation(539, 15);
						char_literal512=(IToken)Match(input,74,Follow._74_in_attribute_arguments4136); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal512_tree = (object)adaptor.Create(char_literal512, retval);
						adaptor.AddChild(root_0, char_literal512_tree);
						}
						DebugLocation(539, 19);
						PushFollow(Follow._positional_argument_in_attribute_arguments4138);
						positional_argument513=positional_argument();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument513.Tree, positional_argument513, retval);

						}
						break;

					default:
						goto loop139;
					}
				}

				loop139:
					;

				} finally { DebugExitSubRule(139); }


				}

				DebugLocation(540, 8);
				char_literal514=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_attribute_arguments4149), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal514_tree = (object)adaptor.Create(char_literal514, retval);
				adaptor.AddChild(root_0, char_literal514_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(140); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_arguments", 144);
			LeaveRule("attribute_arguments", 144);
			LeaveRule_attribute_arguments();
			if (state.backtracking > 0) { Memoize(input, 144, attribute_arguments_StartIndex); }

		}
		DebugLocation(541, 5);
		} finally { DebugExitRule(GrammarFileName, "attribute_arguments"); }
		return retval;

	}
	// $ANTLR end "attribute_arguments"

	partial void EnterRule_positional_argument_list();
	partial void LeaveRule_positional_argument_list();

	// $ANTLR start "positional_argument_list"
	// cs.g:542:8: public positional_argument_list : positional_argument ( ',' positional_argument )* ;
	[GrammarRule("positional_argument_list")]
	public XAstParserRuleReturnScope positional_argument_list()
	{
		EnterRule_positional_argument_list();
		EnterRule("positional_argument_list", 145);
		var retval = new XAstParserRuleReturnScope("positional_argument_list");
		
		retval.Start = (IToken)input.LT(1);
		int positional_argument_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal516 = default(IToken);
		XAstParserRuleReturnScope positional_argument515 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope positional_argument517 = default(XAstParserRuleReturnScope);

		object char_literal516_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "positional_argument_list");
		DebugLocation(542, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 145)) { return retval; }

			// cs.g:542:32: ( positional_argument ( ',' positional_argument )* )
			DebugEnterAlt(1);
			// cs.g:543:2: positional_argument ( ',' positional_argument )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(543, 2);
			PushFollow(Follow._positional_argument_in_positional_argument_list4165);
			positional_argument515=positional_argument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument515.Tree, positional_argument515, retval);
			DebugLocation(543, 22);
			// cs.g:543:22: ( ',' positional_argument )*
			try { DebugEnterSubRule(141);
			while (true)
			{
				int alt141=2;
				try { DebugEnterDecision(141, false);
				int LA141_0 = input.LA(1);

				if ((LA141_0==74))
				{
					alt141 = 1;
				}


				} finally { DebugExitDecision(141); }
				switch ( alt141 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:543:23: ',' positional_argument
					{
					DebugLocation(543, 23);
					char_literal516=(IToken)Match(input,74,Follow._74_in_positional_argument_list4168); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal516_tree = (object)adaptor.Create(char_literal516, retval);
					adaptor.AddChild(root_0, char_literal516_tree);
					}
					DebugLocation(543, 27);
					PushFollow(Follow._positional_argument_in_positional_argument_list4170);
					positional_argument517=positional_argument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument517.Tree, positional_argument517, retval);

					}
					break;

				default:
					goto loop141;
				}
			}

			loop141:
				;

			} finally { DebugExitSubRule(141); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("positional_argument_list", 145);
			LeaveRule("positional_argument_list", 145);
			LeaveRule_positional_argument_list();
			if (state.backtracking > 0) { Memoize(input, 145, positional_argument_list_StartIndex); }

		}
		DebugLocation(543, 48);
		} finally { DebugExitRule(GrammarFileName, "positional_argument_list"); }
		return retval;

	}
	// $ANTLR end "positional_argument_list"

	partial void EnterRule_positional_argument();
	partial void LeaveRule_positional_argument();

	// $ANTLR start "positional_argument"
	// cs.g:544:8: public positional_argument : attribute_argument_expression ;
	[GrammarRule("positional_argument")]
	public XAstParserRuleReturnScope positional_argument()
	{
		EnterRule_positional_argument();
		EnterRule("positional_argument", 146);
		var retval = new XAstParserRuleReturnScope("positional_argument");
		
		retval.Start = (IToken)input.LT(1);
		int positional_argument_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attribute_argument_expression518 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "positional_argument");
		DebugLocation(544, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 146)) { return retval; }

			// cs.g:544:27: ( attribute_argument_expression )
			DebugEnterAlt(1);
			// cs.g:545:2: attribute_argument_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(545, 2);
			PushFollow(Follow._attribute_argument_expression_in_positional_argument4183);
			attribute_argument_expression518=attribute_argument_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_argument_expression518.Tree, attribute_argument_expression518, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("positional_argument", 146);
			LeaveRule("positional_argument", 146);
			LeaveRule_positional_argument();
			if (state.backtracking > 0) { Memoize(input, 146, positional_argument_StartIndex); }

		}
		DebugLocation(545, 31);
		} finally { DebugExitRule(GrammarFileName, "positional_argument"); }
		return retval;

	}
	// $ANTLR end "positional_argument"

	partial void EnterRule_named_argument_list();
	partial void LeaveRule_named_argument_list();

	// $ANTLR start "named_argument_list"
	// cs.g:546:8: public named_argument_list : named_argument ( ',' named_argument )* ;
	[GrammarRule("named_argument_list")]
	public XAstParserRuleReturnScope named_argument_list()
	{
		EnterRule_named_argument_list();
		EnterRule("named_argument_list", 147);
		var retval = new XAstParserRuleReturnScope("named_argument_list");
		
		retval.Start = (IToken)input.LT(1);
		int named_argument_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal520 = default(IToken);
		XAstParserRuleReturnScope named_argument519 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope named_argument521 = default(XAstParserRuleReturnScope);

		object char_literal520_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "named_argument_list");
		DebugLocation(546, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 147)) { return retval; }

			// cs.g:546:27: ( named_argument ( ',' named_argument )* )
			DebugEnterAlt(1);
			// cs.g:547:2: named_argument ( ',' named_argument )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(547, 2);
			PushFollow(Follow._named_argument_in_named_argument_list4194);
			named_argument519=named_argument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, named_argument519.Tree, named_argument519, retval);
			DebugLocation(547, 17);
			// cs.g:547:17: ( ',' named_argument )*
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=2;
				try { DebugEnterDecision(142, false);
				int LA142_0 = input.LA(1);

				if ((LA142_0==74))
				{
					alt142 = 1;
				}


				} finally { DebugExitDecision(142); }
				switch ( alt142 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:547:18: ',' named_argument
					{
					DebugLocation(547, 18);
					char_literal520=(IToken)Match(input,74,Follow._74_in_named_argument_list4197); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal520_tree = (object)adaptor.Create(char_literal520, retval);
					adaptor.AddChild(root_0, char_literal520_tree);
					}
					DebugLocation(547, 22);
					PushFollow(Follow._named_argument_in_named_argument_list4199);
					named_argument521=named_argument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, named_argument521.Tree, named_argument521, retval);

					}
					break;

				default:
					goto loop142;
				}
			}

			loop142:
				;

			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("named_argument_list", 147);
			LeaveRule("named_argument_list", 147);
			LeaveRule_named_argument_list();
			if (state.backtracking > 0) { Memoize(input, 147, named_argument_list_StartIndex); }

		}
		DebugLocation(547, 38);
		} finally { DebugExitRule(GrammarFileName, "named_argument_list"); }
		return retval;

	}
	// $ANTLR end "named_argument_list"

	partial void EnterRule_named_argument();
	partial void LeaveRule_named_argument();

	// $ANTLR start "named_argument"
	// cs.g:548:8: public named_argument : identifier '=' attribute_argument_expression ;
	[GrammarRule("named_argument")]
	public XAstParserRuleReturnScope named_argument()
	{
		EnterRule_named_argument();
		EnterRule("named_argument", 148);
		var retval = new XAstParserRuleReturnScope("named_argument");
		
		retval.Start = (IToken)input.LT(1);
		int named_argument_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal523 = default(IToken);
		XAstParserRuleReturnScope identifier522 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute_argument_expression524 = default(XAstParserRuleReturnScope);

		object char_literal523_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "named_argument");
		DebugLocation(548, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 148)) { return retval; }

			// cs.g:548:22: ( identifier '=' attribute_argument_expression )
			DebugEnterAlt(1);
			// cs.g:549:2: identifier '=' attribute_argument_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(549, 2);
			PushFollow(Follow._identifier_in_named_argument4212);
			identifier522=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier522.Tree, identifier522, retval);
			DebugLocation(549, 15);
			char_literal523=(IToken)Match(input,85,Follow._85_in_named_argument4216); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal523_tree = (object)adaptor.Create(char_literal523, retval);
			adaptor.AddChild(root_0, char_literal523_tree);
			}
			DebugLocation(549, 21);
			PushFollow(Follow._attribute_argument_expression_in_named_argument4220);
			attribute_argument_expression524=attribute_argument_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_argument_expression524.Tree, attribute_argument_expression524, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("named_argument", 148);
			LeaveRule("named_argument", 148);
			LeaveRule_named_argument();
			if (state.backtracking > 0) { Memoize(input, 148, named_argument_StartIndex); }

		}
		DebugLocation(549, 50);
		} finally { DebugExitRule(GrammarFileName, "named_argument"); }
		return retval;

	}
	// $ANTLR end "named_argument"

	partial void EnterRule_attribute_argument_expression();
	partial void LeaveRule_attribute_argument_expression();

	// $ANTLR start "attribute_argument_expression"
	// cs.g:550:8: public attribute_argument_expression : expression ;
	[GrammarRule("attribute_argument_expression")]
	public XAstParserRuleReturnScope attribute_argument_expression()
	{
		EnterRule_attribute_argument_expression();
		EnterRule("attribute_argument_expression", 149);
		var retval = new XAstParserRuleReturnScope("attribute_argument_expression");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_argument_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression525 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "attribute_argument_expression");
		DebugLocation(550, 12);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 149)) { return retval; }

			// cs.g:550:37: ( expression )
			DebugEnterAlt(1);
			// cs.g:551:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(551, 2);
			PushFollow(Follow._expression_in_attribute_argument_expression4231);
			expression525=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression525.Tree, expression525, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_argument_expression", 149);
			LeaveRule("attribute_argument_expression", 149);
			LeaveRule_attribute_argument_expression();
			if (state.backtracking > 0) { Memoize(input, 149, attribute_argument_expression_StartIndex); }

		}
		DebugLocation(551, 12);
		} finally { DebugExitRule(GrammarFileName, "attribute_argument_expression"); }
		return retval;

	}
	// $ANTLR end "attribute_argument_expression"

	partial void EnterRule_class_declaration();
	partial void LeaveRule_class_declaration();

	// $ANTLR start "class_declaration"
	// cs.g:557:8: public class_declaration : 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? ;
	[GrammarRule("class_declaration")]
	public XAstParserRuleReturnScope class_declaration()
	{
		EnterRule_class_declaration();
		EnterRule("class_declaration", 150);
		var retval = new XAstParserRuleReturnScope("class_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int class_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal526 = default(IToken);
		IToken char_literal531 = default(IToken);
		XAstParserRuleReturnScope type_or_generic527 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_base528 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses529 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_body530 = default(XAstParserRuleReturnScope);

		object string_literal526_tree = default(object);
		object char_literal531_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "class_declaration");
		DebugLocation(557, 98);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 150)) { return retval; }

			// cs.g:557:25: ( 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? )
			DebugEnterAlt(1);
			// cs.g:558:2: 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(558, 2);
			string_literal526=(IToken)Match(input,111,Follow._111_in_class_declaration4246); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal526_tree = (object)adaptor.Create(string_literal526, retval);
			adaptor.AddChild(root_0, string_literal526_tree);
			}
			DebugLocation(558, 11);
			PushFollow(Follow._type_or_generic_in_class_declaration4249);
			type_or_generic527=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic527.Tree, type_or_generic527, retval);
			DebugLocation(558, 29);
			// cs.g:558:29: ( class_base )?
			int alt143=2;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			int LA143_0 = input.LA(1);

			if ((LA143_0==79))
			{
				alt143 = 1;
			}
			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:558:29: class_base
				{
				DebugLocation(558, 29);
				PushFollow(Follow._class_base_in_class_declaration4253);
				class_base528=class_base();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_base528.Tree, class_base528, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(143); }

			DebugLocation(558, 43);
			// cs.g:558:43: ( type_parameter_constraints_clauses )?
			int alt144=2;
			try { DebugEnterSubRule(144);
			try { DebugEnterDecision(144, false);
			int LA144_0 = input.LA(1);

			if ((LA144_0==194))
			{
				alt144 = 1;
			}
			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:558:43: type_parameter_constraints_clauses
				{
				DebugLocation(558, 43);
				PushFollow(Follow._type_parameter_constraints_clauses_in_class_declaration4258);
				type_parameter_constraints_clauses529=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses529.Tree, type_parameter_constraints_clauses529, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(144); }

			DebugLocation(558, 81);
			PushFollow(Follow._class_body_in_class_declaration4263);
			class_body530=class_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, class_body530.Tree, class_body530, retval);
			DebugLocation(558, 94);
			// cs.g:558:94: ( ';' )?
			int alt145=2;
			try { DebugEnterSubRule(145);
			try { DebugEnterDecision(145, false);
			int LA145_0 = input.LA(1);

			if ((LA145_0==SEMI))
			{
				alt145 = 1;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:558:94: ';'
				{
				DebugLocation(558, 94);
				char_literal531=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_class_declaration4267), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal531_tree = (object)adaptor.Create(char_literal531, retval);
				adaptor.AddChild(root_0, char_literal531_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(145); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_declaration", 150);
			LeaveRule("class_declaration", 150);
			LeaveRule_class_declaration();
			if (state.backtracking > 0) { Memoize(input, 150, class_declaration_StartIndex); }

		}
		DebugLocation(558, 98);
		} finally { DebugExitRule(GrammarFileName, "class_declaration"); }
		return retval;

	}
	// $ANTLR end "class_declaration"

	partial void EnterRule_class_base();
	partial void LeaveRule_class_base();

	// $ANTLR start "class_base"
	// cs.g:559:8: public class_base : ':' interface_type_list ;
	[GrammarRule("class_base")]
	public XAstParserRuleReturnScope class_base()
	{
		EnterRule_class_base();
		EnterRule("class_base", 151);
		var retval = new XAstParserRuleReturnScope("class_base");
		
		retval.Start = (IToken)input.LT(1);
		int class_base_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal532 = default(IToken);
		XAstParserRuleReturnScope interface_type_list533 = default(XAstParserRuleReturnScope);

		object char_literal532_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "class_base");
		DebugLocation(559, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 151)) { return retval; }

			// cs.g:559:18: ( ':' interface_type_list )
			DebugEnterAlt(1);
			// cs.g:562:2: ':' interface_type_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(562, 2);
			char_literal532=(IToken)Match(input,79,Follow._79_in_class_base4282); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal532_tree = (object)adaptor.Create(char_literal532, retval);
			adaptor.AddChild(root_0, char_literal532_tree);
			}
			DebugLocation(562, 8);
			PushFollow(Follow._interface_type_list_in_class_base4286);
			interface_type_list533=interface_type_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_type_list533.Tree, interface_type_list533, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_base", 151);
			LeaveRule("class_base", 151);
			LeaveRule_class_base();
			if (state.backtracking > 0) { Memoize(input, 151, class_base_StartIndex); }

		}
		DebugLocation(562, 27);
		} finally { DebugExitRule(GrammarFileName, "class_base"); }
		return retval;

	}
	// $ANTLR end "class_base"

	partial void EnterRule_interface_type_list();
	partial void LeaveRule_interface_type_list();

	// $ANTLR start "interface_type_list"
	// cs.g:564:8: public interface_type_list : type ( ',' type )* ;
	[GrammarRule("interface_type_list")]
	public XAstParserRuleReturnScope interface_type_list()
	{
		EnterRule_interface_type_list();
		EnterRule("interface_type_list", 152);
		var retval = new XAstParserRuleReturnScope("interface_type_list");
		
		retval.Start = (IToken)input.LT(1);
		int interface_type_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal535 = default(IToken);
		XAstParserRuleReturnScope type534 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type536 = default(XAstParserRuleReturnScope);

		object char_literal535_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_type_list");
		DebugLocation(564, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 152)) { return retval; }

			// cs.g:564:27: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// cs.g:565:2: type ( ',' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(565, 2);
			PushFollow(Follow._type_in_interface_type_list4298);
			type534=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type534.Tree, type534, retval);
			DebugLocation(565, 7);
			// cs.g:565:7: ( ',' type )*
			try { DebugEnterSubRule(146);
			while (true)
			{
				int alt146=2;
				try { DebugEnterDecision(146, false);
				int LA146_0 = input.LA(1);

				if ((LA146_0==74))
				{
					alt146 = 1;
				}


				} finally { DebugExitDecision(146); }
				switch ( alt146 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:565:8: ',' type
					{
					DebugLocation(565, 8);
					char_literal535=(IToken)Match(input,74,Follow._74_in_interface_type_list4301); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal535_tree = (object)adaptor.Create(char_literal535, retval);
					adaptor.AddChild(root_0, char_literal535_tree);
					}
					DebugLocation(565, 14);
					PushFollow(Follow._type_in_interface_type_list4305);
					type536=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type536.Tree, type536, retval);

					}
					break;

				default:
					goto loop146;
				}
			}

			loop146:
				;

			} finally { DebugExitSubRule(146); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_type_list", 152);
			LeaveRule("interface_type_list", 152);
			LeaveRule_interface_type_list();
			if (state.backtracking > 0) { Memoize(input, 152, interface_type_list_StartIndex); }

		}
		DebugLocation(565, 20);
		} finally { DebugExitRule(GrammarFileName, "interface_type_list"); }
		return retval;

	}
	// $ANTLR end "interface_type_list"

	partial void EnterRule_class_body();
	partial void LeaveRule_class_body();

	// $ANTLR start "class_body"
	// cs.g:567:8: public class_body : '{' ( class_member_declarations )? '}' ;
	[GrammarRule("class_body")]
	public XAstParserRuleReturnScope class_body()
	{
		EnterRule_class_body();
		EnterRule("class_body", 153);
		var retval = new XAstParserRuleReturnScope("class_body");
		
		retval.Start = (IToken)input.LT(1);
		int class_body_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal537 = default(IToken);
		IToken char_literal539 = default(IToken);
		XAstParserRuleReturnScope class_member_declarations538 = default(XAstParserRuleReturnScope);

		object char_literal537_tree = default(object);
		object char_literal539_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "class_body");
		DebugLocation(567, 40);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 153)) { return retval; }

			// cs.g:567:18: ( '{' ( class_member_declarations )? '}' )
			DebugEnterAlt(1);
			// cs.g:568:2: '{' ( class_member_declarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(568, 2);
			char_literal537=(IToken)Match(input,197,Follow._197_in_class_body4318); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal537_tree = (object)adaptor.Create(char_literal537, retval);
			adaptor.AddChild(root_0, char_literal537_tree);
			}
			DebugLocation(568, 8);
			// cs.g:568:8: ( class_member_declarations )?
			int alt147=2;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, false);
			int LA147_0 = input.LA(1);

			if ((LA147_0==DEFINE||LA147_0==ELIF||LA147_0==ENDIF||LA147_0==ENUM||LA147_0==IDENTIFIER||LA147_0==UNDEF||LA147_0==91||(LA147_0>=95 && LA147_0<=98)||(LA147_0>=100 && LA147_0<=101)||LA147_0==103||(LA147_0>=105 && LA147_0<=106)||LA147_0==109||(LA147_0>=111 && LA147_0<=112)||LA147_0==114||(LA147_0>=116 && LA147_0<=117)||(LA147_0>=119 && LA147_0<=120)||(LA147_0>=122 && LA147_0<=126)||LA147_0==129||(LA147_0>=132 && LA147_0<=133)||(LA147_0>=135 && LA147_0<=136)||(LA147_0>=138 && LA147_0<=141)||(LA147_0>=143 && LA147_0<=144)||(LA147_0>=146 && LA147_0<=148)||(LA147_0>=150 && LA147_0<=152)||LA147_0==154||(LA147_0>=156 && LA147_0<=157)||(LA147_0>=159 && LA147_0<=165)||LA147_0==167||(LA147_0>=169 && LA147_0<=173)||(LA147_0>=176 && LA147_0<=178)||LA147_0==183||(LA147_0>=185 && LA147_0<=186)||(LA147_0>=188 && LA147_0<=194)||LA147_0==196||LA147_0==202))
			{
				alt147 = 1;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:568:8: class_member_declarations
				{
				DebugLocation(568, 8);
				PushFollow(Follow._class_member_declarations_in_class_body4322);
				class_member_declarations538=class_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_member_declarations538.Tree, class_member_declarations538, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(147); }

			DebugLocation(568, 37);
			char_literal539=(IToken)Match(input,201,Follow._201_in_class_body4327); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal539_tree = (object)adaptor.Create(char_literal539, retval);
			adaptor.AddChild(root_0, char_literal539_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_body", 153);
			LeaveRule("class_body", 153);
			LeaveRule_class_body();
			if (state.backtracking > 0) { Memoize(input, 153, class_body_StartIndex); }

		}
		DebugLocation(568, 40);
		} finally { DebugExitRule(GrammarFileName, "class_body"); }
		return retval;

	}
	// $ANTLR end "class_body"

	partial void EnterRule_class_member_declarations();
	partial void LeaveRule_class_member_declarations();

	// $ANTLR start "class_member_declarations"
	// cs.g:569:8: public class_member_declarations : ( class_member_declaration )+ ;
	[GrammarRule("class_member_declarations")]
	public XAstParserRuleReturnScope class_member_declarations()
	{
		EnterRule_class_member_declarations();
		EnterRule("class_member_declarations", 154);
		var retval = new XAstParserRuleReturnScope("class_member_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int class_member_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope class_member_declaration540 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "class_member_declarations");
		DebugLocation(569, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 154)) { return retval; }

			// cs.g:569:33: ( ( class_member_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:570:2: ( class_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(570, 2);
			// cs.g:570:2: ( class_member_declaration )+
			int cnt148=0;
			try { DebugEnterSubRule(148);
			while (true)
			{
				int alt148=2;
				try { DebugEnterDecision(148, false);
				int LA148_0 = input.LA(1);

				if ((LA148_0==DEFINE||LA148_0==ELIF||LA148_0==ENDIF||LA148_0==ENUM||LA148_0==IDENTIFIER||LA148_0==UNDEF||LA148_0==91||(LA148_0>=95 && LA148_0<=98)||(LA148_0>=100 && LA148_0<=101)||LA148_0==103||(LA148_0>=105 && LA148_0<=106)||LA148_0==109||(LA148_0>=111 && LA148_0<=112)||LA148_0==114||(LA148_0>=116 && LA148_0<=117)||(LA148_0>=119 && LA148_0<=120)||(LA148_0>=122 && LA148_0<=126)||LA148_0==129||(LA148_0>=132 && LA148_0<=133)||(LA148_0>=135 && LA148_0<=136)||(LA148_0>=138 && LA148_0<=141)||(LA148_0>=143 && LA148_0<=144)||(LA148_0>=146 && LA148_0<=148)||(LA148_0>=150 && LA148_0<=152)||LA148_0==154||(LA148_0>=156 && LA148_0<=157)||(LA148_0>=159 && LA148_0<=165)||LA148_0==167||(LA148_0>=169 && LA148_0<=173)||(LA148_0>=176 && LA148_0<=178)||LA148_0==183||(LA148_0>=185 && LA148_0<=186)||(LA148_0>=188 && LA148_0<=194)||LA148_0==196||LA148_0==202))
				{
					alt148 = 1;
				}


				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:570:2: class_member_declaration
					{
					DebugLocation(570, 2);
					PushFollow(Follow._class_member_declaration_in_class_member_declarations4337);
					class_member_declaration540=class_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_member_declaration540.Tree, class_member_declaration540, retval);

					}
					break;

				default:
					if (cnt148 >= 1)
						goto loop148;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee148 = new EarlyExitException( 148, input );
					DebugRecognitionException(eee148);
					throw eee148;
				}
				cnt148++;
			}
			loop148:
				;

			} finally { DebugExitSubRule(148); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_member_declarations", 154);
			LeaveRule("class_member_declarations", 154);
			LeaveRule_class_member_declarations();
			if (state.backtracking > 0) { Memoize(input, 154, class_member_declarations_StartIndex); }

		}
		DebugLocation(570, 27);
		} finally { DebugExitRule(GrammarFileName, "class_member_declarations"); }
		return retval;

	}
	// $ANTLR end "class_member_declarations"

	partial void EnterRule_constant_declaration();
	partial void LeaveRule_constant_declaration();

	// $ANTLR start "constant_declaration"
	// cs.g:573:8: public constant_declaration : 'const' type constant_declarators ';' ;
	[GrammarRule("constant_declaration")]
	public XAstParserRuleReturnScope constant_declaration()
	{
		EnterRule_constant_declaration();
		EnterRule("constant_declaration", 155);
		var retval = new XAstParserRuleReturnScope("constant_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int constant_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal541 = default(IToken);
		IToken char_literal544 = default(IToken);
		XAstParserRuleReturnScope type542 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_declarators543 = default(XAstParserRuleReturnScope);

		object string_literal541_tree = default(object);
		object char_literal544_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant_declaration");
		DebugLocation(573, 45);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 155)) { return retval; }

			// cs.g:573:28: ( 'const' type constant_declarators ';' )
			DebugEnterAlt(1);
			// cs.g:574:2: 'const' type constant_declarators ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(574, 2);
			string_literal541=(IToken)Match(input,112,Follow._112_in_constant_declaration4350); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal541_tree = (object)adaptor.Create(string_literal541, retval);
			adaptor.AddChild(root_0, string_literal541_tree);
			}
			DebugLocation(574, 12);
			PushFollow(Follow._type_in_constant_declaration4354);
			type542=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type542.Tree, type542, retval);
			DebugLocation(574, 19);
			PushFollow(Follow._constant_declarators_in_constant_declaration4358);
			constant_declarators543=constant_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators543.Tree, constant_declarators543, retval);
			DebugLocation(574, 42);
			char_literal544=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_constant_declaration4362), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal544_tree = (object)adaptor.Create(char_literal544, retval);
			adaptor.AddChild(root_0, char_literal544_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declaration", 155);
			LeaveRule("constant_declaration", 155);
			LeaveRule_constant_declaration();
			if (state.backtracking > 0) { Memoize(input, 155, constant_declaration_StartIndex); }

		}
		DebugLocation(574, 45);
		} finally { DebugExitRule(GrammarFileName, "constant_declaration"); }
		return retval;

	}
	// $ANTLR end "constant_declaration"

	partial void EnterRule_constant_declarators();
	partial void LeaveRule_constant_declarators();

	// $ANTLR start "constant_declarators"
	// cs.g:575:8: public constant_declarators : constant_declarator ( ',' constant_declarator )* ;
	[GrammarRule("constant_declarators")]
	public XAstParserRuleReturnScope constant_declarators()
	{
		EnterRule_constant_declarators();
		EnterRule("constant_declarators", 156);
		var retval = new XAstParserRuleReturnScope("constant_declarators");
		
		retval.Start = (IToken)input.LT(1);
		int constant_declarators_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal546 = default(IToken);
		XAstParserRuleReturnScope constant_declarator545 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_declarator547 = default(XAstParserRuleReturnScope);

		object char_literal546_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant_declarators");
		DebugLocation(575, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 156)) { return retval; }

			// cs.g:575:28: ( constant_declarator ( ',' constant_declarator )* )
			DebugEnterAlt(1);
			// cs.g:576:2: constant_declarator ( ',' constant_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(576, 2);
			PushFollow(Follow._constant_declarator_in_constant_declarators4372);
			constant_declarator545=constant_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarator545.Tree, constant_declarator545, retval);
			DebugLocation(576, 22);
			// cs.g:576:22: ( ',' constant_declarator )*
			try { DebugEnterSubRule(149);
			while (true)
			{
				int alt149=2;
				try { DebugEnterDecision(149, false);
				int LA149_0 = input.LA(1);

				if ((LA149_0==74))
				{
					alt149 = 1;
				}


				} finally { DebugExitDecision(149); }
				switch ( alt149 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:576:23: ',' constant_declarator
					{
					DebugLocation(576, 23);
					char_literal546=(IToken)Match(input,74,Follow._74_in_constant_declarators4375); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal546_tree = (object)adaptor.Create(char_literal546, retval);
					adaptor.AddChild(root_0, char_literal546_tree);
					}
					DebugLocation(576, 27);
					PushFollow(Follow._constant_declarator_in_constant_declarators4377);
					constant_declarator547=constant_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarator547.Tree, constant_declarator547, retval);

					}
					break;

				default:
					goto loop149;
				}
			}

			loop149:
				;

			} finally { DebugExitSubRule(149); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declarators", 156);
			LeaveRule("constant_declarators", 156);
			LeaveRule_constant_declarators();
			if (state.backtracking > 0) { Memoize(input, 156, constant_declarators_StartIndex); }

		}
		DebugLocation(576, 48);
		} finally { DebugExitRule(GrammarFileName, "constant_declarators"); }
		return retval;

	}
	// $ANTLR end "constant_declarators"

	partial void EnterRule_constant_declarator();
	partial void LeaveRule_constant_declarator();

	// $ANTLR start "constant_declarator"
	// cs.g:577:8: public constant_declarator : identifier ( '=' constant_expression )? ;
	[GrammarRule("constant_declarator")]
	public XAstParserRuleReturnScope constant_declarator()
	{
		EnterRule_constant_declarator();
		EnterRule("constant_declarator", 157);
		var retval = new XAstParserRuleReturnScope("constant_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int constant_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal549 = default(IToken);
		XAstParserRuleReturnScope identifier548 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression550 = default(XAstParserRuleReturnScope);

		object char_literal549_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant_declarator");
		DebugLocation(577, 43);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 157)) { return retval; }

			// cs.g:577:27: ( identifier ( '=' constant_expression )? )
			DebugEnterAlt(1);
			// cs.g:578:2: identifier ( '=' constant_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(578, 2);
			PushFollow(Follow._identifier_in_constant_declarator4389);
			identifier548=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier548.Tree, identifier548, retval);
			DebugLocation(578, 15);
			// cs.g:578:15: ( '=' constant_expression )?
			int alt150=2;
			try { DebugEnterSubRule(150);
			try { DebugEnterDecision(150, false);
			int LA150_0 = input.LA(1);

			if ((LA150_0==85))
			{
				alt150 = 1;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:578:16: '=' constant_expression
				{
				DebugLocation(578, 16);
				char_literal549=(IToken)Match(input,85,Follow._85_in_constant_declarator4394); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal549_tree = (object)adaptor.Create(char_literal549, retval);
				adaptor.AddChild(root_0, char_literal549_tree);
				}
				DebugLocation(578, 22);
				PushFollow(Follow._constant_expression_in_constant_declarator4398);
				constant_expression550=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression550.Tree, constant_expression550, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(150); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declarator", 157);
			LeaveRule("constant_declarator", 157);
			LeaveRule_constant_declarator();
			if (state.backtracking > 0) { Memoize(input, 157, constant_declarator_StartIndex); }

		}
		DebugLocation(578, 43);
		} finally { DebugExitRule(GrammarFileName, "constant_declarator"); }
		return retval;

	}
	// $ANTLR end "constant_declarator"

	partial void EnterRule_constant_expression();
	partial void LeaveRule_constant_expression();

	// $ANTLR start "constant_expression"
	// cs.g:579:8: public constant_expression : expression ;
	[GrammarRule("constant_expression")]
	public XAstParserRuleReturnScope constant_expression()
	{
		EnterRule_constant_expression();
		EnterRule("constant_expression", 158);
		var retval = new XAstParserRuleReturnScope("constant_expression");
		
		retval.Start = (IToken)input.LT(1);
		int constant_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression551 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_expression");
		DebugLocation(579, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 158)) { return retval; }

			// cs.g:579:27: ( expression )
			DebugEnterAlt(1);
			// cs.g:580:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(580, 2);
			PushFollow(Follow._expression_in_constant_expression4410);
			expression551=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression551.Tree, expression551, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_expression", 158);
			LeaveRule("constant_expression", 158);
			LeaveRule_constant_expression();
			if (state.backtracking > 0) { Memoize(input, 158, constant_expression_StartIndex); }

		}
		DebugLocation(580, 11);
		} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
		return retval;

	}
	// $ANTLR end "constant_expression"

	partial void EnterRule_field_declaration();
	partial void LeaveRule_field_declaration();

	// $ANTLR start "field_declaration"
	// cs.g:583:8: public field_declaration : variable_declarators ';' ;
	[GrammarRule("field_declaration")]
	public XAstParserRuleReturnScope field_declaration()
	{
		EnterRule_field_declaration();
		EnterRule("field_declaration", 159);
		var retval = new XAstParserRuleReturnScope("field_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int field_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal553 = default(IToken);
		XAstParserRuleReturnScope variable_declarators552 = default(XAstParserRuleReturnScope);

		object char_literal553_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "field_declaration");
		DebugLocation(583, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 159)) { return retval; }

			// cs.g:583:25: ( variable_declarators ';' )
			DebugEnterAlt(1);
			// cs.g:584:2: variable_declarators ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(584, 2);
			PushFollow(Follow._variable_declarators_in_field_declaration4421);
			variable_declarators552=variable_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarators552.Tree, variable_declarators552, retval);
			DebugLocation(584, 25);
			char_literal553=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_field_declaration4425), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal553_tree = (object)adaptor.Create(char_literal553, retval);
			adaptor.AddChild(root_0, char_literal553_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("field_declaration", 159);
			LeaveRule("field_declaration", 159);
			LeaveRule_field_declaration();
			if (state.backtracking > 0) { Memoize(input, 159, field_declaration_StartIndex); }

		}
		DebugLocation(584, 28);
		} finally { DebugExitRule(GrammarFileName, "field_declaration"); }
		return retval;

	}
	// $ANTLR end "field_declaration"

	partial void EnterRule_variable_declarators();
	partial void LeaveRule_variable_declarators();

	// $ANTLR start "variable_declarators"
	// cs.g:585:8: public variable_declarators : variable_declarator ( ',' variable_declarator )* ;
	[GrammarRule("variable_declarators")]
	public XAstParserRuleReturnScope variable_declarators()
	{
		EnterRule_variable_declarators();
		EnterRule("variable_declarators", 160);
		var retval = new XAstParserRuleReturnScope("variable_declarators");
		
		retval.Start = (IToken)input.LT(1);
		int variable_declarators_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal555 = default(IToken);
		XAstParserRuleReturnScope variable_declarator554 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_declarator556 = default(XAstParserRuleReturnScope);

		object char_literal555_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variable_declarators");
		DebugLocation(585, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 160)) { return retval; }

			// cs.g:585:28: ( variable_declarator ( ',' variable_declarator )* )
			DebugEnterAlt(1);
			// cs.g:586:2: variable_declarator ( ',' variable_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(586, 2);
			PushFollow(Follow._variable_declarator_in_variable_declarators4435);
			variable_declarator554=variable_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarator554.Tree, variable_declarator554, retval);
			DebugLocation(586, 22);
			// cs.g:586:22: ( ',' variable_declarator )*
			try { DebugEnterSubRule(151);
			while (true)
			{
				int alt151=2;
				try { DebugEnterDecision(151, false);
				int LA151_0 = input.LA(1);

				if ((LA151_0==74))
				{
					alt151 = 1;
				}


				} finally { DebugExitDecision(151); }
				switch ( alt151 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:586:23: ',' variable_declarator
					{
					DebugLocation(586, 23);
					char_literal555=(IToken)Match(input,74,Follow._74_in_variable_declarators4438); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal555_tree = (object)adaptor.Create(char_literal555, retval);
					adaptor.AddChild(root_0, char_literal555_tree);
					}
					DebugLocation(586, 29);
					PushFollow(Follow._variable_declarator_in_variable_declarators4442);
					variable_declarator556=variable_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarator556.Tree, variable_declarator556, retval);

					}
					break;

				default:
					goto loop151;
				}
			}

			loop151:
				;

			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_declarators", 160);
			LeaveRule("variable_declarators", 160);
			LeaveRule_variable_declarators();
			if (state.backtracking > 0) { Memoize(input, 160, variable_declarators_StartIndex); }

		}
		DebugLocation(586, 50);
		} finally { DebugExitRule(GrammarFileName, "variable_declarators"); }
		return retval;

	}
	// $ANTLR end "variable_declarators"

	partial void EnterRule_variable_declarator();
	partial void LeaveRule_variable_declarator();

	// $ANTLR start "variable_declarator"
	// cs.g:587:8: public variable_declarator : type_name ( '=' variable_initializer )? ;
	[GrammarRule("variable_declarator")]
	public XAstParserRuleReturnScope variable_declarator()
	{
		EnterRule_variable_declarator();
		EnterRule("variable_declarator", 161);
		var retval = new XAstParserRuleReturnScope("variable_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int variable_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal558 = default(IToken);
		XAstParserRuleReturnScope type_name557 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_initializer559 = default(XAstParserRuleReturnScope);

		object char_literal558_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variable_declarator");
		DebugLocation(587, 41);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 161)) { return retval; }

			// cs.g:587:27: ( type_name ( '=' variable_initializer )? )
			DebugEnterAlt(1);
			// cs.g:588:2: type_name ( '=' variable_initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(588, 2);
			PushFollow(Follow._type_name_in_variable_declarator4454);
			type_name557=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name557.Tree, type_name557, retval);
			DebugLocation(588, 12);
			// cs.g:588:12: ( '=' variable_initializer )?
			int alt152=2;
			try { DebugEnterSubRule(152);
			try { DebugEnterDecision(152, false);
			int LA152_0 = input.LA(1);

			if ((LA152_0==85))
			{
				alt152 = 1;
			}
			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:588:13: '=' variable_initializer
				{
				DebugLocation(588, 13);
				char_literal558=(IToken)Match(input,85,Follow._85_in_variable_declarator4457); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal558_tree = (object)adaptor.Create(char_literal558, retval);
				adaptor.AddChild(root_0, char_literal558_tree);
				}
				DebugLocation(588, 19);
				PushFollow(Follow._variable_initializer_in_variable_declarator4461);
				variable_initializer559=variable_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer559.Tree, variable_initializer559, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(152); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_declarator", 161);
			LeaveRule("variable_declarator", 161);
			LeaveRule_variable_declarator();
			if (state.backtracking > 0) { Memoize(input, 161, variable_declarator_StartIndex); }

		}
		DebugLocation(588, 41);
		} finally { DebugExitRule(GrammarFileName, "variable_declarator"); }
		return retval;

	}
	// $ANTLR end "variable_declarator"

	partial void EnterRule_method_declaration();
	partial void LeaveRule_method_declaration();

	// $ANTLR start "method_declaration"
	// cs.g:591:8: public method_declaration : method_header method_body ;
	[GrammarRule("method_declaration")]
	public XAstParserRuleReturnScope method_declaration()
	{
		EnterRule_method_declaration();
		EnterRule("method_declaration", 162);
		var retval = new XAstParserRuleReturnScope("method_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int method_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope method_header560 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_body561 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "method_declaration");
		DebugLocation(591, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 162)) { return retval; }

			// cs.g:591:26: ( method_header method_body )
			DebugEnterAlt(1);
			// cs.g:592:2: method_header method_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(592, 2);
			PushFollow(Follow._method_header_in_method_declaration4477);
			method_header560=method_header();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, method_header560.Tree, method_header560, retval);
			DebugLocation(592, 18);
			PushFollow(Follow._method_body_in_method_declaration4481);
			method_body561=method_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, method_body561.Tree, method_body561, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_declaration", 162);
			LeaveRule("method_declaration", 162);
			LeaveRule_method_declaration();
			if (state.backtracking > 0) { Memoize(input, 162, method_declaration_StartIndex); }

		}
		DebugLocation(592, 29);
		} finally { DebugExitRule(GrammarFileName, "method_declaration"); }
		return retval;

	}
	// $ANTLR end "method_declaration"

	partial void EnterRule_method_header();
	partial void LeaveRule_method_header();

	// $ANTLR start "method_header"
	// cs.g:593:8: public method_header : member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ;
	[GrammarRule("method_header")]
	public XAstParserRuleReturnScope method_header()
	{
		EnterRule_method_header();
		EnterRule("method_header", 163);
		var retval = new XAstParserRuleReturnScope("method_header");
		
		retval.Start = (IToken)input.LT(1);
		int method_header_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal563 = default(IToken);
		IToken char_literal565 = default(IToken);
		XAstParserRuleReturnScope member_name562 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope formal_parameter_list564 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses566 = default(XAstParserRuleReturnScope);

		object char_literal563_tree = default(object);
		object char_literal565_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "method_header");
		DebugLocation(593, 87);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 163)) { return retval; }

			// cs.g:593:21: ( member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? )
			DebugEnterAlt(1);
			// cs.g:594:2: member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(594, 2);
			PushFollow(Follow._member_name_in_method_header4491);
			member_name562=member_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_name562.Tree, member_name562, retval);
			DebugLocation(594, 15);
			char_literal563=(IToken)Match(input,68,Follow._68_in_method_header4494); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal563_tree = (object)adaptor.Create(char_literal563, retval);
			adaptor.AddChild(root_0, char_literal563_tree);
			}
			DebugLocation(594, 21);
			// cs.g:594:21: ( formal_parameter_list )?
			int alt153=2;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			int LA153_0 = input.LA(1);

			if ((LA153_0==DEFINE||LA153_0==ELIF||LA153_0==ENDIF||LA153_0==IDENTIFIER||LA153_0==UNDEF||LA153_0==91||LA153_0==95||(LA153_0>=97 && LA153_0<=98)||(LA153_0>=100 && LA153_0<=101)||LA153_0==103||(LA153_0>=105 && LA153_0<=106)||LA153_0==109||LA153_0==114||LA153_0==117||(LA153_0>=119 && LA153_0<=120)||LA153_0==122||LA153_0==126||LA153_0==129||(LA153_0>=132 && LA153_0<=133)||LA153_0==135||LA153_0==138||LA153_0==141||(LA153_0>=143 && LA153_0<=144)||(LA153_0>=146 && LA153_0<=148)||(LA153_0>=151 && LA153_0<=152)||(LA153_0>=154 && LA153_0<=155)||(LA153_0>=157 && LA153_0<=158)||LA153_0==160||LA153_0==162||(LA153_0>=166 && LA153_0<=167)||LA153_0==169||(LA153_0>=171 && LA153_0<=173)||LA153_0==177||LA153_0==180||LA153_0==183||(LA153_0>=185 && LA153_0<=186)||(LA153_0>=189 && LA153_0<=190)||LA153_0==192||LA153_0==194||LA153_0==196))
			{
				alt153 = 1;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:594:21: formal_parameter_list
				{
				DebugLocation(594, 21);
				PushFollow(Follow._formal_parameter_list_in_method_header4498);
				formal_parameter_list564=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list564.Tree, formal_parameter_list564, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(153); }

			DebugLocation(594, 46);
			char_literal565=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_method_header4503), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal565_tree = (object)adaptor.Create(char_literal565, retval);
			adaptor.AddChild(root_0, char_literal565_tree);
			}
			DebugLocation(594, 52);
			// cs.g:594:52: ( type_parameter_constraints_clauses )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			int LA154_0 = input.LA(1);

			if ((LA154_0==194))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:594:52: type_parameter_constraints_clauses
				{
				DebugLocation(594, 52);
				PushFollow(Follow._type_parameter_constraints_clauses_in_method_header4507);
				type_parameter_constraints_clauses566=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses566.Tree, type_parameter_constraints_clauses566, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(154); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_header", 163);
			LeaveRule("method_header", 163);
			LeaveRule_method_header();
			if (state.backtracking > 0) { Memoize(input, 163, method_header_StartIndex); }

		}
		DebugLocation(594, 87);
		} finally { DebugExitRule(GrammarFileName, "method_header"); }
		return retval;

	}
	// $ANTLR end "method_header"

	partial void EnterRule_method_body();
	partial void LeaveRule_method_body();

	// $ANTLR start "method_body"
	// cs.g:595:8: public method_body : block ;
	[GrammarRule("method_body")]
	public XAstParserRuleReturnScope method_body()
	{
		EnterRule_method_body();
		EnterRule("method_body", 164);
		var retval = new XAstParserRuleReturnScope("method_body");
		
		retval.Start = (IToken)input.LT(1);
		int method_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block567 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "method_body");
		DebugLocation(595, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 164)) { return retval; }

			// cs.g:595:19: ( block )
			DebugEnterAlt(1);
			// cs.g:596:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(596, 2);
			PushFollow(Follow._block_in_method_body4518);
			block567=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block567.Tree, block567, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_body", 164);
			LeaveRule("method_body", 164);
			LeaveRule_method_body();
			if (state.backtracking > 0) { Memoize(input, 164, method_body_StartIndex); }

		}
		DebugLocation(596, 7);
		} finally { DebugExitRule(GrammarFileName, "method_body"); }
		return retval;

	}
	// $ANTLR end "method_body"

	partial void EnterRule_member_name();
	partial void LeaveRule_member_name();

	// $ANTLR start "member_name"
	// cs.g:597:8: public member_name : qid ;
	[GrammarRule("member_name")]
	public XAstParserRuleReturnScope member_name()
	{
		EnterRule_member_name();
		EnterRule("member_name", 165);
		var retval = new XAstParserRuleReturnScope("member_name");
		
		retval.Start = (IToken)input.LT(1);
		int member_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope qid568 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "member_name");
		DebugLocation(597, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 165)) { return retval; }

			// cs.g:597:19: ( qid )
			DebugEnterAlt(1);
			// cs.g:598:2: qid
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(598, 2);
			PushFollow(Follow._qid_in_member_name4528);
			qid568=qid();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qid568.Tree, qid568, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_name", 165);
			LeaveRule("member_name", 165);
			LeaveRule_member_name();
			if (state.backtracking > 0) { Memoize(input, 165, member_name_StartIndex); }

		}
		DebugLocation(598, 5);
		} finally { DebugExitRule(GrammarFileName, "member_name"); }
		return retval;

	}
	// $ANTLR end "member_name"

	partial void EnterRule_property_declaration();
	partial void LeaveRule_property_declaration();

	// $ANTLR start "property_declaration"
	// cs.g:601:8: public property_declaration : member_name '{' accessor_declarations '}' ;
	[GrammarRule("property_declaration")]
	public XAstParserRuleReturnScope property_declaration()
	{
		EnterRule_property_declaration();
		EnterRule("property_declaration", 166);
		var retval = new XAstParserRuleReturnScope("property_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int property_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal570 = default(IToken);
		IToken char_literal572 = default(IToken);
		XAstParserRuleReturnScope member_name569 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope accessor_declarations571 = default(XAstParserRuleReturnScope);

		object char_literal570_tree = default(object);
		object char_literal572_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "property_declaration");
		DebugLocation(601, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 166)) { return retval; }

			// cs.g:601:28: ( member_name '{' accessor_declarations '}' )
			DebugEnterAlt(1);
			// cs.g:602:2: member_name '{' accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(602, 2);
			PushFollow(Follow._member_name_in_property_declaration4542);
			member_name569=member_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_name569.Tree, member_name569, retval);
			DebugLocation(602, 16);
			char_literal570=(IToken)Match(input,197,Follow._197_in_property_declaration4546); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal570_tree = (object)adaptor.Create(char_literal570, retval);
			adaptor.AddChild(root_0, char_literal570_tree);
			}
			DebugLocation(602, 22);
			PushFollow(Follow._accessor_declarations_in_property_declaration4550);
			accessor_declarations571=accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_declarations571.Tree, accessor_declarations571, retval);
			DebugLocation(602, 46);
			char_literal572=(IToken)Match(input,201,Follow._201_in_property_declaration4554); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal572_tree = (object)adaptor.Create(char_literal572, retval);
			adaptor.AddChild(root_0, char_literal572_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property_declaration", 166);
			LeaveRule("property_declaration", 166);
			LeaveRule_property_declaration();
			if (state.backtracking > 0) { Memoize(input, 166, property_declaration_StartIndex); }

		}
		DebugLocation(602, 49);
		} finally { DebugExitRule(GrammarFileName, "property_declaration"); }
		return retval;

	}
	// $ANTLR end "property_declaration"

	partial void EnterRule_accessor_declarations();
	partial void LeaveRule_accessor_declarations();

	// $ANTLR start "accessor_declarations"
	// cs.g:603:8: public accessor_declarations : ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) ;
	[GrammarRule("accessor_declarations")]
	public XAstParserRuleReturnScope accessor_declarations()
	{
		EnterRule_accessor_declarations();
		EnterRule("accessor_declarations", 167);
		var retval = new XAstParserRuleReturnScope("accessor_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int accessor_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes573 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope get_accessor_declaration574 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes575 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope set_accessor_declaration576 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope set_accessor_declaration577 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes578 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope get_accessor_declaration579 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "accessor_declarations");
		DebugLocation(603, 72);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 167)) { return retval; }

			// cs.g:603:29: ( ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) )
			DebugEnterAlt(1);
			// cs.g:604:2: ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(604, 2);
			// cs.g:604:2: ( attributes )?
			int alt155=2;
			try { DebugEnterSubRule(155);
			try { DebugEnterDecision(155, false);
			int LA155_0 = input.LA(1);

			if ((LA155_0==91))
			{
				alt155 = 1;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:604:2: attributes
				{
				DebugLocation(604, 2);
				PushFollow(Follow._attributes_in_accessor_declarations4564);
				attributes573=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes573.Tree, attributes573, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(155); }

			DebugLocation(605, 3);
			// cs.g:605:3: ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
			int alt160=2;
			try { DebugEnterSubRule(160);
			try { DebugEnterDecision(160, false);
			switch (input.LA(1))
			{
			case 140:
			case 161:
			case 163:
			case 164:
				{
				int LA160_1 = input.LA(2);

				if ((LA160_1==133))
				{
					alt160 = 1;
				}
				else if ((LA160_1==172))
				{
					alt160 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 133:
				{
				alt160 = 1;
				}
				break;
			case 172:
				{
				alt160 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 160, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:605:4: get_accessor_declaration ( attributes )? ( set_accessor_declaration )?
				{
				DebugLocation(605, 4);
				PushFollow(Follow._get_accessor_declaration_in_accessor_declarations4570);
				get_accessor_declaration574=get_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, get_accessor_declaration574.Tree, get_accessor_declaration574, retval);
				DebugLocation(605, 31);
				// cs.g:605:31: ( attributes )?
				int alt156=2;
				try { DebugEnterSubRule(156);
				try { DebugEnterDecision(156, false);
				int LA156_0 = input.LA(1);

				if ((LA156_0==91))
				{
					alt156 = 1;
				}
				} finally { DebugExitDecision(156); }
				switch (alt156)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:605:31: attributes
					{
					DebugLocation(605, 31);
					PushFollow(Follow._attributes_in_accessor_declarations4574);
					attributes575=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes575.Tree, attributes575, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(156); }

				DebugLocation(605, 45);
				// cs.g:605:45: ( set_accessor_declaration )?
				int alt157=2;
				try { DebugEnterSubRule(157);
				try { DebugEnterDecision(157, false);
				int LA157_0 = input.LA(1);

				if ((LA157_0==140||LA157_0==161||(LA157_0>=163 && LA157_0<=164)||LA157_0==172))
				{
					alt157 = 1;
				}
				} finally { DebugExitDecision(157); }
				switch (alt157)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:605:45: set_accessor_declaration
					{
					DebugLocation(605, 45);
					PushFollow(Follow._set_accessor_declaration_in_accessor_declarations4579);
					set_accessor_declaration576=set_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, set_accessor_declaration576.Tree, set_accessor_declaration576, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(157); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:606:5: set_accessor_declaration ( attributes )? ( get_accessor_declaration )?
				{
				DebugLocation(606, 5);
				PushFollow(Follow._set_accessor_declaration_in_accessor_declarations4586);
				set_accessor_declaration577=set_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, set_accessor_declaration577.Tree, set_accessor_declaration577, retval);
				DebugLocation(606, 32);
				// cs.g:606:32: ( attributes )?
				int alt158=2;
				try { DebugEnterSubRule(158);
				try { DebugEnterDecision(158, false);
				int LA158_0 = input.LA(1);

				if ((LA158_0==91))
				{
					alt158 = 1;
				}
				} finally { DebugExitDecision(158); }
				switch (alt158)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:606:32: attributes
					{
					DebugLocation(606, 32);
					PushFollow(Follow._attributes_in_accessor_declarations4590);
					attributes578=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes578.Tree, attributes578, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(158); }

				DebugLocation(606, 46);
				// cs.g:606:46: ( get_accessor_declaration )?
				int alt159=2;
				try { DebugEnterSubRule(159);
				try { DebugEnterDecision(159, false);
				int LA159_0 = input.LA(1);

				if ((LA159_0==133||LA159_0==140||LA159_0==161||(LA159_0>=163 && LA159_0<=164)))
				{
					alt159 = 1;
				}
				} finally { DebugExitDecision(159); }
				switch (alt159)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:606:46: get_accessor_declaration
					{
					DebugLocation(606, 46);
					PushFollow(Follow._get_accessor_declaration_in_accessor_declarations4595);
					get_accessor_declaration579=get_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, get_accessor_declaration579.Tree, get_accessor_declaration579, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(159); }


				}
				break;

			}
			} finally { DebugExitSubRule(160); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor_declarations", 167);
			LeaveRule("accessor_declarations", 167);
			LeaveRule_accessor_declarations();
			if (state.backtracking > 0) { Memoize(input, 167, accessor_declarations_StartIndex); }

		}
		DebugLocation(606, 72);
		} finally { DebugExitRule(GrammarFileName, "accessor_declarations"); }
		return retval;

	}
	// $ANTLR end "accessor_declarations"

	partial void EnterRule_get_accessor_declaration();
	partial void LeaveRule_get_accessor_declaration();

	// $ANTLR start "get_accessor_declaration"
	// cs.g:607:8: public get_accessor_declaration : ( accessor_modifier )? 'get' accessor_body ;
	[GrammarRule("get_accessor_declaration")]
	public XAstParserRuleReturnScope get_accessor_declaration()
	{
		EnterRule_get_accessor_declaration();
		EnterRule("get_accessor_declaration", 168);
		var retval = new XAstParserRuleReturnScope("get_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int get_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal581 = default(IToken);
		XAstParserRuleReturnScope accessor_modifier580 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope accessor_body582 = default(XAstParserRuleReturnScope);

		object string_literal581_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "get_accessor_declaration");
		DebugLocation(607, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 168)) { return retval; }

			// cs.g:607:32: ( ( accessor_modifier )? 'get' accessor_body )
			DebugEnterAlt(1);
			// cs.g:608:2: ( accessor_modifier )? 'get' accessor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(608, 2);
			// cs.g:608:2: ( accessor_modifier )?
			int alt161=2;
			try { DebugEnterSubRule(161);
			try { DebugEnterDecision(161, false);
			int LA161_0 = input.LA(1);

			if ((LA161_0==140||LA161_0==161||(LA161_0>=163 && LA161_0<=164)))
			{
				alt161 = 1;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:608:2: accessor_modifier
				{
				DebugLocation(608, 2);
				PushFollow(Follow._accessor_modifier_in_get_accessor_declaration4607);
				accessor_modifier580=accessor_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_modifier580.Tree, accessor_modifier580, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(161); }

			DebugLocation(608, 23);
			string_literal581=(IToken)Match(input,133,Follow._133_in_get_accessor_declaration4612); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal581_tree = (object)adaptor.Create(string_literal581, retval);
			adaptor.AddChild(root_0, string_literal581_tree);
			}
			DebugLocation(608, 31);
			PushFollow(Follow._accessor_body_in_get_accessor_declaration4616);
			accessor_body582=accessor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_body582.Tree, accessor_body582, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("get_accessor_declaration", 168);
			LeaveRule("get_accessor_declaration", 168);
			LeaveRule_get_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 168, get_accessor_declaration_StartIndex); }

		}
		DebugLocation(608, 44);
		} finally { DebugExitRule(GrammarFileName, "get_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "get_accessor_declaration"

	partial void EnterRule_set_accessor_declaration();
	partial void LeaveRule_set_accessor_declaration();

	// $ANTLR start "set_accessor_declaration"
	// cs.g:609:8: public set_accessor_declaration : ( accessor_modifier )? 'set' accessor_body ;
	[GrammarRule("set_accessor_declaration")]
	public XAstParserRuleReturnScope set_accessor_declaration()
	{
		EnterRule_set_accessor_declaration();
		EnterRule("set_accessor_declaration", 169);
		var retval = new XAstParserRuleReturnScope("set_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int set_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal584 = default(IToken);
		XAstParserRuleReturnScope accessor_modifier583 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope accessor_body585 = default(XAstParserRuleReturnScope);

		object string_literal584_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "set_accessor_declaration");
		DebugLocation(609, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 169)) { return retval; }

			// cs.g:609:32: ( ( accessor_modifier )? 'set' accessor_body )
			DebugEnterAlt(1);
			// cs.g:610:2: ( accessor_modifier )? 'set' accessor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(610, 2);
			// cs.g:610:2: ( accessor_modifier )?
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			int LA162_0 = input.LA(1);

			if ((LA162_0==140||LA162_0==161||(LA162_0>=163 && LA162_0<=164)))
			{
				alt162 = 1;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:610:2: accessor_modifier
				{
				DebugLocation(610, 2);
				PushFollow(Follow._accessor_modifier_in_set_accessor_declaration4626);
				accessor_modifier583=accessor_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_modifier583.Tree, accessor_modifier583, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(610, 23);
			string_literal584=(IToken)Match(input,172,Follow._172_in_set_accessor_declaration4631); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal584_tree = (object)adaptor.Create(string_literal584, retval);
			adaptor.AddChild(root_0, string_literal584_tree);
			}
			DebugLocation(610, 31);
			PushFollow(Follow._accessor_body_in_set_accessor_declaration4635);
			accessor_body585=accessor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_body585.Tree, accessor_body585, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_accessor_declaration", 169);
			LeaveRule("set_accessor_declaration", 169);
			LeaveRule_set_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 169, set_accessor_declaration_StartIndex); }

		}
		DebugLocation(610, 44);
		} finally { DebugExitRule(GrammarFileName, "set_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "set_accessor_declaration"

	partial void EnterRule_accessor_modifier();
	partial void LeaveRule_accessor_modifier();

	// $ANTLR start "accessor_modifier"
	// cs.g:611:8: public accessor_modifier : ( 'public' | 'protected' | 'private' | 'internal' );
	[GrammarRule("accessor_modifier")]
	public XAstParserRuleReturnScope accessor_modifier()
	{
		EnterRule_accessor_modifier();
		EnterRule("accessor_modifier", 170);
		var retval = new XAstParserRuleReturnScope("accessor_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int accessor_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set586 = default(IToken);

		object set586_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "accessor_modifier");
		DebugLocation(611, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 170)) { return retval; }

			// cs.g:611:25: ( 'public' | 'protected' | 'private' | 'internal' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(611, 25);

			set586=(IToken)input.LT(1);
			if (input.LA(1)==140||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=164))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set586, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor_modifier", 170);
			LeaveRule("accessor_modifier", 170);
			LeaveRule_accessor_modifier();
			if (state.backtracking > 0) { Memoize(input, 170, accessor_modifier_StartIndex); }

		}
		DebugLocation(612, 49);
		} finally { DebugExitRule(GrammarFileName, "accessor_modifier"); }
		return retval;

	}
	// $ANTLR end "accessor_modifier"

	partial void EnterRule_accessor_body();
	partial void LeaveRule_accessor_body();

	// $ANTLR start "accessor_body"
	// cs.g:613:8: public accessor_body : block ;
	[GrammarRule("accessor_body")]
	public XAstParserRuleReturnScope accessor_body()
	{
		EnterRule_accessor_body();
		EnterRule("accessor_body", 171);
		var retval = new XAstParserRuleReturnScope("accessor_body");
		
		retval.Start = (IToken)input.LT(1);
		int accessor_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block587 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "accessor_body");
		DebugLocation(613, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 171)) { return retval; }

			// cs.g:613:21: ( block )
			DebugEnterAlt(1);
			// cs.g:614:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(614, 2);
			PushFollow(Follow._block_in_accessor_body4667);
			block587=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block587.Tree, block587, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor_body", 171);
			LeaveRule("accessor_body", 171);
			LeaveRule_accessor_body();
			if (state.backtracking > 0) { Memoize(input, 171, accessor_body_StartIndex); }

		}
		DebugLocation(614, 7);
		} finally { DebugExitRule(GrammarFileName, "accessor_body"); }
		return retval;

	}
	// $ANTLR end "accessor_body"

	partial void EnterRule_event_declaration();
	partial void LeaveRule_event_declaration();

	// $ANTLR start "event_declaration"
	// cs.g:617:8: public event_declaration : 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) ;
	[GrammarRule("event_declaration")]
	public XAstParserRuleReturnScope event_declaration()
	{
		EnterRule_event_declaration();
		EnterRule("event_declaration", 172);
		var retval = new XAstParserRuleReturnScope("event_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int event_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal588 = default(IToken);
		IToken char_literal591 = default(IToken);
		IToken char_literal593 = default(IToken);
		IToken char_literal595 = default(IToken);
		XAstParserRuleReturnScope type589 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope member_name590 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope event_accessor_declarations592 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_declarators594 = default(XAstParserRuleReturnScope);

		object string_literal588_tree = default(object);
		object char_literal591_tree = default(object);
		object char_literal593_tree = default(object);
		object char_literal595_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "event_declaration");
		DebugLocation(617, 2);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 172)) { return retval; }

			// cs.g:617:25: ( 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) )
			DebugEnterAlt(1);
			// cs.g:618:2: 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(618, 2);
			string_literal588=(IToken)Match(input,123,Follow._123_in_event_declaration4679); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal588_tree = (object)adaptor.Create(string_literal588, retval);
			adaptor.AddChild(root_0, string_literal588_tree);
			}
			DebugLocation(618, 12);
			PushFollow(Follow._type_in_event_declaration4683);
			type589=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type589.Tree, type589, retval);
			DebugLocation(619, 3);
			// cs.g:619:3: ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
			int alt163=2;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, false);
			int LA163_0 = input.LA(1);

			if ((LA163_0==103||LA163_0==106||LA163_0==109||LA163_0==114||LA163_0==119||LA163_0==129||LA163_0==138||LA163_0==146||LA163_0==151||LA163_0==169||LA163_0==173||LA163_0==177||(LA163_0>=185 && LA163_0<=186)||LA163_0==189) && (EvaluatePredicate(synpred25_cs_fragment)))
			{
				alt163 = 1;
			}
			else if ((LA163_0==IDENTIFIER))
			{
				int LA163_2 = input.LA(2);

				if ((EvaluatePredicate(synpred25_cs_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA163_0==DEFINE||LA163_0==ELIF||LA163_0==ENDIF||LA163_0==UNDEF||LA163_0==95||(LA163_0>=97 && LA163_0<=98)||(LA163_0>=100 && LA163_0<=101)||LA163_0==105||LA163_0==117||LA163_0==120||LA163_0==122||LA163_0==126||(LA163_0>=132 && LA163_0<=133)||LA163_0==135||LA163_0==141||(LA163_0>=143 && LA163_0<=144)||(LA163_0>=147 && LA163_0<=148)||LA163_0==152||LA163_0==154||LA163_0==157||LA163_0==160||LA163_0==162||LA163_0==167||(LA163_0>=171 && LA163_0<=172)||LA163_0==183||LA163_0==190||LA163_0==194||LA163_0==196))
			{
				int LA163_3 = input.LA(2);

				if ((EvaluatePredicate(synpred25_cs_fragment)))
				{
					alt163 = 1;
				}
				else if ((true))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA163_0==Character_literal||LA163_0==FALSE||LA163_0==Hex_number||(LA163_0>=NULL && LA163_0<=NUMBER)||LA163_0==Real_literal||LA163_0==STRINGLITERAL||LA163_0==TRUE||LA163_0==Verbatim_string_literal) && (EvaluatePredicate(synpred25_cs_fragment)))
			{
				alt163 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 163, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:619:4: ( member_name '{' )=> member_name '{' event_accessor_declarations '}'
				{
				DebugLocation(619, 27);
				PushFollow(Follow._member_name_in_event_declaration4698);
				member_name590=member_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, member_name590.Tree, member_name590, retval);
				DebugLocation(619, 41);
				char_literal591=(IToken)Match(input,197,Follow._197_in_event_declaration4702); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal591_tree = (object)adaptor.Create(char_literal591, retval);
				adaptor.AddChild(root_0, char_literal591_tree);
				}
				DebugLocation(619, 47);
				PushFollow(Follow._event_accessor_declarations_in_event_declaration4706);
				event_accessor_declarations592=event_accessor_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, event_accessor_declarations592.Tree, event_accessor_declarations592, retval);
				DebugLocation(619, 77);
				char_literal593=(IToken)Match(input,201,Follow._201_in_event_declaration4710); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal593_tree = (object)adaptor.Create(char_literal593, retval);
				adaptor.AddChild(root_0, char_literal593_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:620:5: variable_declarators ';'
				{
				DebugLocation(620, 5);
				PushFollow(Follow._variable_declarators_in_event_declaration4716);
				variable_declarators594=variable_declarators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarators594.Tree, variable_declarators594, retval);
				DebugLocation(620, 28);
				char_literal595=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_event_declaration4720), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal595_tree = (object)adaptor.Create(char_literal595, retval);
				adaptor.AddChild(root_0, char_literal595_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(163); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("event_declaration", 172);
			LeaveRule("event_declaration", 172);
			LeaveRule_event_declaration();
			if (state.backtracking > 0) { Memoize(input, 172, event_declaration_StartIndex); }

		}
		DebugLocation(621, 2);
		} finally { DebugExitRule(GrammarFileName, "event_declaration"); }
		return retval;

	}
	// $ANTLR end "event_declaration"

	partial void EnterRule_event_modifiers();
	partial void LeaveRule_event_modifiers();

	// $ANTLR start "event_modifiers"
	// cs.g:622:8: public event_modifiers : ( modifier )+ ;
	[GrammarRule("event_modifiers")]
	public XAstParserRuleReturnScope event_modifiers()
	{
		EnterRule_event_modifiers();
		EnterRule("event_modifiers", 173);
		var retval = new XAstParserRuleReturnScope("event_modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int event_modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope modifier596 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "event_modifiers");
		DebugLocation(622, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 173)) { return retval; }

			// cs.g:622:23: ( ( modifier )+ )
			DebugEnterAlt(1);
			// cs.g:623:2: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(623, 2);
			// cs.g:623:2: ( modifier )+
			int cnt164=0;
			try { DebugEnterSubRule(164);
			while (true)
			{
				int alt164=2;
				try { DebugEnterDecision(164, false);
				int LA164_0 = input.LA(1);

				if ((LA164_0==96||LA164_0==125||LA164_0==140||LA164_0==150||LA164_0==156||LA164_0==161||(LA164_0>=163 && LA164_0<=165)||LA164_0==170||LA164_0==176||LA164_0==188||LA164_0==191||LA164_0==193))
				{
					alt164 = 1;
				}


				} finally { DebugExitDecision(164); }
				switch (alt164)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:623:2: modifier
					{
					DebugLocation(623, 2);
					PushFollow(Follow._modifier_in_event_modifiers4734);
					modifier596=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier596.Tree, modifier596, retval);

					}
					break;

				default:
					if (cnt164 >= 1)
						goto loop164;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee164 = new EarlyExitException( 164, input );
					DebugRecognitionException(eee164);
					throw eee164;
				}
				cnt164++;
			}
			loop164:
				;

			} finally { DebugExitSubRule(164); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("event_modifiers", 173);
			LeaveRule("event_modifiers", 173);
			LeaveRule_event_modifiers();
			if (state.backtracking > 0) { Memoize(input, 173, event_modifiers_StartIndex); }

		}
		DebugLocation(623, 11);
		} finally { DebugExitRule(GrammarFileName, "event_modifiers"); }
		return retval;

	}
	// $ANTLR end "event_modifiers"

	partial void EnterRule_event_accessor_declarations();
	partial void LeaveRule_event_accessor_declarations();

	// $ANTLR start "event_accessor_declarations"
	// cs.g:624:8: public event_accessor_declarations : ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) ;
	[GrammarRule("event_accessor_declarations")]
	public XAstParserRuleReturnScope event_accessor_declarations()
	{
		EnterRule_event_accessor_declarations();
		EnterRule("event_accessor_declarations", 174);
		var retval = new XAstParserRuleReturnScope("event_accessor_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int event_accessor_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes597 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope add_accessor_declaration598 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes599 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope remove_accessor_declaration600 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope remove_accessor_declaration601 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes602 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope add_accessor_declaration603 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "event_accessor_declarations");
		DebugLocation(624, 89);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 174)) { return retval; }

			// cs.g:624:35: ( ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) )
			DebugEnterAlt(1);
			// cs.g:625:2: ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(625, 2);
			// cs.g:625:2: ( attributes )?
			int alt165=2;
			try { DebugEnterSubRule(165);
			try { DebugEnterDecision(165, false);
			int LA165_0 = input.LA(1);

			if ((LA165_0==91))
			{
				alt165 = 1;
			}
			} finally { DebugExitDecision(165); }
			switch (alt165)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:625:2: attributes
				{
				DebugLocation(625, 2);
				PushFollow(Follow._attributes_in_event_accessor_declarations4745);
				attributes597=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes597.Tree, attributes597, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(165); }

			DebugLocation(625, 16);
			// cs.g:625:16: ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
			int alt168=2;
			try { DebugEnterSubRule(168);
			try { DebugEnterDecision(168, false);
			int LA168_0 = input.LA(1);

			if ((LA168_0==97))
			{
				alt168 = 1;
			}
			else if ((LA168_0==167))
			{
				alt168 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 168, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:625:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
				{
				DebugLocation(625, 17);
				// cs.g:625:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
				DebugEnterAlt(1);
				// cs.g:625:18: add_accessor_declaration ( attributes )? remove_accessor_declaration
				{
				DebugLocation(625, 18);
				PushFollow(Follow._add_accessor_declaration_in_event_accessor_declarations4752);
				add_accessor_declaration598=add_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, add_accessor_declaration598.Tree, add_accessor_declaration598, retval);
				DebugLocation(625, 45);
				// cs.g:625:45: ( attributes )?
				int alt166=2;
				try { DebugEnterSubRule(166);
				try { DebugEnterDecision(166, false);
				int LA166_0 = input.LA(1);

				if ((LA166_0==91))
				{
					alt166 = 1;
				}
				} finally { DebugExitDecision(166); }
				switch (alt166)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:625:45: attributes
					{
					DebugLocation(625, 45);
					PushFollow(Follow._attributes_in_event_accessor_declarations4756);
					attributes599=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes599.Tree, attributes599, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(166); }

				DebugLocation(625, 59);
				PushFollow(Follow._remove_accessor_declaration_in_event_accessor_declarations4761);
				remove_accessor_declaration600=remove_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, remove_accessor_declaration600.Tree, remove_accessor_declaration600, retval);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:626:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
				{
				DebugLocation(626, 18);
				// cs.g:626:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
				DebugEnterAlt(1);
				// cs.g:626:19: remove_accessor_declaration ( attributes )? add_accessor_declaration
				{
				DebugLocation(626, 19);
				PushFollow(Follow._remove_accessor_declaration_in_event_accessor_declarations4782);
				remove_accessor_declaration601=remove_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, remove_accessor_declaration601.Tree, remove_accessor_declaration601, retval);
				DebugLocation(626, 49);
				// cs.g:626:49: ( attributes )?
				int alt167=2;
				try { DebugEnterSubRule(167);
				try { DebugEnterDecision(167, false);
				int LA167_0 = input.LA(1);

				if ((LA167_0==91))
				{
					alt167 = 1;
				}
				} finally { DebugExitDecision(167); }
				switch (alt167)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:626:49: attributes
					{
					DebugLocation(626, 49);
					PushFollow(Follow._attributes_in_event_accessor_declarations4786);
					attributes602=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes602.Tree, attributes602, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(167); }

				DebugLocation(626, 63);
				PushFollow(Follow._add_accessor_declaration_in_event_accessor_declarations4791);
				add_accessor_declaration603=add_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, add_accessor_declaration603.Tree, add_accessor_declaration603, retval);

				}


				}
				break;

			}
			} finally { DebugExitSubRule(168); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("event_accessor_declarations", 174);
			LeaveRule("event_accessor_declarations", 174);
			LeaveRule_event_accessor_declarations();
			if (state.backtracking > 0) { Memoize(input, 174, event_accessor_declarations_StartIndex); }

		}
		DebugLocation(626, 89);
		} finally { DebugExitRule(GrammarFileName, "event_accessor_declarations"); }
		return retval;

	}
	// $ANTLR end "event_accessor_declarations"

	partial void EnterRule_add_accessor_declaration();
	partial void LeaveRule_add_accessor_declaration();

	// $ANTLR start "add_accessor_declaration"
	// cs.g:627:8: public add_accessor_declaration : 'add' block ;
	[GrammarRule("add_accessor_declaration")]
	public XAstParserRuleReturnScope add_accessor_declaration()
	{
		EnterRule_add_accessor_declaration();
		EnterRule("add_accessor_declaration", 175);
		var retval = new XAstParserRuleReturnScope("add_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int add_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal604 = default(IToken);
		XAstParserRuleReturnScope block605 = default(XAstParserRuleReturnScope);

		object string_literal604_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "add_accessor_declaration");
		DebugLocation(627, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 175)) { return retval; }

			// cs.g:627:32: ( 'add' block )
			DebugEnterAlt(1);
			// cs.g:628:2: 'add' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(628, 2);
			string_literal604=(IToken)Match(input,97,Follow._97_in_add_accessor_declaration4803); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal604_tree = (object)adaptor.Create(string_literal604, retval);
			adaptor.AddChild(root_0, string_literal604_tree);
			}
			DebugLocation(628, 10);
			PushFollow(Follow._block_in_add_accessor_declaration4807);
			block605=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block605.Tree, block605, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_accessor_declaration", 175);
			LeaveRule("add_accessor_declaration", 175);
			LeaveRule_add_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 175, add_accessor_declaration_StartIndex); }

		}
		DebugLocation(628, 15);
		} finally { DebugExitRule(GrammarFileName, "add_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "add_accessor_declaration"

	partial void EnterRule_remove_accessor_declaration();
	partial void LeaveRule_remove_accessor_declaration();

	// $ANTLR start "remove_accessor_declaration"
	// cs.g:629:8: public remove_accessor_declaration : 'remove' block ;
	[GrammarRule("remove_accessor_declaration")]
	public XAstParserRuleReturnScope remove_accessor_declaration()
	{
		EnterRule_remove_accessor_declaration();
		EnterRule("remove_accessor_declaration", 176);
		var retval = new XAstParserRuleReturnScope("remove_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int remove_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal606 = default(IToken);
		XAstParserRuleReturnScope block607 = default(XAstParserRuleReturnScope);

		object string_literal606_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "remove_accessor_declaration");
		DebugLocation(629, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 176)) { return retval; }

			// cs.g:629:35: ( 'remove' block )
			DebugEnterAlt(1);
			// cs.g:630:2: 'remove' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(630, 2);
			string_literal606=(IToken)Match(input,167,Follow._167_in_remove_accessor_declaration4817); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal606_tree = (object)adaptor.Create(string_literal606, retval);
			adaptor.AddChild(root_0, string_literal606_tree);
			}
			DebugLocation(630, 13);
			PushFollow(Follow._block_in_remove_accessor_declaration4821);
			block607=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block607.Tree, block607, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("remove_accessor_declaration", 176);
			LeaveRule("remove_accessor_declaration", 176);
			LeaveRule_remove_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 176, remove_accessor_declaration_StartIndex); }

		}
		DebugLocation(630, 18);
		} finally { DebugExitRule(GrammarFileName, "remove_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "remove_accessor_declaration"

	partial void EnterRule_enum_declaration();
	partial void LeaveRule_enum_declaration();

	// $ANTLR start "enum_declaration"
	// cs.g:635:8: public enum_declaration : 'enum' identifier ( enum_base )? enum_body ( ';' )? ;
	[GrammarRule("enum_declaration")]
	public XAstParserRuleReturnScope enum_declaration()
	{
		EnterRule_enum_declaration();
		EnterRule("enum_declaration", 177);
		var retval = new XAstParserRuleReturnScope("enum_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int enum_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal608 = default(IToken);
		IToken char_literal612 = default(IToken);
		XAstParserRuleReturnScope identifier609 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_base610 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_body611 = default(XAstParserRuleReturnScope);

		object string_literal608_tree = default(object);
		object char_literal612_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_declaration");
		DebugLocation(635, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 177)) { return retval; }

			// cs.g:635:24: ( 'enum' identifier ( enum_base )? enum_body ( ';' )? )
			DebugEnterAlt(1);
			// cs.g:636:2: 'enum' identifier ( enum_base )? enum_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(636, 2);
			string_literal608=(IToken)new XToken((IToken)Match(input,ENUM,Follow._ENUM_in_enum_declaration4835), "ENUM"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal608_tree = (object)adaptor.Create(string_literal608, retval);
			adaptor.AddChild(root_0, string_literal608_tree);
			}
			DebugLocation(636, 11);
			PushFollow(Follow._identifier_in_enum_declaration4839);
			identifier609=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier609.Tree, identifier609, retval);
			DebugLocation(636, 24);
			// cs.g:636:24: ( enum_base )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, false);
			int LA169_0 = input.LA(1);

			if ((LA169_0==79))
			{
				alt169 = 1;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:636:24: enum_base
				{
				DebugLocation(636, 24);
				PushFollow(Follow._enum_base_in_enum_declaration4843);
				enum_base610=enum_base();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_base610.Tree, enum_base610, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(169); }

			DebugLocation(636, 37);
			PushFollow(Follow._enum_body_in_enum_declaration4848);
			enum_body611=enum_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enum_body611.Tree, enum_body611, retval);
			DebugLocation(636, 49);
			// cs.g:636:49: ( ';' )?
			int alt170=2;
			try { DebugEnterSubRule(170);
			try { DebugEnterDecision(170, false);
			int LA170_0 = input.LA(1);

			if ((LA170_0==SEMI))
			{
				alt170 = 1;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:636:49: ';'
				{
				DebugLocation(636, 49);
				char_literal612=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_enum_declaration4852), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal612_tree = (object)adaptor.Create(char_literal612, retval);
				adaptor.AddChild(root_0, char_literal612_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(170); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_declaration", 177);
			LeaveRule("enum_declaration", 177);
			LeaveRule_enum_declaration();
			if (state.backtracking > 0) { Memoize(input, 177, enum_declaration_StartIndex); }

		}
		DebugLocation(636, 53);
		} finally { DebugExitRule(GrammarFileName, "enum_declaration"); }
		return retval;

	}
	// $ANTLR end "enum_declaration"

	partial void EnterRule_enum_base();
	partial void LeaveRule_enum_base();

	// $ANTLR start "enum_base"
	// cs.g:637:8: public enum_base : ':' integral_type ;
	[GrammarRule("enum_base")]
	public XAstParserRuleReturnScope enum_base()
	{
		EnterRule_enum_base();
		EnterRule("enum_base", 178);
		var retval = new XAstParserRuleReturnScope("enum_base");
		
		retval.Start = (IToken)input.LT(1);
		int enum_base_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal613 = default(IToken);
		XAstParserRuleReturnScope integral_type614 = default(XAstParserRuleReturnScope);

		object char_literal613_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_base");
		DebugLocation(637, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 178)) { return retval; }

			// cs.g:637:17: ( ':' integral_type )
			DebugEnterAlt(1);
			// cs.g:638:2: ':' integral_type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(638, 2);
			char_literal613=(IToken)Match(input,79,Follow._79_in_enum_base4863); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal613_tree = (object)adaptor.Create(char_literal613, retval);
			adaptor.AddChild(root_0, char_literal613_tree);
			}
			DebugLocation(638, 8);
			PushFollow(Follow._integral_type_in_enum_base4867);
			integral_type614=integral_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, integral_type614.Tree, integral_type614, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_base", 178);
			LeaveRule("enum_base", 178);
			LeaveRule_enum_base();
			if (state.backtracking > 0) { Memoize(input, 178, enum_base_StartIndex); }

		}
		DebugLocation(638, 21);
		} finally { DebugExitRule(GrammarFileName, "enum_base"); }
		return retval;

	}
	// $ANTLR end "enum_base"

	partial void EnterRule_enum_body();
	partial void LeaveRule_enum_body();

	// $ANTLR start "enum_body"
	// cs.g:639:8: public enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' ;
	[GrammarRule("enum_body")]
	public XAstParserRuleReturnScope enum_body()
	{
		EnterRule_enum_body();
		EnterRule("enum_body", 179);
		var retval = new XAstParserRuleReturnScope("enum_body");
		
		retval.Start = (IToken)input.LT(1);
		int enum_body_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal615 = default(IToken);
		IToken char_literal617 = default(IToken);
		IToken char_literal618 = default(IToken);
		XAstParserRuleReturnScope enum_member_declarations616 = default(XAstParserRuleReturnScope);

		object char_literal615_tree = default(object);
		object char_literal617_tree = default(object);
		object char_literal618_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_body");
		DebugLocation(639, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 179)) { return retval; }

			// cs.g:639:17: ( '{' ( enum_member_declarations ( ',' )? )? '}' )
			DebugEnterAlt(1);
			// cs.g:640:2: '{' ( enum_member_declarations ( ',' )? )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(640, 2);
			char_literal615=(IToken)Match(input,197,Follow._197_in_enum_body4877); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal615_tree = (object)adaptor.Create(char_literal615, retval);
			adaptor.AddChild(root_0, char_literal615_tree);
			}
			DebugLocation(640, 6);
			// cs.g:640:6: ( enum_member_declarations ( ',' )? )?
			int alt172=2;
			try { DebugEnterSubRule(172);
			try { DebugEnterDecision(172, false);
			int LA172_0 = input.LA(1);

			if ((LA172_0==DEFINE||LA172_0==ELIF||LA172_0==ENDIF||LA172_0==IDENTIFIER||LA172_0==UNDEF||LA172_0==91||LA172_0==95||(LA172_0>=97 && LA172_0<=98)||(LA172_0>=100 && LA172_0<=101)||LA172_0==105||LA172_0==117||LA172_0==120||LA172_0==122||LA172_0==126||(LA172_0>=132 && LA172_0<=133)||LA172_0==135||LA172_0==141||(LA172_0>=143 && LA172_0<=144)||(LA172_0>=147 && LA172_0<=148)||LA172_0==152||LA172_0==154||LA172_0==157||LA172_0==160||LA172_0==162||LA172_0==167||(LA172_0>=171 && LA172_0<=172)||LA172_0==183||LA172_0==190||LA172_0==194||LA172_0==196))
			{
				alt172 = 1;
			}
			} finally { DebugExitDecision(172); }
			switch (alt172)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:640:7: enum_member_declarations ( ',' )?
				{
				DebugLocation(640, 7);
				PushFollow(Follow._enum_member_declarations_in_enum_body4880);
				enum_member_declarations616=enum_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_member_declarations616.Tree, enum_member_declarations616, retval);
				DebugLocation(640, 32);
				// cs.g:640:32: ( ',' )?
				int alt171=2;
				try { DebugEnterSubRule(171);
				try { DebugEnterDecision(171, false);
				int LA171_0 = input.LA(1);

				if ((LA171_0==74))
				{
					alt171 = 1;
				}
				} finally { DebugExitDecision(171); }
				switch (alt171)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:640:32: ','
					{
					DebugLocation(640, 32);
					char_literal617=(IToken)Match(input,74,Follow._74_in_enum_body4882); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal617_tree = (object)adaptor.Create(char_literal617, retval);
					adaptor.AddChild(root_0, char_literal617_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(171); }


				}
				break;

			}
			} finally { DebugExitSubRule(172); }

			DebugLocation(640, 41);
			char_literal618=(IToken)Match(input,201,Follow._201_in_enum_body4889); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal618_tree = (object)adaptor.Create(char_literal618, retval);
			adaptor.AddChild(root_0, char_literal618_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_body", 179);
			LeaveRule("enum_body", 179);
			LeaveRule_enum_body();
			if (state.backtracking > 0) { Memoize(input, 179, enum_body_StartIndex); }

		}
		DebugLocation(640, 44);
		} finally { DebugExitRule(GrammarFileName, "enum_body"); }
		return retval;

	}
	// $ANTLR end "enum_body"

	partial void EnterRule_enum_member_declarations();
	partial void LeaveRule_enum_member_declarations();

	// $ANTLR start "enum_member_declarations"
	// cs.g:641:8: public enum_member_declarations : enum_member_declaration ( ',' enum_member_declaration )* ;
	[GrammarRule("enum_member_declarations")]
	public XAstParserRuleReturnScope enum_member_declarations()
	{
		EnterRule_enum_member_declarations();
		EnterRule("enum_member_declarations", 180);
		var retval = new XAstParserRuleReturnScope("enum_member_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int enum_member_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal620 = default(IToken);
		XAstParserRuleReturnScope enum_member_declaration619 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_member_declaration621 = default(XAstParserRuleReturnScope);

		object char_literal620_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_member_declarations");
		DebugLocation(641, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 180)) { return retval; }

			// cs.g:641:32: ( enum_member_declaration ( ',' enum_member_declaration )* )
			DebugEnterAlt(1);
			// cs.g:642:2: enum_member_declaration ( ',' enum_member_declaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(642, 2);
			PushFollow(Follow._enum_member_declaration_in_enum_member_declarations4899);
			enum_member_declaration619=enum_member_declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enum_member_declaration619.Tree, enum_member_declaration619, retval);
			DebugLocation(642, 26);
			// cs.g:642:26: ( ',' enum_member_declaration )*
			try { DebugEnterSubRule(173);
			while (true)
			{
				int alt173=2;
				try { DebugEnterDecision(173, false);
				int LA173_0 = input.LA(1);

				if ((LA173_0==74))
				{
					int LA173_1 = input.LA(2);

					if ((LA173_1==DEFINE||LA173_1==ELIF||LA173_1==ENDIF||LA173_1==IDENTIFIER||LA173_1==UNDEF||LA173_1==91||LA173_1==95||(LA173_1>=97 && LA173_1<=98)||(LA173_1>=100 && LA173_1<=101)||LA173_1==105||LA173_1==117||LA173_1==120||LA173_1==122||LA173_1==126||(LA173_1>=132 && LA173_1<=133)||LA173_1==135||LA173_1==141||(LA173_1>=143 && LA173_1<=144)||(LA173_1>=147 && LA173_1<=148)||LA173_1==152||LA173_1==154||LA173_1==157||LA173_1==160||LA173_1==162||LA173_1==167||(LA173_1>=171 && LA173_1<=172)||LA173_1==183||LA173_1==190||LA173_1==194||LA173_1==196))
					{
						alt173 = 1;
					}


				}


				} finally { DebugExitDecision(173); }
				switch ( alt173 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:642:27: ',' enum_member_declaration
					{
					DebugLocation(642, 27);
					char_literal620=(IToken)Match(input,74,Follow._74_in_enum_member_declarations4902); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal620_tree = (object)adaptor.Create(char_literal620, retval);
					adaptor.AddChild(root_0, char_literal620_tree);
					}
					DebugLocation(642, 31);
					PushFollow(Follow._enum_member_declaration_in_enum_member_declarations4904);
					enum_member_declaration621=enum_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enum_member_declaration621.Tree, enum_member_declaration621, retval);

					}
					break;

				default:
					goto loop173;
				}
			}

			loop173:
				;

			} finally { DebugExitSubRule(173); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_member_declarations", 180);
			LeaveRule("enum_member_declarations", 180);
			LeaveRule_enum_member_declarations();
			if (state.backtracking > 0) { Memoize(input, 180, enum_member_declarations_StartIndex); }

		}
		DebugLocation(642, 56);
		} finally { DebugExitRule(GrammarFileName, "enum_member_declarations"); }
		return retval;

	}
	// $ANTLR end "enum_member_declarations"

	partial void EnterRule_enum_member_declaration();
	partial void LeaveRule_enum_member_declaration();

	// $ANTLR start "enum_member_declaration"
	// cs.g:643:8: public enum_member_declaration : ( attributes )? identifier ( '=' expression )? ;
	[GrammarRule("enum_member_declaration")]
	public XAstParserRuleReturnScope enum_member_declaration()
	{
		EnterRule_enum_member_declaration();
		EnterRule("enum_member_declaration", 181);
		var retval = new XAstParserRuleReturnScope("enum_member_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int enum_member_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal624 = default(IToken);
		XAstParserRuleReturnScope attributes622 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier623 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression625 = default(XAstParserRuleReturnScope);

		object char_literal624_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_member_declaration");
		DebugLocation(643, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 181)) { return retval; }

			// cs.g:643:31: ( ( attributes )? identifier ( '=' expression )? )
			DebugEnterAlt(1);
			// cs.g:644:2: ( attributes )? identifier ( '=' expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(644, 2);
			// cs.g:644:2: ( attributes )?
			int alt174=2;
			try { DebugEnterSubRule(174);
			try { DebugEnterDecision(174, false);
			int LA174_0 = input.LA(1);

			if ((LA174_0==91))
			{
				alt174 = 1;
			}
			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:644:2: attributes
				{
				DebugLocation(644, 2);
				PushFollow(Follow._attributes_in_enum_member_declaration4916);
				attributes622=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes622.Tree, attributes622, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(174); }

			DebugLocation(644, 16);
			PushFollow(Follow._identifier_in_enum_member_declaration4921);
			identifier623=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier623.Tree, identifier623, retval);
			DebugLocation(644, 29);
			// cs.g:644:29: ( '=' expression )?
			int alt175=2;
			try { DebugEnterSubRule(175);
			try { DebugEnterDecision(175, false);
			int LA175_0 = input.LA(1);

			if ((LA175_0==85))
			{
				alt175 = 1;
			}
			} finally { DebugExitDecision(175); }
			switch (alt175)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:644:30: '=' expression
				{
				DebugLocation(644, 30);
				char_literal624=(IToken)Match(input,85,Follow._85_in_enum_member_declaration4926); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal624_tree = (object)adaptor.Create(char_literal624, retval);
				adaptor.AddChild(root_0, char_literal624_tree);
				}
				DebugLocation(644, 36);
				PushFollow(Follow._expression_in_enum_member_declaration4930);
				expression625=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression625.Tree, expression625, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(175); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_member_declaration", 181);
			LeaveRule("enum_member_declaration", 181);
			LeaveRule_enum_member_declaration();
			if (state.backtracking > 0) { Memoize(input, 181, enum_member_declaration_StartIndex); }

		}
		DebugLocation(644, 48);
		} finally { DebugExitRule(GrammarFileName, "enum_member_declaration"); }
		return retval;

	}
	// $ANTLR end "enum_member_declaration"

	partial void EnterRule_integral_type();
	partial void LeaveRule_integral_type();

	// $ANTLR start "integral_type"
	// cs.g:649:8: public integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
	[GrammarRule("integral_type")]
	public XAstParserRuleReturnScope integral_type()
	{
		EnterRule_integral_type();
		EnterRule("integral_type", 182);
		var retval = new XAstParserRuleReturnScope("integral_type");
		
		retval.Start = (IToken)input.LT(1);
		int integral_type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set626 = default(IToken);

		object set626_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "integral_type");
		DebugLocation(649, 84);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 182)) { return retval; }

			// cs.g:649:21: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(649, 21);

			set626=(IToken)input.LT(1);
			if (input.LA(1)==106||input.LA(1)==109||input.LA(1)==138||input.LA(1)==146||input.LA(1)==169||input.LA(1)==173||(input.LA(1)>=185 && input.LA(1)<=186)||input.LA(1)==189)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set626, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("integral_type", 182);
			LeaveRule("integral_type", 182);
			LeaveRule_integral_type();
			if (state.backtracking > 0) { Memoize(input, 182, integral_type_StartIndex); }

		}
		DebugLocation(650, 84);
		} finally { DebugExitRule(GrammarFileName, "integral_type"); }
		return retval;

	}
	// $ANTLR end "integral_type"

	partial void EnterRule_delegate_declaration();
	partial void LeaveRule_delegate_declaration();

	// $ANTLR start "delegate_declaration"
	// cs.g:653:8: public delegate_declaration : 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
	[GrammarRule("delegate_declaration")]
	public XAstParserRuleReturnScope delegate_declaration()
	{
		EnterRule_delegate_declaration();
		EnterRule("delegate_declaration", 183);
		var retval = new XAstParserRuleReturnScope("delegate_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int delegate_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal627 = default(IToken);
		IToken char_literal631 = default(IToken);
		IToken char_literal633 = default(IToken);
		IToken char_literal635 = default(IToken);
		XAstParserRuleReturnScope return_type628 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier629 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variant_generic_parameter_list630 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope formal_parameter_list632 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses634 = default(XAstParserRuleReturnScope);

		object string_literal627_tree = default(object);
		object char_literal631_tree = default(object);
		object char_literal633_tree = default(object);
		object char_literal635_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "delegate_declaration");
		DebugLocation(653, 81);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 183)) { return retval; }

			// cs.g:653:28: ( 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
			DebugEnterAlt(1);
			// cs.g:654:2: 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(654, 2);
			string_literal627=(IToken)Match(input,116,Follow._116_in_delegate_declaration4991); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal627_tree = (object)adaptor.Create(string_literal627, retval);
			adaptor.AddChild(root_0, string_literal627_tree);
			}
			DebugLocation(654, 15);
			PushFollow(Follow._return_type_in_delegate_declaration4995);
			return_type628=return_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, return_type628.Tree, return_type628, retval);
			DebugLocation(654, 29);
			PushFollow(Follow._identifier_in_delegate_declaration4999);
			identifier629=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier629.Tree, identifier629, retval);
			DebugLocation(654, 41);
			// cs.g:654:41: ( variant_generic_parameter_list )?
			int alt176=2;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			int LA176_0 = input.LA(1);

			if ((LA176_0==81))
			{
				alt176 = 1;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:654:41: variant_generic_parameter_list
				{
				DebugLocation(654, 41);
				PushFollow(Follow._variant_generic_parameter_list_in_delegate_declaration5002);
				variant_generic_parameter_list630=variant_generic_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variant_generic_parameter_list630.Tree, variant_generic_parameter_list630, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(176); }

			DebugLocation(655, 3);
			char_literal631=(IToken)Match(input,68,Follow._68_in_delegate_declaration5010); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal631_tree = (object)adaptor.Create(char_literal631, retval);
			adaptor.AddChild(root_0, char_literal631_tree);
			}
			DebugLocation(655, 9);
			// cs.g:655:9: ( formal_parameter_list )?
			int alt177=2;
			try { DebugEnterSubRule(177);
			try { DebugEnterDecision(177, false);
			int LA177_0 = input.LA(1);

			if ((LA177_0==DEFINE||LA177_0==ELIF||LA177_0==ENDIF||LA177_0==IDENTIFIER||LA177_0==UNDEF||LA177_0==91||LA177_0==95||(LA177_0>=97 && LA177_0<=98)||(LA177_0>=100 && LA177_0<=101)||LA177_0==103||(LA177_0>=105 && LA177_0<=106)||LA177_0==109||LA177_0==114||LA177_0==117||(LA177_0>=119 && LA177_0<=120)||LA177_0==122||LA177_0==126||LA177_0==129||(LA177_0>=132 && LA177_0<=133)||LA177_0==135||LA177_0==138||LA177_0==141||(LA177_0>=143 && LA177_0<=144)||(LA177_0>=146 && LA177_0<=148)||(LA177_0>=151 && LA177_0<=152)||(LA177_0>=154 && LA177_0<=155)||(LA177_0>=157 && LA177_0<=158)||LA177_0==160||LA177_0==162||(LA177_0>=166 && LA177_0<=167)||LA177_0==169||(LA177_0>=171 && LA177_0<=173)||LA177_0==177||LA177_0==180||LA177_0==183||(LA177_0>=185 && LA177_0<=186)||(LA177_0>=189 && LA177_0<=190)||LA177_0==192||LA177_0==194||LA177_0==196))
			{
				alt177 = 1;
			}
			} finally { DebugExitDecision(177); }
			switch (alt177)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:655:9: formal_parameter_list
				{
				DebugLocation(655, 9);
				PushFollow(Follow._formal_parameter_list_in_delegate_declaration5014);
				formal_parameter_list632=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list632.Tree, formal_parameter_list632, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(177); }

			DebugLocation(655, 34);
			char_literal633=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_delegate_declaration5019), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal633_tree = (object)adaptor.Create(char_literal633, retval);
			adaptor.AddChild(root_0, char_literal633_tree);
			}
			DebugLocation(655, 40);
			// cs.g:655:40: ( type_parameter_constraints_clauses )?
			int alt178=2;
			try { DebugEnterSubRule(178);
			try { DebugEnterDecision(178, false);
			int LA178_0 = input.LA(1);

			if ((LA178_0==194))
			{
				alt178 = 1;
			}
			} finally { DebugExitDecision(178); }
			switch (alt178)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:655:40: type_parameter_constraints_clauses
				{
				DebugLocation(655, 40);
				PushFollow(Follow._type_parameter_constraints_clauses_in_delegate_declaration5023);
				type_parameter_constraints_clauses634=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses634.Tree, type_parameter_constraints_clauses634, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(178); }

			DebugLocation(655, 78);
			char_literal635=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_delegate_declaration5028), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal635_tree = (object)adaptor.Create(char_literal635, retval);
			adaptor.AddChild(root_0, char_literal635_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_declaration", 183);
			LeaveRule("delegate_declaration", 183);
			LeaveRule_delegate_declaration();
			if (state.backtracking > 0) { Memoize(input, 183, delegate_declaration_StartIndex); }

		}
		DebugLocation(655, 81);
		} finally { DebugExitRule(GrammarFileName, "delegate_declaration"); }
		return retval;

	}
	// $ANTLR end "delegate_declaration"

	partial void EnterRule_delegate_modifiers();
	partial void LeaveRule_delegate_modifiers();

	// $ANTLR start "delegate_modifiers"
	// cs.g:656:8: public delegate_modifiers : ( modifier )+ ;
	[GrammarRule("delegate_modifiers")]
	public XAstParserRuleReturnScope delegate_modifiers()
	{
		EnterRule_delegate_modifiers();
		EnterRule("delegate_modifiers", 184);
		var retval = new XAstParserRuleReturnScope("delegate_modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int delegate_modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope modifier636 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "delegate_modifiers");
		DebugLocation(656, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 184)) { return retval; }

			// cs.g:656:26: ( ( modifier )+ )
			DebugEnterAlt(1);
			// cs.g:657:2: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(657, 2);
			// cs.g:657:2: ( modifier )+
			int cnt179=0;
			try { DebugEnterSubRule(179);
			while (true)
			{
				int alt179=2;
				try { DebugEnterDecision(179, false);
				int LA179_0 = input.LA(1);

				if ((LA179_0==96||LA179_0==125||LA179_0==140||LA179_0==150||LA179_0==156||LA179_0==161||(LA179_0>=163 && LA179_0<=165)||LA179_0==170||LA179_0==176||LA179_0==188||LA179_0==191||LA179_0==193))
				{
					alt179 = 1;
				}


				} finally { DebugExitDecision(179); }
				switch (alt179)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:657:2: modifier
					{
					DebugLocation(657, 2);
					PushFollow(Follow._modifier_in_delegate_modifiers5038);
					modifier636=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier636.Tree, modifier636, retval);

					}
					break;

				default:
					if (cnt179 >= 1)
						goto loop179;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee179 = new EarlyExitException( 179, input );
					DebugRecognitionException(eee179);
					throw eee179;
				}
				cnt179++;
			}
			loop179:
				;

			} finally { DebugExitSubRule(179); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_modifiers", 184);
			LeaveRule("delegate_modifiers", 184);
			LeaveRule_delegate_modifiers();
			if (state.backtracking > 0) { Memoize(input, 184, delegate_modifiers_StartIndex); }

		}
		DebugLocation(657, 11);
		} finally { DebugExitRule(GrammarFileName, "delegate_modifiers"); }
		return retval;

	}
	// $ANTLR end "delegate_modifiers"

	partial void EnterRule_variant_generic_parameter_list();
	partial void LeaveRule_variant_generic_parameter_list();

	// $ANTLR start "variant_generic_parameter_list"
	// cs.g:659:8: public variant_generic_parameter_list : '<' variant_type_parameters '>' ;
	[GrammarRule("variant_generic_parameter_list")]
	public XAstParserRuleReturnScope variant_generic_parameter_list()
	{
		EnterRule_variant_generic_parameter_list();
		EnterRule("variant_generic_parameter_list", 185);
		var retval = new XAstParserRuleReturnScope("variant_generic_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int variant_generic_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal637 = default(IToken);
		IToken char_literal639 = default(IToken);
		XAstParserRuleReturnScope variant_type_parameters638 = default(XAstParserRuleReturnScope);

		object char_literal637_tree = default(object);
		object char_literal639_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variant_generic_parameter_list");
		DebugLocation(659, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 185)) { return retval; }

			// cs.g:659:38: ( '<' variant_type_parameters '>' )
			DebugEnterAlt(1);
			// cs.g:660:2: '<' variant_type_parameters '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(660, 2);
			char_literal637=(IToken)Match(input,81,Follow._81_in_variant_generic_parameter_list5050); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal637_tree = (object)adaptor.Create(char_literal637, retval);
			adaptor.AddChild(root_0, char_literal637_tree);
			}
			DebugLocation(660, 8);
			PushFollow(Follow._variant_type_parameters_in_variant_generic_parameter_list5054);
			variant_type_parameters638=variant_type_parameters();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variant_type_parameters638.Tree, variant_type_parameters638, retval);
			DebugLocation(660, 34);
			char_literal639=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_variant_generic_parameter_list5058), "GT"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal639_tree = (object)adaptor.Create(char_literal639, retval);
			adaptor.AddChild(root_0, char_literal639_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variant_generic_parameter_list", 185);
			LeaveRule("variant_generic_parameter_list", 185);
			LeaveRule_variant_generic_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 185, variant_generic_parameter_list_StartIndex); }

		}
		DebugLocation(660, 37);
		} finally { DebugExitRule(GrammarFileName, "variant_generic_parameter_list"); }
		return retval;

	}
	// $ANTLR end "variant_generic_parameter_list"

	partial void EnterRule_variant_type_parameters();
	partial void LeaveRule_variant_type_parameters();

	// $ANTLR start "variant_type_parameters"
	// cs.g:661:8: public variant_type_parameters : variant_type_variable_name ( ',' variant_type_variable_name )* ;
	[GrammarRule("variant_type_parameters")]
	public XAstParserRuleReturnScope variant_type_parameters()
	{
		EnterRule_variant_type_parameters();
		EnterRule("variant_type_parameters", 186);
		var retval = new XAstParserRuleReturnScope("variant_type_parameters");
		
		retval.Start = (IToken)input.LT(1);
		int variant_type_parameters_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal641 = default(IToken);
		XAstParserRuleReturnScope variant_type_variable_name640 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variant_type_variable_name642 = default(XAstParserRuleReturnScope);

		object char_literal641_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variant_type_parameters");
		DebugLocation(661, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 186)) { return retval; }

			// cs.g:661:31: ( variant_type_variable_name ( ',' variant_type_variable_name )* )
			DebugEnterAlt(1);
			// cs.g:662:2: variant_type_variable_name ( ',' variant_type_variable_name )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(662, 2);
			PushFollow(Follow._variant_type_variable_name_in_variant_type_parameters5068);
			variant_type_variable_name640=variant_type_variable_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variant_type_variable_name640.Tree, variant_type_variable_name640, retval);
			DebugLocation(662, 29);
			// cs.g:662:29: ( ',' variant_type_variable_name )*
			try { DebugEnterSubRule(180);
			while (true)
			{
				int alt180=2;
				try { DebugEnterDecision(180, false);
				int LA180_0 = input.LA(1);

				if ((LA180_0==74))
				{
					alt180 = 1;
				}


				} finally { DebugExitDecision(180); }
				switch ( alt180 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:662:30: ',' variant_type_variable_name
					{
					DebugLocation(662, 30);
					char_literal641=(IToken)Match(input,74,Follow._74_in_variant_type_parameters5071); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal641_tree = (object)adaptor.Create(char_literal641, retval);
					adaptor.AddChild(root_0, char_literal641_tree);
					}
					DebugLocation(662, 34);
					PushFollow(Follow._variant_type_variable_name_in_variant_type_parameters5073);
					variant_type_variable_name642=variant_type_variable_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variant_type_variable_name642.Tree, variant_type_variable_name642, retval);

					}
					break;

				default:
					goto loop180;
				}
			}

			loop180:
				;

			} finally { DebugExitSubRule(180); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variant_type_parameters", 186);
			LeaveRule("variant_type_parameters", 186);
			LeaveRule_variant_type_parameters();
			if (state.backtracking > 0) { Memoize(input, 186, variant_type_parameters_StartIndex); }

		}
		DebugLocation(662, 62);
		} finally { DebugExitRule(GrammarFileName, "variant_type_parameters"); }
		return retval;

	}
	// $ANTLR end "variant_type_parameters"

	partial void EnterRule_variant_type_variable_name();
	partial void LeaveRule_variant_type_variable_name();

	// $ANTLR start "variant_type_variable_name"
	// cs.g:663:8: public variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
	[GrammarRule("variant_type_variable_name")]
	public XAstParserRuleReturnScope variant_type_variable_name()
	{
		EnterRule_variant_type_variable_name();
		EnterRule("variant_type_variable_name", 187);
		var retval = new XAstParserRuleReturnScope("variant_type_variable_name");
		
		retval.Start = (IToken)input.LT(1);
		int variant_type_variable_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes643 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variance_annotation644 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_variable_name645 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "variant_type_variable_name");
		DebugLocation(663, 57);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 187)) { return retval; }

			// cs.g:663:34: ( ( attributes )? ( variance_annotation )? type_variable_name )
			DebugEnterAlt(1);
			// cs.g:664:2: ( attributes )? ( variance_annotation )? type_variable_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(664, 2);
			// cs.g:664:2: ( attributes )?
			int alt181=2;
			try { DebugEnterSubRule(181);
			try { DebugEnterDecision(181, false);
			int LA181_0 = input.LA(1);

			if ((LA181_0==91))
			{
				alt181 = 1;
			}
			} finally { DebugExitDecision(181); }
			switch (alt181)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:664:2: attributes
				{
				DebugLocation(664, 2);
				PushFollow(Follow._attributes_in_variant_type_variable_name5085);
				attributes643=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes643.Tree, attributes643, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(181); }

			DebugLocation(664, 16);
			// cs.g:664:16: ( variance_annotation )?
			int alt182=2;
			try { DebugEnterSubRule(182);
			try { DebugEnterDecision(182, false);
			int LA182_0 = input.LA(1);

			if ((LA182_0==137||LA182_0==155))
			{
				alt182 = 1;
			}
			} finally { DebugExitDecision(182); }
			switch (alt182)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:664:16: variance_annotation
				{
				DebugLocation(664, 16);
				PushFollow(Follow._variance_annotation_in_variant_type_variable_name5090);
				variance_annotation644=variance_annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variance_annotation644.Tree, variance_annotation644, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(182); }

			DebugLocation(664, 39);
			PushFollow(Follow._type_variable_name_in_variant_type_variable_name5095);
			type_variable_name645=type_variable_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_variable_name645.Tree, type_variable_name645, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variant_type_variable_name", 187);
			LeaveRule("variant_type_variable_name", 187);
			LeaveRule_variant_type_variable_name();
			if (state.backtracking > 0) { Memoize(input, 187, variant_type_variable_name_StartIndex); }

		}
		DebugLocation(664, 57);
		} finally { DebugExitRule(GrammarFileName, "variant_type_variable_name"); }
		return retval;

	}
	// $ANTLR end "variant_type_variable_name"

	partial void EnterRule_variance_annotation();
	partial void LeaveRule_variance_annotation();

	// $ANTLR start "variance_annotation"
	// cs.g:665:8: public variance_annotation : ( 'in' | 'out' );
	[GrammarRule("variance_annotation")]
	public XAstParserRuleReturnScope variance_annotation()
	{
		EnterRule_variance_annotation();
		EnterRule("variance_annotation", 188);
		var retval = new XAstParserRuleReturnScope("variance_annotation");
		
		retval.Start = (IToken)input.LT(1);
		int variance_annotation_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set646 = default(IToken);

		object set646_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variance_annotation");
		DebugLocation(665, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 188)) { return retval; }

			// cs.g:665:27: ( 'in' | 'out' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(665, 27);

			set646=(IToken)input.LT(1);
			if (input.LA(1)==137||input.LA(1)==155)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set646, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variance_annotation", 188);
			LeaveRule("variance_annotation", 188);
			LeaveRule_variance_annotation();
			if (state.backtracking > 0) { Memoize(input, 188, variance_annotation_StartIndex); }

		}
		DebugLocation(666, 14);
		} finally { DebugExitRule(GrammarFileName, "variance_annotation"); }
		return retval;

	}
	// $ANTLR end "variance_annotation"

	partial void EnterRule_type_parameter_constraints_clauses();
	partial void LeaveRule_type_parameter_constraints_clauses();

	// $ANTLR start "type_parameter_constraints_clauses"
	// cs.g:668:8: public type_parameter_constraints_clauses : type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* ;
	[GrammarRule("type_parameter_constraints_clauses")]
	public XAstParserRuleReturnScope type_parameter_constraints_clauses()
	{
		EnterRule_type_parameter_constraints_clauses();
		EnterRule("type_parameter_constraints_clauses", 189);
		var retval = new XAstParserRuleReturnScope("type_parameter_constraints_clauses");
		
		retval.Start = (IToken)input.LT(1);
		int type_parameter_constraints_clauses_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal648 = default(IToken);
		XAstParserRuleReturnScope type_parameter_constraints_clause647 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clause649 = default(XAstParserRuleReturnScope);

		object char_literal648_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_parameter_constraints_clauses");
		DebugLocation(668, 80);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 189)) { return retval; }

			// cs.g:668:42: ( type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* )
			DebugEnterAlt(1);
			// cs.g:669:2: type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(669, 2);
			PushFollow(Follow._type_parameter_constraints_clause_in_type_parameter_constraints_clauses5120);
			type_parameter_constraints_clause647=type_parameter_constraints_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clause647.Tree, type_parameter_constraints_clause647, retval);
			DebugLocation(669, 38);
			// cs.g:669:38: ( ',' type_parameter_constraints_clause )*
			try { DebugEnterSubRule(183);
			while (true)
			{
				int alt183=2;
				try { DebugEnterDecision(183, false);
				int LA183_0 = input.LA(1);

				if ((LA183_0==74))
				{
					alt183 = 1;
				}


				} finally { DebugExitDecision(183); }
				switch ( alt183 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:669:39: ',' type_parameter_constraints_clause
					{
					DebugLocation(669, 39);
					char_literal648=(IToken)Match(input,74,Follow._74_in_type_parameter_constraints_clauses5125); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal648_tree = (object)adaptor.Create(char_literal648, retval);
					adaptor.AddChild(root_0, char_literal648_tree);
					}
					DebugLocation(669, 45);
					PushFollow(Follow._type_parameter_constraints_clause_in_type_parameter_constraints_clauses5129);
					type_parameter_constraints_clause649=type_parameter_constraints_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clause649.Tree, type_parameter_constraints_clause649, retval);

					}
					break;

				default:
					goto loop183;
				}
			}

			loop183:
				;

			} finally { DebugExitSubRule(183); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_parameter_constraints_clauses", 189);
			LeaveRule("type_parameter_constraints_clauses", 189);
			LeaveRule_type_parameter_constraints_clauses();
			if (state.backtracking > 0) { Memoize(input, 189, type_parameter_constraints_clauses_StartIndex); }

		}
		DebugLocation(669, 80);
		} finally { DebugExitRule(GrammarFileName, "type_parameter_constraints_clauses"); }
		return retval;

	}
	// $ANTLR end "type_parameter_constraints_clauses"

	partial void EnterRule_type_parameter_constraints_clause();
	partial void LeaveRule_type_parameter_constraints_clause();

	// $ANTLR start "type_parameter_constraints_clause"
	// cs.g:670:8: public type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list ;
	[GrammarRule("type_parameter_constraints_clause")]
	public XAstParserRuleReturnScope type_parameter_constraints_clause()
	{
		EnterRule_type_parameter_constraints_clause();
		EnterRule("type_parameter_constraints_clause", 190);
		var retval = new XAstParserRuleReturnScope("type_parameter_constraints_clause");
		
		retval.Start = (IToken)input.LT(1);
		int type_parameter_constraints_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal650 = default(IToken);
		IToken char_literal652 = default(IToken);
		XAstParserRuleReturnScope type_variable_name651 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraint_list653 = default(XAstParserRuleReturnScope);

		object string_literal650_tree = default(object);
		object char_literal652_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_parameter_constraints_clause");
		DebugLocation(670, 69);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 190)) { return retval; }

			// cs.g:670:41: ( 'where' type_variable_name ':' type_parameter_constraint_list )
			DebugEnterAlt(1);
			// cs.g:671:2: 'where' type_variable_name ':' type_parameter_constraint_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(671, 2);
			string_literal650=(IToken)Match(input,194,Follow._194_in_type_parameter_constraints_clause5141); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal650_tree = (object)adaptor.Create(string_literal650, retval);
			adaptor.AddChild(root_0, string_literal650_tree);
			}
			DebugLocation(671, 12);
			PushFollow(Follow._type_variable_name_in_type_parameter_constraints_clause5145);
			type_variable_name651=type_variable_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_variable_name651.Tree, type_variable_name651, retval);
			DebugLocation(671, 33);
			char_literal652=(IToken)Match(input,79,Follow._79_in_type_parameter_constraints_clause5149); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal652_tree = (object)adaptor.Create(char_literal652, retval);
			adaptor.AddChild(root_0, char_literal652_tree);
			}
			DebugLocation(671, 39);
			PushFollow(Follow._type_parameter_constraint_list_in_type_parameter_constraints_clause5153);
			type_parameter_constraint_list653=type_parameter_constraint_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraint_list653.Tree, type_parameter_constraint_list653, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_parameter_constraints_clause", 190);
			LeaveRule("type_parameter_constraints_clause", 190);
			LeaveRule_type_parameter_constraints_clause();
			if (state.backtracking > 0) { Memoize(input, 190, type_parameter_constraints_clause_StartIndex); }

		}
		DebugLocation(671, 69);
		} finally { DebugExitRule(GrammarFileName, "type_parameter_constraints_clause"); }
		return retval;

	}
	// $ANTLR end "type_parameter_constraints_clause"

	partial void EnterRule_type_parameter_constraint_list();
	partial void LeaveRule_type_parameter_constraint_list();

	// $ANTLR start "type_parameter_constraint_list"
	// cs.g:673:8: public type_parameter_constraint_list : ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint );
	[GrammarRule("type_parameter_constraint_list")]
	public XAstParserRuleReturnScope type_parameter_constraint_list()
	{
		EnterRule_type_parameter_constraint_list();
		EnterRule("type_parameter_constraint_list", 191);
		var retval = new XAstParserRuleReturnScope("type_parameter_constraint_list");
		
		retval.Start = (IToken)input.LT(1);
		int type_parameter_constraint_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set654 = default(IToken);
		IToken char_literal655 = default(IToken);
		IToken char_literal657 = default(IToken);
		IToken char_literal660 = default(IToken);
		XAstParserRuleReturnScope secondary_constraint_list656 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_constraint658 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope secondary_constraint_list659 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_constraint661 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_constraint662 = default(XAstParserRuleReturnScope);

		object set654_tree = default(object);
		object char_literal655_tree = default(object);
		object char_literal657_tree = default(object);
		object char_literal660_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_parameter_constraint_list");
		DebugLocation(673, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 191)) { return retval; }

			// cs.g:673:38: ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint )
			int alt187=3;
			try { DebugEnterDecision(187, false);
			switch (input.LA(1))
			{
			case 111:
			case 178:
				{
				alt187 = 1;
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case IDENTIFIER:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				alt187 = 2;
				}
				break;
			case 150:
				{
				alt187 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 187, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:674:5: ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(674, 5);

				set654=(IToken)input.LT(1);
				if (input.LA(1)==111||input.LA(1)==178)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set654, retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(674, 28);
				// cs.g:674:28: ( ',' secondary_constraint_list )?
				int alt184=2;
				try { DebugEnterSubRule(184);
				try { DebugEnterDecision(184, false);
				int LA184_0 = input.LA(1);

				if ((LA184_0==74))
				{
					int LA184_1 = input.LA(2);

					if ((LA184_1==DEFINE||LA184_1==ELIF||LA184_1==ENDIF||LA184_1==IDENTIFIER||LA184_1==UNDEF||LA184_1==95||(LA184_1>=97 && LA184_1<=98)||(LA184_1>=100 && LA184_1<=101)||LA184_1==105||LA184_1==117||LA184_1==120||LA184_1==122||LA184_1==126||(LA184_1>=132 && LA184_1<=133)||LA184_1==135||LA184_1==141||(LA184_1>=143 && LA184_1<=144)||(LA184_1>=147 && LA184_1<=148)||LA184_1==152||LA184_1==154||LA184_1==157||LA184_1==160||LA184_1==162||LA184_1==167||(LA184_1>=171 && LA184_1<=172)||LA184_1==183||LA184_1==190||LA184_1==196))
					{
						alt184 = 1;
					}
					else if ((LA184_1==194))
					{
						int LA184_4 = input.LA(3);

						if ((LA184_4==DOT||LA184_4==SEMI||LA184_4==74||(LA184_4>=80 && LA184_4<=81)||LA184_4==197))
						{
							alt184 = 1;
						}
					}
				}
				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:674:29: ',' secondary_constraint_list
					{
					DebugLocation(674, 29);
					char_literal655=(IToken)Match(input,74,Follow._74_in_type_parameter_constraint_list5229); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal655_tree = (object)adaptor.Create(char_literal655, retval);
					adaptor.AddChild(root_0, char_literal655_tree);
					}
					DebugLocation(674, 35);
					PushFollow(Follow._secondary_constraint_list_in_type_parameter_constraint_list5233);
					secondary_constraint_list656=secondary_constraint_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint_list656.Tree, secondary_constraint_list656, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(184); }

				DebugLocation(674, 65);
				// cs.g:674:65: ( ',' constructor_constraint )?
				int alt185=2;
				try { DebugEnterSubRule(185);
				try { DebugEnterDecision(185, false);
				int LA185_0 = input.LA(1);

				if ((LA185_0==74))
				{
					int LA185_1 = input.LA(2);

					if ((LA185_1==150))
					{
						alt185 = 1;
					}
				}
				} finally { DebugExitDecision(185); }
				switch (alt185)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:674:66: ',' constructor_constraint
					{
					DebugLocation(674, 66);
					char_literal657=(IToken)Match(input,74,Follow._74_in_type_parameter_constraint_list5240); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal657_tree = (object)adaptor.Create(char_literal657, retval);
					adaptor.AddChild(root_0, char_literal657_tree);
					}
					DebugLocation(674, 72);
					PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list5244);
					constructor_constraint658=constructor_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_constraint658.Tree, constructor_constraint658, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(185); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:675:4: secondary_constraint_list ( ',' constructor_constraint )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(675, 4);
				PushFollow(Follow._secondary_constraint_list_in_type_parameter_constraint_list5251);
				secondary_constraint_list659=secondary_constraint_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint_list659.Tree, secondary_constraint_list659, retval);
				DebugLocation(675, 32);
				// cs.g:675:32: ( ',' constructor_constraint )?
				int alt186=2;
				try { DebugEnterSubRule(186);
				try { DebugEnterDecision(186, false);
				int LA186_0 = input.LA(1);

				if ((LA186_0==74))
				{
					int LA186_1 = input.LA(2);

					if ((LA186_1==150))
					{
						alt186 = 1;
					}
				}
				} finally { DebugExitDecision(186); }
				switch (alt186)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:675:33: ',' constructor_constraint
					{
					DebugLocation(675, 33);
					char_literal660=(IToken)Match(input,74,Follow._74_in_type_parameter_constraint_list5256); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal660_tree = (object)adaptor.Create(char_literal660, retval);
					adaptor.AddChild(root_0, char_literal660_tree);
					}
					DebugLocation(675, 39);
					PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list5260);
					constructor_constraint661=constructor_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_constraint661.Tree, constructor_constraint661, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(186); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:676:4: constructor_constraint
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(676, 4);
				PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list5267);
				constructor_constraint662=constructor_constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_constraint662.Tree, constructor_constraint662, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_parameter_constraint_list", 191);
			LeaveRule("type_parameter_constraint_list", 191);
			LeaveRule_type_parameter_constraint_list();
			if (state.backtracking > 0) { Memoize(input, 191, type_parameter_constraint_list_StartIndex); }

		}
		DebugLocation(676, 26);
		} finally { DebugExitRule(GrammarFileName, "type_parameter_constraint_list"); }
		return retval;

	}
	// $ANTLR end "type_parameter_constraint_list"

	partial void EnterRule_secondary_constraint_list();
	partial void LeaveRule_secondary_constraint_list();

	// $ANTLR start "secondary_constraint_list"
	// cs.g:681:8: public secondary_constraint_list : secondary_constraint ( ',' secondary_constraint )* ;
	[GrammarRule("secondary_constraint_list")]
	public XAstParserRuleReturnScope secondary_constraint_list()
	{
		EnterRule_secondary_constraint_list();
		EnterRule("secondary_constraint_list", 192);
		var retval = new XAstParserRuleReturnScope("secondary_constraint_list");
		
		retval.Start = (IToken)input.LT(1);
		int secondary_constraint_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal664 = default(IToken);
		XAstParserRuleReturnScope secondary_constraint663 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope secondary_constraint665 = default(XAstParserRuleReturnScope);

		object char_literal664_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "secondary_constraint_list");
		DebugLocation(681, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 192)) { return retval; }

			// cs.g:681:33: ( secondary_constraint ( ',' secondary_constraint )* )
			DebugEnterAlt(1);
			// cs.g:682:2: secondary_constraint ( ',' secondary_constraint )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(682, 2);
			PushFollow(Follow._secondary_constraint_in_secondary_constraint_list5281);
			secondary_constraint663=secondary_constraint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint663.Tree, secondary_constraint663, retval);
			DebugLocation(682, 23);
			// cs.g:682:23: ( ',' secondary_constraint )*
			try { DebugEnterSubRule(188);
			while (true)
			{
				int alt188=2;
				try { DebugEnterDecision(188, false);
				int LA188_0 = input.LA(1);

				if ((LA188_0==74))
				{
					int LA188_1 = input.LA(2);

					if ((LA188_1==194))
					{
						int LA188_3 = input.LA(3);

						if ((LA188_3==DOT||LA188_3==SEMI||LA188_3==74||(LA188_3>=80 && LA188_3<=81)||LA188_3==197))
						{
							alt188 = 1;
						}


					}
					else if ((LA188_1==DEFINE||LA188_1==ELIF||LA188_1==ENDIF||LA188_1==IDENTIFIER||LA188_1==UNDEF||LA188_1==95||(LA188_1>=97 && LA188_1<=98)||(LA188_1>=100 && LA188_1<=101)||LA188_1==105||LA188_1==117||LA188_1==120||LA188_1==122||LA188_1==126||(LA188_1>=132 && LA188_1<=133)||LA188_1==135||LA188_1==141||(LA188_1>=143 && LA188_1<=144)||(LA188_1>=147 && LA188_1<=148)||LA188_1==152||LA188_1==154||LA188_1==157||LA188_1==160||LA188_1==162||LA188_1==167||(LA188_1>=171 && LA188_1<=172)||LA188_1==183||LA188_1==190||LA188_1==196))
					{
						alt188 = 1;
					}


				}


				} finally { DebugExitDecision(188); }
				switch ( alt188 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:682:24: ',' secondary_constraint
					{
					DebugLocation(682, 24);
					char_literal664=(IToken)Match(input,74,Follow._74_in_secondary_constraint_list5284); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal664_tree = (object)adaptor.Create(char_literal664, retval);
					adaptor.AddChild(root_0, char_literal664_tree);
					}
					DebugLocation(682, 28);
					PushFollow(Follow._secondary_constraint_in_secondary_constraint_list5286);
					secondary_constraint665=secondary_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint665.Tree, secondary_constraint665, retval);

					}
					break;

				default:
					goto loop188;
				}
			}

			loop188:
				;

			} finally { DebugExitSubRule(188); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("secondary_constraint_list", 192);
			LeaveRule("secondary_constraint_list", 192);
			LeaveRule_secondary_constraint_list();
			if (state.backtracking > 0) { Memoize(input, 192, secondary_constraint_list_StartIndex); }

		}
		DebugLocation(682, 50);
		} finally { DebugExitRule(GrammarFileName, "secondary_constraint_list"); }
		return retval;

	}
	// $ANTLR end "secondary_constraint_list"

	partial void EnterRule_secondary_constraint();
	partial void LeaveRule_secondary_constraint();

	// $ANTLR start "secondary_constraint"
	// cs.g:683:8: public secondary_constraint : type_name ;
	[GrammarRule("secondary_constraint")]
	public XAstParserRuleReturnScope secondary_constraint()
	{
		EnterRule_secondary_constraint();
		EnterRule("secondary_constraint", 193);
		var retval = new XAstParserRuleReturnScope("secondary_constraint");
		
		retval.Start = (IToken)input.LT(1);
		int secondary_constraint_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_name666 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "secondary_constraint");
		DebugLocation(683, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 193)) { return retval; }

			// cs.g:683:28: ( type_name )
			DebugEnterAlt(1);
			// cs.g:684:2: type_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(684, 2);
			PushFollow(Follow._type_name_in_secondary_constraint5298);
			type_name666=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name666.Tree, type_name666, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("secondary_constraint", 193);
			LeaveRule("secondary_constraint", 193);
			LeaveRule_secondary_constraint();
			if (state.backtracking > 0) { Memoize(input, 193, secondary_constraint_StartIndex); }

		}
		DebugLocation(684, 11);
		} finally { DebugExitRule(GrammarFileName, "secondary_constraint"); }
		return retval;

	}
	// $ANTLR end "secondary_constraint"

	partial void EnterRule_type_variable_name();
	partial void LeaveRule_type_variable_name();

	// $ANTLR start "type_variable_name"
	// cs.g:685:8: public type_variable_name : identifier ;
	[GrammarRule("type_variable_name")]
	public XAstParserRuleReturnScope type_variable_name()
	{
		EnterRule_type_variable_name();
		EnterRule("type_variable_name", 194);
		var retval = new XAstParserRuleReturnScope("type_variable_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_variable_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope identifier667 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_variable_name");
		DebugLocation(685, 12);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 194)) { return retval; }

			// cs.g:685:26: ( identifier )
			DebugEnterAlt(1);
			// cs.g:686:2: identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(686, 2);
			PushFollow(Follow._identifier_in_type_variable_name5310);
			identifier667=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier667.Tree, identifier667, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_variable_name", 194);
			LeaveRule("type_variable_name", 194);
			LeaveRule_type_variable_name();
			if (state.backtracking > 0) { Memoize(input, 194, type_variable_name_StartIndex); }

		}
		DebugLocation(686, 12);
		} finally { DebugExitRule(GrammarFileName, "type_variable_name"); }
		return retval;

	}
	// $ANTLR end "type_variable_name"

	partial void EnterRule_constructor_constraint();
	partial void LeaveRule_constructor_constraint();

	// $ANTLR start "constructor_constraint"
	// cs.g:687:8: public constructor_constraint : 'new' '(' ')' ;
	[GrammarRule("constructor_constraint")]
	public XAstParserRuleReturnScope constructor_constraint()
	{
		EnterRule_constructor_constraint();
		EnterRule("constructor_constraint", 195);
		var retval = new XAstParserRuleReturnScope("constructor_constraint");
		
		retval.Start = (IToken)input.LT(1);
		int constructor_constraint_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal668 = default(IToken);
		IToken char_literal669 = default(IToken);
		IToken char_literal670 = default(IToken);

		object string_literal668_tree = default(object);
		object char_literal669_tree = default(object);
		object char_literal670_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constructor_constraint");
		DebugLocation(687, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 195)) { return retval; }

			// cs.g:687:30: ( 'new' '(' ')' )
			DebugEnterAlt(1);
			// cs.g:688:2: 'new' '(' ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(688, 2);
			string_literal668=(IToken)Match(input,150,Follow._150_in_constructor_constraint5320); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal668_tree = (object)adaptor.Create(string_literal668, retval);
			adaptor.AddChild(root_0, string_literal668_tree);
			}
			DebugLocation(688, 10);
			char_literal669=(IToken)Match(input,68,Follow._68_in_constructor_constraint5324); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal669_tree = (object)adaptor.Create(char_literal669, retval);
			adaptor.AddChild(root_0, char_literal669_tree);
			}
			DebugLocation(688, 16);
			char_literal670=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_constraint5328), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal670_tree = (object)adaptor.Create(char_literal670, retval);
			adaptor.AddChild(root_0, char_literal670_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_constraint", 195);
			LeaveRule("constructor_constraint", 195);
			LeaveRule_constructor_constraint();
			if (state.backtracking > 0) { Memoize(input, 195, constructor_constraint_StartIndex); }

		}
		DebugLocation(688, 19);
		} finally { DebugExitRule(GrammarFileName, "constructor_constraint"); }
		return retval;

	}
	// $ANTLR end "constructor_constraint"

	partial void EnterRule_return_type();
	partial void LeaveRule_return_type();

	// $ANTLR start "return_type"
	// cs.g:689:8: public return_type : ( type | 'void' );
	[GrammarRule("return_type")]
	public XAstParserRuleReturnScope return_type()
	{
		EnterRule_return_type();
		EnterRule("return_type", 196);
		var retval = new XAstParserRuleReturnScope("return_type");
		
		retval.Start = (IToken)input.LT(1);
		int return_type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal672 = default(IToken);
		XAstParserRuleReturnScope type671 = default(XAstParserRuleReturnScope);

		object string_literal672_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "return_type");
		DebugLocation(689, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 196)) { return retval; }

			// cs.g:689:19: ( type | 'void' )
			int alt189=2;
			try { DebugEnterDecision(189, false);
			int LA189_0 = input.LA(1);

			if ((LA189_0==DEFINE||LA189_0==ELIF||LA189_0==ENDIF||LA189_0==IDENTIFIER||LA189_0==UNDEF||LA189_0==95||(LA189_0>=97 && LA189_0<=98)||(LA189_0>=100 && LA189_0<=101)||LA189_0==103||(LA189_0>=105 && LA189_0<=106)||LA189_0==109||LA189_0==114||LA189_0==117||(LA189_0>=119 && LA189_0<=120)||LA189_0==122||LA189_0==126||LA189_0==129||(LA189_0>=132 && LA189_0<=133)||LA189_0==135||LA189_0==138||LA189_0==141||(LA189_0>=143 && LA189_0<=144)||(LA189_0>=146 && LA189_0<=148)||(LA189_0>=151 && LA189_0<=152)||LA189_0==154||LA189_0==157||LA189_0==160||LA189_0==162||LA189_0==167||LA189_0==169||(LA189_0>=171 && LA189_0<=173)||LA189_0==177||LA189_0==183||(LA189_0>=185 && LA189_0<=186)||(LA189_0>=189 && LA189_0<=190)||LA189_0==194||LA189_0==196))
			{
				alt189 = 1;
			}
			else if ((LA189_0==192))
			{
				int LA189_2 = input.LA(2);

				if ((LA189_2==69))
				{
					alt189 = 1;
				}
				else if ((LA189_2==DEFINE||LA189_2==ELIF||LA189_2==ENDIF||LA189_2==IDENTIFIER||LA189_2==UNDEF||LA189_2==95||(LA189_2>=97 && LA189_2<=98)||(LA189_2>=100 && LA189_2<=101)||LA189_2==105||LA189_2==117||LA189_2==120||LA189_2==122||LA189_2==126||(LA189_2>=132 && LA189_2<=133)||LA189_2==135||LA189_2==141||(LA189_2>=143 && LA189_2<=144)||(LA189_2>=147 && LA189_2<=148)||LA189_2==152||LA189_2==154||LA189_2==157||LA189_2==160||LA189_2==162||LA189_2==167||(LA189_2>=171 && LA189_2<=172)||LA189_2==183||LA189_2==190||LA189_2==194||LA189_2==196))
				{
					alt189 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 189, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 189, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(189); }
			switch (alt189)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:690:2: type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(690, 2);
				PushFollow(Follow._type_in_return_type5338);
				type671=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type671.Tree, type671, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:691:5: 'void'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(691, 5);
				string_literal672=(IToken)Match(input,192,Follow._192_in_return_type5344); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal672_tree = (object)adaptor.Create(string_literal672, retval);
				adaptor.AddChild(root_0, string_literal672_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("return_type", 196);
			LeaveRule("return_type", 196);
			LeaveRule_return_type();
			if (state.backtracking > 0) { Memoize(input, 196, return_type_StartIndex); }

		}
		DebugLocation(691, 10);
		} finally { DebugExitRule(GrammarFileName, "return_type"); }
		return retval;

	}
	// $ANTLR end "return_type"

	partial void EnterRule_formal_parameter_list();
	partial void LeaveRule_formal_parameter_list();

	// $ANTLR start "formal_parameter_list"
	// cs.g:692:8: public formal_parameter_list : formal_parameter ( ',' formal_parameter )* ;
	[GrammarRule("formal_parameter_list")]
	public XAstParserRuleReturnScope formal_parameter_list()
	{
		EnterRule_formal_parameter_list();
		EnterRule("formal_parameter_list", 197);
		var retval = new XAstParserRuleReturnScope("formal_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int formal_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal674 = default(IToken);
		XAstParserRuleReturnScope formal_parameter673 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope formal_parameter675 = default(XAstParserRuleReturnScope);

		object char_literal674_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formal_parameter_list");
		DebugLocation(692, 42);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 197)) { return retval; }

			// cs.g:692:29: ( formal_parameter ( ',' formal_parameter )* )
			DebugEnterAlt(1);
			// cs.g:693:2: formal_parameter ( ',' formal_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(693, 2);
			PushFollow(Follow._formal_parameter_in_formal_parameter_list5353);
			formal_parameter673=formal_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter673.Tree, formal_parameter673, retval);
			DebugLocation(693, 19);
			// cs.g:693:19: ( ',' formal_parameter )*
			try { DebugEnterSubRule(190);
			while (true)
			{
				int alt190=2;
				try { DebugEnterDecision(190, false);
				int LA190_0 = input.LA(1);

				if ((LA190_0==74))
				{
					alt190 = 1;
				}


				} finally { DebugExitDecision(190); }
				switch ( alt190 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:693:20: ',' formal_parameter
					{
					DebugLocation(693, 20);
					char_literal674=(IToken)Match(input,74,Follow._74_in_formal_parameter_list5356); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal674_tree = (object)adaptor.Create(char_literal674, retval);
					adaptor.AddChild(root_0, char_literal674_tree);
					}
					DebugLocation(693, 24);
					PushFollow(Follow._formal_parameter_in_formal_parameter_list5358);
					formal_parameter675=formal_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter675.Tree, formal_parameter675, retval);

					}
					break;

				default:
					goto loop190;
				}
			}

			loop190:
				;

			} finally { DebugExitSubRule(190); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formal_parameter_list", 197);
			LeaveRule("formal_parameter_list", 197);
			LeaveRule_formal_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 197, formal_parameter_list_StartIndex); }

		}
		DebugLocation(693, 42);
		} finally { DebugExitRule(GrammarFileName, "formal_parameter_list"); }
		return retval;

	}
	// $ANTLR end "formal_parameter_list"

	partial void EnterRule_formal_parameter();
	partial void LeaveRule_formal_parameter();

	// $ANTLR start "formal_parameter"
	// cs.g:694:8: public formal_parameter : ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' );
	[GrammarRule("formal_parameter")]
	public XAstParserRuleReturnScope formal_parameter()
	{
		EnterRule_formal_parameter();
		EnterRule("formal_parameter", 198);
		var retval = new XAstParserRuleReturnScope("formal_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int formal_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal679 = default(IToken);
		XAstParserRuleReturnScope attributes676 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_parameter677 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_array678 = default(XAstParserRuleReturnScope);

		object string_literal679_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formal_parameter");
		DebugLocation(694, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 198)) { return retval; }

			// cs.g:694:24: ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' )
			int alt193=2;
			try { DebugEnterDecision(193, false);
			int LA193_0 = input.LA(1);

			if ((LA193_0==DEFINE||LA193_0==ELIF||LA193_0==ENDIF||LA193_0==IDENTIFIER||LA193_0==UNDEF||LA193_0==91||(LA193_0>=97 && LA193_0<=98)||(LA193_0>=100 && LA193_0<=101)||LA193_0==103||(LA193_0>=105 && LA193_0<=106)||LA193_0==109||LA193_0==114||LA193_0==117||(LA193_0>=119 && LA193_0<=120)||LA193_0==122||LA193_0==126||LA193_0==129||(LA193_0>=132 && LA193_0<=133)||LA193_0==135||LA193_0==138||LA193_0==141||(LA193_0>=143 && LA193_0<=144)||(LA193_0>=146 && LA193_0<=148)||(LA193_0>=151 && LA193_0<=152)||(LA193_0>=154 && LA193_0<=155)||(LA193_0>=157 && LA193_0<=158)||LA193_0==160||LA193_0==162||(LA193_0>=166 && LA193_0<=167)||LA193_0==169||(LA193_0>=171 && LA193_0<=173)||LA193_0==177||LA193_0==180||LA193_0==183||(LA193_0>=185 && LA193_0<=186)||(LA193_0>=189 && LA193_0<=190)||LA193_0==192||LA193_0==194||LA193_0==196))
			{
				alt193 = 1;
			}
			else if ((LA193_0==95))
			{
				int LA193_2 = input.LA(2);

				if ((LA193_2==DEFINE||LA193_2==DOT||LA193_2==ELIF||LA193_2==ENDIF||LA193_2==IDENTIFIER||LA193_2==UNDEF||LA193_2==69||(LA193_2>=80 && LA193_2<=81)||LA193_2==89||LA193_2==91||LA193_2==95||(LA193_2>=97 && LA193_2<=98)||(LA193_2>=100 && LA193_2<=101)||LA193_2==105||LA193_2==117||LA193_2==120||LA193_2==122||LA193_2==126||(LA193_2>=132 && LA193_2<=133)||LA193_2==135||LA193_2==141||(LA193_2>=143 && LA193_2<=144)||(LA193_2>=147 && LA193_2<=148)||LA193_2==152||LA193_2==154||LA193_2==157||LA193_2==160||LA193_2==162||LA193_2==167||(LA193_2>=171 && LA193_2<=172)||LA193_2==183||LA193_2==190||LA193_2==194||LA193_2==196))
				{
					alt193 = 1;
				}
				else if ((LA193_2==RPAREN||LA193_2==74||LA193_2==92))
				{
					alt193 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 193, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 193, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(193); }
			switch (alt193)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:695:2: ( attributes )? ( fixed_parameter | parameter_array )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(695, 2);
				// cs.g:695:2: ( attributes )?
				int alt191=2;
				try { DebugEnterSubRule(191);
				try { DebugEnterDecision(191, false);
				int LA191_0 = input.LA(1);

				if ((LA191_0==91))
				{
					alt191 = 1;
				}
				} finally { DebugExitDecision(191); }
				switch (alt191)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:695:2: attributes
					{
					DebugLocation(695, 2);
					PushFollow(Follow._attributes_in_formal_parameter5370);
					attributes676=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes676.Tree, attributes676, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(191); }

				DebugLocation(695, 16);
				// cs.g:695:16: ( fixed_parameter | parameter_array )
				int alt192=2;
				try { DebugEnterSubRule(192);
				try { DebugEnterDecision(192, false);
				int LA192_0 = input.LA(1);

				if ((LA192_0==DEFINE||LA192_0==ELIF||LA192_0==ENDIF||LA192_0==IDENTIFIER||LA192_0==UNDEF||LA192_0==95||(LA192_0>=97 && LA192_0<=98)||(LA192_0>=100 && LA192_0<=101)||LA192_0==103||(LA192_0>=105 && LA192_0<=106)||LA192_0==109||LA192_0==114||LA192_0==117||(LA192_0>=119 && LA192_0<=120)||LA192_0==122||LA192_0==126||LA192_0==129||(LA192_0>=132 && LA192_0<=133)||LA192_0==135||LA192_0==138||LA192_0==141||(LA192_0>=143 && LA192_0<=144)||(LA192_0>=146 && LA192_0<=148)||(LA192_0>=151 && LA192_0<=152)||(LA192_0>=154 && LA192_0<=155)||LA192_0==157||LA192_0==160||LA192_0==162||(LA192_0>=166 && LA192_0<=167)||LA192_0==169||(LA192_0>=171 && LA192_0<=173)||LA192_0==177||LA192_0==180||LA192_0==183||(LA192_0>=185 && LA192_0<=186)||(LA192_0>=189 && LA192_0<=190)||LA192_0==192||LA192_0==194||LA192_0==196))
				{
					alt192 = 1;
				}
				else if ((LA192_0==158))
				{
					alt192 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(192); }
				switch (alt192)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:695:17: fixed_parameter
					{
					DebugLocation(695, 17);
					PushFollow(Follow._fixed_parameter_in_formal_parameter5376);
					fixed_parameter677=fixed_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_parameter677.Tree, fixed_parameter677, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:695:35: parameter_array
					{
					DebugLocation(695, 35);
					PushFollow(Follow._parameter_array_in_formal_parameter5380);
					parameter_array678=parameter_array();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_array678.Tree, parameter_array678, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(192); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:696:4: '__arglist'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(696, 4);
				string_literal679=(IToken)Match(input,95,Follow._95_in_formal_parameter5387); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal679_tree = (object)adaptor.Create(string_literal679, retval);
				adaptor.AddChild(root_0, string_literal679_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formal_parameter", 198);
			LeaveRule("formal_parameter", 198);
			LeaveRule_formal_parameter();
			if (state.backtracking > 0) { Memoize(input, 198, formal_parameter_StartIndex); }

		}
		DebugLocation(696, 14);
		} finally { DebugExitRule(GrammarFileName, "formal_parameter"); }
		return retval;

	}
	// $ANTLR end "formal_parameter"

	partial void EnterRule_fixed_parameters();
	partial void LeaveRule_fixed_parameters();

	// $ANTLR start "fixed_parameters"
	// cs.g:697:8: public fixed_parameters : fixed_parameter ( ',' fixed_parameter )* ;
	[GrammarRule("fixed_parameters")]
	public XAstParserRuleReturnScope fixed_parameters()
	{
		EnterRule_fixed_parameters();
		EnterRule("fixed_parameters", 199);
		var retval = new XAstParserRuleReturnScope("fixed_parameters");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_parameters_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal681 = default(IToken);
		XAstParserRuleReturnScope fixed_parameter680 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_parameter682 = default(XAstParserRuleReturnScope);

		object char_literal681_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fixed_parameters");
		DebugLocation(697, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 199)) { return retval; }

			// cs.g:697:24: ( fixed_parameter ( ',' fixed_parameter )* )
			DebugEnterAlt(1);
			// cs.g:698:2: fixed_parameter ( ',' fixed_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(698, 2);
			PushFollow(Follow._fixed_parameter_in_fixed_parameters5397);
			fixed_parameter680=fixed_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_parameter680.Tree, fixed_parameter680, retval);
			DebugLocation(698, 20);
			// cs.g:698:20: ( ',' fixed_parameter )*
			try { DebugEnterSubRule(194);
			while (true)
			{
				int alt194=2;
				try { DebugEnterDecision(194, false);
				int LA194_0 = input.LA(1);

				if ((LA194_0==74))
				{
					alt194 = 1;
				}


				} finally { DebugExitDecision(194); }
				switch ( alt194 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:698:21: ',' fixed_parameter
					{
					DebugLocation(698, 21);
					char_literal681=(IToken)Match(input,74,Follow._74_in_fixed_parameters5402); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal681_tree = (object)adaptor.Create(char_literal681, retval);
					adaptor.AddChild(root_0, char_literal681_tree);
					}
					DebugLocation(698, 27);
					PushFollow(Follow._fixed_parameter_in_fixed_parameters5406);
					fixed_parameter682=fixed_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_parameter682.Tree, fixed_parameter682, retval);

					}
					break;

				default:
					goto loop194;
				}
			}

			loop194:
				;

			} finally { DebugExitSubRule(194); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_parameters", 199);
			LeaveRule("fixed_parameters", 199);
			LeaveRule_fixed_parameters();
			if (state.backtracking > 0) { Memoize(input, 199, fixed_parameters_StartIndex); }

		}
		DebugLocation(698, 44);
		} finally { DebugExitRule(GrammarFileName, "fixed_parameters"); }
		return retval;

	}
	// $ANTLR end "fixed_parameters"

	partial void EnterRule_fixed_parameter();
	partial void LeaveRule_fixed_parameter();

	// $ANTLR start "fixed_parameter"
	// cs.g:700:8: public fixed_parameter : ( parameter_modifier )? type identifier ( default_argument )? ;
	[GrammarRule("fixed_parameter")]
	public XAstParserRuleReturnScope fixed_parameter()
	{
		EnterRule_fixed_parameter();
		EnterRule("fixed_parameter", 200);
		var retval = new XAstParserRuleReturnScope("fixed_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope parameter_modifier683 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type684 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier685 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope default_argument686 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "fixed_parameter");
		DebugLocation(700, 61);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 200)) { return retval; }

			// cs.g:700:23: ( ( parameter_modifier )? type identifier ( default_argument )? )
			DebugEnterAlt(1);
			// cs.g:701:2: ( parameter_modifier )? type identifier ( default_argument )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(701, 2);
			// cs.g:701:2: ( parameter_modifier )?
			int alt195=2;
			try { DebugEnterSubRule(195);
			try { DebugEnterDecision(195, false);
			int LA195_0 = input.LA(1);

			if ((LA195_0==155||LA195_0==166||LA195_0==180))
			{
				alt195 = 1;
			}
			} finally { DebugExitDecision(195); }
			switch (alt195)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:701:2: parameter_modifier
				{
				DebugLocation(701, 2);
				PushFollow(Follow._parameter_modifier_in_fixed_parameter5419);
				parameter_modifier683=parameter_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_modifier683.Tree, parameter_modifier683, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(195); }

			DebugLocation(701, 24);
			PushFollow(Follow._type_in_fixed_parameter5424);
			type684=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type684.Tree, type684, retval);
			DebugLocation(701, 31);
			PushFollow(Follow._identifier_in_fixed_parameter5428);
			identifier685=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier685.Tree, identifier685, retval);
			DebugLocation(701, 44);
			// cs.g:701:44: ( default_argument )?
			int alt196=2;
			try { DebugEnterSubRule(196);
			try { DebugEnterDecision(196, false);
			int LA196_0 = input.LA(1);

			if ((LA196_0==85))
			{
				alt196 = 1;
			}
			} finally { DebugExitDecision(196); }
			switch (alt196)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:701:44: default_argument
				{
				DebugLocation(701, 44);
				PushFollow(Follow._default_argument_in_fixed_parameter5432);
				default_argument686=default_argument();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, default_argument686.Tree, default_argument686, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(196); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_parameter", 200);
			LeaveRule("fixed_parameter", 200);
			LeaveRule_fixed_parameter();
			if (state.backtracking > 0) { Memoize(input, 200, fixed_parameter_StartIndex); }

		}
		DebugLocation(701, 61);
		} finally { DebugExitRule(GrammarFileName, "fixed_parameter"); }
		return retval;

	}
	// $ANTLR end "fixed_parameter"

	partial void EnterRule_default_argument();
	partial void LeaveRule_default_argument();

	// $ANTLR start "default_argument"
	// cs.g:703:8: public default_argument : '=' expression ;
	[GrammarRule("default_argument")]
	public XAstParserRuleReturnScope default_argument()
	{
		EnterRule_default_argument();
		EnterRule("default_argument", 201);
		var retval = new XAstParserRuleReturnScope("default_argument");
		
		retval.Start = (IToken)input.LT(1);
		int default_argument_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal687 = default(IToken);
		XAstParserRuleReturnScope expression688 = default(XAstParserRuleReturnScope);

		object char_literal687_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "default_argument");
		DebugLocation(703, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 201)) { return retval; }

			// cs.g:703:24: ( '=' expression )
			DebugEnterAlt(1);
			// cs.g:704:2: '=' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(704, 2);
			char_literal687=(IToken)Match(input,85,Follow._85_in_default_argument5444); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal687_tree = (object)adaptor.Create(char_literal687, retval);
			adaptor.AddChild(root_0, char_literal687_tree);
			}
			DebugLocation(704, 6);
			PushFollow(Follow._expression_in_default_argument5446);
			expression688=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression688.Tree, expression688, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("default_argument", 201);
			LeaveRule("default_argument", 201);
			LeaveRule_default_argument();
			if (state.backtracking > 0) { Memoize(input, 201, default_argument_StartIndex); }

		}
		DebugLocation(704, 15);
		} finally { DebugExitRule(GrammarFileName, "default_argument"); }
		return retval;

	}
	// $ANTLR end "default_argument"

	partial void EnterRule_parameter_modifier();
	partial void LeaveRule_parameter_modifier();

	// $ANTLR start "parameter_modifier"
	// cs.g:705:8: public parameter_modifier : ( 'ref' | 'out' | 'this' );
	[GrammarRule("parameter_modifier")]
	public XAstParserRuleReturnScope parameter_modifier()
	{
		EnterRule_parameter_modifier();
		EnterRule("parameter_modifier", 202);
		var retval = new XAstParserRuleReturnScope("parameter_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set689 = default(IToken);

		object set689_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_modifier");
		DebugLocation(705, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 202)) { return retval; }

			// cs.g:705:26: ( 'ref' | 'out' | 'this' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(705, 26);

			set689=(IToken)input.LT(1);
			if (input.LA(1)==155||input.LA(1)==166||input.LA(1)==180)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set689, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_modifier", 202);
			LeaveRule("parameter_modifier", 202);
			LeaveRule_parameter_modifier();
			if (state.backtracking > 0) { Memoize(input, 202, parameter_modifier_StartIndex); }

		}
		DebugLocation(706, 24);
		} finally { DebugExitRule(GrammarFileName, "parameter_modifier"); }
		return retval;

	}
	// $ANTLR end "parameter_modifier"

	partial void EnterRule_parameter_array();
	partial void LeaveRule_parameter_array();

	// $ANTLR start "parameter_array"
	// cs.g:707:8: public parameter_array : 'params' type identifier ;
	[GrammarRule("parameter_array")]
	public XAstParserRuleReturnScope parameter_array()
	{
		EnterRule_parameter_array();
		EnterRule("parameter_array", 203);
		var retval = new XAstParserRuleReturnScope("parameter_array");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_array_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal690 = default(IToken);
		XAstParserRuleReturnScope type691 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier692 = default(XAstParserRuleReturnScope);

		object string_literal690_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_array");
		DebugLocation(707, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 203)) { return retval; }

			// cs.g:707:23: ( 'params' type identifier )
			DebugEnterAlt(1);
			// cs.g:708:2: 'params' type identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(708, 2);
			string_literal690=(IToken)Match(input,158,Follow._158_in_parameter_array5473); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal690_tree = (object)adaptor.Create(string_literal690, retval);
			adaptor.AddChild(root_0, string_literal690_tree);
			}
			DebugLocation(708, 13);
			PushFollow(Follow._type_in_parameter_array5477);
			type691=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type691.Tree, type691, retval);
			DebugLocation(708, 20);
			PushFollow(Follow._identifier_in_parameter_array5481);
			identifier692=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier692.Tree, identifier692, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_array", 203);
			LeaveRule("parameter_array", 203);
			LeaveRule_parameter_array();
			if (state.backtracking > 0) { Memoize(input, 203, parameter_array_StartIndex); }

		}
		DebugLocation(708, 30);
		} finally { DebugExitRule(GrammarFileName, "parameter_array"); }
		return retval;

	}
	// $ANTLR end "parameter_array"

	partial void EnterRule_interface_declaration();
	partial void LeaveRule_interface_declaration();

	// $ANTLR start "interface_declaration"
	// cs.g:711:8: public interface_declaration : 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? ;
	[GrammarRule("interface_declaration")]
	public XAstParserRuleReturnScope interface_declaration()
	{
		EnterRule_interface_declaration();
		EnterRule("interface_declaration", 204);
		var retval = new XAstParserRuleReturnScope("interface_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal693 = default(IToken);
		IToken char_literal699 = default(IToken);
		XAstParserRuleReturnScope identifier694 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variant_generic_parameter_list695 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_base696 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses697 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_body698 = default(XAstParserRuleReturnScope);

		object string_literal693_tree = default(object);
		object char_literal699_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_declaration");
		DebugLocation(711, 83);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 204)) { return retval; }

			// cs.g:711:29: ( 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? )
			DebugEnterAlt(1);
			// cs.g:712:2: 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(712, 2);
			string_literal693=(IToken)Match(input,139,Follow._139_in_interface_declaration5493); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal693_tree = (object)adaptor.Create(string_literal693, retval);
			adaptor.AddChild(root_0, string_literal693_tree);
			}
			DebugLocation(712, 16);
			PushFollow(Follow._identifier_in_interface_declaration5497);
			identifier694=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier694.Tree, identifier694, retval);
			DebugLocation(712, 29);
			// cs.g:712:29: ( variant_generic_parameter_list )?
			int alt197=2;
			try { DebugEnterSubRule(197);
			try { DebugEnterDecision(197, false);
			int LA197_0 = input.LA(1);

			if ((LA197_0==81))
			{
				alt197 = 1;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:712:29: variant_generic_parameter_list
				{
				DebugLocation(712, 29);
				PushFollow(Follow._variant_generic_parameter_list_in_interface_declaration5501);
				variant_generic_parameter_list695=variant_generic_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variant_generic_parameter_list695.Tree, variant_generic_parameter_list695, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(197); }

			DebugLocation(713, 6);
			// cs.g:713:6: ( interface_base )?
			int alt198=2;
			try { DebugEnterSubRule(198);
			try { DebugEnterDecision(198, false);
			int LA198_0 = input.LA(1);

			if ((LA198_0==79))
			{
				alt198 = 1;
			}
			} finally { DebugExitDecision(198); }
			switch (alt198)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:713:6: interface_base
				{
				DebugLocation(713, 6);
				PushFollow(Follow._interface_base_in_interface_declaration5510);
				interface_base696=interface_base();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_base696.Tree, interface_base696, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(198); }

			DebugLocation(713, 24);
			// cs.g:713:24: ( type_parameter_constraints_clauses )?
			int alt199=2;
			try { DebugEnterSubRule(199);
			try { DebugEnterDecision(199, false);
			int LA199_0 = input.LA(1);

			if ((LA199_0==194))
			{
				alt199 = 1;
			}
			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:713:24: type_parameter_constraints_clauses
				{
				DebugLocation(713, 24);
				PushFollow(Follow._type_parameter_constraints_clauses_in_interface_declaration5515);
				type_parameter_constraints_clauses697=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses697.Tree, type_parameter_constraints_clauses697, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(199); }

			DebugLocation(713, 62);
			PushFollow(Follow._interface_body_in_interface_declaration5520);
			interface_body698=interface_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_body698.Tree, interface_body698, retval);
			DebugLocation(713, 79);
			// cs.g:713:79: ( ';' )?
			int alt200=2;
			try { DebugEnterSubRule(200);
			try { DebugEnterDecision(200, false);
			int LA200_0 = input.LA(1);

			if ((LA200_0==SEMI))
			{
				alt200 = 1;
			}
			} finally { DebugExitDecision(200); }
			switch (alt200)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:713:79: ';'
				{
				DebugLocation(713, 79);
				char_literal699=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_declaration5524), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal699_tree = (object)adaptor.Create(char_literal699, retval);
				adaptor.AddChild(root_0, char_literal699_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(200); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_declaration", 204);
			LeaveRule("interface_declaration", 204);
			LeaveRule_interface_declaration();
			if (state.backtracking > 0) { Memoize(input, 204, interface_declaration_StartIndex); }

		}
		DebugLocation(713, 83);
		} finally { DebugExitRule(GrammarFileName, "interface_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_declaration"

	partial void EnterRule_interface_modifiers();
	partial void LeaveRule_interface_modifiers();

	// $ANTLR start "interface_modifiers"
	// cs.g:714:8: public interface_modifiers : ( modifier )+ ;
	[GrammarRule("interface_modifiers")]
	public XAstParserRuleReturnScope interface_modifiers()
	{
		EnterRule_interface_modifiers();
		EnterRule("interface_modifiers", 205);
		var retval = new XAstParserRuleReturnScope("interface_modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int interface_modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope modifier700 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "interface_modifiers");
		DebugLocation(714, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 205)) { return retval; }

			// cs.g:714:27: ( ( modifier )+ )
			DebugEnterAlt(1);
			// cs.g:715:2: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(715, 2);
			// cs.g:715:2: ( modifier )+
			int cnt201=0;
			try { DebugEnterSubRule(201);
			while (true)
			{
				int alt201=2;
				try { DebugEnterDecision(201, false);
				int LA201_0 = input.LA(1);

				if ((LA201_0==96||LA201_0==125||LA201_0==140||LA201_0==150||LA201_0==156||LA201_0==161||(LA201_0>=163 && LA201_0<=165)||LA201_0==170||LA201_0==176||LA201_0==188||LA201_0==191||LA201_0==193))
				{
					alt201 = 1;
				}


				} finally { DebugExitDecision(201); }
				switch (alt201)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:715:2: modifier
					{
					DebugLocation(715, 2);
					PushFollow(Follow._modifier_in_interface_modifiers5536);
					modifier700=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier700.Tree, modifier700, retval);

					}
					break;

				default:
					if (cnt201 >= 1)
						goto loop201;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee201 = new EarlyExitException( 201, input );
					DebugRecognitionException(eee201);
					throw eee201;
				}
				cnt201++;
			}
			loop201:
				;

			} finally { DebugExitSubRule(201); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_modifiers", 205);
			LeaveRule("interface_modifiers", 205);
			LeaveRule_interface_modifiers();
			if (state.backtracking > 0) { Memoize(input, 205, interface_modifiers_StartIndex); }

		}
		DebugLocation(715, 11);
		} finally { DebugExitRule(GrammarFileName, "interface_modifiers"); }
		return retval;

	}
	// $ANTLR end "interface_modifiers"

	partial void EnterRule_interface_base();
	partial void LeaveRule_interface_base();

	// $ANTLR start "interface_base"
	// cs.g:716:8: public interface_base : ':' interface_type_list ;
	[GrammarRule("interface_base")]
	public XAstParserRuleReturnScope interface_base()
	{
		EnterRule_interface_base();
		EnterRule("interface_base", 206);
		var retval = new XAstParserRuleReturnScope("interface_base");
		
		retval.Start = (IToken)input.LT(1);
		int interface_base_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal701 = default(IToken);
		XAstParserRuleReturnScope interface_type_list702 = default(XAstParserRuleReturnScope);

		object char_literal701_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_base");
		DebugLocation(716, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 206)) { return retval; }

			// cs.g:716:22: ( ':' interface_type_list )
			DebugEnterAlt(1);
			// cs.g:717:5: ':' interface_type_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(717, 5);
			char_literal701=(IToken)Match(input,79,Follow._79_in_interface_base5551); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal701_tree = (object)adaptor.Create(char_literal701, retval);
			adaptor.AddChild(root_0, char_literal701_tree);
			}
			DebugLocation(717, 9);
			PushFollow(Follow._interface_type_list_in_interface_base5553);
			interface_type_list702=interface_type_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_type_list702.Tree, interface_type_list702, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_base", 206);
			LeaveRule("interface_base", 206);
			LeaveRule_interface_base();
			if (state.backtracking > 0) { Memoize(input, 206, interface_base_StartIndex); }

		}
		DebugLocation(717, 28);
		} finally { DebugExitRule(GrammarFileName, "interface_base"); }
		return retval;

	}
	// $ANTLR end "interface_base"

	partial void EnterRule_interface_body();
	partial void LeaveRule_interface_body();

	// $ANTLR start "interface_body"
	// cs.g:718:8: public interface_body : '{' ( interface_member_declarations )? '}' ;
	[GrammarRule("interface_body")]
	public XAstParserRuleReturnScope interface_body()
	{
		EnterRule_interface_body();
		EnterRule("interface_body", 207);
		var retval = new XAstParserRuleReturnScope("interface_body");
		
		retval.Start = (IToken)input.LT(1);
		int interface_body_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal703 = default(IToken);
		IToken char_literal705 = default(IToken);
		XAstParserRuleReturnScope interface_member_declarations704 = default(XAstParserRuleReturnScope);

		object char_literal703_tree = default(object);
		object char_literal705_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_body");
		DebugLocation(718, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 207)) { return retval; }

			// cs.g:718:22: ( '{' ( interface_member_declarations )? '}' )
			DebugEnterAlt(1);
			// cs.g:719:2: '{' ( interface_member_declarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(719, 2);
			char_literal703=(IToken)Match(input,197,Follow._197_in_interface_body5563); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal703_tree = (object)adaptor.Create(char_literal703, retval);
			adaptor.AddChild(root_0, char_literal703_tree);
			}
			DebugLocation(719, 8);
			// cs.g:719:8: ( interface_member_declarations )?
			int alt202=2;
			try { DebugEnterSubRule(202);
			try { DebugEnterDecision(202, false);
			int LA202_0 = input.LA(1);

			if ((LA202_0==DEFINE||LA202_0==ELIF||LA202_0==ENDIF||LA202_0==IDENTIFIER||LA202_0==UNDEF||LA202_0==91||(LA202_0>=95 && LA202_0<=98)||(LA202_0>=100 && LA202_0<=101)||LA202_0==103||(LA202_0>=105 && LA202_0<=106)||LA202_0==109||LA202_0==114||LA202_0==117||(LA202_0>=119 && LA202_0<=120)||(LA202_0>=122 && LA202_0<=123)||(LA202_0>=125 && LA202_0<=126)||LA202_0==129||(LA202_0>=132 && LA202_0<=133)||LA202_0==135||LA202_0==138||(LA202_0>=140 && LA202_0<=141)||(LA202_0>=143 && LA202_0<=144)||(LA202_0>=146 && LA202_0<=148)||(LA202_0>=150 && LA202_0<=152)||LA202_0==154||(LA202_0>=156 && LA202_0<=157)||(LA202_0>=160 && LA202_0<=165)||LA202_0==167||(LA202_0>=169 && LA202_0<=173)||(LA202_0>=176 && LA202_0<=177)||LA202_0==183||(LA202_0>=185 && LA202_0<=186)||(LA202_0>=188 && LA202_0<=194)||LA202_0==196))
			{
				alt202 = 1;
			}
			} finally { DebugExitDecision(202); }
			switch (alt202)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:719:8: interface_member_declarations
				{
				DebugLocation(719, 8);
				PushFollow(Follow._interface_member_declarations_in_interface_body5567);
				interface_member_declarations704=interface_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_member_declarations704.Tree, interface_member_declarations704, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(202); }

			DebugLocation(719, 41);
			char_literal705=(IToken)Match(input,201,Follow._201_in_interface_body5572); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal705_tree = (object)adaptor.Create(char_literal705, retval);
			adaptor.AddChild(root_0, char_literal705_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_body", 207);
			LeaveRule("interface_body", 207);
			LeaveRule_interface_body();
			if (state.backtracking > 0) { Memoize(input, 207, interface_body_StartIndex); }

		}
		DebugLocation(719, 44);
		} finally { DebugExitRule(GrammarFileName, "interface_body"); }
		return retval;

	}
	// $ANTLR end "interface_body"

	partial void EnterRule_interface_member_declarations();
	partial void LeaveRule_interface_member_declarations();

	// $ANTLR start "interface_member_declarations"
	// cs.g:720:8: public interface_member_declarations : ( interface_member_declaration )+ ;
	[GrammarRule("interface_member_declarations")]
	public XAstParserRuleReturnScope interface_member_declarations()
	{
		EnterRule_interface_member_declarations();
		EnterRule("interface_member_declarations", 208);
		var retval = new XAstParserRuleReturnScope("interface_member_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int interface_member_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope interface_member_declaration706 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "interface_member_declarations");
		DebugLocation(720, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 208)) { return retval; }

			// cs.g:720:37: ( ( interface_member_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:721:2: ( interface_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(721, 2);
			// cs.g:721:2: ( interface_member_declaration )+
			int cnt203=0;
			try { DebugEnterSubRule(203);
			while (true)
			{
				int alt203=2;
				try { DebugEnterDecision(203, false);
				int LA203_0 = input.LA(1);

				if ((LA203_0==DEFINE||LA203_0==ELIF||LA203_0==ENDIF||LA203_0==IDENTIFIER||LA203_0==UNDEF||LA203_0==91||(LA203_0>=95 && LA203_0<=98)||(LA203_0>=100 && LA203_0<=101)||LA203_0==103||(LA203_0>=105 && LA203_0<=106)||LA203_0==109||LA203_0==114||LA203_0==117||(LA203_0>=119 && LA203_0<=120)||(LA203_0>=122 && LA203_0<=123)||(LA203_0>=125 && LA203_0<=126)||LA203_0==129||(LA203_0>=132 && LA203_0<=133)||LA203_0==135||LA203_0==138||(LA203_0>=140 && LA203_0<=141)||(LA203_0>=143 && LA203_0<=144)||(LA203_0>=146 && LA203_0<=148)||(LA203_0>=150 && LA203_0<=152)||LA203_0==154||(LA203_0>=156 && LA203_0<=157)||(LA203_0>=160 && LA203_0<=165)||LA203_0==167||(LA203_0>=169 && LA203_0<=173)||(LA203_0>=176 && LA203_0<=177)||LA203_0==183||(LA203_0>=185 && LA203_0<=186)||(LA203_0>=188 && LA203_0<=194)||LA203_0==196))
				{
					alt203 = 1;
				}


				} finally { DebugExitDecision(203); }
				switch (alt203)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:721:2: interface_member_declaration
					{
					DebugLocation(721, 2);
					PushFollow(Follow._interface_member_declaration_in_interface_member_declarations5582);
					interface_member_declaration706=interface_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_member_declaration706.Tree, interface_member_declaration706, retval);

					}
					break;

				default:
					if (cnt203 >= 1)
						goto loop203;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee203 = new EarlyExitException( 203, input );
					DebugRecognitionException(eee203);
					throw eee203;
				}
				cnt203++;
			}
			loop203:
				;

			} finally { DebugExitSubRule(203); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_member_declarations", 208);
			LeaveRule("interface_member_declarations", 208);
			LeaveRule_interface_member_declarations();
			if (state.backtracking > 0) { Memoize(input, 208, interface_member_declarations_StartIndex); }

		}
		DebugLocation(721, 31);
		} finally { DebugExitRule(GrammarFileName, "interface_member_declarations"); }
		return retval;

	}
	// $ANTLR end "interface_member_declarations"

	partial void EnterRule_interface_member_declaration();
	partial void LeaveRule_interface_member_declaration();

	// $ANTLR start "interface_member_declaration"
	// cs.g:722:8: public interface_member_declaration : ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) ;
	[GrammarRule("interface_member_declaration")]
	public XAstParserRuleReturnScope interface_member_declaration()
	{
		EnterRule_interface_member_declaration();
		EnterRule("interface_member_declaration", 209);
		var retval = new XAstParserRuleReturnScope("interface_member_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_member_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal709 = default(IToken);
		XAstParserRuleReturnScope attributes707 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope modifiers708 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_method_declaration710 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_event_declaration711 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type712 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_method_declaration713 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_property_declaration714 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_indexer_declaration715 = default(XAstParserRuleReturnScope);

		object string_literal709_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_member_declaration");
		DebugLocation(722, 2);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 209)) { return retval; }

			// cs.g:722:36: ( ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) )
			DebugEnterAlt(1);
			// cs.g:723:2: ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(723, 2);
			// cs.g:723:2: ( attributes )?
			int alt204=2;
			try { DebugEnterSubRule(204);
			try { DebugEnterDecision(204, false);
			int LA204_0 = input.LA(1);

			if ((LA204_0==91))
			{
				alt204 = 1;
			}
			} finally { DebugExitDecision(204); }
			switch (alt204)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:723:2: attributes
				{
				DebugLocation(723, 2);
				PushFollow(Follow._attributes_in_interface_member_declaration5593);
				attributes707=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes707.Tree, attributes707, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(204); }

			DebugLocation(723, 17);
			// cs.g:723:17: ( modifiers )?
			int alt205=2;
			try { DebugEnterSubRule(205);
			try { DebugEnterDecision(205, false);
			int LA205_0 = input.LA(1);

			if ((LA205_0==96||LA205_0==125||LA205_0==140||LA205_0==150||LA205_0==156||LA205_0==161||(LA205_0>=163 && LA205_0<=165)||LA205_0==170||LA205_0==176||LA205_0==188||LA205_0==191||LA205_0==193))
			{
				alt205 = 1;
			}
			} finally { DebugExitDecision(205); }
			switch (alt205)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:723:17: modifiers
				{
				DebugLocation(723, 17);
				PushFollow(Follow._modifiers_in_interface_member_declaration5599);
				modifiers708=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers708.Tree, modifiers708, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(205); }

			DebugLocation(724, 3);
			// cs.g:724:3: ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
			int alt207=3;
			try { DebugEnterSubRule(207);
			try { DebugEnterDecision(207, false);
			switch (input.LA(1))
			{
			case 192:
				{
				int LA207_1 = input.LA(2);

				if ((LA207_1==DEFINE||LA207_1==ELIF||LA207_1==ENDIF||LA207_1==IDENTIFIER||LA207_1==UNDEF||LA207_1==95||(LA207_1>=97 && LA207_1<=98)||(LA207_1>=100 && LA207_1<=101)||LA207_1==105||LA207_1==117||LA207_1==120||LA207_1==122||LA207_1==126||(LA207_1>=132 && LA207_1<=133)||LA207_1==135||LA207_1==141||(LA207_1>=143 && LA207_1<=144)||(LA207_1>=147 && LA207_1<=148)||LA207_1==152||LA207_1==154||LA207_1==157||LA207_1==160||LA207_1==162||LA207_1==167||(LA207_1>=171 && LA207_1<=172)||LA207_1==183||LA207_1==190||LA207_1==194||LA207_1==196))
				{
					alt207 = 1;
				}
				else if ((LA207_1==69))
				{
					alt207 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 207, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 123:
				{
				alt207 = 2;
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case IDENTIFIER:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 133:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt207 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 207, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:724:4: 'void' interface_method_declaration
				{
				DebugLocation(724, 4);
				string_literal709=(IToken)Match(input,192,Follow._192_in_interface_member_declaration5605); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal709_tree = (object)adaptor.Create(string_literal709, retval);
				adaptor.AddChild(root_0, string_literal709_tree);
				}
				DebugLocation(724, 13);
				PushFollow(Follow._interface_method_declaration_in_interface_member_declaration5609);
				interface_method_declaration710=interface_method_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_method_declaration710.Tree, interface_method_declaration710, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:725:5: interface_event_declaration
				{
				DebugLocation(725, 5);
				PushFollow(Follow._interface_event_declaration_in_interface_member_declaration5615);
				interface_event_declaration711=interface_event_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_event_declaration711.Tree, interface_event_declaration711, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:726:5: type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
				{
				DebugLocation(726, 5);
				PushFollow(Follow._type_in_interface_member_declaration5621);
				type712=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type712.Tree, type712, retval);
				DebugLocation(726, 12);
				// cs.g:726:12: ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
				int alt206=3;
				try { DebugEnterSubRule(206);
				try { DebugEnterDecision(206, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA206_1 = input.LA(2);

					if ((LA206_1==81) && (EvaluatePredicate(synpred26_cs_fragment)))
					{
						alt206 = 1;
					}
					else if ((LA206_1==68) && (EvaluatePredicate(synpred26_cs_fragment)))
					{
						alt206 = 1;
					}
					else if ((LA206_1==197) && (EvaluatePredicate(synpred27_cs_fragment)))
					{
						alt206 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 206, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case DEFINE:
				case ELIF:
				case ENDIF:
				case UNDEF:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 133:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA206_2 = input.LA(2);

					if ((LA206_2==81) && (EvaluatePredicate(synpred26_cs_fragment)))
					{
						alt206 = 1;
					}
					else if ((LA206_2==68) && (EvaluatePredicate(synpred26_cs_fragment)))
					{
						alt206 = 1;
					}
					else if ((LA206_2==197) && (EvaluatePredicate(synpred27_cs_fragment)))
					{
						alt206 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 206, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 180:
					{
					alt206 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 206, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(206); }
				switch (alt206)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:726:14: ( member_name '(' )=> interface_method_declaration
					{
					DebugLocation(726, 37);
					PushFollow(Follow._interface_method_declaration_in_interface_member_declaration5637);
					interface_method_declaration713=interface_method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_method_declaration713.Tree, interface_method_declaration713, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:727:14: ( member_name '{' )=> interface_property_declaration
					{
					DebugLocation(727, 37);
					PushFollow(Follow._interface_property_declaration_in_interface_member_declaration5662);
					interface_property_declaration714=interface_property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_property_declaration714.Tree, interface_property_declaration714, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:728:8: interface_indexer_declaration
					{
					DebugLocation(728, 8);
					PushFollow(Follow._interface_indexer_declaration_in_interface_member_declaration5672);
					interface_indexer_declaration715=interface_indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_indexer_declaration715.Tree, interface_indexer_declaration715, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(206); }


				}
				break;

			}
			} finally { DebugExitSubRule(207); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_member_declaration", 209);
			LeaveRule("interface_member_declaration", 209);
			LeaveRule_interface_member_declaration();
			if (state.backtracking > 0) { Memoize(input, 209, interface_member_declaration_StartIndex); }

		}
		DebugLocation(730, 2);
		} finally { DebugExitRule(GrammarFileName, "interface_member_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_member_declaration"

	partial void EnterRule_interface_property_declaration();
	partial void LeaveRule_interface_property_declaration();

	// $ANTLR start "interface_property_declaration"
	// cs.g:731:8: public interface_property_declaration : identifier '{' interface_accessor_declarations '}' ;
	[GrammarRule("interface_property_declaration")]
	public XAstParserRuleReturnScope interface_property_declaration()
	{
		EnterRule_interface_property_declaration();
		EnterRule("interface_property_declaration", 210);
		var retval = new XAstParserRuleReturnScope("interface_property_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_property_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal717 = default(IToken);
		IToken char_literal719 = default(IToken);
		XAstParserRuleReturnScope identifier716 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_accessor_declarations718 = default(XAstParserRuleReturnScope);

		object char_literal717_tree = default(object);
		object char_literal719_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_property_declaration");
		DebugLocation(731, 58);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 210)) { return retval; }

			// cs.g:731:38: ( identifier '{' interface_accessor_declarations '}' )
			DebugEnterAlt(1);
			// cs.g:732:2: identifier '{' interface_accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(732, 2);
			PushFollow(Follow._identifier_in_interface_property_declaration5691);
			identifier716=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier716.Tree, identifier716, retval);
			DebugLocation(732, 15);
			char_literal717=(IToken)Match(input,197,Follow._197_in_interface_property_declaration5695); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal717_tree = (object)adaptor.Create(char_literal717, retval);
			adaptor.AddChild(root_0, char_literal717_tree);
			}
			DebugLocation(732, 21);
			PushFollow(Follow._interface_accessor_declarations_in_interface_property_declaration5699);
			interface_accessor_declarations718=interface_accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_accessor_declarations718.Tree, interface_accessor_declarations718, retval);
			DebugLocation(732, 55);
			char_literal719=(IToken)Match(input,201,Follow._201_in_interface_property_declaration5703); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal719_tree = (object)adaptor.Create(char_literal719, retval);
			adaptor.AddChild(root_0, char_literal719_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_property_declaration", 210);
			LeaveRule("interface_property_declaration", 210);
			LeaveRule_interface_property_declaration();
			if (state.backtracking > 0) { Memoize(input, 210, interface_property_declaration_StartIndex); }

		}
		DebugLocation(732, 58);
		} finally { DebugExitRule(GrammarFileName, "interface_property_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_property_declaration"

	partial void EnterRule_interface_method_declaration();
	partial void LeaveRule_interface_method_declaration();

	// $ANTLR start "interface_method_declaration"
	// cs.g:733:8: public interface_method_declaration : identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
	[GrammarRule("interface_method_declaration")]
	public XAstParserRuleReturnScope interface_method_declaration()
	{
		EnterRule_interface_method_declaration();
		EnterRule("interface_method_declaration", 211);
		var retval = new XAstParserRuleReturnScope("interface_method_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_method_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal722 = default(IToken);
		IToken char_literal724 = default(IToken);
		IToken char_literal726 = default(IToken);
		XAstParserRuleReturnScope identifier720 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list721 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope formal_parameter_list723 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses725 = default(XAstParserRuleReturnScope);

		object char_literal722_tree = default(object);
		object char_literal724_tree = default(object);
		object char_literal726_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_method_declaration");
		DebugLocation(733, 84);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 211)) { return retval; }

			// cs.g:733:36: ( identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
			DebugEnterAlt(1);
			// cs.g:734:2: identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(734, 2);
			PushFollow(Follow._identifier_in_interface_method_declaration5713);
			identifier720=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier720.Tree, identifier720, retval);
			DebugLocation(734, 15);
			// cs.g:734:15: ( generic_argument_list )?
			int alt208=2;
			try { DebugEnterSubRule(208);
			try { DebugEnterDecision(208, false);
			int LA208_0 = input.LA(1);

			if ((LA208_0==81))
			{
				alt208 = 1;
			}
			} finally { DebugExitDecision(208); }
			switch (alt208)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:734:15: generic_argument_list
				{
				DebugLocation(734, 15);
				PushFollow(Follow._generic_argument_list_in_interface_method_declaration5717);
				generic_argument_list721=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list721.Tree, generic_argument_list721, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(208); }

			DebugLocation(735, 6);
			char_literal722=(IToken)Match(input,68,Follow._68_in_interface_method_declaration5725); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal722_tree = (object)adaptor.Create(char_literal722, retval);
			adaptor.AddChild(root_0, char_literal722_tree);
			}
			DebugLocation(735, 12);
			// cs.g:735:12: ( formal_parameter_list )?
			int alt209=2;
			try { DebugEnterSubRule(209);
			try { DebugEnterDecision(209, false);
			int LA209_0 = input.LA(1);

			if ((LA209_0==DEFINE||LA209_0==ELIF||LA209_0==ENDIF||LA209_0==IDENTIFIER||LA209_0==UNDEF||LA209_0==91||LA209_0==95||(LA209_0>=97 && LA209_0<=98)||(LA209_0>=100 && LA209_0<=101)||LA209_0==103||(LA209_0>=105 && LA209_0<=106)||LA209_0==109||LA209_0==114||LA209_0==117||(LA209_0>=119 && LA209_0<=120)||LA209_0==122||LA209_0==126||LA209_0==129||(LA209_0>=132 && LA209_0<=133)||LA209_0==135||LA209_0==138||LA209_0==141||(LA209_0>=143 && LA209_0<=144)||(LA209_0>=146 && LA209_0<=148)||(LA209_0>=151 && LA209_0<=152)||(LA209_0>=154 && LA209_0<=155)||(LA209_0>=157 && LA209_0<=158)||LA209_0==160||LA209_0==162||(LA209_0>=166 && LA209_0<=167)||LA209_0==169||(LA209_0>=171 && LA209_0<=173)||LA209_0==177||LA209_0==180||LA209_0==183||(LA209_0>=185 && LA209_0<=186)||(LA209_0>=189 && LA209_0<=190)||LA209_0==192||LA209_0==194||LA209_0==196))
			{
				alt209 = 1;
			}
			} finally { DebugExitDecision(209); }
			switch (alt209)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:735:12: formal_parameter_list
				{
				DebugLocation(735, 12);
				PushFollow(Follow._formal_parameter_list_in_interface_method_declaration5729);
				formal_parameter_list723=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list723.Tree, formal_parameter_list723, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(209); }

			DebugLocation(735, 37);
			char_literal724=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_interface_method_declaration5734), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal724_tree = (object)adaptor.Create(char_literal724, retval);
			adaptor.AddChild(root_0, char_literal724_tree);
			}
			DebugLocation(735, 43);
			// cs.g:735:43: ( type_parameter_constraints_clauses )?
			int alt210=2;
			try { DebugEnterSubRule(210);
			try { DebugEnterDecision(210, false);
			int LA210_0 = input.LA(1);

			if ((LA210_0==194))
			{
				alt210 = 1;
			}
			} finally { DebugExitDecision(210); }
			switch (alt210)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:735:43: type_parameter_constraints_clauses
				{
				DebugLocation(735, 43);
				PushFollow(Follow._type_parameter_constraints_clauses_in_interface_method_declaration5738);
				type_parameter_constraints_clauses725=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses725.Tree, type_parameter_constraints_clauses725, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(210); }

			DebugLocation(735, 81);
			char_literal726=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_method_declaration5743), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal726_tree = (object)adaptor.Create(char_literal726, retval);
			adaptor.AddChild(root_0, char_literal726_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_method_declaration", 211);
			LeaveRule("interface_method_declaration", 211);
			LeaveRule_interface_method_declaration();
			if (state.backtracking > 0) { Memoize(input, 211, interface_method_declaration_StartIndex); }

		}
		DebugLocation(735, 84);
		} finally { DebugExitRule(GrammarFileName, "interface_method_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_method_declaration"

	partial void EnterRule_interface_event_declaration();
	partial void LeaveRule_interface_event_declaration();

	// $ANTLR start "interface_event_declaration"
	// cs.g:736:8: public interface_event_declaration : 'event' type identifier ';' ;
	[GrammarRule("interface_event_declaration")]
	public XAstParserRuleReturnScope interface_event_declaration()
	{
		EnterRule_interface_event_declaration();
		EnterRule("interface_event_declaration", 212);
		var retval = new XAstParserRuleReturnScope("interface_event_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_event_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal727 = default(IToken);
		IToken char_literal730 = default(IToken);
		XAstParserRuleReturnScope type728 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier729 = default(XAstParserRuleReturnScope);

		object string_literal727_tree = default(object);
		object char_literal730_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_event_declaration");
		DebugLocation(736, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 212)) { return retval; }

			// cs.g:736:35: ( 'event' type identifier ';' )
			DebugEnterAlt(1);
			// cs.g:738:2: 'event' type identifier ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(738, 2);
			string_literal727=(IToken)Match(input,123,Follow._123_in_interface_event_declaration5756); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal727_tree = (object)adaptor.Create(string_literal727, retval);
			adaptor.AddChild(root_0, string_literal727_tree);
			}
			DebugLocation(738, 12);
			PushFollow(Follow._type_in_interface_event_declaration5760);
			type728=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type728.Tree, type728, retval);
			DebugLocation(738, 19);
			PushFollow(Follow._identifier_in_interface_event_declaration5764);
			identifier729=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier729.Tree, identifier729, retval);
			DebugLocation(738, 32);
			char_literal730=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_event_declaration5768), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal730_tree = (object)adaptor.Create(char_literal730, retval);
			adaptor.AddChild(root_0, char_literal730_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_event_declaration", 212);
			LeaveRule("interface_event_declaration", 212);
			LeaveRule_interface_event_declaration();
			if (state.backtracking > 0) { Memoize(input, 212, interface_event_declaration_StartIndex); }

		}
		DebugLocation(738, 35);
		} finally { DebugExitRule(GrammarFileName, "interface_event_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_event_declaration"

	partial void EnterRule_interface_indexer_declaration();
	partial void LeaveRule_interface_indexer_declaration();

	// $ANTLR start "interface_indexer_declaration"
	// cs.g:739:8: public interface_indexer_declaration : 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' ;
	[GrammarRule("interface_indexer_declaration")]
	public XAstParserRuleReturnScope interface_indexer_declaration()
	{
		EnterRule_interface_indexer_declaration();
		EnterRule("interface_indexer_declaration", 213);
		var retval = new XAstParserRuleReturnScope("interface_indexer_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_indexer_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal731 = default(IToken);
		IToken char_literal732 = default(IToken);
		IToken char_literal734 = default(IToken);
		IToken char_literal735 = default(IToken);
		IToken char_literal737 = default(IToken);
		XAstParserRuleReturnScope formal_parameter_list733 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_accessor_declarations736 = default(XAstParserRuleReturnScope);

		object string_literal731_tree = default(object);
		object char_literal732_tree = default(object);
		object char_literal734_tree = default(object);
		object char_literal735_tree = default(object);
		object char_literal737_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_indexer_declaration");
		DebugLocation(739, 90);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 213)) { return retval; }

			// cs.g:739:37: ( 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' )
			DebugEnterAlt(1);
			// cs.g:741:2: 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(741, 2);
			string_literal731=(IToken)Match(input,180,Follow._180_in_interface_indexer_declaration5782); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal731_tree = (object)adaptor.Create(string_literal731, retval);
			adaptor.AddChild(root_0, string_literal731_tree);
			}
			DebugLocation(741, 11);
			char_literal732=(IToken)Match(input,91,Follow._91_in_interface_indexer_declaration5786); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal732_tree = (object)adaptor.Create(char_literal732, retval);
			adaptor.AddChild(root_0, char_literal732_tree);
			}
			DebugLocation(741, 17);
			PushFollow(Follow._formal_parameter_list_in_interface_indexer_declaration5790);
			formal_parameter_list733=formal_parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list733.Tree, formal_parameter_list733, retval);
			DebugLocation(741, 41);
			char_literal734=(IToken)Match(input,92,Follow._92_in_interface_indexer_declaration5794); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal734_tree = (object)adaptor.Create(char_literal734, retval);
			adaptor.AddChild(root_0, char_literal734_tree);
			}
			DebugLocation(741, 47);
			char_literal735=(IToken)Match(input,197,Follow._197_in_interface_indexer_declaration5798); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal735_tree = (object)adaptor.Create(char_literal735, retval);
			adaptor.AddChild(root_0, char_literal735_tree);
			}
			DebugLocation(741, 53);
			PushFollow(Follow._interface_accessor_declarations_in_interface_indexer_declaration5802);
			interface_accessor_declarations736=interface_accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_accessor_declarations736.Tree, interface_accessor_declarations736, retval);
			DebugLocation(741, 87);
			char_literal737=(IToken)Match(input,201,Follow._201_in_interface_indexer_declaration5806); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal737_tree = (object)adaptor.Create(char_literal737, retval);
			adaptor.AddChild(root_0, char_literal737_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_indexer_declaration", 213);
			LeaveRule("interface_indexer_declaration", 213);
			LeaveRule_interface_indexer_declaration();
			if (state.backtracking > 0) { Memoize(input, 213, interface_indexer_declaration_StartIndex); }

		}
		DebugLocation(741, 90);
		} finally { DebugExitRule(GrammarFileName, "interface_indexer_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_indexer_declaration"

	partial void EnterRule_interface_accessor_declarations();
	partial void LeaveRule_interface_accessor_declarations();

	// $ANTLR start "interface_accessor_declarations"
	// cs.g:742:8: public interface_accessor_declarations : ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) ;
	[GrammarRule("interface_accessor_declarations")]
	public XAstParserRuleReturnScope interface_accessor_declarations()
	{
		EnterRule_interface_accessor_declarations();
		EnterRule("interface_accessor_declarations", 214);
		var retval = new XAstParserRuleReturnScope("interface_accessor_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int interface_accessor_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes738 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_get_accessor_declaration739 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes740 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_set_accessor_declaration741 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_set_accessor_declaration742 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes743 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_get_accessor_declaration744 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "interface_accessor_declarations");
		DebugLocation(742, 92);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 214)) { return retval; }

			// cs.g:742:39: ( ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) )
			DebugEnterAlt(1);
			// cs.g:743:2: ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(743, 2);
			// cs.g:743:2: ( attributes )?
			int alt211=2;
			try { DebugEnterSubRule(211);
			try { DebugEnterDecision(211, false);
			int LA211_0 = input.LA(1);

			if ((LA211_0==91))
			{
				alt211 = 1;
			}
			} finally { DebugExitDecision(211); }
			switch (alt211)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:743:2: attributes
				{
				DebugLocation(743, 2);
				PushFollow(Follow._attributes_in_interface_accessor_declarations5816);
				attributes738=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes738.Tree, attributes738, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(211); }

			DebugLocation(744, 3);
			// cs.g:744:3: ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
			int alt216=2;
			try { DebugEnterSubRule(216);
			try { DebugEnterDecision(216, false);
			int LA216_0 = input.LA(1);

			if ((LA216_0==133))
			{
				alt216 = 1;
			}
			else if ((LA216_0==172))
			{
				alt216 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 216, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(216); }
			switch (alt216)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:744:4: interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )?
				{
				DebugLocation(744, 4);
				PushFollow(Follow._interface_get_accessor_declaration_in_interface_accessor_declarations5825);
				interface_get_accessor_declaration739=interface_get_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_get_accessor_declaration739.Tree, interface_get_accessor_declaration739, retval);
				DebugLocation(744, 41);
				// cs.g:744:41: ( attributes )?
				int alt212=2;
				try { DebugEnterSubRule(212);
				try { DebugEnterDecision(212, false);
				int LA212_0 = input.LA(1);

				if ((LA212_0==91))
				{
					alt212 = 1;
				}
				} finally { DebugExitDecision(212); }
				switch (alt212)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:744:41: attributes
					{
					DebugLocation(744, 41);
					PushFollow(Follow._attributes_in_interface_accessor_declarations5829);
					attributes740=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes740.Tree, attributes740, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(212); }

				DebugLocation(744, 55);
				// cs.g:744:55: ( interface_set_accessor_declaration )?
				int alt213=2;
				try { DebugEnterSubRule(213);
				try { DebugEnterDecision(213, false);
				int LA213_0 = input.LA(1);

				if ((LA213_0==172))
				{
					alt213 = 1;
				}
				} finally { DebugExitDecision(213); }
				switch (alt213)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:744:55: interface_set_accessor_declaration
					{
					DebugLocation(744, 55);
					PushFollow(Follow._interface_set_accessor_declaration_in_interface_accessor_declarations5834);
					interface_set_accessor_declaration741=interface_set_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_set_accessor_declaration741.Tree, interface_set_accessor_declaration741, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(213); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:745:5: interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )?
				{
				DebugLocation(745, 5);
				PushFollow(Follow._interface_set_accessor_declaration_in_interface_accessor_declarations5841);
				interface_set_accessor_declaration742=interface_set_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_set_accessor_declaration742.Tree, interface_set_accessor_declaration742, retval);
				DebugLocation(745, 42);
				// cs.g:745:42: ( attributes )?
				int alt214=2;
				try { DebugEnterSubRule(214);
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==91))
				{
					alt214 = 1;
				}
				} finally { DebugExitDecision(214); }
				switch (alt214)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:745:42: attributes
					{
					DebugLocation(745, 42);
					PushFollow(Follow._attributes_in_interface_accessor_declarations5845);
					attributes743=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes743.Tree, attributes743, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(214); }

				DebugLocation(745, 56);
				// cs.g:745:56: ( interface_get_accessor_declaration )?
				int alt215=2;
				try { DebugEnterSubRule(215);
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==133))
				{
					alt215 = 1;
				}
				} finally { DebugExitDecision(215); }
				switch (alt215)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:745:56: interface_get_accessor_declaration
					{
					DebugLocation(745, 56);
					PushFollow(Follow._interface_get_accessor_declaration_in_interface_accessor_declarations5850);
					interface_get_accessor_declaration744=interface_get_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_get_accessor_declaration744.Tree, interface_get_accessor_declaration744, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(215); }


				}
				break;

			}
			} finally { DebugExitSubRule(216); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_accessor_declarations", 214);
			LeaveRule("interface_accessor_declarations", 214);
			LeaveRule_interface_accessor_declarations();
			if (state.backtracking > 0) { Memoize(input, 214, interface_accessor_declarations_StartIndex); }

		}
		DebugLocation(745, 92);
		} finally { DebugExitRule(GrammarFileName, "interface_accessor_declarations"); }
		return retval;

	}
	// $ANTLR end "interface_accessor_declarations"

	partial void EnterRule_interface_get_accessor_declaration();
	partial void LeaveRule_interface_get_accessor_declaration();

	// $ANTLR start "interface_get_accessor_declaration"
	// cs.g:746:8: public interface_get_accessor_declaration : 'get' ';' ;
	[GrammarRule("interface_get_accessor_declaration")]
	public XAstParserRuleReturnScope interface_get_accessor_declaration()
	{
		EnterRule_interface_get_accessor_declaration();
		EnterRule("interface_get_accessor_declaration", 215);
		var retval = new XAstParserRuleReturnScope("interface_get_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_get_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal745 = default(IToken);
		IToken char_literal746 = default(IToken);

		object string_literal745_tree = default(object);
		object char_literal746_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_get_accessor_declaration");
		DebugLocation(746, 13);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 215)) { return retval; }

			// cs.g:746:42: ( 'get' ';' )
			DebugEnterAlt(1);
			// cs.g:747:2: 'get' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(747, 2);
			string_literal745=(IToken)Match(input,133,Follow._133_in_interface_get_accessor_declaration5862); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal745_tree = (object)adaptor.Create(string_literal745, retval);
			adaptor.AddChild(root_0, string_literal745_tree);
			}
			DebugLocation(747, 10);
			char_literal746=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_get_accessor_declaration5866), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal746_tree = (object)adaptor.Create(char_literal746, retval);
			adaptor.AddChild(root_0, char_literal746_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_get_accessor_declaration", 215);
			LeaveRule("interface_get_accessor_declaration", 215);
			LeaveRule_interface_get_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 215, interface_get_accessor_declaration_StartIndex); }

		}
		DebugLocation(747, 13);
		} finally { DebugExitRule(GrammarFileName, "interface_get_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_get_accessor_declaration"

	partial void EnterRule_interface_set_accessor_declaration();
	partial void LeaveRule_interface_set_accessor_declaration();

	// $ANTLR start "interface_set_accessor_declaration"
	// cs.g:748:8: public interface_set_accessor_declaration : 'set' ';' ;
	[GrammarRule("interface_set_accessor_declaration")]
	public XAstParserRuleReturnScope interface_set_accessor_declaration()
	{
		EnterRule_interface_set_accessor_declaration();
		EnterRule("interface_set_accessor_declaration", 216);
		var retval = new XAstParserRuleReturnScope("interface_set_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_set_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal747 = default(IToken);
		IToken char_literal748 = default(IToken);

		object string_literal747_tree = default(object);
		object char_literal748_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_set_accessor_declaration");
		DebugLocation(748, 13);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 216)) { return retval; }

			// cs.g:748:42: ( 'set' ';' )
			DebugEnterAlt(1);
			// cs.g:749:2: 'set' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(749, 2);
			string_literal747=(IToken)Match(input,172,Follow._172_in_interface_set_accessor_declaration5878); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal747_tree = (object)adaptor.Create(string_literal747, retval);
			adaptor.AddChild(root_0, string_literal747_tree);
			}
			DebugLocation(749, 10);
			char_literal748=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_set_accessor_declaration5882), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal748_tree = (object)adaptor.Create(char_literal748, retval);
			adaptor.AddChild(root_0, char_literal748_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_set_accessor_declaration", 216);
			LeaveRule("interface_set_accessor_declaration", 216);
			LeaveRule_interface_set_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 216, interface_set_accessor_declaration_StartIndex); }

		}
		DebugLocation(749, 13);
		} finally { DebugExitRule(GrammarFileName, "interface_set_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_set_accessor_declaration"

	partial void EnterRule_method_modifiers();
	partial void LeaveRule_method_modifiers();

	// $ANTLR start "method_modifiers"
	// cs.g:750:8: public method_modifiers : ( modifier )+ ;
	[GrammarRule("method_modifiers")]
	public XAstParserRuleReturnScope method_modifiers()
	{
		EnterRule_method_modifiers();
		EnterRule("method_modifiers", 217);
		var retval = new XAstParserRuleReturnScope("method_modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int method_modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope modifier749 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "method_modifiers");
		DebugLocation(750, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 217)) { return retval; }

			// cs.g:750:24: ( ( modifier )+ )
			DebugEnterAlt(1);
			// cs.g:751:2: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(751, 2);
			// cs.g:751:2: ( modifier )+
			int cnt217=0;
			try { DebugEnterSubRule(217);
			while (true)
			{
				int alt217=2;
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==96||LA217_0==125||LA217_0==140||LA217_0==150||LA217_0==156||LA217_0==161||(LA217_0>=163 && LA217_0<=165)||LA217_0==170||LA217_0==176||LA217_0==188||LA217_0==191||LA217_0==193))
				{
					alt217 = 1;
				}


				} finally { DebugExitDecision(217); }
				switch (alt217)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:751:2: modifier
					{
					DebugLocation(751, 2);
					PushFollow(Follow._modifier_in_method_modifiers5894);
					modifier749=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier749.Tree, modifier749, retval);

					}
					break;

				default:
					if (cnt217 >= 1)
						goto loop217;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee217 = new EarlyExitException( 217, input );
					DebugRecognitionException(eee217);
					throw eee217;
				}
				cnt217++;
			}
			loop217:
				;

			} finally { DebugExitSubRule(217); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_modifiers", 217);
			LeaveRule("method_modifiers", 217);
			LeaveRule_method_modifiers();
			if (state.backtracking > 0) { Memoize(input, 217, method_modifiers_StartIndex); }

		}
		DebugLocation(751, 11);
		} finally { DebugExitRule(GrammarFileName, "method_modifiers"); }
		return retval;

	}
	// $ANTLR end "method_modifiers"

	partial void EnterRule_struct_declaration();
	partial void LeaveRule_struct_declaration();

	// $ANTLR start "struct_declaration"
	// cs.g:754:8: public struct_declaration : 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? ;
	[GrammarRule("struct_declaration")]
	public XAstParserRuleReturnScope struct_declaration()
	{
		EnterRule_struct_declaration();
		EnterRule("struct_declaration", 218);
		var retval = new XAstParserRuleReturnScope("struct_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal750 = default(IToken);
		IToken char_literal755 = default(IToken);
		XAstParserRuleReturnScope type_or_generic751 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_interfaces752 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses753 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_body754 = default(XAstParserRuleReturnScope);

		object string_literal750_tree = default(object);
		object char_literal755_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declaration");
		DebugLocation(754, 108);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 218)) { return retval; }

			// cs.g:754:26: ( 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? )
			DebugEnterAlt(1);
			// cs.g:755:2: 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(755, 2);
			string_literal750=(IToken)Match(input,178,Follow._178_in_struct_declaration5908); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal750_tree = (object)adaptor.Create(string_literal750, retval);
			adaptor.AddChild(root_0, string_literal750_tree);
			}
			DebugLocation(755, 13);
			PushFollow(Follow._type_or_generic_in_struct_declaration5912);
			type_or_generic751=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic751.Tree, type_or_generic751, retval);
			DebugLocation(755, 31);
			// cs.g:755:31: ( struct_interfaces )?
			int alt218=2;
			try { DebugEnterSubRule(218);
			try { DebugEnterDecision(218, false);
			int LA218_0 = input.LA(1);

			if ((LA218_0==79))
			{
				alt218 = 1;
			}
			} finally { DebugExitDecision(218); }
			switch (alt218)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:755:31: struct_interfaces
				{
				DebugLocation(755, 31);
				PushFollow(Follow._struct_interfaces_in_struct_declaration5916);
				struct_interfaces752=struct_interfaces();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_interfaces752.Tree, struct_interfaces752, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(218); }

			DebugLocation(755, 52);
			// cs.g:755:52: ( type_parameter_constraints_clauses )?
			int alt219=2;
			try { DebugEnterSubRule(219);
			try { DebugEnterDecision(219, false);
			int LA219_0 = input.LA(1);

			if ((LA219_0==194))
			{
				alt219 = 1;
			}
			} finally { DebugExitDecision(219); }
			switch (alt219)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:755:52: type_parameter_constraints_clauses
				{
				DebugLocation(755, 52);
				PushFollow(Follow._type_parameter_constraints_clauses_in_struct_declaration5921);
				type_parameter_constraints_clauses753=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses753.Tree, type_parameter_constraints_clauses753, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(219); }

			DebugLocation(755, 90);
			PushFollow(Follow._struct_body_in_struct_declaration5926);
			struct_body754=struct_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_body754.Tree, struct_body754, retval);
			DebugLocation(755, 104);
			// cs.g:755:104: ( ';' )?
			int alt220=2;
			try { DebugEnterSubRule(220);
			try { DebugEnterDecision(220, false);
			int LA220_0 = input.LA(1);

			if ((LA220_0==SEMI))
			{
				alt220 = 1;
			}
			} finally { DebugExitDecision(220); }
			switch (alt220)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:755:104: ';'
				{
				DebugLocation(755, 104);
				char_literal755=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_struct_declaration5930), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal755_tree = (object)adaptor.Create(char_literal755, retval);
				adaptor.AddChild(root_0, char_literal755_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(220); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration", 218);
			LeaveRule("struct_declaration", 218);
			LeaveRule_struct_declaration();
			if (state.backtracking > 0) { Memoize(input, 218, struct_declaration_StartIndex); }

		}
		DebugLocation(755, 108);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_declaration"

	partial void EnterRule_struct_modifiers();
	partial void LeaveRule_struct_modifiers();

	// $ANTLR start "struct_modifiers"
	// cs.g:756:8: public struct_modifiers : ( struct_modifier )+ ;
	[GrammarRule("struct_modifiers")]
	public XAstParserRuleReturnScope struct_modifiers()
	{
		EnterRule_struct_modifiers();
		EnterRule("struct_modifiers", 219);
		var retval = new XAstParserRuleReturnScope("struct_modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int struct_modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_modifier756 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_modifiers");
		DebugLocation(756, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 219)) { return retval; }

			// cs.g:756:24: ( ( struct_modifier )+ )
			DebugEnterAlt(1);
			// cs.g:757:2: ( struct_modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(757, 2);
			// cs.g:757:2: ( struct_modifier )+
			int cnt221=0;
			try { DebugEnterSubRule(221);
			while (true)
			{
				int alt221=2;
				try { DebugEnterDecision(221, false);
				int LA221_0 = input.LA(1);

				if ((LA221_0==140||LA221_0==150||LA221_0==161||(LA221_0>=163 && LA221_0<=164)||LA221_0==188))
				{
					alt221 = 1;
				}


				} finally { DebugExitDecision(221); }
				switch (alt221)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:757:2: struct_modifier
					{
					DebugLocation(757, 2);
					PushFollow(Follow._struct_modifier_in_struct_modifiers5941);
					struct_modifier756=struct_modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_modifier756.Tree, struct_modifier756, retval);

					}
					break;

				default:
					if (cnt221 >= 1)
						goto loop221;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee221 = new EarlyExitException( 221, input );
					DebugRecognitionException(eee221);
					throw eee221;
				}
				cnt221++;
			}
			loop221:
				;

			} finally { DebugExitSubRule(221); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_modifiers", 219);
			LeaveRule("struct_modifiers", 219);
			LeaveRule_struct_modifiers();
			if (state.backtracking > 0) { Memoize(input, 219, struct_modifiers_StartIndex); }

		}
		DebugLocation(757, 18);
		} finally { DebugExitRule(GrammarFileName, "struct_modifiers"); }
		return retval;

	}
	// $ANTLR end "struct_modifiers"

	partial void EnterRule_struct_modifier();
	partial void LeaveRule_struct_modifier();

	// $ANTLR start "struct_modifier"
	// cs.g:758:8: public struct_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
	[GrammarRule("struct_modifier")]
	public XAstParserRuleReturnScope struct_modifier()
	{
		EnterRule_struct_modifier();
		EnterRule("struct_modifier", 220);
		var retval = new XAstParserRuleReturnScope("struct_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int struct_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set757 = default(IToken);

		object set757_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_modifier");
		DebugLocation(758, 68);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 220)) { return retval; }

			// cs.g:758:23: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(758, 23);

			set757=(IToken)input.LT(1);
			if (input.LA(1)==140||input.LA(1)==150||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=164)||input.LA(1)==188)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set757, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_modifier", 220);
			LeaveRule("struct_modifier", 220);
			LeaveRule_struct_modifier();
			if (state.backtracking > 0) { Memoize(input, 220, struct_modifier_StartIndex); }

		}
		DebugLocation(759, 68);
		} finally { DebugExitRule(GrammarFileName, "struct_modifier"); }
		return retval;

	}
	// $ANTLR end "struct_modifier"

	partial void EnterRule_struct_interfaces();
	partial void LeaveRule_struct_interfaces();

	// $ANTLR start "struct_interfaces"
	// cs.g:760:8: public struct_interfaces : ':' interface_type_list ;
	[GrammarRule("struct_interfaces")]
	public XAstParserRuleReturnScope struct_interfaces()
	{
		EnterRule_struct_interfaces();
		EnterRule("struct_interfaces", 221);
		var retval = new XAstParserRuleReturnScope("struct_interfaces");
		
		retval.Start = (IToken)input.LT(1);
		int struct_interfaces_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal758 = default(IToken);
		XAstParserRuleReturnScope interface_type_list759 = default(XAstParserRuleReturnScope);

		object char_literal758_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_interfaces");
		DebugLocation(760, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 221)) { return retval; }

			// cs.g:760:25: ( ':' interface_type_list )
			DebugEnterAlt(1);
			// cs.g:761:2: ':' interface_type_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(761, 2);
			char_literal758=(IToken)Match(input,79,Follow._79_in_struct_interfaces5982); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal758_tree = (object)adaptor.Create(char_literal758, retval);
			adaptor.AddChild(root_0, char_literal758_tree);
			}
			DebugLocation(761, 8);
			PushFollow(Follow._interface_type_list_in_struct_interfaces5986);
			interface_type_list759=interface_type_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_type_list759.Tree, interface_type_list759, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_interfaces", 221);
			LeaveRule("struct_interfaces", 221);
			LeaveRule_struct_interfaces();
			if (state.backtracking > 0) { Memoize(input, 221, struct_interfaces_StartIndex); }

		}
		DebugLocation(761, 26);
		} finally { DebugExitRule(GrammarFileName, "struct_interfaces"); }
		return retval;

	}
	// $ANTLR end "struct_interfaces"

	partial void EnterRule_struct_body();
	partial void LeaveRule_struct_body();

	// $ANTLR start "struct_body"
	// cs.g:762:8: public struct_body : '{' ( struct_member_declarations )? '}' ;
	[GrammarRule("struct_body")]
	public XAstParserRuleReturnScope struct_body()
	{
		EnterRule_struct_body();
		EnterRule("struct_body", 222);
		var retval = new XAstParserRuleReturnScope("struct_body");
		
		retval.Start = (IToken)input.LT(1);
		int struct_body_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal760 = default(IToken);
		IToken char_literal762 = default(IToken);
		XAstParserRuleReturnScope struct_member_declarations761 = default(XAstParserRuleReturnScope);

		object char_literal760_tree = default(object);
		object char_literal762_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_body");
		DebugLocation(762, 40);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 222)) { return retval; }

			// cs.g:762:19: ( '{' ( struct_member_declarations )? '}' )
			DebugEnterAlt(1);
			// cs.g:763:2: '{' ( struct_member_declarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(763, 2);
			char_literal760=(IToken)Match(input,197,Follow._197_in_struct_body5995); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal760_tree = (object)adaptor.Create(char_literal760, retval);
			adaptor.AddChild(root_0, char_literal760_tree);
			}
			DebugLocation(763, 8);
			// cs.g:763:8: ( struct_member_declarations )?
			int alt222=2;
			try { DebugEnterSubRule(222);
			try { DebugEnterDecision(222, false);
			int LA222_0 = input.LA(1);

			if ((LA222_0==DEFINE||LA222_0==ELIF||LA222_0==ENDIF||LA222_0==ENUM||LA222_0==IDENTIFIER||LA222_0==UNDEF||LA222_0==91||(LA222_0>=95 && LA222_0<=98)||(LA222_0>=100 && LA222_0<=101)||LA222_0==103||(LA222_0>=105 && LA222_0<=106)||LA222_0==109||(LA222_0>=111 && LA222_0<=112)||LA222_0==114||(LA222_0>=116 && LA222_0<=117)||(LA222_0>=119 && LA222_0<=120)||(LA222_0>=122 && LA222_0<=126)||LA222_0==129||(LA222_0>=132 && LA222_0<=133)||(LA222_0>=135 && LA222_0<=136)||(LA222_0>=138 && LA222_0<=141)||(LA222_0>=143 && LA222_0<=144)||(LA222_0>=146 && LA222_0<=148)||(LA222_0>=150 && LA222_0<=152)||LA222_0==154||(LA222_0>=156 && LA222_0<=157)||(LA222_0>=159 && LA222_0<=165)||LA222_0==167||(LA222_0>=169 && LA222_0<=173)||(LA222_0>=176 && LA222_0<=178)||LA222_0==183||(LA222_0>=185 && LA222_0<=186)||(LA222_0>=188 && LA222_0<=194)||LA222_0==196))
			{
				alt222 = 1;
			}
			} finally { DebugExitDecision(222); }
			switch (alt222)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:763:8: struct_member_declarations
				{
				DebugLocation(763, 8);
				PushFollow(Follow._struct_member_declarations_in_struct_body5999);
				struct_member_declarations761=struct_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_member_declarations761.Tree, struct_member_declarations761, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(222); }

			DebugLocation(763, 38);
			char_literal762=(IToken)Match(input,201,Follow._201_in_struct_body6004); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal762_tree = (object)adaptor.Create(char_literal762, retval);
			adaptor.AddChild(root_0, char_literal762_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_body", 222);
			LeaveRule("struct_body", 222);
			LeaveRule_struct_body();
			if (state.backtracking > 0) { Memoize(input, 222, struct_body_StartIndex); }

		}
		DebugLocation(763, 40);
		} finally { DebugExitRule(GrammarFileName, "struct_body"); }
		return retval;

	}
	// $ANTLR end "struct_body"

	partial void EnterRule_struct_member_declarations();
	partial void LeaveRule_struct_member_declarations();

	// $ANTLR start "struct_member_declarations"
	// cs.g:764:8: public struct_member_declarations : ( struct_member_declaration )+ ;
	[GrammarRule("struct_member_declarations")]
	public XAstParserRuleReturnScope struct_member_declarations()
	{
		EnterRule_struct_member_declarations();
		EnterRule("struct_member_declarations", 223);
		var retval = new XAstParserRuleReturnScope("struct_member_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int struct_member_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_member_declaration763 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_member_declarations");
		DebugLocation(764, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 223)) { return retval; }

			// cs.g:764:34: ( ( struct_member_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:765:2: ( struct_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(765, 2);
			// cs.g:765:2: ( struct_member_declaration )+
			int cnt223=0;
			try { DebugEnterSubRule(223);
			while (true)
			{
				int alt223=2;
				try { DebugEnterDecision(223, false);
				int LA223_0 = input.LA(1);

				if ((LA223_0==DEFINE||LA223_0==ELIF||LA223_0==ENDIF||LA223_0==ENUM||LA223_0==IDENTIFIER||LA223_0==UNDEF||LA223_0==91||(LA223_0>=95 && LA223_0<=98)||(LA223_0>=100 && LA223_0<=101)||LA223_0==103||(LA223_0>=105 && LA223_0<=106)||LA223_0==109||(LA223_0>=111 && LA223_0<=112)||LA223_0==114||(LA223_0>=116 && LA223_0<=117)||(LA223_0>=119 && LA223_0<=120)||(LA223_0>=122 && LA223_0<=126)||LA223_0==129||(LA223_0>=132 && LA223_0<=133)||(LA223_0>=135 && LA223_0<=136)||(LA223_0>=138 && LA223_0<=141)||(LA223_0>=143 && LA223_0<=144)||(LA223_0>=146 && LA223_0<=148)||(LA223_0>=150 && LA223_0<=152)||LA223_0==154||(LA223_0>=156 && LA223_0<=157)||(LA223_0>=159 && LA223_0<=165)||LA223_0==167||(LA223_0>=169 && LA223_0<=173)||(LA223_0>=176 && LA223_0<=178)||LA223_0==183||(LA223_0>=185 && LA223_0<=186)||(LA223_0>=188 && LA223_0<=194)||LA223_0==196))
				{
					alt223 = 1;
				}


				} finally { DebugExitDecision(223); }
				switch (alt223)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:765:2: struct_member_declaration
					{
					DebugLocation(765, 2);
					PushFollow(Follow._struct_member_declaration_in_struct_member_declarations6013);
					struct_member_declaration763=struct_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_member_declaration763.Tree, struct_member_declaration763, retval);

					}
					break;

				default:
					if (cnt223 >= 1)
						goto loop223;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee223 = new EarlyExitException( 223, input );
					DebugRecognitionException(eee223);
					throw eee223;
				}
				cnt223++;
			}
			loop223:
				;

			} finally { DebugExitSubRule(223); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_member_declarations", 223);
			LeaveRule("struct_member_declarations", 223);
			LeaveRule_struct_member_declarations();
			if (state.backtracking > 0) { Memoize(input, 223, struct_member_declarations_StartIndex); }

		}
		DebugLocation(765, 28);
		} finally { DebugExitRule(GrammarFileName, "struct_member_declarations"); }
		return retval;

	}
	// $ANTLR end "struct_member_declarations"

	partial void EnterRule_struct_member_declaration();
	partial void LeaveRule_struct_member_declaration();

	// $ANTLR start "struct_member_declaration"
	// cs.g:766:8: public struct_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) ;
	[GrammarRule("struct_member_declaration")]
	public XAstParserRuleReturnScope struct_member_declaration()
	{
		EnterRule_struct_member_declaration();
		EnterRule("struct_member_declaration", 224);
		var retval = new XAstParserRuleReturnScope("struct_member_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_member_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal765 = default(IToken);
		IToken char_literal768 = default(IToken);
		IToken string_literal770 = default(IToken);
		IToken string_literal777 = default(IToken);
		IToken char_literal783 = default(IToken);
		XAstParserRuleReturnScope m = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes764 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type766 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_declarators767 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope event_declaration769 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration771 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration772 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_declaration773 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration774 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration775 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_declaration776 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration778 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type779 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration780 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope property_declaration781 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name782 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope indexer_declaration784 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope indexer_declaration785 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope field_declaration786 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope operator_declaration787 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration788 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_declaration789 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope delegate_declaration790 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conversion_operator_declaration791 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_declaration792 = default(XAstParserRuleReturnScope);

		object string_literal765_tree = default(object);
		object char_literal768_tree = default(object);
		object string_literal770_tree = default(object);
		object string_literal777_tree = default(object);
		object char_literal783_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_member_declaration");
		DebugLocation(766, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 224)) { return retval; }

			// cs.g:766:33: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) )
			DebugEnterAlt(1);
			// cs.g:767:2: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(767, 2);
			// cs.g:767:2: ( attributes )?
			int alt224=2;
			try { DebugEnterSubRule(224);
			try { DebugEnterDecision(224, false);
			int LA224_0 = input.LA(1);

			if ((LA224_0==91))
			{
				alt224 = 1;
			}
			} finally { DebugExitDecision(224); }
			switch (alt224)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:767:2: attributes
				{
				DebugLocation(767, 2);
				PushFollow(Follow._attributes_in_struct_member_declaration6024);
				attributes764=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes764.Tree, attributes764, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(224); }

			DebugLocation(767, 17);
			// cs.g:767:17: (m= modifiers )?
			int alt225=2;
			try { DebugEnterSubRule(225);
			try { DebugEnterDecision(225, false);
			int LA225_0 = input.LA(1);

			if ((LA225_0==96||LA225_0==125||LA225_0==140||LA225_0==150||LA225_0==156||LA225_0==161||(LA225_0>=163 && LA225_0<=165)||LA225_0==170||LA225_0==176||LA225_0==188||LA225_0==191||LA225_0==193))
			{
				alt225 = 1;
			}
			} finally { DebugExitDecision(225); }
			switch (alt225)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:767:17: m= modifiers
				{
				DebugLocation(767, 17);
				PushFollow(Follow._modifiers_in_struct_member_declaration6031);
				m=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, m.Tree, m, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(225); }

			DebugLocation(768, 2);
			// cs.g:768:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
			int alt228=12;
			try { DebugEnterSubRule(228);
			try { DebugEnterDecision(228, false);
			switch (input.LA(1))
			{
			case 112:
				{
				alt228 = 1;
				}
				break;
			case 123:
				{
				alt228 = 2;
				}
				break;
			case 159:
				{
				alt228 = 3;
				}
				break;
			case 139:
				{
				alt228 = 4;
				}
				break;
			case 111:
				{
				alt228 = 5;
				}
				break;
			case 192:
				{
				int LA228_6 = input.LA(2);

				if ((LA228_6==Character_literal||LA228_6==DEFINE||LA228_6==ELIF||LA228_6==ENDIF||LA228_6==FALSE||(LA228_6>=Hex_number && LA228_6<=IDENTIFIER)||(LA228_6>=NULL && LA228_6<=NUMBER)||LA228_6==Real_literal||LA228_6==STRINGLITERAL||LA228_6==TRUE||LA228_6==UNDEF||LA228_6==Verbatim_string_literal||LA228_6==95||(LA228_6>=97 && LA228_6<=98)||(LA228_6>=100 && LA228_6<=101)||LA228_6==103||(LA228_6>=105 && LA228_6<=106)||LA228_6==109||LA228_6==114||LA228_6==117||(LA228_6>=119 && LA228_6<=120)||LA228_6==122||LA228_6==126||LA228_6==129||(LA228_6>=132 && LA228_6<=133)||LA228_6==135||LA228_6==138||LA228_6==141||(LA228_6>=143 && LA228_6<=144)||(LA228_6>=146 && LA228_6<=148)||(LA228_6>=151 && LA228_6<=152)||LA228_6==154||LA228_6==157||LA228_6==160||LA228_6==162||LA228_6==167||LA228_6==169||(LA228_6>=171 && LA228_6<=173)||LA228_6==177||LA228_6==183||(LA228_6>=185 && LA228_6<=186)||(LA228_6>=189 && LA228_6<=190)||LA228_6==194||LA228_6==196))
				{
					alt228 = 6;
				}
				else if ((LA228_6==69))
				{
					alt228 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt228 = 7;
				}
				break;
			case IDENTIFIER:
				{
				int LA228_8 = input.LA(2);

				if ((LA228_8==Character_literal||LA228_8==DEFINE||LA228_8==DOT||LA228_8==ELIF||LA228_8==ENDIF||LA228_8==FALSE||(LA228_8>=Hex_number && LA228_8<=IDENTIFIER)||(LA228_8>=NULL && LA228_8<=NUMBER)||LA228_8==Real_literal||LA228_8==STRINGLITERAL||LA228_8==TRUE||LA228_8==UNDEF||LA228_8==Verbatim_string_literal||LA228_8==69||(LA228_8>=80 && LA228_8<=81)||LA228_8==89||LA228_8==91||LA228_8==95||(LA228_8>=97 && LA228_8<=98)||(LA228_8>=100 && LA228_8<=101)||LA228_8==103||(LA228_8>=105 && LA228_8<=106)||LA228_8==109||LA228_8==114||LA228_8==117||(LA228_8>=119 && LA228_8<=120)||LA228_8==122||LA228_8==126||LA228_8==129||(LA228_8>=132 && LA228_8<=133)||LA228_8==135||LA228_8==138||LA228_8==141||(LA228_8>=143 && LA228_8<=144)||(LA228_8>=146 && LA228_8<=148)||(LA228_8>=151 && LA228_8<=154)||LA228_8==157||LA228_8==160||LA228_8==162||LA228_8==167||LA228_8==169||(LA228_8>=171 && LA228_8<=173)||LA228_8==177||LA228_8==180||LA228_8==183||(LA228_8>=185 && LA228_8<=186)||(LA228_8>=189 && LA228_8<=190)||LA228_8==194||LA228_8==196))
				{
					alt228 = 7;
				}
				else if ((LA228_8==68))
				{
					alt228 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA228_9 = input.LA(2);

				if ((LA228_9==Character_literal||LA228_9==DEFINE||LA228_9==DOT||LA228_9==ELIF||LA228_9==ENDIF||LA228_9==FALSE||(LA228_9>=Hex_number && LA228_9<=IDENTIFIER)||(LA228_9>=NULL && LA228_9<=NUMBER)||LA228_9==Real_literal||LA228_9==STRINGLITERAL||LA228_9==TRUE||LA228_9==UNDEF||LA228_9==Verbatim_string_literal||LA228_9==69||(LA228_9>=80 && LA228_9<=81)||LA228_9==89||LA228_9==91||LA228_9==95||(LA228_9>=97 && LA228_9<=98)||(LA228_9>=100 && LA228_9<=101)||LA228_9==103||(LA228_9>=105 && LA228_9<=106)||LA228_9==109||LA228_9==114||LA228_9==117||(LA228_9>=119 && LA228_9<=120)||LA228_9==122||LA228_9==126||LA228_9==129||(LA228_9>=132 && LA228_9<=133)||LA228_9==135||LA228_9==138||LA228_9==141||(LA228_9>=143 && LA228_9<=144)||(LA228_9>=146 && LA228_9<=148)||(LA228_9>=151 && LA228_9<=154)||LA228_9==157||LA228_9==160||LA228_9==162||LA228_9==167||LA228_9==169||(LA228_9>=171 && LA228_9<=173)||LA228_9==177||LA228_9==180||LA228_9==183||(LA228_9>=185 && LA228_9<=186)||(LA228_9>=189 && LA228_9<=190)||LA228_9==194||LA228_9==196))
				{
					alt228 = 7;
				}
				else if ((LA228_9==68))
				{
					alt228 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 178:
				{
				alt228 = 8;
				}
				break;
			case ENUM:
				{
				alt228 = 9;
				}
				break;
			case 116:
				{
				alt228 = 10;
				}
				break;
			case 124:
			case 136:
				{
				alt228 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(228); }
			switch (alt228)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:768:4: 'const' type constant_declarators ';'
				{
				DebugLocation(768, 4);
				string_literal765=(IToken)Match(input,112,Follow._112_in_struct_member_declaration6037); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal765_tree = (object)adaptor.Create(string_literal765, retval);
				adaptor.AddChild(root_0, string_literal765_tree);
				}
				DebugLocation(768, 14);
				PushFollow(Follow._type_in_struct_member_declaration6041);
				type766=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type766.Tree, type766, retval);
				DebugLocation(768, 21);
				PushFollow(Follow._constant_declarators_in_struct_member_declaration6045);
				constant_declarators767=constant_declarators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators767.Tree, constant_declarators767, retval);
				DebugLocation(768, 44);
				char_literal768=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_struct_member_declaration6049), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal768_tree = (object)adaptor.Create(char_literal768, retval);
				adaptor.AddChild(root_0, char_literal768_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:769:4: event_declaration
				{
				DebugLocation(769, 4);
				PushFollow(Follow._event_declaration_in_struct_member_declaration6054);
				event_declaration769=event_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, event_declaration769.Tree, event_declaration769, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:770:4: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
				{
				DebugLocation(770, 4);
				string_literal770=(IToken)Match(input,159,Follow._159_in_struct_member_declaration6061); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal770_tree = (object)adaptor.Create(string_literal770, retval);
				adaptor.AddChild(root_0, string_literal770_tree);
				}
				DebugLocation(770, 14);
				// cs.g:770:14: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
				int alt226=4;
				try { DebugEnterSubRule(226);
				try { DebugEnterDecision(226, false);
				switch (input.LA(1))
				{
				case Character_literal:
				case DEFINE:
				case ELIF:
				case ENDIF:
				case FALSE:
				case Hex_number:
				case IDENTIFIER:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case UNDEF:
				case Verbatim_string_literal:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 103:
				case 105:
				case 106:
				case 109:
				case 114:
				case 117:
				case 119:
				case 120:
				case 122:
				case 126:
				case 129:
				case 132:
				case 133:
				case 135:
				case 138:
				case 141:
				case 143:
				case 144:
				case 146:
				case 147:
				case 148:
				case 151:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 169:
				case 171:
				case 172:
				case 173:
				case 177:
				case 183:
				case 185:
				case 186:
				case 189:
				case 190:
				case 194:
				case 196:
					{
					alt226 = 1;
					}
					break;
				case 139:
					{
					alt226 = 2;
					}
					break;
				case 111:
					{
					alt226 = 3;
					}
					break;
				case 178:
					{
					alt226 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 226, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(226); }
				switch (alt226)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:770:15: method_declaration
					{
					DebugLocation(770, 15);
					PushFollow(Follow._method_declaration_in_struct_member_declaration6064);
					method_declaration771=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration771.Tree, method_declaration771, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:771:9: interface_declaration
					{
					DebugLocation(771, 9);
					PushFollow(Follow._interface_declaration_in_struct_member_declaration6075);
					interface_declaration772=interface_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration772.Tree, interface_declaration772, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:772:9: class_declaration
					{
					DebugLocation(772, 9);
					PushFollow(Follow._class_declaration_in_struct_member_declaration6086);
					class_declaration773=class_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration773.Tree, class_declaration773, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// cs.g:773:9: struct_declaration
					{
					DebugLocation(773, 9);
					PushFollow(Follow._struct_declaration_in_struct_member_declaration6097);
					struct_declaration774=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration774.Tree, struct_declaration774, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(226); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:775:4: interface_declaration
				{
				DebugLocation(775, 4);
				PushFollow(Follow._interface_declaration_in_struct_member_declaration6104);
				interface_declaration775=interface_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration775.Tree, interface_declaration775, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:776:4: class_declaration
				{
				DebugLocation(776, 4);
				PushFollow(Follow._class_declaration_in_struct_member_declaration6110);
				class_declaration776=class_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration776.Tree, class_declaration776, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:777:4: 'void' method_declaration
				{
				DebugLocation(777, 4);
				string_literal777=(IToken)Match(input,192,Follow._192_in_struct_member_declaration6117); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal777_tree = (object)adaptor.Create(string_literal777, retval);
				adaptor.AddChild(root_0, string_literal777_tree);
				}
				DebugLocation(777, 13);
				PushFollow(Follow._method_declaration_in_struct_member_declaration6121);
				method_declaration778=method_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration778.Tree, method_declaration778, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:778:4: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				{
				DebugLocation(778, 4);
				PushFollow(Follow._type_in_struct_member_declaration6126);
				type779=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type779.Tree, type779, retval);
				DebugLocation(778, 9);
				// cs.g:778:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				int alt227=6;
				try { DebugEnterSubRule(227);
				try { DebugEnterDecision(227, false);
				switch (input.LA(1))
				{
				case 103:
				case 106:
				case 109:
				case 114:
				case 119:
				case 129:
				case 138:
				case 146:
				case 151:
				case 169:
				case 173:
				case 177:
				case 185:
				case 186:
				case 189:
					{
					int LA227_1 = input.LA(2);

					if ((EvaluatePredicate(synpred28_cs_fragment)))
					{
						alt227 = 1;
					}
					else if ((EvaluatePredicate(synpred29_cs_fragment)))
					{
						alt227 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 227, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA227_2 = input.LA(2);

					if ((EvaluatePredicate(synpred28_cs_fragment)))
					{
						alt227 = 1;
					}
					else if ((EvaluatePredicate(synpred29_cs_fragment)))
					{
						alt227 = 2;
					}
					else if ((EvaluatePredicate(synpred30_cs_fragment)))
					{
						alt227 = 3;
					}
					else if ((true))
					{
						alt227 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 227, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case DEFINE:
				case ELIF:
				case ENDIF:
				case UNDEF:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 133:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA227_3 = input.LA(2);

					if ((EvaluatePredicate(synpred28_cs_fragment)))
					{
						alt227 = 1;
					}
					else if ((EvaluatePredicate(synpred29_cs_fragment)))
					{
						alt227 = 2;
					}
					else if ((EvaluatePredicate(synpred30_cs_fragment)))
					{
						alt227 = 3;
					}
					else if ((true))
					{
						alt227 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 227, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Character_literal:
				case FALSE:
				case Hex_number:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case Verbatim_string_literal:
					{
					int LA227_4 = input.LA(2);

					if ((EvaluatePredicate(synpred28_cs_fragment)))
					{
						alt227 = 1;
					}
					else if ((EvaluatePredicate(synpred29_cs_fragment)))
					{
						alt227 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 227, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 180:
					{
					alt227 = 4;
					}
					break;
				case 153:
					{
					alt227 = 6;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 227, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(227); }
				switch (alt227)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:778:11: ( member_name '(' )=> method_declaration
					{
					DebugLocation(778, 34);
					PushFollow(Follow._method_declaration_in_struct_member_declaration6140);
					method_declaration780=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration780.Tree, method_declaration780, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:779:8: ( member_name '{' )=> property_declaration
					{
					DebugLocation(779, 31);
					PushFollow(Follow._property_declaration_in_struct_member_declaration6159);
					property_declaration781=property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, property_declaration781.Tree, property_declaration781, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:780:8: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
					{
					DebugLocation(780, 40);
					PushFollow(Follow._type_name_in_struct_member_declaration6182);
					type_name782=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name782.Tree, type_name782, retval);
					DebugLocation(780, 50);
					char_literal783=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_struct_member_declaration6184), "DOT"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal783_tree = (object)adaptor.Create(char_literal783, retval);
					adaptor.AddChild(root_0, char_literal783_tree);
					}
					DebugLocation(780, 54);
					PushFollow(Follow._indexer_declaration_in_struct_member_declaration6186);
					indexer_declaration784=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration784.Tree, indexer_declaration784, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// cs.g:781:8: indexer_declaration
					{
					DebugLocation(781, 8);
					PushFollow(Follow._indexer_declaration_in_struct_member_declaration6195);
					indexer_declaration785=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration785.Tree, indexer_declaration785, retval);

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// cs.g:782:11: field_declaration
					{
					DebugLocation(782, 11);
					PushFollow(Follow._field_declaration_in_struct_member_declaration6208);
					field_declaration786=field_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, field_declaration786.Tree, field_declaration786, retval);

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// cs.g:783:11: operator_declaration
					{
					DebugLocation(783, 11);
					PushFollow(Follow._operator_declaration_in_struct_member_declaration6226);
					operator_declaration787=operator_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, operator_declaration787.Tree, operator_declaration787, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(227); }


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:787:4: struct_declaration
				{
				DebugLocation(787, 4);
				PushFollow(Follow._struct_declaration_in_struct_member_declaration6244);
				struct_declaration788=struct_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration788.Tree, struct_declaration788, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:788:4: enum_declaration
				{
				DebugLocation(788, 4);
				PushFollow(Follow._enum_declaration_in_struct_member_declaration6250);
				enum_declaration789=enum_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_declaration789.Tree, enum_declaration789, retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:789:4: delegate_declaration
				{
				DebugLocation(789, 4);
				PushFollow(Follow._delegate_declaration_in_struct_member_declaration6257);
				delegate_declaration790=delegate_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration790.Tree, delegate_declaration790, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// cs.g:790:4: conversion_operator_declaration
				{
				DebugLocation(790, 4);
				PushFollow(Follow._conversion_operator_declaration_in_struct_member_declaration6263);
				conversion_operator_declaration791=conversion_operator_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conversion_operator_declaration791.Tree, conversion_operator_declaration791, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// cs.g:791:4: constructor_declaration
				{
				DebugLocation(791, 4);
				PushFollow(Follow._constructor_declaration_in_struct_member_declaration6268);
				constructor_declaration792=constructor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_declaration792.Tree, constructor_declaration792, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(228); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_member_declaration", 224);
			LeaveRule("struct_member_declaration", 224);
			LeaveRule_struct_member_declaration();
			if (state.backtracking > 0) { Memoize(input, 224, struct_member_declaration_StartIndex); }

		}
		DebugLocation(793, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_member_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_member_declaration"

	partial void EnterRule_indexer_declaration();
	partial void LeaveRule_indexer_declaration();

	// $ANTLR start "indexer_declaration"
	// cs.g:797:8: public indexer_declaration : indexer_declarator '{' accessor_declarations '}' ;
	[GrammarRule("indexer_declaration")]
	public XAstParserRuleReturnScope indexer_declaration()
	{
		EnterRule_indexer_declaration();
		EnterRule("indexer_declaration", 225);
		var retval = new XAstParserRuleReturnScope("indexer_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int indexer_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal794 = default(IToken);
		IToken char_literal796 = default(IToken);
		XAstParserRuleReturnScope indexer_declarator793 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope accessor_declarations795 = default(XAstParserRuleReturnScope);

		object char_literal794_tree = default(object);
		object char_literal796_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "indexer_declaration");
		DebugLocation(797, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 225)) { return retval; }

			// cs.g:797:27: ( indexer_declarator '{' accessor_declarations '}' )
			DebugEnterAlt(1);
			// cs.g:798:2: indexer_declarator '{' accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(798, 2);
			PushFollow(Follow._indexer_declarator_in_indexer_declaration6287);
			indexer_declarator793=indexer_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declarator793.Tree, indexer_declarator793, retval);
			DebugLocation(798, 23);
			char_literal794=(IToken)Match(input,197,Follow._197_in_indexer_declaration6291); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal794_tree = (object)adaptor.Create(char_literal794, retval);
			adaptor.AddChild(root_0, char_literal794_tree);
			}
			DebugLocation(798, 29);
			PushFollow(Follow._accessor_declarations_in_indexer_declaration6295);
			accessor_declarations795=accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_declarations795.Tree, accessor_declarations795, retval);
			DebugLocation(798, 53);
			char_literal796=(IToken)Match(input,201,Follow._201_in_indexer_declaration6299); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal796_tree = (object)adaptor.Create(char_literal796, retval);
			adaptor.AddChild(root_0, char_literal796_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexer_declaration", 225);
			LeaveRule("indexer_declaration", 225);
			LeaveRule_indexer_declaration();
			if (state.backtracking > 0) { Memoize(input, 225, indexer_declaration_StartIndex); }

		}
		DebugLocation(798, 56);
		} finally { DebugExitRule(GrammarFileName, "indexer_declaration"); }
		return retval;

	}
	// $ANTLR end "indexer_declaration"

	partial void EnterRule_indexer_declarator();
	partial void LeaveRule_indexer_declarator();

	// $ANTLR start "indexer_declarator"
	// cs.g:799:8: public indexer_declarator : 'this' '[' formal_parameter_list ']' ;
	[GrammarRule("indexer_declarator")]
	public XAstParserRuleReturnScope indexer_declarator()
	{
		EnterRule_indexer_declarator();
		EnterRule("indexer_declarator", 226);
		var retval = new XAstParserRuleReturnScope("indexer_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int indexer_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal797 = default(IToken);
		IToken char_literal798 = default(IToken);
		IToken char_literal800 = default(IToken);
		XAstParserRuleReturnScope formal_parameter_list799 = default(XAstParserRuleReturnScope);

		object string_literal797_tree = default(object);
		object char_literal798_tree = default(object);
		object char_literal800_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "indexer_declarator");
		DebugLocation(799, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 226)) { return retval; }

			// cs.g:799:26: ( 'this' '[' formal_parameter_list ']' )
			DebugEnterAlt(1);
			// cs.g:801:2: 'this' '[' formal_parameter_list ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(801, 2);
			string_literal797=(IToken)Match(input,180,Follow._180_in_indexer_declarator6311); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal797_tree = (object)adaptor.Create(string_literal797, retval);
			adaptor.AddChild(root_0, string_literal797_tree);
			}
			DebugLocation(801, 11);
			char_literal798=(IToken)Match(input,91,Follow._91_in_indexer_declarator6315); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal798_tree = (object)adaptor.Create(char_literal798, retval);
			adaptor.AddChild(root_0, char_literal798_tree);
			}
			DebugLocation(801, 17);
			PushFollow(Follow._formal_parameter_list_in_indexer_declarator6319);
			formal_parameter_list799=formal_parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list799.Tree, formal_parameter_list799, retval);
			DebugLocation(801, 41);
			char_literal800=(IToken)Match(input,92,Follow._92_in_indexer_declarator6323); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal800_tree = (object)adaptor.Create(char_literal800, retval);
			adaptor.AddChild(root_0, char_literal800_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexer_declarator", 226);
			LeaveRule("indexer_declarator", 226);
			LeaveRule_indexer_declarator();
			if (state.backtracking > 0) { Memoize(input, 226, indexer_declarator_StartIndex); }

		}
		DebugLocation(801, 44);
		} finally { DebugExitRule(GrammarFileName, "indexer_declarator"); }
		return retval;

	}
	// $ANTLR end "indexer_declarator"

	partial void EnterRule_operator_declaration();
	partial void LeaveRule_operator_declaration();

	// $ANTLR start "operator_declaration"
	// cs.g:804:8: public operator_declaration : operator_declarator operator_body ;
	[GrammarRule("operator_declaration")]
	public XAstParserRuleReturnScope operator_declaration()
	{
		EnterRule_operator_declaration();
		EnterRule("operator_declaration", 227);
		var retval = new XAstParserRuleReturnScope("operator_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int operator_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope operator_declarator801 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope operator_body802 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "operator_declaration");
		DebugLocation(804, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 227)) { return retval; }

			// cs.g:804:28: ( operator_declarator operator_body )
			DebugEnterAlt(1);
			// cs.g:805:2: operator_declarator operator_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(805, 2);
			PushFollow(Follow._operator_declarator_in_operator_declaration6336);
			operator_declarator801=operator_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, operator_declarator801.Tree, operator_declarator801, retval);
			DebugLocation(805, 24);
			PushFollow(Follow._operator_body_in_operator_declaration6340);
			operator_body802=operator_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, operator_body802.Tree, operator_body802, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator_declaration", 227);
			LeaveRule("operator_declaration", 227);
			LeaveRule_operator_declaration();
			if (state.backtracking > 0) { Memoize(input, 227, operator_declaration_StartIndex); }

		}
		DebugLocation(805, 37);
		} finally { DebugExitRule(GrammarFileName, "operator_declaration"); }
		return retval;

	}
	// $ANTLR end "operator_declaration"

	partial void EnterRule_operator_declarator();
	partial void LeaveRule_operator_declarator();

	// $ANTLR start "operator_declarator"
	// cs.g:806:8: public operator_declarator : 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator ) ;
	[GrammarRule("operator_declarator")]
	public XAstParserRuleReturnScope operator_declarator()
	{
		EnterRule_operator_declarator();
		EnterRule("operator_declarator", 228);
		var retval = new XAstParserRuleReturnScope("operator_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int operator_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal803 = default(IToken);
		IToken set804 = default(IToken);
		IToken char_literal805 = default(IToken);
		IToken char_literal811 = default(IToken);
		IToken char_literal816 = default(IToken);
		XAstParserRuleReturnScope type806 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier807 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope binary_operator_declarator808 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator_declarator809 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope overloadable_unary_operator810 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type812 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier813 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator_declarator814 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope overloadable_binary_operator815 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type817 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier818 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope binary_operator_declarator819 = default(XAstParserRuleReturnScope);

		object string_literal803_tree = default(object);
		object set804_tree = default(object);
		object char_literal805_tree = default(object);
		object char_literal811_tree = default(object);
		object char_literal816_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "operator_declarator");
		DebugLocation(806, 87);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 228)) { return retval; }

			// cs.g:806:27: ( 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator ) )
			DebugEnterAlt(1);
			// cs.g:807:2: 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(807, 2);
			string_literal803=(IToken)Match(input,153,Follow._153_in_operator_declarator6350); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal803_tree = (object)adaptor.Create(string_literal803, retval);
			adaptor.AddChild(root_0, string_literal803_tree);
			}
			DebugLocation(808, 2);
			// cs.g:808:2: ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator '(' type identifier unary_operator_declarator | overloadable_binary_operator '(' type identifier binary_operator_declarator )
			int alt230=3;
			try { DebugEnterSubRule(230);
			try { DebugEnterDecision(230, false);
			switch (input.LA(1))
			{
			case MINUS:
			case 71:
				{
				alt230 = 1;
				}
				break;
			case FALSE:
			case TRUE:
			case 61:
			case 72:
			case 75:
			case 202:
				{
				alt230 = 2;
				}
				break;
			case GT:
			case 62:
			case 63:
			case 66:
			case 69:
			case 77:
			case 81:
			case 82:
			case 84:
			case 86:
			case 88:
			case 93:
			case 198:
				{
				alt230 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 230, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(230); }
			switch (alt230)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:808:3: ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator )
				{
				DebugLocation(808, 3);

				set804=(IToken)input.LT(1);
				if (input.LA(1)==MINUS||input.LA(1)==71)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set804, retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(808, 17);
				char_literal805=(IToken)Match(input,68,Follow._68_in_operator_declarator6365); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal805_tree = (object)adaptor.Create(char_literal805, retval);
				adaptor.AddChild(root_0, char_literal805_tree);
				}
				DebugLocation(808, 23);
				PushFollow(Follow._type_in_operator_declarator6369);
				type806=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type806.Tree, type806, retval);
				DebugLocation(808, 30);
				PushFollow(Follow._identifier_in_operator_declarator6373);
				identifier807=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier807.Tree, identifier807, retval);
				DebugLocation(808, 43);
				// cs.g:808:43: ( binary_operator_declarator | unary_operator_declarator )
				int alt229=2;
				try { DebugEnterSubRule(229);
				try { DebugEnterDecision(229, false);
				int LA229_0 = input.LA(1);

				if ((LA229_0==74))
				{
					alt229 = 1;
				}
				else if ((LA229_0==RPAREN))
				{
					alt229 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 229, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(229); }
				switch (alt229)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:808:44: binary_operator_declarator
					{
					DebugLocation(808, 44);
					PushFollow(Follow._binary_operator_declarator_in_operator_declarator6378);
					binary_operator_declarator808=binary_operator_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, binary_operator_declarator808.Tree, binary_operator_declarator808, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:808:73: unary_operator_declarator
					{
					DebugLocation(808, 73);
					PushFollow(Follow._unary_operator_declarator_in_operator_declarator6382);
					unary_operator_declarator809=unary_operator_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator_declarator809.Tree, unary_operator_declarator809, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(229); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:809:5: overloadable_unary_operator '(' type identifier unary_operator_declarator
				{
				DebugLocation(809, 5);
				PushFollow(Follow._overloadable_unary_operator_in_operator_declarator6389);
				overloadable_unary_operator810=overloadable_unary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, overloadable_unary_operator810.Tree, overloadable_unary_operator810, retval);
				DebugLocation(809, 35);
				char_literal811=(IToken)Match(input,68,Follow._68_in_operator_declarator6393); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal811_tree = (object)adaptor.Create(char_literal811, retval);
				adaptor.AddChild(root_0, char_literal811_tree);
				}
				DebugLocation(809, 41);
				PushFollow(Follow._type_in_operator_declarator6397);
				type812=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type812.Tree, type812, retval);
				DebugLocation(809, 46);
				PushFollow(Follow._identifier_in_operator_declarator6399);
				identifier813=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier813.Tree, identifier813, retval);
				DebugLocation(809, 59);
				PushFollow(Follow._unary_operator_declarator_in_operator_declarator6403);
				unary_operator_declarator814=unary_operator_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator_declarator814.Tree, unary_operator_declarator814, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:810:5: overloadable_binary_operator '(' type identifier binary_operator_declarator
				{
				DebugLocation(810, 5);
				PushFollow(Follow._overloadable_binary_operator_in_operator_declarator6409);
				overloadable_binary_operator815=overloadable_binary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, overloadable_binary_operator815.Tree, overloadable_binary_operator815, retval);
				DebugLocation(810, 36);
				char_literal816=(IToken)Match(input,68,Follow._68_in_operator_declarator6413); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal816_tree = (object)adaptor.Create(char_literal816, retval);
				adaptor.AddChild(root_0, char_literal816_tree);
				}
				DebugLocation(810, 42);
				PushFollow(Follow._type_in_operator_declarator6417);
				type817=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type817.Tree, type817, retval);
				DebugLocation(810, 47);
				PushFollow(Follow._identifier_in_operator_declarator6419);
				identifier818=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier818.Tree, identifier818, retval);
				DebugLocation(810, 60);
				PushFollow(Follow._binary_operator_declarator_in_operator_declarator6423);
				binary_operator_declarator819=binary_operator_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, binary_operator_declarator819.Tree, binary_operator_declarator819, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(230); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator_declarator", 228);
			LeaveRule("operator_declarator", 228);
			LeaveRule_operator_declarator();
			if (state.backtracking > 0) { Memoize(input, 228, operator_declarator_StartIndex); }

		}
		DebugLocation(810, 87);
		} finally { DebugExitRule(GrammarFileName, "operator_declarator"); }
		return retval;

	}
	// $ANTLR end "operator_declarator"

	partial void EnterRule_unary_operator_declarator();
	partial void LeaveRule_unary_operator_declarator();

	// $ANTLR start "unary_operator_declarator"
	// cs.g:811:8: public unary_operator_declarator : ')' ;
	[GrammarRule("unary_operator_declarator")]
	public XAstParserRuleReturnScope unary_operator_declarator()
	{
		EnterRule_unary_operator_declarator();
		EnterRule("unary_operator_declarator", 229);
		var retval = new XAstParserRuleReturnScope("unary_operator_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int unary_operator_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal820 = default(IToken);

		object char_literal820_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_operator_declarator");
		DebugLocation(811, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 229)) { return retval; }

			// cs.g:811:33: ( ')' )
			DebugEnterAlt(1);
			// cs.g:812:5: ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(812, 5);
			char_literal820=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_unary_operator_declarator6437), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal820_tree = (object)adaptor.Create(char_literal820, retval);
			adaptor.AddChild(root_0, char_literal820_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator_declarator", 229);
			LeaveRule("unary_operator_declarator", 229);
			LeaveRule_unary_operator_declarator();
			if (state.backtracking > 0) { Memoize(input, 229, unary_operator_declarator_StartIndex); }

		}
		DebugLocation(812, 8);
		} finally { DebugExitRule(GrammarFileName, "unary_operator_declarator"); }
		return retval;

	}
	// $ANTLR end "unary_operator_declarator"

	partial void EnterRule_overloadable_unary_operator();
	partial void LeaveRule_overloadable_unary_operator();

	// $ANTLR start "overloadable_unary_operator"
	// cs.g:813:8: public overloadable_unary_operator : ( '!' | '~' | '++' | '--' | 'true' | 'false' );
	[GrammarRule("overloadable_unary_operator")]
	public XAstParserRuleReturnScope overloadable_unary_operator()
	{
		EnterRule_overloadable_unary_operator();
		EnterRule("overloadable_unary_operator", 230);
		var retval = new XAstParserRuleReturnScope("overloadable_unary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int overloadable_unary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set821 = default(IToken);

		object set821_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "overloadable_unary_operator");
		DebugLocation(813, 67);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 230)) { return retval; }

			// cs.g:813:35: ( '!' | '~' | '++' | '--' | 'true' | 'false' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(813, 35);

			set821=(IToken)input.LT(1);
			if (input.LA(1)==FALSE||input.LA(1)==TRUE||input.LA(1)==61||input.LA(1)==72||input.LA(1)==75||input.LA(1)==202)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set821, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overloadable_unary_operator", 230);
			LeaveRule("overloadable_unary_operator", 230);
			LeaveRule_overloadable_unary_operator();
			if (state.backtracking > 0) { Memoize(input, 230, overloadable_unary_operator_StartIndex); }

		}
		DebugLocation(814, 67);
		} finally { DebugExitRule(GrammarFileName, "overloadable_unary_operator"); }
		return retval;

	}
	// $ANTLR end "overloadable_unary_operator"

	partial void EnterRule_binary_operator_declarator();
	partial void LeaveRule_binary_operator_declarator();

	// $ANTLR start "binary_operator_declarator"
	// cs.g:815:8: public binary_operator_declarator : ',' type identifier ')' ;
	[GrammarRule("binary_operator_declarator")]
	public XAstParserRuleReturnScope binary_operator_declarator()
	{
		EnterRule_binary_operator_declarator();
		EnterRule("binary_operator_declarator", 231);
		var retval = new XAstParserRuleReturnScope("binary_operator_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int binary_operator_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal822 = default(IToken);
		IToken char_literal825 = default(IToken);
		XAstParserRuleReturnScope type823 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier824 = default(XAstParserRuleReturnScope);

		object char_literal822_tree = default(object);
		object char_literal825_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "binary_operator_declarator");
		DebugLocation(815, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 231)) { return retval; }

			// cs.g:815:34: ( ',' type identifier ')' )
			DebugEnterAlt(1);
			// cs.g:816:2: ',' type identifier ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(816, 2);
			char_literal822=(IToken)Match(input,74,Follow._74_in_binary_operator_declarator6484); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal822_tree = (object)adaptor.Create(char_literal822, retval);
			adaptor.AddChild(root_0, char_literal822_tree);
			}
			DebugLocation(816, 8);
			PushFollow(Follow._type_in_binary_operator_declarator6488);
			type823=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type823.Tree, type823, retval);
			DebugLocation(816, 15);
			PushFollow(Follow._identifier_in_binary_operator_declarator6492);
			identifier824=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier824.Tree, identifier824, retval);
			DebugLocation(816, 28);
			char_literal825=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_binary_operator_declarator6496), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal825_tree = (object)adaptor.Create(char_literal825, retval);
			adaptor.AddChild(root_0, char_literal825_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("binary_operator_declarator", 231);
			LeaveRule("binary_operator_declarator", 231);
			LeaveRule_binary_operator_declarator();
			if (state.backtracking > 0) { Memoize(input, 231, binary_operator_declarator_StartIndex); }

		}
		DebugLocation(816, 31);
		} finally { DebugExitRule(GrammarFileName, "binary_operator_declarator"); }
		return retval;

	}
	// $ANTLR end "binary_operator_declarator"

	partial void EnterRule_overloadable_binary_operator();
	partial void LeaveRule_overloadable_binary_operator();

	// $ANTLR start "overloadable_binary_operator"
	// cs.g:818:8: public overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
	[GrammarRule("overloadable_binary_operator")]
	public XAstParserRuleReturnScope overloadable_binary_operator()
	{
		EnterRule_overloadable_binary_operator();
		EnterRule("overloadable_binary_operator", 232);
		var retval = new XAstParserRuleReturnScope("overloadable_binary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int overloadable_binary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal826 = default(IToken);
		IToken char_literal827 = default(IToken);
		IToken char_literal828 = default(IToken);
		IToken char_literal829 = default(IToken);
		IToken char_literal830 = default(IToken);
		IToken char_literal831 = default(IToken);
		IToken string_literal832 = default(IToken);
		IToken char_literal833 = default(IToken);
		IToken char_literal834 = default(IToken);
		IToken string_literal835 = default(IToken);
		IToken string_literal836 = default(IToken);
		IToken char_literal837 = default(IToken);
		IToken char_literal838 = default(IToken);
		IToken string_literal839 = default(IToken);
		IToken string_literal840 = default(IToken);

		object char_literal826_tree = default(object);
		object char_literal827_tree = default(object);
		object char_literal828_tree = default(object);
		object char_literal829_tree = default(object);
		object char_literal830_tree = default(object);
		object char_literal831_tree = default(object);
		object string_literal832_tree = default(object);
		object char_literal833_tree = default(object);
		object char_literal834_tree = default(object);
		object string_literal835_tree = default(object);
		object string_literal836_tree = default(object);
		object char_literal837_tree = default(object);
		object char_literal838_tree = default(object);
		object string_literal839_tree = default(object);
		object string_literal840_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "overloadable_binary_operator");
		DebugLocation(818, 109);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 232)) { return retval; }

			// cs.g:818:36: ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
			int alt231=14;
			try { DebugEnterDecision(231, false);
			switch (input.LA(1))
			{
			case 69:
				{
				alt231 = 1;
				}
				break;
			case 77:
				{
				alt231 = 2;
				}
				break;
			case 63:
				{
				alt231 = 3;
				}
				break;
			case 66:
				{
				alt231 = 4;
				}
				break;
			case 198:
				{
				alt231 = 5;
				}
				break;
			case 93:
				{
				alt231 = 6;
				}
				break;
			case 82:
				{
				alt231 = 7;
				}
				break;
			case GT:
				{
				int LA231_8 = input.LA(2);

				if ((LA231_8==GT))
				{
					alt231 = 8;
				}
				else if ((LA231_8==68))
				{
					alt231 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 231, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 86:
				{
				alt231 = 9;
				}
				break;
			case 62:
				{
				alt231 = 10;
				}
				break;
			case 81:
				{
				alt231 = 12;
				}
				break;
			case 88:
				{
				alt231 = 13;
				}
				break;
			case 84:
				{
				alt231 = 14;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 231, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(231); }
			switch (alt231)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:819:19: '*'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 19);
				char_literal826=(IToken)Match(input,69,Follow._69_in_overloadable_binary_operator6509); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal826_tree = (object)adaptor.Create(char_literal826, retval);
				adaptor.AddChild(root_0, char_literal826_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:819:25: '/'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 25);
				char_literal827=(IToken)Match(input,77,Follow._77_in_overloadable_binary_operator6513); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal827_tree = (object)adaptor.Create(char_literal827, retval);
				adaptor.AddChild(root_0, char_literal827_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:819:31: '%'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 31);
				char_literal828=(IToken)Match(input,63,Follow._63_in_overloadable_binary_operator6517); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal828_tree = (object)adaptor.Create(char_literal828, retval);
				adaptor.AddChild(root_0, char_literal828_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:819:37: '&'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 37);
				char_literal829=(IToken)Match(input,66,Follow._66_in_overloadable_binary_operator6521); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal829_tree = (object)adaptor.Create(char_literal829, retval);
				adaptor.AddChild(root_0, char_literal829_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:819:43: '|'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 43);
				char_literal830=(IToken)Match(input,198,Follow._198_in_overloadable_binary_operator6525); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal830_tree = (object)adaptor.Create(char_literal830, retval);
				adaptor.AddChild(root_0, char_literal830_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:819:49: '^'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 49);
				char_literal831=(IToken)Match(input,93,Follow._93_in_overloadable_binary_operator6529); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal831_tree = (object)adaptor.Create(char_literal831, retval);
				adaptor.AddChild(root_0, char_literal831_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:819:55: '<<'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 55);
				string_literal832=(IToken)Match(input,82,Follow._82_in_overloadable_binary_operator6533); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal832_tree = (object)adaptor.Create(string_literal832, retval);
				adaptor.AddChild(root_0, string_literal832_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:819:62: '>' '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 62);
				char_literal833=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator6537), "GT"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal833_tree = (object)adaptor.Create(char_literal833, retval);
				adaptor.AddChild(root_0, char_literal833_tree);
				}
				DebugLocation(819, 66);
				char_literal834=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator6539), "GT"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal834_tree = (object)adaptor.Create(char_literal834, retval);
				adaptor.AddChild(root_0, char_literal834_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:819:72: '=='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 72);
				string_literal835=(IToken)Match(input,86,Follow._86_in_overloadable_binary_operator6543); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal835_tree = (object)adaptor.Create(string_literal835, retval);
				adaptor.AddChild(root_0, string_literal835_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:819:79: '!='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 79);
				string_literal836=(IToken)Match(input,62,Follow._62_in_overloadable_binary_operator6547); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal836_tree = (object)adaptor.Create(string_literal836, retval);
				adaptor.AddChild(root_0, string_literal836_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// cs.g:819:86: '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 86);
				char_literal837=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator6551), "GT"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal837_tree = (object)adaptor.Create(char_literal837, retval);
				adaptor.AddChild(root_0, char_literal837_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// cs.g:819:92: '<'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 92);
				char_literal838=(IToken)Match(input,81,Follow._81_in_overloadable_binary_operator6555); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal838_tree = (object)adaptor.Create(char_literal838, retval);
				adaptor.AddChild(root_0, char_literal838_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// cs.g:819:98: '>='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 98);
				string_literal839=(IToken)Match(input,88,Follow._88_in_overloadable_binary_operator6559); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal839_tree = (object)adaptor.Create(string_literal839, retval);
				adaptor.AddChild(root_0, string_literal839_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// cs.g:819:105: '<='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 105);
				string_literal840=(IToken)Match(input,84,Follow._84_in_overloadable_binary_operator6563); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal840_tree = (object)adaptor.Create(string_literal840, retval);
				adaptor.AddChild(root_0, string_literal840_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overloadable_binary_operator", 232);
			LeaveRule("overloadable_binary_operator", 232);
			LeaveRule_overloadable_binary_operator();
			if (state.backtracking > 0) { Memoize(input, 232, overloadable_binary_operator_StartIndex); }

		}
		DebugLocation(819, 109);
		} finally { DebugExitRule(GrammarFileName, "overloadable_binary_operator"); }
		return retval;

	}
	// $ANTLR end "overloadable_binary_operator"

	partial void EnterRule_conversion_operator_declaration();
	partial void LeaveRule_conversion_operator_declaration();

	// $ANTLR start "conversion_operator_declaration"
	// cs.g:821:8: public conversion_operator_declaration : conversion_operator_declarator operator_body ;
	[GrammarRule("conversion_operator_declaration")]
	public XAstParserRuleReturnScope conversion_operator_declaration()
	{
		EnterRule_conversion_operator_declaration();
		EnterRule("conversion_operator_declaration", 233);
		var retval = new XAstParserRuleReturnScope("conversion_operator_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int conversion_operator_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope conversion_operator_declarator841 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope operator_body842 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "conversion_operator_declaration");
		DebugLocation(821, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 233)) { return retval; }

			// cs.g:821:39: ( conversion_operator_declarator operator_body )
			DebugEnterAlt(1);
			// cs.g:822:2: conversion_operator_declarator operator_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(822, 2);
			PushFollow(Follow._conversion_operator_declarator_in_conversion_operator_declaration6575);
			conversion_operator_declarator841=conversion_operator_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conversion_operator_declarator841.Tree, conversion_operator_declarator841, retval);
			DebugLocation(822, 35);
			PushFollow(Follow._operator_body_in_conversion_operator_declaration6579);
			operator_body842=operator_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, operator_body842.Tree, operator_body842, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion_operator_declaration", 233);
			LeaveRule("conversion_operator_declaration", 233);
			LeaveRule_conversion_operator_declaration();
			if (state.backtracking > 0) { Memoize(input, 233, conversion_operator_declaration_StartIndex); }

		}
		DebugLocation(822, 48);
		} finally { DebugExitRule(GrammarFileName, "conversion_operator_declaration"); }
		return retval;

	}
	// $ANTLR end "conversion_operator_declaration"

	partial void EnterRule_conversion_operator_declarator();
	partial void LeaveRule_conversion_operator_declarator();

	// $ANTLR start "conversion_operator_declarator"
	// cs.g:823:8: public conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
	[GrammarRule("conversion_operator_declarator")]
	public XAstParserRuleReturnScope conversion_operator_declarator()
	{
		EnterRule_conversion_operator_declarator();
		EnterRule("conversion_operator_declarator", 234);
		var retval = new XAstParserRuleReturnScope("conversion_operator_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int conversion_operator_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set843 = default(IToken);
		IToken string_literal844 = default(IToken);
		IToken char_literal846 = default(IToken);
		IToken char_literal849 = default(IToken);
		XAstParserRuleReturnScope type845 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type847 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier848 = default(XAstParserRuleReturnScope);

		object set843_tree = default(object);
		object string_literal844_tree = default(object);
		object char_literal846_tree = default(object);
		object char_literal849_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conversion_operator_declarator");
		DebugLocation(823, 78);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 234)) { return retval; }

			// cs.g:823:38: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
			DebugEnterAlt(1);
			// cs.g:824:2: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(824, 2);

			set843=(IToken)input.LT(1);
			if (input.LA(1)==124||input.LA(1)==136)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set843, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(824, 29);
			string_literal844=(IToken)Match(input,153,Follow._153_in_conversion_operator_declarator6598); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal844_tree = (object)adaptor.Create(string_literal844, retval);
			adaptor.AddChild(root_0, string_literal844_tree);
			}
			DebugLocation(824, 42);
			PushFollow(Follow._type_in_conversion_operator_declarator6602);
			type845=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type845.Tree, type845, retval);
			DebugLocation(824, 49);
			char_literal846=(IToken)Match(input,68,Follow._68_in_conversion_operator_declarator6606); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal846_tree = (object)adaptor.Create(char_literal846, retval);
			adaptor.AddChild(root_0, char_literal846_tree);
			}
			DebugLocation(824, 55);
			PushFollow(Follow._type_in_conversion_operator_declarator6610);
			type847=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type847.Tree, type847, retval);
			DebugLocation(824, 62);
			PushFollow(Follow._identifier_in_conversion_operator_declarator6614);
			identifier848=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier848.Tree, identifier848, retval);
			DebugLocation(824, 75);
			char_literal849=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_conversion_operator_declarator6618), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal849_tree = (object)adaptor.Create(char_literal849, retval);
			adaptor.AddChild(root_0, char_literal849_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion_operator_declarator", 234);
			LeaveRule("conversion_operator_declarator", 234);
			LeaveRule_conversion_operator_declarator();
			if (state.backtracking > 0) { Memoize(input, 234, conversion_operator_declarator_StartIndex); }

		}
		DebugLocation(824, 78);
		} finally { DebugExitRule(GrammarFileName, "conversion_operator_declarator"); }
		return retval;

	}
	// $ANTLR end "conversion_operator_declarator"

	partial void EnterRule_operator_body();
	partial void LeaveRule_operator_body();

	// $ANTLR start "operator_body"
	// cs.g:825:8: public operator_body : block ;
	[GrammarRule("operator_body")]
	public XAstParserRuleReturnScope operator_body()
	{
		EnterRule_operator_body();
		EnterRule("operator_body", 235);
		var retval = new XAstParserRuleReturnScope("operator_body");
		
		retval.Start = (IToken)input.LT(1);
		int operator_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block850 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "operator_body");
		DebugLocation(825, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 235)) { return retval; }

			// cs.g:825:21: ( block )
			DebugEnterAlt(1);
			// cs.g:826:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(826, 2);
			PushFollow(Follow._block_in_operator_body6628);
			block850=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block850.Tree, block850, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator_body", 235);
			LeaveRule("operator_body", 235);
			LeaveRule_operator_body();
			if (state.backtracking > 0) { Memoize(input, 235, operator_body_StartIndex); }

		}
		DebugLocation(826, 7);
		} finally { DebugExitRule(GrammarFileName, "operator_body"); }
		return retval;

	}
	// $ANTLR end "operator_body"

	partial void EnterRule_constructor_declaration();
	partial void LeaveRule_constructor_declaration();

	// $ANTLR start "constructor_declaration"
	// cs.g:829:8: public constructor_declaration : constructor_declarator constructor_body ;
	[GrammarRule("constructor_declaration")]
	public XAstParserRuleReturnScope constructor_declaration()
	{
		EnterRule_constructor_declaration();
		EnterRule("constructor_declaration", 236);
		var retval = new XAstParserRuleReturnScope("constructor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int constructor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope constructor_declarator851 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_body852 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constructor_declaration");
		DebugLocation(829, 43);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 236)) { return retval; }

			// cs.g:829:31: ( constructor_declarator constructor_body )
			DebugEnterAlt(1);
			// cs.g:830:2: constructor_declarator constructor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(830, 2);
			PushFollow(Follow._constructor_declarator_in_constructor_declaration6640);
			constructor_declarator851=constructor_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_declarator851.Tree, constructor_declarator851, retval);
			DebugLocation(830, 27);
			PushFollow(Follow._constructor_body_in_constructor_declaration6644);
			constructor_body852=constructor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_body852.Tree, constructor_body852, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_declaration", 236);
			LeaveRule("constructor_declaration", 236);
			LeaveRule_constructor_declaration();
			if (state.backtracking > 0) { Memoize(input, 236, constructor_declaration_StartIndex); }

		}
		DebugLocation(830, 43);
		} finally { DebugExitRule(GrammarFileName, "constructor_declaration"); }
		return retval;

	}
	// $ANTLR end "constructor_declaration"

	partial void EnterRule_constructor_declarator();
	partial void LeaveRule_constructor_declarator();

	// $ANTLR start "constructor_declarator"
	// cs.g:831:8: public constructor_declarator : identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? ;
	[GrammarRule("constructor_declarator")]
	public XAstParserRuleReturnScope constructor_declarator()
	{
		EnterRule_constructor_declarator();
		EnterRule("constructor_declarator", 237);
		var retval = new XAstParserRuleReturnScope("constructor_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int constructor_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal854 = default(IToken);
		IToken char_literal856 = default(IToken);
		XAstParserRuleReturnScope identifier853 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope formal_parameter_list855 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_initializer857 = default(XAstParserRuleReturnScope);

		object char_literal854_tree = default(object);
		object char_literal856_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constructor_declarator");
		DebugLocation(831, 76);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 237)) { return retval; }

			// cs.g:831:30: ( identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? )
			DebugEnterAlt(1);
			// cs.g:832:2: identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(832, 2);
			PushFollow(Follow._identifier_in_constructor_declarator6654);
			identifier853=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier853.Tree, identifier853, retval);
			DebugLocation(832, 15);
			char_literal854=(IToken)Match(input,68,Follow._68_in_constructor_declarator6658); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal854_tree = (object)adaptor.Create(char_literal854, retval);
			adaptor.AddChild(root_0, char_literal854_tree);
			}
			DebugLocation(832, 21);
			// cs.g:832:21: ( formal_parameter_list )?
			int alt232=2;
			try { DebugEnterSubRule(232);
			try { DebugEnterDecision(232, false);
			int LA232_0 = input.LA(1);

			if ((LA232_0==DEFINE||LA232_0==ELIF||LA232_0==ENDIF||LA232_0==IDENTIFIER||LA232_0==UNDEF||LA232_0==91||LA232_0==95||(LA232_0>=97 && LA232_0<=98)||(LA232_0>=100 && LA232_0<=101)||LA232_0==103||(LA232_0>=105 && LA232_0<=106)||LA232_0==109||LA232_0==114||LA232_0==117||(LA232_0>=119 && LA232_0<=120)||LA232_0==122||LA232_0==126||LA232_0==129||(LA232_0>=132 && LA232_0<=133)||LA232_0==135||LA232_0==138||LA232_0==141||(LA232_0>=143 && LA232_0<=144)||(LA232_0>=146 && LA232_0<=148)||(LA232_0>=151 && LA232_0<=152)||(LA232_0>=154 && LA232_0<=155)||(LA232_0>=157 && LA232_0<=158)||LA232_0==160||LA232_0==162||(LA232_0>=166 && LA232_0<=167)||LA232_0==169||(LA232_0>=171 && LA232_0<=173)||LA232_0==177||LA232_0==180||LA232_0==183||(LA232_0>=185 && LA232_0<=186)||(LA232_0>=189 && LA232_0<=190)||LA232_0==192||LA232_0==194||LA232_0==196))
			{
				alt232 = 1;
			}
			} finally { DebugExitDecision(232); }
			switch (alt232)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:832:21: formal_parameter_list
				{
				DebugLocation(832, 21);
				PushFollow(Follow._formal_parameter_list_in_constructor_declarator6662);
				formal_parameter_list855=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list855.Tree, formal_parameter_list855, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(232); }

			DebugLocation(832, 46);
			char_literal856=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_declarator6667), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal856_tree = (object)adaptor.Create(char_literal856, retval);
			adaptor.AddChild(root_0, char_literal856_tree);
			}
			DebugLocation(832, 52);
			// cs.g:832:52: ( constructor_initializer )?
			int alt233=2;
			try { DebugEnterSubRule(233);
			try { DebugEnterDecision(233, false);
			int LA233_0 = input.LA(1);

			if ((LA233_0==79))
			{
				alt233 = 1;
			}
			} finally { DebugExitDecision(233); }
			switch (alt233)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:832:52: constructor_initializer
				{
				DebugLocation(832, 52);
				PushFollow(Follow._constructor_initializer_in_constructor_declarator6671);
				constructor_initializer857=constructor_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_initializer857.Tree, constructor_initializer857, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(233); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_declarator", 237);
			LeaveRule("constructor_declarator", 237);
			LeaveRule_constructor_declarator();
			if (state.backtracking > 0) { Memoize(input, 237, constructor_declarator_StartIndex); }

		}
		DebugLocation(832, 76);
		} finally { DebugExitRule(GrammarFileName, "constructor_declarator"); }
		return retval;

	}
	// $ANTLR end "constructor_declarator"

	partial void EnterRule_constructor_initializer();
	partial void LeaveRule_constructor_initializer();

	// $ANTLR start "constructor_initializer"
	// cs.g:833:8: public constructor_initializer : ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' ;
	[GrammarRule("constructor_initializer")]
	public XAstParserRuleReturnScope constructor_initializer()
	{
		EnterRule_constructor_initializer();
		EnterRule("constructor_initializer", 238);
		var retval = new XAstParserRuleReturnScope("constructor_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int constructor_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal858 = default(IToken);
		IToken set859 = default(IToken);
		IToken char_literal860 = default(IToken);
		IToken char_literal862 = default(IToken);
		XAstParserRuleReturnScope argument_list861 = default(XAstParserRuleReturnScope);

		object char_literal858_tree = default(object);
		object set859_tree = default(object);
		object char_literal860_tree = default(object);
		object char_literal862_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constructor_initializer");
		DebugLocation(833, 54);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 238)) { return retval; }

			// cs.g:833:31: ( ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' )
			DebugEnterAlt(1);
			// cs.g:834:2: ':' ( 'base' | 'this' ) '(' ( argument_list )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(834, 2);
			char_literal858=(IToken)Match(input,79,Follow._79_in_constructor_initializer6682); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal858_tree = (object)adaptor.Create(char_literal858, retval);
			adaptor.AddChild(root_0, char_literal858_tree);
			}
			DebugLocation(834, 8);

			set859=(IToken)input.LT(1);
			if (input.LA(1)==102||input.LA(1)==180)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set859, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(834, 28);
			char_literal860=(IToken)Match(input,68,Follow._68_in_constructor_initializer6696); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal860_tree = (object)adaptor.Create(char_literal860, retval);
			adaptor.AddChild(root_0, char_literal860_tree);
			}
			DebugLocation(834, 34);
			// cs.g:834:34: ( argument_list )?
			int alt234=2;
			try { DebugEnterSubRule(234);
			try { DebugEnterDecision(234, false);
			int LA234_0 = input.LA(1);

			if ((LA234_0==Character_literal||LA234_0==DEFINE||LA234_0==ELIF||LA234_0==ENDIF||LA234_0==FALSE||(LA234_0>=Hex_number && LA234_0<=IDENTIFIER)||(LA234_0>=MINUS && LA234_0<=NUMBER)||LA234_0==Real_literal||LA234_0==STRINGLITERAL||LA234_0==TRUE||LA234_0==UNDEF||LA234_0==Verbatim_string_literal||LA234_0==61||LA234_0==66||(LA234_0>=68 && LA234_0<=69)||(LA234_0>=71 && LA234_0<=72)||LA234_0==75||LA234_0==95||(LA234_0>=97 && LA234_0<=98)||(LA234_0>=100 && LA234_0<=103)||(LA234_0>=105 && LA234_0<=106)||(LA234_0>=109 && LA234_0<=110)||(LA234_0>=114 && LA234_0<=117)||(LA234_0>=119 && LA234_0<=120)||LA234_0==122||LA234_0==126||LA234_0==129||(LA234_0>=132 && LA234_0<=133)||LA234_0==135||LA234_0==138||LA234_0==141||(LA234_0>=143 && LA234_0<=144)||(LA234_0>=146 && LA234_0<=148)||(LA234_0>=150 && LA234_0<=152)||(LA234_0>=154 && LA234_0<=155)||LA234_0==157||LA234_0==160||LA234_0==162||(LA234_0>=166 && LA234_0<=167)||LA234_0==169||(LA234_0>=171 && LA234_0<=174)||LA234_0==177||LA234_0==180||(LA234_0>=183 && LA234_0<=187)||(LA234_0>=189 && LA234_0<=190)||LA234_0==194||LA234_0==196||LA234_0==202))
			{
				alt234 = 1;
			}
			} finally { DebugExitDecision(234); }
			switch (alt234)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:834:34: argument_list
				{
				DebugLocation(834, 34);
				PushFollow(Follow._argument_list_in_constructor_initializer6700);
				argument_list861=argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_list861.Tree, argument_list861, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(234); }

			DebugLocation(834, 51);
			char_literal862=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_initializer6705), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal862_tree = (object)adaptor.Create(char_literal862, retval);
			adaptor.AddChild(root_0, char_literal862_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_initializer", 238);
			LeaveRule("constructor_initializer", 238);
			LeaveRule_constructor_initializer();
			if (state.backtracking > 0) { Memoize(input, 238, constructor_initializer_StartIndex); }

		}
		DebugLocation(834, 54);
		} finally { DebugExitRule(GrammarFileName, "constructor_initializer"); }
		return retval;

	}
	// $ANTLR end "constructor_initializer"

	partial void EnterRule_constructor_body();
	partial void LeaveRule_constructor_body();

	// $ANTLR start "constructor_body"
	// cs.g:835:8: public constructor_body : block ;
	[GrammarRule("constructor_body")]
	public XAstParserRuleReturnScope constructor_body()
	{
		EnterRule_constructor_body();
		EnterRule("constructor_body", 239);
		var retval = new XAstParserRuleReturnScope("constructor_body");
		
		retval.Start = (IToken)input.LT(1);
		int constructor_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block863 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constructor_body");
		DebugLocation(835, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 239)) { return retval; }

			// cs.g:835:24: ( block )
			DebugEnterAlt(1);
			// cs.g:836:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(836, 2);
			PushFollow(Follow._block_in_constructor_body6715);
			block863=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block863.Tree, block863, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_body", 239);
			LeaveRule("constructor_body", 239);
			LeaveRule_constructor_body();
			if (state.backtracking > 0) { Memoize(input, 239, constructor_body_StartIndex); }

		}
		DebugLocation(836, 7);
		} finally { DebugExitRule(GrammarFileName, "constructor_body"); }
		return retval;

	}
	// $ANTLR end "constructor_body"

	partial void EnterRule_destructor_declaration();
	partial void LeaveRule_destructor_declaration();

	// $ANTLR start "destructor_declaration"
	// cs.g:845:8: public destructor_declaration : '~' identifier '(' ')' destructor_body ;
	[GrammarRule("destructor_declaration")]
	public XAstParserRuleReturnScope destructor_declaration()
	{
		EnterRule_destructor_declaration();
		EnterRule("destructor_declaration", 240);
		var retval = new XAstParserRuleReturnScope("destructor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int destructor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal864 = default(IToken);
		IToken char_literal866 = default(IToken);
		IToken char_literal867 = default(IToken);
		XAstParserRuleReturnScope identifier865 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope destructor_body868 = default(XAstParserRuleReturnScope);

		object char_literal864_tree = default(object);
		object char_literal866_tree = default(object);
		object char_literal867_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "destructor_declaration");
		DebugLocation(845, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 240)) { return retval; }

			// cs.g:845:30: ( '~' identifier '(' ')' destructor_body )
			DebugEnterAlt(1);
			// cs.g:846:2: '~' identifier '(' ')' destructor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(846, 2);
			char_literal864=(IToken)Match(input,202,Follow._202_in_destructor_declaration6733); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal864_tree = (object)adaptor.Create(char_literal864, retval);
			adaptor.AddChild(root_0, char_literal864_tree);
			}
			DebugLocation(846, 7);
			PushFollow(Follow._identifier_in_destructor_declaration6736);
			identifier865=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier865.Tree, identifier865, retval);
			DebugLocation(846, 20);
			char_literal866=(IToken)Match(input,68,Follow._68_in_destructor_declaration6740); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal866_tree = (object)adaptor.Create(char_literal866, retval);
			adaptor.AddChild(root_0, char_literal866_tree);
			}
			DebugLocation(846, 26);
			char_literal867=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_destructor_declaration6744), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal867_tree = (object)adaptor.Create(char_literal867, retval);
			adaptor.AddChild(root_0, char_literal867_tree);
			}
			DebugLocation(846, 33);
			PushFollow(Follow._destructor_body_in_destructor_declaration6749);
			destructor_body868=destructor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, destructor_body868.Tree, destructor_body868, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("destructor_declaration", 240);
			LeaveRule("destructor_declaration", 240);
			LeaveRule_destructor_declaration();
			if (state.backtracking > 0) { Memoize(input, 240, destructor_declaration_StartIndex); }

		}
		DebugLocation(846, 48);
		} finally { DebugExitRule(GrammarFileName, "destructor_declaration"); }
		return retval;

	}
	// $ANTLR end "destructor_declaration"

	partial void EnterRule_destructor_body();
	partial void LeaveRule_destructor_body();

	// $ANTLR start "destructor_body"
	// cs.g:847:8: public destructor_body : block ;
	[GrammarRule("destructor_body")]
	public XAstParserRuleReturnScope destructor_body()
	{
		EnterRule_destructor_body();
		EnterRule("destructor_body", 241);
		var retval = new XAstParserRuleReturnScope("destructor_body");
		
		retval.Start = (IToken)input.LT(1);
		int destructor_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block869 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "destructor_body");
		DebugLocation(847, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 241)) { return retval; }

			// cs.g:847:23: ( block )
			DebugEnterAlt(1);
			// cs.g:848:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(848, 2);
			PushFollow(Follow._block_in_destructor_body6759);
			block869=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block869.Tree, block869, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("destructor_body", 241);
			LeaveRule("destructor_body", 241);
			LeaveRule_destructor_body();
			if (state.backtracking > 0) { Memoize(input, 241, destructor_body_StartIndex); }

		}
		DebugLocation(848, 7);
		} finally { DebugExitRule(GrammarFileName, "destructor_body"); }
		return retval;

	}
	// $ANTLR end "destructor_body"

	partial void EnterRule_invocation_expression();
	partial void LeaveRule_invocation_expression();

	// $ANTLR start "invocation_expression"
	// cs.g:851:8: public invocation_expression : invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ;
	[GrammarRule("invocation_expression")]
	public XAstParserRuleReturnScope invocation_expression()
	{
		EnterRule_invocation_expression();
		EnterRule("invocation_expression", 242);
		var retval = new XAstParserRuleReturnScope("invocation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int invocation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope invocation_start870 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments871 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope invocation_part872 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope invocation_part873 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments874 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "invocation_expression");
		DebugLocation(851, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 242)) { return retval; }

			// cs.g:851:29: ( invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
			DebugEnterAlt(1);
			// cs.g:852:2: invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(852, 2);
			PushFollow(Follow._invocation_start_in_invocation_expression6771);
			invocation_start870=invocation_start();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_start870.Tree, invocation_start870, retval);
			DebugLocation(852, 21);
			// cs.g:852:21: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
			try { DebugEnterSubRule(235);
			while (true)
			{
				int alt235=3;
				try { DebugEnterDecision(235, false);
				int LA235_0 = input.LA(1);

				if ((LA235_0==68))
				{
					int LA235_1 = input.LA(2);

					if ((EvaluatePredicate(synpred31_cs_fragment)))
					{
						alt235 = 1;
					}


				}
				else if ((LA235_0==DOT||LA235_0==PTR||LA235_0==91))
				{
					alt235 = 2;
				}


				} finally { DebugExitDecision(235); }
				switch ( alt235 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:852:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
					{
					DebugLocation(852, 22);
					// cs.g:852:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
					DebugEnterAlt(1);
					// cs.g:852:23: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
					{
					DebugLocation(852, 55);
					PushFollow(Follow._arguments_in_invocation_expression6793);
					arguments871=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments871.Tree, arguments871, retval);
					DebugLocation(852, 67);
					PushFollow(Follow._invocation_part_in_invocation_expression6797);
					invocation_part872=invocation_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part872.Tree, invocation_part872, retval);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:853:9: invocation_part
					{
					DebugLocation(853, 9);
					PushFollow(Follow._invocation_part_in_invocation_expression6808);
					invocation_part873=invocation_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part873.Tree, invocation_part873, retval);

					}
					break;

				default:
					goto loop235;
				}
			}

			loop235:
				;

			} finally { DebugExitSubRule(235); }

			DebugLocation(853, 29);
			PushFollow(Follow._arguments_in_invocation_expression6814);
			arguments874=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, arguments874.Tree, arguments874, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_expression", 242);
			LeaveRule("invocation_expression", 242);
			LeaveRule_invocation_expression();
			if (state.backtracking > 0) { Memoize(input, 242, invocation_expression_StartIndex); }

		}
		DebugLocation(853, 38);
		} finally { DebugExitRule(GrammarFileName, "invocation_expression"); }
		return retval;

	}
	// $ANTLR end "invocation_expression"

	partial void EnterRule_invocation_start();
	partial void LeaveRule_invocation_start();

	// $ANTLR start "invocation_start"
	// cs.g:854:8: public invocation_start : ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression );
	[GrammarRule("invocation_start")]
	public XAstParserRuleReturnScope invocation_start()
	{
		EnterRule_invocation_start();
		EnterRule("invocation_start", 243);
		var retval = new XAstParserRuleReturnScope("invocation_start");
		
		retval.Start = (IToken)input.LT(1);
		int invocation_start_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal878 = default(IToken);
		IToken string_literal879 = default(IToken);
		IToken string_literal881 = default(IToken);
		XAstParserRuleReturnScope predefined_type875 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier876 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list877 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier880 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier882 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope typeof_expression883 = default(XAstParserRuleReturnScope);

		object string_literal878_tree = default(object);
		object string_literal879_tree = default(object);
		object string_literal881_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "invocation_start");
		DebugLocation(854, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 243)) { return retval; }

			// cs.g:854:24: ( predefined_type | ( identifier generic_argument_list )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression )
			int alt237=6;
			try { DebugEnterDecision(237, false);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt237 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA237_2 = input.LA(2);

				if ((LA237_2==81) && (EvaluatePredicate(synpred32_cs_fragment)))
				{
					alt237 = 2;
				}
				else if ((LA237_2==DOT||LA237_2==PTR||LA237_2==68||LA237_2==80||LA237_2==91))
				{
					alt237 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 237, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA237_3 = input.LA(2);

				if ((LA237_3==81) && (EvaluatePredicate(synpred32_cs_fragment)))
				{
					alt237 = 2;
				}
				else if ((LA237_3==DOT||LA237_3==PTR||LA237_3==68||LA237_3==80||LA237_3==91))
				{
					alt237 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 237, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 180:
				{
				alt237 = 3;
				}
				break;
			case 102:
				{
				alt237 = 4;
				}
				break;
			case 184:
				{
				alt237 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 237, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(237); }
			switch (alt237)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:855:2: predefined_type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(855, 2);
				PushFollow(Follow._predefined_type_in_invocation_start6824);
				predefined_type875=predefined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type875.Tree, predefined_type875, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:856:4: ( identifier generic_argument_list )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(856, 45);
				PushFollow(Follow._identifier_in_invocation_start6841);
				identifier876=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier876.Tree, identifier876, retval);
				DebugLocation(856, 58);
				PushFollow(Follow._generic_argument_list_in_invocation_start6845);
				generic_argument_list877=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list877.Tree, generic_argument_list877, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:857:4: 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(857, 4);
				string_literal878=(IToken)Match(input,180,Follow._180_in_invocation_start6850); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal878_tree = (object)adaptor.Create(string_literal878, retval);
				adaptor.AddChild(root_0, string_literal878_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:858:4: 'base'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(858, 4);
				string_literal879=(IToken)Match(input,102,Follow._102_in_invocation_start6856); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal879_tree = (object)adaptor.Create(string_literal879, retval);
				adaptor.AddChild(root_0, string_literal879_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:859:4: identifier ( '::' identifier )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(859, 4);
				PushFollow(Follow._identifier_in_invocation_start6861);
				identifier880=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier880.Tree, identifier880, retval);
				DebugLocation(859, 17);
				// cs.g:859:17: ( '::' identifier )?
				int alt236=2;
				try { DebugEnterSubRule(236);
				try { DebugEnterDecision(236, false);
				int LA236_0 = input.LA(1);

				if ((LA236_0==80))
				{
					alt236 = 1;
				}
				} finally { DebugExitDecision(236); }
				switch (alt236)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:859:18: '::' identifier
					{
					DebugLocation(859, 18);
					string_literal881=(IToken)Match(input,80,Follow._80_in_invocation_start6866); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal881_tree = (object)adaptor.Create(string_literal881, retval);
					adaptor.AddChild(root_0, string_literal881_tree);
					}
					DebugLocation(859, 25);
					PushFollow(Follow._identifier_in_invocation_start6870);
					identifier882=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier882.Tree, identifier882, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(236); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:860:4: typeof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(860, 4);
				PushFollow(Follow._typeof_expression_in_invocation_start6877);
				typeof_expression883=typeof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeof_expression883.Tree, typeof_expression883, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_start", 243);
			LeaveRule("invocation_start", 243);
			LeaveRule_invocation_start();
			if (state.backtracking > 0) { Memoize(input, 243, invocation_start_StartIndex); }

		}
		DebugLocation(861, 1);
		} finally { DebugExitRule(GrammarFileName, "invocation_start"); }
		return retval;

	}
	// $ANTLR end "invocation_start"

	partial void EnterRule_invocation_part();
	partial void LeaveRule_invocation_part();

	// $ANTLR start "invocation_part"
	// cs.g:862:8: public invocation_part : ( access_identifier | brackets );
	[GrammarRule("invocation_part")]
	public XAstParserRuleReturnScope invocation_part()
	{
		EnterRule_invocation_part();
		EnterRule("invocation_part", 244);
		var retval = new XAstParserRuleReturnScope("invocation_part");
		
		retval.Start = (IToken)input.LT(1);
		int invocation_part_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope access_identifier884 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope brackets885 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "invocation_part");
		DebugLocation(862, 12);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 244)) { return retval; }

			// cs.g:862:23: ( access_identifier | brackets )
			int alt238=2;
			try { DebugEnterDecision(238, false);
			int LA238_0 = input.LA(1);

			if ((LA238_0==DOT||LA238_0==PTR))
			{
				alt238 = 1;
			}
			else if ((LA238_0==91))
			{
				alt238 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 238, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(238); }
			switch (alt238)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:863:3: access_identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(863, 3);
				PushFollow(Follow._access_identifier_in_invocation_part6902);
				access_identifier884=access_identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, access_identifier884.Tree, access_identifier884, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:864:4: brackets
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(864, 4);
				PushFollow(Follow._brackets_in_invocation_part6907);
				brackets885=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets885.Tree, brackets885, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_part", 244);
			LeaveRule("invocation_part", 244);
			LeaveRule_invocation_part();
			if (state.backtracking > 0) { Memoize(input, 244, invocation_part_StartIndex); }

		}
		DebugLocation(864, 12);
		} finally { DebugExitRule(GrammarFileName, "invocation_part"); }
		return retval;

	}
	// $ANTLR end "invocation_part"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// cs.g:868:8: public statement : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement );
	[GrammarRule("statement")]
	public XAstParserRuleReturnScope statement()
	{
		EnterRule_statement();
		EnterRule("statement", 245);
		var retval = new XAstParserRuleReturnScope("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_statement886 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope labeled_statement887 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement888 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(868, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 245)) { return retval; }

			// cs.g:868:17: ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement )
			int alt239=3;
			try { DebugEnterDecision(239, false);
			int LA239_0 = input.LA(1);

			if ((LA239_0==190))
			{
				int LA239_1 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt239 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt239 = 2;
				}
				else if ((true))
				{
					alt239 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA239_0==120))
			{
				int LA239_2 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt239 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt239 = 2;
				}
				else if ((true))
				{
					alt239 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA239_0==103||LA239_0==106||LA239_0==109||LA239_0==114||LA239_0==119||LA239_0==129||LA239_0==138||LA239_0==146||LA239_0==151||LA239_0==169||LA239_0==173||LA239_0==177||(LA239_0>=185 && LA239_0<=186)||LA239_0==189))
			{
				int LA239_3 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt239 = 1;
				}
				else if ((true))
				{
					alt239 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA239_0==IDENTIFIER))
			{
				int LA239_4 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt239 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt239 = 2;
				}
				else if ((true))
				{
					alt239 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA239_0==196))
			{
				int LA239_5 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt239 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt239 = 2;
				}
				else if ((true))
				{
					alt239 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA239_0==192) && (EvaluatePredicate(synpred33_cs_fragment)))
			{
				alt239 = 1;
			}
			else if ((LA239_0==112) && (EvaluatePredicate(synpred33_cs_fragment)))
			{
				alt239 = 1;
			}
			else if ((LA239_0==Character_literal||LA239_0==FALSE||LA239_0==Hex_number||LA239_0==IF||(LA239_0>=MINUS && LA239_0<=NUMBER)||LA239_0==Real_literal||(LA239_0>=SEMI && LA239_0<=STRINGLITERAL)||LA239_0==TRUE||(LA239_0>=USING && LA239_0<=Verbatim_string_literal)||LA239_0==61||LA239_0==66||(LA239_0>=68 && LA239_0<=69)||(LA239_0>=71 && LA239_0<=72)||LA239_0==75||LA239_0==102||LA239_0==104||LA239_0==110||LA239_0==113||(LA239_0>=115 && LA239_0<=116)||LA239_0==118||LA239_0==128||(LA239_0>=130 && LA239_0<=131)||LA239_0==134||LA239_0==145||LA239_0==150||LA239_0==168||LA239_0==174||(LA239_0>=179 && LA239_0<=182)||LA239_0==184||(LA239_0>=187 && LA239_0<=188)||LA239_0==195||LA239_0==197||LA239_0==202))
			{
				alt239 = 3;
			}
			else if ((LA239_0==132))
			{
				int LA239_26 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt239 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt239 = 2;
				}
				else if ((true))
				{
					alt239 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 26, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA239_0==DEFINE||LA239_0==ELIF||LA239_0==ENDIF||LA239_0==UNDEF||LA239_0==95||(LA239_0>=97 && LA239_0<=98)||(LA239_0>=100 && LA239_0<=101)||LA239_0==105||LA239_0==117||LA239_0==122||LA239_0==126||LA239_0==133||LA239_0==135||LA239_0==141||(LA239_0>=143 && LA239_0<=144)||(LA239_0>=147 && LA239_0<=148)||LA239_0==152||LA239_0==154||LA239_0==157||LA239_0==160||LA239_0==162||LA239_0==167||(LA239_0>=171 && LA239_0<=172)||LA239_0==183||LA239_0==194))
			{
				int LA239_46 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt239 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt239 = 2;
				}
				else if ((true))
				{
					alt239 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 46, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 239, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(239); }
			switch (alt239)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:869:2: ( declaration_statement )=> declaration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(869, 29);
				PushFollow(Follow._declaration_statement_in_statement6926);
				declaration_statement886=declaration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_statement886.Tree, declaration_statement886, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:870:4: ( identifier ':' )=> labeled_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(870, 26);
				PushFollow(Follow._labeled_statement_in_statement6941);
				labeled_statement887=labeled_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeled_statement887.Tree, labeled_statement887, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:871:4: embedded_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(871, 4);
				PushFollow(Follow._embedded_statement_in_statement6946);
				embedded_statement888=embedded_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement888.Tree, embedded_statement888, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 245);
			LeaveRule("statement", 245);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 245, statement_StartIndex); }

		}
		DebugLocation(872, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_embedded_statement();
	partial void LeaveRule_embedded_statement();

	// $ANTLR start "embedded_statement"
	// cs.g:873:8: public embedded_statement : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement );
	[GrammarRule("embedded_statement")]
	public XAstParserRuleReturnScope embedded_statement()
	{
		EnterRule_embedded_statement();
		EnterRule("embedded_statement", 246);
		var retval = new XAstParserRuleReturnScope("embedded_statement");
		
		retval.Start = (IToken)input.LT(1);
		int embedded_statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block889 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope selection_statement890 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope iteration_statement891 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope jump_statement892 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope try_statement893 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope checked_statement894 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unchecked_statement895 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope lock_statement896 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope using_statement897 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope yield_statement898 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unsafe_statement899 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_statement900 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement901 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "embedded_statement");
		DebugLocation(873, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 246)) { return retval; }

			// cs.g:873:26: ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement )
			int alt240=13;
			try { DebugEnterDecision(240, false);
			switch (input.LA(1))
			{
			case SEMI:
			case 197:
				{
				alt240 = 1;
				}
				break;
			case IF:
			case 179:
				{
				alt240 = 2;
				}
				break;
			case 118:
			case 130:
			case 131:
			case 195:
				{
				alt240 = 3;
				}
				break;
			case 104:
			case 113:
			case 134:
			case 168:
			case 181:
				{
				alt240 = 4;
				}
				break;
			case 182:
				{
				alt240 = 5;
				}
				break;
			case 110:
				{
				int LA240_6 = input.LA(2);

				if ((LA240_6==68))
				{
					alt240 = 13;
				}
				else if ((LA240_6==SEMI||LA240_6==197))
				{
					alt240 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 240, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 187:
				{
				int LA240_7 = input.LA(2);

				if ((LA240_7==68))
				{
					alt240 = 13;
				}
				else if ((LA240_7==SEMI||LA240_7==197))
				{
					alt240 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 240, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 145:
				{
				alt240 = 8;
				}
				break;
			case USING:
				{
				alt240 = 9;
				}
				break;
			case 196:
				{
				int LA240_10 = input.LA(2);

				if ((LA240_10==104||LA240_10==168))
				{
					alt240 = 10;
				}
				else if ((LA240_10==DOT||LA240_10==GT||LA240_10==MINUS||LA240_10==PTR||LA240_10==SEMI||(LA240_10>=62 && LA240_10<=78)||(LA240_10>=80 && LA240_10<=91)||(LA240_10>=93 && LA240_10<=94)||LA240_10==99||LA240_10==142||(LA240_10>=198 && LA240_10<=200)))
				{
					alt240 = 13;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 240, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 188:
				{
				alt240 = 11;
				}
				break;
			case 128:
				{
				alt240 = 12;
				}
				break;
			case Character_literal:
			case DEFINE:
			case ELIF:
			case ENDIF:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case UNDEF:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 133:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 202:
				{
				alt240 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 240, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(240); }
			switch (alt240)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:874:2: block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(874, 2);
				PushFollow(Follow._block_in_embedded_statement6958);
				block889=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block889.Tree, block889, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:875:4: selection_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(875, 4);
				PushFollow(Follow._selection_statement_in_embedded_statement6963);
				selection_statement890=selection_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_statement890.Tree, selection_statement890, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:876:4: iteration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(876, 4);
				PushFollow(Follow._iteration_statement_in_embedded_statement6969);
				iteration_statement891=iteration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iteration_statement891.Tree, iteration_statement891, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:877:4: jump_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(877, 4);
				PushFollow(Follow._jump_statement_in_embedded_statement6975);
				jump_statement892=jump_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, jump_statement892.Tree, jump_statement892, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:878:4: try_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(878, 4);
				PushFollow(Follow._try_statement_in_embedded_statement6982);
				try_statement893=try_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, try_statement893.Tree, try_statement893, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:879:4: checked_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(879, 4);
				PushFollow(Follow._checked_statement_in_embedded_statement6987);
				checked_statement894=checked_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, checked_statement894.Tree, checked_statement894, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:880:4: unchecked_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(880, 4);
				PushFollow(Follow._unchecked_statement_in_embedded_statement6992);
				unchecked_statement895=unchecked_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unchecked_statement895.Tree, unchecked_statement895, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:881:4: lock_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(881, 4);
				PushFollow(Follow._lock_statement_in_embedded_statement6997);
				lock_statement896=lock_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lock_statement896.Tree, lock_statement896, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:882:4: using_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(882, 4);
				PushFollow(Follow._using_statement_in_embedded_statement7002);
				using_statement897=using_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_statement897.Tree, using_statement897, retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:883:4: yield_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(883, 4);
				PushFollow(Follow._yield_statement_in_embedded_statement7008);
				yield_statement898=yield_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, yield_statement898.Tree, yield_statement898, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// cs.g:884:4: unsafe_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(884, 4);
				PushFollow(Follow._unsafe_statement_in_embedded_statement7014);
				unsafe_statement899=unsafe_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unsafe_statement899.Tree, unsafe_statement899, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// cs.g:885:4: fixed_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(885, 4);
				PushFollow(Follow._fixed_statement_in_embedded_statement7019);
				fixed_statement900=fixed_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_statement900.Tree, fixed_statement900, retval);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// cs.g:886:4: expression_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(886, 4);
				PushFollow(Follow._expression_statement_in_embedded_statement7024);
				expression_statement901=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement901.Tree, expression_statement901, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("embedded_statement", 246);
			LeaveRule("embedded_statement", 246);
			LeaveRule_embedded_statement();
			if (state.backtracking > 0) { Memoize(input, 246, embedded_statement_StartIndex); }

		}
		DebugLocation(887, 1);
		} finally { DebugExitRule(GrammarFileName, "embedded_statement"); }
		return retval;

	}
	// $ANTLR end "embedded_statement"

	partial void EnterRule_fixed_statement();
	partial void LeaveRule_fixed_statement();

	// $ANTLR start "fixed_statement"
	// cs.g:888:8: public fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
	[GrammarRule("fixed_statement")]
	public XAstParserRuleReturnScope fixed_statement()
	{
		EnterRule_fixed_statement();
		EnterRule("fixed_statement", 247);
		var retval = new XAstParserRuleReturnScope("fixed_statement");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal902 = default(IToken);
		IToken char_literal903 = default(IToken);
		IToken char_literal906 = default(IToken);
		XAstParserRuleReturnScope pointer_type904 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_pointer_declarators905 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement907 = default(XAstParserRuleReturnScope);

		object string_literal902_tree = default(object);
		object char_literal903_tree = default(object);
		object char_literal906_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fixed_statement");
		DebugLocation(888, 83);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 247)) { return retval; }

			// cs.g:888:23: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:889:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(889, 2);
			string_literal902=(IToken)Match(input,128,Follow._128_in_fixed_statement7036); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal902_tree = (object)adaptor.Create(string_literal902, retval);
			adaptor.AddChild(root_0, string_literal902_tree);
			}
			DebugLocation(889, 12);
			char_literal903=(IToken)Match(input,68,Follow._68_in_fixed_statement7040); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal903_tree = (object)adaptor.Create(char_literal903, retval);
			adaptor.AddChild(root_0, char_literal903_tree);
			}
			DebugLocation(889, 18);
			PushFollow(Follow._pointer_type_in_fixed_statement7044);
			pointer_type904=pointer_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, pointer_type904.Tree, pointer_type904, retval);
			DebugLocation(889, 31);
			PushFollow(Follow._fixed_pointer_declarators_in_fixed_statement7046);
			fixed_pointer_declarators905=fixed_pointer_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_declarators905.Tree, fixed_pointer_declarators905, retval);
			DebugLocation(889, 59);
			char_literal906=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_fixed_statement7050), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal906_tree = (object)adaptor.Create(char_literal906, retval);
			adaptor.AddChild(root_0, char_literal906_tree);
			}
			DebugLocation(889, 65);
			PushFollow(Follow._embedded_statement_in_fixed_statement7054);
			embedded_statement907=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement907.Tree, embedded_statement907, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_statement", 247);
			LeaveRule("fixed_statement", 247);
			LeaveRule_fixed_statement();
			if (state.backtracking > 0) { Memoize(input, 247, fixed_statement_StartIndex); }

		}
		DebugLocation(889, 83);
		} finally { DebugExitRule(GrammarFileName, "fixed_statement"); }
		return retval;

	}
	// $ANTLR end "fixed_statement"

	partial void EnterRule_fixed_pointer_declarators();
	partial void LeaveRule_fixed_pointer_declarators();

	// $ANTLR start "fixed_pointer_declarators"
	// cs.g:890:8: public fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
	[GrammarRule("fixed_pointer_declarators")]
	public XAstParserRuleReturnScope fixed_pointer_declarators()
	{
		EnterRule_fixed_pointer_declarators();
		EnterRule("fixed_pointer_declarators", 248);
		var retval = new XAstParserRuleReturnScope("fixed_pointer_declarators");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_pointer_declarators_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal909 = default(IToken);
		XAstParserRuleReturnScope fixed_pointer_declarator908 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_pointer_declarator910 = default(XAstParserRuleReturnScope);

		object char_literal909_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fixed_pointer_declarators");
		DebugLocation(890, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 248)) { return retval; }

			// cs.g:890:33: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
			DebugEnterAlt(1);
			// cs.g:891:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(891, 2);
			PushFollow(Follow._fixed_pointer_declarator_in_fixed_pointer_declarators7064);
			fixed_pointer_declarator908=fixed_pointer_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_declarator908.Tree, fixed_pointer_declarator908, retval);
			DebugLocation(891, 29);
			// cs.g:891:29: ( ',' fixed_pointer_declarator )*
			try { DebugEnterSubRule(241);
			while (true)
			{
				int alt241=2;
				try { DebugEnterDecision(241, false);
				int LA241_0 = input.LA(1);

				if ((LA241_0==74))
				{
					alt241 = 1;
				}


				} finally { DebugExitDecision(241); }
				switch ( alt241 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:891:30: ',' fixed_pointer_declarator
					{
					DebugLocation(891, 30);
					char_literal909=(IToken)Match(input,74,Follow._74_in_fixed_pointer_declarators7069); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal909_tree = (object)adaptor.Create(char_literal909, retval);
					adaptor.AddChild(root_0, char_literal909_tree);
					}
					DebugLocation(891, 36);
					PushFollow(Follow._fixed_pointer_declarator_in_fixed_pointer_declarators7073);
					fixed_pointer_declarator910=fixed_pointer_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_declarator910.Tree, fixed_pointer_declarator910, retval);

					}
					break;

				default:
					goto loop241;
				}
			}

			loop241:
				;

			} finally { DebugExitSubRule(241); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_pointer_declarators", 248);
			LeaveRule("fixed_pointer_declarators", 248);
			LeaveRule_fixed_pointer_declarators();
			if (state.backtracking > 0) { Memoize(input, 248, fixed_pointer_declarators_StartIndex); }

		}
		DebugLocation(891, 62);
		} finally { DebugExitRule(GrammarFileName, "fixed_pointer_declarators"); }
		return retval;

	}
	// $ANTLR end "fixed_pointer_declarators"

	partial void EnterRule_fixed_pointer_declarator();
	partial void LeaveRule_fixed_pointer_declarator();

	// $ANTLR start "fixed_pointer_declarator"
	// cs.g:892:8: public fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
	[GrammarRule("fixed_pointer_declarator")]
	public XAstParserRuleReturnScope fixed_pointer_declarator()
	{
		EnterRule_fixed_pointer_declarator();
		EnterRule("fixed_pointer_declarator", 249);
		var retval = new XAstParserRuleReturnScope("fixed_pointer_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_pointer_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal912 = default(IToken);
		XAstParserRuleReturnScope identifier911 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_pointer_initializer913 = default(XAstParserRuleReturnScope);

		object char_literal912_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fixed_pointer_declarator");
		DebugLocation(892, 46);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 249)) { return retval; }

			// cs.g:892:32: ( identifier '=' fixed_pointer_initializer )
			DebugEnterAlt(1);
			// cs.g:893:2: identifier '=' fixed_pointer_initializer
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(893, 2);
			PushFollow(Follow._identifier_in_fixed_pointer_declarator7085);
			identifier911=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier911.Tree, identifier911, retval);
			DebugLocation(893, 15);
			char_literal912=(IToken)Match(input,85,Follow._85_in_fixed_pointer_declarator7089); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal912_tree = (object)adaptor.Create(char_literal912, retval);
			adaptor.AddChild(root_0, char_literal912_tree);
			}
			DebugLocation(893, 21);
			PushFollow(Follow._fixed_pointer_initializer_in_fixed_pointer_declarator7093);
			fixed_pointer_initializer913=fixed_pointer_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_initializer913.Tree, fixed_pointer_initializer913, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_pointer_declarator", 249);
			LeaveRule("fixed_pointer_declarator", 249);
			LeaveRule_fixed_pointer_declarator();
			if (state.backtracking > 0) { Memoize(input, 249, fixed_pointer_declarator_StartIndex); }

		}
		DebugLocation(893, 46);
		} finally { DebugExitRule(GrammarFileName, "fixed_pointer_declarator"); }
		return retval;

	}
	// $ANTLR end "fixed_pointer_declarator"

	partial void EnterRule_fixed_pointer_initializer();
	partial void LeaveRule_fixed_pointer_initializer();

	// $ANTLR start "fixed_pointer_initializer"
	// cs.g:894:8: public fixed_pointer_initializer : expression ;
	[GrammarRule("fixed_pointer_initializer")]
	public XAstParserRuleReturnScope fixed_pointer_initializer()
	{
		EnterRule_fixed_pointer_initializer();
		EnterRule("fixed_pointer_initializer", 250);
		var retval = new XAstParserRuleReturnScope("fixed_pointer_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_pointer_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression914 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "fixed_pointer_initializer");
		DebugLocation(894, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 250)) { return retval; }

			// cs.g:894:33: ( expression )
			DebugEnterAlt(1);
			// cs.g:896:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(896, 2);
			PushFollow(Follow._expression_in_fixed_pointer_initializer7105);
			expression914=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression914.Tree, expression914, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_pointer_initializer", 250);
			LeaveRule("fixed_pointer_initializer", 250);
			LeaveRule_fixed_pointer_initializer();
			if (state.backtracking > 0) { Memoize(input, 250, fixed_pointer_initializer_StartIndex); }

		}
		DebugLocation(896, 11);
		} finally { DebugExitRule(GrammarFileName, "fixed_pointer_initializer"); }
		return retval;

	}
	// $ANTLR end "fixed_pointer_initializer"

	partial void EnterRule_unsafe_statement();
	partial void LeaveRule_unsafe_statement();

	// $ANTLR start "unsafe_statement"
	// cs.g:897:8: public unsafe_statement : 'unsafe' block ;
	[GrammarRule("unsafe_statement")]
	public XAstParserRuleReturnScope unsafe_statement()
	{
		EnterRule_unsafe_statement();
		EnterRule("unsafe_statement", 251);
		var retval = new XAstParserRuleReturnScope("unsafe_statement");
		
		retval.Start = (IToken)input.LT(1);
		int unsafe_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal915 = default(IToken);
		XAstParserRuleReturnScope block916 = default(XAstParserRuleReturnScope);

		object string_literal915_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unsafe_statement");
		DebugLocation(897, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 251)) { return retval; }

			// cs.g:897:24: ( 'unsafe' block )
			DebugEnterAlt(1);
			// cs.g:898:2: 'unsafe' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(898, 2);
			string_literal915=(IToken)Match(input,188,Follow._188_in_unsafe_statement7114); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal915_tree = (object)adaptor.Create(string_literal915, retval);
			adaptor.AddChild(root_0, string_literal915_tree);
			}
			DebugLocation(898, 13);
			PushFollow(Follow._block_in_unsafe_statement7118);
			block916=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block916.Tree, block916, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unsafe_statement", 251);
			LeaveRule("unsafe_statement", 251);
			LeaveRule_unsafe_statement();
			if (state.backtracking > 0) { Memoize(input, 251, unsafe_statement_StartIndex); }

		}
		DebugLocation(898, 17);
		} finally { DebugExitRule(GrammarFileName, "unsafe_statement"); }
		return retval;

	}
	// $ANTLR end "unsafe_statement"

	partial void EnterRule_labeled_statement();
	partial void LeaveRule_labeled_statement();

	// $ANTLR start "labeled_statement"
	// cs.g:899:8: public labeled_statement : identifier ':' statement ;
	[GrammarRule("labeled_statement")]
	public XAstParserRuleReturnScope labeled_statement()
	{
		EnterRule_labeled_statement();
		EnterRule("labeled_statement", 252);
		var retval = new XAstParserRuleReturnScope("labeled_statement");
		
		retval.Start = (IToken)input.LT(1);
		int labeled_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal918 = default(IToken);
		XAstParserRuleReturnScope identifier917 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement919 = default(XAstParserRuleReturnScope);

		object char_literal918_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "labeled_statement");
		DebugLocation(899, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 252)) { return retval; }

			// cs.g:899:25: ( identifier ':' statement )
			DebugEnterAlt(1);
			// cs.g:900:2: identifier ':' statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(900, 2);
			PushFollow(Follow._identifier_in_labeled_statement7127);
			identifier917=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier917.Tree, identifier917, retval);
			DebugLocation(900, 15);
			char_literal918=(IToken)Match(input,79,Follow._79_in_labeled_statement7131); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal918_tree = (object)adaptor.Create(char_literal918, retval);
			adaptor.AddChild(root_0, char_literal918_tree);
			}
			DebugLocation(900, 21);
			PushFollow(Follow._statement_in_labeled_statement7135);
			statement919=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement919.Tree, statement919, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeled_statement", 252);
			LeaveRule("labeled_statement", 252);
			LeaveRule_labeled_statement();
			if (state.backtracking > 0) { Memoize(input, 252, labeled_statement_StartIndex); }

		}
		DebugLocation(900, 30);
		} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
		return retval;

	}
	// $ANTLR end "labeled_statement"

	partial void EnterRule_declaration_statement();
	partial void LeaveRule_declaration_statement();

	// $ANTLR start "declaration_statement"
	// cs.g:901:8: public declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
	[GrammarRule("declaration_statement")]
	public XAstParserRuleReturnScope declaration_statement()
	{
		EnterRule_declaration_statement();
		EnterRule("declaration_statement", 253);
		var retval = new XAstParserRuleReturnScope("declaration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int declaration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal922 = default(IToken);
		XAstParserRuleReturnScope local_variable_declaration920 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope local_constant_declaration921 = default(XAstParserRuleReturnScope);

		object char_literal922_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "declaration_statement");
		DebugLocation(901, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 253)) { return retval; }

			// cs.g:901:29: ( ( local_variable_declaration | local_constant_declaration ) ';' )
			DebugEnterAlt(1);
			// cs.g:902:2: ( local_variable_declaration | local_constant_declaration ) ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(902, 2);
			// cs.g:902:2: ( local_variable_declaration | local_constant_declaration )
			int alt242=2;
			try { DebugEnterSubRule(242);
			try { DebugEnterDecision(242, false);
			int LA242_0 = input.LA(1);

			if ((LA242_0==DEFINE||LA242_0==ELIF||LA242_0==ENDIF||LA242_0==IDENTIFIER||LA242_0==UNDEF||LA242_0==95||(LA242_0>=97 && LA242_0<=98)||(LA242_0>=100 && LA242_0<=101)||LA242_0==103||(LA242_0>=105 && LA242_0<=106)||LA242_0==109||LA242_0==114||LA242_0==117||(LA242_0>=119 && LA242_0<=120)||LA242_0==122||LA242_0==126||LA242_0==129||(LA242_0>=132 && LA242_0<=133)||LA242_0==135||LA242_0==138||LA242_0==141||(LA242_0>=143 && LA242_0<=144)||(LA242_0>=146 && LA242_0<=148)||(LA242_0>=151 && LA242_0<=152)||LA242_0==154||LA242_0==157||LA242_0==160||LA242_0==162||LA242_0==167||LA242_0==169||(LA242_0>=171 && LA242_0<=173)||LA242_0==177||LA242_0==183||(LA242_0>=185 && LA242_0<=186)||(LA242_0>=189 && LA242_0<=190)||LA242_0==192||LA242_0==194||LA242_0==196))
			{
				alt242 = 1;
			}
			else if ((LA242_0==112))
			{
				alt242 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 242, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(242); }
			switch (alt242)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:902:3: local_variable_declaration
				{
				DebugLocation(902, 3);
				PushFollow(Follow._local_variable_declaration_in_declaration_statement7146);
				local_variable_declaration920=local_variable_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration920.Tree, local_variable_declaration920, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:903:4: local_constant_declaration
				{
				DebugLocation(903, 4);
				PushFollow(Follow._local_constant_declaration_in_declaration_statement7152);
				local_constant_declaration921=local_constant_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_constant_declaration921.Tree, local_constant_declaration921, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(242); }

			DebugLocation(903, 32);
			char_literal922=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_declaration_statement7155), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal922_tree = (object)adaptor.Create(char_literal922, retval);
			adaptor.AddChild(root_0, char_literal922_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_statement", 253);
			LeaveRule("declaration_statement", 253);
			LeaveRule_declaration_statement();
			if (state.backtracking > 0) { Memoize(input, 253, declaration_statement_StartIndex); }

		}
		DebugLocation(903, 35);
		} finally { DebugExitRule(GrammarFileName, "declaration_statement"); }
		return retval;

	}
	// $ANTLR end "declaration_statement"

	partial void EnterRule_local_variable_declaration();
	partial void LeaveRule_local_variable_declaration();

	// $ANTLR start "local_variable_declaration"
	// cs.g:904:8: public local_variable_declaration : local_variable_type local_variable_declarators ;
	[GrammarRule("local_variable_declaration")]
	public XAstParserRuleReturnScope local_variable_declaration()
	{
		EnterRule_local_variable_declaration();
		EnterRule("local_variable_declaration", 254);
		var retval = new XAstParserRuleReturnScope("local_variable_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope local_variable_type923 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope local_variable_declarators924 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "local_variable_declaration");
		DebugLocation(904, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 254)) { return retval; }

			// cs.g:904:34: ( local_variable_type local_variable_declarators )
			DebugEnterAlt(1);
			// cs.g:905:2: local_variable_type local_variable_declarators
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(905, 2);
			PushFollow(Follow._local_variable_type_in_local_variable_declaration7165);
			local_variable_type923=local_variable_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_type923.Tree, local_variable_type923, retval);
			DebugLocation(905, 24);
			PushFollow(Follow._local_variable_declarators_in_local_variable_declaration7169);
			local_variable_declarators924=local_variable_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declarators924.Tree, local_variable_declarators924, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declaration", 254);
			LeaveRule("local_variable_declaration", 254);
			LeaveRule_local_variable_declaration();
			if (state.backtracking > 0) { Memoize(input, 254, local_variable_declaration_StartIndex); }

		}
		DebugLocation(905, 50);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declaration"); }
		return retval;

	}
	// $ANTLR end "local_variable_declaration"

	partial void EnterRule_local_variable_type();
	partial void LeaveRule_local_variable_type();

	// $ANTLR start "local_variable_type"
	// cs.g:906:8: public local_variable_type : ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type );
	[GrammarRule("local_variable_type")]
	public XAstParserRuleReturnScope local_variable_type()
	{
		EnterRule_local_variable_type();
		EnterRule("local_variable_type", 255);
		var retval = new XAstParserRuleReturnScope("local_variable_type");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal925 = default(IToken);
		IToken string_literal926 = default(IToken);
		XAstParserRuleReturnScope type927 = default(XAstParserRuleReturnScope);

		object string_literal925_tree = default(object);
		object string_literal926_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_variable_type");
		DebugLocation(906, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 255)) { return retval; }

			// cs.g:906:27: ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type )
			int alt243=3;
			try { DebugEnterDecision(243, false);
			switch (input.LA(1))
			{
			case 190:
				{
				int LA243_1 = input.LA(2);

				if ((EvaluatePredicate(synpred35_cs_fragment)))
				{
					alt243 = 1;
				}
				else if ((true))
				{
					alt243 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 243, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 120:
				{
				int LA243_2 = input.LA(2);

				if ((EvaluatePredicate(synpred36_cs_fragment)))
				{
					alt243 = 2;
				}
				else if ((true))
				{
					alt243 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 243, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEFINE:
			case ELIF:
			case ENDIF:
			case IDENTIFIER:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 122:
			case 126:
			case 129:
			case 132:
			case 133:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 185:
			case 186:
			case 189:
			case 192:
			case 194:
			case 196:
				{
				alt243 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 243, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(243); }
			switch (alt243)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:907:2: ( 'var' )=> 'var'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(907, 13);
				string_literal925=(IToken)Match(input,190,Follow._190_in_local_variable_type7185); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal925_tree = (object)adaptor.Create(string_literal925, retval);
				adaptor.AddChild(root_0, string_literal925_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:908:4: ( 'dynamic' )=> 'dynamic'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(908, 19);
				string_literal926=(IToken)Match(input,120,Follow._120_in_local_variable_type7196); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal926_tree = (object)adaptor.Create(string_literal926, retval);
				adaptor.AddChild(root_0, string_literal926_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:909:4: type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(909, 4);
				PushFollow(Follow._type_in_local_variable_type7201);
				type927=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type927.Tree, type927, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_type", 255);
			LeaveRule("local_variable_type", 255);
			LeaveRule_local_variable_type();
			if (state.backtracking > 0) { Memoize(input, 255, local_variable_type_StartIndex); }

		}
		DebugLocation(909, 8);
		} finally { DebugExitRule(GrammarFileName, "local_variable_type"); }
		return retval;

	}
	// $ANTLR end "local_variable_type"

	partial void EnterRule_local_variable_declarators();
	partial void LeaveRule_local_variable_declarators();

	// $ANTLR start "local_variable_declarators"
	// cs.g:910:8: public local_variable_declarators : local_variable_declarator ( ',' local_variable_declarator )* ;
	[GrammarRule("local_variable_declarators")]
	public XAstParserRuleReturnScope local_variable_declarators()
	{
		EnterRule_local_variable_declarators();
		EnterRule("local_variable_declarators", 256);
		var retval = new XAstParserRuleReturnScope("local_variable_declarators");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_declarators_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal929 = default(IToken);
		XAstParserRuleReturnScope local_variable_declarator928 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope local_variable_declarator930 = default(XAstParserRuleReturnScope);

		object char_literal929_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_variable_declarators");
		DebugLocation(910, 60);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 256)) { return retval; }

			// cs.g:910:34: ( local_variable_declarator ( ',' local_variable_declarator )* )
			DebugEnterAlt(1);
			// cs.g:911:2: local_variable_declarator ( ',' local_variable_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(911, 2);
			PushFollow(Follow._local_variable_declarator_in_local_variable_declarators7211);
			local_variable_declarator928=local_variable_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declarator928.Tree, local_variable_declarator928, retval);
			DebugLocation(911, 28);
			// cs.g:911:28: ( ',' local_variable_declarator )*
			try { DebugEnterSubRule(244);
			while (true)
			{
				int alt244=2;
				try { DebugEnterDecision(244, false);
				int LA244_0 = input.LA(1);

				if ((LA244_0==74))
				{
					alt244 = 1;
				}


				} finally { DebugExitDecision(244); }
				switch ( alt244 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:911:29: ',' local_variable_declarator
					{
					DebugLocation(911, 29);
					char_literal929=(IToken)Match(input,74,Follow._74_in_local_variable_declarators7214); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal929_tree = (object)adaptor.Create(char_literal929, retval);
					adaptor.AddChild(root_0, char_literal929_tree);
					}
					DebugLocation(911, 33);
					PushFollow(Follow._local_variable_declarator_in_local_variable_declarators7216);
					local_variable_declarator930=local_variable_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declarator930.Tree, local_variable_declarator930, retval);

					}
					break;

				default:
					goto loop244;
				}
			}

			loop244:
				;

			} finally { DebugExitSubRule(244); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declarators", 256);
			LeaveRule("local_variable_declarators", 256);
			LeaveRule_local_variable_declarators();
			if (state.backtracking > 0) { Memoize(input, 256, local_variable_declarators_StartIndex); }

		}
		DebugLocation(911, 60);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declarators"); }
		return retval;

	}
	// $ANTLR end "local_variable_declarators"

	partial void EnterRule_local_variable_declarator();
	partial void LeaveRule_local_variable_declarator();

	// $ANTLR start "local_variable_declarator"
	// cs.g:912:8: public local_variable_declarator : identifier ( '=' local_variable_initializer )? ;
	[GrammarRule("local_variable_declarator")]
	public XAstParserRuleReturnScope local_variable_declarator()
	{
		EnterRule_local_variable_declarator();
		EnterRule("local_variable_declarator", 257);
		var retval = new XAstParserRuleReturnScope("local_variable_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal932 = default(IToken);
		XAstParserRuleReturnScope identifier931 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope local_variable_initializer933 = default(XAstParserRuleReturnScope);

		object char_literal932_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_variable_declarator");
		DebugLocation(912, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 257)) { return retval; }

			// cs.g:912:33: ( identifier ( '=' local_variable_initializer )? )
			DebugEnterAlt(1);
			// cs.g:913:2: identifier ( '=' local_variable_initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(913, 2);
			PushFollow(Follow._identifier_in_local_variable_declarator7228);
			identifier931=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier931.Tree, identifier931, retval);
			DebugLocation(913, 13);
			// cs.g:913:13: ( '=' local_variable_initializer )?
			int alt245=2;
			try { DebugEnterSubRule(245);
			try { DebugEnterDecision(245, false);
			int LA245_0 = input.LA(1);

			if ((LA245_0==85))
			{
				alt245 = 1;
			}
			} finally { DebugExitDecision(245); }
			switch (alt245)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:913:14: '=' local_variable_initializer
				{
				DebugLocation(913, 14);
				char_literal932=(IToken)Match(input,85,Follow._85_in_local_variable_declarator7231); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal932_tree = (object)adaptor.Create(char_literal932, retval);
				adaptor.AddChild(root_0, char_literal932_tree);
				}
				DebugLocation(913, 20);
				PushFollow(Follow._local_variable_initializer_in_local_variable_declarator7235);
				local_variable_initializer933=local_variable_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_initializer933.Tree, local_variable_initializer933, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(245); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declarator", 257);
			LeaveRule("local_variable_declarator", 257);
			LeaveRule_local_variable_declarator();
			if (state.backtracking > 0) { Memoize(input, 257, local_variable_declarator_StartIndex); }

		}
		DebugLocation(913, 48);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declarator"); }
		return retval;

	}
	// $ANTLR end "local_variable_declarator"

	partial void EnterRule_local_variable_initializer();
	partial void LeaveRule_local_variable_initializer();

	// $ANTLR start "local_variable_initializer"
	// cs.g:914:8: public local_variable_initializer : ( expression | array_initializer | stackalloc_initializer );
	[GrammarRule("local_variable_initializer")]
	public XAstParserRuleReturnScope local_variable_initializer()
	{
		EnterRule_local_variable_initializer();
		EnterRule("local_variable_initializer", 258);
		var retval = new XAstParserRuleReturnScope("local_variable_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression934 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope array_initializer935 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope stackalloc_initializer936 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "local_variable_initializer");
		DebugLocation(914, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 258)) { return retval; }

			// cs.g:914:34: ( expression | array_initializer | stackalloc_initializer )
			int alt246=3;
			try { DebugEnterDecision(246, false);
			switch (input.LA(1))
			{
			case Character_literal:
			case DEFINE:
			case ELIF:
			case ENDIF:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case UNDEF:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 133:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
			case 202:
				{
				alt246 = 1;
				}
				break;
			case 197:
				{
				alt246 = 2;
				}
				break;
			case 175:
				{
				alt246 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 246, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(246); }
			switch (alt246)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:915:2: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(915, 2);
				PushFollow(Follow._expression_in_local_variable_initializer7248);
				expression934=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression934.Tree, expression934, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:916:4: array_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(916, 4);
				PushFollow(Follow._array_initializer_in_local_variable_initializer7253);
				array_initializer935=array_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer935.Tree, array_initializer935, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:917:4: stackalloc_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(917, 4);
				PushFollow(Follow._stackalloc_initializer_in_local_variable_initializer7259);
				stackalloc_initializer936=stackalloc_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stackalloc_initializer936.Tree, stackalloc_initializer936, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_initializer", 258);
			LeaveRule("local_variable_initializer", 258);
			LeaveRule_local_variable_initializer();
			if (state.backtracking > 0) { Memoize(input, 258, local_variable_initializer_StartIndex); }

		}
		DebugLocation(917, 25);
		} finally { DebugExitRule(GrammarFileName, "local_variable_initializer"); }
		return retval;

	}
	// $ANTLR end "local_variable_initializer"

	partial void EnterRule_stackalloc_initializer();
	partial void LeaveRule_stackalloc_initializer();

	// $ANTLR start "stackalloc_initializer"
	// cs.g:918:8: public stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression ']' ;
	[GrammarRule("stackalloc_initializer")]
	public XAstParserRuleReturnScope stackalloc_initializer()
	{
		EnterRule_stackalloc_initializer();
		EnterRule("stackalloc_initializer", 259);
		var retval = new XAstParserRuleReturnScope("stackalloc_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int stackalloc_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal937 = default(IToken);
		IToken char_literal939 = default(IToken);
		IToken char_literal941 = default(IToken);
		XAstParserRuleReturnScope unmanaged_type938 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression940 = default(XAstParserRuleReturnScope);

		object string_literal937_tree = default(object);
		object char_literal939_tree = default(object);
		object char_literal941_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "stackalloc_initializer");
		DebugLocation(918, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 259)) { return retval; }

			// cs.g:918:30: ( 'stackalloc' unmanaged_type '[' expression ']' )
			DebugEnterAlt(1);
			// cs.g:919:2: 'stackalloc' unmanaged_type '[' expression ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(919, 2);
			string_literal937=(IToken)Match(input,175,Follow._175_in_stackalloc_initializer7268); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal937_tree = (object)adaptor.Create(string_literal937, retval);
			adaptor.AddChild(root_0, string_literal937_tree);
			}
			DebugLocation(919, 17);
			PushFollow(Follow._unmanaged_type_in_stackalloc_initializer7272);
			unmanaged_type938=unmanaged_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unmanaged_type938.Tree, unmanaged_type938, retval);
			DebugLocation(919, 34);
			char_literal939=(IToken)Match(input,91,Follow._91_in_stackalloc_initializer7276); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal939_tree = (object)adaptor.Create(char_literal939, retval);
			adaptor.AddChild(root_0, char_literal939_tree);
			}
			DebugLocation(919, 40);
			PushFollow(Follow._expression_in_stackalloc_initializer7280);
			expression940=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression940.Tree, expression940, retval);
			DebugLocation(919, 53);
			char_literal941=(IToken)Match(input,92,Follow._92_in_stackalloc_initializer7284); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal941_tree = (object)adaptor.Create(char_literal941, retval);
			adaptor.AddChild(root_0, char_literal941_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stackalloc_initializer", 259);
			LeaveRule("stackalloc_initializer", 259);
			LeaveRule_stackalloc_initializer();
			if (state.backtracking > 0) { Memoize(input, 259, stackalloc_initializer_StartIndex); }

		}
		DebugLocation(919, 56);
		} finally { DebugExitRule(GrammarFileName, "stackalloc_initializer"); }
		return retval;

	}
	// $ANTLR end "stackalloc_initializer"

	partial void EnterRule_local_constant_declaration();
	partial void LeaveRule_local_constant_declaration();

	// $ANTLR start "local_constant_declaration"
	// cs.g:920:8: public local_constant_declaration : 'const' type constant_declarators ;
	[GrammarRule("local_constant_declaration")]
	public XAstParserRuleReturnScope local_constant_declaration()
	{
		EnterRule_local_constant_declaration();
		EnterRule("local_constant_declaration", 260);
		var retval = new XAstParserRuleReturnScope("local_constant_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int local_constant_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal942 = default(IToken);
		XAstParserRuleReturnScope type943 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_declarators944 = default(XAstParserRuleReturnScope);

		object string_literal942_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_constant_declaration");
		DebugLocation(920, 39);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 260)) { return retval; }

			// cs.g:920:34: ( 'const' type constant_declarators )
			DebugEnterAlt(1);
			// cs.g:921:2: 'const' type constant_declarators
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(921, 2);
			string_literal942=(IToken)Match(input,112,Follow._112_in_local_constant_declaration7294); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal942_tree = (object)adaptor.Create(string_literal942, retval);
			adaptor.AddChild(root_0, string_literal942_tree);
			}
			DebugLocation(921, 12);
			PushFollow(Follow._type_in_local_constant_declaration7298);
			type943=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type943.Tree, type943, retval);
			DebugLocation(921, 19);
			PushFollow(Follow._constant_declarators_in_local_constant_declaration7302);
			constant_declarators944=constant_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators944.Tree, constant_declarators944, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_constant_declaration", 260);
			LeaveRule("local_constant_declaration", 260);
			LeaveRule_local_constant_declaration();
			if (state.backtracking > 0) { Memoize(input, 260, local_constant_declaration_StartIndex); }

		}
		DebugLocation(921, 39);
		} finally { DebugExitRule(GrammarFileName, "local_constant_declaration"); }
		return retval;

	}
	// $ANTLR end "local_constant_declaration"

	partial void EnterRule_expression_statement();
	partial void LeaveRule_expression_statement();

	// $ANTLR start "expression_statement"
	// cs.g:922:8: public expression_statement : expression ';' ;
	[GrammarRule("expression_statement")]
	public XAstParserRuleReturnScope expression_statement()
	{
		EnterRule_expression_statement();
		EnterRule("expression_statement", 261);
		var retval = new XAstParserRuleReturnScope("expression_statement");
		
		retval.Start = (IToken)input.LT(1);
		int expression_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal946 = default(IToken);
		XAstParserRuleReturnScope expression945 = default(XAstParserRuleReturnScope);

		object char_literal946_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_statement");
		DebugLocation(922, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 261)) { return retval; }

			// cs.g:922:28: ( expression ';' )
			DebugEnterAlt(1);
			// cs.g:923:2: expression ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(923, 2);
			PushFollow(Follow._expression_in_expression_statement7312);
			expression945=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression945.Tree, expression945, retval);
			DebugLocation(923, 15);
			char_literal946=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_expression_statement7316), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal946_tree = (object)adaptor.Create(char_literal946, retval);
			adaptor.AddChild(root_0, char_literal946_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_statement", 261);
			LeaveRule("expression_statement", 261);
			LeaveRule_expression_statement();
			if (state.backtracking > 0) { Memoize(input, 261, expression_statement_StartIndex); }

		}
		DebugLocation(923, 18);
		} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
		return retval;

	}
	// $ANTLR end "expression_statement"

	partial void EnterRule_statement_expression();
	partial void LeaveRule_statement_expression();

	// $ANTLR start "statement_expression"
	// cs.g:926:8: public statement_expression : expression ;
	[GrammarRule("statement_expression")]
	public XAstParserRuleReturnScope statement_expression()
	{
		EnterRule_statement_expression();
		EnterRule("statement_expression", 262);
		var retval = new XAstParserRuleReturnScope("statement_expression");
		
		retval.Start = (IToken)input.LT(1);
		int statement_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression947 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement_expression");
		DebugLocation(926, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 262)) { return retval; }

			// cs.g:926:28: ( expression )
			DebugEnterAlt(1);
			// cs.g:927:2: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(927, 2);
			PushFollow(Follow._expression_in_statement_expression7328);
			expression947=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression947.Tree, expression947, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_expression", 262);
			LeaveRule("statement_expression", 262);
			LeaveRule_statement_expression();
			if (state.backtracking > 0) { Memoize(input, 262, statement_expression_StartIndex); }

		}
		DebugLocation(928, 1);
		} finally { DebugExitRule(GrammarFileName, "statement_expression"); }
		return retval;

	}
	// $ANTLR end "statement_expression"

	partial void EnterRule_selection_statement();
	partial void LeaveRule_selection_statement();

	// $ANTLR start "selection_statement"
	// cs.g:929:8: public selection_statement : ( if_statement | switch_statement );
	[GrammarRule("selection_statement")]
	public XAstParserRuleReturnScope selection_statement()
	{
		EnterRule_selection_statement();
		EnterRule("selection_statement", 263);
		var retval = new XAstParserRuleReturnScope("selection_statement");
		
		retval.Start = (IToken)input.LT(1);
		int selection_statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope if_statement948 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope switch_statement949 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "selection_statement");
		DebugLocation(929, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 263)) { return retval; }

			// cs.g:929:27: ( if_statement | switch_statement )
			int alt247=2;
			try { DebugEnterDecision(247, false);
			int LA247_0 = input.LA(1);

			if ((LA247_0==IF))
			{
				alt247 = 1;
			}
			else if ((LA247_0==179))
			{
				alt247 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 247, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(247); }
			switch (alt247)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:930:2: if_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(930, 2);
				PushFollow(Follow._if_statement_in_selection_statement7339);
				if_statement948=if_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, if_statement948.Tree, if_statement948, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:931:4: switch_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(931, 4);
				PushFollow(Follow._switch_statement_in_selection_statement7344);
				switch_statement949=switch_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switch_statement949.Tree, switch_statement949, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_statement", 263);
			LeaveRule("selection_statement", 263);
			LeaveRule_selection_statement();
			if (state.backtracking > 0) { Memoize(input, 263, selection_statement_StartIndex); }

		}
		DebugLocation(931, 20);
		} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
		return retval;

	}
	// $ANTLR end "selection_statement"

	partial void EnterRule_if_statement();
	partial void LeaveRule_if_statement();

	// $ANTLR start "if_statement"
	// cs.g:932:8: public if_statement : 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? ;
	[GrammarRule("if_statement")]
	public XAstParserRuleReturnScope if_statement()
	{
		EnterRule_if_statement();
		EnterRule("if_statement", 264);
		var retval = new XAstParserRuleReturnScope("if_statement");
		
		retval.Start = (IToken)input.LT(1);
		int if_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal950 = default(IToken);
		IToken char_literal951 = default(IToken);
		IToken char_literal953 = default(IToken);
		XAstParserRuleReturnScope boolean_expression952 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement954 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope else_statement955 = default(XAstParserRuleReturnScope);

		object string_literal950_tree = default(object);
		object char_literal951_tree = default(object);
		object char_literal953_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "if_statement");
		DebugLocation(932, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 264)) { return retval; }

			// cs.g:932:20: ( 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? )
			DebugEnterAlt(1);
			// cs.g:934:2: 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(934, 2);
			string_literal950=(IToken)new XToken((IToken)Match(input,IF,Follow._IF_in_if_statement7356), "IF"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal950_tree = (object)adaptor.Create(string_literal950, retval);
			adaptor.AddChild(root_0, string_literal950_tree);
			}
			DebugLocation(934, 9);
			char_literal951=(IToken)Match(input,68,Follow._68_in_if_statement7360); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal951_tree = (object)adaptor.Create(char_literal951, retval);
			adaptor.AddChild(root_0, char_literal951_tree);
			}
			DebugLocation(934, 15);
			PushFollow(Follow._boolean_expression_in_if_statement7364);
			boolean_expression952=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression952.Tree, boolean_expression952, retval);
			DebugLocation(934, 36);
			char_literal953=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_if_statement7368), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal953_tree = (object)adaptor.Create(char_literal953, retval);
			adaptor.AddChild(root_0, char_literal953_tree);
			}
			DebugLocation(934, 42);
			PushFollow(Follow._embedded_statement_in_if_statement7372);
			embedded_statement954=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement954.Tree, embedded_statement954, retval);
			DebugLocation(934, 61);
			// cs.g:934:61: ( ( 'else' )=> else_statement )?
			int alt248=2;
			try { DebugEnterSubRule(248);
			try { DebugEnterDecision(248, false);
			int LA248_0 = input.LA(1);

			if ((LA248_0==121))
			{
				int LA248_1 = input.LA(2);

				if ((EvaluatePredicate(synpred37_cs_fragment)))
				{
					alt248 = 1;
				}
			}
			} finally { DebugExitDecision(248); }
			switch (alt248)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:934:62: ( 'else' )=> else_statement
				{
				DebugLocation(934, 74);
				PushFollow(Follow._else_statement_in_if_statement7381);
				else_statement955=else_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, else_statement955.Tree, else_statement955, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(248); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("if_statement", 264);
			LeaveRule("if_statement", 264);
			LeaveRule_if_statement();
			if (state.backtracking > 0) { Memoize(input, 264, if_statement_StartIndex); }

		}
		DebugLocation(935, 1);
		} finally { DebugExitRule(GrammarFileName, "if_statement"); }
		return retval;

	}
	// $ANTLR end "if_statement"

	partial void EnterRule_else_statement();
	partial void LeaveRule_else_statement();

	// $ANTLR start "else_statement"
	// cs.g:936:8: public else_statement : 'else' embedded_statement ;
	[GrammarRule("else_statement")]
	public XAstParserRuleReturnScope else_statement()
	{
		EnterRule_else_statement();
		EnterRule("else_statement", 265);
		var retval = new XAstParserRuleReturnScope("else_statement");
		
		retval.Start = (IToken)input.LT(1);
		int else_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal956 = default(IToken);
		XAstParserRuleReturnScope embedded_statement957 = default(XAstParserRuleReturnScope);

		object string_literal956_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "else_statement");
		DebugLocation(936, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 265)) { return retval; }

			// cs.g:936:22: ( 'else' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:937:2: 'else' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(937, 2);
			string_literal956=(IToken)Match(input,121,Follow._121_in_else_statement7394); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal956_tree = (object)adaptor.Create(string_literal956, retval);
			adaptor.AddChild(root_0, string_literal956_tree);
			}
			DebugLocation(937, 11);
			PushFollow(Follow._embedded_statement_in_else_statement7398);
			embedded_statement957=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement957.Tree, embedded_statement957, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("else_statement", 265);
			LeaveRule("else_statement", 265);
			LeaveRule_else_statement();
			if (state.backtracking > 0) { Memoize(input, 265, else_statement_StartIndex); }

		}
		DebugLocation(937, 29);
		} finally { DebugExitRule(GrammarFileName, "else_statement"); }
		return retval;

	}
	// $ANTLR end "else_statement"

	partial void EnterRule_switch_statement();
	partial void LeaveRule_switch_statement();

	// $ANTLR start "switch_statement"
	// cs.g:938:8: public switch_statement : 'switch' '(' expression ')' switch_block ;
	[GrammarRule("switch_statement")]
	public XAstParserRuleReturnScope switch_statement()
	{
		EnterRule_switch_statement();
		EnterRule("switch_statement", 266);
		var retval = new XAstParserRuleReturnScope("switch_statement");
		
		retval.Start = (IToken)input.LT(1);
		int switch_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal958 = default(IToken);
		IToken char_literal959 = default(IToken);
		IToken char_literal961 = default(IToken);
		XAstParserRuleReturnScope expression960 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope switch_block962 = default(XAstParserRuleReturnScope);

		object string_literal958_tree = default(object);
		object char_literal959_tree = default(object);
		object char_literal961_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "switch_statement");
		DebugLocation(938, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 266)) { return retval; }

			// cs.g:938:24: ( 'switch' '(' expression ')' switch_block )
			DebugEnterAlt(1);
			// cs.g:939:2: 'switch' '(' expression ')' switch_block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(939, 2);
			string_literal958=(IToken)Match(input,179,Follow._179_in_switch_statement7408); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal958_tree = (object)adaptor.Create(string_literal958, retval);
			adaptor.AddChild(root_0, string_literal958_tree);
			}
			DebugLocation(939, 13);
			char_literal959=(IToken)Match(input,68,Follow._68_in_switch_statement7412); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal959_tree = (object)adaptor.Create(char_literal959, retval);
			adaptor.AddChild(root_0, char_literal959_tree);
			}
			DebugLocation(939, 19);
			PushFollow(Follow._expression_in_switch_statement7416);
			expression960=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression960.Tree, expression960, retval);
			DebugLocation(939, 32);
			char_literal961=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_switch_statement7420), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal961_tree = (object)adaptor.Create(char_literal961, retval);
			adaptor.AddChild(root_0, char_literal961_tree);
			}
			DebugLocation(939, 38);
			PushFollow(Follow._switch_block_in_switch_statement7424);
			switch_block962=switch_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, switch_block962.Tree, switch_block962, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_statement", 266);
			LeaveRule("switch_statement", 266);
			LeaveRule_switch_statement();
			if (state.backtracking > 0) { Memoize(input, 266, switch_statement_StartIndex); }

		}
		DebugLocation(939, 50);
		} finally { DebugExitRule(GrammarFileName, "switch_statement"); }
		return retval;

	}
	// $ANTLR end "switch_statement"

	partial void EnterRule_switch_block();
	partial void LeaveRule_switch_block();

	// $ANTLR start "switch_block"
	// cs.g:940:8: public switch_block : '{' ( switch_sections )? '}' ;
	[GrammarRule("switch_block")]
	public XAstParserRuleReturnScope switch_block()
	{
		EnterRule_switch_block();
		EnterRule("switch_block", 267);
		var retval = new XAstParserRuleReturnScope("switch_block");
		
		retval.Start = (IToken)input.LT(1);
		int switch_block_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal963 = default(IToken);
		IToken char_literal965 = default(IToken);
		XAstParserRuleReturnScope switch_sections964 = default(XAstParserRuleReturnScope);

		object char_literal963_tree = default(object);
		object char_literal965_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "switch_block");
		DebugLocation(940, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 267)) { return retval; }

			// cs.g:940:20: ( '{' ( switch_sections )? '}' )
			DebugEnterAlt(1);
			// cs.g:941:2: '{' ( switch_sections )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(941, 2);
			char_literal963=(IToken)Match(input,197,Follow._197_in_switch_block7434); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal963_tree = (object)adaptor.Create(char_literal963, retval);
			adaptor.AddChild(root_0, char_literal963_tree);
			}
			DebugLocation(941, 8);
			// cs.g:941:8: ( switch_sections )?
			int alt249=2;
			try { DebugEnterSubRule(249);
			try { DebugEnterDecision(249, false);
			int LA249_0 = input.LA(1);

			if ((LA249_0==107||LA249_0==115))
			{
				alt249 = 1;
			}
			} finally { DebugExitDecision(249); }
			switch (alt249)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:941:8: switch_sections
				{
				DebugLocation(941, 8);
				PushFollow(Follow._switch_sections_in_switch_block7438);
				switch_sections964=switch_sections();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switch_sections964.Tree, switch_sections964, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(249); }

			DebugLocation(941, 27);
			char_literal965=(IToken)Match(input,201,Follow._201_in_switch_block7443); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal965_tree = (object)adaptor.Create(char_literal965, retval);
			adaptor.AddChild(root_0, char_literal965_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_block", 267);
			LeaveRule("switch_block", 267);
			LeaveRule_switch_block();
			if (state.backtracking > 0) { Memoize(input, 267, switch_block_StartIndex); }

		}
		DebugLocation(941, 30);
		} finally { DebugExitRule(GrammarFileName, "switch_block"); }
		return retval;

	}
	// $ANTLR end "switch_block"

	partial void EnterRule_switch_sections();
	partial void LeaveRule_switch_sections();

	// $ANTLR start "switch_sections"
	// cs.g:942:8: public switch_sections : ( switch_section )+ ;
	[GrammarRule("switch_sections")]
	public XAstParserRuleReturnScope switch_sections()
	{
		EnterRule_switch_sections();
		EnterRule("switch_sections", 268);
		var retval = new XAstParserRuleReturnScope("switch_sections");
		
		retval.Start = (IToken)input.LT(1);
		int switch_sections_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope switch_section966 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "switch_sections");
		DebugLocation(942, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 268)) { return retval; }

			// cs.g:942:23: ( ( switch_section )+ )
			DebugEnterAlt(1);
			// cs.g:943:2: ( switch_section )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(943, 2);
			// cs.g:943:2: ( switch_section )+
			int cnt250=0;
			try { DebugEnterSubRule(250);
			while (true)
			{
				int alt250=2;
				try { DebugEnterDecision(250, false);
				int LA250_0 = input.LA(1);

				if ((LA250_0==107||LA250_0==115))
				{
					alt250 = 1;
				}


				} finally { DebugExitDecision(250); }
				switch (alt250)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:943:2: switch_section
					{
					DebugLocation(943, 2);
					PushFollow(Follow._switch_section_in_switch_sections7453);
					switch_section966=switch_section();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switch_section966.Tree, switch_section966, retval);

					}
					break;

				default:
					if (cnt250 >= 1)
						goto loop250;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee250 = new EarlyExitException( 250, input );
					DebugRecognitionException(eee250);
					throw eee250;
				}
				cnt250++;
			}
			loop250:
				;

			} finally { DebugExitSubRule(250); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_sections", 268);
			LeaveRule("switch_sections", 268);
			LeaveRule_switch_sections();
			if (state.backtracking > 0) { Memoize(input, 268, switch_sections_StartIndex); }

		}
		DebugLocation(943, 17);
		} finally { DebugExitRule(GrammarFileName, "switch_sections"); }
		return retval;

	}
	// $ANTLR end "switch_sections"

	partial void EnterRule_switch_section();
	partial void LeaveRule_switch_section();

	// $ANTLR start "switch_section"
	// cs.g:944:8: public switch_section : switch_labels statement_list ;
	[GrammarRule("switch_section")]
	public XAstParserRuleReturnScope switch_section()
	{
		EnterRule_switch_section();
		EnterRule("switch_section", 269);
		var retval = new XAstParserRuleReturnScope("switch_section");
		
		retval.Start = (IToken)input.LT(1);
		int switch_section_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope switch_labels967 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_list968 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "switch_section");
		DebugLocation(944, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 269)) { return retval; }

			// cs.g:944:22: ( switch_labels statement_list )
			DebugEnterAlt(1);
			// cs.g:945:2: switch_labels statement_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(945, 2);
			PushFollow(Follow._switch_labels_in_switch_section7464);
			switch_labels967=switch_labels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, switch_labels967.Tree, switch_labels967, retval);
			DebugLocation(945, 18);
			PushFollow(Follow._statement_list_in_switch_section7468);
			statement_list968=statement_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list968.Tree, statement_list968, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_section", 269);
			LeaveRule("switch_section", 269);
			LeaveRule_switch_section();
			if (state.backtracking > 0) { Memoize(input, 269, switch_section_StartIndex); }

		}
		DebugLocation(945, 32);
		} finally { DebugExitRule(GrammarFileName, "switch_section"); }
		return retval;

	}
	// $ANTLR end "switch_section"

	partial void EnterRule_switch_labels();
	partial void LeaveRule_switch_labels();

	// $ANTLR start "switch_labels"
	// cs.g:946:8: public switch_labels : ( switch_label )+ ;
	[GrammarRule("switch_labels")]
	public XAstParserRuleReturnScope switch_labels()
	{
		EnterRule_switch_labels();
		EnterRule("switch_labels", 270);
		var retval = new XAstParserRuleReturnScope("switch_labels");
		
		retval.Start = (IToken)input.LT(1);
		int switch_labels_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope switch_label969 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "switch_labels");
		DebugLocation(946, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 270)) { return retval; }

			// cs.g:946:21: ( ( switch_label )+ )
			DebugEnterAlt(1);
			// cs.g:947:2: ( switch_label )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(947, 2);
			// cs.g:947:2: ( switch_label )+
			int cnt251=0;
			try { DebugEnterSubRule(251);
			while (true)
			{
				int alt251=2;
				try { DebugEnterDecision(251, false);
				int LA251_0 = input.LA(1);

				if ((LA251_0==115))
				{
					int LA251_2 = input.LA(2);

					if ((LA251_2==79))
					{
						alt251 = 1;
					}


				}
				else if ((LA251_0==107))
				{
					alt251 = 1;
				}


				} finally { DebugExitDecision(251); }
				switch (alt251)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:947:2: switch_label
					{
					DebugLocation(947, 2);
					PushFollow(Follow._switch_label_in_switch_labels7478);
					switch_label969=switch_label();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switch_label969.Tree, switch_label969, retval);

					}
					break;

				default:
					if (cnt251 >= 1)
						goto loop251;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee251 = new EarlyExitException( 251, input );
					DebugRecognitionException(eee251);
					throw eee251;
				}
				cnt251++;
			}
			loop251:
				;

			} finally { DebugExitSubRule(251); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_labels", 270);
			LeaveRule("switch_labels", 270);
			LeaveRule_switch_labels();
			if (state.backtracking > 0) { Memoize(input, 270, switch_labels_StartIndex); }

		}
		DebugLocation(947, 15);
		} finally { DebugExitRule(GrammarFileName, "switch_labels"); }
		return retval;

	}
	// $ANTLR end "switch_labels"

	partial void EnterRule_switch_label();
	partial void LeaveRule_switch_label();

	// $ANTLR start "switch_label"
	// cs.g:948:8: public switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
	[GrammarRule("switch_label")]
	public XAstParserRuleReturnScope switch_label()
	{
		EnterRule_switch_label();
		EnterRule("switch_label", 271);
		var retval = new XAstParserRuleReturnScope("switch_label");
		
		retval.Start = (IToken)input.LT(1);
		int switch_label_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal970 = default(IToken);
		IToken char_literal972 = default(IToken);
		IToken string_literal973 = default(IToken);
		IToken char_literal974 = default(IToken);
		XAstParserRuleReturnScope constant_expression971 = default(XAstParserRuleReturnScope);

		object string_literal970_tree = default(object);
		object char_literal972_tree = default(object);
		object string_literal973_tree = default(object);
		object char_literal974_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "switch_label");
		DebugLocation(948, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 271)) { return retval; }

			// cs.g:948:20: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )
			int alt252=2;
			try { DebugEnterDecision(252, false);
			int LA252_0 = input.LA(1);

			if ((LA252_0==107))
			{
				alt252 = 1;
			}
			else if ((LA252_0==115))
			{
				alt252 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 252, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(252); }
			switch (alt252)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:949:2: ( 'case' constant_expression ':' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(949, 2);
				// cs.g:949:2: ( 'case' constant_expression ':' )
				DebugEnterAlt(1);
				// cs.g:949:3: 'case' constant_expression ':'
				{
				DebugLocation(949, 3);
				string_literal970=(IToken)Match(input,107,Follow._107_in_switch_label7490); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal970_tree = (object)adaptor.Create(string_literal970, retval);
				adaptor.AddChild(root_0, string_literal970_tree);
				}
				DebugLocation(949, 12);
				PushFollow(Follow._constant_expression_in_switch_label7494);
				constant_expression971=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression971.Tree, constant_expression971, retval);
				DebugLocation(949, 34);
				char_literal972=(IToken)Match(input,79,Follow._79_in_switch_label7498); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal972_tree = (object)adaptor.Create(char_literal972, retval);
				adaptor.AddChild(root_0, char_literal972_tree);
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:950:4: ( 'default' ':' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(950, 4);
				// cs.g:950:4: ( 'default' ':' )
				DebugEnterAlt(1);
				// cs.g:950:5: 'default' ':'
				{
				DebugLocation(950, 5);
				string_literal973=(IToken)Match(input,115,Follow._115_in_switch_label7505); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal973_tree = (object)adaptor.Create(string_literal973, retval);
				adaptor.AddChild(root_0, string_literal973_tree);
				}
				DebugLocation(950, 17);
				char_literal974=(IToken)Match(input,79,Follow._79_in_switch_label7509); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal974_tree = (object)adaptor.Create(char_literal974, retval);
				adaptor.AddChild(root_0, char_literal974_tree);
				}

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_label", 271);
			LeaveRule("switch_label", 271);
			LeaveRule_switch_label();
			if (state.backtracking > 0) { Memoize(input, 271, switch_label_StartIndex); }

		}
		DebugLocation(950, 21);
		} finally { DebugExitRule(GrammarFileName, "switch_label"); }
		return retval;

	}
	// $ANTLR end "switch_label"

	partial void EnterRule_iteration_statement();
	partial void LeaveRule_iteration_statement();

	// $ANTLR start "iteration_statement"
	// cs.g:951:8: public iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
	[GrammarRule("iteration_statement")]
	public XAstParserRuleReturnScope iteration_statement()
	{
		EnterRule_iteration_statement();
		EnterRule("iteration_statement", 272);
		var retval = new XAstParserRuleReturnScope("iteration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int iteration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope while_statement975 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope do_statement976 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope for_statement977 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope foreach_statement978 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "iteration_statement");
		DebugLocation(951, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 272)) { return retval; }

			// cs.g:951:27: ( while_statement | do_statement | for_statement | foreach_statement )
			int alt253=4;
			try { DebugEnterDecision(253, false);
			switch (input.LA(1))
			{
			case 195:
				{
				alt253 = 1;
				}
				break;
			case 118:
				{
				alt253 = 2;
				}
				break;
			case 130:
				{
				alt253 = 3;
				}
				break;
			case 131:
				{
				alt253 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 253, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(253); }
			switch (alt253)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:952:2: while_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(952, 2);
				PushFollow(Follow._while_statement_in_iteration_statement7520);
				while_statement975=while_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, while_statement975.Tree, while_statement975, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:953:4: do_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(953, 4);
				PushFollow(Follow._do_statement_in_iteration_statement7525);
				do_statement976=do_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, do_statement976.Tree, do_statement976, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:954:4: for_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(954, 4);
				PushFollow(Follow._for_statement_in_iteration_statement7530);
				for_statement977=for_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_statement977.Tree, for_statement977, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:955:4: foreach_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(955, 4);
				PushFollow(Follow._foreach_statement_in_iteration_statement7535);
				foreach_statement978=foreach_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, foreach_statement978.Tree, foreach_statement978, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iteration_statement", 272);
			LeaveRule("iteration_statement", 272);
			LeaveRule_iteration_statement();
			if (state.backtracking > 0) { Memoize(input, 272, iteration_statement_StartIndex); }

		}
		DebugLocation(955, 21);
		} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
		return retval;

	}
	// $ANTLR end "iteration_statement"

	partial void EnterRule_while_statement();
	partial void LeaveRule_while_statement();

	// $ANTLR start "while_statement"
	// cs.g:956:8: public while_statement : 'while' '(' boolean_expression ')' embedded_statement ;
	[GrammarRule("while_statement")]
	public XAstParserRuleReturnScope while_statement()
	{
		EnterRule_while_statement();
		EnterRule("while_statement", 273);
		var retval = new XAstParserRuleReturnScope("while_statement");
		
		retval.Start = (IToken)input.LT(1);
		int while_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal979 = default(IToken);
		IToken char_literal980 = default(IToken);
		IToken char_literal982 = default(IToken);
		XAstParserRuleReturnScope boolean_expression981 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement983 = default(XAstParserRuleReturnScope);

		object string_literal979_tree = default(object);
		object char_literal980_tree = default(object);
		object char_literal982_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "while_statement");
		DebugLocation(956, 63);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 273)) { return retval; }

			// cs.g:956:23: ( 'while' '(' boolean_expression ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:957:2: 'while' '(' boolean_expression ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(957, 2);
			string_literal979=(IToken)Match(input,195,Follow._195_in_while_statement7545); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal979_tree = (object)adaptor.Create(string_literal979, retval);
			adaptor.AddChild(root_0, string_literal979_tree);
			}
			DebugLocation(957, 12);
			char_literal980=(IToken)Match(input,68,Follow._68_in_while_statement7549); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal980_tree = (object)adaptor.Create(char_literal980, retval);
			adaptor.AddChild(root_0, char_literal980_tree);
			}
			DebugLocation(957, 18);
			PushFollow(Follow._boolean_expression_in_while_statement7553);
			boolean_expression981=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression981.Tree, boolean_expression981, retval);
			DebugLocation(957, 39);
			char_literal982=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_while_statement7557), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal982_tree = (object)adaptor.Create(char_literal982, retval);
			adaptor.AddChild(root_0, char_literal982_tree);
			}
			DebugLocation(957, 45);
			PushFollow(Follow._embedded_statement_in_while_statement7561);
			embedded_statement983=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement983.Tree, embedded_statement983, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("while_statement", 273);
			LeaveRule("while_statement", 273);
			LeaveRule_while_statement();
			if (state.backtracking > 0) { Memoize(input, 273, while_statement_StartIndex); }

		}
		DebugLocation(957, 63);
		} finally { DebugExitRule(GrammarFileName, "while_statement"); }
		return retval;

	}
	// $ANTLR end "while_statement"

	partial void EnterRule_do_statement();
	partial void LeaveRule_do_statement();

	// $ANTLR start "do_statement"
	// cs.g:958:8: public do_statement : 'do' embedded_statement 'while' '(' boolean_expression ')' ';' ;
	[GrammarRule("do_statement")]
	public XAstParserRuleReturnScope do_statement()
	{
		EnterRule_do_statement();
		EnterRule("do_statement", 274);
		var retval = new XAstParserRuleReturnScope("do_statement");
		
		retval.Start = (IToken)input.LT(1);
		int do_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal984 = default(IToken);
		IToken string_literal986 = default(IToken);
		IToken char_literal987 = default(IToken);
		IToken char_literal989 = default(IToken);
		IToken char_literal990 = default(IToken);
		XAstParserRuleReturnScope embedded_statement985 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope boolean_expression988 = default(XAstParserRuleReturnScope);

		object string_literal984_tree = default(object);
		object string_literal986_tree = default(object);
		object char_literal987_tree = default(object);
		object char_literal989_tree = default(object);
		object char_literal990_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "do_statement");
		DebugLocation(958, 76);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 274)) { return retval; }

			// cs.g:958:20: ( 'do' embedded_statement 'while' '(' boolean_expression ')' ';' )
			DebugEnterAlt(1);
			// cs.g:959:2: 'do' embedded_statement 'while' '(' boolean_expression ')' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(959, 2);
			string_literal984=(IToken)Match(input,118,Follow._118_in_do_statement7571); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal984_tree = (object)adaptor.Create(string_literal984, retval);
			adaptor.AddChild(root_0, string_literal984_tree);
			}
			DebugLocation(959, 9);
			PushFollow(Follow._embedded_statement_in_do_statement7575);
			embedded_statement985=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement985.Tree, embedded_statement985, retval);
			DebugLocation(959, 30);
			string_literal986=(IToken)Match(input,195,Follow._195_in_do_statement7579); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal986_tree = (object)adaptor.Create(string_literal986, retval);
			adaptor.AddChild(root_0, string_literal986_tree);
			}
			DebugLocation(959, 40);
			char_literal987=(IToken)Match(input,68,Follow._68_in_do_statement7583); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal987_tree = (object)adaptor.Create(char_literal987, retval);
			adaptor.AddChild(root_0, char_literal987_tree);
			}
			DebugLocation(959, 46);
			PushFollow(Follow._boolean_expression_in_do_statement7587);
			boolean_expression988=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression988.Tree, boolean_expression988, retval);
			DebugLocation(959, 67);
			char_literal989=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_do_statement7591), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal989_tree = (object)adaptor.Create(char_literal989, retval);
			adaptor.AddChild(root_0, char_literal989_tree);
			}
			DebugLocation(959, 73);
			char_literal990=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_do_statement7595), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal990_tree = (object)adaptor.Create(char_literal990, retval);
			adaptor.AddChild(root_0, char_literal990_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("do_statement", 274);
			LeaveRule("do_statement", 274);
			LeaveRule_do_statement();
			if (state.backtracking > 0) { Memoize(input, 274, do_statement_StartIndex); }

		}
		DebugLocation(959, 76);
		} finally { DebugExitRule(GrammarFileName, "do_statement"); }
		return retval;

	}
	// $ANTLR end "do_statement"

	partial void EnterRule_for_statement();
	partial void LeaveRule_for_statement();

	// $ANTLR start "for_statement"
	// cs.g:960:8: public for_statement : 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement ;
	[GrammarRule("for_statement")]
	public XAstParserRuleReturnScope for_statement()
	{
		EnterRule_for_statement();
		EnterRule("for_statement", 275);
		var retval = new XAstParserRuleReturnScope("for_statement");
		
		retval.Start = (IToken)input.LT(1);
		int for_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal991 = default(IToken);
		IToken char_literal992 = default(IToken);
		IToken char_literal994 = default(IToken);
		IToken char_literal996 = default(IToken);
		IToken char_literal998 = default(IToken);
		XAstParserRuleReturnScope for_initializer993 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope for_condition995 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope for_iterator997 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement999 = default(XAstParserRuleReturnScope);

		object string_literal991_tree = default(object);
		object char_literal992_tree = default(object);
		object char_literal994_tree = default(object);
		object char_literal996_tree = default(object);
		object char_literal998_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "for_statement");
		DebugLocation(960, 104);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 275)) { return retval; }

			// cs.g:960:21: ( 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:961:2: 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(961, 2);
			string_literal991=(IToken)Match(input,130,Follow._130_in_for_statement7605); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal991_tree = (object)adaptor.Create(string_literal991, retval);
			adaptor.AddChild(root_0, string_literal991_tree);
			}
			DebugLocation(961, 10);
			char_literal992=(IToken)Match(input,68,Follow._68_in_for_statement7609); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal992_tree = (object)adaptor.Create(char_literal992, retval);
			adaptor.AddChild(root_0, char_literal992_tree);
			}
			DebugLocation(961, 16);
			// cs.g:961:16: ( for_initializer )?
			int alt254=2;
			try { DebugEnterSubRule(254);
			try { DebugEnterDecision(254, false);
			int LA254_0 = input.LA(1);

			if ((LA254_0==Character_literal||LA254_0==DEFINE||LA254_0==ELIF||LA254_0==ENDIF||LA254_0==FALSE||(LA254_0>=Hex_number && LA254_0<=IDENTIFIER)||(LA254_0>=MINUS && LA254_0<=NUMBER)||LA254_0==Real_literal||LA254_0==STRINGLITERAL||LA254_0==TRUE||LA254_0==UNDEF||LA254_0==Verbatim_string_literal||LA254_0==61||LA254_0==66||(LA254_0>=68 && LA254_0<=69)||(LA254_0>=71 && LA254_0<=72)||LA254_0==75||LA254_0==95||(LA254_0>=97 && LA254_0<=98)||(LA254_0>=100 && LA254_0<=103)||(LA254_0>=105 && LA254_0<=106)||(LA254_0>=109 && LA254_0<=110)||(LA254_0>=114 && LA254_0<=117)||(LA254_0>=119 && LA254_0<=120)||LA254_0==122||LA254_0==126||LA254_0==129||(LA254_0>=132 && LA254_0<=133)||LA254_0==135||LA254_0==138||LA254_0==141||(LA254_0>=143 && LA254_0<=144)||(LA254_0>=146 && LA254_0<=148)||(LA254_0>=150 && LA254_0<=152)||LA254_0==154||LA254_0==157||LA254_0==160||LA254_0==162||LA254_0==167||LA254_0==169||(LA254_0>=171 && LA254_0<=174)||LA254_0==177||LA254_0==180||(LA254_0>=183 && LA254_0<=187)||(LA254_0>=189 && LA254_0<=190)||LA254_0==192||LA254_0==194||LA254_0==196||LA254_0==202))
			{
				alt254 = 1;
			}
			} finally { DebugExitDecision(254); }
			switch (alt254)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:961:16: for_initializer
				{
				DebugLocation(961, 16);
				PushFollow(Follow._for_initializer_in_for_statement7613);
				for_initializer993=for_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_initializer993.Tree, for_initializer993, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(254); }

			DebugLocation(961, 35);
			char_literal994=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_for_statement7618), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal994_tree = (object)adaptor.Create(char_literal994, retval);
			adaptor.AddChild(root_0, char_literal994_tree);
			}
			DebugLocation(961, 41);
			// cs.g:961:41: ( for_condition )?
			int alt255=2;
			try { DebugEnterSubRule(255);
			try { DebugEnterDecision(255, false);
			int LA255_0 = input.LA(1);

			if ((LA255_0==Character_literal||LA255_0==DEFINE||LA255_0==ELIF||LA255_0==ENDIF||LA255_0==FALSE||(LA255_0>=Hex_number && LA255_0<=IDENTIFIER)||(LA255_0>=MINUS && LA255_0<=NUMBER)||LA255_0==Real_literal||LA255_0==STRINGLITERAL||LA255_0==TRUE||LA255_0==UNDEF||LA255_0==Verbatim_string_literal||LA255_0==61||LA255_0==66||(LA255_0>=68 && LA255_0<=69)||(LA255_0>=71 && LA255_0<=72)||LA255_0==75||LA255_0==95||(LA255_0>=97 && LA255_0<=98)||(LA255_0>=100 && LA255_0<=103)||(LA255_0>=105 && LA255_0<=106)||(LA255_0>=109 && LA255_0<=110)||(LA255_0>=114 && LA255_0<=117)||(LA255_0>=119 && LA255_0<=120)||LA255_0==122||LA255_0==126||LA255_0==129||(LA255_0>=132 && LA255_0<=133)||LA255_0==135||LA255_0==138||LA255_0==141||(LA255_0>=143 && LA255_0<=144)||(LA255_0>=146 && LA255_0<=148)||(LA255_0>=150 && LA255_0<=152)||LA255_0==154||LA255_0==157||LA255_0==160||LA255_0==162||LA255_0==167||LA255_0==169||(LA255_0>=171 && LA255_0<=174)||LA255_0==177||LA255_0==180||(LA255_0>=183 && LA255_0<=187)||(LA255_0>=189 && LA255_0<=190)||LA255_0==194||LA255_0==196||LA255_0==202))
			{
				alt255 = 1;
			}
			} finally { DebugExitDecision(255); }
			switch (alt255)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:961:41: for_condition
				{
				DebugLocation(961, 41);
				PushFollow(Follow._for_condition_in_for_statement7622);
				for_condition995=for_condition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_condition995.Tree, for_condition995, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(255); }

			DebugLocation(961, 58);
			char_literal996=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_for_statement7627), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal996_tree = (object)adaptor.Create(char_literal996, retval);
			adaptor.AddChild(root_0, char_literal996_tree);
			}
			DebugLocation(961, 64);
			// cs.g:961:64: ( for_iterator )?
			int alt256=2;
			try { DebugEnterSubRule(256);
			try { DebugEnterDecision(256, false);
			int LA256_0 = input.LA(1);

			if ((LA256_0==Character_literal||LA256_0==DEFINE||LA256_0==ELIF||LA256_0==ENDIF||LA256_0==FALSE||(LA256_0>=Hex_number && LA256_0<=IDENTIFIER)||(LA256_0>=MINUS && LA256_0<=NUMBER)||LA256_0==Real_literal||LA256_0==STRINGLITERAL||LA256_0==TRUE||LA256_0==UNDEF||LA256_0==Verbatim_string_literal||LA256_0==61||LA256_0==66||(LA256_0>=68 && LA256_0<=69)||(LA256_0>=71 && LA256_0<=72)||LA256_0==75||LA256_0==95||(LA256_0>=97 && LA256_0<=98)||(LA256_0>=100 && LA256_0<=103)||(LA256_0>=105 && LA256_0<=106)||(LA256_0>=109 && LA256_0<=110)||(LA256_0>=114 && LA256_0<=117)||(LA256_0>=119 && LA256_0<=120)||LA256_0==122||LA256_0==126||LA256_0==129||(LA256_0>=132 && LA256_0<=133)||LA256_0==135||LA256_0==138||LA256_0==141||(LA256_0>=143 && LA256_0<=144)||(LA256_0>=146 && LA256_0<=148)||(LA256_0>=150 && LA256_0<=152)||LA256_0==154||LA256_0==157||LA256_0==160||LA256_0==162||LA256_0==167||LA256_0==169||(LA256_0>=171 && LA256_0<=174)||LA256_0==177||LA256_0==180||(LA256_0>=183 && LA256_0<=187)||(LA256_0>=189 && LA256_0<=190)||LA256_0==194||LA256_0==196||LA256_0==202))
			{
				alt256 = 1;
			}
			} finally { DebugExitDecision(256); }
			switch (alt256)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:961:64: for_iterator
				{
				DebugLocation(961, 64);
				PushFollow(Follow._for_iterator_in_for_statement7631);
				for_iterator997=for_iterator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_iterator997.Tree, for_iterator997, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(256); }

			DebugLocation(961, 80);
			char_literal998=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_for_statement7636), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal998_tree = (object)adaptor.Create(char_literal998, retval);
			adaptor.AddChild(root_0, char_literal998_tree);
			}
			DebugLocation(961, 86);
			PushFollow(Follow._embedded_statement_in_for_statement7640);
			embedded_statement999=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement999.Tree, embedded_statement999, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_statement", 275);
			LeaveRule("for_statement", 275);
			LeaveRule_for_statement();
			if (state.backtracking > 0) { Memoize(input, 275, for_statement_StartIndex); }

		}
		DebugLocation(961, 104);
		} finally { DebugExitRule(GrammarFileName, "for_statement"); }
		return retval;

	}
	// $ANTLR end "for_statement"

	partial void EnterRule_for_initializer();
	partial void LeaveRule_for_initializer();

	// $ANTLR start "for_initializer"
	// cs.g:962:8: public for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );
	[GrammarRule("for_initializer")]
	public XAstParserRuleReturnScope for_initializer()
	{
		EnterRule_for_initializer();
		EnterRule("for_initializer", 276);
		var retval = new XAstParserRuleReturnScope("for_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int for_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope local_variable_declaration1000 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_expression_list1001 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "for_initializer");
		DebugLocation(962, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 276)) { return retval; }

			// cs.g:962:23: ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list )
			int alt257=2;
			try { DebugEnterDecision(257, false);
			int LA257_0 = input.LA(1);

			if ((LA257_0==190))
			{
				int LA257_1 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt257 = 1;
				}
				else if ((true))
				{
					alt257 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 257, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA257_0==120))
			{
				int LA257_2 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt257 = 1;
				}
				else if ((true))
				{
					alt257 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 257, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA257_0==103||LA257_0==106||LA257_0==109||LA257_0==114||LA257_0==119||LA257_0==129||LA257_0==138||LA257_0==146||LA257_0==151||LA257_0==169||LA257_0==173||LA257_0==177||(LA257_0>=185 && LA257_0<=186)||LA257_0==189))
			{
				int LA257_3 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt257 = 1;
				}
				else if ((true))
				{
					alt257 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 257, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA257_0==IDENTIFIER))
			{
				int LA257_4 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt257 = 1;
				}
				else if ((true))
				{
					alt257 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 257, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA257_0==132))
			{
				int LA257_5 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt257 = 1;
				}
				else if ((true))
				{
					alt257 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 257, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA257_0==192) && (EvaluatePredicate(synpred38_cs_fragment)))
			{
				alt257 = 1;
			}
			else if ((LA257_0==Character_literal||LA257_0==FALSE||LA257_0==Hex_number||(LA257_0>=MINUS && LA257_0<=NUMBER)||LA257_0==Real_literal||LA257_0==STRINGLITERAL||LA257_0==TRUE||LA257_0==Verbatim_string_literal||LA257_0==61||LA257_0==66||(LA257_0>=68 && LA257_0<=69)||(LA257_0>=71 && LA257_0<=72)||LA257_0==75||LA257_0==102||LA257_0==110||(LA257_0>=115 && LA257_0<=116)||LA257_0==150||LA257_0==174||LA257_0==180||LA257_0==184||LA257_0==187||LA257_0==202))
			{
				alt257 = 2;
			}
			else if ((LA257_0==DEFINE||LA257_0==ELIF||LA257_0==ENDIF||LA257_0==UNDEF||LA257_0==95||(LA257_0>=97 && LA257_0<=98)||(LA257_0>=100 && LA257_0<=101)||LA257_0==105||LA257_0==117||LA257_0==122||LA257_0==126||LA257_0==133||LA257_0==135||LA257_0==141||(LA257_0>=143 && LA257_0<=144)||(LA257_0>=147 && LA257_0<=148)||LA257_0==152||LA257_0==154||LA257_0==157||LA257_0==160||LA257_0==162||LA257_0==167||(LA257_0>=171 && LA257_0<=172)||LA257_0==183||LA257_0==194||LA257_0==196))
			{
				int LA257_26 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt257 = 1;
				}
				else if ((true))
				{
					alt257 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 257, 26, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 257, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(257); }
			switch (alt257)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:963:2: ( local_variable_declaration )=> local_variable_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(963, 34);
				PushFollow(Follow._local_variable_declaration_in_for_initializer7656);
				local_variable_declaration1000=local_variable_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration1000.Tree, local_variable_declaration1000, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:964:4: statement_expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(964, 4);
				PushFollow(Follow._statement_expression_list_in_for_initializer7661);
				statement_expression_list1001=statement_expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression_list1001.Tree, statement_expression_list1001, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_initializer", 276);
			LeaveRule("for_initializer", 276);
			LeaveRule_for_initializer();
			if (state.backtracking > 0) { Memoize(input, 276, for_initializer_StartIndex); }

		}
		DebugLocation(965, 1);
		} finally { DebugExitRule(GrammarFileName, "for_initializer"); }
		return retval;

	}
	// $ANTLR end "for_initializer"

	partial void EnterRule_for_condition();
	partial void LeaveRule_for_condition();

	// $ANTLR start "for_condition"
	// cs.g:966:8: public for_condition : boolean_expression ;
	[GrammarRule("for_condition")]
	public XAstParserRuleReturnScope for_condition()
	{
		EnterRule_for_condition();
		EnterRule("for_condition", 277);
		var retval = new XAstParserRuleReturnScope("for_condition");
		
		retval.Start = (IToken)input.LT(1);
		int for_condition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope boolean_expression1002 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "for_condition");
		DebugLocation(966, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 277)) { return retval; }

			// cs.g:966:21: ( boolean_expression )
			DebugEnterAlt(1);
			// cs.g:967:2: boolean_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(967, 2);
			PushFollow(Follow._boolean_expression_in_for_condition7673);
			boolean_expression1002=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression1002.Tree, boolean_expression1002, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_condition", 277);
			LeaveRule("for_condition", 277);
			LeaveRule_for_condition();
			if (state.backtracking > 0) { Memoize(input, 277, for_condition_StartIndex); }

		}
		DebugLocation(967, 20);
		} finally { DebugExitRule(GrammarFileName, "for_condition"); }
		return retval;

	}
	// $ANTLR end "for_condition"

	partial void EnterRule_for_iterator();
	partial void LeaveRule_for_iterator();

	// $ANTLR start "for_iterator"
	// cs.g:968:8: public for_iterator : statement_expression_list ;
	[GrammarRule("for_iterator")]
	public XAstParserRuleReturnScope for_iterator()
	{
		EnterRule_for_iterator();
		EnterRule("for_iterator", 278);
		var retval = new XAstParserRuleReturnScope("for_iterator");
		
		retval.Start = (IToken)input.LT(1);
		int for_iterator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope statement_expression_list1003 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "for_iterator");
		DebugLocation(968, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 278)) { return retval; }

			// cs.g:968:20: ( statement_expression_list )
			DebugEnterAlt(1);
			// cs.g:969:2: statement_expression_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(969, 2);
			PushFollow(Follow._statement_expression_list_in_for_iterator7683);
			statement_expression_list1003=statement_expression_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression_list1003.Tree, statement_expression_list1003, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_iterator", 278);
			LeaveRule("for_iterator", 278);
			LeaveRule_for_iterator();
			if (state.backtracking > 0) { Memoize(input, 278, for_iterator_StartIndex); }

		}
		DebugLocation(969, 27);
		} finally { DebugExitRule(GrammarFileName, "for_iterator"); }
		return retval;

	}
	// $ANTLR end "for_iterator"

	partial void EnterRule_statement_expression_list();
	partial void LeaveRule_statement_expression_list();

	// $ANTLR start "statement_expression_list"
	// cs.g:970:8: public statement_expression_list : statement_expression ( ',' statement_expression )* ;
	[GrammarRule("statement_expression_list")]
	public XAstParserRuleReturnScope statement_expression_list()
	{
		EnterRule_statement_expression_list();
		EnterRule("statement_expression_list", 279);
		var retval = new XAstParserRuleReturnScope("statement_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int statement_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1005 = default(IToken);
		XAstParserRuleReturnScope statement_expression1004 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_expression1006 = default(XAstParserRuleReturnScope);

		object char_literal1005_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statement_expression_list");
		DebugLocation(970, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 279)) { return retval; }

			// cs.g:970:33: ( statement_expression ( ',' statement_expression )* )
			DebugEnterAlt(1);
			// cs.g:971:2: statement_expression ( ',' statement_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(971, 2);
			PushFollow(Follow._statement_expression_in_statement_expression_list7693);
			statement_expression1004=statement_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression1004.Tree, statement_expression1004, retval);
			DebugLocation(971, 23);
			// cs.g:971:23: ( ',' statement_expression )*
			try { DebugEnterSubRule(258);
			while (true)
			{
				int alt258=2;
				try { DebugEnterDecision(258, false);
				int LA258_0 = input.LA(1);

				if ((LA258_0==74))
				{
					alt258 = 1;
				}


				} finally { DebugExitDecision(258); }
				switch ( alt258 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:971:24: ',' statement_expression
					{
					DebugLocation(971, 24);
					char_literal1005=(IToken)Match(input,74,Follow._74_in_statement_expression_list7696); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1005_tree = (object)adaptor.Create(char_literal1005, retval);
					adaptor.AddChild(root_0, char_literal1005_tree);
					}
					DebugLocation(971, 28);
					PushFollow(Follow._statement_expression_in_statement_expression_list7698);
					statement_expression1006=statement_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression1006.Tree, statement_expression1006, retval);

					}
					break;

				default:
					goto loop258;
				}
			}

			loop258:
				;

			} finally { DebugExitSubRule(258); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_expression_list", 279);
			LeaveRule("statement_expression_list", 279);
			LeaveRule_statement_expression_list();
			if (state.backtracking > 0) { Memoize(input, 279, statement_expression_list_StartIndex); }

		}
		DebugLocation(971, 50);
		} finally { DebugExitRule(GrammarFileName, "statement_expression_list"); }
		return retval;

	}
	// $ANTLR end "statement_expression_list"

	partial void EnterRule_foreach_statement();
	partial void LeaveRule_foreach_statement();

	// $ANTLR start "foreach_statement"
	// cs.g:972:8: public foreach_statement : 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement ;
	[GrammarRule("foreach_statement")]
	public XAstParserRuleReturnScope foreach_statement()
	{
		EnterRule_foreach_statement();
		EnterRule("foreach_statement", 280);
		var retval = new XAstParserRuleReturnScope("foreach_statement");
		
		retval.Start = (IToken)input.LT(1);
		int foreach_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1007 = default(IToken);
		IToken char_literal1008 = default(IToken);
		IToken string_literal1011 = default(IToken);
		IToken char_literal1013 = default(IToken);
		XAstParserRuleReturnScope local_variable_type1009 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier1010 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression1012 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement1014 = default(XAstParserRuleReturnScope);

		object string_literal1007_tree = default(object);
		object char_literal1008_tree = default(object);
		object string_literal1011_tree = default(object);
		object char_literal1013_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "foreach_statement");
		DebugLocation(972, 99);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 280)) { return retval; }

			// cs.g:972:25: ( 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:973:2: 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(973, 2);
			string_literal1007=(IToken)Match(input,131,Follow._131_in_foreach_statement7710); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1007_tree = (object)adaptor.Create(string_literal1007, retval);
			adaptor.AddChild(root_0, string_literal1007_tree);
			}
			DebugLocation(973, 14);
			char_literal1008=(IToken)Match(input,68,Follow._68_in_foreach_statement7714); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1008_tree = (object)adaptor.Create(char_literal1008, retval);
			adaptor.AddChild(root_0, char_literal1008_tree);
			}
			DebugLocation(973, 20);
			PushFollow(Follow._local_variable_type_in_foreach_statement7718);
			local_variable_type1009=local_variable_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_type1009.Tree, local_variable_type1009, retval);
			DebugLocation(973, 42);
			PushFollow(Follow._identifier_in_foreach_statement7722);
			identifier1010=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier1010.Tree, identifier1010, retval);
			DebugLocation(973, 55);
			string_literal1011=(IToken)Match(input,137,Follow._137_in_foreach_statement7726); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1011_tree = (object)adaptor.Create(string_literal1011, retval);
			adaptor.AddChild(root_0, string_literal1011_tree);
			}
			DebugLocation(973, 62);
			PushFollow(Follow._expression_in_foreach_statement7730);
			expression1012=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression1012.Tree, expression1012, retval);
			DebugLocation(973, 75);
			char_literal1013=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_foreach_statement7734), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1013_tree = (object)adaptor.Create(char_literal1013, retval);
			adaptor.AddChild(root_0, char_literal1013_tree);
			}
			DebugLocation(973, 81);
			PushFollow(Follow._embedded_statement_in_foreach_statement7738);
			embedded_statement1014=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement1014.Tree, embedded_statement1014, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("foreach_statement", 280);
			LeaveRule("foreach_statement", 280);
			LeaveRule_foreach_statement();
			if (state.backtracking > 0) { Memoize(input, 280, foreach_statement_StartIndex); }

		}
		DebugLocation(973, 99);
		} finally { DebugExitRule(GrammarFileName, "foreach_statement"); }
		return retval;

	}
	// $ANTLR end "foreach_statement"

	partial void EnterRule_jump_statement();
	partial void LeaveRule_jump_statement();

	// $ANTLR start "jump_statement"
	// cs.g:974:8: public jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
	[GrammarRule("jump_statement")]
	public XAstParserRuleReturnScope jump_statement()
	{
		EnterRule_jump_statement();
		EnterRule("jump_statement", 281);
		var retval = new XAstParserRuleReturnScope("jump_statement");
		
		retval.Start = (IToken)input.LT(1);
		int jump_statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope break_statement1015 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope continue_statement1016 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope goto_statement1017 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope return_statement1018 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope throw_statement1019 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "jump_statement");
		DebugLocation(974, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 281)) { return retval; }

			// cs.g:974:22: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )
			int alt259=5;
			try { DebugEnterDecision(259, false);
			switch (input.LA(1))
			{
			case 104:
				{
				alt259 = 1;
				}
				break;
			case 113:
				{
				alt259 = 2;
				}
				break;
			case 134:
				{
				alt259 = 3;
				}
				break;
			case 168:
				{
				alt259 = 4;
				}
				break;
			case 181:
				{
				alt259 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(259); }
			switch (alt259)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:975:2: break_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(975, 2);
				PushFollow(Follow._break_statement_in_jump_statement7748);
				break_statement1015=break_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, break_statement1015.Tree, break_statement1015, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:976:4: continue_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(976, 4);
				PushFollow(Follow._continue_statement_in_jump_statement7753);
				continue_statement1016=continue_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, continue_statement1016.Tree, continue_statement1016, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:977:4: goto_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(977, 4);
				PushFollow(Follow._goto_statement_in_jump_statement7758);
				goto_statement1017=goto_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, goto_statement1017.Tree, goto_statement1017, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:978:4: return_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(978, 4);
				PushFollow(Follow._return_statement_in_jump_statement7763);
				return_statement1018=return_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, return_statement1018.Tree, return_statement1018, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:979:4: throw_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(979, 4);
				PushFollow(Follow._throw_statement_in_jump_statement7768);
				throw_statement1019=throw_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, throw_statement1019.Tree, throw_statement1019, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jump_statement", 281);
			LeaveRule("jump_statement", 281);
			LeaveRule_jump_statement();
			if (state.backtracking > 0) { Memoize(input, 281, jump_statement_StartIndex); }

		}
		DebugLocation(979, 19);
		} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
		return retval;

	}
	// $ANTLR end "jump_statement"

	partial void EnterRule_break_statement();
	partial void LeaveRule_break_statement();

	// $ANTLR start "break_statement"
	// cs.g:980:8: public break_statement : 'break' ';' ;
	[GrammarRule("break_statement")]
	public XAstParserRuleReturnScope break_statement()
	{
		EnterRule_break_statement();
		EnterRule("break_statement", 282);
		var retval = new XAstParserRuleReturnScope("break_statement");
		
		retval.Start = (IToken)input.LT(1);
		int break_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1020 = default(IToken);
		IToken char_literal1021 = default(IToken);

		object string_literal1020_tree = default(object);
		object char_literal1021_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "break_statement");
		DebugLocation(980, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 282)) { return retval; }

			// cs.g:980:23: ( 'break' ';' )
			DebugEnterAlt(1);
			// cs.g:981:2: 'break' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(981, 2);
			string_literal1020=(IToken)Match(input,104,Follow._104_in_break_statement7778); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1020_tree = (object)adaptor.Create(string_literal1020, retval);
			adaptor.AddChild(root_0, string_literal1020_tree);
			}
			DebugLocation(981, 12);
			char_literal1021=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_break_statement7782), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1021_tree = (object)adaptor.Create(char_literal1021, retval);
			adaptor.AddChild(root_0, char_literal1021_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("break_statement", 282);
			LeaveRule("break_statement", 282);
			LeaveRule_break_statement();
			if (state.backtracking > 0) { Memoize(input, 282, break_statement_StartIndex); }

		}
		DebugLocation(981, 15);
		} finally { DebugExitRule(GrammarFileName, "break_statement"); }
		return retval;

	}
	// $ANTLR end "break_statement"

	partial void EnterRule_continue_statement();
	partial void LeaveRule_continue_statement();

	// $ANTLR start "continue_statement"
	// cs.g:982:8: public continue_statement : 'continue' ';' ;
	[GrammarRule("continue_statement")]
	public XAstParserRuleReturnScope continue_statement()
	{
		EnterRule_continue_statement();
		EnterRule("continue_statement", 283);
		var retval = new XAstParserRuleReturnScope("continue_statement");
		
		retval.Start = (IToken)input.LT(1);
		int continue_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1022 = default(IToken);
		IToken char_literal1023 = default(IToken);

		object string_literal1022_tree = default(object);
		object char_literal1023_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "continue_statement");
		DebugLocation(982, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 283)) { return retval; }

			// cs.g:982:26: ( 'continue' ';' )
			DebugEnterAlt(1);
			// cs.g:983:2: 'continue' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(983, 2);
			string_literal1022=(IToken)Match(input,113,Follow._113_in_continue_statement7792); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1022_tree = (object)adaptor.Create(string_literal1022, retval);
			adaptor.AddChild(root_0, string_literal1022_tree);
			}
			DebugLocation(983, 15);
			char_literal1023=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_continue_statement7796), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1023_tree = (object)adaptor.Create(char_literal1023, retval);
			adaptor.AddChild(root_0, char_literal1023_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("continue_statement", 283);
			LeaveRule("continue_statement", 283);
			LeaveRule_continue_statement();
			if (state.backtracking > 0) { Memoize(input, 283, continue_statement_StartIndex); }

		}
		DebugLocation(983, 18);
		} finally { DebugExitRule(GrammarFileName, "continue_statement"); }
		return retval;

	}
	// $ANTLR end "continue_statement"

	partial void EnterRule_goto_statement();
	partial void LeaveRule_goto_statement();

	// $ANTLR start "goto_statement"
	// cs.g:984:8: public goto_statement : 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' ;
	[GrammarRule("goto_statement")]
	public XAstParserRuleReturnScope goto_statement()
	{
		EnterRule_goto_statement();
		EnterRule("goto_statement", 284);
		var retval = new XAstParserRuleReturnScope("goto_statement");
		
		retval.Start = (IToken)input.LT(1);
		int goto_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1024 = default(IToken);
		IToken string_literal1026 = default(IToken);
		IToken string_literal1028 = default(IToken);
		IToken char_literal1029 = default(IToken);
		XAstParserRuleReturnScope identifier1025 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression1027 = default(XAstParserRuleReturnScope);

		object string_literal1024_tree = default(object);
		object string_literal1026_tree = default(object);
		object string_literal1028_tree = default(object);
		object char_literal1029_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "goto_statement");
		DebugLocation(984, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 284)) { return retval; }

			// cs.g:984:22: ( 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' )
			DebugEnterAlt(1);
			// cs.g:985:2: 'goto' ( identifier | 'case' constant_expression | 'default' ) ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(985, 2);
			string_literal1024=(IToken)Match(input,134,Follow._134_in_goto_statement7806); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1024_tree = (object)adaptor.Create(string_literal1024, retval);
			adaptor.AddChild(root_0, string_literal1024_tree);
			}
			DebugLocation(985, 11);
			// cs.g:985:11: ( identifier | 'case' constant_expression | 'default' )
			int alt260=3;
			try { DebugEnterSubRule(260);
			try { DebugEnterDecision(260, false);
			switch (input.LA(1))
			{
			case DEFINE:
			case ELIF:
			case ENDIF:
			case IDENTIFIER:
			case UNDEF:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 133:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				alt260 = 1;
				}
				break;
			case 107:
				{
				alt260 = 2;
				}
				break;
			case 115:
				{
				alt260 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 260, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(260); }
			switch (alt260)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:985:13: identifier
				{
				DebugLocation(985, 13);
				PushFollow(Follow._identifier_in_goto_statement7812);
				identifier1025=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier1025.Tree, identifier1025, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:986:7: 'case' constant_expression
				{
				DebugLocation(986, 7);
				string_literal1026=(IToken)Match(input,107,Follow._107_in_goto_statement7820); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1026_tree = (object)adaptor.Create(string_literal1026, retval);
				adaptor.AddChild(root_0, string_literal1026_tree);
				}
				DebugLocation(986, 16);
				PushFollow(Follow._constant_expression_in_goto_statement7824);
				constant_expression1027=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression1027.Tree, constant_expression1027, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:987:7: 'default'
				{
				DebugLocation(987, 7);
				string_literal1028=(IToken)Match(input,115,Follow._115_in_goto_statement7832); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1028_tree = (object)adaptor.Create(string_literal1028, retval);
				adaptor.AddChild(root_0, string_literal1028_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(260); }

			DebugLocation(987, 20);
			char_literal1029=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_goto_statement7837), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1029_tree = (object)adaptor.Create(char_literal1029, retval);
			adaptor.AddChild(root_0, char_literal1029_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("goto_statement", 284);
			LeaveRule("goto_statement", 284);
			LeaveRule_goto_statement();
			if (state.backtracking > 0) { Memoize(input, 284, goto_statement_StartIndex); }

		}
		DebugLocation(987, 23);
		} finally { DebugExitRule(GrammarFileName, "goto_statement"); }
		return retval;

	}
	// $ANTLR end "goto_statement"

	partial void EnterRule_return_statement();
	partial void LeaveRule_return_statement();

	// $ANTLR start "return_statement"
	// cs.g:988:8: public return_statement : 'return' ( expression )? ';' ;
	[GrammarRule("return_statement")]
	public XAstParserRuleReturnScope return_statement()
	{
		EnterRule_return_statement();
		EnterRule("return_statement", 285);
		var retval = new XAstParserRuleReturnScope("return_statement");
		
		retval.Start = (IToken)input.LT(1);
		int return_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1030 = default(IToken);
		IToken char_literal1032 = default(IToken);
		XAstParserRuleReturnScope expression1031 = default(XAstParserRuleReturnScope);

		object string_literal1030_tree = default(object);
		object char_literal1032_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "return_statement");
		DebugLocation(988, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 285)) { return retval; }

			// cs.g:988:24: ( 'return' ( expression )? ';' )
			DebugEnterAlt(1);
			// cs.g:989:2: 'return' ( expression )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(989, 2);
			string_literal1030=(IToken)Match(input,168,Follow._168_in_return_statement7847); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1030_tree = (object)adaptor.Create(string_literal1030, retval);
			adaptor.AddChild(root_0, string_literal1030_tree);
			}
			DebugLocation(989, 13);
			// cs.g:989:13: ( expression )?
			int alt261=2;
			try { DebugEnterSubRule(261);
			try { DebugEnterDecision(261, false);
			int LA261_0 = input.LA(1);

			if ((LA261_0==Character_literal||LA261_0==DEFINE||LA261_0==ELIF||LA261_0==ENDIF||LA261_0==FALSE||(LA261_0>=Hex_number && LA261_0<=IDENTIFIER)||(LA261_0>=MINUS && LA261_0<=NUMBER)||LA261_0==Real_literal||LA261_0==STRINGLITERAL||LA261_0==TRUE||LA261_0==UNDEF||LA261_0==Verbatim_string_literal||LA261_0==61||LA261_0==66||(LA261_0>=68 && LA261_0<=69)||(LA261_0>=71 && LA261_0<=72)||LA261_0==75||LA261_0==95||(LA261_0>=97 && LA261_0<=98)||(LA261_0>=100 && LA261_0<=103)||(LA261_0>=105 && LA261_0<=106)||(LA261_0>=109 && LA261_0<=110)||(LA261_0>=114 && LA261_0<=117)||(LA261_0>=119 && LA261_0<=120)||LA261_0==122||LA261_0==126||LA261_0==129||(LA261_0>=132 && LA261_0<=133)||LA261_0==135||LA261_0==138||LA261_0==141||(LA261_0>=143 && LA261_0<=144)||(LA261_0>=146 && LA261_0<=148)||(LA261_0>=150 && LA261_0<=152)||LA261_0==154||LA261_0==157||LA261_0==160||LA261_0==162||LA261_0==167||LA261_0==169||(LA261_0>=171 && LA261_0<=174)||LA261_0==177||LA261_0==180||(LA261_0>=183 && LA261_0<=187)||(LA261_0>=189 && LA261_0<=190)||LA261_0==194||LA261_0==196||LA261_0==202))
			{
				alt261 = 1;
			}
			} finally { DebugExitDecision(261); }
			switch (alt261)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:989:13: expression
				{
				DebugLocation(989, 13);
				PushFollow(Follow._expression_in_return_statement7851);
				expression1031=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1031.Tree, expression1031, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(261); }

			DebugLocation(989, 27);
			char_literal1032=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_return_statement7856), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1032_tree = (object)adaptor.Create(char_literal1032, retval);
			adaptor.AddChild(root_0, char_literal1032_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("return_statement", 285);
			LeaveRule("return_statement", 285);
			LeaveRule_return_statement();
			if (state.backtracking > 0) { Memoize(input, 285, return_statement_StartIndex); }

		}
		DebugLocation(989, 30);
		} finally { DebugExitRule(GrammarFileName, "return_statement"); }
		return retval;

	}
	// $ANTLR end "return_statement"

	partial void EnterRule_throw_statement();
	partial void LeaveRule_throw_statement();

	// $ANTLR start "throw_statement"
	// cs.g:990:8: public throw_statement : 'throw' ( expression )? ';' ;
	[GrammarRule("throw_statement")]
	public XAstParserRuleReturnScope throw_statement()
	{
		EnterRule_throw_statement();
		EnterRule("throw_statement", 286);
		var retval = new XAstParserRuleReturnScope("throw_statement");
		
		retval.Start = (IToken)input.LT(1);
		int throw_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1033 = default(IToken);
		IToken char_literal1035 = default(IToken);
		XAstParserRuleReturnScope expression1034 = default(XAstParserRuleReturnScope);

		object string_literal1033_tree = default(object);
		object char_literal1035_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "throw_statement");
		DebugLocation(990, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 286)) { return retval; }

			// cs.g:990:23: ( 'throw' ( expression )? ';' )
			DebugEnterAlt(1);
			// cs.g:991:2: 'throw' ( expression )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(991, 2);
			string_literal1033=(IToken)Match(input,181,Follow._181_in_throw_statement7866); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1033_tree = (object)adaptor.Create(string_literal1033, retval);
			adaptor.AddChild(root_0, string_literal1033_tree);
			}
			DebugLocation(991, 12);
			// cs.g:991:12: ( expression )?
			int alt262=2;
			try { DebugEnterSubRule(262);
			try { DebugEnterDecision(262, false);
			int LA262_0 = input.LA(1);

			if ((LA262_0==Character_literal||LA262_0==DEFINE||LA262_0==ELIF||LA262_0==ENDIF||LA262_0==FALSE||(LA262_0>=Hex_number && LA262_0<=IDENTIFIER)||(LA262_0>=MINUS && LA262_0<=NUMBER)||LA262_0==Real_literal||LA262_0==STRINGLITERAL||LA262_0==TRUE||LA262_0==UNDEF||LA262_0==Verbatim_string_literal||LA262_0==61||LA262_0==66||(LA262_0>=68 && LA262_0<=69)||(LA262_0>=71 && LA262_0<=72)||LA262_0==75||LA262_0==95||(LA262_0>=97 && LA262_0<=98)||(LA262_0>=100 && LA262_0<=103)||(LA262_0>=105 && LA262_0<=106)||(LA262_0>=109 && LA262_0<=110)||(LA262_0>=114 && LA262_0<=117)||(LA262_0>=119 && LA262_0<=120)||LA262_0==122||LA262_0==126||LA262_0==129||(LA262_0>=132 && LA262_0<=133)||LA262_0==135||LA262_0==138||LA262_0==141||(LA262_0>=143 && LA262_0<=144)||(LA262_0>=146 && LA262_0<=148)||(LA262_0>=150 && LA262_0<=152)||LA262_0==154||LA262_0==157||LA262_0==160||LA262_0==162||LA262_0==167||LA262_0==169||(LA262_0>=171 && LA262_0<=174)||LA262_0==177||LA262_0==180||(LA262_0>=183 && LA262_0<=187)||(LA262_0>=189 && LA262_0<=190)||LA262_0==194||LA262_0==196||LA262_0==202))
			{
				alt262 = 1;
			}
			} finally { DebugExitDecision(262); }
			switch (alt262)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:991:12: expression
				{
				DebugLocation(991, 12);
				PushFollow(Follow._expression_in_throw_statement7870);
				expression1034=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1034.Tree, expression1034, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(262); }

			DebugLocation(991, 26);
			char_literal1035=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_throw_statement7875), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1035_tree = (object)adaptor.Create(char_literal1035, retval);
			adaptor.AddChild(root_0, char_literal1035_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throw_statement", 286);
			LeaveRule("throw_statement", 286);
			LeaveRule_throw_statement();
			if (state.backtracking > 0) { Memoize(input, 286, throw_statement_StartIndex); }

		}
		DebugLocation(991, 29);
		} finally { DebugExitRule(GrammarFileName, "throw_statement"); }
		return retval;

	}
	// $ANTLR end "throw_statement"

	partial void EnterRule_try_statement();
	partial void LeaveRule_try_statement();

	// $ANTLR start "try_statement"
	// cs.g:992:8: public try_statement : 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) ;
	[GrammarRule("try_statement")]
	public XAstParserRuleReturnScope try_statement()
	{
		EnterRule_try_statement();
		EnterRule("try_statement", 287);
		var retval = new XAstParserRuleReturnScope("try_statement");
		
		retval.Start = (IToken)input.LT(1);
		int try_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1036 = default(IToken);
		XAstParserRuleReturnScope block1037 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope catch_clauses1038 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope finally_clause1039 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope finally_clause1040 = default(XAstParserRuleReturnScope);

		object string_literal1036_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "try_statement");
		DebugLocation(992, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 287)) { return retval; }

			// cs.g:992:21: ( 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) )
			DebugEnterAlt(1);
			// cs.g:993:7: 'try' block ( catch_clauses ( finally_clause )? | finally_clause )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(993, 7);
			string_literal1036=(IToken)Match(input,182,Follow._182_in_try_statement7890); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1036_tree = (object)adaptor.Create(string_literal1036, retval);
			adaptor.AddChild(root_0, string_literal1036_tree);
			}
			DebugLocation(993, 15);
			PushFollow(Follow._block_in_try_statement7894);
			block1037=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1037.Tree, block1037, retval);
			DebugLocation(993, 23);
			// cs.g:993:23: ( catch_clauses ( finally_clause )? | finally_clause )
			int alt264=2;
			try { DebugEnterSubRule(264);
			try { DebugEnterDecision(264, false);
			int LA264_0 = input.LA(1);

			if ((LA264_0==108))
			{
				alt264 = 1;
			}
			else if ((LA264_0==127))
			{
				alt264 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 264, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(264); }
			switch (alt264)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:993:25: catch_clauses ( finally_clause )?
				{
				DebugLocation(993, 25);
				PushFollow(Follow._catch_clauses_in_try_statement7900);
				catch_clauses1038=catch_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catch_clauses1038.Tree, catch_clauses1038, retval);
				DebugLocation(993, 41);
				// cs.g:993:41: ( finally_clause )?
				int alt263=2;
				try { DebugEnterSubRule(263);
				try { DebugEnterDecision(263, false);
				int LA263_0 = input.LA(1);

				if ((LA263_0==127))
				{
					alt263 = 1;
				}
				} finally { DebugExitDecision(263); }
				switch (alt263)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:993:41: finally_clause
					{
					DebugLocation(993, 41);
					PushFollow(Follow._finally_clause_in_try_statement7904);
					finally_clause1039=finally_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, finally_clause1039.Tree, finally_clause1039, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(263); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:994:10: finally_clause
				{
				DebugLocation(994, 10);
				PushFollow(Follow._finally_clause_in_try_statement7916);
				finally_clause1040=finally_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, finally_clause1040.Tree, finally_clause1040, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(264); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("try_statement", 287);
			LeaveRule("try_statement", 287);
			LeaveRule_try_statement();
			if (state.backtracking > 0) { Memoize(input, 287, try_statement_StartIndex); }

		}
		DebugLocation(994, 24);
		} finally { DebugExitRule(GrammarFileName, "try_statement"); }
		return retval;

	}
	// $ANTLR end "try_statement"

	partial void EnterRule_catch_clauses();
	partial void LeaveRule_catch_clauses();

	// $ANTLR start "catch_clauses"
	// cs.g:996:8: public catch_clauses : 'catch' ( specific_catch_clauses | general_catch_clause ) ;
	[GrammarRule("catch_clauses")]
	public XAstParserRuleReturnScope catch_clauses()
	{
		EnterRule_catch_clauses();
		EnterRule("catch_clauses", 288);
		var retval = new XAstParserRuleReturnScope("catch_clauses");
		
		retval.Start = (IToken)input.LT(1);
		int catch_clauses_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1041 = default(IToken);
		XAstParserRuleReturnScope specific_catch_clauses1042 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope general_catch_clause1043 = default(XAstParserRuleReturnScope);

		object string_literal1041_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "catch_clauses");
		DebugLocation(996, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 288)) { return retval; }

			// cs.g:996:21: ( 'catch' ( specific_catch_clauses | general_catch_clause ) )
			DebugEnterAlt(1);
			// cs.g:997:2: 'catch' ( specific_catch_clauses | general_catch_clause )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(997, 2);
			string_literal1041=(IToken)Match(input,108,Follow._108_in_catch_clauses7927); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1041_tree = (object)adaptor.Create(string_literal1041, retval);
			adaptor.AddChild(root_0, string_literal1041_tree);
			}
			DebugLocation(997, 12);
			// cs.g:997:12: ( specific_catch_clauses | general_catch_clause )
			int alt265=2;
			try { DebugEnterSubRule(265);
			try { DebugEnterDecision(265, false);
			int LA265_0 = input.LA(1);

			if ((LA265_0==68))
			{
				alt265 = 1;
			}
			else if ((LA265_0==SEMI||LA265_0==197))
			{
				alt265 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 265, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(265); }
			switch (alt265)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:997:13: specific_catch_clauses
				{
				DebugLocation(997, 13);
				PushFollow(Follow._specific_catch_clauses_in_catch_clauses7932);
				specific_catch_clauses1042=specific_catch_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specific_catch_clauses1042.Tree, specific_catch_clauses1042, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:997:38: general_catch_clause
				{
				DebugLocation(997, 38);
				PushFollow(Follow._general_catch_clause_in_catch_clauses7936);
				general_catch_clause1043=general_catch_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, general_catch_clause1043.Tree, general_catch_clause1043, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(265); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catch_clauses", 288);
			LeaveRule("catch_clauses", 288);
			LeaveRule_catch_clauses();
			if (state.backtracking > 0) { Memoize(input, 288, catch_clauses_StartIndex); }

		}
		DebugLocation(997, 59);
		} finally { DebugExitRule(GrammarFileName, "catch_clauses"); }
		return retval;

	}
	// $ANTLR end "catch_clauses"

	partial void EnterRule_specific_catch_clauses();
	partial void LeaveRule_specific_catch_clauses();

	// $ANTLR start "specific_catch_clauses"
	// cs.g:998:8: public specific_catch_clauses : specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* ;
	[GrammarRule("specific_catch_clauses")]
	public XAstParserRuleReturnScope specific_catch_clauses()
	{
		EnterRule_specific_catch_clauses();
		EnterRule("specific_catch_clauses", 289);
		var retval = new XAstParserRuleReturnScope("specific_catch_clauses");
		
		retval.Start = (IToken)input.LT(1);
		int specific_catch_clauses_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1045 = default(IToken);
		XAstParserRuleReturnScope specific_catch_clause1044 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope specific_catch_clause1046 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope general_catch_clause1047 = default(XAstParserRuleReturnScope);

		object string_literal1045_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "specific_catch_clauses");
		DebugLocation(998, 84);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 289)) { return retval; }

			// cs.g:998:30: ( specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* )
			DebugEnterAlt(1);
			// cs.g:999:2: specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(999, 2);
			PushFollow(Follow._specific_catch_clause_in_specific_catch_clauses7947);
			specific_catch_clause1044=specific_catch_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specific_catch_clause1044.Tree, specific_catch_clause1044, retval);
			DebugLocation(999, 26);
			// cs.g:999:26: ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
			try { DebugEnterSubRule(267);
			while (true)
			{
				int alt267=2;
				try { DebugEnterDecision(267, false);
				int LA267_0 = input.LA(1);

				if ((LA267_0==108))
				{
					alt267 = 1;
				}


				} finally { DebugExitDecision(267); }
				switch ( alt267 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:999:27: 'catch' ( specific_catch_clause | general_catch_clause )
					{
					DebugLocation(999, 27);
					string_literal1045=(IToken)Match(input,108,Follow._108_in_specific_catch_clauses7952); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal1045_tree = (object)adaptor.Create(string_literal1045, retval);
					adaptor.AddChild(root_0, string_literal1045_tree);
					}
					DebugLocation(999, 37);
					// cs.g:999:37: ( specific_catch_clause | general_catch_clause )
					int alt266=2;
					try { DebugEnterSubRule(266);
					try { DebugEnterDecision(266, false);
					int LA266_0 = input.LA(1);

					if ((LA266_0==68))
					{
						alt266 = 1;
					}
					else if ((LA266_0==SEMI||LA266_0==197))
					{
						alt266 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 266, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(266); }
					switch (alt266)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:999:38: specific_catch_clause
						{
						DebugLocation(999, 38);
						PushFollow(Follow._specific_catch_clause_in_specific_catch_clauses7957);
						specific_catch_clause1046=specific_catch_clause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, specific_catch_clause1046.Tree, specific_catch_clause1046, retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// cs.g:999:62: general_catch_clause
						{
						DebugLocation(999, 62);
						PushFollow(Follow._general_catch_clause_in_specific_catch_clauses7961);
						general_catch_clause1047=general_catch_clause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, general_catch_clause1047.Tree, general_catch_clause1047, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(266); }


					}
					break;

				default:
					goto loop267;
				}
			}

			loop267:
				;

			} finally { DebugExitSubRule(267); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specific_catch_clauses", 289);
			LeaveRule("specific_catch_clauses", 289);
			LeaveRule_specific_catch_clauses();
			if (state.backtracking > 0) { Memoize(input, 289, specific_catch_clauses_StartIndex); }

		}
		DebugLocation(999, 84);
		} finally { DebugExitRule(GrammarFileName, "specific_catch_clauses"); }
		return retval;

	}
	// $ANTLR end "specific_catch_clauses"

	partial void EnterRule_specific_catch_clause();
	partial void LeaveRule_specific_catch_clause();

	// $ANTLR start "specific_catch_clause"
	// cs.g:1000:8: public specific_catch_clause : '(' class_type ( identifier )? ')' block ;
	[GrammarRule("specific_catch_clause")]
	public XAstParserRuleReturnScope specific_catch_clause()
	{
		EnterRule_specific_catch_clause();
		EnterRule("specific_catch_clause", 290);
		var retval = new XAstParserRuleReturnScope("specific_catch_clause");
		
		retval.Start = (IToken)input.LT(1);
		int specific_catch_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1048 = default(IToken);
		IToken char_literal1051 = default(IToken);
		XAstParserRuleReturnScope class_type1049 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier1050 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope block1052 = default(XAstParserRuleReturnScope);

		object char_literal1048_tree = default(object);
		object char_literal1051_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "specific_catch_clause");
		DebugLocation(1000, 46);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 290)) { return retval; }

			// cs.g:1000:29: ( '(' class_type ( identifier )? ')' block )
			DebugEnterAlt(1);
			// cs.g:1001:2: '(' class_type ( identifier )? ')' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1001, 2);
			char_literal1048=(IToken)Match(input,68,Follow._68_in_specific_catch_clause7973); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1048_tree = (object)adaptor.Create(char_literal1048, retval);
			adaptor.AddChild(root_0, char_literal1048_tree);
			}
			DebugLocation(1001, 8);
			PushFollow(Follow._class_type_in_specific_catch_clause7977);
			class_type1049=class_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, class_type1049.Tree, class_type1049, retval);
			DebugLocation(1001, 21);
			// cs.g:1001:21: ( identifier )?
			int alt268=2;
			try { DebugEnterSubRule(268);
			try { DebugEnterDecision(268, false);
			int LA268_0 = input.LA(1);

			if ((LA268_0==DEFINE||LA268_0==ELIF||LA268_0==ENDIF||LA268_0==IDENTIFIER||LA268_0==UNDEF||LA268_0==95||(LA268_0>=97 && LA268_0<=98)||(LA268_0>=100 && LA268_0<=101)||LA268_0==105||LA268_0==117||LA268_0==120||LA268_0==122||LA268_0==126||(LA268_0>=132 && LA268_0<=133)||LA268_0==135||LA268_0==141||(LA268_0>=143 && LA268_0<=144)||(LA268_0>=147 && LA268_0<=148)||LA268_0==152||LA268_0==154||LA268_0==157||LA268_0==160||LA268_0==162||LA268_0==167||(LA268_0>=171 && LA268_0<=172)||LA268_0==183||LA268_0==190||LA268_0==194||LA268_0==196))
			{
				alt268 = 1;
			}
			} finally { DebugExitDecision(268); }
			switch (alt268)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:1001:21: identifier
				{
				DebugLocation(1001, 21);
				PushFollow(Follow._identifier_in_specific_catch_clause7981);
				identifier1050=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier1050.Tree, identifier1050, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(268); }

			DebugLocation(1001, 35);
			char_literal1051=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_specific_catch_clause7986), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1051_tree = (object)adaptor.Create(char_literal1051, retval);
			adaptor.AddChild(root_0, char_literal1051_tree);
			}
			DebugLocation(1001, 41);
			PushFollow(Follow._block_in_specific_catch_clause7990);
			block1052=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1052.Tree, block1052, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specific_catch_clause", 290);
			LeaveRule("specific_catch_clause", 290);
			LeaveRule_specific_catch_clause();
			if (state.backtracking > 0) { Memoize(input, 290, specific_catch_clause_StartIndex); }

		}
		DebugLocation(1001, 46);
		} finally { DebugExitRule(GrammarFileName, "specific_catch_clause"); }
		return retval;

	}
	// $ANTLR end "specific_catch_clause"

	partial void EnterRule_general_catch_clause();
	partial void LeaveRule_general_catch_clause();

	// $ANTLR start "general_catch_clause"
	// cs.g:1002:8: public general_catch_clause : block ;
	[GrammarRule("general_catch_clause")]
	public XAstParserRuleReturnScope general_catch_clause()
	{
		EnterRule_general_catch_clause();
		EnterRule("general_catch_clause", 291);
		var retval = new XAstParserRuleReturnScope("general_catch_clause");
		
		retval.Start = (IToken)input.LT(1);
		int general_catch_clause_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block1053 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "general_catch_clause");
		DebugLocation(1002, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 291)) { return retval; }

			// cs.g:1002:28: ( block )
			DebugEnterAlt(1);
			// cs.g:1003:2: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1003, 2);
			PushFollow(Follow._block_in_general_catch_clause8000);
			block1053=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1053.Tree, block1053, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("general_catch_clause", 291);
			LeaveRule("general_catch_clause", 291);
			LeaveRule_general_catch_clause();
			if (state.backtracking > 0) { Memoize(input, 291, general_catch_clause_StartIndex); }

		}
		DebugLocation(1003, 7);
		} finally { DebugExitRule(GrammarFileName, "general_catch_clause"); }
		return retval;

	}
	// $ANTLR end "general_catch_clause"

	partial void EnterRule_finally_clause();
	partial void LeaveRule_finally_clause();

	// $ANTLR start "finally_clause"
	// cs.g:1004:8: public finally_clause : 'finally' block ;
	[GrammarRule("finally_clause")]
	public XAstParserRuleReturnScope finally_clause()
	{
		EnterRule_finally_clause();
		EnterRule("finally_clause", 292);
		var retval = new XAstParserRuleReturnScope("finally_clause");
		
		retval.Start = (IToken)input.LT(1);
		int finally_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1054 = default(IToken);
		XAstParserRuleReturnScope block1055 = default(XAstParserRuleReturnScope);

		object string_literal1054_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "finally_clause");
		DebugLocation(1004, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 292)) { return retval; }

			// cs.g:1004:22: ( 'finally' block )
			DebugEnterAlt(1);
			// cs.g:1005:2: 'finally' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1005, 2);
			string_literal1054=(IToken)Match(input,127,Follow._127_in_finally_clause8010); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1054_tree = (object)adaptor.Create(string_literal1054, retval);
			adaptor.AddChild(root_0, string_literal1054_tree);
			}
			DebugLocation(1005, 14);
			PushFollow(Follow._block_in_finally_clause8014);
			block1055=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1055.Tree, block1055, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finally_clause", 292);
			LeaveRule("finally_clause", 292);
			LeaveRule_finally_clause();
			if (state.backtracking > 0) { Memoize(input, 292, finally_clause_StartIndex); }

		}
		DebugLocation(1005, 19);
		} finally { DebugExitRule(GrammarFileName, "finally_clause"); }
		return retval;

	}
	// $ANTLR end "finally_clause"

	partial void EnterRule_checked_statement();
	partial void LeaveRule_checked_statement();

	// $ANTLR start "checked_statement"
	// cs.g:1006:8: public checked_statement : 'checked' block ;
	[GrammarRule("checked_statement")]
	public XAstParserRuleReturnScope checked_statement()
	{
		EnterRule_checked_statement();
		EnterRule("checked_statement", 293);
		var retval = new XAstParserRuleReturnScope("checked_statement");
		
		retval.Start = (IToken)input.LT(1);
		int checked_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1056 = default(IToken);
		XAstParserRuleReturnScope block1057 = default(XAstParserRuleReturnScope);

		object string_literal1056_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "checked_statement");
		DebugLocation(1006, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 293)) { return retval; }

			// cs.g:1006:25: ( 'checked' block )
			DebugEnterAlt(1);
			// cs.g:1007:2: 'checked' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1007, 2);
			string_literal1056=(IToken)Match(input,110,Follow._110_in_checked_statement8024); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1056_tree = (object)adaptor.Create(string_literal1056, retval);
			adaptor.AddChild(root_0, string_literal1056_tree);
			}
			DebugLocation(1007, 14);
			PushFollow(Follow._block_in_checked_statement8028);
			block1057=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1057.Tree, block1057, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("checked_statement", 293);
			LeaveRule("checked_statement", 293);
			LeaveRule_checked_statement();
			if (state.backtracking > 0) { Memoize(input, 293, checked_statement_StartIndex); }

		}
		DebugLocation(1007, 19);
		} finally { DebugExitRule(GrammarFileName, "checked_statement"); }
		return retval;

	}
	// $ANTLR end "checked_statement"

	partial void EnterRule_unchecked_statement();
	partial void LeaveRule_unchecked_statement();

	// $ANTLR start "unchecked_statement"
	// cs.g:1008:8: public unchecked_statement : 'unchecked' block ;
	[GrammarRule("unchecked_statement")]
	public XAstParserRuleReturnScope unchecked_statement()
	{
		EnterRule_unchecked_statement();
		EnterRule("unchecked_statement", 294);
		var retval = new XAstParserRuleReturnScope("unchecked_statement");
		
		retval.Start = (IToken)input.LT(1);
		int unchecked_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1058 = default(IToken);
		XAstParserRuleReturnScope block1059 = default(XAstParserRuleReturnScope);

		object string_literal1058_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unchecked_statement");
		DebugLocation(1008, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 294)) { return retval; }

			// cs.g:1008:27: ( 'unchecked' block )
			DebugEnterAlt(1);
			// cs.g:1009:2: 'unchecked' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1009, 2);
			string_literal1058=(IToken)Match(input,187,Follow._187_in_unchecked_statement8038); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1058_tree = (object)adaptor.Create(string_literal1058, retval);
			adaptor.AddChild(root_0, string_literal1058_tree);
			}
			DebugLocation(1009, 16);
			PushFollow(Follow._block_in_unchecked_statement8042);
			block1059=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1059.Tree, block1059, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unchecked_statement", 294);
			LeaveRule("unchecked_statement", 294);
			LeaveRule_unchecked_statement();
			if (state.backtracking > 0) { Memoize(input, 294, unchecked_statement_StartIndex); }

		}
		DebugLocation(1009, 21);
		} finally { DebugExitRule(GrammarFileName, "unchecked_statement"); }
		return retval;

	}
	// $ANTLR end "unchecked_statement"

	partial void EnterRule_lock_statement();
	partial void LeaveRule_lock_statement();

	// $ANTLR start "lock_statement"
	// cs.g:1010:8: public lock_statement : 'lock' '(' expression ')' embedded_statement ;
	[GrammarRule("lock_statement")]
	public XAstParserRuleReturnScope lock_statement()
	{
		EnterRule_lock_statement();
		EnterRule("lock_statement", 295);
		var retval = new XAstParserRuleReturnScope("lock_statement");
		
		retval.Start = (IToken)input.LT(1);
		int lock_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1060 = default(IToken);
		IToken char_literal1061 = default(IToken);
		IToken char_literal1063 = default(IToken);
		XAstParserRuleReturnScope expression1062 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement1064 = default(XAstParserRuleReturnScope);

		object string_literal1060_tree = default(object);
		object char_literal1061_tree = default(object);
		object char_literal1063_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "lock_statement");
		DebugLocation(1010, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 295)) { return retval; }

			// cs.g:1010:22: ( 'lock' '(' expression ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:1011:2: 'lock' '(' expression ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1011, 2);
			string_literal1060=(IToken)Match(input,145,Follow._145_in_lock_statement8052); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1060_tree = (object)adaptor.Create(string_literal1060, retval);
			adaptor.AddChild(root_0, string_literal1060_tree);
			}
			DebugLocation(1011, 11);
			char_literal1061=(IToken)Match(input,68,Follow._68_in_lock_statement8056); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1061_tree = (object)adaptor.Create(char_literal1061, retval);
			adaptor.AddChild(root_0, char_literal1061_tree);
			}
			DebugLocation(1011, 16);
			PushFollow(Follow._expression_in_lock_statement8059);
			expression1062=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression1062.Tree, expression1062, retval);
			DebugLocation(1011, 29);
			char_literal1063=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_lock_statement8063), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1063_tree = (object)adaptor.Create(char_literal1063, retval);
			adaptor.AddChild(root_0, char_literal1063_tree);
			}
			DebugLocation(1011, 35);
			PushFollow(Follow._embedded_statement_in_lock_statement8067);
			embedded_statement1064=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement1064.Tree, embedded_statement1064, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lock_statement", 295);
			LeaveRule("lock_statement", 295);
			LeaveRule_lock_statement();
			if (state.backtracking > 0) { Memoize(input, 295, lock_statement_StartIndex); }

		}
		DebugLocation(1011, 53);
		} finally { DebugExitRule(GrammarFileName, "lock_statement"); }
		return retval;

	}
	// $ANTLR end "lock_statement"

	partial void EnterRule_using_statement();
	partial void LeaveRule_using_statement();

	// $ANTLR start "using_statement"
	// cs.g:1012:8: public using_statement : 'using' '(' resource_acquisition ')' embedded_statement ;
	[GrammarRule("using_statement")]
	public XAstParserRuleReturnScope using_statement()
	{
		EnterRule_using_statement();
		EnterRule("using_statement", 296);
		var retval = new XAstParserRuleReturnScope("using_statement");
		
		retval.Start = (IToken)input.LT(1);
		int using_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1065 = default(IToken);
		IToken char_literal1066 = default(IToken);
		IToken char_literal1068 = default(IToken);
		XAstParserRuleReturnScope resource_acquisition1067 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement1069 = default(XAstParserRuleReturnScope);

		object string_literal1065_tree = default(object);
		object char_literal1066_tree = default(object);
		object char_literal1068_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "using_statement");
		DebugLocation(1012, 67);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 296)) { return retval; }

			// cs.g:1012:23: ( 'using' '(' resource_acquisition ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:1013:2: 'using' '(' resource_acquisition ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1013, 2);
			string_literal1065=(IToken)new XToken((IToken)Match(input,USING,Follow._USING_in_using_statement8077), "USING"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1065_tree = (object)adaptor.Create(string_literal1065, retval);
			adaptor.AddChild(root_0, string_literal1065_tree);
			}
			DebugLocation(1013, 12);
			char_literal1066=(IToken)Match(input,68,Follow._68_in_using_statement8081); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1066_tree = (object)adaptor.Create(char_literal1066, retval);
			adaptor.AddChild(root_0, char_literal1066_tree);
			}
			DebugLocation(1013, 19);
			PushFollow(Follow._resource_acquisition_in_using_statement8086);
			resource_acquisition1067=resource_acquisition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, resource_acquisition1067.Tree, resource_acquisition1067, retval);
			DebugLocation(1013, 42);
			char_literal1068=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_using_statement8090), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1068_tree = (object)adaptor.Create(char_literal1068, retval);
			adaptor.AddChild(root_0, char_literal1068_tree);
			}
			DebugLocation(1013, 49);
			PushFollow(Follow._embedded_statement_in_using_statement8095);
			embedded_statement1069=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement1069.Tree, embedded_statement1069, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_statement", 296);
			LeaveRule("using_statement", 296);
			LeaveRule_using_statement();
			if (state.backtracking > 0) { Memoize(input, 296, using_statement_StartIndex); }

		}
		DebugLocation(1013, 67);
		} finally { DebugExitRule(GrammarFileName, "using_statement"); }
		return retval;

	}
	// $ANTLR end "using_statement"

	partial void EnterRule_resource_acquisition();
	partial void LeaveRule_resource_acquisition();

	// $ANTLR start "resource_acquisition"
	// cs.g:1014:8: public resource_acquisition : ( ( local_variable_declaration )=> local_variable_declaration | expression );
	[GrammarRule("resource_acquisition")]
	public XAstParserRuleReturnScope resource_acquisition()
	{
		EnterRule_resource_acquisition();
		EnterRule("resource_acquisition", 297);
		var retval = new XAstParserRuleReturnScope("resource_acquisition");
		
		retval.Start = (IToken)input.LT(1);
		int resource_acquisition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope local_variable_declaration1070 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression1071 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "resource_acquisition");
		DebugLocation(1014, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 297)) { return retval; }

			// cs.g:1014:28: ( ( local_variable_declaration )=> local_variable_declaration | expression )
			int alt269=2;
			try { DebugEnterDecision(269, false);
			int LA269_0 = input.LA(1);

			if ((LA269_0==190))
			{
				int LA269_1 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt269 = 1;
				}
				else if ((true))
				{
					alt269 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 269, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA269_0==120))
			{
				int LA269_2 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt269 = 1;
				}
				else if ((true))
				{
					alt269 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 269, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA269_0==103||LA269_0==106||LA269_0==109||LA269_0==114||LA269_0==119||LA269_0==129||LA269_0==138||LA269_0==146||LA269_0==151||LA269_0==169||LA269_0==173||LA269_0==177||(LA269_0>=185 && LA269_0<=186)||LA269_0==189))
			{
				int LA269_3 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt269 = 1;
				}
				else if ((true))
				{
					alt269 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 269, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA269_0==IDENTIFIER))
			{
				int LA269_4 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt269 = 1;
				}
				else if ((true))
				{
					alt269 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 269, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA269_0==132))
			{
				int LA269_5 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt269 = 1;
				}
				else if ((true))
				{
					alt269 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 269, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA269_0==192) && (EvaluatePredicate(synpred39_cs_fragment)))
			{
				alt269 = 1;
			}
			else if ((LA269_0==Character_literal||LA269_0==FALSE||LA269_0==Hex_number||(LA269_0>=MINUS && LA269_0<=NUMBER)||LA269_0==Real_literal||LA269_0==STRINGLITERAL||LA269_0==TRUE||LA269_0==Verbatim_string_literal||LA269_0==61||LA269_0==66||(LA269_0>=68 && LA269_0<=69)||(LA269_0>=71 && LA269_0<=72)||LA269_0==75||LA269_0==102||LA269_0==110||(LA269_0>=115 && LA269_0<=116)||LA269_0==150||LA269_0==174||LA269_0==180||LA269_0==184||LA269_0==187||LA269_0==202))
			{
				alt269 = 2;
			}
			else if ((LA269_0==DEFINE||LA269_0==ELIF||LA269_0==ENDIF||LA269_0==UNDEF||LA269_0==95||(LA269_0>=97 && LA269_0<=98)||(LA269_0>=100 && LA269_0<=101)||LA269_0==105||LA269_0==117||LA269_0==122||LA269_0==126||LA269_0==133||LA269_0==135||LA269_0==141||(LA269_0>=143 && LA269_0<=144)||(LA269_0>=147 && LA269_0<=148)||LA269_0==152||LA269_0==154||LA269_0==157||LA269_0==160||LA269_0==162||LA269_0==167||(LA269_0>=171 && LA269_0<=172)||LA269_0==183||LA269_0==194||LA269_0==196))
			{
				int LA269_26 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt269 = 1;
				}
				else if ((true))
				{
					alt269 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 269, 26, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 269, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(269); }
			switch (alt269)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:1015:2: ( local_variable_declaration )=> local_variable_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1015, 34);
				PushFollow(Follow._local_variable_declaration_in_resource_acquisition8111);
				local_variable_declaration1070=local_variable_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration1070.Tree, local_variable_declaration1070, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:1016:4: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1016, 4);
				PushFollow(Follow._expression_in_resource_acquisition8116);
				expression1071=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1071.Tree, expression1071, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("resource_acquisition", 297);
			LeaveRule("resource_acquisition", 297);
			LeaveRule_resource_acquisition();
			if (state.backtracking > 0) { Memoize(input, 297, resource_acquisition_StartIndex); }

		}
		DebugLocation(1016, 14);
		} finally { DebugExitRule(GrammarFileName, "resource_acquisition"); }
		return retval;

	}
	// $ANTLR end "resource_acquisition"

	partial void EnterRule_yield_statement();
	partial void LeaveRule_yield_statement();

	// $ANTLR start "yield_statement"
	// cs.g:1017:8: public yield_statement : 'yield' ( 'return' expression ';' | 'break' ';' ) ;
	[GrammarRule("yield_statement")]
	public XAstParserRuleReturnScope yield_statement()
	{
		EnterRule_yield_statement();
		EnterRule("yield_statement", 298);
		var retval = new XAstParserRuleReturnScope("yield_statement");
		
		retval.Start = (IToken)input.LT(1);
		int yield_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1072 = default(IToken);
		IToken string_literal1073 = default(IToken);
		IToken char_literal1075 = default(IToken);
		IToken string_literal1076 = default(IToken);
		IToken char_literal1077 = default(IToken);
		XAstParserRuleReturnScope expression1074 = default(XAstParserRuleReturnScope);

		object string_literal1072_tree = default(object);
		object string_literal1073_tree = default(object);
		object char_literal1075_tree = default(object);
		object string_literal1076_tree = default(object);
		object char_literal1077_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "yield_statement");
		DebugLocation(1017, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 298)) { return retval; }

			// cs.g:1017:23: ( 'yield' ( 'return' expression ';' | 'break' ';' ) )
			DebugEnterAlt(1);
			// cs.g:1018:2: 'yield' ( 'return' expression ';' | 'break' ';' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1018, 2);
			string_literal1072=(IToken)Match(input,196,Follow._196_in_yield_statement8126); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1072_tree = (object)adaptor.Create(string_literal1072, retval);
			adaptor.AddChild(root_0, string_literal1072_tree);
			}
			DebugLocation(1018, 12);
			// cs.g:1018:12: ( 'return' expression ';' | 'break' ';' )
			int alt270=2;
			try { DebugEnterSubRule(270);
			try { DebugEnterDecision(270, false);
			int LA270_0 = input.LA(1);

			if ((LA270_0==168))
			{
				alt270 = 1;
			}
			else if ((LA270_0==104))
			{
				alt270 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 270, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(270); }
			switch (alt270)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:1018:13: 'return' expression ';'
				{
				DebugLocation(1018, 13);
				string_literal1073=(IToken)Match(input,168,Follow._168_in_yield_statement8131); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1073_tree = (object)adaptor.Create(string_literal1073, retval);
				adaptor.AddChild(root_0, string_literal1073_tree);
				}
				DebugLocation(1018, 24);
				PushFollow(Follow._expression_in_yield_statement8135);
				expression1074=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1074.Tree, expression1074, retval);
				DebugLocation(1018, 37);
				char_literal1075=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_yield_statement8139), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal1075_tree = (object)adaptor.Create(char_literal1075, retval);
				adaptor.AddChild(root_0, char_literal1075_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:1019:14: 'break' ';'
				{
				DebugLocation(1019, 14);
				string_literal1076=(IToken)Match(input,104,Follow._104_in_yield_statement8154); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1076_tree = (object)adaptor.Create(string_literal1076, retval);
				adaptor.AddChild(root_0, string_literal1076_tree);
				}
				DebugLocation(1019, 24);
				char_literal1077=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_yield_statement8158), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal1077_tree = (object)adaptor.Create(char_literal1077, retval);
				adaptor.AddChild(root_0, char_literal1077_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(270); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("yield_statement", 298);
			LeaveRule("yield_statement", 298);
			LeaveRule_yield_statement();
			if (state.backtracking > 0) { Memoize(input, 298, yield_statement_StartIndex); }

		}
		DebugLocation(1019, 28);
		} finally { DebugExitRule(GrammarFileName, "yield_statement"); }
		return retval;

	}
	// $ANTLR end "yield_statement"

	partial void EnterRule_predefined_type();
	partial void LeaveRule_predefined_type();

	// $ANTLR start "predefined_type"
	// cs.g:1025:8: public predefined_type : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
	[GrammarRule("predefined_type")]
	public XAstParserRuleReturnScope predefined_type()
	{
		EnterRule_predefined_type();
		EnterRule("predefined_type", 299);
		var retval = new XAstParserRuleReturnScope("predefined_type");
		
		retval.Start = (IToken)input.LT(1);
		int predefined_type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set1078 = default(IToken);

		object set1078_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "predefined_type");
		DebugLocation(1025, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 299)) { return retval; }

			// cs.g:1025:23: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1025, 23);

			set1078=(IToken)input.LT(1);
			if (input.LA(1)==103||input.LA(1)==106||input.LA(1)==109||input.LA(1)==114||input.LA(1)==119||input.LA(1)==129||input.LA(1)==138||input.LA(1)==146||input.LA(1)==151||input.LA(1)==169||input.LA(1)==173||input.LA(1)==177||(input.LA(1)>=185 && input.LA(1)<=186)||input.LA(1)==189)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1078, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("predefined_type", 299);
			LeaveRule("predefined_type", 299);
			LeaveRule_predefined_type();
			if (state.backtracking > 0) { Memoize(input, 299, predefined_type_StartIndex); }

		}
		DebugLocation(1027, 56);
		} finally { DebugExitRule(GrammarFileName, "predefined_type"); }
		return retval;

	}
	// $ANTLR end "predefined_type"

	partial void EnterRule_identifier();
	partial void LeaveRule_identifier();

	// $ANTLR start "identifier"
	// cs.g:1029:8: public identifier : ( IDENTIFIER | also_keyword );
	[GrammarRule("identifier")]
	public XAstParserRuleReturnScope identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 300);
		var retval = new XAstParserRuleReturnScope("identifier");
		
		retval.Start = (IToken)input.LT(1);
		int identifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER1079 = default(IToken);
		XAstParserRuleReturnScope also_keyword1080 = default(XAstParserRuleReturnScope);

		object IDENTIFIER1079_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(1029, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 300)) { return retval; }

			// cs.g:1029:18: ( IDENTIFIER | also_keyword )
			int alt271=2;
			try { DebugEnterDecision(271, false);
			int LA271_0 = input.LA(1);

			if ((LA271_0==IDENTIFIER))
			{
				alt271 = 1;
			}
			else if ((LA271_0==DEFINE||LA271_0==ELIF||LA271_0==ENDIF||LA271_0==UNDEF||LA271_0==95||(LA271_0>=97 && LA271_0<=98)||(LA271_0>=100 && LA271_0<=101)||LA271_0==105||LA271_0==117||LA271_0==120||LA271_0==122||LA271_0==126||(LA271_0>=132 && LA271_0<=133)||LA271_0==135||LA271_0==141||(LA271_0>=143 && LA271_0<=144)||(LA271_0>=147 && LA271_0<=148)||LA271_0==152||LA271_0==154||LA271_0==157||LA271_0==160||LA271_0==162||LA271_0==167||(LA271_0>=171 && LA271_0<=172)||LA271_0==183||LA271_0==190||LA271_0==194||LA271_0==196))
			{
				alt271 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 271, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(271); }
			switch (alt271)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:1030:3: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1030, 3);
				IDENTIFIER1079=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier8261), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER1079_tree = (object)adaptor.Create(IDENTIFIER1079, retval);
				adaptor.AddChild(root_0, IDENTIFIER1079_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:1030:16: also_keyword
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1030, 16);
				PushFollow(Follow._also_keyword_in_identifier8265);
				also_keyword1080=also_keyword();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, also_keyword1080.Tree, also_keyword1080, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier", 300);
			LeaveRule("identifier", 300);
			LeaveRule_identifier();
			if (state.backtracking > 0) { Memoize(input, 300, identifier_StartIndex); }

		}
		DebugLocation(1030, 27);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"

	partial void EnterRule_keyword();
	partial void LeaveRule_keyword();

	// $ANTLR start "keyword"
	// cs.g:1032:8: public keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
	[GrammarRule("keyword")]
	public XAstParserRuleReturnScope keyword()
	{
		EnterRule_keyword();
		EnterRule("keyword", 301);
		var retval = new XAstParserRuleReturnScope("keyword");
		
		retval.Start = (IToken)input.LT(1);
		int keyword_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set1081 = default(IToken);

		object set1081_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "keyword");
		DebugLocation(1032, 800);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 301)) { return retval; }

			// cs.g:1032:15: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1032, 15);

			set1081=(IToken)input.LT(1);
			if (input.LA(1)==ENUM||input.LA(1)==FALSE||input.LA(1)==IF||input.LA(1)==NULL||input.LA(1)==TRUE||input.LA(1)==USING||input.LA(1)==96||input.LA(1)==99||(input.LA(1)>=102 && input.LA(1)<=104)||(input.LA(1)>=106 && input.LA(1)<=116)||(input.LA(1)>=118 && input.LA(1)<=119)||input.LA(1)==121||(input.LA(1)>=123 && input.LA(1)<=125)||(input.LA(1)>=127 && input.LA(1)<=131)||input.LA(1)==134||(input.LA(1)>=136 && input.LA(1)<=140)||input.LA(1)==142||(input.LA(1)>=145 && input.LA(1)<=146)||(input.LA(1)>=149 && input.LA(1)<=151)||input.LA(1)==153||(input.LA(1)>=155 && input.LA(1)<=156)||input.LA(1)==158||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=166)||(input.LA(1)>=168 && input.LA(1)<=170)||(input.LA(1)>=173 && input.LA(1)<=182)||(input.LA(1)>=184 && input.LA(1)<=189)||(input.LA(1)>=191 && input.LA(1)<=193))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1081, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyword", 301);
			LeaveRule("keyword", 301);
			LeaveRule_keyword();
			if (state.backtracking > 0) { Memoize(input, 301, keyword_StartIndex); }

		}
		DebugLocation(1033, 800);
		} finally { DebugExitRule(GrammarFileName, "keyword"); }
		return retval;

	}
	// $ANTLR end "keyword"

	partial void EnterRule_also_keyword();
	partial void LeaveRule_also_keyword();

	// $ANTLR start "also_keyword"
	// cs.g:1035:8: public also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'get' | 'set' | 'var' | '__arglist' | 'dynamic' | 'elif' | 'endif' | 'define' | 'undef' );
	[GrammarRule("also_keyword")]
	public XAstParserRuleReturnScope also_keyword()
	{
		EnterRule_also_keyword();
		EnterRule("also_keyword", 302);
		var retval = new XAstParserRuleReturnScope("also_keyword");
		
		retval.Start = (IToken)input.LT(1);
		int also_keyword_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set1082 = default(IToken);

		object set1082_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "also_keyword");
		DebugLocation(1035, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 302)) { return retval; }

			// cs.g:1035:20: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'get' | 'set' | 'var' | '__arglist' | 'dynamic' | 'elif' | 'endif' | 'define' | 'undef' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1035, 20);

			set1082=(IToken)input.LT(1);
			if (input.LA(1)==DEFINE||input.LA(1)==ELIF||input.LA(1)==ENDIF||input.LA(1)==UNDEF||input.LA(1)==95||(input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=100 && input.LA(1)<=101)||input.LA(1)==105||input.LA(1)==117||input.LA(1)==120||input.LA(1)==122||input.LA(1)==126||(input.LA(1)>=132 && input.LA(1)<=133)||input.LA(1)==135||input.LA(1)==141||(input.LA(1)>=143 && input.LA(1)<=144)||(input.LA(1)>=147 && input.LA(1)<=148)||input.LA(1)==152||input.LA(1)==154||input.LA(1)==157||input.LA(1)==160||input.LA(1)==162||input.LA(1)==167||(input.LA(1)>=171 && input.LA(1)<=172)||input.LA(1)==183||input.LA(1)==190||input.LA(1)==194||input.LA(1)==196)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1082, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("also_keyword", 302);
			LeaveRule("also_keyword", 302);
			LeaveRule_also_keyword();
			if (state.backtracking > 0) { Memoize(input, 302, also_keyword_StartIndex); }

		}
		DebugLocation(1039, 31);
		} finally { DebugExitRule(GrammarFileName, "also_keyword"); }
		return retval;

	}
	// $ANTLR end "also_keyword"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// cs.g:1041:8: public literal : ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	public XAstParserRuleReturnScope literal()
	{
		EnterRule_literal();
		EnterRule("literal", 303);
		var retval = new XAstParserRuleReturnScope("literal");
		
		retval.Start = (IToken)input.LT(1);
		int literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set1083 = default(IToken);

		object set1083_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1041, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 303)) { return retval; }

			// cs.g:1041:15: ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1041, 15);

			set1083=(IToken)input.LT(1);
			if (input.LA(1)==Character_literal||input.LA(1)==FALSE||input.LA(1)==Hex_number||(input.LA(1)>=NULL && input.LA(1)<=NUMBER)||input.LA(1)==Real_literal||input.LA(1)==STRINGLITERAL||input.LA(1)==TRUE||input.LA(1)==Verbatim_string_literal)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1083, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 303);
			LeaveRule("literal", 303);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 303, literal_StartIndex); }

		}
		DebugLocation(1051, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_assignment_list();
	partial void LeaveRule_assignment_list();

	// $ANTLR start "assignment_list"
	// cs.g:1321:8: public assignment_list : ( assignment ';' )+ ;
	[GrammarRule("assignment_list")]
	public XAstParserRuleReturnScope assignment_list()
	{
		EnterRule_assignment_list();
		EnterRule("assignment_list", 304);
		var retval = new XAstParserRuleReturnScope("assignment_list");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1085 = default(IToken);
		XAstParserRuleReturnScope assignment1084 = default(XAstParserRuleReturnScope);

		object char_literal1085_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_list");
		DebugLocation(1321, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 304)) { return retval; }

			// cs.g:1321:23: ( ( assignment ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1322:2: ( assignment ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1322, 2);
			// cs.g:1322:2: ( assignment ';' )+
			int cnt272=0;
			try { DebugEnterSubRule(272);
			while (true)
			{
				int alt272=2;
				try { DebugEnterDecision(272, false);
				int LA272_0 = input.LA(1);

				if ((LA272_0==Character_literal||LA272_0==DEFINE||LA272_0==ELIF||LA272_0==ENDIF||LA272_0==FALSE||(LA272_0>=Hex_number && LA272_0<=IDENTIFIER)||(LA272_0>=MINUS && LA272_0<=NUMBER)||LA272_0==Real_literal||LA272_0==STRINGLITERAL||LA272_0==TRUE||LA272_0==UNDEF||LA272_0==Verbatim_string_literal||LA272_0==61||LA272_0==66||(LA272_0>=68 && LA272_0<=69)||(LA272_0>=71 && LA272_0<=72)||LA272_0==75||LA272_0==95||(LA272_0>=97 && LA272_0<=98)||(LA272_0>=100 && LA272_0<=103)||(LA272_0>=105 && LA272_0<=106)||(LA272_0>=109 && LA272_0<=110)||(LA272_0>=114 && LA272_0<=117)||(LA272_0>=119 && LA272_0<=120)||LA272_0==122||LA272_0==126||LA272_0==129||(LA272_0>=132 && LA272_0<=133)||LA272_0==135||LA272_0==138||LA272_0==141||(LA272_0>=143 && LA272_0<=144)||(LA272_0>=146 && LA272_0<=148)||(LA272_0>=150 && LA272_0<=152)||LA272_0==154||LA272_0==157||LA272_0==160||LA272_0==162||LA272_0==167||LA272_0==169||(LA272_0>=171 && LA272_0<=174)||LA272_0==177||LA272_0==180||(LA272_0>=183 && LA272_0<=187)||(LA272_0>=189 && LA272_0<=190)||LA272_0==194||LA272_0==196||LA272_0==202))
				{
					alt272 = 1;
				}


				} finally { DebugExitDecision(272); }
				switch (alt272)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1322:3: assignment ';'
					{
					DebugLocation(1322, 3);
					PushFollow(Follow._assignment_in_assignment_list10780);
					assignment1084=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment1084.Tree, assignment1084, retval);
					DebugLocation(1322, 14);
					char_literal1085=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_assignment_list10782), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1085_tree = (object)adaptor.Create(char_literal1085, retval);
					adaptor.AddChild(root_0, char_literal1085_tree);
					}

					}
					break;

				default:
					if (cnt272 >= 1)
						goto loop272;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee272 = new EarlyExitException( 272, input );
					DebugRecognitionException(eee272);
					throw eee272;
				}
				cnt272++;
			}
			loop272:
				;

			} finally { DebugExitSubRule(272); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_list", 304);
			LeaveRule("assignment_list", 304);
			LeaveRule_assignment_list();
			if (state.backtracking > 0) { Memoize(input, 304, assignment_list_StartIndex); }

		}
		DebugLocation(1322, 19);
		} finally { DebugExitRule(GrammarFileName, "assignment_list"); }
		return retval;

	}
	// $ANTLR end "assignment_list"

	partial void EnterRule_field_declarations();
	partial void LeaveRule_field_declarations();

	// $ANTLR start "field_declarations"
	// cs.g:1323:8: public field_declarations : ( ( attributes )? ( modifiers )? type field_declaration )+ ;
	[GrammarRule("field_declarations")]
	public XAstParserRuleReturnScope field_declarations()
	{
		EnterRule_field_declarations();
		EnterRule("field_declarations", 305);
		var retval = new XAstParserRuleReturnScope("field_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int field_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes1086 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope modifiers1087 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type1088 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope field_declaration1089 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "field_declarations");
		DebugLocation(1323, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 305)) { return retval; }

			// cs.g:1323:26: ( ( ( attributes )? ( modifiers )? type field_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:1324:2: ( ( attributes )? ( modifiers )? type field_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1324, 2);
			// cs.g:1324:2: ( ( attributes )? ( modifiers )? type field_declaration )+
			int cnt275=0;
			try { DebugEnterSubRule(275);
			while (true)
			{
				int alt275=2;
				try { DebugEnterDecision(275, false);
				int LA275_0 = input.LA(1);

				if ((LA275_0==DEFINE||LA275_0==ELIF||LA275_0==ENDIF||LA275_0==IDENTIFIER||LA275_0==UNDEF||LA275_0==91||(LA275_0>=95 && LA275_0<=98)||(LA275_0>=100 && LA275_0<=101)||LA275_0==103||(LA275_0>=105 && LA275_0<=106)||LA275_0==109||LA275_0==114||LA275_0==117||(LA275_0>=119 && LA275_0<=120)||LA275_0==122||(LA275_0>=125 && LA275_0<=126)||LA275_0==129||(LA275_0>=132 && LA275_0<=133)||LA275_0==135||LA275_0==138||(LA275_0>=140 && LA275_0<=141)||(LA275_0>=143 && LA275_0<=144)||(LA275_0>=146 && LA275_0<=148)||(LA275_0>=150 && LA275_0<=152)||LA275_0==154||(LA275_0>=156 && LA275_0<=157)||(LA275_0>=160 && LA275_0<=165)||LA275_0==167||(LA275_0>=169 && LA275_0<=173)||(LA275_0>=176 && LA275_0<=177)||LA275_0==183||(LA275_0>=185 && LA275_0<=186)||(LA275_0>=188 && LA275_0<=194)||LA275_0==196))
				{
					alt275 = 1;
				}


				} finally { DebugExitDecision(275); }
				switch (alt275)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1324:3: ( attributes )? ( modifiers )? type field_declaration
					{
					DebugLocation(1324, 3);
					// cs.g:1324:3: ( attributes )?
					int alt273=2;
					try { DebugEnterSubRule(273);
					try { DebugEnterDecision(273, false);
					int LA273_0 = input.LA(1);

					if ((LA273_0==91))
					{
						alt273 = 1;
					}
					} finally { DebugExitDecision(273); }
					switch (alt273)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1324:3: attributes
						{
						DebugLocation(1324, 3);
						PushFollow(Follow._attributes_in_field_declarations10795);
						attributes1086=attributes();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, attributes1086.Tree, attributes1086, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(273); }

					DebugLocation(1324, 17);
					// cs.g:1324:17: ( modifiers )?
					int alt274=2;
					try { DebugEnterSubRule(274);
					try { DebugEnterDecision(274, false);
					int LA274_0 = input.LA(1);

					if ((LA274_0==96||LA274_0==125||LA274_0==140||LA274_0==150||LA274_0==156||LA274_0==161||(LA274_0>=163 && LA274_0<=165)||LA274_0==170||LA274_0==176||LA274_0==188||LA274_0==191||LA274_0==193))
					{
						alt274 = 1;
					}
					} finally { DebugExitDecision(274); }
					switch (alt274)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1324:17: modifiers
						{
						DebugLocation(1324, 17);
						PushFollow(Follow._modifiers_in_field_declarations10800);
						modifiers1087=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1087.Tree, modifiers1087, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(274); }

					DebugLocation(1324, 30);
					PushFollow(Follow._type_in_field_declarations10805);
					type1088=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type1088.Tree, type1088, retval);
					DebugLocation(1324, 37);
					PushFollow(Follow._field_declaration_in_field_declarations10809);
					field_declaration1089=field_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, field_declaration1089.Tree, field_declaration1089, retval);

					}
					break;

				default:
					if (cnt275 >= 1)
						goto loop275;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee275 = new EarlyExitException( 275, input );
					DebugRecognitionException(eee275);
					throw eee275;
				}
				cnt275++;
			}
			loop275:
				;

			} finally { DebugExitSubRule(275); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("field_declarations", 305);
			LeaveRule("field_declarations", 305);
			LeaveRule_field_declarations();
			if (state.backtracking > 0) { Memoize(input, 305, field_declarations_StartIndex); }

		}
		DebugLocation(1324, 56);
		} finally { DebugExitRule(GrammarFileName, "field_declarations"); }
		return retval;

	}
	// $ANTLR end "field_declarations"

	partial void EnterRule_property_declaration_list();
	partial void LeaveRule_property_declaration_list();

	// $ANTLR start "property_declaration_list"
	// cs.g:1325:8: public property_declaration_list : ( ( attributes )? ( modifiers )? type property_declaration )+ ;
	[GrammarRule("property_declaration_list")]
	public XAstParserRuleReturnScope property_declaration_list()
	{
		EnterRule_property_declaration_list();
		EnterRule("property_declaration_list", 306);
		var retval = new XAstParserRuleReturnScope("property_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int property_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes1090 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope modifiers1091 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type1092 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope property_declaration1093 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "property_declaration_list");
		DebugLocation(1325, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 306)) { return retval; }

			// cs.g:1325:33: ( ( ( attributes )? ( modifiers )? type property_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:1326:2: ( ( attributes )? ( modifiers )? type property_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1326, 2);
			// cs.g:1326:2: ( ( attributes )? ( modifiers )? type property_declaration )+
			int cnt278=0;
			try { DebugEnterSubRule(278);
			while (true)
			{
				int alt278=2;
				try { DebugEnterDecision(278, false);
				int LA278_0 = input.LA(1);

				if ((LA278_0==DEFINE||LA278_0==ELIF||LA278_0==ENDIF||LA278_0==IDENTIFIER||LA278_0==UNDEF||LA278_0==91||(LA278_0>=95 && LA278_0<=98)||(LA278_0>=100 && LA278_0<=101)||LA278_0==103||(LA278_0>=105 && LA278_0<=106)||LA278_0==109||LA278_0==114||LA278_0==117||(LA278_0>=119 && LA278_0<=120)||LA278_0==122||(LA278_0>=125 && LA278_0<=126)||LA278_0==129||(LA278_0>=132 && LA278_0<=133)||LA278_0==135||LA278_0==138||(LA278_0>=140 && LA278_0<=141)||(LA278_0>=143 && LA278_0<=144)||(LA278_0>=146 && LA278_0<=148)||(LA278_0>=150 && LA278_0<=152)||LA278_0==154||(LA278_0>=156 && LA278_0<=157)||(LA278_0>=160 && LA278_0<=165)||LA278_0==167||(LA278_0>=169 && LA278_0<=173)||(LA278_0>=176 && LA278_0<=177)||LA278_0==183||(LA278_0>=185 && LA278_0<=186)||(LA278_0>=188 && LA278_0<=194)||LA278_0==196))
				{
					alt278 = 1;
				}


				} finally { DebugExitDecision(278); }
				switch (alt278)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1326:3: ( attributes )? ( modifiers )? type property_declaration
					{
					DebugLocation(1326, 3);
					// cs.g:1326:3: ( attributes )?
					int alt276=2;
					try { DebugEnterSubRule(276);
					try { DebugEnterDecision(276, false);
					int LA276_0 = input.LA(1);

					if ((LA276_0==91))
					{
						alt276 = 1;
					}
					} finally { DebugExitDecision(276); }
					switch (alt276)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1326:3: attributes
						{
						DebugLocation(1326, 3);
						PushFollow(Follow._attributes_in_property_declaration_list10822);
						attributes1090=attributes();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, attributes1090.Tree, attributes1090, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(276); }

					DebugLocation(1326, 17);
					// cs.g:1326:17: ( modifiers )?
					int alt277=2;
					try { DebugEnterSubRule(277);
					try { DebugEnterDecision(277, false);
					int LA277_0 = input.LA(1);

					if ((LA277_0==96||LA277_0==125||LA277_0==140||LA277_0==150||LA277_0==156||LA277_0==161||(LA277_0>=163 && LA277_0<=165)||LA277_0==170||LA277_0==176||LA277_0==188||LA277_0==191||LA277_0==193))
					{
						alt277 = 1;
					}
					} finally { DebugExitDecision(277); }
					switch (alt277)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1326:17: modifiers
						{
						DebugLocation(1326, 17);
						PushFollow(Follow._modifiers_in_property_declaration_list10827);
						modifiers1091=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1091.Tree, modifiers1091, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(277); }

					DebugLocation(1326, 30);
					PushFollow(Follow._type_in_property_declaration_list10832);
					type1092=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type1092.Tree, type1092, retval);
					DebugLocation(1326, 37);
					PushFollow(Follow._property_declaration_in_property_declaration_list10836);
					property_declaration1093=property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, property_declaration1093.Tree, property_declaration1093, retval);

					}
					break;

				default:
					if (cnt278 >= 1)
						goto loop278;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee278 = new EarlyExitException( 278, input );
					DebugRecognitionException(eee278);
					throw eee278;
				}
				cnt278++;
			}
			loop278:
				;

			} finally { DebugExitSubRule(278); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property_declaration_list", 306);
			LeaveRule("property_declaration_list", 306);
			LeaveRule_property_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 306, property_declaration_list_StartIndex); }

		}
		DebugLocation(1326, 59);
		} finally { DebugExitRule(GrammarFileName, "property_declaration_list"); }
		return retval;

	}
	// $ANTLR end "property_declaration_list"

	partial void EnterRule_constant_declarations();
	partial void LeaveRule_constant_declarations();

	// $ANTLR start "constant_declarations"
	// cs.g:1327:8: public constant_declarations : ( constant_declaration )+ ;
	[GrammarRule("constant_declarations")]
	public XAstParserRuleReturnScope constant_declarations()
	{
		EnterRule_constant_declarations();
		EnterRule("constant_declarations", 307);
		var retval = new XAstParserRuleReturnScope("constant_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int constant_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope constant_declaration1094 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_declarations");
		DebugLocation(1327, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 307)) { return retval; }

			// cs.g:1327:29: ( ( constant_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:1328:2: ( constant_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1328, 2);
			// cs.g:1328:2: ( constant_declaration )+
			int cnt279=0;
			try { DebugEnterSubRule(279);
			while (true)
			{
				int alt279=2;
				try { DebugEnterDecision(279, false);
				int LA279_0 = input.LA(1);

				if ((LA279_0==112))
				{
					alt279 = 1;
				}


				} finally { DebugExitDecision(279); }
				switch (alt279)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1328:2: constant_declaration
					{
					DebugLocation(1328, 2);
					PushFollow(Follow._constant_declaration_in_constant_declarations10848);
					constant_declaration1094=constant_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declaration1094.Tree, constant_declaration1094, retval);

					}
					break;

				default:
					if (cnt279 >= 1)
						goto loop279;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee279 = new EarlyExitException( 279, input );
					DebugRecognitionException(eee279);
					throw eee279;
				}
				cnt279++;
			}
			loop279:
				;

			} finally { DebugExitSubRule(279); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declarations", 307);
			LeaveRule("constant_declarations", 307);
			LeaveRule_constant_declarations();
			if (state.backtracking > 0) { Memoize(input, 307, constant_declarations_StartIndex); }

		}
		DebugLocation(1328, 22);
		} finally { DebugExitRule(GrammarFileName, "constant_declarations"); }
		return retval;

	}
	// $ANTLR end "constant_declarations"

	partial void EnterRule_literals();
	partial void LeaveRule_literals();

	// $ANTLR start "literals"
	// cs.g:1329:8: public literals : ( literal )+ ;
	[GrammarRule("literals")]
	public XAstParserRuleReturnScope literals()
	{
		EnterRule_literals();
		EnterRule("literals", 308);
		var retval = new XAstParserRuleReturnScope("literals");
		
		retval.Start = (IToken)input.LT(1);
		int literals_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope literal1095 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "literals");
		DebugLocation(1329, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 308)) { return retval; }

			// cs.g:1329:16: ( ( literal )+ )
			DebugEnterAlt(1);
			// cs.g:1330:2: ( literal )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1330, 2);
			// cs.g:1330:2: ( literal )+
			int cnt280=0;
			try { DebugEnterSubRule(280);
			while (true)
			{
				int alt280=2;
				try { DebugEnterDecision(280, false);
				int LA280_0 = input.LA(1);

				if ((LA280_0==Character_literal||LA280_0==FALSE||LA280_0==Hex_number||(LA280_0>=NULL && LA280_0<=NUMBER)||LA280_0==Real_literal||LA280_0==STRINGLITERAL||LA280_0==TRUE||LA280_0==Verbatim_string_literal))
				{
					alt280 = 1;
				}


				} finally { DebugExitDecision(280); }
				switch (alt280)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1330:2: literal
					{
					DebugLocation(1330, 2);
					PushFollow(Follow._literal_in_literals10858);
					literal1095=literal();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, literal1095.Tree, literal1095, retval);

					}
					break;

				default:
					if (cnt280 >= 1)
						goto loop280;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee280 = new EarlyExitException( 280, input );
					DebugRecognitionException(eee280);
					throw eee280;
				}
				cnt280++;
			}
			loop280:
				;

			} finally { DebugExitSubRule(280); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literals", 308);
			LeaveRule("literals", 308);
			LeaveRule_literals();
			if (state.backtracking > 0) { Memoize(input, 308, literals_StartIndex); }

		}
		DebugLocation(1330, 10);
		} finally { DebugExitRule(GrammarFileName, "literals"); }
		return retval;

	}
	// $ANTLR end "literals"

	partial void EnterRule_delegate_declaration_list();
	partial void LeaveRule_delegate_declaration_list();

	// $ANTLR start "delegate_declaration_list"
	// cs.g:1331:8: public delegate_declaration_list : ( ( attributes )? ( modifiers )? delegate_declaration )+ ;
	[GrammarRule("delegate_declaration_list")]
	public XAstParserRuleReturnScope delegate_declaration_list()
	{
		EnterRule_delegate_declaration_list();
		EnterRule("delegate_declaration_list", 309);
		var retval = new XAstParserRuleReturnScope("delegate_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int delegate_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes1096 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope modifiers1097 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope delegate_declaration1098 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "delegate_declaration_list");
		DebugLocation(1331, 52);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 309)) { return retval; }

			// cs.g:1331:33: ( ( ( attributes )? ( modifiers )? delegate_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:1332:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1332, 2);
			// cs.g:1332:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
			int cnt283=0;
			try { DebugEnterSubRule(283);
			while (true)
			{
				int alt283=2;
				try { DebugEnterDecision(283, false);
				int LA283_0 = input.LA(1);

				if ((LA283_0==91||LA283_0==96||LA283_0==116||LA283_0==125||LA283_0==140||LA283_0==150||LA283_0==156||LA283_0==161||(LA283_0>=163 && LA283_0<=165)||LA283_0==170||LA283_0==176||LA283_0==188||LA283_0==191||LA283_0==193))
				{
					alt283 = 1;
				}


				} finally { DebugExitDecision(283); }
				switch (alt283)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1332:3: ( attributes )? ( modifiers )? delegate_declaration
					{
					DebugLocation(1332, 3);
					// cs.g:1332:3: ( attributes )?
					int alt281=2;
					try { DebugEnterSubRule(281);
					try { DebugEnterDecision(281, false);
					int LA281_0 = input.LA(1);

					if ((LA281_0==91))
					{
						alt281 = 1;
					}
					} finally { DebugExitDecision(281); }
					switch (alt281)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1332:3: attributes
						{
						DebugLocation(1332, 3);
						PushFollow(Follow._attributes_in_delegate_declaration_list10870);
						attributes1096=attributes();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, attributes1096.Tree, attributes1096, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(281); }

					DebugLocation(1332, 17);
					// cs.g:1332:17: ( modifiers )?
					int alt282=2;
					try { DebugEnterSubRule(282);
					try { DebugEnterDecision(282, false);
					int LA282_0 = input.LA(1);

					if ((LA282_0==96||LA282_0==125||LA282_0==140||LA282_0==150||LA282_0==156||LA282_0==161||(LA282_0>=163 && LA282_0<=165)||LA282_0==170||LA282_0==176||LA282_0==188||LA282_0==191||LA282_0==193))
					{
						alt282 = 1;
					}
					} finally { DebugExitDecision(282); }
					switch (alt282)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1332:17: modifiers
						{
						DebugLocation(1332, 17);
						PushFollow(Follow._modifiers_in_delegate_declaration_list10875);
						modifiers1097=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1097.Tree, modifiers1097, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(282); }

					DebugLocation(1332, 30);
					PushFollow(Follow._delegate_declaration_in_delegate_declaration_list10880);
					delegate_declaration1098=delegate_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration1098.Tree, delegate_declaration1098, retval);

					}
					break;

				default:
					if (cnt283 >= 1)
						goto loop283;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee283 = new EarlyExitException( 283, input );
					DebugRecognitionException(eee283);
					throw eee283;
				}
				cnt283++;
			}
			loop283:
				;

			} finally { DebugExitSubRule(283); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_declaration_list", 309);
			LeaveRule("delegate_declaration_list", 309);
			LeaveRule_delegate_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 309, delegate_declaration_list_StartIndex); }

		}
		DebugLocation(1332, 52);
		} finally { DebugExitRule(GrammarFileName, "delegate_declaration_list"); }
		return retval;

	}
	// $ANTLR end "delegate_declaration_list"

	partial void EnterRule_local_variable_declaration_list();
	partial void LeaveRule_local_variable_declaration_list();

	// $ANTLR start "local_variable_declaration_list"
	// cs.g:1333:8: public local_variable_declaration_list : ( local_variable_declaration ';' )+ ;
	[GrammarRule("local_variable_declaration_list")]
	public XAstParserRuleReturnScope local_variable_declaration_list()
	{
		EnterRule_local_variable_declaration_list();
		EnterRule("local_variable_declaration_list", 310);
		var retval = new XAstParserRuleReturnScope("local_variable_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1100 = default(IToken);
		XAstParserRuleReturnScope local_variable_declaration1099 = default(XAstParserRuleReturnScope);

		object char_literal1100_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_variable_declaration_list");
		DebugLocation(1333, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 310)) { return retval; }

			// cs.g:1333:39: ( ( local_variable_declaration ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1334:2: ( local_variable_declaration ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1334, 2);
			// cs.g:1334:2: ( local_variable_declaration ';' )+
			int cnt284=0;
			try { DebugEnterSubRule(284);
			while (true)
			{
				int alt284=2;
				try { DebugEnterDecision(284, false);
				int LA284_0 = input.LA(1);

				if ((LA284_0==DEFINE||LA284_0==ELIF||LA284_0==ENDIF||LA284_0==IDENTIFIER||LA284_0==UNDEF||LA284_0==95||(LA284_0>=97 && LA284_0<=98)||(LA284_0>=100 && LA284_0<=101)||LA284_0==103||(LA284_0>=105 && LA284_0<=106)||LA284_0==109||LA284_0==114||LA284_0==117||(LA284_0>=119 && LA284_0<=120)||LA284_0==122||LA284_0==126||LA284_0==129||(LA284_0>=132 && LA284_0<=133)||LA284_0==135||LA284_0==138||LA284_0==141||(LA284_0>=143 && LA284_0<=144)||(LA284_0>=146 && LA284_0<=148)||(LA284_0>=151 && LA284_0<=152)||LA284_0==154||LA284_0==157||LA284_0==160||LA284_0==162||LA284_0==167||LA284_0==169||(LA284_0>=171 && LA284_0<=173)||LA284_0==177||LA284_0==183||(LA284_0>=185 && LA284_0<=186)||(LA284_0>=189 && LA284_0<=190)||LA284_0==192||LA284_0==194||LA284_0==196))
				{
					alt284 = 1;
				}


				} finally { DebugExitDecision(284); }
				switch (alt284)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1334:3: local_variable_declaration ';'
					{
					DebugLocation(1334, 3);
					PushFollow(Follow._local_variable_declaration_in_local_variable_declaration_list10893);
					local_variable_declaration1099=local_variable_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration1099.Tree, local_variable_declaration1099, retval);
					DebugLocation(1334, 30);
					char_literal1100=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_local_variable_declaration_list10895), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1100_tree = (object)adaptor.Create(char_literal1100, retval);
					adaptor.AddChild(root_0, char_literal1100_tree);
					}

					}
					break;

				default:
					if (cnt284 >= 1)
						goto loop284;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee284 = new EarlyExitException( 284, input );
					DebugRecognitionException(eee284);
					throw eee284;
				}
				cnt284++;
			}
			loop284:
				;

			} finally { DebugExitSubRule(284); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declaration_list", 310);
			LeaveRule("local_variable_declaration_list", 310);
			LeaveRule_local_variable_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 310, local_variable_declaration_list_StartIndex); }

		}
		DebugLocation(1334, 35);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declaration_list"); }
		return retval;

	}
	// $ANTLR end "local_variable_declaration_list"

	partial void EnterRule_local_variable_initializer_list();
	partial void LeaveRule_local_variable_initializer_list();

	// $ANTLR start "local_variable_initializer_list"
	// cs.g:1335:8: public local_variable_initializer_list : ( local_variable_initializer ';' )+ ;
	[GrammarRule("local_variable_initializer_list")]
	public XAstParserRuleReturnScope local_variable_initializer_list()
	{
		EnterRule_local_variable_initializer_list();
		EnterRule("local_variable_initializer_list", 311);
		var retval = new XAstParserRuleReturnScope("local_variable_initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1102 = default(IToken);
		XAstParserRuleReturnScope local_variable_initializer1101 = default(XAstParserRuleReturnScope);

		object char_literal1102_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_variable_initializer_list");
		DebugLocation(1335, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 311)) { return retval; }

			// cs.g:1335:39: ( ( local_variable_initializer ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1336:2: ( local_variable_initializer ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1336, 2);
			// cs.g:1336:2: ( local_variable_initializer ';' )+
			int cnt285=0;
			try { DebugEnterSubRule(285);
			while (true)
			{
				int alt285=2;
				try { DebugEnterDecision(285, false);
				int LA285_0 = input.LA(1);

				if ((LA285_0==Character_literal||LA285_0==DEFINE||LA285_0==ELIF||LA285_0==ENDIF||LA285_0==FALSE||(LA285_0>=Hex_number && LA285_0<=IDENTIFIER)||(LA285_0>=MINUS && LA285_0<=NUMBER)||LA285_0==Real_literal||LA285_0==STRINGLITERAL||LA285_0==TRUE||LA285_0==UNDEF||LA285_0==Verbatim_string_literal||LA285_0==61||LA285_0==66||(LA285_0>=68 && LA285_0<=69)||(LA285_0>=71 && LA285_0<=72)||LA285_0==75||LA285_0==95||(LA285_0>=97 && LA285_0<=98)||(LA285_0>=100 && LA285_0<=103)||(LA285_0>=105 && LA285_0<=106)||(LA285_0>=109 && LA285_0<=110)||(LA285_0>=114 && LA285_0<=117)||(LA285_0>=119 && LA285_0<=120)||LA285_0==122||LA285_0==126||LA285_0==129||(LA285_0>=132 && LA285_0<=133)||LA285_0==135||LA285_0==138||LA285_0==141||(LA285_0>=143 && LA285_0<=144)||(LA285_0>=146 && LA285_0<=148)||(LA285_0>=150 && LA285_0<=152)||LA285_0==154||LA285_0==157||LA285_0==160||LA285_0==162||LA285_0==167||LA285_0==169||(LA285_0>=171 && LA285_0<=175)||LA285_0==177||LA285_0==180||(LA285_0>=183 && LA285_0<=187)||(LA285_0>=189 && LA285_0<=190)||LA285_0==194||(LA285_0>=196 && LA285_0<=197)||LA285_0==202))
				{
					alt285 = 1;
				}


				} finally { DebugExitDecision(285); }
				switch (alt285)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1336:3: local_variable_initializer ';'
					{
					DebugLocation(1336, 3);
					PushFollow(Follow._local_variable_initializer_in_local_variable_initializer_list10908);
					local_variable_initializer1101=local_variable_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_initializer1101.Tree, local_variable_initializer1101, retval);
					DebugLocation(1336, 30);
					char_literal1102=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_local_variable_initializer_list10910), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1102_tree = (object)adaptor.Create(char_literal1102, retval);
					adaptor.AddChild(root_0, char_literal1102_tree);
					}

					}
					break;

				default:
					if (cnt285 >= 1)
						goto loop285;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee285 = new EarlyExitException( 285, input );
					DebugRecognitionException(eee285);
					throw eee285;
				}
				cnt285++;
			}
			loop285:
				;

			} finally { DebugExitSubRule(285); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_initializer_list", 311);
			LeaveRule("local_variable_initializer_list", 311);
			LeaveRule_local_variable_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 311, local_variable_initializer_list_StartIndex); }

		}
		DebugLocation(1336, 35);
		} finally { DebugExitRule(GrammarFileName, "local_variable_initializer_list"); }
		return retval;

	}
	// $ANTLR end "local_variable_initializer_list"

	partial void EnterRule_expression_list_test();
	partial void LeaveRule_expression_list_test();

	// $ANTLR start "expression_list_test"
	// cs.g:1337:8: public expression_list_test : ( expression ';' )+ ;
	[GrammarRule("expression_list_test")]
	public XAstParserRuleReturnScope expression_list_test()
	{
		EnterRule_expression_list_test();
		EnterRule("expression_list_test", 312);
		var retval = new XAstParserRuleReturnScope("expression_list_test");
		
		retval.Start = (IToken)input.LT(1);
		int expression_list_test_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1104 = default(IToken);
		XAstParserRuleReturnScope expression1103 = default(XAstParserRuleReturnScope);

		object char_literal1104_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_list_test");
		DebugLocation(1337, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 312)) { return retval; }

			// cs.g:1337:28: ( ( expression ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1338:2: ( expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1338, 2);
			// cs.g:1338:2: ( expression ';' )+
			int cnt286=0;
			try { DebugEnterSubRule(286);
			while (true)
			{
				int alt286=2;
				try { DebugEnterDecision(286, false);
				int LA286_0 = input.LA(1);

				if ((LA286_0==Character_literal||LA286_0==DEFINE||LA286_0==ELIF||LA286_0==ENDIF||LA286_0==FALSE||(LA286_0>=Hex_number && LA286_0<=IDENTIFIER)||(LA286_0>=MINUS && LA286_0<=NUMBER)||LA286_0==Real_literal||LA286_0==STRINGLITERAL||LA286_0==TRUE||LA286_0==UNDEF||LA286_0==Verbatim_string_literal||LA286_0==61||LA286_0==66||(LA286_0>=68 && LA286_0<=69)||(LA286_0>=71 && LA286_0<=72)||LA286_0==75||LA286_0==95||(LA286_0>=97 && LA286_0<=98)||(LA286_0>=100 && LA286_0<=103)||(LA286_0>=105 && LA286_0<=106)||(LA286_0>=109 && LA286_0<=110)||(LA286_0>=114 && LA286_0<=117)||(LA286_0>=119 && LA286_0<=120)||LA286_0==122||LA286_0==126||LA286_0==129||(LA286_0>=132 && LA286_0<=133)||LA286_0==135||LA286_0==138||LA286_0==141||(LA286_0>=143 && LA286_0<=144)||(LA286_0>=146 && LA286_0<=148)||(LA286_0>=150 && LA286_0<=152)||LA286_0==154||LA286_0==157||LA286_0==160||LA286_0==162||LA286_0==167||LA286_0==169||(LA286_0>=171 && LA286_0<=174)||LA286_0==177||LA286_0==180||(LA286_0>=183 && LA286_0<=187)||(LA286_0>=189 && LA286_0<=190)||LA286_0==194||LA286_0==196||LA286_0==202))
				{
					alt286 = 1;
				}


				} finally { DebugExitDecision(286); }
				switch (alt286)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1338:3: expression ';'
					{
					DebugLocation(1338, 3);
					PushFollow(Follow._expression_in_expression_list_test10923);
					expression1103=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression1103.Tree, expression1103, retval);
					DebugLocation(1338, 14);
					char_literal1104=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_expression_list_test10925), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1104_tree = (object)adaptor.Create(char_literal1104, retval);
					adaptor.AddChild(root_0, char_literal1104_tree);
					}

					}
					break;

				default:
					if (cnt286 >= 1)
						goto loop286;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee286 = new EarlyExitException( 286, input );
					DebugRecognitionException(eee286);
					throw eee286;
				}
				cnt286++;
			}
			loop286:
				;

			} finally { DebugExitSubRule(286); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_test", 312);
			LeaveRule("expression_list_test", 312);
			LeaveRule_expression_list_test();
			if (state.backtracking > 0) { Memoize(input, 312, expression_list_test_StartIndex); }

		}
		DebugLocation(1338, 19);
		} finally { DebugExitRule(GrammarFileName, "expression_list_test"); }
		return retval;

	}
	// $ANTLR end "expression_list_test"

	partial void EnterRule_unary_expression_list();
	partial void LeaveRule_unary_expression_list();

	// $ANTLR start "unary_expression_list"
	// cs.g:1339:8: public unary_expression_list : ( unary_expression ';' )+ ;
	[GrammarRule("unary_expression_list")]
	public XAstParserRuleReturnScope unary_expression_list()
	{
		EnterRule_unary_expression_list();
		EnterRule("unary_expression_list", 313);
		var retval = new XAstParserRuleReturnScope("unary_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1106 = default(IToken);
		XAstParserRuleReturnScope unary_expression1105 = default(XAstParserRuleReturnScope);

		object char_literal1106_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression_list");
		DebugLocation(1339, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 313)) { return retval; }

			// cs.g:1339:29: ( ( unary_expression ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1340:2: ( unary_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1340, 2);
			// cs.g:1340:2: ( unary_expression ';' )+
			int cnt287=0;
			try { DebugEnterSubRule(287);
			while (true)
			{
				int alt287=2;
				try { DebugEnterDecision(287, false);
				int LA287_0 = input.LA(1);

				if ((LA287_0==Character_literal||LA287_0==DEFINE||LA287_0==ELIF||LA287_0==ENDIF||LA287_0==FALSE||(LA287_0>=Hex_number && LA287_0<=IDENTIFIER)||(LA287_0>=MINUS && LA287_0<=NUMBER)||LA287_0==Real_literal||LA287_0==STRINGLITERAL||LA287_0==TRUE||LA287_0==UNDEF||LA287_0==Verbatim_string_literal||LA287_0==61||LA287_0==66||(LA287_0>=68 && LA287_0<=69)||(LA287_0>=71 && LA287_0<=72)||LA287_0==75||LA287_0==95||(LA287_0>=97 && LA287_0<=98)||(LA287_0>=100 && LA287_0<=103)||(LA287_0>=105 && LA287_0<=106)||(LA287_0>=109 && LA287_0<=110)||(LA287_0>=114 && LA287_0<=117)||(LA287_0>=119 && LA287_0<=120)||LA287_0==122||LA287_0==126||LA287_0==129||(LA287_0>=132 && LA287_0<=133)||LA287_0==135||LA287_0==138||LA287_0==141||(LA287_0>=143 && LA287_0<=144)||(LA287_0>=146 && LA287_0<=148)||(LA287_0>=150 && LA287_0<=152)||LA287_0==154||LA287_0==157||LA287_0==160||LA287_0==162||LA287_0==167||LA287_0==169||(LA287_0>=171 && LA287_0<=174)||LA287_0==177||LA287_0==180||(LA287_0>=183 && LA287_0<=187)||(LA287_0>=189 && LA287_0<=190)||LA287_0==194||LA287_0==196||LA287_0==202))
				{
					alt287 = 1;
				}


				} finally { DebugExitDecision(287); }
				switch (alt287)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1340:3: unary_expression ';'
					{
					DebugLocation(1340, 3);
					PushFollow(Follow._unary_expression_in_unary_expression_list10938);
					unary_expression1105=unary_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression1105.Tree, unary_expression1105, retval);
					DebugLocation(1340, 20);
					char_literal1106=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_unary_expression_list10940), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1106_tree = (object)adaptor.Create(char_literal1106, retval);
					adaptor.AddChild(root_0, char_literal1106_tree);
					}

					}
					break;

				default:
					if (cnt287 >= 1)
						goto loop287;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee287 = new EarlyExitException( 287, input );
					DebugRecognitionException(eee287);
					throw eee287;
				}
				cnt287++;
			}
			loop287:
				;

			} finally { DebugExitSubRule(287); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression_list", 313);
			LeaveRule("unary_expression_list", 313);
			LeaveRule_unary_expression_list();
			if (state.backtracking > 0) { Memoize(input, 313, unary_expression_list_StartIndex); }

		}
		DebugLocation(1340, 25);
		} finally { DebugExitRule(GrammarFileName, "unary_expression_list"); }
		return retval;

	}
	// $ANTLR end "unary_expression_list"

	partial void EnterRule_invocation_expression_list();
	partial void LeaveRule_invocation_expression_list();

	// $ANTLR start "invocation_expression_list"
	// cs.g:1341:8: public invocation_expression_list : ( invocation_expression ';' )+ ;
	[GrammarRule("invocation_expression_list")]
	public XAstParserRuleReturnScope invocation_expression_list()
	{
		EnterRule_invocation_expression_list();
		EnterRule("invocation_expression_list", 314);
		var retval = new XAstParserRuleReturnScope("invocation_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int invocation_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1108 = default(IToken);
		XAstParserRuleReturnScope invocation_expression1107 = default(XAstParserRuleReturnScope);

		object char_literal1108_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "invocation_expression_list");
		DebugLocation(1341, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 314)) { return retval; }

			// cs.g:1341:34: ( ( invocation_expression ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1342:2: ( invocation_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1342, 2);
			// cs.g:1342:2: ( invocation_expression ';' )+
			int cnt288=0;
			try { DebugEnterSubRule(288);
			while (true)
			{
				int alt288=2;
				try { DebugEnterDecision(288, false);
				int LA288_0 = input.LA(1);

				if ((LA288_0==DEFINE||LA288_0==ELIF||LA288_0==ENDIF||LA288_0==IDENTIFIER||LA288_0==UNDEF||LA288_0==95||(LA288_0>=97 && LA288_0<=98)||(LA288_0>=100 && LA288_0<=103)||(LA288_0>=105 && LA288_0<=106)||LA288_0==109||LA288_0==114||LA288_0==117||(LA288_0>=119 && LA288_0<=120)||LA288_0==122||LA288_0==126||LA288_0==129||(LA288_0>=132 && LA288_0<=133)||LA288_0==135||LA288_0==138||LA288_0==141||(LA288_0>=143 && LA288_0<=144)||(LA288_0>=146 && LA288_0<=148)||(LA288_0>=151 && LA288_0<=152)||LA288_0==154||LA288_0==157||LA288_0==160||LA288_0==162||LA288_0==167||LA288_0==169||(LA288_0>=171 && LA288_0<=173)||LA288_0==177||LA288_0==180||(LA288_0>=183 && LA288_0<=186)||(LA288_0>=189 && LA288_0<=190)||LA288_0==194||LA288_0==196))
				{
					alt288 = 1;
				}


				} finally { DebugExitDecision(288); }
				switch (alt288)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1342:3: invocation_expression ';'
					{
					DebugLocation(1342, 3);
					PushFollow(Follow._invocation_expression_in_invocation_expression_list10953);
					invocation_expression1107=invocation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_expression1107.Tree, invocation_expression1107, retval);
					DebugLocation(1342, 25);
					char_literal1108=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_invocation_expression_list10955), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1108_tree = (object)adaptor.Create(char_literal1108, retval);
					adaptor.AddChild(root_0, char_literal1108_tree);
					}

					}
					break;

				default:
					if (cnt288 >= 1)
						goto loop288;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee288 = new EarlyExitException( 288, input );
					DebugRecognitionException(eee288);
					throw eee288;
				}
				cnt288++;
			}
			loop288:
				;

			} finally { DebugExitSubRule(288); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_expression_list", 314);
			LeaveRule("invocation_expression_list", 314);
			LeaveRule_invocation_expression_list();
			if (state.backtracking > 0) { Memoize(input, 314, invocation_expression_list_StartIndex); }

		}
		DebugLocation(1342, 30);
		} finally { DebugExitRule(GrammarFileName, "invocation_expression_list"); }
		return retval;

	}
	// $ANTLR end "invocation_expression_list"

	partial void EnterRule_primary_expression_list();
	partial void LeaveRule_primary_expression_list();

	// $ANTLR start "primary_expression_list"
	// cs.g:1343:8: public primary_expression_list : ( primary_expression ';' )+ ;
	[GrammarRule("primary_expression_list")]
	public XAstParserRuleReturnScope primary_expression_list()
	{
		EnterRule_primary_expression_list();
		EnterRule("primary_expression_list", 315);
		var retval = new XAstParserRuleReturnScope("primary_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1110 = default(IToken);
		XAstParserRuleReturnScope primary_expression1109 = default(XAstParserRuleReturnScope);

		object char_literal1110_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression_list");
		DebugLocation(1343, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 315)) { return retval; }

			// cs.g:1343:31: ( ( primary_expression ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1344:2: ( primary_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1344, 2);
			// cs.g:1344:2: ( primary_expression ';' )+
			int cnt289=0;
			try { DebugEnterSubRule(289);
			while (true)
			{
				int alt289=2;
				try { DebugEnterDecision(289, false);
				int LA289_0 = input.LA(1);

				if ((LA289_0==Character_literal||LA289_0==DEFINE||LA289_0==ELIF||LA289_0==ENDIF||LA289_0==FALSE||(LA289_0>=Hex_number && LA289_0<=IDENTIFIER)||(LA289_0>=NULL && LA289_0<=NUMBER)||LA289_0==Real_literal||LA289_0==STRINGLITERAL||LA289_0==TRUE||LA289_0==UNDEF||LA289_0==Verbatim_string_literal||LA289_0==68||LA289_0==95||(LA289_0>=97 && LA289_0<=98)||(LA289_0>=100 && LA289_0<=103)||(LA289_0>=105 && LA289_0<=106)||(LA289_0>=109 && LA289_0<=110)||(LA289_0>=114 && LA289_0<=117)||(LA289_0>=119 && LA289_0<=120)||LA289_0==122||LA289_0==126||LA289_0==129||(LA289_0>=132 && LA289_0<=133)||LA289_0==135||LA289_0==138||LA289_0==141||(LA289_0>=143 && LA289_0<=144)||(LA289_0>=146 && LA289_0<=148)||(LA289_0>=150 && LA289_0<=152)||LA289_0==154||LA289_0==157||LA289_0==160||LA289_0==162||LA289_0==167||LA289_0==169||(LA289_0>=171 && LA289_0<=174)||LA289_0==177||LA289_0==180||(LA289_0>=183 && LA289_0<=187)||(LA289_0>=189 && LA289_0<=190)||LA289_0==194||LA289_0==196))
				{
					alt289 = 1;
				}


				} finally { DebugExitDecision(289); }
				switch (alt289)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1344:3: primary_expression ';'
					{
					DebugLocation(1344, 3);
					PushFollow(Follow._primary_expression_in_primary_expression_list10968);
					primary_expression1109=primary_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression1109.Tree, primary_expression1109, retval);
					DebugLocation(1344, 22);
					char_literal1110=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_primary_expression_list10970), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1110_tree = (object)adaptor.Create(char_literal1110, retval);
					adaptor.AddChild(root_0, char_literal1110_tree);
					}

					}
					break;

				default:
					if (cnt289 >= 1)
						goto loop289;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee289 = new EarlyExitException( 289, input );
					DebugRecognitionException(eee289);
					throw eee289;
				}
				cnt289++;
			}
			loop289:
				;

			} finally { DebugExitSubRule(289); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression_list", 315);
			LeaveRule("primary_expression_list", 315);
			LeaveRule_primary_expression_list();
			if (state.backtracking > 0) { Memoize(input, 315, primary_expression_list_StartIndex); }

		}
		DebugLocation(1344, 27);
		} finally { DebugExitRule(GrammarFileName, "primary_expression_list"); }
		return retval;

	}
	// $ANTLR end "primary_expression_list"

	partial void EnterRule_non_assignment_expression_list();
	partial void LeaveRule_non_assignment_expression_list();

	// $ANTLR start "non_assignment_expression_list"
	// cs.g:1345:8: public non_assignment_expression_list : ( non_assignment_expression ';' )+ ;
	[GrammarRule("non_assignment_expression_list")]
	public XAstParserRuleReturnScope non_assignment_expression_list()
	{
		EnterRule_non_assignment_expression_list();
		EnterRule("non_assignment_expression_list", 316);
		var retval = new XAstParserRuleReturnScope("non_assignment_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int non_assignment_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1112 = default(IToken);
		XAstParserRuleReturnScope non_assignment_expression1111 = default(XAstParserRuleReturnScope);

		object char_literal1112_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "non_assignment_expression_list");
		DebugLocation(1345, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 316)) { return retval; }

			// cs.g:1345:38: ( ( non_assignment_expression ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1346:2: ( non_assignment_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1346, 2);
			// cs.g:1346:2: ( non_assignment_expression ';' )+
			int cnt290=0;
			try { DebugEnterSubRule(290);
			while (true)
			{
				int alt290=2;
				try { DebugEnterDecision(290, false);
				int LA290_0 = input.LA(1);

				if ((LA290_0==Character_literal||LA290_0==DEFINE||LA290_0==ELIF||LA290_0==ENDIF||LA290_0==FALSE||(LA290_0>=Hex_number && LA290_0<=IDENTIFIER)||(LA290_0>=MINUS && LA290_0<=NUMBER)||LA290_0==Real_literal||LA290_0==STRINGLITERAL||LA290_0==TRUE||LA290_0==UNDEF||LA290_0==Verbatim_string_literal||LA290_0==61||LA290_0==66||(LA290_0>=68 && LA290_0<=69)||(LA290_0>=71 && LA290_0<=72)||LA290_0==75||LA290_0==95||(LA290_0>=97 && LA290_0<=98)||(LA290_0>=100 && LA290_0<=103)||(LA290_0>=105 && LA290_0<=106)||(LA290_0>=109 && LA290_0<=110)||(LA290_0>=114 && LA290_0<=117)||(LA290_0>=119 && LA290_0<=120)||LA290_0==122||LA290_0==126||LA290_0==129||(LA290_0>=132 && LA290_0<=133)||LA290_0==135||LA290_0==138||LA290_0==141||(LA290_0>=143 && LA290_0<=144)||(LA290_0>=146 && LA290_0<=148)||(LA290_0>=150 && LA290_0<=152)||LA290_0==154||LA290_0==157||LA290_0==160||LA290_0==162||LA290_0==167||LA290_0==169||(LA290_0>=171 && LA290_0<=174)||LA290_0==177||LA290_0==180||(LA290_0>=183 && LA290_0<=187)||(LA290_0>=189 && LA290_0<=190)||LA290_0==194||LA290_0==196||LA290_0==202))
				{
					alt290 = 1;
				}


				} finally { DebugExitDecision(290); }
				switch (alt290)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1346:3: non_assignment_expression ';'
					{
					DebugLocation(1346, 3);
					PushFollow(Follow._non_assignment_expression_in_non_assignment_expression_list10983);
					non_assignment_expression1111=non_assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, non_assignment_expression1111.Tree, non_assignment_expression1111, retval);
					DebugLocation(1346, 29);
					char_literal1112=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_non_assignment_expression_list10985), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1112_tree = (object)adaptor.Create(char_literal1112, retval);
					adaptor.AddChild(root_0, char_literal1112_tree);
					}

					}
					break;

				default:
					if (cnt290 >= 1)
						goto loop290;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee290 = new EarlyExitException( 290, input );
					DebugRecognitionException(eee290);
					throw eee290;
				}
				cnt290++;
			}
			loop290:
				;

			} finally { DebugExitSubRule(290); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_assignment_expression_list", 316);
			LeaveRule("non_assignment_expression_list", 316);
			LeaveRule_non_assignment_expression_list();
			if (state.backtracking > 0) { Memoize(input, 316, non_assignment_expression_list_StartIndex); }

		}
		DebugLocation(1346, 34);
		} finally { DebugExitRule(GrammarFileName, "non_assignment_expression_list"); }
		return retval;

	}
	// $ANTLR end "non_assignment_expression_list"

	partial void EnterRule_method_declarations();
	partial void LeaveRule_method_declarations();

	// $ANTLR start "method_declarations"
	// cs.g:1347:8: public method_declarations : ( ( modifiers )? ( 'void' | type ) method_declaration )+ ;
	[GrammarRule("method_declarations")]
	public XAstParserRuleReturnScope method_declarations()
	{
		EnterRule_method_declarations();
		EnterRule("method_declarations", 317);
		var retval = new XAstParserRuleReturnScope("method_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int method_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1114 = default(IToken);
		XAstParserRuleReturnScope modifiers1113 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type1115 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration1116 = default(XAstParserRuleReturnScope);

		object string_literal1114_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "method_declarations");
		DebugLocation(1347, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 317)) { return retval; }

			// cs.g:1347:27: ( ( ( modifiers )? ( 'void' | type ) method_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:1348:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1348, 2);
			// cs.g:1348:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
			int cnt293=0;
			try { DebugEnterSubRule(293);
			while (true)
			{
				int alt293=2;
				try { DebugEnterDecision(293, false);
				int LA293_0 = input.LA(1);

				if ((LA293_0==DEFINE||LA293_0==ELIF||LA293_0==ENDIF||LA293_0==IDENTIFIER||LA293_0==UNDEF||(LA293_0>=95 && LA293_0<=98)||(LA293_0>=100 && LA293_0<=101)||LA293_0==103||(LA293_0>=105 && LA293_0<=106)||LA293_0==109||LA293_0==114||LA293_0==117||(LA293_0>=119 && LA293_0<=120)||LA293_0==122||(LA293_0>=125 && LA293_0<=126)||LA293_0==129||(LA293_0>=132 && LA293_0<=133)||LA293_0==135||LA293_0==138||(LA293_0>=140 && LA293_0<=141)||(LA293_0>=143 && LA293_0<=144)||(LA293_0>=146 && LA293_0<=148)||(LA293_0>=150 && LA293_0<=152)||LA293_0==154||(LA293_0>=156 && LA293_0<=157)||(LA293_0>=160 && LA293_0<=165)||LA293_0==167||(LA293_0>=169 && LA293_0<=173)||(LA293_0>=176 && LA293_0<=177)||LA293_0==183||(LA293_0>=185 && LA293_0<=186)||(LA293_0>=188 && LA293_0<=194)||LA293_0==196))
				{
					alt293 = 1;
				}


				} finally { DebugExitDecision(293); }
				switch (alt293)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1348:3: ( modifiers )? ( 'void' | type ) method_declaration
					{
					DebugLocation(1348, 3);
					// cs.g:1348:3: ( modifiers )?
					int alt291=2;
					try { DebugEnterSubRule(291);
					try { DebugEnterDecision(291, false);
					int LA291_0 = input.LA(1);

					if ((LA291_0==96||LA291_0==125||LA291_0==140||LA291_0==150||LA291_0==156||LA291_0==161||(LA291_0>=163 && LA291_0<=165)||LA291_0==170||LA291_0==176||LA291_0==188||LA291_0==191||LA291_0==193))
					{
						alt291 = 1;
					}
					} finally { DebugExitDecision(291); }
					switch (alt291)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1348:3: modifiers
						{
						DebugLocation(1348, 3);
						PushFollow(Follow._modifiers_in_method_declarations10998);
						modifiers1113=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1113.Tree, modifiers1113, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(291); }

					DebugLocation(1348, 14);
					// cs.g:1348:14: ( 'void' | type )
					int alt292=2;
					try { DebugEnterSubRule(292);
					try { DebugEnterDecision(292, false);
					int LA292_0 = input.LA(1);

					if ((LA292_0==192))
					{
						int LA292_1 = input.LA(2);

						if ((LA292_1==Character_literal||LA292_1==DEFINE||LA292_1==ELIF||LA292_1==ENDIF||LA292_1==FALSE||(LA292_1>=Hex_number && LA292_1<=IDENTIFIER)||(LA292_1>=NULL && LA292_1<=NUMBER)||LA292_1==Real_literal||LA292_1==STRINGLITERAL||LA292_1==TRUE||LA292_1==UNDEF||LA292_1==Verbatim_string_literal||LA292_1==95||(LA292_1>=97 && LA292_1<=98)||(LA292_1>=100 && LA292_1<=101)||LA292_1==103||(LA292_1>=105 && LA292_1<=106)||LA292_1==109||LA292_1==114||LA292_1==117||(LA292_1>=119 && LA292_1<=120)||LA292_1==122||LA292_1==126||LA292_1==129||(LA292_1>=132 && LA292_1<=133)||LA292_1==135||LA292_1==138||LA292_1==141||(LA292_1>=143 && LA292_1<=144)||(LA292_1>=146 && LA292_1<=148)||(LA292_1>=151 && LA292_1<=152)||LA292_1==154||LA292_1==157||LA292_1==160||LA292_1==162||LA292_1==167||LA292_1==169||(LA292_1>=171 && LA292_1<=173)||LA292_1==177||LA292_1==183||(LA292_1>=185 && LA292_1<=186)||(LA292_1>=189 && LA292_1<=190)||LA292_1==194||LA292_1==196))
						{
							alt292 = 1;
						}
						else if ((LA292_1==69))
						{
							alt292 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 292, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA292_0==DEFINE||LA292_0==ELIF||LA292_0==ENDIF||LA292_0==IDENTIFIER||LA292_0==UNDEF||LA292_0==95||(LA292_0>=97 && LA292_0<=98)||(LA292_0>=100 && LA292_0<=101)||LA292_0==103||(LA292_0>=105 && LA292_0<=106)||LA292_0==109||LA292_0==114||LA292_0==117||(LA292_0>=119 && LA292_0<=120)||LA292_0==122||LA292_0==126||LA292_0==129||(LA292_0>=132 && LA292_0<=133)||LA292_0==135||LA292_0==138||LA292_0==141||(LA292_0>=143 && LA292_0<=144)||(LA292_0>=146 && LA292_0<=148)||(LA292_0>=151 && LA292_0<=152)||LA292_0==154||LA292_0==157||LA292_0==160||LA292_0==162||LA292_0==167||LA292_0==169||(LA292_0>=171 && LA292_0<=173)||LA292_0==177||LA292_0==183||(LA292_0>=185 && LA292_0<=186)||(LA292_0>=189 && LA292_0<=190)||LA292_0==194||LA292_0==196))
					{
						alt292 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 292, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(292); }
					switch (alt292)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1348:15: 'void'
						{
						DebugLocation(1348, 15);
						string_literal1114=(IToken)Match(input,192,Follow._192_in_method_declarations11002); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal1114_tree = (object)adaptor.Create(string_literal1114, retval);
						adaptor.AddChild(root_0, string_literal1114_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// cs.g:1348:24: type
						{
						DebugLocation(1348, 24);
						PushFollow(Follow._type_in_method_declarations11006);
						type1115=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, type1115.Tree, type1115, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(292); }

					DebugLocation(1348, 30);
					PushFollow(Follow._method_declaration_in_method_declarations11009);
					method_declaration1116=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration1116.Tree, method_declaration1116, retval);

					}
					break;

				default:
					if (cnt293 >= 1)
						goto loop293;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee293 = new EarlyExitException( 293, input );
					DebugRecognitionException(eee293);
					throw eee293;
				}
				cnt293++;
			}
			loop293:
				;

			} finally { DebugExitSubRule(293); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_declarations", 317);
			LeaveRule("method_declarations", 317);
			LeaveRule_method_declarations();
			if (state.backtracking > 0) { Memoize(input, 317, method_declarations_StartIndex); }

		}
		DebugLocation(1348, 50);
		} finally { DebugExitRule(GrammarFileName, "method_declarations"); }
		return retval;

	}
	// $ANTLR end "method_declarations"

	partial void EnterRule_synpred1_cs_fragment();
	partial void LeaveRule_synpred1_cs_fragment();

	// $ANTLR start synpred1_cs
	public void synpred1_cs_fragment()
	{
		EnterRule_synpred1_cs_fragment();
		EnterRule("synpred1_cs_fragment", 318);
		var retval = new XAstParserRuleReturnScope("synpred1_cs_fragment");
		try
		{
			// cs.g:60:2: ( 'partial' )
			DebugEnterAlt(1);
			// cs.g:60:3: 'partial'
			{
			DebugLocation(60, 3);
			Match(input,159,Follow._159_in_synpred1_cs291); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_cs_fragment", 318);
			LeaveRule("synpred1_cs_fragment", 318);
			LeaveRule_synpred1_cs_fragment();
		}
	}
	// $ANTLR end synpred1_cs

	partial void EnterRule_synpred2_cs_fragment();
	partial void LeaveRule_synpred2_cs_fragment();

	// $ANTLR start synpred2_cs
	public void synpred2_cs_fragment()
	{
		EnterRule_synpred2_cs_fragment();
		EnterRule("synpred2_cs_fragment", 319);
		var retval = new XAstParserRuleReturnScope("synpred2_cs_fragment");
		try
		{
			// cs.g:91:11: ( member_name '(' )
			DebugEnterAlt(1);
			// cs.g:91:12: member_name '('
			{
			DebugLocation(91, 12);
			PushFollow(Follow._member_name_in_synpred2_cs565);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(91, 26);
			Match(input,68,Follow._68_in_synpred2_cs569); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_cs_fragment", 319);
			LeaveRule("synpred2_cs_fragment", 319);
			LeaveRule_synpred2_cs_fragment();
		}
	}
	// $ANTLR end synpred2_cs

	partial void EnterRule_synpred3_cs_fragment();
	partial void LeaveRule_synpred3_cs_fragment();

	// $ANTLR start synpred3_cs
	public void synpred3_cs_fragment()
	{
		EnterRule_synpred3_cs_fragment();
		EnterRule("synpred3_cs_fragment", 320);
		var retval = new XAstParserRuleReturnScope("synpred3_cs_fragment");
		try
		{
			// cs.g:92:8: ( member_name '{' )
			DebugEnterAlt(1);
			// cs.g:92:9: member_name '{'
			{
			DebugLocation(92, 9);
			PushFollow(Follow._member_name_in_synpred3_cs584);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(92, 23);
			Match(input,197,Follow._197_in_synpred3_cs588); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_cs_fragment", 320);
			LeaveRule("synpred3_cs_fragment", 320);
			LeaveRule_synpred3_cs_fragment();
		}
	}
	// $ANTLR end synpred3_cs

	partial void EnterRule_synpred4_cs_fragment();
	partial void LeaveRule_synpred4_cs_fragment();

	// $ANTLR start synpred4_cs
	public void synpred4_cs_fragment()
	{
		EnterRule_synpred4_cs_fragment();
		EnterRule("synpred4_cs_fragment", 321);
		var retval = new XAstParserRuleReturnScope("synpred4_cs_fragment");
		try
		{
			// cs.g:93:8: ( member_name '.' 'this' )
			DebugEnterAlt(1);
			// cs.g:93:9: member_name '.' 'this'
			{
			DebugLocation(93, 9);
			PushFollow(Follow._member_name_in_synpred4_cs603);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(93, 23);
			new XToken((IToken)Match(input,DOT,Follow._DOT_in_synpred4_cs607), "DOT"); if (state.failed) return;
			DebugLocation(93, 29);
			Match(input,180,Follow._180_in_synpred4_cs611); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_cs_fragment", 321);
			LeaveRule("synpred4_cs_fragment", 321);
			LeaveRule_synpred4_cs_fragment();
		}
	}
	// $ANTLR end synpred4_cs

	partial void EnterRule_synpred5_cs_fragment();
	partial void LeaveRule_synpred5_cs_fragment();

	// $ANTLR start synpred5_cs
	public void synpred5_cs_fragment()
	{
		EnterRule_synpred5_cs_fragment();
		EnterRule("synpred5_cs_fragment", 322);
		var retval = new XAstParserRuleReturnScope("synpred5_cs_fragment");
		try
		{
			// cs.g:111:2: ( 'this' brackets )
			DebugEnterAlt(1);
			// cs.g:111:3: 'this' brackets
			{
			DebugLocation(111, 3);
			Match(input,180,Follow._180_in_synpred5_cs733); if (state.failed) return;
			DebugLocation(111, 13);
			PushFollow(Follow._brackets_in_synpred5_cs738);
			brackets();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_cs_fragment", 322);
			LeaveRule("synpred5_cs_fragment", 322);
			LeaveRule_synpred5_cs_fragment();
		}
	}
	// $ANTLR end synpred5_cs

	partial void EnterRule_synpred6_cs_fragment();
	partial void LeaveRule_synpred6_cs_fragment();

	// $ANTLR start synpred6_cs
	public void synpred6_cs_fragment()
	{
		EnterRule_synpred6_cs_fragment();
		EnterRule("synpred6_cs_fragment", 323);
		var retval = new XAstParserRuleReturnScope("synpred6_cs_fragment");
		try
		{
			// cs.g:112:4: ( 'base' brackets )
			DebugEnterAlt(1);
			// cs.g:112:5: 'base' brackets
			{
			DebugLocation(112, 5);
			Match(input,102,Follow._102_in_synpred6_cs758); if (state.failed) return;
			DebugLocation(112, 14);
			PushFollow(Follow._brackets_in_synpred6_cs762);
			brackets();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_cs_fragment", 323);
			LeaveRule("synpred6_cs_fragment", 323);
			LeaveRule_synpred6_cs_fragment();
		}
	}
	// $ANTLR end synpred6_cs

	partial void EnterRule_synpred7_cs_fragment();
	partial void LeaveRule_synpred7_cs_fragment();

	// $ANTLR start synpred7_cs
	public void synpred7_cs_fragment()
	{
		EnterRule_synpred7_cs_fragment();
		EnterRule("synpred7_cs_fragment", 324);
		var retval = new XAstParserRuleReturnScope("synpred7_cs_fragment");
		try
		{
			// cs.g:114:14: ( object_creation_expression ( '.' | '->' | '[' ) )
			DebugEnterAlt(1);
			// cs.g:114:15: object_creation_expression ( '.' | '->' | '[' )
			{
			DebugLocation(114, 15);
			PushFollow(Follow._object_creation_expression_in_synpred7_cs798);
			object_creation_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(114, 44);
			if (input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred7_cs_fragment", 324);
			LeaveRule("synpred7_cs_fragment", 324);
			LeaveRule_synpred7_cs_fragment();
		}
	}
	// $ANTLR end synpred7_cs

	partial void EnterRule_synpred8_cs_fragment();
	partial void LeaveRule_synpred8_cs_fragment();

	// $ANTLR start synpred8_cs
	public void synpred8_cs_fragment()
	{
		EnterRule_synpred8_cs_fragment();
		EnterRule("synpred8_cs_fragment", 325);
		var retval = new XAstParserRuleReturnScope("synpred8_cs_fragment");
		try
		{
			// cs.g:118:7: ( delegate_creation_expression )
			DebugEnterAlt(1);
			// cs.g:118:8: delegate_creation_expression
			{
			DebugLocation(118, 8);
			PushFollow(Follow._delegate_creation_expression_in_synpred8_cs846);
			delegate_creation_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_cs_fragment", 325);
			LeaveRule("synpred8_cs_fragment", 325);
			LeaveRule_synpred8_cs_fragment();
		}
	}
	// $ANTLR end synpred8_cs

	partial void EnterRule_synpred9_cs_fragment();
	partial void LeaveRule_synpred9_cs_fragment();

	// $ANTLR start synpred9_cs
	public void synpred9_cs_fragment()
	{
		EnterRule_synpred9_cs_fragment();
		EnterRule("synpred9_cs_fragment", 326);
		var retval = new XAstParserRuleReturnScope("synpred9_cs_fragment");
		try
		{
			// cs.g:130:4: ( identifier generic_argument_list )
			DebugEnterAlt(1);
			// cs.g:130:5: identifier generic_argument_list
			{
			DebugLocation(130, 5);
			PushFollow(Follow._identifier_in_synpred9_cs973);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(130, 19);
			PushFollow(Follow._generic_argument_list_in_synpred9_cs978);
			generic_argument_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_cs_fragment", 326);
			LeaveRule("synpred9_cs_fragment", 326);
			LeaveRule_synpred9_cs_fragment();
		}
	}
	// $ANTLR end synpred9_cs

	partial void EnterRule_synpred10_cs_fragment();
	partial void LeaveRule_synpred10_cs_fragment();

	// $ANTLR start synpred10_cs
	public void synpred10_cs_fragment()
	{
		EnterRule_synpred10_cs_fragment();
		EnterRule("synpred10_cs_fragment", 327);
		var retval = new XAstParserRuleReturnScope("synpred10_cs_fragment");
		try
		{
			// cs.g:170:4: ( '(' type ')' )
			DebugEnterAlt(1);
			// cs.g:170:5: '(' type ')'
			{
			DebugLocation(170, 5);
			Match(input,68,Follow._68_in_synpred10_cs1265); if (state.failed) return;
			DebugLocation(170, 11);
			PushFollow(Follow._type_in_synpred10_cs1269);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(170, 18);
			new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_synpred10_cs1273), "RPAREN"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_cs_fragment", 327);
			LeaveRule("synpred10_cs_fragment", 327);
			LeaveRule_synpred10_cs_fragment();
		}
	}
	// $ANTLR end synpred10_cs

	partial void EnterRule_synpred11_cs_fragment();
	partial void LeaveRule_synpred11_cs_fragment();

	// $ANTLR start synpred11_cs
	public void synpred11_cs_fragment()
	{
		EnterRule_synpred11_cs_fragment();
		EnterRule("synpred11_cs_fragment", 328);
		var retval = new XAstParserRuleReturnScope("synpred11_cs_fragment");
		try
		{
			// cs.g:196:2: ( array_creation_expression )
			DebugEnterAlt(1);
			// cs.g:196:3: array_creation_expression
			{
			DebugLocation(196, 3);
			PushFollow(Follow._array_creation_expression_in_synpred11_cs1514);
			array_creation_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred11_cs_fragment", 328);
			LeaveRule("synpred11_cs_fragment", 328);
			LeaveRule_synpred11_cs_fragment();
		}
	}
	// $ANTLR end synpred11_cs

	partial void EnterRule_synpred12_cs_fragment();
	partial void LeaveRule_synpred12_cs_fragment();

	// $ANTLR start synpred12_cs
	public void synpred12_cs_fragment()
	{
		EnterRule_synpred12_cs_fragment();
		EnterRule("synpred12_cs_fragment", 329);
		var retval = new XAstParserRuleReturnScope("synpred12_cs_fragment");
		try
		{
			// cs.g:205:11: ( arguments ( '[' | '.' | '->' ) )
			DebugEnterAlt(1);
			// cs.g:205:12: arguments ( '[' | '.' | '->' )
			{
			DebugLocation(205, 12);
			PushFollow(Follow._arguments_in_synpred12_cs1596);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(205, 24);
			if (input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred12_cs_fragment", 329);
			LeaveRule("synpred12_cs_fragment", 329);
			LeaveRule_synpred12_cs_fragment();
		}
	}
	// $ANTLR end synpred12_cs

	partial void EnterRule_synpred13_cs_fragment();
	partial void LeaveRule_synpred13_cs_fragment();

	// $ANTLR start synpred13_cs
	public void synpred13_cs_fragment()
	{
		EnterRule_synpred13_cs_fragment();
		EnterRule("synpred13_cs_fragment", 330);
		var retval = new XAstParserRuleReturnScope("synpred13_cs_fragment");
		try
		{
			// cs.g:276:20: ( unbound_type_name )
			DebugEnterAlt(1);
			// cs.g:276:21: unbound_type_name
			{
			DebugLocation(276, 21);
			PushFollow(Follow._unbound_type_name_in_synpred13_cs2170);
			unbound_type_name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_cs_fragment", 330);
			LeaveRule("synpred13_cs_fragment", 330);
			LeaveRule_synpred13_cs_fragment();
		}
	}
	// $ANTLR end synpred13_cs

	partial void EnterRule_synpred14_cs_fragment();
	partial void LeaveRule_synpred14_cs_fragment();

	// $ANTLR start synpred14_cs
	public void synpred14_cs_fragment()
	{
		EnterRule_synpred14_cs_fragment();
		EnterRule("synpred14_cs_fragment", 331);
		var retval = new XAstParserRuleReturnScope("synpred14_cs_fragment");
		try
		{
			// cs.g:286:5: ( generic_dimension_specifier '.' )
			DebugEnterAlt(1);
			// cs.g:286:6: generic_dimension_specifier '.'
			{
			DebugLocation(286, 6);
			PushFollow(Follow._generic_dimension_specifier_in_synpred14_cs2230);
			generic_dimension_specifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(286, 36);
			new XToken((IToken)Match(input,DOT,Follow._DOT_in_synpred14_cs2234), "DOT"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_cs_fragment", 331);
			LeaveRule("synpred14_cs_fragment", 331);
			LeaveRule_synpred14_cs_fragment();
		}
	}
	// $ANTLR end synpred14_cs

	partial void EnterRule_synpred15_cs_fragment();
	partial void LeaveRule_synpred15_cs_fragment();

	// $ANTLR start synpred15_cs
	public void synpred15_cs_fragment()
	{
		EnterRule_synpred15_cs_fragment();
		EnterRule("synpred15_cs_fragment", 332);
		var retval = new XAstParserRuleReturnScope("synpred15_cs_fragment");
		try
		{
			// cs.g:309:2: ( identifier generic_argument_list )
			DebugEnterAlt(1);
			// cs.g:309:3: identifier generic_argument_list
			{
			DebugLocation(309, 3);
			PushFollow(Follow._identifier_in_synpred15_cs2380);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(309, 16);
			PushFollow(Follow._generic_argument_list_in_synpred15_cs2384);
			generic_argument_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_cs_fragment", 332);
			LeaveRule("synpred15_cs_fragment", 332);
			LeaveRule_synpred15_cs_fragment();
		}
	}
	// $ANTLR end synpred15_cs

	partial void EnterRule_synpred16_cs_fragment();
	partial void LeaveRule_synpred16_cs_fragment();

	// $ANTLR start synpred16_cs
	public void synpred16_cs_fragment()
	{
		EnterRule_synpred16_cs_fragment();
		EnterRule("synpred16_cs_fragment", 333);
		var retval = new XAstParserRuleReturnScope("synpred16_cs_fragment");
		try
		{
			// cs.g:317:4: ( identifier generic_argument_list )
			DebugEnterAlt(1);
			// cs.g:317:5: identifier generic_argument_list
			{
			DebugLocation(317, 5);
			PushFollow(Follow._identifier_in_synpred16_cs2433);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(317, 18);
			PushFollow(Follow._generic_argument_list_in_synpred16_cs2437);
			generic_argument_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_cs_fragment", 333);
			LeaveRule("synpred16_cs_fragment", 333);
			LeaveRule_synpred16_cs_fragment();
		}
	}
	// $ANTLR end synpred16_cs

	partial void EnterRule_synpred17_cs_fragment();
	partial void LeaveRule_synpred17_cs_fragment();

	// $ANTLR start synpred17_cs
	public void synpred17_cs_fragment()
	{
		EnterRule_synpred17_cs_fragment();
		EnterRule("synpred17_cs_fragment", 334);
		var retval = new XAstParserRuleReturnScope("synpred17_cs_fragment");
		try
		{
			// cs.g:334:4: ( ( predefined_type | type_name ) rank_specifiers )
			DebugEnterAlt(1);
			// cs.g:334:5: ( predefined_type | type_name ) rank_specifiers
			{
			DebugLocation(334, 5);
			// cs.g:334:5: ( predefined_type | type_name )
			int alt294=2;
			try { DebugEnterSubRule(294);
			try { DebugEnterDecision(294, false);
			int LA294_0 = input.LA(1);

			if ((LA294_0==103||LA294_0==106||LA294_0==109||LA294_0==114||LA294_0==119||LA294_0==129||LA294_0==138||LA294_0==146||LA294_0==151||LA294_0==169||LA294_0==173||LA294_0==177||(LA294_0>=185 && LA294_0<=186)||LA294_0==189))
			{
				alt294 = 1;
			}
			else if ((LA294_0==DEFINE||LA294_0==ELIF||LA294_0==ENDIF||LA294_0==IDENTIFIER||LA294_0==UNDEF||LA294_0==95||(LA294_0>=97 && LA294_0<=98)||(LA294_0>=100 && LA294_0<=101)||LA294_0==105||LA294_0==117||LA294_0==120||LA294_0==122||LA294_0==126||(LA294_0>=132 && LA294_0<=133)||LA294_0==135||LA294_0==141||(LA294_0>=143 && LA294_0<=144)||(LA294_0>=147 && LA294_0<=148)||LA294_0==152||LA294_0==154||LA294_0==157||LA294_0==160||LA294_0==162||LA294_0==167||(LA294_0>=171 && LA294_0<=172)||LA294_0==183||LA294_0==190||LA294_0==194||LA294_0==196))
			{
				alt294 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 294, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(294); }
			switch (alt294)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:334:6: predefined_type
				{
				DebugLocation(334, 6);
				PushFollow(Follow._predefined_type_in_synpred17_cs2538);
				predefined_type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:334:24: type_name
				{
				DebugLocation(334, 24);
				PushFollow(Follow._type_name_in_synpred17_cs2542);
				type_name();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(294); }

			DebugLocation(334, 36);
			PushFollow(Follow._rank_specifiers_in_synpred17_cs2546);
			rank_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_cs_fragment", 334);
			LeaveRule("synpred17_cs_fragment", 334);
			LeaveRule_synpred17_cs_fragment();
		}
	}
	// $ANTLR end synpred17_cs

	partial void EnterRule_synpred18_cs_fragment();
	partial void LeaveRule_synpred18_cs_fragment();

	// $ANTLR start synpred18_cs
	public void synpred18_cs_fragment()
	{
		EnterRule_synpred18_cs_fragment();
		EnterRule("synpred18_cs_fragment", 335);
		var retval = new XAstParserRuleReturnScope("synpred18_cs_fragment");
		try
		{
			// cs.g:335:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )
			DebugEnterAlt(1);
			// cs.g:335:5: ( predefined_type | type_name ) ( ( '*' )+ | '?' )
			{
			DebugLocation(335, 5);
			// cs.g:335:5: ( predefined_type | type_name )
			int alt295=2;
			try { DebugEnterSubRule(295);
			try { DebugEnterDecision(295, false);
			int LA295_0 = input.LA(1);

			if ((LA295_0==103||LA295_0==106||LA295_0==109||LA295_0==114||LA295_0==119||LA295_0==129||LA295_0==138||LA295_0==146||LA295_0==151||LA295_0==169||LA295_0==173||LA295_0==177||(LA295_0>=185 && LA295_0<=186)||LA295_0==189))
			{
				alt295 = 1;
			}
			else if ((LA295_0==DEFINE||LA295_0==ELIF||LA295_0==ENDIF||LA295_0==IDENTIFIER||LA295_0==UNDEF||LA295_0==95||(LA295_0>=97 && LA295_0<=98)||(LA295_0>=100 && LA295_0<=101)||LA295_0==105||LA295_0==117||LA295_0==120||LA295_0==122||LA295_0==126||(LA295_0>=132 && LA295_0<=133)||LA295_0==135||LA295_0==141||(LA295_0>=143 && LA295_0<=144)||(LA295_0>=147 && LA295_0<=148)||LA295_0==152||LA295_0==154||LA295_0==157||LA295_0==160||LA295_0==162||LA295_0==167||(LA295_0>=171 && LA295_0<=172)||LA295_0==183||LA295_0==190||LA295_0==194||LA295_0==196))
			{
				alt295 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 295, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(295); }
			switch (alt295)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:335:6: predefined_type
				{
				DebugLocation(335, 6);
				PushFollow(Follow._predefined_type_in_synpred18_cs2573);
				predefined_type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:335:24: type_name
				{
				DebugLocation(335, 24);
				PushFollow(Follow._type_name_in_synpred18_cs2577);
				type_name();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(295); }

			DebugLocation(335, 36);
			// cs.g:335:36: ( ( '*' )+ | '?' )
			int alt297=2;
			try { DebugEnterSubRule(297);
			try { DebugEnterDecision(297, false);
			int LA297_0 = input.LA(1);

			if ((LA297_0==69))
			{
				alt297 = 1;
			}
			else if ((LA297_0==89))
			{
				alt297 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 297, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(297); }
			switch (alt297)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:335:37: ( '*' )+
				{
				DebugLocation(335, 37);
				// cs.g:335:37: ( '*' )+
				int cnt296=0;
				try { DebugEnterSubRule(296);
				while (true)
				{
					int alt296=2;
					try { DebugEnterDecision(296, false);
					int LA296_0 = input.LA(1);

					if ((LA296_0==69))
					{
						alt296 = 1;
					}


					} finally { DebugExitDecision(296); }
					switch (alt296)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:335:37: '*'
						{
						DebugLocation(335, 37);
						Match(input,69,Follow._69_in_synpred18_cs2582); if (state.failed) return;

						}
						break;

					default:
						if (cnt296 >= 1)
							goto loop296;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee296 = new EarlyExitException( 296, input );
						DebugRecognitionException(eee296);
						throw eee296;
					}
					cnt296++;
				}
				loop296:
					;

				} finally { DebugExitSubRule(296); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:335:44: '?'
				{
				DebugLocation(335, 44);
				Match(input,89,Follow._89_in_synpred18_cs2587); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(297); }


			}

		}
		finally
		{
			TraceOut("synpred18_cs_fragment", 335);
			LeaveRule("synpred18_cs_fragment", 335);
			LeaveRule_synpred18_cs_fragment();
		}
	}
	// $ANTLR end synpred18_cs

	partial void EnterRule_synpred19_cs_fragment();
	partial void LeaveRule_synpred19_cs_fragment();

	// $ANTLR start synpred19_cs
	public void synpred19_cs_fragment()
	{
		EnterRule_synpred19_cs_fragment();
		EnterRule("synpred19_cs_fragment", 336);
		var retval = new XAstParserRuleReturnScope("synpred19_cs_fragment");
		try
		{
			// cs.g:371:2: ( unary_expression assignment_operator )
			DebugEnterAlt(1);
			// cs.g:371:3: unary_expression assignment_operator
			{
			DebugLocation(371, 3);
			PushFollow(Follow._unary_expression_in_synpred19_cs2787);
			unary_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(371, 22);
			PushFollow(Follow._assignment_operator_in_synpred19_cs2791);
			assignment_operator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred19_cs_fragment", 336);
			LeaveRule("synpred19_cs_fragment", 336);
			LeaveRule_synpred19_cs_fragment();
		}
	}
	// $ANTLR end synpred19_cs

	partial void EnterRule_synpred20_cs_fragment();
	partial void LeaveRule_synpred20_cs_fragment();

	// $ANTLR start synpred20_cs
	public void synpred20_cs_fragment()
	{
		EnterRule_synpred20_cs_fragment();
		EnterRule("synpred20_cs_fragment", 337);
		var retval = new XAstParserRuleReturnScope("synpred20_cs_fragment");
		try
		{
			// cs.g:380:2: ( cast_expression )
			DebugEnterAlt(1);
			// cs.g:380:3: cast_expression
			{
			DebugLocation(380, 3);
			PushFollow(Follow._cast_expression_in_synpred20_cs2855);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred20_cs_fragment", 337);
			LeaveRule("synpred20_cs_fragment", 337);
			LeaveRule_synpred20_cs_fragment();
		}
	}
	// $ANTLR end synpred20_cs

	partial void EnterRule_synpred21_cs_fragment();
	partial void LeaveRule_synpred21_cs_fragment();

	// $ANTLR start synpred21_cs
	public void synpred21_cs_fragment()
	{
		EnterRule_synpred21_cs_fragment();
		EnterRule("synpred21_cs_fragment", 338);
		var retval = new XAstParserRuleReturnScope("synpred21_cs_fragment");
		try
		{
			// cs.g:406:2: ( anonymous_function_signature '=>' )
			DebugEnterAlt(1);
			// cs.g:406:3: anonymous_function_signature '=>'
			{
			DebugLocation(406, 3);
			PushFollow(Follow._anonymous_function_signature_in_synpred21_cs3075);
			anonymous_function_signature();
			PopFollow();
			if (state.failed) return;
			DebugLocation(406, 34);
			Match(input,87,Follow._87_in_synpred21_cs3079); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred21_cs_fragment", 338);
			LeaveRule("synpred21_cs_fragment", 338);
			LeaveRule_synpred21_cs_fragment();
		}
	}
	// $ANTLR end synpred21_cs

	partial void EnterRule_synpred22_cs_fragment();
	partial void LeaveRule_synpred22_cs_fragment();

	// $ANTLR start synpred22_cs
	public void synpred22_cs_fragment()
	{
		EnterRule_synpred22_cs_fragment();
		EnterRule("synpred22_cs_fragment", 339);
		var retval = new XAstParserRuleReturnScope("synpred22_cs_fragment");
		try
		{
			// cs.g:407:4: ( query_expression )
			DebugEnterAlt(1);
			// cs.g:407:5: query_expression
			{
			DebugLocation(407, 5);
			PushFollow(Follow._query_expression_in_synpred22_cs3090);
			query_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred22_cs_fragment", 339);
			LeaveRule("synpred22_cs_fragment", 339);
			LeaveRule_synpred22_cs_fragment();
		}
	}
	// $ANTLR end synpred22_cs

	partial void EnterRule_synpred23_cs_fragment();
	partial void LeaveRule_synpred23_cs_fragment();

	// $ANTLR start synpred23_cs
	public void synpred23_cs_fragment()
	{
		EnterRule_synpred23_cs_fragment();
		EnterRule("synpred23_cs_fragment", 340);
		var retval = new XAstParserRuleReturnScope("synpred23_cs_fragment");
		try
		{
			// cs.g:471:50: ( 'into' )
			DebugEnterAlt(1);
			// cs.g:471:51: 'into'
			{
			DebugLocation(471, 51);
			Match(input,141,Follow._141_in_synpred23_cs3551); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred23_cs_fragment", 340);
			LeaveRule("synpred23_cs_fragment", 340);
			LeaveRule_synpred23_cs_fragment();
		}
	}
	// $ANTLR end synpred23_cs

	partial void EnterRule_synpred24_cs_fragment();
	partial void LeaveRule_synpred24_cs_fragment();

	// $ANTLR start synpred24_cs
	public void synpred24_cs_fragment()
	{
		EnterRule_synpred24_cs_fragment();
		EnterRule("synpred24_cs_fragment", 341);
		var retval = new XAstParserRuleReturnScope("synpred24_cs_fragment");
		try
		{
			// cs.g:538:32: ( ',' identifier '=' )
			DebugEnterAlt(1);
			// cs.g:538:33: ',' identifier '='
			{
			DebugLocation(538, 33);
			Match(input,74,Follow._74_in_synpred24_cs4107); if (state.failed) return;
			DebugLocation(538, 39);
			PushFollow(Follow._identifier_in_synpred24_cs4111);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(538, 52);
			Match(input,85,Follow._85_in_synpred24_cs4115); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred24_cs_fragment", 341);
			LeaveRule("synpred24_cs_fragment", 341);
			LeaveRule_synpred24_cs_fragment();
		}
	}
	// $ANTLR end synpred24_cs

	partial void EnterRule_synpred25_cs_fragment();
	partial void LeaveRule_synpred25_cs_fragment();

	// $ANTLR start synpred25_cs
	public void synpred25_cs_fragment()
	{
		EnterRule_synpred25_cs_fragment();
		EnterRule("synpred25_cs_fragment", 342);
		var retval = new XAstParserRuleReturnScope("synpred25_cs_fragment");
		try
		{
			// cs.g:619:4: ( member_name '{' )
			DebugEnterAlt(1);
			// cs.g:619:5: member_name '{'
			{
			DebugLocation(619, 5);
			PushFollow(Follow._member_name_in_synpred25_cs4689);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(619, 19);
			Match(input,197,Follow._197_in_synpred25_cs4693); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred25_cs_fragment", 342);
			LeaveRule("synpred25_cs_fragment", 342);
			LeaveRule_synpred25_cs_fragment();
		}
	}
	// $ANTLR end synpred25_cs

	partial void EnterRule_synpred26_cs_fragment();
	partial void LeaveRule_synpred26_cs_fragment();

	// $ANTLR start synpred26_cs
	public void synpred26_cs_fragment()
	{
		EnterRule_synpred26_cs_fragment();
		EnterRule("synpred26_cs_fragment", 343);
		var retval = new XAstParserRuleReturnScope("synpred26_cs_fragment");
		try
		{
			// cs.g:726:14: ( member_name '(' )
			DebugEnterAlt(1);
			// cs.g:726:15: member_name '('
			{
			DebugLocation(726, 15);
			PushFollow(Follow._member_name_in_synpred26_cs5628);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(726, 29);
			Match(input,68,Follow._68_in_synpred26_cs5632); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred26_cs_fragment", 343);
			LeaveRule("synpred26_cs_fragment", 343);
			LeaveRule_synpred26_cs_fragment();
		}
	}
	// $ANTLR end synpred26_cs

	partial void EnterRule_synpred27_cs_fragment();
	partial void LeaveRule_synpred27_cs_fragment();

	// $ANTLR start synpred27_cs
	public void synpred27_cs_fragment()
	{
		EnterRule_synpred27_cs_fragment();
		EnterRule("synpred27_cs_fragment", 344);
		var retval = new XAstParserRuleReturnScope("synpred27_cs_fragment");
		try
		{
			// cs.g:727:14: ( member_name '{' )
			DebugEnterAlt(1);
			// cs.g:727:15: member_name '{'
			{
			DebugLocation(727, 15);
			PushFollow(Follow._member_name_in_synpred27_cs5653);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(727, 29);
			Match(input,197,Follow._197_in_synpred27_cs5657); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_cs_fragment", 344);
			LeaveRule("synpred27_cs_fragment", 344);
			LeaveRule_synpred27_cs_fragment();
		}
	}
	// $ANTLR end synpred27_cs

	partial void EnterRule_synpred28_cs_fragment();
	partial void LeaveRule_synpred28_cs_fragment();

	// $ANTLR start synpred28_cs
	public void synpred28_cs_fragment()
	{
		EnterRule_synpred28_cs_fragment();
		EnterRule("synpred28_cs_fragment", 345);
		var retval = new XAstParserRuleReturnScope("synpred28_cs_fragment");
		try
		{
			// cs.g:778:11: ( member_name '(' )
			DebugEnterAlt(1);
			// cs.g:778:12: member_name '('
			{
			DebugLocation(778, 12);
			PushFollow(Follow._member_name_in_synpred28_cs6131);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(778, 26);
			Match(input,68,Follow._68_in_synpred28_cs6135); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred28_cs_fragment", 345);
			LeaveRule("synpred28_cs_fragment", 345);
			LeaveRule_synpred28_cs_fragment();
		}
	}
	// $ANTLR end synpred28_cs

	partial void EnterRule_synpred29_cs_fragment();
	partial void LeaveRule_synpred29_cs_fragment();

	// $ANTLR start synpred29_cs
	public void synpred29_cs_fragment()
	{
		EnterRule_synpred29_cs_fragment();
		EnterRule("synpred29_cs_fragment", 346);
		var retval = new XAstParserRuleReturnScope("synpred29_cs_fragment");
		try
		{
			// cs.g:779:8: ( member_name '{' )
			DebugEnterAlt(1);
			// cs.g:779:9: member_name '{'
			{
			DebugLocation(779, 9);
			PushFollow(Follow._member_name_in_synpred29_cs6150);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(779, 23);
			Match(input,197,Follow._197_in_synpred29_cs6154); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred29_cs_fragment", 346);
			LeaveRule("synpred29_cs_fragment", 346);
			LeaveRule_synpred29_cs_fragment();
		}
	}
	// $ANTLR end synpred29_cs

	partial void EnterRule_synpred30_cs_fragment();
	partial void LeaveRule_synpred30_cs_fragment();

	// $ANTLR start synpred30_cs
	public void synpred30_cs_fragment()
	{
		EnterRule_synpred30_cs_fragment();
		EnterRule("synpred30_cs_fragment", 347);
		var retval = new XAstParserRuleReturnScope("synpred30_cs_fragment");
		try
		{
			// cs.g:780:8: ( member_name '.' 'this' )
			DebugEnterAlt(1);
			// cs.g:780:9: member_name '.' 'this'
			{
			DebugLocation(780, 9);
			PushFollow(Follow._member_name_in_synpred30_cs6169);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(780, 23);
			new XToken((IToken)Match(input,DOT,Follow._DOT_in_synpred30_cs6173), "DOT"); if (state.failed) return;
			DebugLocation(780, 29);
			Match(input,180,Follow._180_in_synpred30_cs6177); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred30_cs_fragment", 347);
			LeaveRule("synpred30_cs_fragment", 347);
			LeaveRule_synpred30_cs_fragment();
		}
	}
	// $ANTLR end synpred30_cs

	partial void EnterRule_synpred31_cs_fragment();
	partial void LeaveRule_synpred31_cs_fragment();

	// $ANTLR start synpred31_cs
	public void synpred31_cs_fragment()
	{
		EnterRule_synpred31_cs_fragment();
		EnterRule("synpred31_cs_fragment", 348);
		var retval = new XAstParserRuleReturnScope("synpred31_cs_fragment");
		try
		{
			// cs.g:852:23: ( arguments ( '[' | '.' | '->' ) )
			DebugEnterAlt(1);
			// cs.g:852:24: arguments ( '[' | '.' | '->' )
			{
			DebugLocation(852, 24);
			PushFollow(Follow._arguments_in_synpred31_cs6778);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(852, 36);
			if (input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred31_cs_fragment", 348);
			LeaveRule("synpred31_cs_fragment", 348);
			LeaveRule_synpred31_cs_fragment();
		}
	}
	// $ANTLR end synpred31_cs

	partial void EnterRule_synpred32_cs_fragment();
	partial void LeaveRule_synpred32_cs_fragment();

	// $ANTLR start synpred32_cs
	public void synpred32_cs_fragment()
	{
		EnterRule_synpred32_cs_fragment();
		EnterRule("synpred32_cs_fragment", 349);
		var retval = new XAstParserRuleReturnScope("synpred32_cs_fragment");
		try
		{
			// cs.g:856:4: ( identifier generic_argument_list )
			DebugEnterAlt(1);
			// cs.g:856:5: identifier generic_argument_list
			{
			DebugLocation(856, 5);
			PushFollow(Follow._identifier_in_synpred32_cs6831);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(856, 19);
			PushFollow(Follow._generic_argument_list_in_synpred32_cs6836);
			generic_argument_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred32_cs_fragment", 349);
			LeaveRule("synpred32_cs_fragment", 349);
			LeaveRule_synpred32_cs_fragment();
		}
	}
	// $ANTLR end synpred32_cs

	partial void EnterRule_synpred33_cs_fragment();
	partial void LeaveRule_synpred33_cs_fragment();

	// $ANTLR start synpred33_cs
	public void synpred33_cs_fragment()
	{
		EnterRule_synpred33_cs_fragment();
		EnterRule("synpred33_cs_fragment", 350);
		var retval = new XAstParserRuleReturnScope("synpred33_cs_fragment");
		try
		{
			// cs.g:869:2: ( declaration_statement )
			DebugEnterAlt(1);
			// cs.g:869:3: declaration_statement
			{
			DebugLocation(869, 3);
			PushFollow(Follow._declaration_statement_in_synpred33_cs6921);
			declaration_statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred33_cs_fragment", 350);
			LeaveRule("synpred33_cs_fragment", 350);
			LeaveRule_synpred33_cs_fragment();
		}
	}
	// $ANTLR end synpred33_cs

	partial void EnterRule_synpred34_cs_fragment();
	partial void LeaveRule_synpred34_cs_fragment();

	// $ANTLR start synpred34_cs
	public void synpred34_cs_fragment()
	{
		EnterRule_synpred34_cs_fragment();
		EnterRule("synpred34_cs_fragment", 351);
		var retval = new XAstParserRuleReturnScope("synpred34_cs_fragment");
		try
		{
			// cs.g:870:4: ( identifier ':' )
			DebugEnterAlt(1);
			// cs.g:870:5: identifier ':'
			{
			DebugLocation(870, 5);
			PushFollow(Follow._identifier_in_synpred34_cs6932);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(870, 18);
			Match(input,79,Follow._79_in_synpred34_cs6936); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred34_cs_fragment", 351);
			LeaveRule("synpred34_cs_fragment", 351);
			LeaveRule_synpred34_cs_fragment();
		}
	}
	// $ANTLR end synpred34_cs

	partial void EnterRule_synpred35_cs_fragment();
	partial void LeaveRule_synpred35_cs_fragment();

	// $ANTLR start synpred35_cs
	public void synpred35_cs_fragment()
	{
		EnterRule_synpred35_cs_fragment();
		EnterRule("synpred35_cs_fragment", 352);
		var retval = new XAstParserRuleReturnScope("synpred35_cs_fragment");
		try
		{
			// cs.g:907:2: ( 'var' )
			DebugEnterAlt(1);
			// cs.g:907:3: 'var'
			{
			DebugLocation(907, 3);
			Match(input,190,Follow._190_in_synpred35_cs7180); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred35_cs_fragment", 352);
			LeaveRule("synpred35_cs_fragment", 352);
			LeaveRule_synpred35_cs_fragment();
		}
	}
	// $ANTLR end synpred35_cs

	partial void EnterRule_synpred36_cs_fragment();
	partial void LeaveRule_synpred36_cs_fragment();

	// $ANTLR start synpred36_cs
	public void synpred36_cs_fragment()
	{
		EnterRule_synpred36_cs_fragment();
		EnterRule("synpred36_cs_fragment", 353);
		var retval = new XAstParserRuleReturnScope("synpred36_cs_fragment");
		try
		{
			// cs.g:908:4: ( 'dynamic' )
			DebugEnterAlt(1);
			// cs.g:908:5: 'dynamic'
			{
			DebugLocation(908, 5);
			Match(input,120,Follow._120_in_synpred36_cs7191); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred36_cs_fragment", 353);
			LeaveRule("synpred36_cs_fragment", 353);
			LeaveRule_synpred36_cs_fragment();
		}
	}
	// $ANTLR end synpred36_cs

	partial void EnterRule_synpred37_cs_fragment();
	partial void LeaveRule_synpred37_cs_fragment();

	// $ANTLR start synpred37_cs
	public void synpred37_cs_fragment()
	{
		EnterRule_synpred37_cs_fragment();
		EnterRule("synpred37_cs_fragment", 354);
		var retval = new XAstParserRuleReturnScope("synpred37_cs_fragment");
		try
		{
			// cs.g:934:62: ( 'else' )
			DebugEnterAlt(1);
			// cs.g:934:63: 'else'
			{
			DebugLocation(934, 63);
			Match(input,121,Follow._121_in_synpred37_cs7376); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_cs_fragment", 354);
			LeaveRule("synpred37_cs_fragment", 354);
			LeaveRule_synpred37_cs_fragment();
		}
	}
	// $ANTLR end synpred37_cs

	partial void EnterRule_synpred38_cs_fragment();
	partial void LeaveRule_synpred38_cs_fragment();

	// $ANTLR start synpred38_cs
	public void synpred38_cs_fragment()
	{
		EnterRule_synpred38_cs_fragment();
		EnterRule("synpred38_cs_fragment", 355);
		var retval = new XAstParserRuleReturnScope("synpred38_cs_fragment");
		try
		{
			// cs.g:963:2: ( local_variable_declaration )
			DebugEnterAlt(1);
			// cs.g:963:3: local_variable_declaration
			{
			DebugLocation(963, 3);
			PushFollow(Follow._local_variable_declaration_in_synpred38_cs7651);
			local_variable_declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred38_cs_fragment", 355);
			LeaveRule("synpred38_cs_fragment", 355);
			LeaveRule_synpred38_cs_fragment();
		}
	}
	// $ANTLR end synpred38_cs

	partial void EnterRule_synpred39_cs_fragment();
	partial void LeaveRule_synpred39_cs_fragment();

	// $ANTLR start synpred39_cs
	public void synpred39_cs_fragment()
	{
		EnterRule_synpred39_cs_fragment();
		EnterRule("synpred39_cs_fragment", 356);
		var retval = new XAstParserRuleReturnScope("synpred39_cs_fragment");
		try
		{
			// cs.g:1015:2: ( local_variable_declaration )
			DebugEnterAlt(1);
			// cs.g:1015:3: local_variable_declaration
			{
			DebugLocation(1015, 3);
			PushFollow(Follow._local_variable_declaration_in_synpred39_cs8106);
			local_variable_declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred39_cs_fragment", 356);
			LeaveRule("synpred39_cs_fragment", 356);
			LeaveRule_synpred39_cs_fragment();
		}
	}
	// $ANTLR end synpred39_cs
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA50 dfa50;
	private DFA71 dfa71;
	private DFA72 dfa72;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa50 = new DFA50( this );
		dfa71 = new DFA71( this, SpecialStateTransition71 );
		dfa72 = new DFA72( this, SpecialStateTransition72 );
	}

	private class DFA50 : DFA
	{
		private const string DFA50_eotS =
			"\x5\xFFFF";
		private const string DFA50_eofS =
			"\x1\x2\x3\xFFFF\x1\x2";
		private const string DFA50_minS =
			"\x1\x7\x1\x5\x2\xFFFF\x1\x7";
		private const string DFA50_maxS =
			"\x1\xC9\x1\xCA\x2\xFFFF\x1\xC9";
		private const string DFA50_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA50_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA50_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\x5"+
				"\xFFFF\x1\x2\x6\xFFFF\x1\x2\xA\xFFFF\x1\x3\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x4\xFFFF\x1\x2\x6\xFFFF\x6\x2\x1\x3\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x6\x2\x1\xFFFF\x3\x2\x1\x1\x4\x2\x1\xFFFF\x5\x2\x3\xFFFF"+
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5"+
				"\xFFFF\x2\x2\x1\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF"+
				"\x1\x2\x3\xFFFF\x2\x2\xA\xFFFF\x1\x2\x6\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1"+
				"\xFFFF\x6\x2",
				"\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x5\xFFFF\x2\x3\x6\xFFFF\x3\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1"+
				"\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x2\x1\x3\x10\xFFFF\x1\x4\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x4\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2"+
				"\x3\x3\xFFFF\x4\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1"+
				"\xFFFF\x2\x3\x1\xFFFF\x3\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x4\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x2\x3\x3"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				"",
				"\x1\x2\x2\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2\x6\xFFFF\x1\x2\xA\xFFFF\x1\x3\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2\x6\xFFFF\x6\x2\x1\x3\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x6\x2\x1\xFFFF\x3\x2\x1\x1\x4\x2\x1\xFFFF\x5\x2\x3\xFFFF"+
				"\x1\x2\xB\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5"+
				"\xFFFF\x2\x2\x1\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF"+
				"\x1\x2\x3\xFFFF\x2\x2\xA\xFFFF\x1\x2\x6\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1"+
				"\xFFFF\x6\x2"
			};

		private static readonly short[] DFA50_eot = DFA.UnpackEncodedString(DFA50_eotS);
		private static readonly short[] DFA50_eof = DFA.UnpackEncodedString(DFA50_eofS);
		private static readonly char[] DFA50_min = DFA.UnpackEncodedStringToUnsignedChars(DFA50_minS);
		private static readonly char[] DFA50_max = DFA.UnpackEncodedStringToUnsignedChars(DFA50_maxS);
		private static readonly short[] DFA50_accept = DFA.UnpackEncodedString(DFA50_acceptS);
		private static readonly short[] DFA50_special = DFA.UnpackEncodedString(DFA50_specialS);
		private static readonly short[][] DFA50_transition;

		static DFA50()
		{
			int numStates = DFA50_transitionS.Length;
			DFA50_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA50_transition[i] = DFA.UnpackEncodedString(DFA50_transitionS[i]);
			}
		}

		public DFA50( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 50;
			this.eot = DFA50_eot;
			this.eof = DFA50_eof;
			this.min = DFA50_min;
			this.max = DFA50_max;
			this.accept = DFA50_accept;
			this.special = DFA50_special;
			this.transition = DFA50_transition;
		}

		public override string Description { get { return "203:6: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\x11\xFFFF";
		private const string DFA71_eofS =
			"\x11\xFFFF";
		private const string DFA71_minS =
			"\x1\x7\x2\xA\x1\xFFFF\x1\x2F\x3\x7\x1\xFFFF\x2\xA\x2\xFFFF\x2\xA\x2\x7";
		private const string DFA71_maxS =
			"\x1\xC4\x2\x5B\x1\xFFFF\x1\x45\x3\xC4\x1\xFFFF\x2\x5B\x2\xFFFF\x2\x5B"+
			"\x2\xC4";
		private const string DFA71_acceptS =
			"\x3\xFFFF\x1\x2\x4\xFFFF\x1\x3\x2\xFFFF\x2\x1\x4\xFFFF";
		private const string DFA71_specialS =
			"\x6\xFFFF\x1\x2\x8\xFFFF\x1\x1\x1\x0}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x1\x2\xB\xFFFF\x1\x1\x1B\xFFFF\x1\x2"+
				"\x27\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x2\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x3\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x3\x2\xFFFF\x2\x2"+
				"\x1\xFFFF\x1\x2\x2\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x3\x2\x2\x2\xFFFF\x1\x3\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF\x2\x2\x1"+
				"\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x2\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\x2"+
				"\x1\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x7\x24\xFFFF\x1\x3\x15\xFFFF\x1\x3\xA\xFFFF\x1\x5\x1\x6\x7\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3",
				"\x1\x7\x24\xFFFF\x1\x3\x15\xFFFF\x1\x3\xA\xFFFF\x1\x5\x1\x6\x7\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3",
				"",
				"\x1\x8\x15\xFFFF\x1\x3",
				"\x1\xA\x5\xFFFF\x1\xA\x1\xFFFF\x1\xA\xB\xFFFF\x1\x9\x1B\xFFFF\x1\xA"+
				"\x27\xFFFF\x1\xA\x1\xFFFF\x2\xA\x1\xFFFF\x2\xA\x3\xFFFF\x1\xA\xB\xFFFF"+
				"\x1\xA\x2\xFFFF\x1\xA\x1\xFFFF\x1\xA\x3\xFFFF\x1\xA\x5\xFFFF\x2\xA\x1"+
				"\xFFFF\x1\xA\x5\xFFFF\x1\xA\x1\xFFFF\x2\xA\x2\xFFFF\x2\xA\x3\xFFFF\x1"+
				"\xA\x1\xFFFF\x1\xA\x2\xFFFF\x1\xA\x2\xFFFF\x1\xA\x1\xFFFF\x1\xA\x4\xFFFF"+
				"\x1\xA\x3\xFFFF\x2\xA\xA\xFFFF\x1\xA\x6\xFFFF\x1\xA\x3\xFFFF\x1\xA\x1"+
				"\xFFFF\x1\xA",
				"\x1\x3\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\xC\x5\xFFFF\x1\x3"+
				"\x1B\xFFFF\x1\x3\x12\xFFFF\x1\xB\x14\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x2\x3\x1\xFFFF\x3\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3"+
				"\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x1\xE\x5\xFFFF\x1\xE\x1\xFFFF\x1\xE\xB\xFFFF\x1\xD\x1B\xFFFF\x1\xE"+
				"\x27\xFFFF\x1\xE\x1\xFFFF\x2\xE\x1\xFFFF\x2\xE\x3\xFFFF\x1\xE\xB\xFFFF"+
				"\x1\xE\x2\xFFFF\x1\xE\x1\xFFFF\x1\xE\x3\xFFFF\x1\xE\x5\xFFFF\x2\xE\x1"+
				"\xFFFF\x1\xE\x5\xFFFF\x1\xE\x1\xFFFF\x2\xE\x2\xFFFF\x2\xE\x3\xFFFF\x1"+
				"\xE\x1\xFFFF\x1\xE\x2\xFFFF\x1\xE\x2\xFFFF\x1\xE\x1\xFFFF\x1\xE\x4\xFFFF"+
				"\x1\xE\x3\xFFFF\x2\xE\xA\xFFFF\x1\xE\x6\xFFFF\x1\xE\x3\xFFFF\x1\xE\x1"+
				"\xFFFF\x1\xE",
				"",
				"\x1\x7\x24\xFFFF\x1\x3\x15\xFFFF\x1\x3\xB\xFFFF\x1\xF\x7\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3",
				"\x1\x7\x24\xFFFF\x1\x3\x15\xFFFF\x1\x3\xB\xFFFF\x1\xF\x7\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3",
				"",
				"",
				"\x1\x7\x24\xFFFF\x1\x3\x15\xFFFF\x1\x3\xB\xFFFF\x1\x10\x7\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3",
				"\x1\x7\x24\xFFFF\x1\x3\x15\xFFFF\x1\x3\xB\xFFFF\x1\x10\x7\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3",
				"\x1\x3\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\xC\x5\xFFFF\x1\x3"+
				"\x1B\xFFFF\x1\x3\x12\xFFFF\x1\xB\x14\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x2\x3\x1\xFFFF\x3\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3"+
				"\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"\x1\x3\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\xC\x5\xFFFF\x1\x3"+
				"\x1B\xFFFF\x1\x3\x12\xFFFF\x1\xB\x14\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x2\x3\x1\xFFFF\x3\x3\x2\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3"+
				"\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3"
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "276:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition71(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA71_16 = input.LA(1);


				int index71_16 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA71_16==74) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 11;}

				else if ((LA71_16==GT) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 12;}

				else if ((LA71_16==DEFINE||LA71_16==ELIF||LA71_16==ENDIF||LA71_16==IDENTIFIER||LA71_16==UNDEF||LA71_16==95||(LA71_16>=97 && LA71_16<=98)||(LA71_16>=100 && LA71_16<=101)||LA71_16==103||(LA71_16>=105 && LA71_16<=106)||LA71_16==109||LA71_16==114||LA71_16==117||(LA71_16>=119 && LA71_16<=120)||LA71_16==122||LA71_16==126||LA71_16==129||(LA71_16>=132 && LA71_16<=133)||LA71_16==135||LA71_16==138||LA71_16==141||(LA71_16>=143 && LA71_16<=144)||(LA71_16>=146 && LA71_16<=148)||(LA71_16>=151 && LA71_16<=152)||LA71_16==154||LA71_16==157||LA71_16==160||LA71_16==162||LA71_16==167||LA71_16==169||(LA71_16>=171 && LA71_16<=173)||LA71_16==177||LA71_16==183||(LA71_16>=185 && LA71_16<=186)||(LA71_16>=189 && LA71_16<=190)||LA71_16==192||LA71_16==194||LA71_16==196)) {s = 3;}


				input.Seek(index71_16);
				if (s >= 0) return s;
				break;

			case 1:
				int LA71_15 = input.LA(1);


				int index71_15 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA71_15==74) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 11;}

				else if ((LA71_15==GT) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 12;}

				else if ((LA71_15==DEFINE||LA71_15==ELIF||LA71_15==ENDIF||LA71_15==IDENTIFIER||LA71_15==UNDEF||LA71_15==95||(LA71_15>=97 && LA71_15<=98)||(LA71_15>=100 && LA71_15<=101)||LA71_15==103||(LA71_15>=105 && LA71_15<=106)||LA71_15==109||LA71_15==114||LA71_15==117||(LA71_15>=119 && LA71_15<=120)||LA71_15==122||LA71_15==126||LA71_15==129||(LA71_15>=132 && LA71_15<=133)||LA71_15==135||LA71_15==138||LA71_15==141||(LA71_15>=143 && LA71_15<=144)||(LA71_15>=146 && LA71_15<=148)||(LA71_15>=151 && LA71_15<=152)||LA71_15==154||LA71_15==157||LA71_15==160||LA71_15==162||LA71_15==167||LA71_15==169||(LA71_15>=171 && LA71_15<=173)||LA71_15==177||LA71_15==183||(LA71_15>=185 && LA71_15<=186)||(LA71_15>=189 && LA71_15<=190)||LA71_15==192||LA71_15==194||LA71_15==196)) {s = 3;}


				input.Seek(index71_15);
				if (s >= 0) return s;
				break;

			case 2:
				int LA71_6 = input.LA(1);


				int index71_6 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA71_6==74) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 11;}

				else if ((LA71_6==GT) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 12;}

				else if ((LA71_6==DEFINE||LA71_6==ELIF||LA71_6==ENDIF||LA71_6==IDENTIFIER||LA71_6==UNDEF||LA71_6==95||(LA71_6>=97 && LA71_6<=98)||(LA71_6>=100 && LA71_6<=101)||LA71_6==103||(LA71_6>=105 && LA71_6<=106)||LA71_6==109||LA71_6==114||LA71_6==117||(LA71_6>=119 && LA71_6<=120)||LA71_6==122||LA71_6==126||LA71_6==129||(LA71_6>=132 && LA71_6<=133)||LA71_6==135||LA71_6==138||LA71_6==141||(LA71_6>=143 && LA71_6<=144)||(LA71_6>=146 && LA71_6<=148)||(LA71_6>=151 && LA71_6<=152)||LA71_6==154||LA71_6==157||LA71_6==160||LA71_6==162||LA71_6==167||LA71_6==169||(LA71_6>=171 && LA71_6<=173)||LA71_6==177||LA71_6==183||(LA71_6>=185 && LA71_6<=186)||(LA71_6>=189 && LA71_6<=190)||LA71_6==192||LA71_6==194||LA71_6==196)) {s = 3;}


				input.Seek(index71_6);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 71, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA72 : DFA
	{
		private const string DFA72_eotS =
			"\x7\xFFFF";
		private const string DFA72_eofS =
			"\x4\xFFFF\x1\x5\x2\xFFFF";
		private const string DFA72_minS =
			"\x1\xA\x1\x15\x1\xFFFF\x1\x15\x1\xA\x2\xFFFF";
		private const string DFA72_maxS =
			"\x1\x51\x1\x4A\x1\xFFFF\x1\x4A\x1\x2F\x2\xFFFF";
		private const string DFA72_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x3\x1\x1";
		private const string DFA72_specialS =
			"\x4\xFFFF\x1\x0\x2\xFFFF}>";
		private static readonly string[] DFA72_transitionS =
			{
				"\x1\x2\x46\xFFFF\x1\x1",
				"\x1\x4\x34\xFFFF\x1\x3",
				"",
				"\x1\x4\x34\xFFFF\x1\x3",
				"\x1\x6\x24\xFFFF\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA72_eot = DFA.UnpackEncodedString(DFA72_eotS);
		private static readonly short[] DFA72_eof = DFA.UnpackEncodedString(DFA72_eofS);
		private static readonly char[] DFA72_min = DFA.UnpackEncodedStringToUnsignedChars(DFA72_minS);
		private static readonly char[] DFA72_max = DFA.UnpackEncodedStringToUnsignedChars(DFA72_maxS);
		private static readonly short[] DFA72_accept = DFA.UnpackEncodedString(DFA72_acceptS);
		private static readonly short[] DFA72_special = DFA.UnpackEncodedString(DFA72_specialS);
		private static readonly short[][] DFA72_transition;

		static DFA72()
		{
			int numStates = DFA72_transitionS.Length;
			DFA72_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA72_transition[i] = DFA.UnpackEncodedString(DFA72_transitionS[i]);
			}
		}

		public DFA72( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 72;
			this.eot = DFA72_eot;
			this.eof = DFA72_eof;
			this.min = DFA72_min;
			this.max = DFA72_max;
			this.accept = DFA72_accept;
			this.special = DFA72_special;
			this.transition = DFA72_transition;
		}

		public override string Description { get { return "()* loopback of 286:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition72(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA72_4 = input.LA(1);


				int index72_4 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA72_4==EOF||LA72_4==RPAREN)) {s = 5;}

				else if ((LA72_4==DOT) && (EvaluatePredicate(synpred14_cs_fragment))) {s = 6;}


				input.Seek(index72_4);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 72, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _namespace_body_in_compilation_unit72 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_namespace_declaration83 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _qualified_identifier_in_namespace_declaration87 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _namespace_block_in_namespace_declaration91 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_namespace_declaration95 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_namespace_block106 = new BitSet(new ulong[]{0x200000000020000UL,0x2010800108000000UL,0x9005043A90601800UL,0x202UL});
		public static readonly BitSet _namespace_body_in_namespace_block110 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_namespace_block115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _extern_alias_directives_in_namespace_body124 = new BitSet(new ulong[]{0x200000000020002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _using_directives_in_namespace_body129 = new BitSet(new ulong[]{0x20002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _global_attributes_in_namespace_body134 = new BitSet(new ulong[]{0x20002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _namespace_member_declarations_in_namespace_body139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _extern_alias_directive_in_extern_alias_directives150 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_extern_alias_directive161 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_extern_alias_directive165 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_extern_alias_directive169 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_extern_alias_directive172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_directive_in_using_directives182 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _using_alias_directive_in_using_directive194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_namespace_directive_in_using_directive199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_alias_directive210 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_using_alias_directive214 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_using_alias_directive218 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _namespace_or_type_name_in_using_alias_directive222 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_using_alias_directive226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_namespace_directive236 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _namespace_name_in_using_namespace_directive240 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_using_namespace_directive244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_member_declaration_in_namespace_member_declarations254 = new BitSet(new ulong[]{0x20002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _namespace_declaration_in_namespace_member_declaration265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributes_in_namespace_member_declaration270 = new BitSet(new ulong[]{0x20000UL,0x2010800100000000UL,0x9005043A90401800UL,0x2UL});
		public static readonly BitSet _modifiers_in_namespace_member_declaration275 = new BitSet(new ulong[]{0x20000UL,0x10800000000000UL,0x4000080000800UL});
		public static readonly BitSet _type_declaration_in_namespace_member_declaration280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_type_declaration296 = new BitSet(new ulong[]{0x0UL,0x800000000000UL,0x4000000000800UL});
		public static readonly BitSet _class_declaration_in_type_declaration301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_type_declaration313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_type_declaration325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_type_declaration331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_type_declaration336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_type_declaration341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_declaration_in_type_declaration346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_declaration_in_type_declaration351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qualified_identifier362 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _DOT_in_qualified_identifier365 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_qualified_identifier367 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _namespace_or_type_name_in_namespace_name378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_modifiers389 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _attributes_in_class_member_declaration465 = new BitSet(new ulong[]{0x8000000802A080UL,0x7DB5A6B780000000UL,0xF6873EBFB5DDBDB2UL,0x417UL});
		public static readonly BitSet _modifiers_in_class_member_declaration471 = new BitSet(new ulong[]{0x8000000802A080UL,0x5DB5A6B680000000UL,0x66863A85A59DADB2UL,0x415UL});
		public static readonly BitSet _112_in_class_member_declaration477 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_class_member_declaration481 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_class_member_declaration485 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_class_member_declaration489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _event_declaration_in_class_member_declaration494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_class_member_declaration501 = new BitSet(new ulong[]{0x0UL,0x800000000000UL,0x4000000000800UL,0x1UL});
		public static readonly BitSet _192_in_class_member_declaration504 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x14UL});
		public static readonly BitSet _method_declaration_in_class_member_declaration506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_class_member_declaration517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_class_member_declaration528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_class_member_declaration539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_class_member_declaration545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_class_member_declaration551 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x14UL});
		public static readonly BitSet _method_declaration_in_class_member_declaration555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_class_member_declaration560 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66923A85279DA4B2UL,0x14UL});
		public static readonly BitSet _method_declaration_in_class_member_declaration574 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_declaration_in_class_member_declaration593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_class_member_declaration616 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_class_member_declaration618 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _indexer_declaration_in_class_member_declaration620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_declaration_in_class_member_declaration629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _field_declaration_in_class_member_declaration642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operator_declaration_in_class_member_declaration660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_class_member_declaration678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_class_member_declaration685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_declaration_in_class_member_declaration691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_declaration_in_class_member_declaration698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_operator_declaration_in_class_member_declaration704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_declaration_in_class_member_declaration709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _destructor_declaration_in_class_member_declaration715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_primary_expression743 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_primary_expression747 = new BitSet(new ulong[]{0x200000000402UL,0x8000910UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression751 = new BitSet(new ulong[]{0x200000000402UL,0x8000910UL});
		public static readonly BitSet _102_in_primary_expression767 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_primary_expression771 = new BitSet(new ulong[]{0x200000000402UL,0x8000910UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression775 = new BitSet(new ulong[]{0x200000000402UL,0x8000910UL});
		public static readonly BitSet _primary_expression_start_in_primary_expression781 = new BitSet(new ulong[]{0x200000000402UL,0x8000910UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression785 = new BitSet(new ulong[]{0x200000000402UL,0x8000910UL});
		public static readonly BitSet _150_in_primary_expression791 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x35UL});
		public static readonly BitSet _object_creation_expression_in_primary_expression819 = new BitSet(new ulong[]{0x200000000400UL,0x8000910UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression823 = new BitSet(new ulong[]{0x200000000402UL,0x8000910UL});
		public static readonly BitSet _delegate_creation_expression_in_primary_expression851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_creation_expression_in_primary_expression859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_object_creation_expression_in_primary_expression867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sizeof_expression_in_primary_expression880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _checked_expression_in_primary_expression891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unchecked_expression_in_primary_expression910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _default_value_expression_in_primary_expression927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_method_expression_in_primary_expression940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_primary_expression_start955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_primary_expression_start983 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_primary_expression_start987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_primary_expression_start992 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_primary_expression_start995 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_primary_expression_start999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_primary_expression_start1006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_primary_expression_start1012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _paren_expression_in_primary_expression_start1017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeof_expression_in_primary_expression_start1022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primary_expression_start1040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_identifier_in_primary_expression_part1053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brackets_or_arguments_in_primary_expression_part1058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_primary_expression_part1064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_primary_expression_part1069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_operator_in_access_identifier1079 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_access_identifier1083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brackets_in_brackets_or_arguments1109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_brackets_or_arguments1113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_brackets1123 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6900009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_list_in_brackets1127 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_brackets1132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_paren_expression1144 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_paren_expression1148 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_paren_expression1152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_arguments1163 = new BitSet(new ulong[]{0x24A9801C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA4B2UL,0x414UL});
		public static readonly BitSet _argument_list_in_arguments1167 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_arguments1172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argument_in_argument_list1183 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_argument_list1186 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA4B2UL,0x414UL});
		public static readonly BitSet _argument_in_argument_list1188 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _argument_name_in_argument1200 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA4B2UL,0x414UL});
		public static readonly BitSet _argument_value_in_argument1204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argument_value_in_argument1209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_argument_name1218 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_argument_name1222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_argument_value1232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ref_variable_reference_in_argument_value1238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_argument_value1244 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _variable_reference_in_argument_value1248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_ref_variable_reference1258 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _68_in_ref_variable_reference1280 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_ref_variable_reference1284 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_ref_variable_reference1288 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927AC525DDA4B2UL,0x414UL});
		public static readonly BitSet _ref_variable_reference_in_ref_variable_reference1293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_reference_in_ref_variable_reference1297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_reference_in_ref_variable_reference1333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variable_reference1345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rank_specifier_in_rank_specifiers1355 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_rank_specifier1375 = new BitSet(new ulong[]{0x0UL,0x10000400UL});
		public static readonly BitSet _dim_separators_in_rank_specifier1379 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_rank_specifier1384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_dim_separators1395 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_delegate_creation_expression1410 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_delegate_creation_expression1414 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _type_name_in_delegate_creation_expression1418 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_delegate_creation_expression1422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_object_initializer_in_anonymous_object_creation_expression1435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_anonymous_object_initializer1446 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x214UL});
		public static readonly BitSet _member_declarator_list_in_anonymous_object_initializer1451 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_anonymous_object_initializer1455 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_anonymous_object_initializer1462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_declarator_in_member_declarator_list1472 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_member_declarator_list1476 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x14UL});
		public static readonly BitSet _member_declarator_in_member_declarator_list1478 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _qid_in_member_declarator1492 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_member_declarator1497 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_member_declarator1501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_creation_expression_in_primary_or_array_creation_expression1519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expression_in_primary_or_array_creation_expression1524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_array_creation_expression1537 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B688000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_array_creation_expression1545 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x0UL,0x20UL});
		public static readonly BitSet _91_in_array_creation_expression1550 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_list_in_array_creation_expression1554 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_array_creation_expression1558 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL,0x0UL,0x20UL});
		public static readonly BitSet _rank_specifiers_in_array_creation_expression1570 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression1575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_array_creation_expression1611 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _invocation_part_in_array_creation_expression1615 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _invocation_part_in_array_creation_expression1627 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _arguments_in_array_creation_expression1633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression1655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rank_specifier_in_array_creation_expression1669 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression1678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_array_initializer1701 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F680000DB4UL,0x6F927A8525DDA4B2UL,0x634UL});
		public static readonly BitSet _variable_initializer_list_in_array_initializer1705 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_array_initializer1710 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_array_initializer1715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_initializer_in_variable_initializer_list1725 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_variable_initializer_list1728 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x434UL});
		public static readonly BitSet _variable_initializer_in_variable_initializer_list1730 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _expression_in_variable_initializer1742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_initializer_in_variable_initializer1746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_sizeof_expression1756 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_sizeof_expression1760 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _unmanaged_type_in_sizeof_expression1764 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_sizeof_expression1768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_checked_expression1778 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_checked_expression1782 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_checked_expression1786 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_checked_expression1790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_unchecked_expression1801 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_unchecked_expression1805 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_unchecked_expression1809 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_unchecked_expression1813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_default_value_expression1824 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_default_value_expression1828 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_default_value_expression1832 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_default_value_expression1836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_anonymous_method_expression1846 = new BitSet(new ulong[]{0x4000000000000UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _explicit_anonymous_function_signature_in_anonymous_method_expression1850 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_anonymous_method_expression1855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_explicit_anonymous_function_signature1864 = new BitSet(new ulong[]{0x8080000800A080UL,0x45A426B680000000UL,0x66823AC52D9DA4B2UL,0x15UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature1868 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_explicit_anonymous_function_signature1873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list1883 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_explicit_anonymous_function_parameter_list1888 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823AC52D9DA4B2UL,0x15UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list1892 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter1905 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_explicit_anonymous_function_parameter1910 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_explicit_anonymous_function_parameter1914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_object_creation_expression1942 = new BitSet(new ulong[]{0x0UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _68_in_object_creation_expression1951 = new BitSet(new ulong[]{0x24A9801C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA4B2UL,0x414UL});
		public static readonly BitSet _argument_list_in_object_creation_expression1955 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_object_creation_expression1960 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _object_or_collection_initializer_in_object_creation_expression1964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_or_collection_initializer_in_object_creation_expression1975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_object_or_collection_initializer1989 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F680000DB4UL,0x6F927A8525DDA4B2UL,0x634UL});
		public static readonly BitSet _object_initializer_in_object_or_collection_initializer1993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collection_initializer_in_object_or_collection_initializer2000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_initializer_list_in_collection_initializer2012 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_collection_initializer2016 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_collection_initializer2021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_initializer_in_element_initializer_list2032 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_element_initializer_list2036 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x434UL});
		public static readonly BitSet _element_initializer_in_element_initializer_list2038 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _non_assignment_expression_in_element_initializer2051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_element_initializer2057 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_list_in_element_initializer2061 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_element_initializer2065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_initializer_list_in_object_initializer2082 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_object_initializer2087 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_object_initializer2092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_initializer_in_member_initializer_list2103 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_member_initializer_list2107 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _member_initializer_in_member_initializer_list2109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_member_initializer2121 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_member_initializer2125 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x434UL});
		public static readonly BitSet _initializer_value_in_member_initializer2129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_initializer_value2140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_or_collection_initializer_in_initializer_value2146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _184_in_typeof_expression2160 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_typeof_expression2164 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _unbound_type_name_in_typeof_expression2175 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _type_in_typeof_expression2186 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _192_in_typeof_expression2198 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_typeof_expression2203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unbound_type_name_start_in_unbound_type_name2220 = new BitSet(new ulong[]{0x400UL,0x20000UL});
		public static readonly BitSet _generic_dimension_specifier_in_unbound_type_name2239 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _unbound_type_name_part_in_unbound_type_name2243 = new BitSet(new ulong[]{0x400UL,0x20000UL});
		public static readonly BitSet _unbound_type_name_part_in_unbound_type_name2250 = new BitSet(new ulong[]{0x400UL,0x20000UL});
		public static readonly BitSet _generic_dimension_specifier_in_unbound_type_name2260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_unbound_type_name_start2272 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_unbound_type_name_start2275 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_unbound_type_name_start2277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_unbound_type_name_part2288 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_unbound_type_name_part2292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_generic_dimension_specifier2302 = new BitSet(new ulong[]{0x200000UL,0x400UL});
		public static readonly BitSet _commas_in_generic_dimension_specifier2306 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_generic_dimension_specifier2311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_commas2322 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _namespace_or_type_name_in_type_name2340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_or_generic_in_namespace_or_type_name2351 = new BitSet(new ulong[]{0x402UL,0x10000UL});
		public static readonly BitSet _80_in_namespace_or_type_name2356 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_namespace_or_type_name2358 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _DOT_in_namespace_or_type_name2363 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_namespace_or_type_name2367 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _identifier_in_type_or_generic2389 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_type_or_generic2393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_type_or_generic2398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qid_start_in_qid2411 = new BitSet(new ulong[]{0x200000000402UL});
		public static readonly BitSet _qid_part_in_qid2415 = new BitSet(new ulong[]{0x200000000402UL});
		public static readonly BitSet _predefined_type_in_qid_start2427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qid_start2442 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_qid_start2446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qid_start2453 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_qid_start2458 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_qid_start2462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_qid_start2469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_identifier_in_qid_part2485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_generic_argument_list2497 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_arguments_in_generic_argument_list2501 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_generic_argument_list2505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_type_arguments2516 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_arguments2519 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_type_arguments2521 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _predefined_type_in_type2552 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _type_name_in_type2556 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _rank_specifiers_in_type2561 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_type2565 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _predefined_type_in_type2594 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _type_name_in_type2598 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _69_in_type2604 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _89_in_type2609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_type2616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type2620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_type2626 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_type2628 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _predefined_type_in_non_nullable_type2641 = new BitSet(new ulong[]{0x2UL,0x8000020UL});
		public static readonly BitSet _type_name_in_non_nullable_type2645 = new BitSet(new ulong[]{0x2UL,0x8000020UL});
		public static readonly BitSet _rank_specifiers_in_non_nullable_type2654 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_non_nullable_type2658 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_non_nullable_type2667 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _192_in_non_nullable_type2679 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_non_nullable_type2683 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _type_in_non_array_type2696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_array_type2705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_unmanaged_type2714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_class_type2723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_pointer_type2732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_block2746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_block2751 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x63DUL});
		public static readonly BitSet _statement_list_in_block2755 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_block2760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statement_list2769 = new BitSet(new ulong[]{0x26AD001C1C10A0A2UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43DUL});
		public static readonly BitSet _assignment_in_expression2796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _non_assignment_expression_in_expression2802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list2813 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_expression_list2817 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_expression_list2821 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _unary_expression_in_assignment2833 = new BitSet(new ulong[]{0x200000UL,0x40285249UL,0x0UL,0x80UL});
		public static readonly BitSet _assignment_operator_in_assignment2837 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_assignment2841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expression_in_unary_expression2860 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_or_array_creation_expression_in_unary_expression2865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_unary_expression2870 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression2874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_unary_expression2880 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression2884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_unary_expression2890 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression2894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _202_in_unary_expression2900 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression2904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pre_increment_expression_in_unary_expression2910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pre_decrement_expression_in_unary_expression2916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_indirection_expression_in_unary_expression2922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addressof_expression_in_unary_expression2927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_cast_expression2939 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_cast_expression2943 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_cast_expression2947 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_cast_expression2951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_assignment_operator2961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_assignment_operator2965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_assignment_operator2969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_assignment_operator2973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_assignment_operator2977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_assignment_operator2981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_assignment_operator2985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _199_in_assignment_operator2989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_assignment_operator2993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_assignment_operator2997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignment_operator3001 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_assignment_operator3003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_pre_increment_expression3014 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_pre_increment_expression3018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_pre_decrement_expression3029 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_pre_decrement_expression3033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_pointer_indirection_expression3043 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_pointer_indirection_expression3047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_addressof_expression3057 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_addressof_expression3061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expression_in_non_assignment_expression3084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_expression_in_non_assignment_expression3095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_non_assignment_expression3101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_multiplicative_expression3117 = new BitSet(new ulong[]{0x8000000000000002UL,0x2020UL});
		public static readonly BitSet _set_in_multiplicative_expression3122 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_multiplicative_expression3132 = new BitSet(new ulong[]{0x8000000000000002UL,0x2020UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression3144 = new BitSet(new ulong[]{0x400000002UL,0x80UL});
		public static readonly BitSet _set_in_additive_expression3147 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression3155 = new BitSet(new ulong[]{0x400000002UL,0x80UL});
		public static readonly BitSet _additive_expression_in_shift_expression3168 = new BitSet(new ulong[]{0x200002UL,0x40000UL});
		public static readonly BitSet _82_in_shift_expression3172 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _GT_in_shift_expression3174 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_shift_expression3176 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _additive_expression_in_shift_expression3179 = new BitSet(new ulong[]{0x200002UL,0x40000UL});
		public static readonly BitSet _shift_expression_in_relational_expression3191 = new BitSet(new ulong[]{0x200002UL,0x801120000UL,0x4000UL});
		public static readonly BitSet _set_in_relational_expression3198 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _shift_expression_in_relational_expression3208 = new BitSet(new ulong[]{0x200002UL,0x801120000UL,0x4000UL});
		public static readonly BitSet _set_in_relational_expression3217 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _non_nullable_type_in_relational_expression3225 = new BitSet(new ulong[]{0x200002UL,0x801120000UL,0x4000UL});
		public static readonly BitSet _relational_expression_in_equality_expression3241 = new BitSet(new ulong[]{0x4000000000000002UL,0x400000UL});
		public static readonly BitSet _set_in_equality_expression3248 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _relational_expression_in_equality_expression3256 = new BitSet(new ulong[]{0x4000000000000002UL,0x400000UL});
		public static readonly BitSet _equality_expression_in_and_expression3268 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _66_in_and_expression3271 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _equality_expression_in_and_expression3275 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression3287 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_exclusive_or_expression3290 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression3294 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression3306 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _198_in_inclusive_or_expression3311 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression3315 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _inclusive_or_expression_in_conditional_and_expression3327 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _65_in_conditional_and_expression3332 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _inclusive_or_expression_in_conditional_and_expression3336 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _conditional_and_expression_in_conditional_or_expression3348 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _200_in_conditional_or_expression3352 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _conditional_and_expression_in_conditional_or_expression3356 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _conditional_or_expression_in_null_coalescing_expression3369 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_null_coalescing_expression3374 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _conditional_or_expression_in_null_coalescing_expression3378 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _null_coalescing_expression_in_conditional_expression3390 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_conditional_expression3395 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_conditional_expression3399 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_conditional_expression3403 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_conditional_expression3407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_function_signature_in_lambda_expression3429 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_lambda_expression3433 = new BitSet(new ulong[]{0x24AD001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x434UL});
		public static readonly BitSet _anonymous_function_body_in_lambda_expression3437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_anonymous_function_signature3446 = new BitSet(new ulong[]{0x8080000800A080UL,0x45A426B680000000UL,0x66823AC52D9DA4B2UL,0x15UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_list_in_anonymous_function_signature3449 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_list_in_anonymous_function_signature3455 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_signature3459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_list_in_anonymous_function_signature3464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3475 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_implicit_anonymous_function_parameter_list3480 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3484 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_implicit_anonymous_function_parameter3496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_anonymous_function_body3505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_anonymous_function_body3510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _from_clause_in_query_expression3524 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80004018090UL,0x4UL});
		public static readonly BitSet _query_body_in_query_expression3528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_body_clauses_in_query_body3540 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000080UL});
		public static readonly BitSet _select_or_group_clause_in_query_body3545 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _query_continuation_in_query_body3556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_query_continuation3568 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_query_continuation3572 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80004018090UL,0x4UL});
		public static readonly BitSet _query_body_in_query_continuation3576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_body_clause_in_query_body_clauses3585 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4018010UL,0x4UL});
		public static readonly BitSet _from_clause_in_query_body_clause3596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_clause_in_query_body_clause3601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _where_clause_in_query_body_clause3606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _join_clause_in_query_body_clause3611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_clause_in_query_body_clause3616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_from_clause3625 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_from_clause3629 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_from_clause3634 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_from_clause3638 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_from_clause3642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_join_clause3652 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_join_clause3656 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_join_clause3661 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_join_clause3665 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_join_clause3669 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_join_clause3673 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_join_clause3677 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_join_clause3681 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_join_clause3685 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_join_clause3688 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_join_clause3690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_let_clause3702 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_let_clause3706 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_let_clause3710 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_let_clause3714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_orderby_clause3723 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _ordering_list_in_orderby_clause3727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ordering_in_ordering_list3737 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_ordering_list3742 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _ordering_in_ordering_list3746 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _expression_in_ordering3758 = new BitSet(new ulong[]{0x0UL,0x20001000000000UL});
		public static readonly BitSet _ordering_direction_in_ordering3763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_clause_in_select_or_group_clause3789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _group_clause_in_select_or_group_clause3794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_select_clause3804 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_select_clause3808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_group_clause3818 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_group_clause3822 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_group_clause3826 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_group_clause3830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _194_in_where_clause3840 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_where_clause3844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_boolean_expression3854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_attribute_in_global_attributes3868 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_global_attribute3880 = new BitSet(new ulong[]{0x0UL,0x2000000000UL,0x100000UL});
		public static readonly BitSet _global_attribute_target_specifier_in_global_attribute3884 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _attribute_list_in_global_attribute3888 = new BitSet(new ulong[]{0x0UL,0x10000400UL});
		public static readonly BitSet _74_in_global_attribute3892 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_global_attribute3897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_attribute_target_in_global_attribute_target_specifier3908 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_global_attribute_target_specifier3912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_sections_in_attributes3938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_section_in_attribute_sections3949 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_attribute_section3961 = new BitSet(new ulong[]{0x8000000800A080UL,0x4D20023680000000UL,0x408019852519A0B0UL,0x14UL});
		public static readonly BitSet _attribute_target_specifier_in_attribute_section3965 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _attribute_list_in_attribute_section3970 = new BitSet(new ulong[]{0x0UL,0x10000400UL});
		public static readonly BitSet _74_in_attribute_section3974 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_section3979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_target_in_attribute_target_specifier3990 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_attribute_target_specifier3994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_attribute_list4040 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_attribute_list4043 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _attribute_in_attribute_list4045 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_attribute4059 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _attribute_arguments_in_attribute4063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_attribute_arguments4076 = new BitSet(new ulong[]{0x24A9801C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _RPAREN_in_attribute_arguments4081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _positional_argument_in_attribute_arguments4101 = new BitSet(new ulong[]{0x8080000800A080UL,0x4520023680000400UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _named_argument_in_attribute_arguments4120 = new BitSet(new ulong[]{0x8080000800A080UL,0x4520023680000400UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _74_in_attribute_arguments4136 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _positional_argument_in_attribute_arguments4138 = new BitSet(new ulong[]{0x8080000800A080UL,0x4520023680000400UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _RPAREN_in_attribute_arguments4149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _positional_argument_in_positional_argument_list4165 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_positional_argument_list4168 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _positional_argument_in_positional_argument_list4170 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attribute_argument_expression_in_positional_argument4183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _named_argument_in_named_argument_list4194 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_named_argument_list4197 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _named_argument_in_named_argument_list4199 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_named_argument4212 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_named_argument4216 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _attribute_argument_expression_in_named_argument4220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_attribute_argument_expression4231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_class_declaration4246 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_class_declaration4249 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x24UL});
		public static readonly BitSet _class_base_in_class_declaration4253 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x24UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_class_declaration4258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _class_body_in_class_declaration4263 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_class_declaration4267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_class_base4282 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _interface_type_list_in_class_base4286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_interface_type_list4298 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_interface_type_list4301 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_interface_type_list4305 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _197_in_class_body4318 = new BitSet(new ulong[]{0x8000000802A080UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBDB2UL,0x617UL});
		public static readonly BitSet _class_member_declarations_in_class_body4322 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_class_body4327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_member_declaration_in_class_member_declarations4337 = new BitSet(new ulong[]{0x8000000802A082UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBDB2UL,0x417UL});
		public static readonly BitSet _112_in_constant_declaration4350 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_constant_declaration4354 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_constant_declaration4358 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_constant_declaration4362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_declarator_in_constant_declarators4372 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_constant_declarators4375 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _constant_declarator_in_constant_declarators4377 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_constant_declarator4389 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_constant_declarator4394 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _constant_expression_in_constant_declarator4398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_constant_expression4410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_declarators_in_field_declaration4421 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_field_declaration4425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_declarator_in_variable_declarators4435 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_variable_declarators4438 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _variable_declarator_in_variable_declarators4442 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_variable_declarator4454 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_variable_declarator4457 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x434UL});
		public static readonly BitSet _variable_initializer_in_variable_declarator4461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _method_header_in_method_declaration4477 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _method_body_in_method_declaration4481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_method_header4491 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_method_header4494 = new BitSet(new ulong[]{0x8080000800A080UL,0x45A426B688000000UL,0x66923AC56D9DA4B2UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_method_header4498 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_method_header4503 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_method_header4507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_method_body4518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qid_in_member_name4528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_property_declaration4542 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_property_declaration4546 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x101A00001020UL});
		public static readonly BitSet _accessor_declarations_in_property_declaration4550 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_property_declaration4554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributes_in_accessor_declarations4564 = new BitSet(new ulong[]{0x0UL,0x0UL,0x101A00001020UL});
		public static readonly BitSet _get_accessor_declaration_in_accessor_declarations4570 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x101A00001000UL});
		public static readonly BitSet _attributes_in_accessor_declarations4574 = new BitSet(new ulong[]{0x2UL,0x0UL,0x101A00001000UL});
		public static readonly BitSet _set_accessor_declaration_in_accessor_declarations4579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_accessor_declaration_in_accessor_declarations4586 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x1A00001020UL});
		public static readonly BitSet _attributes_in_accessor_declarations4590 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1A00001020UL});
		public static readonly BitSet _get_accessor_declaration_in_accessor_declarations4595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_modifier_in_get_accessor_declaration4607 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_get_accessor_declaration4612 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _accessor_body_in_get_accessor_declaration4616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_modifier_in_set_accessor_declaration4626 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_set_accessor_declaration4631 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _accessor_body_in_set_accessor_declaration4635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_accessor_body4667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_event_declaration4679 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_event_declaration4683 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x14UL});
		public static readonly BitSet _member_name_in_event_declaration4698 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_event_declaration4702 = new BitSet(new ulong[]{0x0UL,0x208000000UL,0x8000000000UL});
		public static readonly BitSet _event_accessor_declarations_in_event_declaration4706 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_event_declaration4710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_declarators_in_event_declaration4716 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_event_declaration4720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_event_modifiers4734 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _attributes_in_event_accessor_declarations4745 = new BitSet(new ulong[]{0x0UL,0x200000000UL,0x8000000000UL});
		public static readonly BitSet _add_accessor_declaration_in_event_accessor_declarations4752 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x8000000000UL});
		public static readonly BitSet _attributes_in_event_accessor_declarations4756 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _remove_accessor_declaration_in_event_accessor_declarations4761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _remove_accessor_declaration_in_event_accessor_declarations4782 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _attributes_in_event_accessor_declarations4786 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _add_accessor_declaration_in_event_accessor_declarations4791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_add_accessor_declaration4803 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_add_accessor_declaration4807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_remove_accessor_declaration4817 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_remove_accessor_declaration4821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENUM_in_enum_declaration4835 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_enum_declaration4839 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x20UL});
		public static readonly BitSet _enum_base_in_enum_declaration4843 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _enum_body_in_enum_declaration4848 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_enum_declaration4852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_enum_base4863 = new BitSet(new ulong[]{0x0UL,0x240000000000UL,0x2600220000040400UL});
		public static readonly BitSet _integral_type_in_enum_base4867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_enum_body4877 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023688000000UL,0x408018852519A0B0UL,0x214UL});
		public static readonly BitSet _enum_member_declarations_in_enum_body4880 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_enum_body4882 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_enum_body4889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_member_declaration_in_enum_member_declarations4899 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_enum_member_declarations4902 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023688000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _enum_member_declaration_in_enum_member_declarations4904 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attributes_in_enum_member_declaration4916 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_enum_member_declaration4921 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_enum_member_declaration4926 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_enum_member_declaration4930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_delegate_declaration4991 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _return_type_in_delegate_declaration4995 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_delegate_declaration4999 = new BitSet(new ulong[]{0x0UL,0x20010UL});
		public static readonly BitSet _variant_generic_parameter_list_in_delegate_declaration5002 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_delegate_declaration5010 = new BitSet(new ulong[]{0x8080000800A080UL,0x45A426B688000000UL,0x66923AC56D9DA4B2UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_delegate_declaration5014 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_delegate_declaration5019 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_delegate_declaration5023 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_delegate_declaration5028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_delegate_modifiers5038 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _81_in_variant_generic_parameter_list5050 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023688000000UL,0x408018852D19A2B0UL,0x14UL});
		public static readonly BitSet _variant_type_parameters_in_variant_generic_parameter_list5054 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_variant_generic_parameter_list5058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variant_type_variable_name_in_variant_type_parameters5068 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_variant_type_parameters5071 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023688000000UL,0x408018852D19A2B0UL,0x14UL});
		public static readonly BitSet _variant_type_variable_name_in_variant_type_parameters5073 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attributes_in_variant_type_variable_name5085 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852D19A2B0UL,0x14UL});
		public static readonly BitSet _variance_annotation_in_variant_type_variable_name5090 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _type_variable_name_in_variant_type_variable_name5095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_parameter_constraints_clause_in_type_parameter_constraints_clauses5120 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraints_clauses5125 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clause_in_type_parameter_constraints_clauses5129 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _194_in_type_parameter_constraints_clause5141 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _type_variable_name_in_type_parameter_constraints_clause5145 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_type_parameter_constraints_clause5149 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520823680000000UL,0x408418852559A0B0UL,0x14UL});
		public static readonly BitSet _type_parameter_constraint_list_in_type_parameter_constraints_clause5153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_type_parameter_constraint_list5218 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraint_list5229 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _secondary_constraint_list_in_type_parameter_constraint_list5233 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraint_list5240 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list5244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _secondary_constraint_list_in_type_parameter_constraint_list5251 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraint_list5256 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list5260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list5267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _secondary_constraint_in_secondary_constraint_list5281 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_secondary_constraint_list5284 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _secondary_constraint_in_secondary_constraint_list5286 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_secondary_constraint5298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_type_variable_name5310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_constructor_constraint5320 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_constructor_constraint5324 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_constraint5328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_return_type5338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_return_type5344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formal_parameter_in_formal_parameter_list5353 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_formal_parameter_list5356 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B688000000UL,0x66923AC56D9DA4B2UL,0x15UL});
		public static readonly BitSet _formal_parameter_in_formal_parameter_list5358 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attributes_in_formal_parameter5370 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66923AC56D9DA4B2UL,0x15UL});
		public static readonly BitSet _fixed_parameter_in_formal_parameter5376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_array_in_formal_parameter5380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_formal_parameter5387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fixed_parameter_in_fixed_parameters5397 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_fixed_parameters5402 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66923AC52D9DA4B2UL,0x15UL});
		public static readonly BitSet _fixed_parameter_in_fixed_parameters5406 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _parameter_modifier_in_fixed_parameter5419 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_fixed_parameter5424 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_fixed_parameter5428 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _default_argument_in_fixed_parameter5432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_default_argument5444 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_default_argument5446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_parameter_array5473 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_parameter_array5477 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_parameter_array5481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_interface_declaration5493 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_interface_declaration5497 = new BitSet(new ulong[]{0x0UL,0x28000UL,0x0UL,0x24UL});
		public static readonly BitSet _variant_generic_parameter_list_in_interface_declaration5501 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x24UL});
		public static readonly BitSet _interface_base_in_interface_declaration5510 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x24UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_interface_declaration5515 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _interface_body_in_interface_declaration5520 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_interface_declaration5524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_interface_modifiers5536 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _79_in_interface_base5551 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _interface_type_list_in_interface_base5553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_interface_body5563 = new BitSet(new ulong[]{0x8000000800A080UL,0x6DA426B788000000UL,0xF6833EBF35DDB4B2UL,0x217UL});
		public static readonly BitSet _interface_member_declarations_in_interface_body5567 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_interface_body5572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_member_declaration_in_interface_member_declarations5582 = new BitSet(new ulong[]{0x8000000800A082UL,0x6DA426B788000000UL,0xF6833EBF35DDB4B2UL,0x17UL});
		public static readonly BitSet _attributes_in_interface_member_declaration5593 = new BitSet(new ulong[]{0x8000000800A080UL,0x6DA426B780000000UL,0xF6833EBF35DDB4B2UL,0x17UL});
		public static readonly BitSet _modifiers_in_interface_member_declaration5599 = new BitSet(new ulong[]{0x8000000800A080UL,0x4DA426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _192_in_interface_member_declaration5605 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _interface_method_declaration_in_interface_member_declaration5609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_event_declaration_in_interface_member_declaration5615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_interface_member_declaration5621 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x409018852519A0B0UL,0x14UL});
		public static readonly BitSet _interface_method_declaration_in_interface_member_declaration5637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_property_declaration_in_interface_member_declaration5662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_indexer_declaration_in_interface_member_declaration5672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_interface_property_declaration5691 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_interface_property_declaration5695 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x100000000020UL});
		public static readonly BitSet _interface_accessor_declarations_in_interface_property_declaration5699 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_interface_property_declaration5703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_interface_method_declaration5713 = new BitSet(new ulong[]{0x0UL,0x20010UL});
		public static readonly BitSet _generic_argument_list_in_interface_method_declaration5717 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_interface_method_declaration5725 = new BitSet(new ulong[]{0x8080000800A080UL,0x45A426B688000000UL,0x66923AC56D9DA4B2UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_interface_method_declaration5729 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_interface_method_declaration5734 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_interface_method_declaration5738 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_method_declaration5743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_interface_event_declaration5756 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_interface_event_declaration5760 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_interface_event_declaration5764 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_event_declaration5768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_interface_indexer_declaration5782 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_interface_indexer_declaration5786 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B688000000UL,0x66923AC56D9DA4B2UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_interface_indexer_declaration5790 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_interface_indexer_declaration5794 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_interface_indexer_declaration5798 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x100000000020UL});
		public static readonly BitSet _interface_accessor_declarations_in_interface_indexer_declaration5802 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_interface_indexer_declaration5806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributes_in_interface_accessor_declarations5816 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000020UL});
		public static readonly BitSet _interface_get_accessor_declaration_in_interface_accessor_declarations5825 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x100000000000UL});
		public static readonly BitSet _attributes_in_interface_accessor_declarations5829 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _interface_set_accessor_declaration_in_interface_accessor_declarations5834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_set_accessor_declaration_in_interface_accessor_declarations5841 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x20UL});
		public static readonly BitSet _attributes_in_interface_accessor_declarations5845 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _interface_get_accessor_declaration_in_interface_accessor_declarations5850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_interface_get_accessor_declaration5862 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_get_accessor_declaration5866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_interface_set_accessor_declaration5878 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_set_accessor_declaration5882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_method_modifiers5894 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _178_in_struct_declaration5908 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_struct_declaration5912 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x24UL});
		public static readonly BitSet _struct_interfaces_in_struct_declaration5916 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x24UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_struct_declaration5921 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _struct_body_in_struct_declaration5926 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_struct_declaration5930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_modifier_in_struct_modifiers5941 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000001A00401000UL});
		public static readonly BitSet _79_in_struct_interfaces5982 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _interface_type_list_in_struct_interfaces5986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_struct_body5995 = new BitSet(new ulong[]{0x8000000802A080UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBDB2UL,0x217UL});
		public static readonly BitSet _struct_member_declarations_in_struct_body5999 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_struct_body6004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_member_declaration_in_struct_member_declarations6013 = new BitSet(new ulong[]{0x8000000802A082UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBDB2UL,0x17UL});
		public static readonly BitSet _attributes_in_struct_member_declaration6024 = new BitSet(new ulong[]{0x8000000802A080UL,0x7DB5A6B780000000UL,0xF6873EBFB5DDBDB2UL,0x17UL});
		public static readonly BitSet _modifiers_in_struct_member_declaration6031 = new BitSet(new ulong[]{0x8000000802A080UL,0x5DB5A6B680000000UL,0x66863A85A59DADB2UL,0x15UL});
		public static readonly BitSet _112_in_struct_member_declaration6037 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_struct_member_declaration6041 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_struct_member_declaration6045 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_struct_member_declaration6049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _event_declaration_in_struct_member_declaration6054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_struct_member_declaration6061 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A4A6B680000000UL,0x66863A85259DACB2UL,0x14UL});
		public static readonly BitSet _method_declaration_in_struct_member_declaration6064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_struct_member_declaration6075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_struct_member_declaration6086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_member_declaration6097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_struct_member_declaration6104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_struct_member_declaration6110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_struct_member_declaration6117 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x14UL});
		public static readonly BitSet _method_declaration_in_struct_member_declaration6121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_struct_member_declaration6126 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66923A85279DA4B2UL,0x14UL});
		public static readonly BitSet _method_declaration_in_struct_member_declaration6140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_declaration_in_struct_member_declaration6159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_struct_member_declaration6182 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_struct_member_declaration6184 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _indexer_declaration_in_struct_member_declaration6186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_declaration_in_struct_member_declaration6195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _field_declaration_in_struct_member_declaration6208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operator_declaration_in_struct_member_declaration6226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_member_declaration6244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_declaration_in_struct_member_declaration6250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_declaration_in_struct_member_declaration6257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_operator_declaration_in_struct_member_declaration6263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_declaration_in_struct_member_declaration6268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_declarator_in_indexer_declaration6287 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_indexer_declaration6291 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x101A00001020UL});
		public static readonly BitSet _accessor_declarations_in_indexer_declaration6295 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_indexer_declaration6299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_indexer_declarator6311 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_indexer_declarator6315 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B688000000UL,0x66923AC56D9DA4B2UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_indexer_declarator6319 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_indexer_declarator6323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operator_declarator_in_operator_declaration6336 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _operator_body_in_operator_declaration6340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_operator_declarator6350 = new BitSet(new ulong[]{0xE020000400300000UL,0x215629A4UL,0x0UL,0x440UL});
		public static readonly BitSet _set_in_operator_declarator6355 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_operator_declarator6365 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_operator_declarator6369 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_operator_declarator6373 = new BitSet(new ulong[]{0x800000000000UL,0x400UL});
		public static readonly BitSet _binary_operator_declarator_in_operator_declarator6378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_declarator_in_operator_declarator6382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _overloadable_unary_operator_in_operator_declarator6389 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_operator_declarator6393 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_operator_declarator6397 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_operator_declarator6399 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _unary_operator_declarator_in_operator_declarator6403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _overloadable_binary_operator_in_operator_declarator6409 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_operator_declarator6413 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_operator_declarator6417 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_operator_declarator6419 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _binary_operator_declarator_in_operator_declarator6423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RPAREN_in_unary_operator_declarator6437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_binary_operator_declarator6484 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_binary_operator_declarator6488 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_binary_operator_declarator6492 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_binary_operator_declarator6496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_overloadable_binary_operator6509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_overloadable_binary_operator6513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_overloadable_binary_operator6517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_overloadable_binary_operator6521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _198_in_overloadable_binary_operator6525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_overloadable_binary_operator6529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_overloadable_binary_operator6533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator6537 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator6539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_overloadable_binary_operator6543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _62_in_overloadable_binary_operator6547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator6551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_overloadable_binary_operator6555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_overloadable_binary_operator6559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_overloadable_binary_operator6563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_operator_declarator_in_conversion_operator_declaration6575 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _operator_body_in_conversion_operator_declaration6579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_conversion_operator_declarator6589 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_conversion_operator_declarator6598 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_conversion_operator_declarator6602 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_conversion_operator_declarator6606 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_conversion_operator_declarator6610 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_conversion_operator_declarator6614 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_conversion_operator_declarator6618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_operator_body6628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_declarator_in_constructor_declaration6640 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _constructor_body_in_constructor_declaration6644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_constructor_declarator6654 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_constructor_declarator6658 = new BitSet(new ulong[]{0x8080000800A080UL,0x45A426B688000000UL,0x66923AC56D9DA4B2UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_constructor_declarator6662 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_declarator6667 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _constructor_initializer_in_constructor_declarator6671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_constructor_initializer6682 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x10000000000000UL});
		public static readonly BitSet _set_in_constructor_initializer6686 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_constructor_initializer6696 = new BitSet(new ulong[]{0x24A9801C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA4B2UL,0x414UL});
		public static readonly BitSet _argument_list_in_constructor_initializer6700 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_initializer6705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_constructor_body6715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _202_in_destructor_declaration6733 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_destructor_declaration6736 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_destructor_declaration6740 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_destructor_declaration6744 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _destructor_body_in_destructor_declaration6749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_destructor_body6759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invocation_start_in_invocation_expression6771 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _arguments_in_invocation_expression6793 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _invocation_part_in_invocation_expression6797 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _invocation_part_in_invocation_expression6808 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _arguments_in_invocation_expression6814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_invocation_start6824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_invocation_start6841 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_invocation_start6845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_invocation_start6850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_invocation_start6856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_invocation_start6861 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_invocation_start6866 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_invocation_start6870 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeof_expression_in_invocation_start6877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_identifier_in_invocation_part6902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brackets_in_invocation_part6907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_statement_in_statement6926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labeled_statement_in_statement6941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _embedded_statement_in_statement6946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_embedded_statement6958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_statement_in_embedded_statement6963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iteration_statement_in_embedded_statement6969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _jump_statement_in_embedded_statement6975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _try_statement_in_embedded_statement6982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _checked_statement_in_embedded_statement6987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unchecked_statement_in_embedded_statement6992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lock_statement_in_embedded_statement6997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_statement_in_embedded_statement7002 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _yield_statement_in_embedded_statement7008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unsafe_statement_in_embedded_statement7014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fixed_statement_in_embedded_statement7019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_statement_in_embedded_statement7024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_fixed_statement7036 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_fixed_statement7040 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _pointer_type_in_fixed_statement7044 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _fixed_pointer_declarators_in_fixed_statement7046 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_fixed_statement7050 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_fixed_statement7054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fixed_pointer_declarator_in_fixed_pointer_declarators7064 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_fixed_pointer_declarators7069 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _fixed_pointer_declarator_in_fixed_pointer_declarators7073 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_fixed_pointer_declarator7085 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_fixed_pointer_declarator7089 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _fixed_pointer_initializer_in_fixed_pointer_declarator7093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_fixed_pointer_initializer7105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _188_in_unsafe_statement7114 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_unsafe_statement7118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_labeled_statement7127 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_labeled_statement7131 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43DUL});
		public static readonly BitSet _statement_in_labeled_statement7135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_declaration_statement7146 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _local_constant_declaration_in_declaration_statement7152 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_declaration_statement7155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_type_in_local_variable_declaration7165 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _local_variable_declarators_in_local_variable_declaration7169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _190_in_local_variable_type7185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_local_variable_type7196 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_local_variable_type7201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declarator_in_local_variable_declarators7211 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_local_variable_declarators7214 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _local_variable_declarator_in_local_variable_declarators7216 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_local_variable_declarator7228 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_local_variable_declarator7231 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F92FA8525DDA4B2UL,0x434UL});
		public static readonly BitSet _local_variable_initializer_in_local_variable_declarator7235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_local_variable_initializer7248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_initializer_in_local_variable_initializer7253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stackalloc_initializer_in_local_variable_initializer7259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_stackalloc_initializer7268 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _unmanaged_type_in_stackalloc_initializer7272 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_stackalloc_initializer7276 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_stackalloc_initializer7280 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_stackalloc_initializer7284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_local_constant_declaration7294 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_local_constant_declaration7298 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_local_constant_declaration7302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_statement7312 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_expression_statement7316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement_expression7328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_statement_in_selection_statement7339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switch_statement_in_selection_statement7344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_if_statement7356 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_if_statement7360 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_if_statement7364 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_if_statement7368 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_if_statement7372 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _else_statement_in_if_statement7381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_else_statement7394 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_else_statement7398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_switch_statement7408 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_switch_statement7412 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_switch_statement7416 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_switch_statement7420 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _switch_block_in_switch_statement7424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_switch_block7434 = new BitSet(new ulong[]{0x0UL,0x8080000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _switch_sections_in_switch_block7438 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_switch_block7443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switch_section_in_switch_sections7453 = new BitSet(new ulong[]{0x2UL,0x8080000000000UL});
		public static readonly BitSet _switch_labels_in_switch_section7464 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43DUL});
		public static readonly BitSet _statement_list_in_switch_section7468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switch_label_in_switch_labels7478 = new BitSet(new ulong[]{0x2UL,0x8080000000000UL});
		public static readonly BitSet _107_in_switch_label7490 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _constant_expression_in_switch_label7494 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_switch_label7498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_switch_label7505 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_switch_label7509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _while_statement_in_iteration_statement7520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _do_statement_in_iteration_statement7525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_statement_in_iteration_statement7530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _foreach_statement_in_iteration_statement7535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _195_in_while_statement7545 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_while_statement7549 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_while_statement7553 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_while_statement7557 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_while_statement7561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_do_statement7571 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_do_statement7575 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x8UL});
		public static readonly BitSet _195_in_do_statement7579 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_do_statement7583 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_do_statement7587 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_do_statement7591 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_do_statement7595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_for_statement7605 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_for_statement7609 = new BitSet(new ulong[]{0x24AD001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x415UL});
		public static readonly BitSet _for_initializer_in_for_statement7613 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_for_statement7618 = new BitSet(new ulong[]{0x24AD001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _for_condition_in_for_statement7622 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_for_statement7627 = new BitSet(new ulong[]{0x24A9801C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _for_iterator_in_for_statement7631 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_for_statement7636 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_for_statement7640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_for_initializer7656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_expression_list_in_for_initializer7661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_expression_in_for_condition7673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_expression_list_in_for_iterator7683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_expression_in_statement_expression_list7693 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_statement_expression_list7696 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _statement_expression_in_statement_expression_list7698 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _131_in_foreach_statement7710 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_foreach_statement7714 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _local_variable_type_in_foreach_statement7718 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_foreach_statement7722 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_foreach_statement7726 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_foreach_statement7730 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_foreach_statement7734 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_foreach_statement7738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _break_statement_in_jump_statement7748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continue_statement_in_jump_statement7753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _goto_statement_in_jump_statement7758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_statement_in_jump_statement7763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throw_statement_in_jump_statement7768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_break_statement7778 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_break_statement7782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_continue_statement7792 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_continue_statement7796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_goto_statement7806 = new BitSet(new ulong[]{0x8000000800A080UL,0x45280A3680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_goto_statement7812 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _107_in_goto_statement7820 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _constant_expression_in_goto_statement7824 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _115_in_goto_statement7832 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_goto_statement7837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_return_statement7847 = new BitSet(new ulong[]{0x24AD001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_return_statement7851 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_return_statement7856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_throw_statement7866 = new BitSet(new ulong[]{0x24AD001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_throw_statement7870 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_throw_statement7875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_try_statement7890 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_try_statement7894 = new BitSet(new ulong[]{0x0UL,0x8000100000000000UL});
		public static readonly BitSet _catch_clauses_in_try_statement7900 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _finally_clause_in_try_statement7904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finally_clause_in_try_statement7916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_catch_clauses7927 = new BitSet(new ulong[]{0x4000000000000UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _specific_catch_clauses_in_catch_clauses7932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _general_catch_clause_in_catch_clauses7936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _specific_catch_clause_in_specific_catch_clauses7947 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_specific_catch_clauses7952 = new BitSet(new ulong[]{0x4000000000000UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _specific_catch_clause_in_specific_catch_clauses7957 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _general_catch_clause_in_specific_catch_clauses7961 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _68_in_specific_catch_clause7973 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _class_type_in_specific_catch_clause7977 = new BitSet(new ulong[]{0x8080000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_specific_catch_clause7981 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_specific_catch_clause7986 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_specific_catch_clause7990 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_general_catch_clause8000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_finally_clause8010 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_finally_clause8014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_checked_statement8024 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_checked_statement8028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_unchecked_statement8038 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_unchecked_statement8042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_lock_statement8052 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_lock_statement8056 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_lock_statement8059 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_lock_statement8063 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_lock_statement8067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_statement8077 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_using_statement8081 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x415UL});
		public static readonly BitSet _resource_acquisition_in_using_statement8086 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_using_statement8090 = new BitSet(new ulong[]{0x26AD001C1C10A0A0UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4FFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_using_statement8095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_resource_acquisition8111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_resource_acquisition8116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _196_in_yield_statement8126 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x10000000000UL});
		public static readonly BitSet _168_in_yield_statement8131 = new BitSet(new ulong[]{0x24A9001C0C10A0A0UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _expression_in_yield_statement8135 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_yield_statement8139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_yield_statement8154 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_yield_statement8158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_identifier8261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _also_keyword_in_identifier8265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_in_assignment_list10780 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_assignment_list10782 = new BitSet(new ulong[]{0x24A9001C0C10A0A2UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _attributes_in_field_declarations10795 = new BitSet(new ulong[]{0x8000000800A080UL,0x65A426B780000000UL,0xF6833EBF35DDB4B2UL,0x17UL});
		public static readonly BitSet _modifiers_in_field_declarations10800 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_field_declarations10805 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _field_declaration_in_field_declarations10809 = new BitSet(new ulong[]{0x8000000800A082UL,0x65A426B788000000UL,0xF6833EBF35DDB4B2UL,0x17UL});
		public static readonly BitSet _attributes_in_property_declaration_list10822 = new BitSet(new ulong[]{0x8000000800A080UL,0x65A426B780000000UL,0xF6833EBF35DDB4B2UL,0x17UL});
		public static readonly BitSet _modifiers_in_property_declaration_list10827 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_property_declaration_list10832 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x14UL});
		public static readonly BitSet _property_declaration_in_property_declaration_list10836 = new BitSet(new ulong[]{0x8000000800A082UL,0x65A426B788000000UL,0xF6833EBF35DDB4B2UL,0x17UL});
		public static readonly BitSet _constant_declaration_in_constant_declarations10848 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _literal_in_literals10858 = new BitSet(new ulong[]{0x429001804100022UL});
		public static readonly BitSet _attributes_in_delegate_declaration_list10870 = new BitSet(new ulong[]{0x0UL,0x2010000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _modifiers_in_delegate_declaration_list10875 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _delegate_declaration_in_delegate_declaration_list10880 = new BitSet(new ulong[]{0x2UL,0x2010000108000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _local_variable_declaration_in_local_variable_declaration_list10893 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_local_variable_declaration_list10895 = new BitSet(new ulong[]{0x8000000800A082UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _local_variable_initializer_in_local_variable_initializer_list10908 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_local_variable_initializer_list10910 = new BitSet(new ulong[]{0x24A9001C0C10A0A2UL,0x45BC66F6800009B4UL,0x6F92FA8525DDA4B2UL,0x434UL});
		public static readonly BitSet _expression_in_expression_list_test10923 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_expression_list_test10925 = new BitSet(new ulong[]{0x24A9001C0C10A0A2UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression_list10938 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_unary_expression_list10940 = new BitSet(new ulong[]{0x24A9001C0C10A0A2UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _invocation_expression_in_invocation_expression_list10953 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_invocation_expression_list10955 = new BitSet(new ulong[]{0x8000000800A082UL,0x45A426F680000000UL,0x67923A85259DA4B2UL,0x14UL});
		public static readonly BitSet _primary_expression_in_primary_expression_list10968 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_primary_expression_list10970 = new BitSet(new ulong[]{0x4A900180C10A0A2UL,0x45BC66F680000010UL,0x6F927A8525DDA4B2UL,0x14UL});
		public static readonly BitSet _non_assignment_expression_in_non_assignment_expression_list10983 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_non_assignment_expression_list10985 = new BitSet(new ulong[]{0x24A9001C0C10A0A2UL,0x45BC66F6800009B4UL,0x6F927A8525DDA4B2UL,0x414UL});
		public static readonly BitSet _modifiers_in_method_declarations10998 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _192_in_method_declarations11002 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x14UL});
		public static readonly BitSet _type_in_method_declarations11006 = new BitSet(new ulong[]{0x4A900180C10A0A0UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x14UL});
		public static readonly BitSet _method_declaration_in_method_declarations11009 = new BitSet(new ulong[]{0x8000000800A082UL,0x65A426B780000000UL,0xF6833EBF35DDB4B2UL,0x17UL});
		public static readonly BitSet _159_in_synpred1_cs291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred2_cs565 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_synpred2_cs569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred3_cs584 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred3_cs588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred4_cs603 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_synpred4_cs607 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_synpred4_cs611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_synpred5_cs733 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_synpred5_cs738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_synpred6_cs758 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_synpred6_cs762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_creation_expression_in_synpred7_cs798 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _set_in_synpred7_cs802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_creation_expression_in_synpred8_cs846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred9_cs973 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_synpred9_cs978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_synpred10_cs1265 = new BitSet(new ulong[]{0x8000000800A080UL,0x45A426B680000000UL,0x66823A85259DA4B2UL,0x15UL});
		public static readonly BitSet _type_in_synpred10_cs1269 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_synpred10_cs1273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_creation_expression_in_synpred11_cs1514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred12_cs1596 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _set_in_synpred12_cs1600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unbound_type_name_in_synpred13_cs2170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_dimension_specifier_in_synpred14_cs2230 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_synpred14_cs2234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred15_cs2380 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_synpred15_cs2384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred16_cs2433 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_synpred16_cs2437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_synpred17_cs2538 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _type_name_in_synpred17_cs2542 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred17_cs2546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_synpred18_cs2573 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _type_name_in_synpred18_cs2577 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _69_in_synpred18_cs2582 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _89_in_synpred18_cs2587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_synpred19_cs2787 = new BitSet(new ulong[]{0x200000UL,0x40285249UL,0x0UL,0x80UL});
		public static readonly BitSet _assignment_operator_in_synpred19_cs2791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expression_in_synpred20_cs2855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_function_signature_in_synpred21_cs3075 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_synpred21_cs3079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_expression_in_synpred22_cs3090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_synpred23_cs3551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_synpred24_cs4107 = new BitSet(new ulong[]{0x8000000800A080UL,0x4520023680000000UL,0x408018852519A0B0UL,0x14UL});
		public static readonly BitSet _identifier_in_synpred24_cs4111 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_synpred24_cs4115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred25_cs4689 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred25_cs4693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred26_cs5628 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_synpred26_cs5632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred27_cs5653 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred27_cs5657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred28_cs6131 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_synpred28_cs6135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred29_cs6150 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred29_cs6154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred30_cs6169 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_synpred30_cs6173 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_synpred30_cs6177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred31_cs6778 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _set_in_synpred31_cs6782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred32_cs6831 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_synpred32_cs6836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_statement_in_synpred33_cs6921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred34_cs6932 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred34_cs6936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _190_in_synpred35_cs7180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_synpred36_cs7191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_synpred37_cs7376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_synpred38_cs7651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_synpred39_cs8106 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
